79,A,"How can you get Subclipse in Aptana to work with the newest release of Subversion? The version of Subclipse (1.2.4) currently available through Aptana's automagic Plugins Manager does not work with the newest version of Subversion. I see on the Subclipse website however that they have 1.4.2 out for Eclipse. So I added a new remote update site to my Update manager. When I tried to install it it told me I needed Mylyn 3.0.0. So I after much searching I found Mylyn 3.0.0 and added another new remote update site to my update manager. Then when I tried to install that it told me I needed org.eclipse.ui 3.3.0 or equivalent. Looking at the configuration details for Aptana it looks like it is built against eclipse 3.2.2. Does anyone know if there is a way to upgrade the version of Eclipse Aptana is built against to 3.3.0? Or if there is some other way to get Subclipse to work with the very newest version of Subversion? I know this isn't necessarily a ""programming"" question but I hope it's ok since it's highly relevant to the programming experience... if you're not going to be using mylyn just uncheck that dependency. I'm not really familiar with Aptana but in eclipse you can expand whats being installed and uncheck anything you don't need.  Subclipse does not require Mylyn but the update site includes a plugin that integrates Mylyn and Subclipse. This is intended for people that use Mylyn. In your case you would want to just de-select Mylyn in the update dialog. Subclipse also requires Subversion 1.5 and the corresponding version of the JavaHL native libraries. I have written the start of an FAQ to help people understand JavaHL and how to get it. See: http://desktop-eclipse.open.collab.net/wiki/JavaHL  I've had problems with JavaHL in Eclipse Ganymede when it worked fine in Eclipse Europa. I'm not sure how Aptana is different but try either upgrading JavaHL or switching to the pure-java SVNKit implementation within the Subclipse config.  I used the update url and I installed the JavaHL adapter the Subclipse project itself and the SVNKit adapter BETA. After this it worked fine for me this is for linux platform hope it works for you.",eclipse svn aptana subclipse
9,A,"How do I calculate someone's age in C#? Given a DateTime representing a person's birthday how do I calculate their age? Do we need to account in our code for cases where the person in question have travelled large distances near the speed of light? what all of the answers so far have missed is that it depends where the person was born and where they are right now. @Yaur: Just convert the time of now + birth into GMT/UTC age is only a relative value hence timezones are irrelevant. For determining the user's current timezone you can use GeoLocating. Why not consider [Julian Date][1]? [1]: http://stackoverflow.com/questions/7103064/java-calculate-the-number-of-days-between-two-dates/14278129#14278129 Pretty crazy how a post that doesn't even follow site guidelines gets 776 votes.. I've created an Age struct which looks like this: public struct Age : IEquatable<Age> IComparable<Age> { private readonly int _years; private readonly int _months; private readonly int _days; public int Years { get { return _years; } } public int Months { get { return _months; } } public int Days { get { return _days; } } public Age( int years int months int days ) : this() { _years = years; _months = months; _days = days; } public static Age CalculateAge( DateTime dateOfBirth DateTime date ) { // Here is some logic that ressembles Mike's solution although it // also takes into account months & days. // Ommitted for brevity. return new Age (years months days); } // Ommited Equality Comparable GetHashCode functionality for brevity. }  This is the version we use here. It works and it's fairly simple. It's the same idea as Jeff's but I think it's a little clearer because it separates out the logic for subtracting one so it's a little easier to understand. public static int GetAge(this DateTime dateOfBirth DateTime dateAsAt) { return dateAsAt.Year - dateOfBirth.Year - (dateOfBirth.DayOfYear < dateAsAt.DayOfYear ? 0 : 1); } You could expand the ternary operator to make it even clearer if you think that sort of thing is unclear. Obviously this is done as an extension method on DateTime but clearly you can grab that one line of code that does the work and put it anywhere. Here we have another overload of the Extension method that passes in DateTime.Now just for completeness. I think this can be off by one day when exactly one of dateOfBirth or dateAsAt falls in a leap year. Consider the age of a person born on March 1 2003 on February 29 2004. To rectify this you need to do a lexicographic comparison of (Month DayOfMonth) pairs and use that for the conditional. it's also not going to show the right age as of your birthday.  The following approach (extract from Time Period Library for .NET class DateDiff) considers the calendar of the culture info: // ---------------------------------------------------------------------- private static int YearDiff( DateTime date1 DateTime date2 ) { return YearDiff( date1 date2 DateTimeFormatInfo.CurrentInfo.Calendar ); } // YearDiff // ---------------------------------------------------------------------- private static int YearDiff( DateTime date1 DateTime date2 Calendar calendar ) { if ( date1.Equals( date2 ) ) { return 0; } int year1 = calendar.GetYear( date1 ); int month1 = calendar.GetMonth( date1 ); int year2 = calendar.GetYear( date2 ); int month2 = calendar.GetMonth( date2 ); // find the the day to compare int compareDay = date2.Day; int compareDaysPerMonth = calendar.GetDaysInMonth( year1 month1 ); if ( compareDay > compareDaysPerMonth ) { compareDay = compareDaysPerMonth; } // build the compare date DateTime compareDate = new DateTime( year1 month2 compareDay date2.Hour date2.Minute date2.Second date2.Millisecond ); if ( date2 > date1 ) { if ( compareDate < date1 ) { compareDate = compareDate.AddYears( 1 ); } } else { if ( compareDate > date1 ) { compareDate = compareDate.AddYears( -1 ); } } return year2 - calendar.GetYear( compareDate ); } // YearDiff Usage: // ---------------------------------------------------------------------- public void CalculateAgeSamples() { PrintAge( new DateTime( 2000 02 29 ) new DateTime( 2009 02 28 ) ); // > Birthdate=29.02.2000 Age at 28.02.2009 is 8 years PrintAge( new DateTime( 2000 02 29 ) new DateTime( 2012 02 28 ) ); // > Birthdate=29.02.2000 Age at 28.02.2012 is 11 years } // CalculateAgeSamples // ---------------------------------------------------------------------- public void PrintAge( DateTime birthDate DateTime moment ) { Console.WriteLine( ""Birthdate={0:d} Age at {1:d} is {2} years"" birthDate moment YearDiff( birthDate moment ) ); } // PrintAge Interesting article. Thanks for the post.  Do we need to consider people who is smaller than 1 year? as Chinese culture we describe small babies' age as 2 months or 4 weeks. Below is my implementation it is not as simple as what I imagined especially to deal with date like 2/28.  public static string HowOld(DateTime birthday DateTime now) { if (now < birthday) throw new ArgumentOutOfRangeException(""birthday must be less than now.""); TimeSpan diff = now - birthday; int diffDays = (int)diff.TotalDays; if (diffDays > 7)//year month and week { int age = now.Year - birthday.Year; if (birthday > now.AddYears(-age)) age--; if (age > 0) { return age + (age > 1 ? "" years"" : "" year""); } else {// month and week DateTime d = birthday; int diffMonth = 1; while (d.AddMonths(diffMonth) <= now) { diffMonth++; } age = diffMonth-1; if (age == 1 && d.Day > now.Day) age--; if (age > 0) { return age + (age > 1 ? "" months"" : "" month""); } else { age = diffDays / 7; return age + (age > 1 ? "" weeks"" : "" week""); } } } else if (diffDays > 0) { int age = diffDays; return age + (age > 1 ? "" days"" : "" day""); } else { int age = diffDays; return ""just born""; } } This implementation has passed below test cases.  [TestMethod] public void TestAge() { string age = HowOld( new DateTime(2011 1 1) new DateTime(2012 11 30)); Assert.AreEqual(""1 year"" age); age = HowOld( new DateTime(2011 11 30) new DateTime(2012 11 30)); Assert.AreEqual(""1 year"" age); age = HowOld( new DateTime(2001 1 1) new DateTime(2012 11 30)); Assert.AreEqual(""11 years"" age); age = HowOld( new DateTime(2012 1 1) new DateTime(2012 11 30)); Assert.AreEqual(""10 months"" age); age = HowOld( new DateTime(2011 12 1) new DateTime(2012 11 30)); Assert.AreEqual(""11 months"" age); age = HowOld( new DateTime(2012 10 1) new DateTime(2012 11 30)); Assert.AreEqual(""1 month"" age); age = HowOld( new DateTime(2008 2 28) new DateTime(2009 2 28)); Assert.AreEqual(""1 year"" age); age = HowOld( new DateTime(2008 3 28) new DateTime(2009 2 28)); Assert.AreEqual(""11 months"" age); age = HowOld( new DateTime(2008 3 28) new DateTime(2009 3 28)); Assert.AreEqual(""1 year"" age); age = HowOld( new DateTime(2009 1 28) new DateTime(2009 2 28)); Assert.AreEqual(""1 month"" age); age = HowOld( new DateTime(2009 2 1) new DateTime(2009 3 1)); Assert.AreEqual(""1 month"" age); // NOTE. // new DateTime(2008 1 31).AddMonths(1) == new DateTime(2009 2 28); // new DateTime(2008 1 28).AddMonths(1) == new DateTime(2009 2 28); age = HowOld( new DateTime(2009 1 31) new DateTime(2009 2 28)); Assert.AreEqual(""4 weeks"" age); age = HowOld( new DateTime(2009 2 1) new DateTime(2009 2 28)); Assert.AreEqual(""3 weeks"" age); age = HowOld( new DateTime(2009 2 1) new DateTime(2009 3 1)); Assert.AreEqual(""1 month"" age); age = HowOld( new DateTime(2012 11 5) new DateTime(2012 11 30)); Assert.AreEqual(""3 weeks"" age); age = HowOld( new DateTime(2012 11 1) new DateTime(2012 11 30)); Assert.AreEqual(""4 weeks"" age); age = HowOld( new DateTime(2012 11 20) new DateTime(2012 11 30)); Assert.AreEqual(""1 week"" age); age = HowOld( new DateTime(2012 11 25) new DateTime(2012 11 30)); Assert.AreEqual(""5 days"" age); age = HowOld( new DateTime(2012 11 29) new DateTime(2012 11 30)); Assert.AreEqual(""1 day"" age); age = HowOld( new DateTime(2012 11 30) new DateTime(2012 11 30)); Assert.AreEqual(""just born"" age); age = HowOld( new DateTime(2000 2 29) new DateTime(2009 2 28)); Assert.AreEqual(""8 years"" age); age = HowOld( new DateTime(2000 2 29) new DateTime(2009 3 1)); Assert.AreEqual(""9 years"" age); Exception e = null; try { age = HowOld( new DateTime(2012 12 1) new DateTime(2012 11 30)); } catch (ArgumentOutOfRangeException ex) { e = ex; } Assert.IsTrue(e != null); } Hope it's helpful.  This classic question is deserving of a Noda Time solution. static int GetAge(LocalDate dateOfBirth) { Instant now = SystemClock.Instance.Now; // The target time zone is important. // It should align with the *current physical location* of the person // you are talking about. When the whereabouts of that person are unknown // then you use the time zone of the person who is *asking* for the age. // The time zone of birth is irrelevant! DateTimeZone zone = DateTimeZoneProviders.Tzdb[""America/New_York""]; LocalDate today = now.InZone(zone).Date; Period period = Period.Between(dateOfBirth today PeriodUnits.Years); return (int) period.Years; } Usage: LocalDate dateOfBirth = new LocalDate(1976 8 27); int age = GetAge(dateOfBirth); You might also be interested in the following improvements: Passing in the clock as an IClock instead of using SystemClock.Instance would improve testability. The target time zone will likely change so you'd want a DateTimeZone parameter as well. See also my blog post on this subject: Handling Birthdays and Other Anniversaries  I don't think any of the answers so far provide for cultures that calculate age differently. See for example East Asian Age Reckoning versus that in the West. Any real answer has to include localization. The Strategy Pattern would probably be in order in this example. From the wikipedia article that you provided: ""In China and Japan it is used for traditional fortune-telling or religion and it is disappearing in daily life between peoples in the city."" @some -- Koreans still use this system primarily. Actually this concept can be pretty important - people don't like being told their personal information incorrectly. As an example half of my family lives in Malaysia and half in the UK. Right now my age is considered two years higher when I'm with one side of my family than with the other. Not only us this system used primarily in Korea but as a tourist discussing ages with locals locals will politely refer to yourself an each other by their birth year. I'm not 25 I'm 87. I like this approach better. more of an 'international birthdatetime format'  How about this solution? static string CalcAge(DateTime birthDay) { DateTime currentDate = DateTime.Now; int approximateAge = currentDate.Year - birthDay.Year; int daysToNextBirthDay = (birthDay.Month * 30 + birthDay.Day) - (currentDate.Month * 30 + currentDate.Day) ; if (approximateAge == 0 || approximateAge == 1) { int month = Math.Abs(daysToNextBirthDay / 30); int days = Math.Abs(daysToNextBirthDay % 30); if (month == 0) return ""Your age is: "" + daysToNextBirthDay + "" days""; return ""Your age is: "" + month + "" months and "" + days + "" days""; ; } if (daysToNextBirthDay > 0) return ""Your age is: "" + --approximateAge + "" Years""; return ""Your age is: "" + approximateAge + "" Years""; ; }  I think the TimeSpan has all that we need in it without having to resort to 365.25 (or any other approximation). Expanding on Aug's example: DateTime myBD = new DateTime(1980 10 10); TimeSpan difference = DateTime.Now.Subtract(myBD); textBox1.Text = difference.Years + "" years "" + difference.Months + "" Months "" + difference.Days + "" days""; Nope. TimeSpan as Days but no Months or Years  Many years ago to provide an age calculator gimmick on my website I wrote a function to calculate age to a fraction. This is a quick port of that function to C# (from the PHP version). I'm afraid I haven't been able to test the C# version but hope you enjoy all the same! (Admittedly this is a bit gimmicky for the purposes of showing user profiles on Stack Overflow but maybe readers will find some use for it. :-)) double AgeDiff(DateTime date1 DateTime date2) {  double years = date2.Year - date1.Year;  /*  * If date2 and date1 + round(date2 - date1) are on different sides  * of 29 February then our partial year is considered to have 366  * days total otherwise it's 365. Note that 59 is the day number  * of 29 Feb.  */  double fraction = 365  + (DateTime.IsLeapYear(date2.Year) && date2.DayOfYear >= 59  && (date1.DayOfYear < 59 || date1.DayOfYear > date2.DayOfYear)  ? 1 : 0);  /*  * The only really nontrivial case is if date1 is in a leap year  * and date2 is not. So let's handle the others first.  */  if (DateTime.IsLeapYear(date2.Year) == DateTime.IsLeapYear(date1.Year))  return years + (date2.DayOfYear - date1.DayOfYear) / fraction;  /*  * If date2 is in a leap year but date1 is not and is March or  * beyond shift up by a day.  */  if (DateTime.IsLeapYear(date2.Year)) {  return years + (date2.DayOfYear - date1.DayOfYear  - (date1.DayOfYear >= 59 ? 1 : 0)) / fraction;  }  /*  * If date1 is not on 29 February shift down date1 by a day if  * March or later. Proceed normally.  */  if (date1.DayOfYear != 59) {  return years + (date2.DayOfYear - date1.DayOfYear  + (date1.DayOfYear > 59 ? 1 : 0)) / fraction;  }  /*  * Okay here date1 is on 29 February and date2 is not on a leap  * year. What to do now? On 28 Feb in date2's year the ``age''  * should be just shy of a whole number and on 1 Mar should be  * just over. Perhaps the easiest way is to a point halfway  * between those two: 58.5.  */  return years + (date2.DayOfYear - 58.5) / fraction; }  I've spent some time working on this and came up with this to calculate someone's age in years months and days. I've tested against the Feb 29th problem and leap years and it seems to work I'd appreciate any feedback: public void LoopAge(DateTime myDOB DateTime FutureDate) { int years = 0; int months = 0; int days = 0; DateTime tmpMyDOB = new DateTime(myDOB.Year myDOB.Month 1); DateTime tmpFutureDate = new DateTime(FutureDate.Year FutureDate.Month 1); while (tmpMyDOB.AddYears(years).AddMonths(months) < tmpFutureDate) { months++; if (months > 12) { years++; months = months - 12; } } if (FutureDate.Day >= myDOB.Day) { days = days + FutureDate.Day - myDOB.Day; } else { months--; if (months < 0) { years--; months = months + 12; } days += DateTime.DaysInMonth( FutureDate.AddMonths(-1).Year FutureDate.AddMonths(-1).Month ) + FutureDate.Day - myDOB.Day; } //add an extra day if the dob is a leap day if (DateTime.IsLeapYear(myDOB.Year) && myDOB.Month == 2 && myDOB.Day == 29) { //but only if the future date is less than 1st March if (FutureDate >= new DateTime(FutureDate.Year 3 1)) days++; } }  Would this work? public override bool IsValid(DateTime value) { _dateOfBirth = value; var yearsOld = (double) (DateTime.Now.Subtract(_dateOfBirth).TotalDays/365); if (yearsOld > 18) return true; return false; } Negative rater please explain the reason!!! Wow. Why is value an object rather than a DateTime? The method signature should be `public override bool Is18OrOlder(DateTime birthday)` What about people who were born on February 29? Who said that we were trying to check whether or not the user was at least 18 years old? The question was ""how do I calculate someone's age?"" How did that happen? I don't even remember putting IsValid as object. It should be DateTime!  Try this solution it's working. int age = (Int32.Parse(DateTime.Today.ToString(""yyyyMMdd"")) - Int32.Parse(birthday.ToString(""yyyyMMdd rawrrr""))) / 10000;  The simple answer to this is to apply AddYears as shown below because this is the only native method to add years to the 29th of Feb. of leap years and obtain the correct result of the 28th of Feb. for common years. Some feel that 1th of Mar. is the birthday of leaplings but neither .Net nor any official rule supports this nor does common logic explain why some born in February should have 75% of their birthdays in another month. Further an Age method lends itself to be added as an extension to DateTime. By this you can obtain the age in the simplest possible way: List item int age = birthDate.Age(); public static class DateTimeExtensions { /// <summary> /// Calculates the age in years of the current System.DateTime object today. /// </summary> /// <param name=""birthDate"">The date of birth</param> /// <returns>Age in years today. 0 is returned for a future date of birth.</returns> public static int Age(this DateTime birthDate) { return Age(birthDate DateTime.Today); } /// <summary> /// Calculates the age in years of the current System.DateTime object on a later date. /// </summary> /// <param name=""birthDate"">The date of birth</param> /// <param name=""laterDate"">The date on which to calculate the age.</param> /// <returns>Age in years on a later day. 0 is returned as minimum.</returns> public static int Age(this DateTime birthDate DateTime laterDate) { int age; age = laterDate.Year - birthDate.Year; if (age > 0) { age -= Convert.ToInt32(laterDate.Date < birthDate.Date.AddYears(age)); } else { age = 0; } return age; } } } Now run this test: class Program { static void Main(string[] args) { RunTest(); } private static void RunTest() { DateTime birthDate = new DateTime(2000 2 28); DateTime laterDate = new DateTime(2011 2 27); string iso = ""yyyy-MM-dd""; for (int i = 0; i < 3; i++) { for (int j = 0; j < 3; j++) { Console.WriteLine(""Birth date: "" + birthDate.AddDays(i).ToString(iso) + "" Later date: "" + laterDate.AddDays(j).ToString(iso) + "" Age: "" + birthDate.AddDays(i).Age(laterDate.AddDays(j)).ToString()); } } Console.ReadKey(); } } The critical date example is this: Birth date: 2000-02-29 Later date: 2011-02-28 Age: 11 Output: { Birth date: 2000-02-28 Later date: 2011-02-27 Age: 10 Birth date: 2000-02-28 Later date: 2011-02-28 Age: 11 Birth date: 2000-02-28 Later date: 2011-03-01 Age: 11 Birth date: 2000-02-29 Later date: 2011-02-27 Age: 10 Birth date: 2000-02-29 Later date: 2011-02-28 Age: 11 Birth date: 2000-02-29 Later date: 2011-03-01 Age: 11 Birth date: 2000-03-01 Later date: 2011-02-27 Age: 10 Birth date: 2000-03-01 Later date: 2011-02-28 Age: 10 Birth date: 2000-03-01 Later date: 2011-03-01 Age: 11 } And for the later date 2012-02-28: { Birth date: 2000-02-28 Later date: 2012-02-28 Age: 12 Birth date: 2000-02-28 Later date: 2012-02-29 Age: 12 Birth date: 2000-02-28 Later date: 2012-03-01 Age: 12 Birth date: 2000-02-29 Later date: 2012-02-28 Age: 11 Birth date: 2000-02-29 Later date: 2012-02-29 Age: 12 Birth date: 2000-02-29 Later date: 2012-03-01 Age: 12 Birth date: 2000-03-01 Later date: 2012-02-28 Age: 11 Birth date: 2000-03-01 Later date: 2012-02-29 Age: 11 Birth date: 2000-03-01 Later date: 2012-03-01 Age: 12 } +1 this is the closest I've come to a perfect answer to this question. I was about to downvote this question because this solution handles February 29 birth dates by increasing their age by one on February 28 in non-leap years. However asking around I discovered that people born on February 29 will celebrate their birthday February 28 if needed (this is probably culture specific though). I'm curious how for instance air plane companies that sell differently priced tickets based on age handles this. Will you have to pay the full price already on February 28 or will you still get the child discount?  TimeSpan diff = DateTime.Now - birthdayDateTime; string age = String.Format(""{0:%y} years {0:%M} months {0:%d} days old"" diff); I'm not sure how exactly you'd like it returned to you so I just made a readable string.  int age = DateTime.Now.Year - birthday.Year; if (DateTime.Now.Month < birthday.Month || DateTime.Now.Month == birthday.Month && DateTime.Now.Day < birthday.Day) age--; @AndrewBarber: I changed my answer I hope its fine now No it's not at all as simple as that. Not in the least. You also don't seem to have understood the question very well. Actually it's not right. Your conditional is clumsy and does not actually work right. It should be: `if (DateTime.Now.Month <= birthday.Month && DateTime.Now.Day < birthday.Day)` I removed your middle condition; combined the `<` and `==`. The way you had it it would not check the date; the `||` being true would cause the `&&` not even to be evaluated.  I am late to the party but here's a one-liner: int age = new DateTime(DateTime.Now.Subtract(birthday).Ticks).Year-1; Gotta love one-liners This is broken. Made testable: public static int CalculateAge(DateTime dateOfBirth DateTime dateToCalculateAge) { return new DateTime(dateToCalculateAge.Subtract(dateOfBirth).Ticks).Year - 1; } ...Gives age 14 when I input 1990-06-01 and calculate the age on the day BEFORE his 14th birthday (1990-05-31). As Kjensen says it's broken folks - take away your upvotes... -1 for incorrect answer. Yes it's wrong because you need to compare the month and day!  2 Main problems to solve are: 1. Calculate Exact age - in years months days etc. 2. Calculate Generally perceived age - people usually do not care how old they exactly are they just care when their birthday in the current year is. Solution for 1 is obvious: DateTime birth = DateTime.Parse(""1.1.2000""); DateTime today = DateTime.Today; //we usually don't care about birth time TimeSpan age = today - birth; //.NET FCL should guarantee this as precise double ageInDays = age.TotalDays; //total number of days ... also precise double daysInYear = 365.2425; //statistical value for 400 years double ageInYears = ageInDays / daysInYear; //can be shifted ... not so precise Solution for 2 is the one which is not so precise in determing total age but is perceived as precise by people. People also usually use it when they calculate their age ""manually"": DateTime birth = DateTime.Parse(""1.1.2000""); DateTime today = DateTime.Today; int age = today.Year - birth.Year; //people perceive their age in years if ( today.Month < birth.Month || ((today.Month == birth.Month) && (today.Day < birth.Day)) ) { age--; //birthday in current year not yet reached we are 1 year younger ;) //+ no birthday for 29.2. guys ... sorry just wrong date for birth } Notes to 2.: This is my preferred solution We cannot use DateTime.DayOfYear or TimeSpans as they shift number of days in leap years I have put there little more lines for readability Just one more note ... I would create 2 static overloaded methods for it one for universal usage second for usage-friendliness: public static int GetAge(DateTime bithDay DateTime today) { //chosen solution method body } public static int GetAge(DateTime birthDay) { return GetAge(birthDay DateTime.Now); }  With less conversions and UtcNow this code can take care of someone born on the Feb 29 on a leap year: public int GetAge(DateTime DateOfBirth) { var Now = DateTime.UtcNow; return Now.Year - DateOfBirth.Year - ( ( Now.Month > DateOfBirth.Month || (Now.Month == DateOfBirth.Month && Now.Day >= DateOfBirth.Day) ) ? 0 : 1 ); }  Here's a DateTime extender that adds the age calculation to the DateTime object.  public static class AgeExtender { public static int GetAge(this DateTime dt) { int d = int.Parse(dt.ToString(""yyyyMMdd"")); int t = int.Parse(DateTime.Today.ToString(""yyyyMMdd"")); return (t-d)/10000; } } ugh don't do this. ToString and int.Parse are both relatively expensive and while i'm anti micro-optimization hiding expensive functions in extension methods that should be trivial operations is not a good idea. Also this is a duplicate of ScArcher2's answer: http://stackoverflow.com/questions/9/how-do-i-calculate-someones-age-in-c/11942#11942 Yaur I really like Elmer's solution that relies on DayOfYear probably more efficient than mine. Note that my goal wasn't to change ScArcher2's algorithm I felt that would be rude. It was simply to show how to implement an extension method.  Seems most of codes are very large  So I have here a small code and that will give you the result that you are expecting int _output = new DateTime ( DateTime.Now.Subtract(person_sBirthDate).Ticks ).Year -1;  I use this: public static class DateTimeExtensions { public static int Age(this DateTime birthDate) { return Age(birthDate DateTime.Now); } public static int Age(this DateTime birthDate DateTime offsetDate) { int result=0; result = offsetDate.Year - birthDate.Year; if (offsetDate.DayOfYear < birthDate.DayOfYear) result--; return result; } }  I have created a SQL Server User Defined Function to calculate someone's age given their birthdate. This is useful when you need it as part of a query: using System; using System.Data; using System.Data.Sql; using System.Data.SqlClient; using System.Data.SqlTypes; using Microsoft.SqlServer.Server; public partial class UserDefinedFunctions { [SqlFunction(DataAccess = DataAccessKind.Read)] public static SqlInt32 CalculateAge(string strBirthDate) { DateTime dtBirthDate = new DateTime(); dtBirthDate = Convert.ToDateTime(strBirthDate); DateTime dtToday = DateTime.Now; // get the difference in years int years = dtToday.Year - dtBirthDate.Year; // subtract another year if we're before the // birth day in the current year if (dtToday.Month < dtBirthDate.Month || (dtToday.Month == dtBirthDate.Month && dtToday.Day < dtBirthDate.Day)) years=years-1; int intCustomerAge = years; return intCustomerAge; } }; This method work perfectly.  How come the MSDN help did not tell you that? It looks so obvious: System.DateTime birthTime = AskTheUser(myUser); // :-) System.DateTime now = System.DateTime.Now; System.TimeSpan age = now - birthTime; //as simple as that double ageInDays = age.TotalDays; // will you convert to whatever you want yourself?  This is a strange way to do it but if you format the date to yyyymmdd and subtract the date of birth from the current date then drop the last 4 digits you've got the age :) I don't know C# but I believe this will work in any language. 20080814 - 19800703 = 280111 Drop the last 4 digits = 28. C# Code: var now = float.Parse(DateTime.Now.ToString(""yyyy.MMdd"")); var dob = float.Parse(dateOfBirth.ToString(""yyyy.MMdd"")); var age = (int)(now - dob); Or alternatively without all the type conversion in the form of an extension method. Error checking omitted: public static Int32 GetAge(this DateTime dateOfBirth) { var today = DateTime.Today; var a = (today.Year * 100 + today.Month) * 100 + today.Day; var b = (dateOfBirth.Year * 100 + dateOfBirth.Month) * 100 + dateOfBirth.Day; return (a - b) / 10000; } there is a subtract method in the datetime class .... It's the most elegant way IMO +1  Here is a very simple and easy to follow example. private int CalculateAge() { //get birthdate DateTime dtBirth = Convert.ToDateTime(BirthDatePicker.Value); int byear = dtBirth.Year; int bmonth = dtBirth.Month; int bday = dtBirth.Day; DateTime dtToday = DateTime.Now; int tYear = dtToday.Year; int tmonth = dtToday.Month; int tday = dtToday.Day; int age = tYear - byear; if (bmonth < tmonth) age--; else if (bmonth == tmonth && bday>tday) { age--; } return age; }  This is not a direct answer but more of a philosophical reasoning about the problem at hand from a quasi-scientific point of view. I would argue that the question does not specify the unit nor culture in which to measure age most answers seem to assume an integer annual representation. The SI-unit for time is second ergo the correct generic answer should be (of course assuming normalized DateTime and taking no regard whatsoever to relativistic effects): var lifeInSeconds = (DateTime.Now.Ticks - then.Ticks)/TickFactor; In the Christian way of calculating age in years: var then = ... // Then in this case the birthday var now = DateTime.UtcNow; int age = now.Year - then.Year; if (now.AddYears(-age) < then) age--; In finance there is a similar problem when calculating something often referred to as the Day Count Fraction which roughly is the amount of years for a given period. And the age issue is really a time measuring issue. Example for the actual/actual (counting all days ""correctly"") convention: DateTime start end = .... // Whatever assume start is before end double startYearContribution = 1 - (double) start.DayOfYear / (double) (DateTime.IsLeapYear(start.Year) ? 366 : 365); double endYearContribution = (double)end.DayOfYear / (double)(DateTime.IsLeapYear(end.Year) ? 366 : 365); double middleContribution = (double) (end.Year - start.Year - 1); double DCF = startYearContribution + endYearContribution + middleContribution; Another quite common way to measure time generally is by ""serializing"" (the dude who named this date convention must seriously have been trippin'): DateTime start end = .... // Whatever assume start is before end int days = (end - start).Days; I wonder how long we have to go before a relativistic age in seconds becomes more useful than the rough approximation of earth-around-sun-cycles during ones lifetime so far :) Or in other words when a period must be given a location or a function representing motion for itself to be valid :)  The best way that I know of because of leap years and everything is: DateTime birthDate = new DateTime(200031); int age = (int)Math.Floor((DateTime.Now - birthDate).TotalDays / 365.25D); Hope this helps. That's not a correct answer because like you say there are leap years and therefore not each year has 365 days. By just counting the number of days and dividing by 365 you'll get slippage every 4 years or so.  I've made one small change to Mark Soen's answer: I've rewriten the third line so that the expression can be parsed a bit more easily.  public int AgeInYears(DateTime bday) { DateTime now = DateTime.Today; int age = now.Year - bday.Year; if (bday.AddYears(age) > now) age--; return age; } I've also made it into a function for the sake of clarity.  The simplest way I've ever found is this. It works correctly for the US and western europe locales. Can't speak to other locales especially places like China. 4 extra compares at most following the initial computation of age. public int AgeInYears( DateTime birthDate  DateTime referenceDate ) { Debug.Assert( referenceDate >= birthDate  ""birth date must be on or prior to the reference date"" ) ; DateTime birth = birthDate.Date ; DateTime reference = referenceDate.Date ; int years = ( reference.Year - birth.Year ) ; // // an offset of -1 is applied if the birth date has // not yet occurred in the current year. // if ( reference.Month > birth.Month ) ; else if ( reference.Month < birth.Month ) --years ; else // in birth month { if ( reference.Day < birth.Day ) --years ; } return years ; } I was looking over the answers to this and noticed that nobody has made reference to regulatory/legal implications of leap day births. For instance per Wikipedia if you're born on February 29th in various jurisdictions you're non-leap year birthday varies: In the United Kingdom and Hong Kong: it's the ordinal day of the year so the next day March 1st is your birthday. In New Zealand: it's the previous day February 28th for the purposes of driver licencing and March 1st for other purposes. Taiwan: it's February 28th. And as near as I can tell in the US the statutes are silent on the matter leaving it up to the common law and to how various regulatory bodies define things in their regulations. To that end an improvement: public enum LeapDayRule { OrdinalDay = 1  LastDayOfMonth = 2  } static int ComputeAgeInYears( DateTime birth  DateTime reference  LeapYearBirthdayRule ruleInEffect ) { bool isLeapYearBirthday = CultureInfo.CurrentCulture.Calendar.IsLeapDay( birth.Year  birth.Month  birth.Day ) ; DateTime cutoff ; if ( isLeapYearBirthday && !DateTime.IsLeapYear(reference.Year) ) { switch ( ruleInEffect ) { case LeapDayRule.OrdinalDay : cutoff = new DateTime( reference.Year  1  1 ) .AddDays( birth.DayOfYear-1 ) ; break ; case LeapDayRule.LastDayOfMonth : cutoff = new DateTime( reference.Year  birth.Month  1 ) .AddMonths(1) .AddDays(-1) ; break ; default : throw new InvalidOperationException() ; } } else { cutoff = new DateTime(reference.Yearbirth.Monthbirth.Day) ; } int age = ( reference.Year - birth.Year ) + ( reference >= cutoff ? 0 : -1 ) ; return age < 0 ? 0 : age ; } It should be noted that this code assumes: A western (European) reckoning of age and A calendar like the Gregorian calendar that inserts a single leap day at the end of a month.  I don't know how the wrong solution can be accepted. The correct C# snippet was written by Michael Stum Here is a test snippet: DateTime bDay = new DateTime(2000 2 29); DateTime now = new DateTime(2009 2 28); MessageBox.Show(string.Format(""Test {0} {1} {2}"" CalculateAgeWrong1(bDay now) // outputs 9 CalculateAgeWrong2(bDay now) // outputs 9 CalculateAgeCorrect(bDay now))); // outputs 8 Here you have the methods: public int CalculateAgeWrong1(DateTime birthDate DateTime now) { return new DateTime(now.Subtract(birthDate).Ticks).Year - 1; } public int CalculateAgeWrong2(DateTime birthDate DateTime now) { int age = now.Year - birthDate.Year; if (now < birthDate.AddYears(age)) age--; return age; } public int CalculateAgeCorrect(DateTime birthDate DateTime now) { int age = now.Year - birthDate.Year; if (now.Month < birthDate.Month || (now.Month == birthDate.Month && now.Day < birthDate.Day)) age--; return age; } And the outputs?? this is the correct answer it needs to be voted up! +1 for your TDD approach to the answer! Output was -Test 9 9 8 While this code works it asserts that a person born on a leap day attains the next year of age on March 1st on non-leap years rather than on February 28th. In reality *either option may be correct*. [Wikipedia has something to say about this](http://en.wikipedia.org/wiki/Leap_day#Births). So while your code is not ""wrong"" neither is the accepted solution.  This is simple and appears to be accurate for my needs. I am making an assumption for the purposes of leap years that regardless of when the person chooses to celebrate the birthday they are not technically a year older until a full 365 days has passed since there last birthday (i.e 28th February does not make them a year older) DateTime now = DateTime.Today; DateTime birthday = new DateTime(1991 02 03);//3rd feb int age = now.Year - birthday.Year; if (now.Month < birthday.Month || (now.Month == birthday.Month && now.Day < birthday.Day))//not had bday this year yet age--; return age; Let us know if you spot any problems ;)  A one Linear Answer  DateTime dateOfBirth = Convert.ToDateTime(""01/16/1990""); var age = ((DateTime.Now - dateOfBirth).Days) / 365;  private int GetAge(int _year int _month int _day { DateTime yourBirthDate= new DateTime(_year _month _day); DateTime todaysDateTime = DateTime.Today; int noOfYears = todaysDateTime.Year - yourBirthDate.Year; if (DateTime.Now.Month < yourBirthDate.Month || (DateTime.Now.Month == yourBirthDate.Month && DateTime.Now.Day < yourBirthDate.Day)) { noOfYears--; } return noOfYears; }  var now = DateTime.Now; var age = (int)Math.Floor(now.Substract(birdth).TotalYears); `TotalYears` property does not exist.  I used ScArcher2's solution for an accurate Year calculation of a persons age but I needed to take it further and calculate their Months and Days along with the Years.  public static Dictionary<stringint> CurrentAgeInYearsMonthsDays(DateTime? ndtBirthDate DateTime? ndtReferralDate) { //---------------------------------------------------------------------- // Can't determine age if we don't have a dates. //---------------------------------------------------------------------- if (ndtBirthDate == null) return null; if (ndtReferralDate == null) return null; DateTime dtBirthDate = Convert.ToDateTime(ndtBirthDate); DateTime dtReferralDate = Convert.ToDateTime(ndtReferralDate); //---------------------------------------------------------------------- // Create our Variables //---------------------------------------------------------------------- Dictionary<string int> dYMD = new Dictionary<stringint>(); int iNowDate iBirthDate iYears iMonths iDays; string sDif = """"; //---------------------------------------------------------------------- // Store off current date/time and DOB into local variables //---------------------------------------------------------------------- iNowDate = int.Parse(dtReferralDate.ToString(""yyyyMMdd"")); iBirthDate = int.Parse(dtBirthDate.ToString(""yyyyMMdd"")); //---------------------------------------------------------------------- // Calculate Years //---------------------------------------------------------------------- sDif = (iNowDate - iBirthDate).ToString(); iYears = int.Parse(sDif.Substring(0 sDif.Length - 4)); //---------------------------------------------------------------------- // Store Years in Return Value //---------------------------------------------------------------------- dYMD.Add(""Years"" iYears); //---------------------------------------------------------------------- // Calculate Months //---------------------------------------------------------------------- if (dtBirthDate.Month > dtReferralDate.Month) iMonths = 12 - dtBirthDate.Month + dtReferralDate.Month - 1; else iMonths = dtBirthDate.Month - dtReferralDate.Month; //---------------------------------------------------------------------- // Store Months in Return Value //---------------------------------------------------------------------- dYMD.Add(""Months"" iMonths); //---------------------------------------------------------------------- // Calculate Remaining Days //---------------------------------------------------------------------- if (dtBirthDate.Day > dtReferralDate.Day) //Logic: Figure out the days in month previous to the current month or the admitted month. // Subtract the birthday from the total days which will give us how many days the person has lived since their birthdate day the previous month. // then take the referral date and simply add the number of days the person has lived this month. //If referral date is january we need to go back to the following year's December to get the days in that month. if (dtReferralDate.Month == 1) iDays = DateTime.DaysInMonth(dtReferralDate.Year - 1 12) - dtBirthDate.Day + dtReferralDate.Day; else iDays = DateTime.DaysInMonth(dtReferralDate.Year dtReferralDate.Month - 1) - dtBirthDate.Day + dtReferralDate.Day; else iDays = dtReferralDate.Day - dtBirthDate.Day; //---------------------------------------------------------------------- // Store Days in Return Value //---------------------------------------------------------------------- dYMD.Add(""Days"" iDays); return dYMD; }  To calculate the age with nearest age: var ts = DateTime.Now - new DateTime(1988 3 19); var age = Math.Round(ts.Days / 365.0); not necessarily true. I guess the correct would be to divide by 365.25 to account for leap years somehow  My suggestion int age = (int) ((DateTime.Now - bday).TotalDays/365.242199); That seems to have the year changing on the right date. (I spot tested up to age 107) 365 for the days in a year. +0.25 for leap years. +0.005 for other corrections Where does 365.255 come from? I don't think this will work in general. I don't think Harry Patch would have appreciated your spot-testing methodology: http://www.latimes.com/news/obituaries/la-me-harry-patch26-2009jul2607608030.story I like this answer because it is *exactly* what I was going to add as my own answer! Google says `days in a year = 365.242199` The average length of a year in the Gregorian Calendar is 365.2425 days. Google is not always right. I would say this is one of the simplest solutions and it's *good enough*. Who cares if I am half a day before my Xth birthday and the program says I am X years old. The program is more or less right although not mathematically. I really like this solution. ^^ Because sometimes it's important. In my testing this fails on the persons birthday it reports them younger than they are.  Here's a little code sample for C# I knocked up be careful around the edge cases specifically leap years not all the above solutions take them into account. Pushing the answer out as a DateTime can cause problems as you could end up trying to put too many days into a specific month e.g. 30 days in Feb. public string LoopAge(DateTime myDOB DateTime FutureDate) { int years = 0; int months = 0; int days = 0; DateTime tmpMyDOB = new DateTime(myDOB.Year myDOB.Month 1); DateTime tmpFutureDate = new DateTime(FutureDate.Year FutureDate.Month 1); while (tmpMyDOB.AddYears(years).AddMonths(months) < tmpFutureDate) { months++; if (months > 12) { years++; months = months - 12; } } if (FutureDate.Day >= myDOB.Day) { days = days + FutureDate.Day - myDOB.Day; } else { months--; if (months < 0) { years--; months = months + 12; } days = days + (DateTime.DaysInMonth(FutureDate.AddMonths(-1).Year FutureDate.AddMonths(-1).Month) + FutureDate.Day) - myDOB.Day; } //add an extra day if the dob is a leap day if (DateTime.IsLeapYear(myDOB.Year) && myDOB.Month == 2 && myDOB.Day == 29) { //but only if the future date is less than 1st March if(FutureDate >= new DateTime(FutureDate.Year 31)) days++; } return ""Years: "" + years + "" Months: "" + months + "" Days: "" + days; } I like this solution the best however when calculating the months it needs to be if(months >= 12). Try 6-8-2012 - 6-4-1993 to test.  I have a customized Function to calculate Age + a message if selected date in not matching //This function will validate the date private bool ValidateDate(string dob) { DateTime dobdate = DateTime.Parse(dob); DateTime nowdate = DateTime.Now; TimeSpan ts = nowdate - dobdate; int Years = ts.Days / 365; if (Years < 18) { message = ""Date of Birth must not be less then 18""; return false; } else if (Years > 65) { message = ""Date of Birth must not be greater then 65""; return false; } dobvalue = dob; return true; } //Below here you call that function and pass out datetime value (MM/DD/YYYY) you can format by any way you like //Function Call if (ValidateDate(""03/10/1982"") == false) { lbldatemessaeg.Visible = true; lbldatemessaeg.Text = message; //you can replace anything a messageboxor any container to display return; }  Here is a solution.  DateTime dateOfBirth = new DateTime(2000 4 18); DateTime currentDate = DateTime.Now; int ageInYears = 0; int ageInMonths = 0; int ageInDays = 0; ageInDays = currentDate.Day - dateOfBirth.Day; ageInMonths = currentDate.Month - dateOfBirth.Month; ageInYears = currentDate.Year - dateOfBirth.Year; if (ageInDays < 0) { ageInDays += DateTime.DaysInMonth(currentDate.Year currentDate.Month); ageInMonths = ageInMonths--; if (ageInMonths < 0) { ageInMonths += 12; ageInYears--; } } if (ageInMonths < 0) { ageInMonths += 12; ageInYears--; } Console.WriteLine(""{0} {1} {2}"" ageInYears ageInMonths ageInDays);  I want to add Hebrew calendar calculations (or other System.Globalization calendar can be used in the same way) using rewrited functions from this thread:  Public Shared Function CalculateAge(BirthDate As DateTime) As Integer Dim HebCal As New System.Globalization.HebrewCalendar () Dim now = DateTime.Now() Dim iAge = HebCal.GetYear(now) - HebCal.GetYear(BirthDate) Dim iNowMonth = HebCal.GetMonth(now) iBirthMonth = HebCal.GetMonth(BirthDate) If iNowMonth < iBirthMonth Or (iNowMonth = iBirthMonth AndAlso HebCal.GetDayOfMonth(now) < HebCal.GetDayOfMonth(BirthDate)) Then iAge -= 1 Return iAge End Function  This gives ""more detail"" to this question. Maybe this is what you're looking for DateTime birth = new DateTime(1974 8 29); DateTime today = DateTime.Now; TimeSpan span = today - birth; DateTime age = DateTime.MinValue + span; // Make adjustment due to MinValue equalling 1/1/1 int years = age.Year - 1; int months = age.Month - 1; int days = age.Day - 1; // Print out not only how many years old they are but give months and days as well Console.Write(""{0} years {1} months {2} days"" years months days); This does not work all the time. Adding a Span to the DateTime.MinValue could work boes this does not account for leap years etc. If you add the Years months and days to Age using the AddYears() AddMonths and AddDays() function it will not always return the Datetime.Now date. Consider the following TWO senarios. 1st DateTime.Now is 1/1/2001 and a child is born on 1/1/2000. 2000 is a leap year and the result will be 1years 0 months and 1 days. In the second senarion DateTime.Now is 1/1/2002 and the child is born on 1/1/2001. In this case the result will be 1 years 0 months and 0 days. That will happen because you are adding the timespan on a non-leap year. If DateTime.MinValue was a leap year then the results would be 1 year at the first and 0 years 11 months and 30 days. (Try it in your code). timespan itself automatically takes into account leap years between 2 dates so I'm not sure what your getting on about. I have asked on microsoft forums and microsoft has confirmed it takes into account leap years between 2 dates.  For some reason Jeff's code didn't seem simple enough. To me this seems simpler and easier to understand: DateTime today = DateTime.Today; int age = today.Year - bday.Year; if (bday > today.AddYears(-age)) age--; Just wanted to comment on DateTime.Now performance. If you don't need an accurate time zone value use DateTime.UtcNow it's much faster. Given we're talking birthdays you can just use DateTime.Today given the time part has no relevance. This answer does not work with all locales and all ages. Several countries have skipped dates after the birth of current living people including Russia (1918) Greece (1924) and Turkey (1926). So we have a different age according to different countries and calendar ? What a scoop... @JAG: DateTime.Today should be even faster. Good catch Danvil! Changed last line to: if (bday > now.AddYears(-age)) age--; I think that fixes it. It passed my measly 3 tests :-) This is wrong! Try it with a person born 2000/02/29. If now is 2009/02/28 your code will state that the person is 9 years old. Actually it's still not entirely correct. This code presumes that 'bday' is the date-portion of a DateTime. It's an edge-case (I guess most people will just be passing dates and not date-times) but if you pass in a birthday as a date-and-time where the time is greater than 00:00:00 then you'll run into the bug Danvil pointed out. Setting bday = bday.Date fixes this. The last line made me think too much. Instead how about: if (bday.AddYears(age) > now) age--; This seems to be a more intuitive expression. Good idea cdiggins but it doesn't work as bday.AddYears(age) when age is 2/29 returns 2/28 on years that are not leap years...keep trying Or just do if (BirthDate.DayOfYear > Today.DayOfYear); no need to forther modify the date variables @NKCSS: That does not handle the leap year correctly. My testing shows that only `if (bday > now.AddYears(-age))` works. Since `DayOfYear` returns `61` in 2012 and `60` in 2011 for March 1. @Guvante Thanks...I lost my test last year when I lost my hard drive...I should have tested more @Danvil is it really wrong? Take a simpler example. Birthday = 2000/02/29 Today = 2001/02/28. Days elapsed: 365. Isn't that one year and therefore isn't the person one year old on the 28th? Or is the definition of a year 365-1/4 days? I'm just sayin' it's complicated. Wouldn't it be easier to just do `DateTime dateDifference = subject.Birthday - DateTime.Now; int age = dateDifference.Year;`? Also I don't think age depends on leap years. After all a year is defined as 365 DateTime.Today.AddYears(-age)) ? age-- : age;`  Here's yet another answer: public static int AgeInYears(DateTime birthday DateTime today) { return ((today.Year - birthday.Year) * 372 + (today.Month - birthday.Month) * 31 + (today.Day - birthday.Day)) / 372; } This has been extensively unit-tested. It does look a bit ""magic"". The number 372 is the number of days there would be in a year if every month had 31 days. The explanation of why it works (lifted from here) is: Let's set Yn = DateTime.Now.Year Yb = birthday.Year Mn = DateTime.Now.Month Mb = birthday.Month Dn = DateTime.Now.Day Db = birthday.Day age = Yn - Yb + (31*(Mn - Mb) + (Dn - Db)) / 372 We know that what we need is either Yn-Yb if the date has already been reached Yn-Yb-1 if it has not. a) If Mn<Mb we have -341 <= 31*(Mn-Mb) <= -31 and -30 <= Dn-Db <= 30 -371 <= 31*(Mn - Mb) + (Dn - Db) <= -1 With integer division (31*(Mn - Mb) + (Dn - Db)) / 372 = -1 b) If Mn=Mb and Dn<Db we have 31*(Mn - Mb) = 0 and -30 <= Dn-Db <= -1 With integer division again (31*(Mn - Mb) + (Dn - Db)) / 372 = -1 c) If Mn>Mb we have 31 <= 31*(Mn-Mb) <= 341 and -30 <= Dn-Db <= 30 1 <= 31*(Mn - Mb) + (Dn - Db) <= 371 With integer division (31*(Mn - Mb) + (Dn - Db)) / 372 = 0 d) If Mn=Mb and Dn>Db we have 31*(Mn - Mb) = 0 and 1 <= Dn-Db <= 30 With integer division again (31*(Mn - Mb) + (Dn - Db)) / 372 = 0 e) If Mn=Mb and Dn=Db we have 31*(Mn - Mb) + Dn-Db = 0 and therefore (31*(Mn - Mb) + (Dn - Db)) / 372 = 0  Another function not my me but found on the web and a bit refined: public static int GetAge(DateTime birthDate) { DateTime n = DateTime.Now; // To avoid a race condition around midnight int age = n.Year - birthDate.Year; if (n.Month < birthDate.Month || (n.Month == birthDate.Month && n.Day < birthDate.Day)) age--; return age; } Just two things that come into my mind: What about people from countries that do not use the gregorian calendar? DateTime.Now is in the server-specific culture i think. I have absolutely 0 knowledge about actually working with Asian calendars and I do not know if there is an easy way to convert dates between calendars but just in case you're wondering about those chinese guys from the year 4660 :-) @SimonHewitt Indeed somehow that typo got unseen for 4 years oO Thanks! Corrected. You are still calling DateTime.Now twice??  Keeping it simple (and possibly stupid:)). DateTime birth = new DateTime(1975 09 27 01 00 00 00); TimeSpan ts = DateTime.Now - birth; Console.WriteLine(""You are approximately "" + ts.TotalSeconds.ToString() + "" seconds old.""); TimeSpan was my first choice but found that it doesn't offer a TotalYears property. You could try (ts.TotalDays / 365) - but it doesn't account for leap years etc.",c# .net datetime
24,A,"Throw an error in a MySQL trigger If I have a trigger before the update on a table how can I throw an error that prevents the update on that table? Unfortunately the answer provided by @RuiDC does not work in MySQL versions prior to 5.5 because there is no implementation of SIGNAL for stored procedures. The solution I've found is to simulate a signal throwing a table_name doesn't exist error pushing a customized error message into the table_name. The hack could be implemented using triggers or using a stored procedure. I describe both options below following the example used by @RuiDC. Using triggers DELIMITER $$ -- before inserting new id DROP TRIGGER IF EXISTS before_insert_id$$ CREATE TRIGGER before_insert_id BEFORE INSERT ON test FOR EACH ROW BEGIN -- condition to check IF NEW.id < 0 THEN -- hack to solve absence of SIGNAL/prepared statements in triggers UPDATE `Error: invalid_id_test` SET x=1; END IF; END$$ DELIMITER ; Using a stored procedure Stored procedures allows you to use dynamic sql which makes possible the encapsulation of the error generation functionality in one procedure. The counterpoint is that we should control the applications insert/update methods so they use only our stored procedure (not granting direct privileges to INSERT/UPDATE). DELIMITER $$ -- my_signal procedure CREATE PROCEDURE `my_signal`(in_errortext VARCHAR(255)) BEGIN SET @sql=CONCAT('UPDATE `' in_errortext '` SET x=1'); PREPARE my_signal_stmt FROM @sql; EXECUTE my_signal_stmt; DEALLOCATE PREPARE my_signal_stmt; END$$ CREATE PROCEDURE insert_test(p_id INT) BEGIN IF NEW.id < 0 THEN CALL my_signal('Error: invalid_id_test; Id must be a positive integer'); ELSE INSERT INTO test (id) VALUES (p_id); END IF; END$$ DELIMITER ;  I know this is an old question but as an up-to-date and less hacky alternative (as of v5.5 - possibly earlier I cannot test) try the approach below: delimiter // use test// create table trigger_test ( id int not null )// drop trigger if exists trg_trigger_test_ins // create trigger trg_trigger_test_ins before insert on trigger_test for each row begin declare msg varchar(255); if new.id < 0 then set msg = concat('MyTriggerError: Trying to insert a negative value in trigger_test: ' cast(new.id as char)); signal sqlstate '45000' set message_text = msg; end if; end // delimiter ; -- run the following as seperate statements: insert into trigger_test values (1) (-1) (2); -- everything fails as one row is bad select * from trigger_test; insert into trigger_test values (1); -- succeeds as expected insert into trigger_test values (-1); -- fails as expected select * from trigger_test;  Here is one hack that may work. It isn't clean but it looks like it might work: Essentially you just try to update a column that doesn't exist. Hi can you make a practical example on how to write the trigger in the link?I have two columns (idUser and idGuest) that must be mutually exclusive in the table orders but i'm fairly new to triggers and i'm finding difficulties in writing it!Thx.  The following procedure is (on mysql5) a way to throw custom errors  and log them at the same time: create table mysql_error_generator(error_field varchar(64) unique) engine INNODB; DELIMITER $$ CREATE PROCEDURE throwCustomError(IN errorText VARCHAR(44)) BEGIN DECLARE errorWithDate varchar(64); select concat(""[""DATE_FORMAT(now()""%Y%m%d %T"")""] "" errorText) into errorWithDate; INSERT IGNORE INTO mysql_error_generator(error_field) VALUES (errorWithDate); INSERT INTO mysql_error_generator(error_field) VALUES (errorWithDate); END; $$ DELIMITER ; call throwCustomError(""Custom error message with log support."");",mysql database triggers
4,A,"When setting a form's opacity should I use a decimal or double? I want to use a track-bar to change a form's opacity. This is my code: decimal trans = trackBar1.Value / 5000; this.Opacity = trans; When I try to build it I get this error: Cannot implicitly convert type 'decimal' to 'double'. I tried making trans a double but then the control doesn't work. This code has worked fine for me in VB.NET in the past. Also Decimal can't represent as wide a value as a Double. Decimal can only go up to +/-7.9228162514264337593543950335E+28; whereas a Double can go up to +/-1.79769313486232E+308 A more generic answer for the generic question ""Decimal vs Double?"": Decimal for monetary calculations to preserve the precision Double for scientific calculations that do not get affected by small differences. Since Double is a type which is native to the CPU (internal representation is stored in base 2) calculations made with Double perform better then Decimal (which is represented in base 10 internally).  Since Opacity is a double value I would just use a double from the outset and not cast at all but be sure to use a double when dividing so you don't loose any precision Opacity = trackBar1.Value / 5000.0;  this.Opacity = trackBar1.Value / 5000d;  Your code worked fine in VB.NET because it implicitly does any casts while C# has both implicit and explicit ones. In C# the conversion from decimal to double is explicit as you lose accuracy. For instance 1.1 can't be accurately expressed as a double but can as a decimal (see ""Floating point numbers - more inaccurate than you think"" for the reason why). In VB the conversion was added for you by the compiler: decimal trans = trackBar1.Value / 5000m; this.Opacity = (double) trans; That (double) has to be explicitly stated in C# but can be implied by VB's more 'forgiving' compiler.  The Opacity property is of double type: double trans = trackBar1.Value / 5000.0; this.Opacity = trans; or simply: this.Opacity = trackBar1.Value / 5000.0; or: this.Opacity = trackBar1.Value / 5000d; Notice that I am using 5000.0 (or 5000d) to force a double division because trackBar1.Value is an integer and it would perform an integer division and the result would be an integer.  Assuming you are using WinForms Form.Opacity is of type double so you should use: double trans = trackBar1.Value / 5000.0; this.Opacity = trans; Unless you need the value elsewhere it's simpler to write: this.Opacity = trackBar1.Value / 5000.0;  It sounds like this.Opacity is a double value and the compiler doesn't like you trying to cram a decimal value into it.  An explicit cast to double isn't necessary. double trans = (double)trackBar1.Value / 5000.0; Identifying the constant as 5000.0 (or as 5000d) is sufficient: double trans = trackBar1.Value / 5000.0; double trans = trackBar1.Value / 5000d;  Why are you dividing by 5000? Just set the TrackBar's Minimum and Maximum values between 0 and 100 and then divide the Value by 100 for the Opacity percentage. Minimum 20 example below prevents the form from becoming completely invisible: private void Form1_Load(object sender System.EventArgs e) { TrackBar1.Minimum = 20; TrackBar1.Maximum = 100; TrackBar1.LargeChange = 10; TrackBar1.SmallChange = 1; TrackBar1.TickFrequency = 5; } private void TrackBar1_Scroll(object sender System.EventArgs e) { this.Opacity = TrackBar1.Value / 100; }  You have two problems. First Opacity requires a double not a decimal value. The compiler is telling you that while there is a conversion between decimal and double it is an explicit conversion that you need to specify in order for it to work. The second is that TrackBar.Value is an integer value and dividing an int by an int results in an int no matter what type of variable you assign it to. In this case there is an implicit cast from int to decimal or double - because there is no loss of precision when you do the cast - so the compiler doesn't complain but the value you get is always 0 presumably since trackBar.Value is always less than 5000. The solution is to change your code to use double (the native type for Opacity) and do floating point arithmetic by explicitly making the constant a double - which will have the effect of promoting the arithmetic - or casting trackBar.Value to double which will do the same thing - or both. Oh and you don't need the intermediate variable unless it used elsewhere. My guess is the compiler would optimize it away anyway.  trackBar.Opacity = (double)trackBar.Value / 5000.0;  You should use 5000.0 instead of 5000.  The best solution is: this.Opacity = decimal.ToDouble(trackBar1.Value/5000);  In my opinion it is desirable to be as explicit as possible. This adds clarity to the code and aids your fellow programmers who may eventually read it. In addition to (or instead of) appending a .0 to the number you can use decimal.ToDouble(). Here are some examples: // Example 1 double transperancy = trackBar1.Value/5000; this.Opacity = decimal.ToDouble(transperancy); // Example 2 - with inline temp this.Opacity = decimal.ToDouble(trackBar1.Value/5000);",c# winforms type-conversion opacity
13,A,"Determining a web user's time zone Is there a standard way for a Web Server to determine what time zone offset a user is in? Perhaps from an HTTP header? Or part of the user-agent description? You might consider making John Isaacks's the correct answer... His solution is a lot simpler to put it lightly. Ask the user. If you get the time zone from the user's computer and it is set wrong then what? Then the user probably doesn't care? I agree with catphive. The simplest answer should be The Answer @MartinArgerami: for posterity the only sane way of dealing with time is keeping everything in UTC until the last possible moment because it avoids risks of mixups (since everything is in UTC there's no need for most applications to be timezone _and DST_ aware). Dates and times should ideally only be translated to a local timezone during display. Even though OP asked for a server-side solution a client-side solution is much more appropriate. Using Unkwntech's approach I wrote a function using jQuery and PHP. This is tested and does work! On the PHP page where you are want to have the timezone as a variable have this snippet of code somewhere near the top of the page: <?php session_start(); $timezone = $_SESSION['time']; ?> This will read the session variable ""time"" which we are now about to create. On the same page in the  you need to first of all include jQuery: <script type=""text/javascript"" src=""http://code.jquery.com/jquery-latest.min.js""></script> Also in the  below the jQuery paste this: <script type=""text/javascript""> $(document).ready(function() { if(""<?php echo $timezone; ?>"".length==0){ var visitortime = new Date(); var visitortimezone = ""GMT "" + -visitortime.getTimezoneOffset()/60; $.ajax({ type: ""GET"" url: ""http://domain.com/timezone.php"" data: 'time='+ visitortimezone success: function(){ location.reload(); } }); } }); </script> You may or may not have noticed but you need to change the url to your actual domain. One last thing. You are probably wondering what the heck timezone.php is. Well it is simply this: (create a new file called timezone.php and point to it with the above url) <?php session_start(); $_SESSION['time'] = $_GET['time']; ?> If this works correctly it will first load the page execute the JavaScript and reload the page. You will then be able to read the $timezone variable and use it to your pleasure! It returns the current UTC/GMT time zone offset (GMT -7) or whatever timezone you are in. i do like this but i might have something that checks the current $_SESSION['time'] and only get the javascript to reload if its different  Here is a robust JavaScript solution to determine the time zone the browser is in. >>> var timezone = jstz.determine(); >>> timezone.name(); ""Europe/London"" http://www.pageloom.com/automatic-timezone-detection-with-javascript IMHO - This is the best answer.  To submit it as an HTTP header on AJAX requests with jQuery $.ajaxSetup({ beforeSend: function(xhr settings) { xhr.setRequestHeader(""X-TZ-Offset"" -new Date().getTimezoneOffset()/60); } }); This only returns the *current* time zone offset - not the *time zone*. See [the timezone tag wiki](http://stackoverflow.com/tags/timezone/info).  The most popular (==standard?) way of determining the time zone I've seen around is simply asking the users themselves. If your website requires subscription this could be saved in the users' profile data. For anon users the dates could be displayed as UTC or GMT or some such. I'm not trying to be a smart aleck. It's just that sometimes some problems have finer solutions outside of any programming context. +1 - Definitely if you care and it matters to your app's functionality ask the user. What about when a user is downloading an .ics file that should have a start time specific to their location (e.g. 9-11am across the country)? They shouldn't HAVE to say what their time zone is imo. Why not accept this as the correct answer? The answer given by Unkwntech even not work for non-IE browsers. @Ishmaeel: but users do travel internationally and they shouldnt need to tell their timezone each time they login from some non-native timezone Personally if I traveled that much and the timestamps in my webapp were mission critical *I* wouldn't trust the webapp to guess my current timezone via JS/ActiveX gimmicks. I would tell the webapp to display the timestamps in UTC/GMT. I also wouldn't be changing the timezone settings on my laptop each time I got off the plane so the webapp would not have a chance to guess correctly anyway. This doesn't answer the question which clearly implies he's looking for a technological solution. @gWiz OP is asking for a standard solution. This is pretty standard.  I still have not seen a detailed answer here that gets the time zone. You shouldn't need to geocode by IP address or use PHP (lol) or incorrectly guess from an offset. Firstly a time zone is not just an offset from GMT. It is an area of land in which the time rules are set by local standards. Some countries have daylight savings and will switch on DST at differing times. It's usually important to get the actual zone not just the current offset. If you intend to store this timezone for instance in user preferences you want the zone and not just the offset. For realtime conversions it won't matter much. Now to get the time zone with javascript you can use this: >> new Date().toTimeString(); ""15:46:04 GMT+1200 (New Zealand Standard Time)"" //Use some regular expression to extract the time. However I found it easier to simply use this robust plugin which returns the Olsen formatted timezone: https://github.com/scottwater/jquery.detect_timezone  The magic all seems to be in visitortime.getTimezoneOffset() That's cool I didn't know about that. Does it work in IE etc? From there you should be able to use JS to ajax set cookies whatever. I'd probably go the cookie route myself. You'll need to allow the user to change it though. We tried to use geolocation (via maxmind) to do this a while ago and it was wrong reasonably often - enough to make it not worth doing so we just let the user set it in their profile and show a notice to users who haven't set theirs yet.  Try this php code <?php $ip = $_SERVER['REMOTE_ADDR']; $json = file_get_contents(""http://api.easyjquery.com/ips/?ip="".$ip.""&full=true""); $json = json_decode($jsontrue); $timezone = $json['LocalTimeZone']; ?> Dead link (now directs to a godaddy parking page)  A simple way to do it is by using: new Date().getTimezoneOffset(); Why did you repost an identical answer (by John Isaacks) from 2 years ago: http://stackoverflow.com/a/1809974/836407 ? Also it only returns the *current* time zone offset - not the *time zone*. See [the timezone tag wiki](http://stackoverflow.com/tags/timezone/info).  Here is a better JS one (cross-browser): https://bitbucket.org/pellepim/jstimezonedetect  -new Date().getTimezoneOffset()/60; getTimezoneOffset() will subtract your time from GMT and return the number of minutes. So if you live in GMT-8 it will return 480. To put this into hours divide by 60. Also notice that the sign is the opposite of what you need -- it's calculating GMT's offset from your time zone not your time zone's offset from GMT. To fix this simply multiply by -1. this is what makes the most sense to me. is there any reason this shouldn't be used or is everyone above just making the problem more difficult than they need to. @jordanstephens I am not an expert so I do not know if there are circumstances where this would not work but it worked fine for me. What about users who use cell phones that have browsers without javascript support? I like the question the user asks about HTTP headers user agent... is there a way to make this work server side as accurate as possible? That's strange. For me this returns `-4` but I'm in `GET` which ought to be `+4` - what am I missing? I've checked that my OS is set to the correct timezone. getTimezoneOffset() returns number of minutes when you subtract your current time from GMT time. So if you live in California that's PST which is GMT-8 so you're 8 hours behind. Subtract that from GMT using getTimezoneOffset() and it will return 480 minutes. If you want to find your offset multiply that by -1 and divide by 60. This doesn't account for Daylight Saving Time / Summer Time but the link posted by Joseph Lust does: http://stackoverflow.com/a/5492192/462162 This doesn't always work for DST. Get timezone offset does exactly what it says. It get's the offset. A time ZONE is actually a geographical area. This won't work for daylight savings since you don't know which hemisphere the user lives in or if their country even has daylight savings. Why not use this instead: `>>> date.toTimeString() ""15:46:04 GMT+1200 (New Zealand Standard Time)""` Will this work for timezones like `GMT +1`? (Non-negative.) I beg to differ with Keyo. The definition of getTimezoneOffset() (according to the ECMA standard http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.26) is ""Returns the difference between local time and UTC time in minutes."" - in other words it should take daylight savings into account. Mozilla's documentation says ""Daylight saving time prevents this value from being a constant even for a given locale."" @xgretsch: It gets the user's *current* offset from GMT. That's fine if you're presenting another time that occurs on the same day (unless the current date is a changeover date where it could be wrong). However there are many timezones which have the same offset from GMT and they may have different changeover dates or not use daylight savings. @Keyo: `toTimeString`'s output is implementation-defined: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.4. There is no guarantee that it will include a time zone name. There is also no guarantee that if it *does* include a time zone name that it maps to anything the server knows about. It may work in some browsers some of the time but I wouldn't like to rely on it. @Mike Dimmick: While true the question itself asks if there is a way to get the time zone offset not the actual time zone itself so this should be correct. @Mike Dimmick: Ah I see your point. I guess there isn't a simple answer to ""what's the user's time zone offset"" - you need to ask ""what's the user's time zone offset at a particular point in time"". I'm beginning to think that the only robust way of doing this is one of those horrible solutions where you set the time zone print out the time in local time and compare what you got! One thing to note here; some places (such as Newfoundland in Canada) have timezones that are off by half an hour so after dividing by 60 your answer may not be an integer.  Javascript is the easiest way to get the client's local time. I would suggest using an XMLHttpRequest to send back the local time and if that fails fall back to the timezone detected based on their IP address. As far as geolocation I've used MaxMind GeoIP on several projects and it works well though I'm not sure if they provide timezone data. It's a service you pay for and they provide monthly updates to your database. They provide wrappers in several web languages. I have voted this answer up because the latitude and longitude obtained from databases like GeoIP (which has a free version available as of now) can be combined with databases that convert such a coordinate to a time zone. I think GeoNames has a latter such database. See also [this question](http://stackoverflow.com/questions/5584602).  If you happen to be using OpenID for authentication Simple Registration Extension would solve the problem for authenticated users (You'll need to convert from tz to numeric). Another option would be to infer the time zone from the user agent's country preference. This is a somewhat crude method (won't work for en-US) but makes a good approximation.  Here's how I do it. This will set the PHP default timezone to the user's local timezone. Just paste the following on the top of all your pages: <?php session_start(); if(!isset($_SESSION['timezone'])) { if(!isset($_REQUEST['offset'])) { ?> <script> var d = new Date() var offset= -d.getTimezoneOffset()/60; location.href = ""<?php echo $_SERVER['PHP_SELF']; ?>?offset=""+offset; </script> <?php } else { $zonelist = array('Kwajalein' => -12.00 'Pacific/Midway' => -11.00 'Pacific/Honolulu' => -10.00 'America/Anchorage' => -9.00 'America/Los_Angeles' => -8.00 'America/Denver' => -7.00 'America/Tegucigalpa' => -6.00 'America/New_York' => -5.00 'America/Caracas' => -4.30 'America/Halifax' => -4.00 'America/St_Johns' => -3.30 'America/Argentina/Buenos_Aires' => -3.00 'America/Sao_Paulo' => -3.00 'Atlantic/South_Georgia' => -2.00 'Atlantic/Azores' => -1.00 'Europe/Dublin' => 0 'Europe/Belgrade' => 1.00 'Europe/Minsk' => 2.00 'Asia/Kuwait' => 3.00 'Asia/Tehran' => 3.30 'Asia/Muscat' => 4.00 'Asia/Yekaterinburg' => 5.00 'Asia/Kolkata' => 5.30 'Asia/Katmandu' => 5.45 'Asia/Dhaka' => 6.00 'Asia/Rangoon' => 6.30 'Asia/Krasnoyarsk' => 7.00 'Asia/Brunei' => 8.00 'Asia/Seoul' => 9.00 'Australia/Darwin' => 9.30 'Australia/Canberra' => 10.00 'Asia/Magadan' => 11.00 'Pacific/Fiji' => 12.00 'Pacific/Tongatapu' => 13.00); $index = array_keys($zonelist $_REQUEST['offset']); $_SESSION['timezone'] = $index[0]; } } date_default_timezone_set($_SESSION['timezone']); //rest of your code goes here ?>  One possible option is to use the Date header field which is defined in RFC 7231 and is supposed to include the timezone. Of course it is not guaranteed that the value is really the client's timezone but it can be a convenient starting point.  Easy just use the JavaScript getTimezoneOffset function like so: -new Date().getTimezoneOffset()/60; This is a Javascript function not a PHP function. Also it only returns the *current* time zone offset - not the *time zone*. See [the timezone tag wiki](http://stackoverflow.com/tags/timezone/info).  Don't use IP address to definitively determine location (and hense timezone)-- that's because with NAT Proxies (increasingly popular) and VPNs IP addresses do not necessarily realistically reflect the user's actual location but the location at which the servers implementing those protocols reside. Similar to how Area Codes are no longer useful for locating a telephone user given the popularity of Number Portability. IP and other techniques shown above are useful for suggesting a default that the user can adjust/correct.  Here is a more complete way. Get the timezone offset for the user Test some days on DLS boundaries to determine if they are in a zone that uses DLS. Getting TZ and DST from JS This worked for me! Read the comments under the blog post for a couple updates to the code. This should be the accepted answer! This will still only return the *standard offset* for the time zone such as +02:00. It will not give you enough information to determine the *time zone* of the user such as `Africa/Johannesburg` or `Europe/Istanbul`. See [the timezone tag wiki](http://stackoverflow.com/tags/timezone/info).  Here is an article (with source code) that explains how to determine and use localized time in an ASP.NET (VB.NET C#) application: It's About Time In short the described approach relies on the JavaScript getTimezoneOffset function which returns the value that is saved in the session cookie and used by code-behind to adjust time values between GMT and local time. The nice thing is that the user does not need to specify the time zone (the code does it automatically). There is more involved (this is why I link to the article) but provided code makes it really easy to use. I suspect that you can convert the logic to PHP and other languages (as long as you understand ASP.NET). The link is dead. I think this is the alternative link: http://www.devproconnections.com/article/aspnet2/it-s-about-time-122778 The article is available as PDF form here too: https://app.box.com/shared/bfvvmidtyg  With PHP date function you will get the date time of server on which site is located. The only way to get user time is to use JavaScript. But I suggest you to if your site have registration required then best way is to ask user while registration as compulsory field. You can list various time zones in register page and save that in database. After this if user login to site then you can set default time zone for that session as per users’ selected time zone. You can set any specific time zone using PHP function date_default_timezone_set. This set the specified time zone for users. Basically users’ time zone is goes to client side so we must use JavaScript for this. Below is the script to get users’ time zone using PHP and JavaScript. <?php #http://www.php.net/manual/en/timezones.php List of Time Zones function showclienttime() { if(!isset($_COOKIE['GMT_bias'])) { ?> <script type=""text/javascript""> var Cookies = {}; Cookies.create = function (name value days) { if (days) { var date = new Date(); date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000)); var expires = ""; expires="" + date.toGMTString(); } else { var expires = """"; } document.cookie = name + ""="" + value + expires + ""; path=/""; this[name] = value; } var now = new Date(); Cookies.create(""GMT_bias""now.getTimezoneOffset()1); window.location = ""<?php echo $_SERVER['PHP_SELF'];?>""; </script> <?php } else { $fct_clientbias = $_COOKIE['GMT_bias']; } $fct_servertimedata = gettimeofday(); $fct_servertime = $fct_servertimedata['sec']; $fct_serverbias = $fct_servertimedata['minuteswest']; $fct_totalbias = $fct_serverbias – $fct_clientbias; $fct_totalbias = $fct_totalbias * 60; $fct_clienttimestamp = $fct_servertime + $fct_totalbias; $fct_time = time(); $fct_year = strftime(""%Y"" $fct_clienttimestamp); $fct_month = strftime(""%B"" $fct_clienttimestamp); $fct_day = strftime(""%d"" $fct_clienttimestamp); $fct_hour = strftime(""%I"" $fct_clienttimestamp); $fct_minute = strftime(""%M"" $fct_clienttimestamp); $fct_second = strftime(""%S"" $fct_clienttimestamp); $fct_am_pm = strftime(""%p"" $fct_clienttimestamp); echo $fct_day."" "".$fct_month."" "".$fct_year."" ( "".$fct_hour."":"".$fct_minute."":"".$fct_second."" "".$fct_am_pm."" )""; } showclienttime(); ?> But as per my point of view it’s better to ask to the users if registration is mandatory in your project.  timezone.js: function ajaxpage() { var url = ""timezone.php""; var visitortime = new Date(); var time = visitortime.getTimezoneOffset()/60; var page_request = false; if (window.XMLHttpRequest) { page_request = new XMLHttpRequest(); } else if (window.ActiveXObject) { try { page_request = new ActiveXObject(""Msxml2.XMLHTTP""); } catch (e) { try{ page_request = new ActiveXObject(""Microsoft.XMLHTTP""); } catch (e) { } } } else { return false; } page_request.onreadystatechange = function() { loadpage(page_request containerid); } if (bustcachevar) { bustcacheparameter=(url.indexOf(""?"")!=-1) ? ""&""+new Date().getTime() : ""?""+new Date().getTime(); } page_request.open('GET' url+bustcacheparameter+""&time=""+time true); page_request.send(null); } function loadpage(page_request containerid) { if (page_request.readyState == 4 && (page_request.status==200 || window.location.href.indexOf(""http"")==-1)) { document.write('<meta http-equiv=""refresh"" content=""0;url=http://example.com/""/>'); } } timezone.php: <?php session_start(); $_SESSION['time'] = $_GET['time']; ?> When you want to use it add onLoad=""ajaxpage(); to the body tag and it should cause the timezone to be stored in the PHP session variable $_SESSION['time'] Edit: P.S. This is untested. Care to explain further? Code doesnt work. I dont know much about JS to fix it. The worst answer with high votes I've yet to see on SO. How hard is it to format JS correctly? This should not be the approved answer. Horrific to document.write after load and then document.write a META reload tag instead of just redirect using script! John Isaacks' comment below seems to me like the most straightforward obvious way. +1 for the php approach Since I keep getting downvoted for this answer even 4 years later I want to point out that I +1'd simianarmy's comment here a long time ago and I upvoted Ishmaeel's answer. @UnkwnTech: I'll still downvote because the correct reaction would be to rewrite (or delete) your answer. At the very least you should edit to give a big disclaimer at the start of the answer and possibly redirect to an answer you find more appropriate. Also it only returns the *current* time zone offset - not the *time zone*. See [the timezone tag wiki](http://stackoverflow.com/tags/timezone/info).  There are no HTTP headers that will report the clients timezone so far although it has been suggested to include it in the HTTP specification. If it was me I would probably try to fetch the timezone using clientside JavaScript and then submit it to the server using Ajax or something.  Anyone know of any services that will match IP to geographic location Well lucky for you that answer can be found on our very own stackoverflow website: http://stackoverflow.com/questions/1033/ip-to-country spoiler: http://www.hostip.info/use.html I just went to that website and it was totally wrong :-/ @AdamLassek: possibly interesting information but can you explain why? @AndréCaron It says I'm in Irvine CA when in fact I am actually in Omaha NE. @AdamLassek OK so it works for you but you have nothing to support it being _totally_ wrong then. @AndréCaron It's totally wrong for me so I am advising skepticism of that site's accuracy.  javascript: function maketimus(timestampz) { var linktime = new Date(timestampz * 1000); var linkday = linktime.getDate(); var freakingmonths=new Array(); freakingmonths[0]=""jan""; freakingmonths[1]=""feb""; freakingmonths[2]=""mar""; freakingmonths[3]=""apr""; freakingmonths[4]=""may""; freakingmonths[5]=""jun""; freakingmonths[6]=""jul""; freakingmonths[7]=""aug""; freakingmonths[8]=""sep""; freakingmonths[9]=""oct""; freakingmonths[10]=""nov""; freakingmonths[11]=""dec""; var linkmonthnum = linktime.getMonth(); var linkmonth = freakingmonths[linkmonthnum]; var linkyear = linktime.getFullYear(); var linkhour = linktime.getHours(); var linkminute = linktime.getMinutes(); if (linkminute < 10) {linkminute = ""0"" + linkminute;} var fomratedtime = linkday + linkmonth + linkyear + "" "" + linkhour + "":"" + linkminute + ""h""; return fomratedtime; } simply provide your times in UNIX Timestamp format to this function javascript already knows the timezone of the user. like this: php: echo '<script type=""text/javascript""> var eltimio = maketimus('.$unix_timestamp_ofshiz.'); document.write(eltimio); </script><noscript>pls enable javascript</noscript>'; this will always show the times correctly based on the timezone the person has set on his computer clock no need to ask anything to anyone and save it into places thank god!",html browser timezone timezoneoffset
80,A,"SQLStatement.execute() - multiple queries in one statement I've written a database generation script in SQL and want to execute it in my Adobe AIR application: Create Table tRole ( roleID integer Primary Key roleName varchar(40) ); Create Table tFile ( fileID integer Primary Key fileName varchar(50) fileDescription varchar(500) thumbnailID integer fileFormatID integer categoryID integer isFavorite boolean dateAdded date globalAccessCount integer lastAccessTime date downloadComplete boolean isNew boolean isSpotlight boolean duration varchar(30) ); Create Table tCategory ( categoryID integer Primary Key categoryName varchar(50) parent_categoryID integer ); ... I execute this in Adobe AIR using the following methods: public static function RunSqlFromFile(fileName:String):void { var file:File = File.applicationDirectory.resolvePath(fileName); var stream:FileStream = new FileStream(); stream.open(file FileMode.READ) var strSql:String = stream.readUTFBytes(stream.bytesAvailable); NonQuery(strSql); } public static function NonQuery(strSQL:String):void { var sqlConnection:SQLConnection = new SQLConnection(); sqlConnection.open(File.applicationStorageDirectory.resolvePath(DBPATH); var sqlStatement:SQLStatement = new SQLStatement(); sqlStatement.text = strSQL; sqlStatement.sqlConnection = sqlConnection; try { sqlStatement.execute(); } catch (error:SQLError) { Alert.show(error.toString()); } } No errors are generated however only tRole exists. It seems that it only looks at the first query (up to the semicolon- if I remove it the query fails). Is there a way to call multiple queries in one statement? I wound up using this. It is a kind of a hack but it actually works pretty well. The only thing is you have to be very careful with your semicolons. : D var strSql:String = stream.readUTFBytes(stream.bytesAvailable); var i:Number = 0; var strSqlSplit:Array = strSql.split("";""); for (i = 0; i < strSqlSplit.length; i++){ NonQuery(strSqlSplit[i].toString()); } Just realized how badly this would fail if a semicolon appeared in a varchar field.  The SQLite API has a function called something like sqlite_prepare which takes one statement and prepares it for execution essentially parsing the SQL and storing it in memory. This means that the SQL only has to be sent once to the database engine even though the statement is executed many times. Anyway a statement is a single SQL query that's just the rule. The AIR SQL API doesn't allow sending raw SQL to SQLite only single statements and the reason is likely that AIR uses the sqlite_prepare function when it talks to SQLite.  What about making your delimiter something a little more complex like "";\n"" which would not show up all that often. You just have to ensure when creating the file you have a line return or two in there. I end up putting two ""\n\n"" into the creation of my files which works well.",flex actionscript-3 air
25,A,"How to use the C socket API in C++ on z/OS I've been having issues getting the C sockets API to work properly in C++. Specifically although I am including sys/socket.h I still get compile time errors telling me that AF_INET is not defined. Am I missing something obvious or could this be related to the fact that I'm doing this coding on z/OS and my problems are much more complicated? ;) Oh dear. Upon further investigation I discovered that there is an #ifdef that I'm hitting. Apparently z/OS isn't happy unless I define which type of sockets I'm using with a little #define _OE_SOCKETS action. Now I personally have no idea what this OE SOCKETS thingy is and if any z/OS sockets programmers are out there (all 3 of you) perhaps you could give me a rundown of how this all works? First C++ question on SO. DISCLAIMER: I am not a C++ programmer however I know C really well. I adapated these calls from some C code I have. Also markdown put these strange _ as my underscores. You should just be able to write an abstraction class around the C sockets with something like this: class my_sock { private int sock; private int socket_type; private socklen_t sock_len; private struct sockaddr_in server_addr; public char *server_ip; public unsigned short server_port; }; Then have methods for opening closing and sending packets down the socket. For example the open call might look something like this: int my_socket_connect() { int return_code = 0; if ( this->socket_type != CLIENT_SOCK ) { cout << ""This is a not a client socket!\n""; return -1; } return_code = connect( this->local_sock (struct sockaddr *) &this->server_addr sizeof(this->server_addr)); if( return_code < 0 ) { cout << ""Connect() failure! %s\n"" strerror(errno); return return_code; } return return_code; } This has nothing to do with the the original question.  Sure I can post a test app. #include <sys/socket.h> int main() {  return AF_INET; } Compile/Link Output: cxx -Wcxplink -Wlxplink -o inet_test inet.C ""./inet.C"" line 5.16: CCN5274 (S) The name lookup for ""AF_INET"" did not find a declaration. CCN0797(I) Compilation failed for file ./inet.C. Object file not created. A check of sys/sockets.h does include the definition I need and as far as I can tell it is not being blocked by any #ifdef statements. I have however noticed it contains a the following: #ifdef __cplusplus  extern ""C"" { #endif which encapsulates basically the whole file. Not sure if it matters.  The _OE_SOCKETS appears to be simply to enable/disable the definition of socket-related symbols. It is not uncommon in some libraries to have a bunch of macros to do that to assure that you're not compiling/linking parts not needed. The macro is not standard in other sockets implementations it appears to be something specific to z/OS. Take a look at this page: Compiling and Linking a z/VM C Sockets Program z/OS has as much in common with z/VM as Windows does with Linux so I'm a little bemused why you posted that link. Notice that the _OE_SOCKETS macro appears in both and seems to have the same purpose. Which is not surprising since probably IBM used the same code base for socket support in both products. I did not intend to say that z/VM documentation applies to z/OS it's just the most similar case I found. I think it's just a coincidence. z/VM doesn't use the z/OS Language Environment product which provides the relevant header files used to make socket calls.  Keep a copy of the IBM manuals handy: z/OS V1R11.0 XL C/C++ Programming Guide z/OS V1R11.0 XL C/C++ Run-Time Library Reference The IBM publications are generally very good but you need to get used to their format as well as knowing where to look for an answer. You'll find quite often that a feature that you want to use is guarded by a ""feature test macro"" You should ask your friendly system programmer to install the XL C/C++ Run-Time Library Reference: Man Pages on your system. Then you can do things like ""man connect"" to pull up the man page for the socket connect() API. When I do that this is what I see: FORMAT X/Open #define _XOPEN_SOURCE_EXTENDED 1 #include <sys/socket.h> int connect(int socket const struct sockaddr *address socklen_t address_len); Berkeley Sockets #define _OE_SOCKETS #include <sys/types.h> #include <sys/socket.h> int connect(int socket struct sockaddr *address int address_len);  So try #define _OE_SOCKETS before you include sys/socket.h  The answer is use the c89 flag that follows:  -D_OE_SOCKETS Example follows;  bash-2.03$ c89 -D_OE_SOCKETS [filename].c For more information look for C89 Options in the z/OS XLC/C++ User's Guide.  @Jax: The extern ""C"" thing matters very very much. If a header file doesn't have one then (unless it's a C++-only header file) you would have to enclose your #include with it: extern ""C"" { #include <sys/socket.h> // include other similarly non-compliant header files } Basically anytime where a C++ program wants to link to C-based facilities the extern ""C"" is vital. In practical terms it means that the names used in external references will not be mangled like normal C++ names would. Reference.  You may want to take a look to cpp-sockets a C++ wrapper for the sockets system calls. It works with many operating systems (Win32 POSIX Linux *BSD). I don't think it will work with z/OS but you can take a look at the include files it uses and you'll have many examples of tested code that works well on other OSs.  See the Using z/OS UNIX System Services sockets section in the z/OS XL C/C++ Programming Guide. Make sure you're including the necessary header files and using the appropriate #defines. The link to the doc has changed over the years but you should be able to get to it easily enough by finding the current location of the Support & Downloads section on ibm.com and searching the documentation by title. Your link went dead.  I've had no trouble using the BSD sockets API in C++ in GNU/Linux. Here's the sample program I used: #include <sys/socket.h> int main() {  return AF_INET; } So my take on this is that z/OS is probably the complicating factor here however because I've never used z/OS before much less programmed in it I can't say this definitively. :-P z/OS is ALWAYS the complicating factor. Truer words were never spoken :-)",c++ c sockets mainframe zos
36,A,"Check for changes to an SQL Server table? How can I monitor an SQL Server database for changes to a table without using triggers or modifying the structure of the database in any way? My preferred programming environment is .NET and C#. I'd like to be able to support any SQL Server 2000 SP4 or newer. My application is a bolt-on data visualization for another company's product. Our customer base is in the thousands so I don't want to have to put in requirements that we modify the third-party vendor's table at every installation. By ""changes to a table"" I mean changes to table data not changes to table structure. Ultimately I would like the change to trigger an event in my application instead of having to check for changes at an interval. The best course of action given my requirements (no triggers or schema modification SQL Server 2000 and 2005) seems to be to use the BINARY_CHECKSUM function in T-SQL. The way I plan to implement is this: Every X seconds run the following query: SELECT CHECKSUM_AGG(BINARY_CHECKSUM(*)) FROM sample_table WITH (NOLOCK); and compare that against the stored value. If the value has changed go through the table row by row using the query select row_idBINARY_CHECKSUM(*) from sample_table WITH (NOLOCK); and compare the returned checksums against stored values. They didn't happen to put a last-modified timestamp on their rows did they? Unfortunately CHECKSUM does not work always properly to detect changes. It is only a primitive checksum and no CRC calculation. Therefore you can't use it to detect all changes e. g. symmetrical changes result in the same CHECKSUM! E. g. the solution with CHECKSUM_AGG(BINARY_CHECKSUM(*)) delivers always 0 for all 3 tables with different content!  SELECT CHECKSUM_AGG(BINARY_CHECKSUM(*)) FROM ( SELECT 1 as numA 1 as numB UNION ALL SELECT 1 as numA 1 as numB ) q -- delivers 0!  SELECT CHECKSUM_AGG(BINARY_CHECKSUM(*)) FROM ( SELECT 1 as numA 2 as numB UNION ALL SELECT 1 as numA 2 as numB ) q -- delivers 0! SELECT CHECKSUM_AGG(BINARY_CHECKSUM(*)) FROM ( SELECT 0 as numA 0 as numB UNION ALL SELECT 0 as numA 0 as numB ) q -- delivers 0!  How often do you need to check for changes and how large (in terms of row size) are the tables in the database? If you use the CHECKSUM_AGG(BINARY_CHECKSUM(*)) method suggested by John it will scan every row of the specified table. The NOLOCK hint helps but on a large database you are still hitting every row. You will also need to store the checksum for every row so that you tell one has changed. Have you considered going at this from a different angle? If you do not want to modify the schema to add triggers (which makes a sense it's not your database) have you considered working with the application vendor that does make the database? They could implement an API that provides a mechanism for notifying accessory apps that data has changed. It could be as simple as writing to a notification table that lists what table and which row were modified. That could be implemented through triggers or application code. From your side ti wouldn't matter your only concern would be scanning the notification table on a periodic basis. The performance hit on the database would be far less than scanning every row for changes. The hard part would be convincing the application vendor to implement this feature. Since this can be handles entirely through SQL via triggers you could do the bulk of the work for them by writing and testing the triggers and then bringing the code to the application vendor. By having the vendor support the triggers it prevent the situation where your adding a trigger inadvertently replaces a trigger supplied by the vendor.  Have a DTS job (or a job that is started by a windows service) that runs at a given interval. Each time it is run it gets information about the given table by using the system INFORMATION_SCHEMA tables and records this data in the data repository. Compare the data returned regarding the structure of the table with the data returned the previous time. If it is different then you know that the structure has changed. Example query to return information regarding all of the columns in table ABC (ideally listing out just the columns from the INFORMATION_SCHEMA table that you want instead of using select * like I do here): select * from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'ABC' You would monitor different columns and INFORMATION_SCHEMA views depending on how exactly you define ""changes to a table"". The question is about changes in table data and information_schema contains schema (column definitions) of the table.  Wild guess here: If you don't want to modify the third party's tables Can you create a view and then put a trigger on that view?  Check the last commit date. Every database has a history of when each commit is made. I believe its a standard of ACID compliance.  Take a look at the CHECKSUM command: SELECT CHECKSUM_AGG(BINARY_CHECKSUM(*)) FROM sample_table WITH (NOLOCK); That will return the same number each time it's run as long as the table contents haven't changed. See my post on this for more information: CHECKSUM Here's how I used it to rebuild cache dependencies when tables changed: ASP.NET 1.1 database cache dependency (without triggers) Thanks wasn't aware of those functions. Now if only they were allowed in SqlDependency queries...  Why don't you want to use triggers. They are a good thing if you use them correctly. If you use them as a way to enforce referential integrity that is when they go from good to bad. But if you use them for monitoring they are not really considered taboo.  Unfortunately I do not think that there is a clean way to do this in SQL2000. If you narrow your requirements to SQL Server 2005 (and later) then you are in business. You can use the SQLDependency class in System.Data.SqlClient. See Query Notifications in SQL Server (ADO.NET).",sql-server datatable rdbms
85,A,"Flat File Databases What are your best practices around creating flat file database structures in PHP? A lot of the more mature PHP flat file frameworks I see out there attempt to implement SQL-like query syntax which is over the top for my purposes in most cases (I would just use a database at that point). Are there any elegant tricks out there to get good performance and features with the small code overhead one would want by taking on this problem in the first place? If you're going to use a flat file to persist data use XML to structure the data. PHP has a built-in XML parser.  Just pointing out a potential problem with a flat file database with this type of system: data|some text|more data row 2 data|bla hbalh|more data ...etc The problem is that the cell data contains a ""|"" or a ""\n"" then the data will be lost. Sometimes it would be easier to split by combinations of letters that most people wouldn't use. For example: Column splitter: #$% (Shift+345) Row splitter: ^&* (Shift+678) Text file: test data#$%blah blah#$%^&*new row#$%new row data 2 Then use: explode(""#$%"" $data); use foreach the explode again to separate columns Or anything along these lines. Also I might add that flat file databases are good for systems with small amounts of data (ie. less than 20 rows) but become huge memory hogs for larger databases.  Here's the code we use for Lilina. It stores each entry as a separate file which we found is efficient enough for use (no unneeded data is loaded and it's faster to save).  A low level object API flatfile database is Mimesis (an open source PHP flat file database low-level API).  I have written two simple functions designed to store data in a file. You can judge for yourself if it's useful in this case. The point is to save a php variable (if it's either an array a string or an object) to a file. <?php function varname(&$var) { $oldvalue=$var; $var='AAAAB3NzaC1yc2EAAAABIwAAAQEAqytmUAQKMOj24lAjqKJC2Gyqhbhb+DmB9eDDb8+QcFI+QOySUpYDn884rgKB6EAtoFyOZVMA6HlNj0VxMKAGE+sLTJ40rLTcieGRCeHJ/TI37e66OrjxgB+7tngKdvoG5EF9hnoGc4eTMpVUDdpAK3ykqR1FIclgk0whV7cEn/6K4697zgwwb5R2yva/zuTX+xKRqcZvyaF3Ur0Q8T+gvrAX8ktmpE18MjnA5JuGuZFZGFzQbvzCVdN52nu8i003GEFmzp0Ny57pWClKkAy3Q5P5AR2BCUwk8V0iEX3iu7J+b9pv4LRZBQkDujaAtSiAaeG2cjfzL9xIgWPf+J05IQ=='; foreach($GLOBALS as $var_name => $value) { if ($value === 'AAAAB3NzaC1yc2EAAAABIwAAAQEAqytmUAQKMOj24lAjqKJC2Gyqhbhb+DmB9eDDb8+QcFI+QOySUpYDn884rgKB6EAtoFyOZVMA6HlNj0VxMKAGE+sLTJ40rLTcieGRCeHJ/TI37e66OrjxgB+7tngKdvoG5EF9hnoGc4eTMpVUDdpAK3ykqR1FIclgk0whV7cEn/6K4697zgwwb5R2yva/zuTX+xKRqcZvyaF3Ur0Q8T+gvrAX8ktmpE18MjnA5JuGuZFZGFzQbvzCVdN52nu8i003GEFmzp0Ny57pWClKkAy3Q5P5AR2BCUwk8V0iEX3iu7J+b9pv4LRZBQkDujaAtSiAaeG2cjfzL9xIgWPf+J05IQ==') { $var=$oldvalue; return $var_name; } } $var=$oldvalue; return false; } function putphp(&$var $file=false) { $varname=varname($var); if(!$file) { $file=$varname.'.php'; } $pathinfo=pathinfo($file); if(file_exists($file)) { if(is_dir($file)) { $file=$pathinfo['dirname'].'/'.$pathinfo['basename'].'/'.$varname.'.php'; } } file_put_contents($file'<?php'.""\n\$"".$varname.'='.var_export($var true)."";\n""); return true; } This is a four-year-old question with an accepted answer and many additional answers. Consider focusing on newer questions unless the accepted answer here is clearly wrong or inadequate.  Well what is the nature of the flat databases. Are they large or small. Is it simple arrays with arrays in them? if its something simple say userprofiles built as such: $user = array(""name"" => ""dubayou"" ""age"" => 20 ""websites"" => array(""dubayou.com""""willwharton.com""""codecream.com"") ""and_one"" => ""more""); and to save or update the db record for that user. $dir = ""../userdata/""; //make sure to put it bellow what the server can reach. file_put_contents($dir.$user['name']serialize($user)); and to load the record for the user function &get_user($name){ return unserialize(file_get_contents(""../userdata/"".$name)); } but again this implementation will vary on the application and nature of the database you need.  That's true. serialize() can be pretty useful for that as well. You could serialize but this saves a step since you don't have to unserialize. Not sure if its actually better performance-wise. I think the trick to coming up with a viable system is finding some way to index the data nodes without killing yourself with complexity. Maybe have one central file that keeps track of all indexes? Like tags.txt which has a list of all post id's associated with each tags. May have to keep redundant data around to save time.  IMHO you have two options if you want to avoid homebrewing something: 1) SQLite If you're familiar with PDO you can install a PDO driver that supports SQLite. Never used it but I have used PDO a ton with MySQL. I'm going to give this a shot on a current project. 2) XML Done this many times for relatively small amounts of data. XMLReader is a lightweight read-forward cursor-style class. SimpleXML makes it simple to read an XML document into an object that you can access just like any other class instance.  You might consider SQLite. It's almost as simple as flat files but you do get a SQL engine for querying. It works well with PHP too. SQLite was build into 5.0+ by default but discountinued (!) from PHP 5.4+ on !!! As I write this in July 2012 SQLite will not work on up-to-date systems anymore by default. Official statement [here](http://www.php.net/manual/en/sqlite.requirements.php) Installing the SQLite PDO driver is pretty trivial if you have server access. On Ubuntu/Debian running Apache2 just do apt-get install php5-sqlite service apache2 restart  If you want a human-readable result you can also use this type of file : ofaurax|27|male|something| another|24|unknown|| ... This way you have only one file you can debug it (and manually fix) easily you can add fields later (at the end of each line) and the PHP code is simple (for each line split according to |). However the drawbacks is that you should parse the entire file to search something (if you have millions of entry it's not fine) and you should handle the separator in data (for example if the nick is WaR|ordz).  One way to store flat-file content would be to save literal arrays to php files. For example: $data = array(); if( $_POST ) { $data = $_POST; $content = ""<?php\n""; $content .= '$data=' . var_export($data true) . ""\n""; $content .= ""?>""; save_to_file($filename $content); } // echo form `""One framework I'm considering would be for a blogging platform. Since just about any possible view of data you would want would be sorted by date I was thinking about this structure: One directory per content node: ./content/YYYYMMDDHHMMSS/ Subdirectories of each node including /tags /authors /comments as well as simple text files in the node directory for pre- and post-rendered content and the like. This would allow a simple PHP glob() call (and probably a reversal of the result array) to query on just about anything within the content structure:glob(""content/*/tags/funny""); would return paths including all articles tagged ""funny"".  This one is inspiring as a practical solution: https://github.com/mhgolkar/FlatFire It uses multiple strategies to handling data... [Copied from Readme File] Free or Structured or Mixed - STRUCTURED Regular (table row column) format. [DATABASE] / \ TX TableY \_____________________________ |ROW_0 Colum_0 Colum_1 Colum_2| |ROW_1 Colum_0 Colum_1 Colum_2| |_____________________________| - FREE More creative data storing. You can store data in any structure you want for each (free) element its similar to storing an array with a unique ""Id"". [DATABASE] / \ EX ElementY (ID) \________________ |Field_0 Value_0 | |Field_1 Value_1 | |Field_2 Value_2 | |________________| recall [ID]: get_free(""ElementY"") --> array([Field_0]=>Value_0[Field_1]=>Value_1... - MIXD (Mixed) Mixed databases can store both free elements and tables.If you add a table to a free db or a free element to a structured db flat fire will automatically convert FREE or SRCT to MIXD database. [DATABASE] / \ EX TY  In my opinion using a ""Flat File Database"" in the sense you're meaning (and the answer you've accepted) isn't neccesarily the best way to go about things. First of all using serialize() and unserialize() can cause MAJOR headaches if someone gets in and edits the file (they can in fact put arbritrary code in your ""database"" to be run each time.) Personally I'd say - why not look to the future? There have been so many times that I've had issues because I've been creating my own ""proprietary"" files and the project has exploded to a point where it needs a database and I'm thinking ""you know I wish I'd written this for a database to start with"" - because the refactoring of the code takes way too much time and effort. From this I've learnt that future proofing my application so that when it gets bigger I don't have to go and spend days refactoring is the way to go forward. How do I do this? SQLite. It works as a database uses SQL and is pretty easy to change over to mySQL (espescially if you're using abstracted classes for database manipulation like I do!) In fact espescially with the ""accepted answer""'s method it can drastically cut the memory usage of your app (you don't have to load all the ""RECORDS"" into PHP)  That's true. serialize() can be pretty useful for that as well. I think the trick to coming up with a viable system is finding some way to index the data nodes without killing yourself with complexity. This is post #100! post 100 :D upvote",php sql database flat-file
8,A,Tool for Converting Visual J# code to C#? Are there any conversion tools for porting from Visual J# code to C#? I just used JLCA for some old J# as well as some Eclipse developed projects. Seemed to work well. I just needed to clean up some GUI items after it completed.  Nick mentioned Reflector + FileGenerator. That will kind of work. I've tried it and it works partially; but you still have to sift through the code and fix compiler errors as Reflector doesn't do a perfect job. JLCA is dead last I heard. And if your project is J# (e.g. part .NET) it will stumble on .NET things. For example if you've got any Windows Forms stuff in your J# project JLCA will puke on it. Overall my suggestion would be use Reflector + FileGenerator fix the compiler errors and never look back at J#. :-) Another interesting alternative is Jeroen Frijters's IKVM which can run real Java on top of .NET. This would work if your J# code is all Java stuff and no .NET stuff or MS-specific Java. It's not really a Mono project so I would put the IKVM webpage: http://www.ikvm.net/  Have you tried Reflector + FileGenerator to dump the compiled .NET library to C#. The only problem that I can see is that you are going to have a slight amount of clean up for J# specific references and no comments. But it should provide a good clean solution and get you 90% of the way.,c# code-generation j# visualj#
42,A,"Best way to allow plugins for a PHP application I am starting a new web application in PHP and this time around I want to create something that people can extend by using a plugin interface. How does one go about writing 'hooks' into their code so that plugins can attach to specific events? So let's say you don't want the Observer pattern because it requires that you change your class methods to handle the task of listening and want something generic. And let's say you don't want to use extends inheritance because you may already be inheriting in your class from some other class. Wouldn't it be great to have a generic way to make any class pluggable without much effort? Here's how: <?php //////////////////// // PART 1 //////////////////// class Plugin { private $_RefObject; private $_Class = ''; public function __construct(&$RefObject) { $this->_Class = get_class(&$RefObject); $this->_RefObject = $RefObject; } public function __set($sProperty$mixed) { $sPlugin = $this->_Class . '_' . $sProperty . '_setEvent'; if (is_callable($sPlugin)) { $mixed = call_user_func_array($sPlugin $mixed); } $this->_RefObject->$sProperty = $mixed; } public function __get($sProperty) { $asItems = (array) $this->_RefObject; $mixed = $asItems[$sProperty]; $sPlugin = $this->_Class . '_' . $sProperty . '_getEvent'; if (is_callable($sPlugin)) { $mixed = call_user_func_array($sPlugin $mixed); } return $mixed; } public function __call($sMethod$mixed) { $sPlugin = $this->_Class . '_' . $sMethod . '_beforeEvent'; if (is_callable($sPlugin)) { $mixed = call_user_func_array($sPlugin $mixed); } if ($mixed != 'BLOCK_EVENT') { call_user_func_array(array(&$this->_RefObject $sMethod) $mixed); $sPlugin = $this->_Class . '_' . $sMethod . '_afterEvent'; if (is_callable($sPlugin)) { call_user_func_array($sPlugin $mixed); } } } } //end class Plugin class Pluggable extends Plugin { } //end class Pluggable //////////////////// // PART 2 //////////////////// class Dog { public $Name = ''; public function bark(&$sHow) { echo ""$sHow<br />\n""; } public function sayName() { echo ""<br />\nMy Name is: "" . $this->Name . ""<br />\n""; } } //end class Dog $Dog = new Dog(); //////////////////// // PART 3 //////////////////// $PDog = new Pluggable($Dog); function Dog_bark_beforeEvent(&$mixed) { $mixed = 'Woof'; // Override saying 'meow' with 'Woof' //$mixed = 'BLOCK_EVENT'; // if you want to block the event return $mixed; } function Dog_bark_afterEvent(&$mixed) { echo $mixed; // show the override } function Dog_Name_setEvent(&$mixed) { $mixed = 'Coco'; // override 'Fido' with 'Coco' return $mixed; } function Dog_Name_getEvent(&$mixed) { $mixed = 'Different'; // override 'Coco' with 'Different' return $mixed; } //////////////////// // PART 4 //////////////////// $PDog->Name = 'Fido'; $PDog->Bark('meow'); $PDog->SayName(); echo 'My New Name is: ' . $PDog->Name; In Part 1 that's what you might include with a require_once() call at the top of your PHP script. It loads the classes to make something pluggable. In Part 2 that's where we load a class. Note I didn't have to do anything special to the class which is significantly different than the Observer pattern. In Part 3 that's where we switch our class around into being ""pluggable"" (that is supports plugins that let us override class methods and properties). So for instance if you have a web app you might have a plugin registry and you could activate plugins here. Notice also the ""Dog_bark_beforeEvent"" function. If I set $mixed = 'BLOCK_EVENT' before the return statement it will block the dog from barking and would also block the Dog_bark_afterEvent because there wouldn't be any event. In Part 4 that's the normal operation code but notice that what you might think would run does not run like that at all. For instance the dog does not announce it's name as 'Fido' but 'Coco'. The dog does not say 'meow' but 'Woof'. And when you want to look at the dog's name afterwards you find it is 'Different' instead of 'Coco'. All those overrides were provided in Part 3. So how does this work? Well let's rule out eval() (which everyone says is ""evil"") and rule out that it's not an Observer pattern. So the way it works is the sneaky empty class called Pluggable which does not contain the methods and properties used by the Dog class. Thus since that occurs the magic methods will engage for us. That's why in parts 3 and 4 we mess with the object derived from the Pluggable class not the Dog class itself. Instead we let the Plugin class do the ""touching"" on the Dog object for us. (If that's some kind of design pattern I don't know about -- please let me know.) I [read up on Wikipedia about this](http://en.wikipedia.org/wiki/Decorator_pattern) and whoa you're right! :) Isn't this a decorator?  Good advice is to look how other projects have done it. Many call for having plugins installed and their ""name"" registered for services (like wordpress does) so you have ""points"" in your code where you call a function that identifies registered listeners and executes them. A standard OO design patter is the Observer Pattern which would be a good option to implement in a truly object oriented PHP system. The Zend Framework makes use of many hooking methods and is very nicely architected. That would be a good system to look at.  I believe the easiest way would be to follow Jeff's own advice and have a look around existing code. Try looking at Wordpress Drupal Joomla and other well known PHP-based CMS's to see how their API hooks look and feel. This way you can even get ideas you may have not thought of previously to make things a little more rubust. A more direct answer would be to write general files that they would ""include_once"" into their file that would provide the usability they would need. This would be broken up into categories and NOT provided in one MASSIVE ""hooks.php"" file. Be careful though because what ends up happening is that files that they include end up having more and more dependencies and functionality improves. Try to keep API dependencies low. I.E fewer files for them to include. I'd add DokuWiki to the list of systems you may have a look at. It has a nice event system that allows for a rich plugin ecosystem.  There's a neat project called Stickleback by Matt Zandstra at Yahoo that handles much of the work for handling plugins in PHP. It enforces the interface of a plugin class supports a command line interface and isn't too hard to get up and running - especially if you read the cover story about it in the PHP architect magazine.  The hook and listener method is the most commonly used but there are other things you can do. Depending on the size of your app and who your going to allow see the code (is this going to be a FOSS script or something in house) will influence greatly how you want to allow plugins. kdeloach has a nice example but his implementation and hook function is a little unsafe. I would ask for you to give more information of the nature of php app your writing And how you see plugins fitting in. +1 to kdeloach from me.  You could use an Observer pattern. A simple functional way to accomplish this: <?php /** Plugin system **/ $listeners = array(); /* Create an entry point for plugins */ function hook(){  global $listeners;  $num_args = func_num_args();  $args = func_get_args();  if($num_args < 2)  trigger_error(""Insufficient arguments"" E_USER_ERROR);  // Hook name should always be first argument  $hook_name = array_shift($args);  if(!isset($listeners[$hook_name]))  return; // No plugins have registered this hook  foreach($listeners[$hook_name] as $func){  $args = $func($args);  }  return $args; } /* Attach a function to a hook */ function add_listener($hook $function_name){  global $listeners;  $listeners[$hook][] = $function_name; } ///////////////////////// /** Sample Plugin **/ add_listener('a_b' 'my_plugin_func1'); add_listener('str' 'my_plugin_func2'); function my_plugin_func1($args){  return array(4 5); } function my_plugin_func2($args){  return str_replace('sample' 'CRAZY' $args[0]); } ///////////////////////// /** Sample Application **/ $a = 1; $b = 2; list($a $b) = hook('a_b' $a $b); $str = ""This is my sample application\n""; $str .= ""$a + $b = "".($a+$b).""\n""; $str .= ""$a * $b = "".($a*$b).""\n""; $str = hook('str' $str); echo $str; ?> Output: This is my CRAZY application 4 + 5 = 9 4 * 5 = 20 Notes: For this example source code you must declare all your plugins before the actual source code that you want to be extendable. I've included an example of how to handle single or multiple values being passed to the plugin. The hardest part of this is writing the actual documentation which lists what arguments get passed to each hook. This is just one method of accomplishing a plugin system in PHP. There are better alternatives I suggest you check out the WordPress Documentation for more information. Sorry it appears underscore characters are replaced by HTML entities by Markdown? I can re-post this code when this bug gets fixed. Edit: Nevermind it only appears that way when you are editing Note that for PHP >= 5.0 you can implement this using the Observer / Subject interfaces defined in the SPL: http://www.php.net/manual/en/class.splobserver.php Pedantic note: this is not an example of the Observer pattern. It's an example of the [`Mediator Pattern`](http://sourcemaking.com/design_patterns/mediator). True observers are purely notification there is no message passing or conditional notification (nor is there a central manager for controlling notifications). It doesn't make the answer *wrong* but it should be noted to stop people calling things by the wrong name...  Here is an approach I've used it's an attempt to copy from Qt signals/slots mechanism a kind of Observer pattern. Objects can emit signals. Every signal has an ID in the system - it's composed by sender's id + object name Every signal can be binded to the receivers which simply is a ""callable"" You use a bus class to pass the signals to anybody interested in receiving them When something happens you ""send"" a signal. Below is and example implementation  <?php class SignalsHandler { /** * hash of senders/signals to slots * * @var array */ private static $connections = array(); /** * current sender * * @var class|object */ private static $sender; /** * connects an object/signal with a slot * * @param class|object $sender * @param string $signal * @param callable $slot */ public static function connect($sender $signal $slot) { if (is_object($sender)) { self::$connections[spl_object_hash($sender)][$signal][] = $slot; } else { self::$connections[md5($sender)][$signal][] = $slot; } } /** * sends a signal so all connected slots are called * * @param class|object $sender * @param string $signal * @param array $params */ public static function signal($sender $signal $params = array()) { self::$sender = $sender; if (is_object($sender)) { if ( ! isset(self::$connections[spl_object_hash($sender)][$signal])) { return; } foreach (self::$connections[spl_object_hash($sender)][$signal] as $slot) { call_user_func_array($slot (array)$params); } } else { if ( ! isset(self::$connections[md5($sender)][$signal])) { return; } foreach (self::$connections[md5($sender)][$signal] as $slot) { call_user_func_array($slot (array)$params); } } self::$sender = null; } /** * returns a current signal sender * * @return class|object */ public static function sender() { return self::$sender; } } class User { public function login() { /** * try to login */ if ( ! $logged ) { SignalsHandler::signal(this 'loginFailed' 'login failed - username not valid' ); } } } class App { public static function onFailedLogin($message) { print $message; } } $user = new User(); SignalsHandler::connect($user 'loginFailed' array($Log 'writeLog')); SignalsHandler::connect($user 'loginFailed' array('App' 'onFailedLogin')); $user->login(); ?>  I am surprised that most of the answers here seem to be geared about plugins that are local to the web application ie plugins that run on the local web server. What about if you wanted the plugins to run on a different - remote - server? The best way to do this would be to provide a form that allows you to define different URLs that would be called when particular events occur in your application. Different events would send different information based on the event that just occurred. This way you would just perform a cURL call to the URL that has been provided to your application (eg over https) where remote servers can perform tasks based on information that has been sent by your application. This provides two benefits: You don't have to host any code on your local server (security) The code can be on remote servers (extensibility) in different languages other then PHP (portability) This is more of a ""push API"" than a ""plugin"" system - you're providing a way for other services to receive notification of selected events. What is generally meant by ""plugins"" is that you can install the application and then add functionality to customise its behaviour to your purposes which requires the plugin to be running locally - or at least have a secure and efficient 2-way communication to provide information *to* the application not just take it *from* it. The two features are somewhat distinct and for many cases a ""feed"" (e.g. RSS iCal) is a simple alternative to a push API.",php plugins architecture hook
59,A,"How do I get a distinct ordered list of names from a DataTable using LINQ? Let's say I have a DataTable with a Name column. I want to have a collection of the unique names ordered alphabetically. The following query ignores the order by clause. var names = (from DataRow dr in dataTable.Rows orderby (string)dr[""Name""] select (string)dr[""Name""]).Distinct(); Why does the orderby not get enforced? var sortedTable = (from results in resultTable.AsEnumerable() select (string)results[attributeList]).Distinct().OrderBy(name => name);  Try out the following: dataTable.Rows.Cast<DataRow>().select(dr => dr[""Name""].ToString()).Distinct().OrderBy(name => name);  To make it more readable and maintainable you can also split it up into multiple LINQ statements. First select your data into a new list let's call it x1 do a projection if desired Next create a distinct list from x1 into x2 using whatever distinction you require Finally create an ordered list from x2 into x3 sorting by whatever you desire @Bob's answer seem the best and uses the lease lines of code  The problem is that the Distinct operator does not grant that it will maintain the original order of values. So your query will need to work like this var names = (from DataRow dr in dataTable.Rows select (string)dr[""Name""]).Distinct().OrderBy( name => name );  Try the following var names = (from dr in dataTable.Rows select (string)dr[""Name""]).Distinct().OrderBy(name => name); this should work for what you need.",c# linq .net-3.5
6,A,"Why doesn't the percentage width child in absolutely positioned parent work? I have an absolutely positioned div containing several children one of which is a relatively positioned div. When I use a percentage-based width on the child div it collapses to 0 width on IE7 but not on Firefox or Safari. If I use pixel width it works. If the parent is relatively positioned the percentage width on the child works. Is there something I'm missing here? Is there an easy fix for this besides the pixel-based width on the child? Is there an area of the CSS specification that covers this? Why doesn’t the percentage width child in absolutely positioned parent work in IE7? Because it's Internet Exploder Is there something I'm missing here? That is to raise your co-worker's / clients' awareness that IE sucks. Is there an easy fix besides the pixel-based width on the child? Use em units as they are more useful when creating liquid layouts as you can use them for padding and margins as well as font sizes. So your white space grows and shrinks proportionally to your text if it is resized (which is really what you need). I don't think percentages give a finer control than ems; there's nothing to stop you specifying in hundredths of ems (0.01 em) and the browser will interpret as it sees fit. Is there an area of the CSS specification that covers this? None as far as I remember em's and %'s were intended for font sizes alone back at CSS 1.0.  Does the parent div have a defined width either pixel or percentage? Not 100% sure but I think in IE7 the parent div needs a defined width for child percentage divs to work correctly.  I think this has something to do with the way the hasLayout property is implemented in the older browser. Have you tried your code in IE8 to see if works in there too? IE8 has a Debugger (F12) and can also run in IE7 mode.  IE prior to 8 has a temporal aspect to its box model that most notably creates a problem with percentage based widths. In your case here an absolutely positioned div by default has no width. Its width will be worked out based on the pixel width of its content and will be calculated after the contents are rendered. So at the point IE encounters and renders your relatively positioned div its parent has a width of 0 hence why it itself collapses to 0. If you would like a more in depth discussion of this along with lots of working examples have a gander here.  Here is some sample code. I think this is what you are looking for. The following displays exactly the same in Firefox 3 (mac) and IE7. <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd""> <html xmlns=""http://www.w3.org/1999/xhtml""> <head> <style> #absdiv { position: absolute; left: 100px; top: 100px; width: 80%; height: 60%; background: #999; } #pctchild { width: 60%; height: 40%; background: #CCC; } #reldiv { position: relative; left: 20px; top: 20px; height: 25px; width: 40%; background: red; } </style> </head> <body> <div id=""absdiv""> <div id=""reldiv""></div> <div id=""pctchild""></div> </div> </body> </html>",html css css3 internet-explorer-7
17,A,"Binary Data in MySQL How do I store binary data in MySQL? When I need to store binary data I always use VARBINARY format as introduced byd0nut. You can find documentation here If you are asking what are advantagese please look at link  If the - not recommended - BLOB field exists you can save data this way: mysql_query(""UPDATE table SET field=X'"".bin2hex($bin_data).""' WHERE id=$id""); Idea taken from here.  It depends on the data you wish to store. The above example uses the LONGBLOB data type but you should be aware that there are other binary data formats: TINYBLOB/BLOB/MEDIUMBLOB/LONGBLOB VARBINARY BINARY Each has their use cases. If it is a known (short) length (e.g. packed data) often times BINARY or VARBINARY will work. They have the added benefit of being able ton index on them.  I strongly recommend against storing binary data in a relational database. Relational databases are designed to work with fixed-size data; that's where their performance strength is: remember Joel's old article on why databases are so fast? because it takes exactly 1 pointer increment to move from a record to another record. If you add BLOB data of undefined and vastly varying size you'll screw up performance. Instead store files in the file system and store file names in your database. it would be nice if downvoters would actually explain why they downvoted this one. Since it actually makes a lot of sense despite not directly answering OP question. +1 for the nice explanation I didn't downvote but it might be due him implying that you should NEVER do it as opposed to saying it's a bad idea most of the time. I agree with him generally but not in 100% of cases. There can be considerations other than performance. For example I'm working on something now where performance doesn't matter at all. Other factors such as centralisation simplicity and backups mean that in this case storing in the database makes sense. Another common reason is replication. BLOB field has a fixed 64 kilobytes size. It is not varying isn't it? 64KB won't fit many files inside - so you'll need to have more than one 64KB block to store the data. On the other hand storing data in db is OS independent which can be nice for weird filenames. db can store multiple files with same filename the OS cannot. It has no read/write/delete issues. It doesn't need an additional backup system. And it's not public. So sometimes it's fast in development. Btw. nobody is forcing you to store everything in the same database in the end it all ends up on a disk.  The question also arises how to get the data into the BLOB. You can put the data in an INSERT statement as the PHP example shows (although you should use mysql_real_escape_string instead of addslashes). If the file exists on the database server you can also use MySQL's LOAD_FILE  While it shouldn't be necessary you could try base64 encoding data in and decoding it out. That means the db will just have ascii characters. It will take a bit more space and time but any issue to do with the binary data will be eliminated.  A much better storage implementation in available here. You'll run into issues with Florian's implementation.  While you haven't said what you're storing and you may have a great reason for doing so often the answer is 'as a filesystem reference' and the actual data is on the filesystem somewhere. http://www.onlamp.com/pub/a/onlamp/2002/07/11/MySQLtips.html  For a table like this: CREATE TABLE binary_data ( id INT(4) NOT NULL AUTO_INCREMENT PRIMARY KEY description CHAR(50) bin_data LONGBLOB filename CHAR(50) filesize CHAR(50) filetype CHAR(50) ); Here is a PHP example: <?php // store.php3 - by Florian Dittmer <dittmer@gmx.net> // Example php script to demonstrate the storing of binary files into // an sql database. More information can be found at http://www.phpbuilder.com/ ?> <html> <head><title>Store binary data into SQL Database</title></head> <body> <?php // Code that will be executed if the form has been submitted: if ($submit) { // Connect to the database (you may have to adjust // the hostname username or password). MYSQL_CONNECT(""localhost""""root""""password""); mysql_select_db(""binary_data""); $data = mysql_real_escape_string(fread(fopen($form_data ""r"") filesize($form_data))); $result=MYSQL_QUERY(""INSERT INTO binary_data (description bin_data filename filesize filetype) "". ""VALUES ('$form_description' '$data' '$form_data_name' '$form_data_size' '$form_data_type')""); $id= mysql_insert_id(); print ""<p>This file has the following Database ID: <b>$id</b>""; MYSQL_CLOSE(); } else { // else show the form to submit new data: ?> <form method=""post"" action=""<?php echo $PHP_SELF; ?>"" enctype=""multipart/form-data""> File Description:<br> <input type=""text"" name=""form_description"" size=""40""> <input type=""hidden"" name=""MAX_FILE_SIZE"" value=""1000000""> <br>File to upload/store in database:<br> <input type=""file"" name=""form_data"" size=""40""> <p><input type=""submit"" name=""submit"" value=""submit""> </form> <?php } ?> </body> </html> This code looks like PHP3 (or maybe 4) which register_globals enabled. You don't want to run this code and it will also not work on a semi up to date PHP installation (which is version 5). -1 for addslashes() where mysql_real_escape_string() is needed. Can we please stop giving people code with SQL injection vulnerabilities in it? (No addslashes() is NOT good enough.)  The answer by phpguy is correct but I think there is a lot of confusing additional detail there. The basic answer is in a BLOB column. BLOB is short for Binary Large Object and that column type is specifically for handling binary data. See the relevant manual page. There is no answer above. Only a question. @Tiberiu-IonuțStan Back when I wrote this answer SO was still in beta and answers were ordered by time of posting rather than votes (possibly?). Anyway at the time of writing this answer was not at the top and the one I was referencing (by phpguy) was :) I'll edit to clear it up. @Kyle Cronin: that link is broken ("" oh no 404""). @PeterMortensen Here's a working link: http://blog.stackoverflow.com/2009/01/reputation-bounty-for-unanswered-questions/",mysql database binary-data data-storage
88,A,"Is gettimeofday() guaranteed to be of microsecond resolution? So I find myself porting a game that was originally written for the Win32 API to Linux (well porting the OS X port of the Win32 port to Linux). I have implemented QueryPerformanceCounter by giving the uSeconds since the process start up: BOOL QueryPerformanceCounter(LARGE_INTEGER* performanceCount) { gettimeofday(&currentTimeVal NULL); performanceCount->QuadPart = (currentTimeVal.tv_sec - startTimeVal.tv_sec); performanceCount->QuadPart *= (1000 * 1000); performanceCount->QuadPart += (currentTimeVal.tv_usec - startTimeVal.tv_usec); return true; } This coupled with QueryPerformanceFrequency() giving a constant 1000000 as the frequency works well on my machine giving me a 64 bit variable that contains uSeconds since the program's start up. So is this portable? I don't want to discover it works differently if the kernel was compiled in a certain way or anything like that. I am fine with it being non-portable to something other than Linux however. The actual resolution of gettimeofday() depends on the hardware architecture. Intel processors as well as SPARC machines offer high resolution timers that measure microseconds. Other hardware architectures fall back to the system’s timer which is typically set to 100 Hz. In such cases the time resolution will be less accurate. I obtained this answer from High Resolution Time Measurement and Timers Part I  Maybe. But you have bigger problems. gettimeofday() can result in incorrect timings if there are processes on your system that change the timer (ie ntpd). On a ""normal"" linux though I believe the resolution of gettimeofday() is 10us. It can jump forward and backward and time consequently based on the processes running on your system. This effectively makes the answer to your question no. You should look into clock_gettime(CLOCK_MONOTONIC) for timing intervals. It suffers from several less issues due to things like multi-core systems and external clock settings. Also look into the clock_getres() function. clock_gettime is present only on newest Linux. other system have only gettimeofday() @vitaly.v.ch it's POSIX so it's not Linux only and 'newist'? even 'Enterprise' distros like Red Hat Enterprise Linux are based on 2.6.18 which has clock_gettime so no not very new.. (manpage date in RHEL is 2004-March-12 so it's been around for a while) unless you're talking about REALLY FREAKING OLD kernels WTF do you mean? clock_gettime was included in POSIX in 2001. as far as I know currently clock_gettime() implemented in Linux 2.6 and qnx. but linux 2.4 is currently used in many production systems. It was introduced in 2001 but not mandatory until POSIX 2008. From the Linux FAQ for lock_gettime (see David Schlosnagle's answer) ""CLOCK_MONOTONIC...is frequency adjusted by NTP via adjtimex(). In the future (I'm still trying to get the patch in) there will be a CLOCK_MONOTONIC_RAW that will not be modified at all and will have a linear correlation with the hardware counters."" I don't think the _RAW clock ever made it into the kernel (unless it was renamed _HR but my research suggests that efforts being abandonned too).  You may be interested in Linux FAQ for clock_gettime(CLOCK_REALTIME)  So it says microseconds explicitly but says the resolution of the system clock is unspecified. I suppose resolution in this context means how the smallest amount it will ever be incremented? The data structure is defined as having microseconds as a unit of measurement but that doesn't mean that the clock or operating system is actually capable of measuring that finely. Like other people have suggested gettimeofday() is bad because setting the time can cause clock skew and throw off your calculation. clock_gettime(CLOCK_MONOTONIC) is what you want and clock_getres() will tell you the precision of your clock. So what happens in your code when gettimeofday() jumps forward or backward with daylight savings? clock_gettime is present only on newest Linux. other system have only gettimeofday() @mpez0 it doesn't  @Bernard: I have to admit most of your example went straight over my head. It does compile and seems to work though. Is this safe for SMP systems or SpeedStep? That's a good question... I think the code's ok. From a practical standpoint we use it in my company every day and we run on a pretty wide array of boxes everything from 2-8 cores. Of course YMMV etc but it seems to be a reliable and low-overhead (because it doesn't make a context switch into system-space) method of timing. Generally how it works is: declare the block of code to be assembler (and volatile so the optimizer will leave it alone). execute the CPUID instruction. In addition to getting some CPU information (which we don't do anything with) it synchronizes the CPU's execution buffer so that the timings aren't affected by out-of-order execution. execute the rdtsc (read timestamp) execution. This fetches the number of machine cycles executed since the processor was reset. This is a 64-bit value so with current CPU speeds it will wrap around every 194 years or so. Interestingly in the original Pentium reference they note it wraps around every 5800 years or so. the last couple of lines store the values from the registers into the variables hi and lo and put that into the 64-bit return value. Specific notes: out-of-order execution can cause incorrect results so we execute the ""cpuid"" instruction which in addition to giving you some information about the cpu also synchronizes any out-of-order instruction execution. Most OS's synchronize the counters on the CPUs when they start so the answer is good to within a couple of nano-seconds. The hibernating comment is probably true but in practice you probably don't care about timings across hibernation boundaries. regarding speedstep: Newer Intel CPUs compensate for the speed changes and returns an adjusted count. I did a quick scan over some of the boxes on our network and found only one box that didn't have it: a Pentium 3 running some old database server. (these are linux boxes so I checked with: grep constant_tsc /proc/cpuinfo) I'm not sure about the AMD CPUs we're primarily an Intel shop although I know some of our low-level systems gurus did an AMD evaluation. Hope this satisfies your curiosity it's an interesting and (IMHO) under-studied area of programming. You know when Jeff and Joel were talking about whether or not a programmer should know C? I was shouting at them ""hey forget that high-level C stuff... assembler is what you should learn if you want to know what the computer is doing!"" ... The kernel people have been trying to get people to stop using rdtsc for a while... and generally avoid using it in the kernel because it's just that unreliable. For reference the question I asked (In a separate reply -- before comments) was: ""I have to admit most of your example went straight over my head. It does compile and seems to work though. Is this safe for SMP systems or SpeedStep?""  Wine is actually using gettimeofday() to implement QueryPerformanceCounter() and it is known to make many Windows games work on Linux and Mac. Starts http://source.winehq.org/source/dlls/kernel32/cpu.c#L312 leads to http://source.winehq.org/source/dlls/ntdll/time.c#L448 Thanks this is very useful. Thats just horrible.  From my experience and from what I've read across the internet the answer is ""No"" it is not guaranteed. It depends on CPU speed operating system flavor of Linux etc.  High Resolution Low Overhead Timing for Intel Processors If you're on Intel hardware here's how to read the CPU real-time instruction counter. It will tell you the number of CPU cycles executed since the processor was booted. This is probably the finest-grained counter you can get for performance measurement. Note that this is the number of CPU cycles. On linux you can get the CPU speed from /proc/cpuinfo and divide to get the number of seconds. Converting this to a double is quite handy. When I run this on my box I get 11867927879484732 11867927879692217 it took this long to call printf: 207485 Here's the Intel developer's guide that gives tons of detail. #include <stdio.h> #include <stdint.h> inline uint64_t rdtsc() { uint32_t lo hi; __asm__ __volatile__ ( ""xorl %%eax %%eax\n"" ""cpuid\n"" ""rdtsc\n"" : ""=a"" (lo) ""=d"" (hi) : : ""%ebx"" ""%ecx""); return (uint64_t)hi << 32 | lo; } main() { unsigned long long x; unsigned long long y; x = rdtsc(); printf(""%lld\n""x); y = rdtsc(); printf(""%lld\n""y); printf(""it took this long to call printf: %lld\n""y-x); } Note that the TSC might not always be synchronized between cores might stop or change its frequency when the processor enters lower power modes (and you have no way of knowing it did so) and in general is not always reliable. The kernel is able to detect when it is reliable detect other alternatives like HPET and ACPI PM timer and automatically select the best one. It's a good idea to always use the kernel for timing unless you are really sure the TSC is stable and monotonic. The TSC on Core and above Intel platforms is synchronized across multiple CPUs *and* increments at a constant frequency independent of power management states. See Intel Software Developer’s Manual Vol. 3 Section 18.10. However the rate at which the counter increments is *not* the same as the CPU's frequency. The TSC increments at “the maximum resolved frequency of the platform which is equal to the product of scalable bus frequency and maximum resolved bus ratio” Intel Software Developer’s Manual Vol. 3 Section 18.18.5. You get those values from the CPU's model-specific registers (MSRs). You can obtain the scalable bus frequency and maximum resolved bus ratio by querying the CPU’s model-specific registers (MSRs) as follows: Scalable bus frequency == MSR_FSB_FREQ[2:0] id 0xCD Maximum resolved bus ratio == MSR_PLATFORM_ID[12:8] id 0x17. Consult Intel SDM Vol.3 Appendix B.1 to interpret the register values. You can use the msr-tools on Linux to query the registers. http://www.kernel.org/pub/linux/utils/cpu/msr-tools/ Shouldn't your code use `CPUID` again after the first `RDTSC` instruction and before executing the code being benchmarked? Otherwise what's to stop the benchmarked code being executed before/in-parallel-with the first `RDTSC` and consequently underrepresented in the `RDTSC` delta?  Reading the RDTSC is not reliable in SMP systems since each CPU maintains their own counter and each counter is not guaranteed to by synchronized with respect to another CPU. I might suggest trying clock_gettime(CLOCK_REALTIME). The posix manual indicates that this should be implemented on all compliant systems. It can provide a nanosecond count but you probably will want to check clock_getres(CLOCK_REALTIME) on your system to see what the actual resolution is. `clock_getres(CLOCK_REALTIME)` will not give the real resolution. It always return ""1 ns"" (one nanosecond) when hrtimers are available check `include/linux/hrtimer.h` file for `define HIGH_RES_NSEC 1` (more at http://stackoverflow.com/a/23044075/196561)  This answer mentions problems with the clock being adjusted. Both your problems guaranteeing tick units and the problems with the time being adjusted are solved in C++11 with the <chrono> library. The clock std::chrono::steady_clock is guaranteed not to be adjusted and furthermore it will advance at a constant rate relative to real time so technologies like SpeedStep must not affect it. You can get typesafe units by converting to one of the std::chrono::duration specializations such as std::chrono::microseconds. With this type there's no ambiguity about the units used by the tick value. However keep in mind that the clock doesn't necessarily have this resolution. You can convert a duration to attoseconds without actually having a clock that accurate.",linux winapi visual-c++ unix timer
16,A,"Filling a DataSet or DataTable from a LINQ query result set How do you expose a LINQ query as an ASMX web service? Usually from the business tier I can return a typed DataSet or DataTable which can be serialized for transport over ASMX. How can I do the same for a LINQ query? Is there a way to populate a typed DataSet or DataTable via a LINQ query?: public static MyDataTable CallMySproc() { string conn = ...; MyDatabaseDataContext db = new MyDatabaseDataContext(conn); MyDataTable dt = new MyDataTable(); // execute a sproc via LINQ var query = from dr in db.MySproc().AsEnumerable select dr; // copy LINQ query resultset into a DataTable -this does not work ! dt = query.CopyToDataTable(); return dt; } How can I get the resultset of a LINQ query into a DataSet or DataTable? Alternatively is the LINQ query serializeable so that I can expose it as an ASMX web service? To perform this query against a DataContext class you'll need to do the following: MyDataContext db = new MyDataContext(); IEnumerable<DataRow> query = (from order in db.Orders.AsEnumerable() select new { order.Property order.Property2 }) as IEnumerable<DataRow>; return query.CopyToDataTable<DataRow>(); Without the as IEnumerable<DataRow>; you will see the following compilation error: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable' to 'System.Collections.Generic.IEnumerable'. An explicit conversion exists (are you missing a cast?)  If you use a return type of IEnumerable you can return your query variable directly.  Make a set of Data Transfer Objects a couple of mappers and return that via the .asmx. You should never expose the database objects directly as a change in the procedure schema will propagate to the web service consumer without you noticing it.  Create a class object and return a list(T) of the query.  As mentioned in the question IEnumerable has a CopyToDataTable method: IEnumerable<DataRow> query = from order in orders.AsEnumerable() where order.Field<DateTime>(""OrderDate"") > new DateTime(2001 8 1) select order; // Create a table from the query. DataTable boundTable = query.CopyToDataTable<DataRow>(); Why won't that work for you? To everyone wondering why CopyToDataTable() doesn't work on their machine: This function is not part of .NET 3.5 SP1 nor will it be of .NET 4.0; it has been restricted to IEnumerable and does not work for IEnumerable -- http://bit.ly/dL0G5 Great solution. works for me too",c# linq web-services .net-3.5
66,A,"Paging a collection with LINQ How do you page through a collection in LINQ given that you have a startIndex and a count? This question is somewhat old but I wanted to post my paging algorithm that shows the whole procedure (including user interaction). It also stores the ""last page's offset"" instead of skipping more and more of the same items which would be somewhat inefficient. const int pageSize = 10; const int count = 100; const int startIndex = 20; int took = 0; bool getNextPage; var page = ideas.Skip(startIndex); do { Console.WriteLine(""Page {0}:"" (took / pageSize) + 1); foreach (var idea in page.Take(pageSize)) { Console.WriteLine(idea); } took += pageSize; Console.WriteLine(""Next page (y/n)?""); char answer = Console.ReadLine().FirstOrDefault(); getNextPage = default(char) != answer && 'y' == char.ToLowerInvariant(answer); if (getNextPage) { page = page.Skip(pageSize); } } while (getNextPage && took < count);  A few months back I wrote a blog post about Fluent Interfaces and LINQ which used an Extension Method on IQueryable<T> and another class to provide the following natural way of paginating a LINQ collection. var query = from i in ideas select i; var pagedCollection = query.InPagesOf(10); var pageOfIdeas = pagedCollection.Page(2); You can get the code from the MSDN Code Gallery Page: Pipelines Filters Fluent API and LINQ to SQL.  I solved this a bit differently than what the others have as I had to make my own paginator with a repeater. So I first made a collection of page numbers for the collection of items that I have: // assumes that the item collection is ""myItems"" int pageCount = (myItems.Count + PageSize - 1) / PageSize; IEnumerable<int> pageRange = Enumerable.Range(1 pageCount); // pageRange contains [1 2 ...  pageCount] Using this I could easily partition the item collection into a collection of ""pages"". A page in this case is just a collection of items (IEnumerable<Item>). This is how you can do it using Skip and Take together with selecting the index from the pageRange created above: IEnumerable<IEnumerable<Item>> pageRange .Select((page index) => myItems .Skip(index*PageSize) .Take(PageSize)); Of course you have to handle each page as an additional collection but e.g. if you're nesting repeaters then this is actually easy to handle. The one-liner TLDR version would be this: var pages = Enumerable .Range(0 pageCount) .Select((index) => myItems.Skip(index*PageSize).Take(PageSize)); Which can be used as this: for (Enumerable<Item> page : pages) { // handle page for (Item item : page) { // handle item in page } }  It is very simple with the Skip and Take extension methods. var query = from i in ideas select i; var paggedCollection = query.Skip(startIndex).Take(count); Did you ask a question... and then answer it to get + votes for the question and answer? You answered this 2 minutes after asking. I believe that it's OK to do something like this. He might have an answer but maybe he wants to see what other people can come up with as well. This was originally posted during the first day of the beta period of StackOverflow thus the 66 for the article ID. I was testing the system for Jeff. Plus it seemed like useful information instead of the usual test crap that sometimes comes out of beta testing.",linq .net-3.5
48,A,"Multiple submit buttons in an HTML form Let's say you create a Wizard in an HTML form. One button goes back and one goes forward. Since the back button appears first in the markup when you press Enter it will use that button to submit the form. Example: <form> <input type=""text"" name=""field1"" /> <!-- put your cursor in this field and press Enter --> <input type=""submit"" name=""prev"" value=""Previous Page"" /> <!-- This is the button that will submit --> <input type=""submit"" name=""next"" value=""Next Page"" /> <!-- But this is the button that I WANT to submit --> </form> What I would like to do is get to decide which button is used to submit the form when a user presses Enter. That way when you press Enter the Wizard will move to the next page not the previous. Do you have to use tabindex to do this? Give your submit buttons same name like this: <input type=""submit"" name=""submitButton"" value=""Previous Page"" /> <input type=""submit"" name=""submitButton"" value=""Next Page"" /> When the user presses enter and the Request goes to server you can check the value for submitButton on your server-side code which contains a collection of form name/value pairs. For example in classic ASP: If Request.Form(""submitButton"") = ""Previous Page"" Then ' Code for Previous Page ElseIf Request.Form(""submitButton"") = ""Next Page"" Then ' Code for Next Page End If Reference: Using multiple submit buttons on a single form This is not what the user asked. The user wanted to know how to control which submit button in a form is activated when enter is pressed ie. which is the default button. doesn't work in an I18n application where you even dont know the label of the button. This is an ugly solution. I advise to not use this one. This worked for me.thanks  I would use Javascript to submit the form. The function would be triggered by the OnKeyPress event of the form element and would detect whether the Enter key was selected. If this is the case it will submit the form. Here are two pages that give techniques on how to do this: 1 2. Based on these here is an example of usage (based on here): <SCRIPT TYPE=""text/javascript""><!-- function submitenter(myfielde) {  var keycode;  if (window.event) {  keycode = window.event.keyCode;  } else if (e) {  keycode = e.which;  } else {  return true;  }  if (keycode == 13) {  myfield.form.submit();  return false;  } else {  return true;  } } //--></SCRIPT> <INPUT NAME=""MyText"" TYPE=""Text"" onKeyPress=""return submitenter(thisevent)"" /> What happens if javascript is disabled? You shouldn't use to comment out JS these tags are not Javascript language tokens @Marecky They're not to comment out JS. They are ignored when parsing the contents of",html form-submit html-form submit-button
11,A,"How do I calculate relative time? Given a specific DateTime value how do I display relative time like: 2 hours ago 3 days ago a month ago Et cetera? What if you want to calculate a relative time from now to Future? I wish you could drop this approach at StackOverflow. I often see several similar answers that were posted ""1 hour ago"" and I just want to upvote the first one (the rest are duplicates that should be removed). @Jørn if you hover your mouse over the ""1 hour ago"" the title-text will give you the exact time. I think this is a great combination of ease-of-use (you see quickly how old things are) and advanced features (you can see the exact date easily as well) @NickAldwin: Ahaaa. Nice (hidden) feature. I've never noticed that hint before even though I've been looking for these details. I'm probably not not the only one but that's another discussion. Thanks for the tip. @Jørn You're welcome. After noticing it here I went on to see the same thing on Facebook -- so I guess it's a pretty common way of doing things. Common yes. Keep in mind that if it is really useful information then users of touch screen devices (smartphones tablets) can't get at it because they can't hover a pointer. @Jørn E. Angeltveit: It's like that on lots of website e.g. facebook. @configurator @NickAldwin: I've seen this on a several sites now and has accepted that as an way to get additional information. But now we have a new problem. How can I hover on my iPad... ;-) Jørn E. Angeltveit: On androids long-press will give you a menu including an option for the caption; selecting with the trackpad will also give you hover effects. I don't generally use an iPad a lot though so no idea... @jeff- you can checkout my answer which will provide the relative time... moment.js is a very nice date parsing library.. You can consider using that (server side or client side) depending on your needs. just fyi because nobody mentioned it here jquery.timeago plugin Jeff because Stack Overflow uses jQuery extensively I recommend the jquery.timeago plugin. Benefits: Avoid timestamps dated ""1 minute ago"" even though the page was opened 10 minutes ago; timeago refreshes automatically. You can take full advantage of page and/or fragment caching in your web applications because the timestamps aren't calculated on the server. You get to use microformats like the cool kids. Just attach it to your timestamps on DOM ready: jQuery(document).ready(function() { jQuery('abbr.timeago').timeago(); }); This will turn all abbr elements with a class of timeago and an ISO 8601 timestamp in the title: <abbr class=""timeago"" title=""2008-07-17T09:24:17Z"">July 17 2008</abbr> into something like this: <abbr class=""timeago"" title=""July 17 2008"">4 months ago</abbr> which yields: 4 months ago. As time passes the timestamps will automatically update. Disclaimer: I wrote this plugin so I'm biased. And what if the user has JavaScript disabled? jQuery (and JavaScritp generally speaking) should only be used to improve client-side experience but your application features shouldn't depend on client technologies. You can accomplish this without using JavaScript. Seb If you have Javascript disabled then the string you originally put between the abbr tags is displayed. Typically this is just a date or time in any format you wish. Timeago degrades gracefully. It doesn't get much simpler. Shouldn't it be jQuery('abbr.timeago')? Will absolutely! I don't know what I was thinking. Fixed. Ryan I suggested that SO use timeago a while ago. Jeff's response made me cry i suggest you sit down: http://stackoverflow.uservoice.com/pages/1722-general/suggestions/96770-auto-update-the-fuzzy-timestamps-with-jquery-timeago- Heh Thanks Rob. That's okay. It's barely noticeable especially when only one number changes during the transition though SO pages have a lot of timestamps. I would have thought he would have at least appreciated the benefits of page caching though even if he chooses to avoid auto-updates. I'm sure Jeff could have provided feedback to improve the plugin too. I take solace knowing sites like http://arstechnica.com/ use it. @Rob Fonseca-Ensor - now it's making me cry too. How is an update once per minute to show accurate information *in any way* related to text blinking once a second? An option to disable the auto-updating shouldn't be that hard would it? If it doesn't already exist that is... Just update the timestamps once on pageload and be done with it. This plugin is friggin' brilliant. @RyanMcGeary: This is probably the wrong place to ask but I have a query about using TimeAgo. I'm in the UK (GMT which includes DST) and the dates stored in my database are UTC. If I insert a date into my DB as UTC in the summertime obviously the time will be out by 1 hour. So instead of TimeAgo printing ""about 1 minute ago"" it will say ""about 1 hour ago"". Does the TimeAgo plugin deal with the DST differences? @PaparazzoKid Yes Timeago handles time zones just fine as long as your timestamp is a proper ISO8601 timestamp. But you're right. This is the wrong place to ask this question. Go here instead: https://github.com/rmm5t/jquery-timeago/issues Can I edit it for my language? a great plugin -- just for fun i ""slimmed it down"" by reducing functionality like autoupdating and combined it with the [refactormycode answer](http://stackoverflow.com/a/79601/1037948) - http://jsfiddle.net/drzaus/eMUzF/  A couple of years late to the party but I had a requirement to do this for both past and future dates so I combined Jeff's and Vincent's into this. It's a ternarytastic extravaganza! :) public static class DateTimeHelper { private const int SECOND = 1; private const int MINUTE = 60 * SECOND; private const int HOUR = 60 * MINUTE; private const int DAY = 24 * HOUR; private const int MONTH = 30 * DAY; /// <summary> /// Returns a friendly version of the provided DateTime relative to now. E.g.: ""2 days ago"" or ""in 6 months"". /// </summary> /// <param name=""dateTime"">The DateTime to compare to Now</param> /// <returns>A friendly string</returns> public static string GetFriendlyRelativeTime(DateTime dateTime) { if (DateTime.UtcNow.Ticks == dateTime.Ticks) { return ""Right now!""; } bool isFuture = (DateTime.UtcNow.Ticks < dateTime.Ticks); var ts = DateTime.UtcNow.Ticks < dateTime.Ticks ? new TimeSpan(dateTime.Ticks - DateTime.UtcNow.Ticks) : new TimeSpan(DateTime.UtcNow.Ticks - dateTime.Ticks); double delta = ts.TotalSeconds; if (delta < 1 * MINUTE) { return isFuture ? ""in "" + (ts.Seconds == 1 ? ""one second"" : ts.Seconds + "" seconds"") : ts.Seconds == 1 ? ""one second ago"" : ts.Seconds + "" seconds ago""; } if (delta < 2 * MINUTE) { return isFuture ? ""in a minute"" : ""a minute ago""; } if (delta < 45 * MINUTE) { return isFuture ? ""in "" + ts.Minutes + "" minutes"" : ts.Minutes + "" minutes ago""; } if (delta < 90 * MINUTE) { return isFuture ? ""in an hour"" : ""an hour ago""; } if (delta < 24 * HOUR) { return isFuture ? ""in "" + ts.Hours + "" hours"" : ts.Hours + "" hours ago""; } if (delta < 48 * HOUR) { return isFuture ? ""tomorrow"" : ""yesterday""; } if (delta < 30 * DAY) { return isFuture ? ""in "" + ts.Days + "" days"" : ts.Days + "" days ago""; } if (delta < 12 * MONTH) { int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30)); return isFuture ? ""in "" + (months <= 1 ? ""one month"" : months + "" months"") : months <= 1 ? ""one month ago"" : months + "" months ago""; } else { int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365)); return isFuture ? ""in "" + (years <= 1 ? ""one year"" : years + "" years"") : years <= 1 ? ""one year ago"" : years + "" years ago""; } } } Nested ternaries considered harmful sounds like a future blog post! =D And I'll grant most are unfriendly my fav is the one at http://stackoverflow.com/questions/11/calculating-relative-time/79601#79601 Here's a book suggestion in all friendliness! http://shop.oreilly.com/product/9780596802301.do Haha! Cheers Pål! I'm not sure this version is any less readable than the others on this thread but maybe that's just because I wrote it ;)  There are also a package called Humanizer on Nuget and it actually works really well DateTime.UtcNow.AddHours(-30).Humanize() => ""yesterday"" DateTime.UtcNow.AddHours(-2).Humanize() => ""2 hours ago"" DateTime.UtcNow.AddHours(30).Humanize() => ""tomorrow"" DateTime.UtcNow.AddHours(2).Humanize() => ""2 hours from now"" TimeSpan.FromMilliseconds(1299630020).Humanize() => ""2 weeks"" TimeSpan.FromMilliseconds(1299630020).Humanize(3) => ""2 weeks 1 day 1 hour"" Scott Hanselman has a writeup on it on his blog Best solution so far. This also calculates relative time to the future.  iPhone obj-c Version + (NSString *)timeAgoString:(NSDate *)date { int delta = -(int)[date timeIntervalSinceNow]; if (delta < 60) { return delta == 1 ? @""one second ago"" : [NSString stringWithFormat:@""%i seconds ago"" delta]; } if (delta < 120) { return @""a minute ago""; } if (delta < 2700) { return [NSString stringWithFormat:@""%i minutes ago"" delta/60]; } if (delta < 5400) { return @""an hour ago""; } if (delta < 24 * 3600) { return [NSString stringWithFormat:@""%i hours ago"" delta/3600]; } if (delta < 48 * 3600) { return @""yesterday""; } if (delta < 30 * 24 * 3600) { return [NSString stringWithFormat:@""%i days ago"" delta/(24*3600)]; } if (delta < 12 * 30 * 24 * 3600) { int months = delta/(30*24*3600); return months <= 1 ? @""one month ago"" : [NSString stringWithFormat:@""%i months ago"" months]; } else { int years = delta/(12*30*24*3600); return years <= 1 ? @""one year ago"" : [NSString stringWithFormat:@""%i years ago"" years]; } }  Here a rewrite from Jeffs Script for PHP: define(""SECOND"" 1); define(""MINUTE"" 60 * SECOND); define(""HOUR"" 60 * MINUTE); define(""DAY"" 24 * HOUR); define(""MONTH"" 30 * DAY); function relativeTime($time) { $delta = time() - $time; if ($delta < 1 * MINUTE) { return $delta == 1 ? ""one second ago"" : $delta . "" seconds ago""; } if ($delta < 2 * MINUTE) { return ""a minute ago""; } if ($delta < 45 * MINUTE) { return floor($delta / MINUTE) . "" minutes ago""; } if ($delta < 90 * MINUTE) { return ""an hour ago""; } if ($delta < 24 * HOUR) { return floor($delta / HOUR) . "" hours ago""; } if ($delta < 48 * HOUR) { return ""yesterday""; } if ($delta < 30 * DAY) { return floor($delta / DAY) . "" days ago""; } if ($delta < 12 * MONTH) { $months = floor($delta / DAY / 30); return $months <= 1 ? ""one month ago"" : $months . "" months ago""; } else { $years = floor($delta / DAY / 365); return $years <= 1 ? ""one year ago"" : $years . "" years ago""; } } This works a treat... Thanks :) +1 :) Perfect I was trying to do it by myself It works like a charm. +1  Given the world and her husband appear to be posting code samples here is what I wrote a while ago based on a couple of these answers. I had a specific need for this code to be localisable. So I have two classes — Grammar which specifies the localisable terms and FuzzyDateExtensions which holds a bunch of extension methods. I had no need to deal with future datetimes so no attempt is made to handle them with this code. I've left some of the XMLdoc in the source but removed most (where they'd be obvious) for brevity's sake. I've also not included every class member here: public class Grammar { /// <summary> Gets or sets the term for ""just now"". </summary> public string JustNow { get; set; } /// <summary> Gets or sets the term for ""X minutes ago"". </summary> /// <remarks> /// This is a <see cref=""String.Format""/> pattern where <c>{0}</c> /// is the number of minutes. /// </remarks> public string MinutesAgo { get; set; } public string OneHourAgo { get; set; } public string HoursAgo { get; set; } public string Yesterday { get; set; } public string DaysAgo { get; set; } public string LastMonth { get; set; } public string MonthsAgo { get; set; } public string LastYear { get; set; } public string YearsAgo { get; set; } /// <summary> Gets or sets the term for ""ages ago"". </summary> public string AgesAgo { get; set; } /// <summary> /// Gets or sets the threshold beyond which the fuzzy date should be /// considered ""ages ago"". /// </summary> public TimeSpan AgesAgoThreshold { get; set; } /// <summary> /// Initialises a new <see cref=""Grammar""/> instance with the /// specified properties. /// </summary> private void Initialise(string justNow string minutesAgo string oneHourAgo string hoursAgo string yesterday string daysAgo string lastMonth string monthsAgo string lastYear string yearsAgo string agesAgo TimeSpan agesAgoThreshold) { ... } } The FuzzyDateString class contains: public static class FuzzyDateExtensions { public static string ToFuzzyDateString(this TimeSpan timespan) { return timespan.ToFuzzyDateString(new Grammar()); } public static string ToFuzzyDateString(this TimeSpan timespan Grammar grammar) { return GetFuzzyDateString(timespan grammar); } public static string ToFuzzyDateString(this DateTime datetime) { return (DateTime.Now - datetime).ToFuzzyDateString(); } public static string ToFuzzyDateString(this DateTime datetime Grammar grammar) { return (DateTime.Now - datetime).ToFuzzyDateString(grammar); } private static string GetFuzzyDateString(TimeSpan timespan Grammar grammar) { timespan = timespan.Duration(); if (timespan >= grammar.AgesAgoThreshold) { return grammar.AgesAgo; } if (timespan < new TimeSpan(0 2 0)) // 2 minutes { return grammar.JustNow; } if (timespan < new TimeSpan(1 0 0)) // 1 hour { return String.Format(grammar.MinutesAgo timespan.Minutes); } if (timespan < new TimeSpan(1 55 0)) // 1 hour 55 minutes { return grammar.OneHourAgo; } if (timespan < new TimeSpan(12 0 0) // 12 hours && (DateTime.Now - timespan).IsToday()) { return String.Format(grammar.HoursAgo timespan.RoundedHours()); } if ((DateTime.Now.AddDays(1) - timespan).IsToday()) { return grammar.Yesterday; } if (timespan < new TimeSpan(32 0 0 0) // 32 days && (DateTime.Now - timespan).IsThisMonth()) { return String.Format(grammar.DaysAgo timespan.RoundedDays()); } if ((DateTime.Now.AddMonths(1) - timespan).IsThisMonth()) { return grammar.LastMonth; } if (timespan < new TimeSpan(365 0 0 0 0) // 365 days && (DateTime.Now - timespan).IsThisYear()) { return String.Format(grammar.MonthsAgo timespan.RoundedMonths()); } if ((DateTime.Now - timespan).AddYears(1).IsThisYear()) { return grammar.LastYear; } return String.Format(grammar.YearsAgo timespan.RoundedYears()); } } One of the key things I wanted to achieve as well as localisation was that ""today"" would only mean ""this calendar day"" so the IsToday IsThisMonth IsThisYear methods look like this:  public static bool IsToday(this DateTime date) { return date.DayOfYear == DateTime.Now.DayOfYear && date.IsThisYear(); } and the rounding methods are like this (I've included RoundedMonths as that's a bit different):  public static int RoundedDays(this TimeSpan timespan) { return (timespan.Hours > 12) ? timespan.Days + 1 : timespan.Days; } public static int RoundedMonths(this TimeSpan timespan) { DateTime then = DateTime.Now - timespan; // Number of partial months elapsed since 1 Jan AD 1 (DateTime.MinValue) int nowMonthYears = DateTime.Now.Year * 12 + DateTime.Now.Month; int thenMonthYears = then.Year * 12 + then.Month; return nowMonthYears - thenMonthYears; } I hope people find this useful and/or interesting :o)  I would recommend computing this on the client side too. Less work for the server. The following is the version that I use (from Zach Leatherman) /* * Javascript Humane Dates * Copyright (c) 2008 Dean Landolt (deanlandolt.com) * Re-write by Zach Leatherman (zachleat.com) * * Adopted from the John Resig's pretty.js * at http://ejohn.org/blog/javascript-pretty-date * and henrah's proposed modification * at http://ejohn.org/blog/javascript-pretty-date/#comment-297458 * * Licensed under the MIT license. */ function humane_date(date_str){ var time_formats = [ [60 'just now'] [90 '1 minute'] // 60*1.5 [3600 'minutes' 60] // 60*60 60 [5400 '1 hour'] // 60*60*1.5 [86400 'hours' 3600] // 60*60*24 60*60 [129600 '1 day'] // 60*60*24*1.5 [604800 'days' 86400] // 60*60*24*7 60*60*24 [907200 '1 week'] // 60*60*24*7*1.5 [2628000 'weeks' 604800] // 60*60*24*(365/12) 60*60*24*7 [3942000 '1 month'] // 60*60*24*(365/12)*1.5 [31536000 'months' 2628000] // 60*60*24*365 60*60*24*(365/12) [47304000 '1 year'] // 60*60*24*365*1.5 [3153600000 'years' 31536000] // 60*60*24*365*100 60*60*24*365 [4730400000 '1 century'] // 60*60*24*365*100*1.5 ]; var time = ('' + date_str).replace(/-/g""/"").replace(/[TZ]/g"" "") dt = new Date seconds = ((dt - new Date(time) + (dt.getTimezoneOffset() * 60000)) / 1000) token = ' ago' i = 0 format; if (seconds < 0) { seconds = Math.abs(seconds); token = ''; } while (format = time_formats[i++]) { if (seconds < format[0]) { if (format.length == 2) { return format[1] + (i > 1 ? token : ''); // Conditional so we don't return Just Now Ago } else { return Math.round(seconds / format[2]) + ' ' + format[1] + (i > 1 ? token : ''); } } } // overflow for centuries if(seconds > 4730400000) return Math.round(seconds / 4730400000) + ' centuries' + token; return date_str; }; if(typeof jQuery != 'undefined') { jQuery.fn.humane_dates = function(){ return this.each(function(){ var date = humane_date(this.title); if(date && jQuery(this).text() != date) // don't modify the dom if we don't have to jQuery(this).text(date); }); }; } Love the function name `humane`! :) I can't wait to see something from 1 century ago ;)  using System; using System.Collections.Generic; using System.Linq; public static class RelativeDateHelper { private static Dictionary<double Func<double string>> sm_Dict = null; private static Dictionary<double Func<double string>> DictionarySetup() { var dict = new Dictionary<double Func<double string>>(); dict.Add(0.75 (mins) => ""less than a minute""); dict.Add(1.5 (mins) => ""about a minute""); dict.Add(45 (mins) => string.Format(""{0} minutes"" Math.Round(mins))); dict.Add(90 (mins) => ""about an hour""); dict.Add(1440 (mins) => string.Format(""about {0} hours"" Math.Round(Math.Abs(mins / 60)))); // 60 * 24 dict.Add(2880 (mins) => ""a day""); // 60 * 48 dict.Add(43200 (mins) => string.Format(""{0} days"" Math.Floor(Math.Abs(mins / 1440)))); // 60 * 24 * 30 dict.Add(86400 (mins) => ""about a month""); // 60 * 24 * 60 dict.Add(525600 (mins) => string.Format(""{0} months"" Math.Floor(Math.Abs(mins / 43200)))); // 60 * 24 * 365 dict.Add(1051200 (mins) => ""about a year""); // 60 * 24 * 365 * 2 dict.Add(double.MaxValue (mins) => string.Format(""{0} years"" Math.Floor(Math.Abs(mins / 525600)))); return dict; } public static string ToRelativeDate(this DateTime input) { TimeSpan oSpan = DateTime.Now.Subtract(input); double TotalMinutes = oSpan.TotalMinutes; string Suffix = "" ago""; if (TotalMinutes < 0.0) { TotalMinutes = Math.Abs(TotalMinutes); Suffix = "" from now""; } if (null == sm_Dict) sm_Dict = DictionarySetup(); return sm_Dict.First(n => TotalMinutes < n.Key).Value.Invoke(TotalMinutes) + Suffix; } } The same as another answer to this question but as an extension method with a static dictionary. What does the dictionary buy you here? StriplingWarrior: Ease of reading and modifying compared to a switch statement or a stack of if/else statements. The dictionary being static means that it and the Func<> objects don't have to be created every time we want to use ToRelativeDate; it's created only once compared to the one I linked in my answer. I see. I was just thinking since the documentation on `Dictionary` states that ""The order in which the items are returned is undefined"" (http://msdn.microsoft.com/en-us/library/xfhwa508.aspx) perhaps that's not the best data structure to use when you don't care about lookup times as much as having things stay in order. StriplingWarrior: I believe LINQ takes that into account when used with `Dictionary`s. If you're still uncomfortable with it you can use [`SortedDictionary`](http://msdn.microsoft.com/en-us/library/f7fta44c.aspx) but my own experience shows that to be unnecessary.  using Fluent DateTime https://github.com/FluentDateTime  var dateTime1 = 2.Hours().Ago(); var dateTime2 = 3.Days().Ago(); var dateTime3 = 1.Months().Ago(); var dateTime4 = 5.Hours().FromNow(); var dateTime5 = 2.Weeks().FromNow(); var dateTime6 = 40.Seconds().FromNow();  @Jeff var ts = new TimeSpan(DateTime.UtcNow.Ticks - dt.Ticks); Doing a subtraction on DateTime returns a TimeSpan anyway. So you can just do (DateTime.UtcNow - dt).TotalSeconds I'm also surprised to see the constants multiplied-out by hand and then comments added with the multiplications in. Was that some misguided optimisation?  Here's the algorithm stackoverflow uses but rewritten more concisely in perlish pseudocode with a bug fix (no ""one hours ago""). The function takes a (positive) number of seconds ago and returns a human-friendly string like ""3 hours ago"" or ""yesterday"". agoify($delta) local($y $mo $d $h $m $s); $s = floor($delta); if($s<=1) return ""a second ago""; if($s<60) return ""$s seconds ago""; $m = floor($s/60); if($m==1) return ""a minute ago""; if($m<45) return ""$m minutes ago""; $h = floor($m/60); if($h==1) return ""an hour ago""; if($h<24) return ""$h hours ago""; $d = floor($h/24); if($d<2) return ""yesterday""; if($d<30) return ""$d days ago""; $mo = floor($d/30); if($mo<=1) return ""a month ago""; $y = floor($mo/12); if($y<1) return ""$mo months ago""; if($y==1) return ""a year ago""; return ""$y years ago"";  var ts = new TimeSpan(DateTime.Now.Ticks - dt.Ticks);  @jeff IMHO yours seems a little long. However it does seem a little more robust with support for ""yesterday"" and ""years"". But in my experience when this is used the person is most likely to view the content in the first 30 days. It is only the really hardcore people that come after that. So that is why I usually elect to keep this short and simple. This is the method I am currently using on one of my websites. This only returns a relative day hour time. And then the user has to slap on ""ago"" in the output. public static string ToLongString(this TimeSpan time) {  string output = String.Empty;  if (time.Days > 0)  output += time.Days + "" days "";  if ((time.Days == 0 || time.Days == 1) && time.Hours > 0)  output += time.Hours + "" hr "";  if (time.Days == 0 && time.Minutes > 0)  output += time.Minutes + "" min "";  if (output.Length == 0)  output += time.Seconds + "" sec"";  return output.Trim(); } Currently looking at this page - asked 2 years ago :)  In PHP I do it this way: <?php function timesince($original) { // array of time period chunks $chunks = array( array(60 * 60 * 24 * 365  'year') array(60 * 60 * 24 * 30  'month') array(60 * 60 * 24 * 7 'week') array(60 * 60 * 24  'day') array(60 * 60  'hour') array(60  'minute') ); $today = time(); /* Current unix time */ $since = $today - $original; if($since > 604800) { $print = date(""M jS"" $original); if($since > 31536000) { $print .= "" "" . date(""Y"" $original); } return $print; } // $j saves performing the count function each time around the loop for ($i = 0 $j = count($chunks); $i < $j; $i++) { $seconds = $chunks[$i][0]; $name = $chunks[$i][1]; // finding the biggest chunk (if the chunk fits break) if (($count = floor($since / $seconds)) != 0) { break; } } $print = ($count == 1) ? '1 '.$name : ""$count {$name}s""; return $print . "" ago""; } ?>  Java for client-side gwt usage: import java.util.Date; public class RelativeDateFormat { private static final long ONE_MINUTE = 60000L; private static final long ONE_HOUR = 3600000L; private static final long ONE_DAY = 86400000L; private static final long ONE_WEEK = 604800000L; public static String format(Date date) { long delta = new Date().getTime() - date.getTime(); if (delta < 1L * ONE_MINUTE) { return toSeconds(delta) == 1 ? ""one second ago"" : toSeconds(delta) + "" seconds ago""; } if (delta < 2L * ONE_MINUTE) { return ""one minute ago""; } if (delta < 45L * ONE_MINUTE) { return toMinutes(delta) + "" minutes ago""; } if (delta < 90L * ONE_MINUTE) { return ""one hour ago""; } if (delta < 24L * ONE_HOUR) { return toHours(delta) + "" hours ago""; } if (delta < 48L * ONE_HOUR) { return ""yesterday""; } if (delta < 30L * ONE_DAY) { return toDays(delta) + "" days ago""; } if (delta < 12L * 4L * ONE_WEEK) { long months = toMonths(delta); return months <= 1 ? ""one month ago"" : months + "" months ago""; } else { long years = toYears(delta); return years <= 1 ? ""one year ago"" : years + "" years ago""; } } private static long toSeconds(long date) { return date / 1000L; } private static long toMinutes(long date) { return toSeconds(date) / 60L; } private static long toHours(long date) { return toMinutes(date) / 60L; } private static long toDays(long date) { return toHours(date) / 24L; } private static long toMonths(long date) { return toDays(date) / 30L; } private static long toYears(long date) { return toMonths(date) / 365L; } }  you can try this.I think it will work correctly. long delta = new Date().getTime() - date.getTime(); const int SECOND = 1; const int MINUTE = 60 * SECOND; const int HOUR = 60 * MINUTE; const int DAY = 24 * HOUR; const int MONTH = 30 * DAY; if (delta < 0L) { return ""not yet""; } if (delta < 1L * MINUTE) { return ts.Seconds == 1 ? ""one second ago"" : ts.Seconds + "" seconds ago""; } if (delta < 2L * MINUTE) { return ""a minute ago""; } if (delta < 45L * MINUTE) { return ts.Minutes + "" minutes ago""; } if (delta < 90L * MINUTE) { return ""an hour ago""; } if (delta < 24L * HOUR) { return ts.Hours + "" hours ago""; } if (delta < 48L * HOUR) { return ""yesterday""; } if (delta < 30L * DAY) { return ts.Days + "" days ago""; } if (delta < 12L * MONTH) { int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30)); return months <= 1 ? ""one month ago"" : months + "" months ago""; } else { int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365)); return years <= 1 ? ""one year ago"" : years + "" years ago""; }  /** * {@code date1} has to be earlier than {@code date2}. */ public static String relativize(Date date1 Date date2) { assert date2.getTime() >= date1.getTime(); long duration = date2.getTime() - date1.getTime(); long converted; if ((converted = TimeUnit.MILLISECONDS.toDays(duration)) > 0) { return String.format(""%d %s ago"" converted converted == 1 ? ""day"" : ""days""); } else if ((converted = TimeUnit.MILLISECONDS.toHours(duration)) > 0) { return String.format(""%d %s ago"" converted converted == 1 ? ""hour"" : ""hours""); } else if ((converted = TimeUnit.MILLISECONDS.toMinutes(duration)) > 0) { return String.format(""%d %s ago"" converted converted == 1 ? ""minute"" : ""minutes""); } else if ((converted = TimeUnit.MILLISECONDS.toSeconds(duration)) > 0) { return String.format(""%d %s ago"" converted converted == 1 ? ""second"" : ""seconds""); } else { return ""just now""; } }  You can reduce the server-side load by performing this logic client-side. View source on some Digg pages for reference. They have the server emit an epoch time value that gets processed by Javascript. This way you don't need to manage the end user's time zone. The new server-side code would be something like:  public string GetRelativeTime(DateTime timeStamp) { return string.Format(""<script>printdate({0});</script>"" timeStamp.ToFileTimeUtc()); } You could even add a NOSCRIPT block there and just perform a ToString().  Well here's how we do it on Stack Overflow. var ts = new TimeSpan(DateTime.UtcNow.Ticks - dt.Ticks); double delta = Math.Abs(ts.TotalSeconds); if (delta < 60) { return ts.Seconds == 1 ? ""one second ago"" : ts.Seconds + "" seconds ago""; } if (delta < 120) { return ""a minute ago""; } if (delta < 2700) // 45 * 60 { return ts.Minutes + "" minutes ago""; } if (delta < 5400) // 90 * 60 { return ""an hour ago""; } if (delta < 86400) // 24 * 60 * 60 { return ts.Hours + "" hours ago""; } if (delta < 172800) // 48 * 60 * 60 { return ""yesterday""; } if (delta < 2592000) // 30 * 24 * 60 * 60 { return ts.Days + "" days ago""; } if (delta < 31104000) // 12 * 30 * 24 * 60 * 60 { int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30)); return months <= 1 ? ""one month ago"" : months + "" months ago""; } int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365)); return years <= 1 ? ""one year ago"" : years + "" years ago""; Suggestions? Comments? Ways to improve this algorithm? ""one"" second ago ""one"" month ago ""one"" year ago. But ""an"" hour ago ""a"" minute ago. Did you pick up that way of talking in Des Moines? ""< 48*60*60s"" is a rather unconventional definition for ""yesterday"". If it's 9am on Wednesday would you really think of 9:01am on Monday as ""yesterday"". I'd have thought an algorithm for yesterday or ""n days ago"" should consider before/after midnight. Compilers are usually pretty good at pre-calculating constant expressions like 24 * 60 * 60 so you can directly use those instead of calculating it yourself to be 86400 and putting the original expression in comments noticed that this function excludes weeks @jray So go implement them. :) @bzlm I think I did for a project I was working on. My motivation here was to alert others that weeks were omitted from this code sample. As to how to do that it seemed pretty straight forward to me. I also think this is quite a strange definition of ""yesterday"" if I now (sunday evening) see an answer on friday evening as ""yesterday"". I think that good way to improve algorithm is displaying 2 units like ""2 month 21 days ago"" ""1 hour 40 minutes ago"" for increasing accuracy. Since all those If..else are just timeslabs you can create an enum for better readability. Say `enum TimeSlabs { Seconds = 60 Minutes = 60 * 60 Hours = 60*60*24 Days = 60* 60*24*365 }` @ Jeffy you missed the calculation for leap year and related checks 45 minutes being displayed as ""an hour ago""?! Isn't it a bug? If it isn't why not do the same for seconds&minute? But currently SO only show the ""Time ago"" format until 2 days. More than 2 days and you put the standard date time format. Am I right ? @AntonyThomas: How did you format it like that? @AmalMurali I don't remember but try the Markdown formatting(cntrl+k I guess). `foo code indented code bar code with one space at beginning four-spaced code with foo bar` @AntonyThomas: Wow I swear I've tried this before but it works now. Thanks!  This I got from one of Bill Gates' blog (no lie). I need to find it on my browser history and I'll give you the link. The Javascript code to do the same thing (as requested): function posted(t) { var now = new Date(); var diff = parseInt((now.getTime() - Date.parse(t)) / 1000); if (diff < 60) { return 'less than a minute ago'; } else if (diff < 120) { return 'about a minute ago'; } else if (diff < (2700)) { return (parseInt(diff / 60)).toString() + ' minutes ago'; } else if (diff < (5400)) { return 'about an hour ago'; } else if (diff < (86400)) { return 'about ' + (parseInt(diff / 3600)).toString() + ' hours ago'; } else if (diff < (172800)) { return '1 day ago'; } else {return (parseInt(diff / 86400)).toString() + ' days ago'; } } Basically you work in terms of seconds...  I think there is already a number of answers related to this post but one can use this which is easy to use just like plugin and also easily readable for programmers. Send your specific date and get its value in string form: public string RelativeDateTimeCount(DateTime inputDateTime) { string outputDateTime = string.Empty; TimeSpan ts = DateTime.Now - inputDateTime; if (ts.Days > 7) { outputDateTime = inputDateTime.ToString(""MMMM d yyyy""); } else if (ts.Days > 0) { outputDateTime = ts.Days == 1 ? (""about 1 Day ago"") : (""about "" + ts.Days.ToString() + "" Days ago""); } else if (ts.Hours > 0) { outputDateTime = ts.Hours == 1 ? (""an hour ago"") : (ts.Hours.ToString() + "" hours ago""); } else if (ts.Minutes > 0) { outputDateTime = ts.Minutes == 1 ? (""1 minute ago"") : (ts.Minutes.ToString() + "" minutes ago""); } else outputDateTime = ""few seconds ago""; return outputDateTime; }  public string getRelativeDateTime(DateTime date) { TimeSpan ts = DateTime.Now - date; if (ts.TotalMinutes < 1)//seconds ago return ""just now""; if (ts.TotalHours < 1)//min ago return (int)ts.TotalMinutes == 1 ? ""1 Minute ago"" : (int)ts.TotalMinutes + "" Minutes ago""; if (ts.TotalDays < 1)//hours ago return (int)ts.TotalHours == 1 ? ""1 Hour ago"" : (int)ts.TotalHours + "" Hours ago""; if (ts.TotalDays < 7)//days ago return (int)ts.TotalDays == 1 ? ""1 Day ago"" : (int)ts.TotalDays + "" Days ago""; if (ts.TotalDays < 30.4368)//weeks ago return (int)(ts.TotalDays / 7) == 1 ? ""1 Week ago"" : (int)(ts.TotalDays / 7) + "" Weeks ago""; if (ts.TotalDays < 365.242)//months ago return (int)(ts.TotalDays / 30.4368) == 1 ? ""1 Month ago"" : (int)(ts.TotalDays / 30.4368) + "" Months ago""; //years ago return (int)(ts.TotalDays / 365.242) == 1 ? ""1 Year ago"" : (int)(ts.TotalDays / 365.242) + "" Years ago""; } Conversion values for days in a month and year were taken from Google.  Is there an easy way to do this in Java? The java.util.Date class seems rather limited. Here is my quick and dirty Java solution: import java.util.Date; import javax.management.timer.Timer; String getRelativeDate(Date date) { long delta = new Date().getTime() - date.getTime(); if (delta < 1L * Timer.ONE_MINUTE) { return toSeconds(delta) == 1 ? ""one second ago"" : toSeconds(delta) + "" seconds ago""; } if (delta < 2L * Timer.ONE_MINUTE) { return ""a minute ago""; } if (delta < 45L * Timer.ONE_MINUTE) { return toMinutes(delta) + "" minutes ago""; } if (delta < 90L * Timer.ONE_MINUTE) { return ""an hour ago""; } if (delta < 24L * Timer.ONE_HOUR) { return toHours(delta) + "" hours ago""; } if (delta < 48L * Timer.ONE_HOUR) { return ""yesterday""; } if (delta < 30L * Timer.ONE_DAY) { return toDays(delta) + "" days ago""; } if (delta < 12L * 4L * Timer.ONE_WEEK) { // a month long months = toMonths(delta); return months <= 1 ? ""one month ago"" : months + "" months ago""; } else { long years = toYears(delta); return years <= 1 ? ""one year ago"" : years + "" years ago""; } } private long toSeconds(long date) { return date / 1000L; } private long toMinutes(long date) { return toSeconds(date) / 60L; } private long toHours(long date) { return toMinutes(date) / 60L; } private long toDays(long date) { return toHours(date) / 24L; } private long toMonths(long date) { return toDays(date) / 30L; } private long toYears(long date) { return toMonths(date) / 365L; }  Surely an easy fix to get rid of the '1 hours ago' problem would be to increase the window that 'an hour ago' is valid for. Change if (delta < 5400) // 90 * 60 { return ""an hour ago""; } into if (delta < 7200) // 120 * 60 { return ""an hour ago""; } This means that something that occurred 110 minutes ago will read as 'an hour ago' - this may not be perfect but I'd say it is better than the current situation of '1 hours ago'.  public static string ToRelativeDate(DateTime input) { TimeSpan oSpan = DateTime.Now.Subtract(input); double TotalMinutes = oSpan.TotalMinutes; string Suffix = "" ago""; if (TotalMinutes < 0.0) { TotalMinutes = Math.Abs(TotalMinutes); Suffix = "" from now""; } var aValue = new SortedList<double Func<string>>(); aValue.Add(0.75 () => ""less than a minute""); aValue.Add(1.5 () => ""about a minute""); aValue.Add(45 () => string.Format(""{0} minutes"" Math.Round(TotalMinutes))); aValue.Add(90 () => ""about an hour""); aValue.Add(1440 () => string.Format(""about {0} hours"" Math.Round(Math.Abs(oSpan.TotalHours)))); // 60 * 24 aValue.Add(2880 () => ""a day""); // 60 * 48 aValue.Add(43200 () => string.Format(""{0} days"" Math.Floor(Math.Abs(oSpan.TotalDays)))); // 60 * 24 * 30 aValue.Add(86400 () => ""about a month""); // 60 * 24 * 60 aValue.Add(525600 () => string.Format(""{0} months"" Math.Floor(Math.Abs(oSpan.TotalDays / 30)))); // 60 * 24 * 365 aValue.Add(1051200 () => ""about a year""); // 60 * 24 * 365 * 2 aValue.Add(double.MaxValue () => string.Format(""{0} years"" Math.Floor(Math.Abs(oSpan.TotalDays / 365)))); return aValue.First(n => TotalMinutes < n.Key).Value.Invoke() + Suffix; } http://refactormycode.com/codes/493-twitter-esque-relative-dates i saw this on refactormycode too. elegant. this is very nice IMO :) This could also be refactored as an extension method? could the dictionary become static so it's only created once and referenced from then after? Pure.Krome: http://stackoverflow.com/questions/11/how-do-i-calculate-relative-time/1141237#1141237 You'd probably want to pull that dictionary out into a field so that you reduce instantiation and GC churn. You'd have to change `Func` to `Func`. Since the documentation on `Dictionary` states that ""The order in which the items are returned is undefined"" (http://msdn.microsoft.com/en-us/library/xfhwa508.aspx) perhaps that's not the best data structure to use when you don't care about lookup times as much as having things stay in order. in javascript - http://jsfiddle.net/drzaus/eMUzF/  Here's an implementation I added as an extension method to the DateTime class that handles both future and past dates and provides an approximation option that allows you to specify the level of detail you're looking for (""3 hour ago"" vs ""3 hours 23 minutes 12 seconds ago""): using System.Text; /// <summary> /// Compares a supplied date to the current date and generates a friendly English /// comparison (""5 days ago"" ""5 days from now"") /// </summary> /// <param name=""date"">The date to convert</param> /// <param name=""approximate"">When off calculate timespan down to the second. /// When on approximate to the largest round unit of time.</param> /// <returns></returns> public static string ToRelativeDateString(this DateTime value bool approximate) { StringBuilder sb = new StringBuilder(); string suffix = (value > DateTime.Now) ? "" from now"" : "" ago""; TimeSpan timeSpan = new TimeSpan(Math.Abs(DateTime.Now.Subtract(value).Ticks)); if (timeSpan.Days > 0) { sb.AppendFormat(""{0} {1}"" timeSpan.Days (timeSpan.Days > 1) ? ""days"" : ""day""); if (approximate) return sb.ToString() + suffix; } if (timeSpan.Hours > 0) { sb.AppendFormat(""{0}{1} {2}"" (sb.Length > 0) ? "" "" : string.Empty timeSpan.Hours (timeSpan.Hours > 1) ? ""hours"" : ""hour""); if (approximate) return sb.ToString() + suffix; } if (timeSpan.Minutes > 0) { sb.AppendFormat(""{0}{1} {2}"" (sb.Length > 0) ? "" "" : string.Empty timeSpan.Minutes (timeSpan.Minutes > 1) ? ""minutes"" : ""minute""); if (approximate) return sb.ToString() + suffix; } if (timeSpan.Seconds > 0) { sb.AppendFormat(""{0}{1} {2}"" (sb.Length > 0) ? "" "" : string.Empty timeSpan.Seconds (timeSpan.Seconds > 1) ? ""seconds"" : ""second""); if (approximate) return sb.ToString() + suffix; } if (sb.Length == 0) return ""right now""; sb.Append(suffix); return sb.ToString(); } +1 Much prefer using the `TimeSpan` properties rather than switching based on a huge number of ticks. Clarity is king.  I would provide some handy extensions methods for this and make the code more readable. First couple of extension methods for Int32. public static class TimeSpanExtensions { public static TimeSpan Days(this int value) { return new TimeSpan(value 0 0 0); } public static TimeSpan Hours(this int value) { return new TimeSpan(0 value 0 0); } public static TimeSpan Minutes(this int value) { return new TimeSpan(0 0 value 0); } public static TimeSpan Seconds(this int value) { return new TimeSpan(0 0 0 value); } public static TimeSpan Milliseconds(this int value) { return new TimeSpan(0 0 0 0 value); } public static DateTime Ago(this TimeSpan value) { return DateTime.Now - value; } } Then one for DateTime. public static class DateTimeExtensions { public static DateTime Ago(this DateTime dateTime TimeSpan delta) { return dateTime - delta; } } Now you can do something like below: var date = DateTime.Now; date.Ago(2.Days()); // 2 days ago date.Ago(7.Hours()); // 7 hours ago date.Ago(567.Milliseconds()); // 567 milliseconds ago   public static string RelativeDate(DateTime theDate) { Dictionary<long string> thresholds = new Dictionary<long string>(); int minute = 60; int hour = 60 * minute; int day = 24 * hour; thresholds.Add(60 ""{0} seconds ago""); thresholds.Add(minute * 2 ""a minute ago""); thresholds.Add(45 * minute ""{0} minutes ago""); thresholds.Add(120 * minute ""an hour ago""); thresholds.Add(day ""{0} hours ago""); thresholds.Add(day * 2 ""yesterday""); thresholds.Add(day * 30 ""{0} days ago""); thresholds.Add(day * 365 ""{0} months ago""); thresholds.Add(long.MaxValue ""{0} years ago""); long since = (DateTime.Now.Ticks - theDate.Ticks) / 10000000; foreach (long threshold in thresholds.Keys) { if (since < threshold) { TimeSpan t = new TimeSpan((DateTime.Now.Ticks - theDate.Ticks)); return string.Format(thresholds[threshold] (t.Days > 365 ? t.Days / 365 : (t.Days > 0 ? t.Days : (t.Hours > 0 ? t.Hours : (t.Minutes > 0 ? t.Minutes : (t.Seconds > 0 ? t.Seconds : 0))))).ToString()); } } return """"; } I prefer this version for its conciseness and ability to add in new tick points. This could be encapsulated with a Latest() extension to Timespan instead of that long 1 liner but for the sake of brevity in posting this will do. This fixes the an hour ago 1 hours ago by providing an hour until 2 hours have elapsed I am getting all sorts of problems using this function for instance if you mock 'theDate = DateTime.Now.AddMinutes(-40);' I am getting '40 hours ago' but with Michael's refactormycode response it returns correct at '40 minutes ago' ? i think you are missing a zero try: long since = (DateTime.Now.Ticks - theDate.Ticks) / 10000000; Hmm while this code may work it is incorrect and invalid to assume that the order of the keys in the Dictionary will be in a specific order. The Dictionary uses the Object.GetHashCode() which does not return a long but an int!. If you want these to be sorted then you should use a SortedList. What is wrong with the thresholds being evaluated in a set of if/else if/.../else ? You get the same number of comparisons. FYI the hash for long.MaxValue turns out to be the same as int.MinValue! OP forgot t.Days > 30 ? t.Days / 30 : Holy nested tertiary ifs batman just because you can doesn't mean you should :). My brain just exploded. While it is concise it reminds me of something I did in a programming contest once.  Jeff your code is nice but could be clearer with constants (as suggested in Code Complete). const int SECOND = 1; const int MINUTE = 60 * SECOND; const int HOUR = 60 * MINUTE; const int DAY = 24 * HOUR; const int MONTH = 30 * DAY; var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks); double delta = Math.Abs(ts.TotalSeconds); if (delta < 0) { return ""not yet""; } if (delta < 1 * MINUTE) { return ts.Seconds == 1 ? ""one second ago"" : ts.Seconds + "" seconds ago""; } if (delta < 2 * MINUTE) { return ""a minute ago""; } if (delta < 45 * MINUTE) { return ts.Minutes + "" minutes ago""; } if (delta < 90 * MINUTE) { return ""an hour ago""; } if (delta < 24 * HOUR) { return ts.Hours + "" hours ago""; } if (delta < 48 * HOUR) { return ""yesterday""; } if (delta < 30 * DAY) { return ts.Days + "" days ago""; } if (delta < 12 * MONTH) { int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30)); return months <= 1 ? ""one month ago"" : months + "" months ago""; } else { int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365)); return years <= 1 ? ""one year ago"" : years + "" years ago""; } in some languages you may even specify any type of comparing operator for the switch()-statement like > >= <= etc... isn't this somehow possible in C#? @Atmo: no it's not possible I hate such constants with a passion. Does this look wrong to anyone? `Thread.Sleep(1 * MINUTE)`? Because it's wrong by a factor of 1000. Beware of editing the times here since ts.Minutes ts.Hours etc... gives the component of the timespan not the total minutes or hours. For example if you wanted to describe everything less than 48 hours in terms of hours you'd need to change ts.Hours to Convert.ToInt32(ts.TotalHours) to get output of ""38 hours ago"". I wanted to do this since my application predicts a future time like ""38 hours left"". Tomorrow doesn't sound good here IMO. Does anyone have any guidance on how this might be implemented with a custom format string so that `string.Format(mydate ""dd/MM/yyyy (YTT)"") == ""26/04/2011 (today)""? `const int SECOND = 1;` So weird a second is one second. shouldn't be if (delta <= 90 * MINUTE) ? Somehow I got a ""1 hours ago"". When I see all capital I think back to the coding styles developed for C/C++. Microsoft's recommendation is Pascal cased. Check the answer to this question - http://stackoverflow.com/questions/242534/c-sharp-naming-convention-for-constants This type of code is nearly impossible to localize. If your app only needs to remain in English then fine. But if you make the jump to other languages you will hate yourself for doing logic like this. Just so y'all know... @nick If you place this in an IValueConverter it will handle the CultureInfo automatically for you (assuming you've set the culture first) I think if the constants were renamed to accurately describe the value that is in them it'd be easier to understand. So SecondsPerMinute = 60; MinutesPerHour = 60; SecondsPerHour = MinutesPerHour * SecondsPerHour; etc. Just calling it MINUTE=60 doesn't allow the reader to determine what the value is. Why nobody (except Joe) care about the wrong 'Yesterday' or 'days ago' value ??? Yesterday is not an hour calculation but a day to day calculation. So yes this is a wrong code at least in two frequent case.  When you know the viewer's time zone it might be clearer to use calendar days at the day scale. I'm not familiar with the .NET libraries so I don't know how you'd do that in C# unfortunately. On consumer sites you could also be hand-wavier under a minute. ""Less than a minute ago"" or ""just now"" could be good enough.  I thought I'd give this a shot using classes and polymorphism. I had a previous iteration which used sub-classing which ended up having way too much overhead. I've switched to a more flexible delegate / public property object model which is significantly better. My code is very slightly more accurate I wish I could come up with a better way to generate ""months ago"" that didn't seem too over-engineered. I think I'd still stick with Jeff's if-then cascade because it's less code and it's simpler (it's definitely easier to ensure it'll work as expected). For the below code PrintRelativeTime.GetRelativeTimeMessage(TimeSpan ago) returns the relative time message (e.g. ""yesterday""). public class RelativeTimeRange : IComparable {  public TimeSpan UpperBound { get; set; }  public delegate string RelativeTimeTextDelegate(TimeSpan timeDelta);  public RelativeTimeTextDelegate MessageCreator { get; set; }  public int CompareTo(object obj)  {  if (!(obj is RelativeTimeRange))  {  return 1;  }  // note that this sorts in reverse order to the way you'd expect  // this saves having to reverse a list later  return (obj as RelativeTimeRange).UpperBound.CompareTo(UpperBound);  } } public class PrintRelativeTime {  private static List<RelativeTimeRange> timeRanges;  static PrintRelativeTime()  {  timeRanges = new List<RelativeTimeRange>{  new RelativeTimeRange  {  UpperBound = TimeSpan.FromSeconds(1)  MessageCreator = (delta) =>  { return ""one second ago""; }  }  new RelativeTimeRange  {  UpperBound = TimeSpan.FromSeconds(60)  MessageCreator = (delta) =>  { return delta.Seconds + "" seconds ago""; }  }  new RelativeTimeRange  {  UpperBound = TimeSpan.FromMinutes(2)  MessageCreator = (delta) =>  { return ""one minute ago""; }  }  new RelativeTimeRange  {  UpperBound = TimeSpan.FromMinutes(60)  MessageCreator = (delta) =>  { return delta.Minutes + "" minutes ago""; }  }  new RelativeTimeRange  {  UpperBound = TimeSpan.FromHours(2)  MessageCreator = (delta) =>  { return ""one hour ago""; }  }  new RelativeTimeRange  {  UpperBound = TimeSpan.FromHours(24)  MessageCreator = (delta) =>  { return delta.Hours + "" hours ago""; }  }  new RelativeTimeRange  {  UpperBound = TimeSpan.FromDays(2)  MessageCreator = (delta) =>  { return ""yesterday""; }  }  new RelativeTimeRange  {  UpperBound = DateTime.Now.Subtract(DateTime.Now.AddMonths(-1))  MessageCreator = (delta) =>  { return delta.Days + "" days ago""; }  }  new RelativeTimeRange  {  UpperBound = DateTime.Now.Subtract(DateTime.Now.AddMonths(-2))  MessageCreator = (delta) =>  { return ""one month ago""; }  }  new RelativeTimeRange  {  UpperBound = DateTime.Now.Subtract(DateTime.Now.AddYears(-1))  MessageCreator = (delta) =>  { return (int)Math.Floor(delta.TotalDays / 30) + "" months ago""; }  }  new RelativeTimeRange  {  UpperBound = DateTime.Now.Subtract(DateTime.Now.AddYears(-2))  MessageCreator = (delta) =>  { return ""one year ago""; }  }  new RelativeTimeRange  {  UpperBound = TimeSpan.MaxValue  MessageCreator = (delta) =>  { return (int)Math.Floor(delta.TotalDays / 365.24D) + "" years ago""; }  }  };  timeRanges.Sort();  }  public static string GetRelativeTimeMessage(TimeSpan ago)  {  RelativeTimeRange postRelativeDateRange = timeRanges[0];  foreach (var timeRange in timeRanges)  {  if (ago.CompareTo(timeRange.UpperBound) <= 0)  {  postRelativeDateRange = timeRange;  }  }  return postRelativeDateRange.MessageCreator(ago);  } }",datediff
39,A,Reliable timer in a console application I am aware that in .NET there are three timer types (see Comparing the Timer Classes in the .NET Framework Class Library). I have chosen a threaded timer as the other types can drift if the main thread is busy and I need this to be reliable. The way this timer works in the control of the timer is put on another thread so it can always tick along with the work begin completed on the parent thread when it is not busy. The issue with this timer in a console application is that while the timer is ticking along on another thread the main thread is not doing anything so the application closes. I tried adding a while true loop but then the main thread is too busy when the timer does go off. Consider using a ManualResetEvent to block the main thread at the end of its processing and call Reset() on it once the timer's processing has finished. If this is something that needs to run constantly consider moving this into a service process instead of a console app.  You can use something like Console.ReadLine() to block the main thread so other background threads (like timer threads) will still work. You may also use an AutoResetEvent to block the execution then (when you need to) you can call Set() method on that AutoResetEvent object to release the main thread. Also ensure that your reference to Timer object doesn't go out of scope and garbage collected. yeah thanks fixed :) congradulations on being the [most relevant answer on Stack Overflow!](http://stackoverflow.com/search?tab=relevance&q=is%3aanswer) (as of Mar26 2012),c# .net vb.net timer
19,A,"What is the fastest way to get the value of π? Solutions are welcome in any language. :-) I'm looking for the fastest way to obtain the value of π as a personal challenge. More specifically I'm using ways that don't involve using #defined constants like M_PI or hard-coding the number in. The program below tests the various ways I know of. The inline assembly version is in theory the fastest option though clearly not portable; I've included it as a baseline to compare the other versions against. In my tests with built-ins the 4 * atan(1) version is fastest on GCC 4.2 because it auto-folds the atan(1) into a constant. With -fno-builtin specified the atan2(0 -1) version is fastest. Here's the main testing program (pitimes.c): #include <math.h> #include <stdio.h> #include <time.h> #define ITERS 10000000 #define TESTWITH(x) { \ diff = 0.0; \ time1 = clock(); \ for (i = 0; i < ITERS; ++i) \ diff += (x) - M_PI; \ time2 = clock(); \ printf(""%s\t=> %e time => %f\n"" #x diff diffclock(time2 time1)); \ } static inline double diffclock(clock_t time1 clock_t time0) { return (double) (time1 - time0) / CLOCKS_PER_SEC; } int main() { int i; clock_t time1 time2; double diff; /* Warmup. The atan2 case catches GCC's atan folding (which would * optimise the ``4 * atan(1) - M_PI'' to a no-op) if -fno-builtin * is not used. */ TESTWITH(4 * atan(1)) TESTWITH(4 * atan2(1 1)) #if defined(__GNUC__) && (defined(__i386__) || defined(__amd64__)) extern double fldpi(); TESTWITH(fldpi()) #endif /* Actual tests start here. */ TESTWITH(atan2(0 -1)) TESTWITH(acos(-1)) TESTWITH(2 * asin(1)) TESTWITH(4 * atan2(1 1)) TESTWITH(4 * atan(1)) return 0; } And the inline assembly stuff (fldpi.c) noting that it will only work for x86 and x64 systems: double fldpi() { double pi; asm(""fldpi"" : ""=t"" (pi)); return pi; } And a build script that builds all the configurations I'm testing (build.sh): #!/bin/sh gcc -O3 -Wall -c -m32 -o fldpi-32.o fldpi.c gcc -O3 -Wall -c -m64 -o fldpi-64.o fldpi.c gcc -O3 -Wall -ffast-math -m32 -o pitimes1-32 pitimes.c fldpi-32.o gcc -O3 -Wall -m32 -o pitimes2-32 pitimes.c fldpi-32.o -lm gcc -O3 -Wall -fno-builtin -m32 -o pitimes3-32 pitimes.c fldpi-32.o -lm gcc -O3 -Wall -ffast-math -m64 -o pitimes1-64 pitimes.c fldpi-64.o -lm gcc -O3 -Wall -m64 -o pitimes2-64 pitimes.c fldpi-64.o -lm gcc -O3 -Wall -fno-builtin -m64 -o pitimes3-64 pitimes.c fldpi-64.o -lm Apart from testing between various compiler flags (I've compared 32-bit against 64-bit too because the optimisations are different) I've also tried switching the order of the tests around. The atan2(0 -1) version still comes out top every time though. *boggle* If it's a personal challenge why are you asking us for the solution? =) I asked the question initially because I was one of the very first people in the private beta and Jeff was asking people to populate the site with questions. This was one I was dealing with at the time to solve this problem: http://stackoverflow.com/questions/1053 [continues] [continued] However aside from that specific purpose (which is kinda frivolous anyway) this question itself is frivolous and was not intended to be a serious question at all. In fact of the 4 questions I've so for posted only one is serious. :-P @erik: Not all languages have a built-in constant like `M_PI`. I was trying to find an ""authoritative"" way to get a (floating-point) value of pi that (in theory) works across a variety of languages (and/or their built-in libraries). My current preferred method is using `atan2(0 -1)` but perhaps there are better ways. There's gotta to be a way to do it in C++ metaprogramming. The run time will be really good but the compile time won't be. @David: http://stackoverflow.com/questions/19/fastest-way-to-get-value-of-pi/1947163#1947163 Why do you consider using atan(1) different from using M_PI? I'd understand why you want to do this if you only used arithmetic operations but with atan I don't see the point. codegolf much?? the question is: why would you _not_ want to use a constant? e.g. either defined by a library or by yourself? Computing Pi is a waste of CPU cycles as this problem has been solved over and over and over again to a number of significant digits much greater than needed for daily computations There is only one solution which is faster than pre-calculate constant PI: pre-calculate all the values appear in formulas e.g. when circumference needed you may pre-calculate 2*PI instead of multiplying every time the PI by 2 in runtime. @Doorhandle Well you're talking to [user #3](http://codegolf.stackexchange.com/users/3) on [Code Golf SE](http://codegolf.stackexchange.com/) and the poster of [Stack Overflow code golf](http://stackoverflow.com/q/62188/13) so. ;-) Code Golf much? Please close the thread by accepting an answer considering there are respectful amount of good answers. @Zeus Really?! You're going to accept-rate-police a 100k+ user who's been on the site since day 1 of the private beta? @ChrisJester-Young Nope. That's not the intention.. I recently started reading more into the rules.. and thought I would do my part on the threads that I visit to remind users that might have forgotten coz of the long time frame. I'm in no way trying to be a police here. Apologies if i came across rude. @Zeus In this specific case my question was actually intended to be a ""fun"" micro-optimisation question (which these days would probably be a better fit for [Programming Puzzles & Code Golf](http://codegolf.stackexchange.com/)) but the general premise of ""fastest way to calculate pi"" seemed to be useful enough to keep this question here. So at some stage I will probably reevaluate whether I should just accept the best algorithmic answer (probably nlucaroni's one) without regard to whether it's related to micro-optimisation. @HopelessN00b In the dialect of English I speak ""optimisation"" is [spelt](http://en.wiktionary.org/wiki/spelt#Verb) with an ""s"" not a ""z"" (which is pronounced as ""zed"" BTW not ""zee"" ;-)). (This is not the first time I've had to revert this sort of edit too if you look at the review history.) nlucaroni's answer has reached 100 upvotes (congrats) so it's probably a good point to green-tick it. Enjoy! (Though since it's community wiki and all it is generating no rep so not even sure if nlucaroni will even notice this.) In the interests of completeness a C++ template version which in an optimised build will compute PI at compile time and will inline to a single value. #include <iostream> template<int I> struct sign { enum {value = (I % 2) == 0 ? 1 : -1}; }; template<int I int J> struct pi_calc { inline static double value () { return (pi_calc<I-1 J>::value () + pi_calc<I-1 J+1>::value ()) / 2.0; } }; template<int J> struct pi_calc<0 J> { inline static double value () { return (sign<J>::value * 4.0) / (2.0 * J + 1.0) + pi_calc<0 J-1>::value (); } }; template<> struct pi_calc<0 0> { inline static double value () { return 4.0; } }; template<int I> struct pi { inline static double value () { return pi_calc<I I>::value (); } }; int main () { std::cout.precision (12); const double pi_value = pi<10>::value (); std::cout << ""pi ~ "" << pi_value << std::endl; return 0; } Note for I > 10 optimised builds can be slow as can non-optimised runs. I think for 12 iterations there are around 80k calls to value() (without memoization). Thank you very much. The question needed one of these. Well that's accurate to 9dp's. Are you objecting to something or just making an observation? I run this and get ""pi ~ 3.14159265383""  The Monte Carlo method as mentioned applies some great concepts but it is clearly not the fastest --not by a long shot not by any reasonable usefulness. Also it all depends on what kind of accuracy you are looking for. The fastest pi I know of is the digits hard coded. Looking at Pi and Pi[PDF] there are a lot of formulas. Here is a method that converges quickly (~14digits per iteration). The current fastest application PiFast uses this formula with the FFT. I'll just write the formula since the code is straight forward. This formula was almost found by Ramanujan and discovered by Chudnovsky. It is actually how he calculated several billion digits of the number --so it isn't a method to disregard. The formula will overflow quickly since we are dividing factorials it would be advantageous then to delay such calculating to remove terms. where Below is the Brent–Salamin algorithm. Wikipedia mentions that when a and b are 'close enough' then (a+b)^2/4t will be an approximation of pi. I'm not sure what 'close enough' means but from my tests one iteration got 2digits two got 7 and three had 15 of course this is with doubles so it might have error based on it's representation and the 'true' calculation could be more accurate. let pi_2 iters = let rec loop_ a b t p i = if i = 0 then abtp else let a_n = (a +. b) /. 2.0 and b_n = sqrt (a*.b) and p_n = 2.0 *. p in let t_n = t -. (p *. (a -. a_n) *. (a -. a_n)) in loop_ a_n b_n t_n p_n (i - 1) in let abtp = loop_ (1.0) (1.0 /. (sqrt 2.0)) (1.0/.4.0) (1.0) iters in (a +. b) *. (a +. b) /. (4.0 *. t) Lastly how about some pi golf (800 digits)? 160 characters! int a=10000bc=2800def[2801]g;main(){for(;b-c;)f[b++]=a/5;for(;d=0g=c*2;c-=14printf(""%.4d""e+d/a)e=d%a)for(b=c;d+=f[b]*af[b]=d%--gd/=g----b;d*=b);} Oh no! All those edits made your post community-moded. :-( I know! all I wanted was a nice complete answer. I just thought of things late and I can't spell right! Woot! Very nice. :-) Assuming you are trying to implement the first one yourself wouldn't sqr(k3) be a problem? I'm pretty sure it would end up an irrational number that you will have to estimate (IIRC all roots that are not whole numbers are irrational). Everything else looks pretty straight-forward if you are using infinite precision arithmetic but that square root is a deal breaker. The second one includes a sqrt as well. The image was Chudnovsky`s Formula; mentioned in the link just north of the image. I replaced those long variables to k1...6. in my experience 'close enough' usually means there's a taylor series approximation involved. @nlucaroni - I don't recall what image you originally linked above can you find it or something similar to replace it with and update your post? The stack overflow image upload interface would be a good longer term solution...  If you want to compute an approximation of the value of π (for some reason) you should try a binary extraction algorithm. Bellard's improvement of BBP gives does PI in O(N^2). If you want to obtain an approximation of the value of π to do calculations then: PI = 3.141592654 Granted that's only an approximation and not entirely accurate. It's off by a little more than 0.00000000004102. (four ten-trillionths about 4/10000000000). If you want to do math with π then get yourself a pencil and paper or a computer algebra package and use π's exact value π. If you really want a formula this one is fun: π = -i ln(-1) I was just being ""cute"" with Euler's formula :P Your formula depends on how you define ln in the complex plane. It has to be non-contiguous along one line in the complex plane and it's quite common for that line to be the negative real axis.  If by fastest you mean fastest to type in the code here's the golfscript solution: ;''6666-2%{2+.2/@*\/10.3??2*+}*`1000<~\;  Here's a general description of a technique for calculating pi that I learnt in high school. I only share this because I think it is simple enough that anyone can remember it indefinitely plus it teaches you the concept of ""Monte-Carlo"" methods -- which are statistical methods of arriving at answers that don't immediately appear to be deducible through random processes. Draw a square and inscribe a quadrant (one quarter of a semi-circle) inside that square (a quadrant with radius equal to the side of the square so it fills as much of the square as possible) Now throw a dart at the square and record where it lands -- that is choose a random point anywhere inside the square. Of course it landed inside the square but is it inside the semi-circle? Record this fact. Repeat this process many times -- and you will find there is a ratio of the number of points inside the semi-circle versus the total number thrown call this ratio x. Since the area of the square is r times r you can deduce that the area of the semi circle is x times r times r (that is x times r squared). Hence x times 4 will give you pi. This is not a quick method to use. But it's a nice example of a Monte Carlo method. And if you look around you may find that many problems otherwise outside your computational skills can be solved by such methods. This is the method we used to calculate Pi in a java project in school. Just used a randomizer to come up with the xy coordinates and the more 'darts' we threw the closer to Pi we came.  This version (in Delphi) is nothing special but it is at least faster than the version Nick Hodge posted on his blog :). On my machine it takes about 16 seconds to do a billion iterations giving a value of 3.1415926525879 (the accurate part is in bold). program calcpi; {$APPTYPE CONSOLE} uses SysUtils; var start finish: TDateTime; function CalculatePi(iterations: integer): double; var numerator denominator i: integer; sum: double; begin { PI may be approximated with this formula: 4 * (1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 .......) //} numerator := 1; denominator := 1; sum := 0; for i := 1 to iterations do begin sum := sum + (numerator/denominator); denominator := denominator + 2; numerator := -numerator; end; Result := 4 * sum; end; begin try start := Now; WriteLn(FloatToStr(CalculatePi(StrToInt(ParamStr(1))))); finish := Now; WriteLn('Seconds:' + FormatDateTime('hh:mm:ss.zz'finish-start)); except on E:Exception do Writeln(E.Classname ': ' E.Message); end; end.  Pi is exactly 3! [Prof. Frink (Simpsons)] Joke but here's one in C# (.NET-Framework required). using System; using System.Text; class Program { static void Main(string[] args) { int Digits = 100; BigNumber x = new BigNumber(Digits); BigNumber y = new BigNumber(Digits); x.ArcTan(16 5); y.ArcTan(4 239); x.Subtract(y); string pi = x.ToString(); Console.WriteLine(pi); } } public class BigNumber { private UInt32[] number; private int size; private int maxDigits; public BigNumber(int maxDigits) { this.maxDigits = maxDigits; this.size = (int)Math.Ceiling((float)maxDigits * 0.104) + 2; number = new UInt32[size]; } public BigNumber(int maxDigits UInt32 intPart) : this(maxDigits) { number[0] = intPart; for (int i = 1; i < size; i++) { number[i] = 0; } } private void VerifySameSize(BigNumber value) { if (Object.ReferenceEquals(this value)) throw new Exception(""BigNumbers cannot operate on themselves""); if (value.size != this.size) throw new Exception(""BigNumbers must have the same size""); } public void Add(BigNumber value) { VerifySameSize(value); int index = size - 1; while (index >= 0 && value.number[index] == 0) index--; UInt32 carry = 0; while (index >= 0) { UInt64 result = (UInt64)number[index] + value.number[index] + carry; number[index] = (UInt32)result; if (result >= 0x100000000U) carry = 1; else carry = 0; index--; } } public void Subtract(BigNumber value) { VerifySameSize(value); int index = size - 1; while (index >= 0 && value.number[index] == 0) index--; UInt32 borrow = 0; while (index >= 0) { UInt64 result = 0x100000000U + (UInt64)number[index] - value.number[index] - borrow; number[index] = (UInt32)result; if (result >= 0x100000000U) borrow = 0; else borrow = 1; index--; } } public void Multiply(UInt32 value) { int index = size - 1; while (index >= 0 && number[index] == 0) index--; UInt32 carry = 0; while (index >= 0) { UInt64 result = (UInt64)number[index] * value + carry; number[index] = (UInt32)result; carry = (UInt32)(result >> 32); index--; } } public void Divide(UInt32 value) { int index = 0; while (index < size && number[index] == 0) index++; UInt32 carry = 0; while (index < size) { UInt64 result = number[index] + ((UInt64)carry << 32); number[index] = (UInt32)(result / (UInt64)value); carry = (UInt32)(result % (UInt64)value); index++; } } public void Assign(BigNumber value) { VerifySameSize(value); for (int i = 0; i < size; i++) { number[i] = value.number[i]; } } public override string ToString() { BigNumber temp = new BigNumber(maxDigits); temp.Assign(this); StringBuilder sb = new StringBuilder(); sb.Append(temp.number[0]); sb.Append(System.Globalization.CultureInfo.CurrentCulture.NumberFormat.CurrencyDecimalSeparator); int digitCount = 0; while (digitCount < maxDigits) { temp.number[0] = 0; temp.Multiply(100000); sb.AppendFormat(""{0:D5}"" temp.number[0]); digitCount += 5; } return sb.ToString(); } public bool IsZero() { foreach (UInt32 item in number) { if (item != 0) return false; } return true; } public void ArcTan(UInt32 multiplicand UInt32 reciprocal) { BigNumber X = new BigNumber(maxDigits multiplicand); X.Divide(reciprocal); reciprocal *= reciprocal; this.Assign(X); BigNumber term = new BigNumber(maxDigits); UInt32 divisor = 1; bool subtractTerm = true; while (true) { X.Divide(reciprocal); term.Assign(X); divisor += 2; term.Divide(divisor); if (term.IsZero()) break; if (subtractTerm) this.Subtract(term); else this.Add(term); subtractTerm = !subtractTerm; } } }  If you are willing to use an approximation 355 / 113 is good for 6 decimal digits and has the added advantage of being usable with integer expressions. That's not as important these days as ""floating point math co-processor"" ceased to have any meaning but it was quite important once.  I really like this program which approximates pi by looking at its own area :-) IOCCC 1998 : westley.c If you replace _ with -F<00||--F-OO-- it should be easier to follow :-) Ow. That hurts my brain. or if you replace _ with ""if (previous character is '-') { OO--; } F--;"" I knew the guy who wrote it. Very nice guy quiet not the sort of person you'd expect to come up with lots of weird C like that. Gah! That's utterly insane. it prints 0.25 here -.- +1 litb it prints 0.25 for me too This program was great in 1998 but was broken because modern preprocessors are more liberal with inserting spaces around macro expansions to prevent things like this from working. It is a relic unfortunately. Pass `--traditional-cpp` to *cpp* to get the intended behavior.  Calculate PI at compile-time with D. ( Copied from DSource.org ) /** Calculate pi at compile time * * Compile with dmd -c pi.d */ module calcpi; import meta.math; import meta.conv; /** real evaluateSeries!(real x real metafunction!(real y int n) term) * * Evaluate a power series at compile time. * * Given a metafunction of the form * real term!(real y int n) * which gives the nth term of a convergent series at the point y * (where the first term is n==1) and a real number x * this metafunction calculates the infinite sum at the point x * by adding terms until the sum doesn't change any more. */ template evaluateSeries(real x alias term int n=1 real sumsofar=0.0) { static if (n>1 && sumsofar == sumsofar + term!(x n+1)) { const real evaluateSeries = sumsofar; } else { const real evaluateSeries = evaluateSeries!(x term n+1 sumsofar + term!(x n)); } } /*** Calculate atan(x) at compile time. * * Uses the Maclaurin formula * atan(z) = z - z^3/3 + Z^5/5 - Z^7/7 + ... */ template atan(real z) { const real atan = evaluateSeries!(z atanTerm); } template atanTerm(real x int n) { const real atanTerm = (n & 1 ? 1 : -1) * pow!(x 2*n-1)/(2*n-1); } /// Machin's formula for pi /// pi/4 = 4 atan(1/5) - atan(1/239). pragma(msg ""PI = "" ~ fcvt!(4.0 * (4*atan!(1/5.0) - atan!(1/239.0))) ); Unfortunately tangents are arctangents are based on pi somewhat invalidating this calculation. I just copied it from DSource.org  Instead of defining pi as a constant I always use acos(-1). cos(-1) or acos(-1)? :-P That (the latter) is one of the test cases in my original code. It's among my preferred (along with atan2(0 -1) which really is the same as acos(-1) except that acos is usually implemented in terms of atan2) but some compilers optimise for 4 * atan(1)!  The BBP formula allows you to compute the nth digit - in base 2 (or 16) - without having to even bother with the previous n-1 digits first :)  There's actually a whole book dedicated (amongst other things) to fast methods for the computation of \pi: 'Pi and the AGM' by Jonathan and Peter Borwein (available on Amazon). I studied the AGM and related algorithms quite a bit: it's quite interesting (though sometimes non-trivial). Note that to implement most modern algorithms to compute \pi you will need a multiprecision arithmetic library (GMP is quite a good choice though it's been a while since I last used it). The time-complexity of the best algorithms is in O(M(n)log(n)) where M(n) is the time-complexity for the multiplication of two n-bit integers (M(n)=O(n log(n) log(log(n))) using FFT-based algorithms which are usually needed when computing digits of \pi and such an algorithm is implemented in GMP). Note that even though the mathematics behind the algorithms might not be trivial the algorithms themselves are usually a few lines of pseudo-code and their implementation is usually very straightforward (if you chose not to write your own multiprecision arithmetic :-) ).  Use the Machin-like formula 176 * arctan (1/57) + 28 * arctan (1/239) - 48 * arctan (1/682) + 96 * arctan(1/12943) [; \left( 176 \arctan \frac{1}{57} + 28 \arctan \frac{1}{239} - 48 \arctan \frac{1}{682} + 96 \arctan \frac{1}{12943}\right) ;] for you TeX the World people. Implemented in Scheme for instance: (+ (- (+ (* 176 (atan (/ 1 57))) (* 28 (atan (/ 1 239)))) (* 48 (atan (/ 1 682)))) (* 96 (atan (/ 1 12943))))  Back in the old days with small word sizes and slow or non-existent floating-point operations we used to do stuff like this: /* Return approximation of n * PI; n is integer */ #define pi_times(n) (((n) * 22) / 7) For applications that don't require a lot of precision (video games for example) this is very fast and is accurate enough. For more accuracy use `355 / 113`. Very accurate for the size of numbers involved.  Pick a better algorithm. This one is more work but converges fast.  With doubles: 4.0 * (4.0 * Math.Atan(0.2) - Math.Atan(1.0 / 239.0)) This will be accurate up to 14 decimal places enough to fill a double (the inaccuracy is probably because the rest of the decimals in the arc tangents are truncated). Also Seth it's 3.141592653589793238463 not 64.  This is a ""classic"" method very easy to implement. This implementation in python (not so fast language) does it: from math import pi from time import time precision = 10**6 # higher value -> higher precision # lower value -> higher speed t = time() calc = 0 for k in xrange(0 precision): calc += ((-1)**k) / (2*k+1.) calc *= 4. # this is just a little optimization t = time()-t print ""Calculated: %.40f"" % calc print ""Costant pi: %.40f"" % pi print ""Difference: %.40f"" % abs(calc-pi) print ""Time elapsed: %s"" % repr(t) You can find more information here. Anyway the fastest way to get a precise as-much-as-you-want value of pi in python is: from gmpy import pi print pi(3000) # the rule is the same as # the precision on the previous code here is the piece of source for the gmpy pi method I don't think the code is as much useful as the comment in this case: static char doc_pi[]=""\ pi(n): returns pi with n bits of precision in an mpf object\n\ ""; /* This function was originally from netlib package bmp by * Richard P. Brent. Paulo Cesar Pereira de Andrade converted * it to C and used it in his LISP interpreter. * * Original comments: * * sets mp pi = 3.14159... to the available precision. * uses the gauss-legendre algorithm. * this method requires time o(ln(t)m(t)) so it is slower * than mppi if m(t) = o(t**2) but would be faster for * large t if a faster multiplication algorithm were used * (see comments in mpmul). * for a description of the method see - multiple-precision * zero-finding and the complexity of elementary function * evaluation (by r. p. brent) in analytic computational * complexity (edited by j. f. traub) academic press 1976 151-176. * rounding options not implemented no guard digits used. */ static PyObject * Pygmpy_pi(PyObject *self PyObject *args) { PympfObject *pi; int precision; mpf_t r_i2 r_i3 r_i4; mpf_t ix; ONE_ARG(""pi"" ""i"" &precision); if(!(pi = Pympf_new(precision))) { return NULL; } mpf_set_si(pi->f 1); mpf_init(ix); mpf_set_ui(ix 1); mpf_init2(r_i2 precision); mpf_init2(r_i3 precision); mpf_set_d(r_i3 0.25); mpf_init2(r_i4 precision); mpf_set_d(r_i4 0.5); mpf_sqrt(r_i4 r_i4); for (;;) { mpf_set(r_i2 pi->f); mpf_add(pi->f pi->f r_i4); mpf_div_ui(pi->f pi->f 2); mpf_mul(r_i4 r_i2 r_i4); mpf_sub(r_i2 pi->f r_i2); mpf_mul(r_i2 r_i2 r_i2); mpf_mul(r_i2 r_i2 ix); mpf_sub(r_i3 r_i3 r_i2); mpf_sqrt(r_i4 r_i4); mpf_mul_ui(ix ix 2); /* Check for convergence */ if (!(mpf_cmp_si(r_i2 0) && mpf_get_prec(r_i2) >= (unsigned)precision)) { mpf_mul(pi->f pi->f r_i4); mpf_div(pi->f pi->f r_i3); break; } } mpf_clear(ix); mpf_clear(r_i2); mpf_clear(r_i3); mpf_clear(r_i4); return (PyObject*)pi; } EDIT: I had some problem with cut and paste and identation anyway you can find the source here.  The following answers precisely how to do this in the fastest possible way -- with the least computing effort. Even if you don't like the answer you have to admit that it is indeed the fastest way to get the value of PI. The FASTEST way to get the value of Pi is: chose your favorite programming language load it's Math library and find that Pi is already defined there!! ready to use it.. in case you don't have a Math library at hand.. the SECOND FASTEST way (more universal solution) is: look up Pi on the Internet e.g. here: http://www.eveandersson.com/pi/digits/1000000 (1 million digits .. what's your floating point precision? ) or here: http://3.141592653589793238462643383279502884197169399375105820974944592.com/ or here: http://en.wikipedia.org/wiki/Pi It's really fast to find the digits you need for whatever precision arithmetic you would like to use and by defining a constant you can make sure that you don't waste precious CPU time. Not only is this a partly humorous answer but in reality if anybody would go ahead and compute the value of Pi in a real application .. that would be a pretty big waste of CPU time wouldn't it? At least I don't see a real application for trying to re-compute this. Dear Moderator: please note that the OP asked: ""Fastest Way to get the value of PI"" Funny! and so true!  Just came across this one that should be here for completeness: calculate PI in Piet It has the rather nice property that the precision can be improved making the program bigger. Here's some insight into the language itself I always loved this Piet program. Shows how Piet is clearly more practical than BF ;-)  If this article is true then the algorithm that Bellard has created could be one of the speediest available. He has created pi to 2.7 TRILLION digits using a DESKTOP PC! ...and he has published his work here Good work Bellard You are a pioneer! http://www.theregister.co.uk/2010/01/06/very_long_pi/ Bellard pioneered in many many ways...first there was LZEXE quite possibly the first executable compressor (think what UPX does then flip back in time to the '80s) and of course now both QEMU and FFMPEG are widely used. Oh and his IOCCC entry.... :-P  Brent's method posted above by Chris is very good; Brent generally is a giant in the field of arbitrary-precision arithmetic. If all you want is the Nth digit the famous BBP formula is useful in hex The Brent method wasn't posted by me; it was posted by Andrea and I just happened to be the last person who edited the post. :-) But I agree that post deserves an upvote.",performance algorithm language-agnostic unix pi
