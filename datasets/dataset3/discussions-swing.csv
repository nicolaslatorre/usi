0,A,"How to keep a single column from being reordered in a JTable? I have a JTable and I need to be able to reorder the columns. However I want the first column to not be able to be re-ordered. I used the following to enable reordering: table.getTableHeader().setReorderingAllowed(true); The columns can now be reordered including the first column which I don't want. Is there any way to lock the first column? I have seen some solutions that use two tables with the first column being in a separate table but maybe there's a better/simpler way. I got 70% through your question and started writing a response telling you to use 2 tables...Then I finished reading your post. So you're saying the first column should be independent of the others? He is talking about moving entire columns left and right. Oh I was thinking of sorting. That makes a lot more sense. Yes moving the columns to the left or right not ordering the data within the columns I think that you need to override the columnMoved() method in TableColumnModelListener. the TableColumnModelEvent class has a getFromIndex() method that you should be able to look at to determine if it's your fixed column and then you should be able to cancel the event. Hope that helps. A You have to make this change on the implementation of TableColumnModel rather than TableColumnModelListener override moveColumn(int columnIndex int newIndex). You cannot cancel the event even MouseEvent.consume() has no effect. There is no super class of TableColumnModelListener as it is an interface. This looks to be the best way to go about it. I've been toying with that my question is (since I'm a Java neophyte) how do I cancel the event? you choose whether to pass the method call to the superclass. if you don't it won't be applied to the table.  At first I used the very last Gnoupi's suggestion consisting in subclassing the TableColumnModel and overriding moveColumn but there were still some annoying jumps. This is ""my"" fully working and tested solution with no nasty jump it mainly relies on StanislavKo and kleopatra's suggestions. I added a more complicated mechanism to revert the unwanted move when releasing the mouse button : table.getTableHeader().setUI(new WindowsTableHeaderUI() { @Override protected MouseInputListener createMouseInputListener() { return new BasicTableHeaderUI.MouseInputHandler() { @Override public void mouseDragged(MouseEvent e) { if (header.isEnabled() && header.getReorderingAllowed() && header.getDraggedColumn() != null && header.getDraggedColumn().getModelIndex() == frozenColumnModelIndex) { header.setDraggedDistance(0); header.setDraggedColumn(null); return; } super.mouseDragged(e); } @Override public void mouseReleased(MouseEvent e) { if (header.isEnabled() && header.getReorderingAllowed() && header.getDraggedColumn() != null && 0 <= illegalTableColumnMoveFromIndex && illegalTableColumnMoveFromIndex < header.getTable().getColumnModel().getColumnCount()) { header.setDraggedDistance(0); header.setDraggedColumn(null); header.getTable().getColumnModel().moveColumn(illegalTableColumnMoveToIndex illegalTableColumnMoveFromIndex); illegalTableColumnMoveFromIndex = -1; illegalTableColumnMoveToIndex = -1; return; } super.mouseReleased(e); } }; } }); table.getColumnModel().addColumnModelListener(new TableColumnModelListener() { @Override public void columnAdded(TableColumnModelEvent e) { } @Override public void columnRemoved(TableColumnModelEvent e) { } @Override public void columnMoved(TableColumnModelEvent e) { if (e.getFromIndex() != e.getToIndex() && table.getColumnModel().getColumn(e.getFromIndex()).getModelIndex() == frozenColumnModelIndex) { illegalTableColumnMoveFromIndex = e.getFromIndex(); illegalTableColumnMoveToIndex = e.getToIndex(); } else { illegalTableColumnMoveFromIndex = -1; illegalTableColumnMoveToIndex = -1; } } @Override public void columnMarginChanged(ChangeEvent e) { } @Override public void columnSelectionChanged(ListSelectionEvent e) { } }); Note that the latest valid move is accepted instead of completely reverting the column drag. frozenColumnModelIndex is the index of the ""frozen"" column in the table model. illegalTableColumnMoveFromIndex is the index of the column from where it was moved when the latest illegal move was detected. illegalTableColumnMoveToIndex is the index of the column to where it was moved when the latest illegal move was detected. The code inside mouseDragged is enough to prevent the frozen column from being dragged the rest allows to prevent another column from being dragged to the frozen column. It works as is under Microsoft Windows as I extend WindowsTableHeaderUI but rather use the reflection API to set the mouse input listener of the table header UI call uninstallerListeners() and finally call header.addMouseListener(mouseInputListener) and header.addMouseMotionListener(mouseInputListener) in order to drive my solution cross-platform without making any assumption on the name of the class for each table header UI. I admit it might be a bit less robust than kleopatra's solution. I thank you all for your help I'm really grateful and I'm really happy to see that collaborative work just works :)  Nearly 4 years later there's still no optimal solution in sight anywhere. Yet another suboptimal approach to prevent dragging of the first column (and other columns over the first) is to intercept the mouseEvents before the mouseInputListener installed by the uidelegate can handle them (similar to a recent QA). The collaborators a custom MouseMotionListener which delegates all events to the originally installed except the dragged if it would lead to another column above the first replace the original with the custom update the replacement whenever the LAF is changed (because the original is controlled by the ui). This requires subclassing of JTableHeader and do the wiring in updateUI The custom MouseInputListener: /** * A delegating MouseInputListener to be installed instead of * the one registered by the ui-delegate. * * It's implemented to prevent dragging the first column or any other * column over the first. */ public static class DragHook implements MouseInputListener { private JTableHeader header; private MouseListener mouseDelegate; private MouseMotionListener mouseMotionDelegate; private int maxX; public DragHook(JTableHeader header) { this.header = header; installHook(); } /** * Implemented to do some tweaks/bookkeeping before/after * passing the event to the original * * - temporarily disallow reordering if hit on first column * - calculate the max mouseX that's allowable in dragging to the left * */ @Override public void mousePressed(MouseEvent e) { int index = header.columnAtPoint(e.getPoint()); boolean reorderingAllowed = header.getReorderingAllowed(); if (index == 0) { // temporarily disable re-ordering header.setReorderingAllowed(false); } mouseDelegate.mousePressed(e); header.setReorderingAllowed(reorderingAllowed); if (header.getDraggedColumn() != null) { Rectangle r = header.getHeaderRect(index); maxX = header.getColumnModel().getColumn(0).getWidth() + e.getX() - r.x -1; } } /** * Implemented to pass the event to the original only if the * mouseX doesn't lead to dragging the column over the first. */ @Override public void mouseDragged(MouseEvent e) { TableColumn dragged = header.getDraggedColumn(); int index = getViewIndexForColumn(header.getColumnModel() dragged); // dragged column is at second position allow only drags to the right if (index == 1) { if (e.getX() < maxX) return; } mouseMotionDelegate.mouseDragged(e); } //-------- delegating-only methods @Override public void mouseReleased(MouseEvent e) { mouseDelegate.mouseReleased(e); } @Override public void mouseClicked(MouseEvent e) { mouseDelegate.mouseClicked(e); } @Override public void mouseEntered(MouseEvent e) { mouseDelegate.mouseEntered(e); } @Override public void mouseExited(MouseEvent e) { mouseDelegate.mouseExited(e); } @Override public void mouseMoved(MouseEvent e) { mouseMotionDelegate.mouseMoved(e); } //------------ un-/install listeners protected void installHook() { installMouseHook(); installMouseMotionHook(); } protected void installMouseMotionHook() { MouseMotionListener[] listeners = header.getMouseMotionListeners(); for (int i = 0; i < listeners.length; i++) { MouseMotionListener l = listeners[i]; if (l.getClass().getName().contains(""TableHeaderUI"")) { this.mouseMotionDelegate = l; listeners[i] = this; } header.removeMouseMotionListener(l); } for (MouseMotionListener l : listeners) { header.addMouseMotionListener(l); } } protected void installMouseHook() { MouseListener[] listeners = header.getMouseListeners(); for (int i = 0; i < listeners.length; i++) { MouseListener l = listeners[i]; if (l.getClass().getName().contains(""TableHeaderUI"")) { this.mouseDelegate = l; listeners[i] = this; } header.removeMouseListener(l); } for (MouseListener l : listeners) { header.addMouseListener(l); } } public void uninstallHook() { uninstallMouseHook(); uninstallMouseMotionHook(); } protected void uninstallMouseMotionHook() { MouseMotionListener[] listeners = header.getMouseMotionListeners(); for (int i = 0; i < listeners.length; i++) { MouseMotionListener l = listeners[i]; if (l == this) { listeners[i] = mouseMotionDelegate; } header.removeMouseMotionListener(l); } for (MouseMotionListener l : listeners) { header.addMouseMotionListener(l); } } protected void uninstallMouseHook() { MouseListener[] listeners = header.getMouseListeners(); for (int i = 0; i < listeners.length; i++) { MouseListener l = listeners[i]; if (l == this) { listeners[i] = mouseDelegate; } header.removeMouseListener(l); } for (MouseListener l : listeners) { header.addMouseListener(l); } } } Usage which survives switching of LAF f.i.: JTable table = new JTable(new AncientSwingTeam()) { @Override protected JTableHeader createDefaultTableHeader() { JTableHeader header = new JTableHeader(getColumnModel()) { DragHook hook; @Override public void updateUI() { if (hook != null) { hook.uninstallHook(); hook = null; } super.updateUI(); hook = new DragHook(this); } }; return header; } }; +1 ....................................  This is the solution that I used to prevent the 1st column from being re-ordered private int columnValue = -1; private int columnNewValue = -1; tblResults.getColumnModel().addColumnModelListener(new TableColumnModelListener() { public void columnAdded(TableColumnModelEvent e) {} public void columnMarginChanged(ChangeEvent e) {} public void columnMoved(TableColumnModelEvent e) { if (columnValue == -1) columnValue = e.getFromIndex(); columnNewValue = e.getToIndex(); } public void columnRemoved(TableColumnModelEvent e) {} public void columnSelectionChanged(ListSelectionEvent e) {} }); tblResults.getTableHeader().addMouseListener(new MouseAdapter() { @Override public void mouseReleased(MouseEvent e) { if (columnValue != -1 && (columnValue == 0 || columnNewValue == 0)) tblResults.moveColumn(columnNewValue columnValue); columnValue = -1; columnNewValue = -1; } }); Cheers  I had the same issue and I was searching about it. So far I found two ways of doing that. The ""if I was rewriting it myself"" method : Modifying the base classes from Java. TableColumn would need a new property like the ""resizingAllowed"" it would need the ""reorderingAllowed"". From this the modifications take place in BasicTableHeaderUI : There is already : private static boolean canResize(TableColumn column JTableHeader header) { return (column != null) && header.getResizingAllowed() && column.getResizable(); } It would need too : private static boolean canMove(TableColumn column JTableHeader header) { return (column != null) && header.getReorderingAllowed() && column.getReorderable(); } (Note that if you don't want the first column only to not move you can do without changing the TableColumns : private static boolean canMove(TableColumn column JTableHeader header) { return (column != null) && header.getReorderingAllowed() && header.getColumnModel().getColumnIndex(column.getIdentifier()) != 0; } ) After two places to modify in the MouseInputListener : in the mousePressed calling the canMove() instead of the header.getReorderingAllowed(). This ensures that a column which shouldn't be moved won't be. But this is not enough we need to prevent the immobile columns from being moved during dragging another one. You need to change the mouseDragged too when it is getting the ""newColumnIndex"" : if (0 < newColumnIndex && newColumnIndex < cm.getColumnCount()) You need to add the condition if this new index can be moved for example using the ""canMove()"" method. This way when you will drag a column to this immobile one you will still drag it but it won't swap them. Note that this method would require you to explicitly set the UI for the JTableHeader used for your JTable which is not really ideal. But this is the most adapted though as it deals with the problem on the place it is supposed to. The ""Let's try to block the normal behavior with what we actually have"" method : Not modifying the UI this method focus on the JTableHeader to block the commands made by the UI. First to block dragging the first column we need a subclass from JTableHeader with this overridden method : @Override public void setDraggedColumn(TableColumn pAColumn) { int lIndex = -1; if (pAColumn != null) lIndex = getColumnModel().getColumnIndex(pAColumn.getIdentifier()); if (lIndex != 0) super.setDraggedColumn(pAColumn); } This will prevent a user from dragging the first column. But like described earlier this is only one part of the problem we need to prevent another dragged column from swapping with this first one. So far I don't have a correct method for this. I tried by subclassing the TableColumnModel and overriding the moveColumn() method : @Override public void moveColumn(int pColumnIndex int pNewIndex) { //Move only if the first column is not concerned if (pColumnIndex =! 0 && pNewIndex != 0) super.moveColumn(pColumnIndex pNewIndex); } But this won't work as the UI will update anyway the mouse position in the mouseDragged method you will have a jump from your dragged column to another place. So I'm still searching and wonder if someone has propositions concerning this part. Good job. Please let me know your opinion about my suggestion and thanks again for your detailed explanations.  I have used the ""The 'Let's try to block the normal behavior with what we actually have' method"" approach. Gnoupi said that he did not solve the second part of the problem. Here is the solution for just Windows XP L&F: copy XPStyle class to yourself. extend WindowsTableHeaderUI. Take a look at the source code. use it: getTableHeader().setUI(new TreeTableWindowsTableHeaderUI()); Thanks to Gnoupi for the efforts.  First you need to define a better and simpler way. What don't you like about the 2 table approach? You can't use a TableColumnModelListener because the event is fired ""after"" the column has already been moved. The code for dragging the column is found in the BasicTableHeaderUI. So you could try overriding the code there but then you would need to do it for all LAFs. The above code invokes JTableHeader.getReorderingAllowed() on a mousePressed event to determine if column reordering is allowed. I guess you could override that method in the JTableHeader and perhaps use the MouseInfo class to get the current mouse location to determine if it was over the first column and then return false. But then now you would also need to create a custom JTable that uses the custom table header. Of course with either of the above suggestions you might be able to prevent the first column from being moved. But don't forget you also need to prevent the 2nd column from being inserted before the first column. I don't believe there is a short simple answer to the question. Fixed Column Table is my version of how this would be imlemented with two tables. Is it better? I don't know but it is simple since its only a single line of code to use it. It does not force you to use two models. Only the OP knows what his requirements are. We can't read his mind. The ""2tables approach"" he probably doesn't like because that makes a break from the datamodel I'm guessing. It would force to finally have data separated in two models it's sure simple on the JTable on the graphical side but it's more annoying on the model side. You don't need two models you can easily do the two table approach from the same TableModel. This is the simplest approach both from a conceptual standpoint and from a maintenance standpoint."
1,A,"Where are the form settings of the Swing Application Framework stored? I want to delete them because for some reason my forms are restored to the wrong dimensions on startup. I didn't find anything in my user directory but I'm not event sure what to look for. I'm interested about Windows and Linux. did you use an IDE to create it? If so which one? From here: Session state is stored locally relative to the user's home directory by the LocalStorage save and load methods. The startup method must set the ApplicationContext vendorId and applicationId properties to ensure that the correct local directory is selected on all platforms. For example on Windows XP the full pathname for filename ""session.xml"" is typically: ${userHome}\Application Data\${vendorId}\${applicationId}\session.xml Where the value of ${userHome} is the the value of the Java System property ""user.home"". On Solaris or Linux the file is: ${userHome}/.${applicationId}/session.xml and on OSX: ${userHome}/Library/Application Support/${applicationId}/session.xml"
2,A,Rich calendar component for Swing application My company is adding some rich calendar functionality to our Swing application. We want it to work like Outlook's calendar. Here are some of our requirments: Views for day week and month The ability to specify calendar items down to the minute level The ability to drag and drop calendar elements into different slots Editing of calendar details directly on the calendar Printing support Customizable look and feel 508 compliance support would be a big plus At the moment we're planning on going with MiG Calendar but I was wondering if anyone had any experience with other Swing components with similar functionality. We ended up just sticking with MiG Calendar. Another team took over the work on this feature so I can't say first hand how well it worked. However I got the impression that it got the job done.  I haven't used it personally (yet) but I know others who have been satisfied with this: http://www.toedter.com/en/jcalendar/index.html I am currently using this with great success. I clarified our requirements in the question we need something that can show calendar items down to the minute level.
3,A,Java Swing GUI hour glass In my Swing program there is a JTabbedPane when user clicks on a tab the program takes a while to get the data and process the results then shows the results in the selected tab how can I display a hour glass or something of that effect so that user knows it's processing data not to click on the tab again before it finishes it job. setCursor(int) is deprecated. This is probably a bit cleaner: setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  The simplest way is to just call setCursor on the appropriate component (probably the top-level window) with the appropriate Cursor. component.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR)); And then set it back when you are done. component.setCursor(Cursor.getDefaultCursor()); This helped a lot. Thank you. Great it's simple and effective.  I would as other mentioned Change the cursor Use a SwingWorker Display the progressbar or an animated image in the glasspane Hide the glasspane when the task is completed Restore the default cursor  A JProgressBar (possibly in indetermiante mode) sounds right - put that on the tab until the data has been fetched. A well-designed UI shouldn't force the user to wait for long-running tasks to complete and instead allow them to do something else inbetween. To that end I would hope that the long-running task is done in a separate thread. I'll try this makes sense so user will know how long to wait.  As the other answers mention you can set a wait cursor but you also mention preventing additional mouse clicks. You can use a glass pane to prevent clicks on components until the long operation is finished. In addition to the Sun tutorials on the glass pane there is a nice example at http://www.java2s.com/Code/Java/Swing-JFC/DemonstrateuseofGlassPane.htm
4,A,Why does Swing in my Java Applet flicker on fast mouse over? I made a Java Applet with some Standard GUI Components on it. I used the MigLayout Manager. If I move the mouse slowly over the various GUI Components everything appears to be fine but if I move the mouse fast it flickers. What could make that nasty ugly redraw? (Core 2 Duo 6300 2GB Ram Windows XP) I found the bugger: I used a custom ClosableTabbedPaint Class.  you could use double buffering in java applet to improve screen refreshing speed. ask more if details needed.. According to http://java.sun.com/products/jfc/tsc/articles/painting/ double buffering is ENABLED BY DEFAULT for all Swing components.  One thought would be to check your code (and/or the MigLayout code) for unnecessary repaint() operations. Custom UIs and layouts can cause weird problems sometimes... You're right. Thanks. I found out that I used a custom component which registered a MouseListener.
5,A,"How do I change JPanel inside a JFrame on the fly? To put it simple there's a simple java swing app that consists of JFrame with some components in it. One of the components is a JPanel that is meant to be replaced by another JPanel on user action. So what's the correct way of doing such a thing? I've tried panel = new CustomJPanelWithComponentsOnIt(); parentFrameJPanelBelongsTo.pack(); but this won't work. What would you suggest? I suggest you to add both panel at frame creation then change the visible panel by calling setVisible(true/false) on both. When calling setVisible the parent will be notified and asked to repaint itself.  Problem: My component does not appear after I have added it to the container. You need to invoke revalidate and repaint after adding a component before it will show up in your container. Source: http://docs.oracle.com/javase/tutorial/uiswing/layout/problems.html  I was having exactly the same problem!! Increadible!! The solution I found was: Adding all the components (JPanels) to the container; Using the setVisible(false) method to all of them; On user action setting setVisible(true) to the panel I wanted to show. // Hiding all components (JPanels) added to a container (ex: another JPanel) for (Component component : this.container.getComponents()) { component.setVisible(false); } // Showing only the selected JPanel the one user wants to see panel.setVisible(true); No revalidate() no validate() no CardLayout needed.  Your use case seems perfect for CardLayout. In card layout you can add multiple panels in the same place but then show or hide one panel at a time. When using CardLayout keep in mind that the preferred size for the panel that uses it will be the size of the LARGEST panel in the layout. If you want the space to be reclaimed you will want to use setVisible(false) and setPreferredSize( new Dimension( 00 ) ) to hide a component. I hadn't heard of CardLayout before. Thanks - was perfect for something I needed to do.  class Frame1 extends javax.swing.JFrame { remove(previouspanel); //or getContentPane().removeAll(); add(newpanel); //or setContentPane(newpanel); invalidate(); validate(); // or ((JComponent) getContentPane()).revalidate(); repaint(); //DO NOT FORGET REPAINT } Sometimes you can do the work without using the revalidation and sometimes without using the repaint.My advise use both.  Hope this piece of code give you an idea of changing jPanels inside a JFrame. public class PanelTest extends JFrame { Container contentPane; public PanelTest() { super(""Changing JPanel inside a JFrame""); contentPane=getContentPane(); } public void createChangePanel() { contentPane.removeAll(); JPanel newPanel=new JPanel(); contentPane.add(newPanel); System.out.println(""new panel created"");//for debugging purposes validate(); setVisible(true); } }  frame.setContentPane(newContents()); frame.revalidate(); // frame.pack() if you want to resize. Remember Java use 'copy reference by value' argument passing. So changing a variable wont change copies of the reference passed to other methods. Also note JFrame is very confusing in the name of usability. Adding a component or setting a layout (usually) performs the operation on the content pane. Oddly enough getting the layout really does give you the frame's layout manager. You may run into problems when using the setContentPane() method. I had cases where all (custom) cursors not showing up anymore after calling it. Tom thanks for your reply. I'm not aiming to replace the contentpane just a jpanel placed on it (like frame.add(jpanel1) frame.add(jpanel2) frame.add(jpanel3)). Could you plz suggest a sane solution in code? Hey John Your use case seems perfect for CardLayout. http://java.sun.com/docs/books/tutorial/uiswing/layout/card.html In card layout you can add multiple panels in the same place but then show or hide one panel at a time. @swapnonil: Make that an answer so I can vote it up. :)  On the user action: // you have to do something along the lines of myJFrame.getContentPane().removeAll() myJFrame.getContentPane().invalidate() myJFrame.getContentPane().add(newContentPanel) myJFrame.getContentPane().revalidate() Then you can resize your wndow as needed.  1) Setting the first Panel: JFrame frame=new JFrame(); frame.getContentPane().add(new JPanel()); 2)Replacing the panel: frame.getContentPane().removeAll(); frame.getContentPane().add(new JPanel()); Also notice that you must do this in the Event's Thread to ensure this use the SwingUtilities.invokeLater or the SwingWorker  The other individuals answered the question. I want to suggest you use a JTabbedPane instead of replacing content. As a general rule it is bad to have visual elements of your application disappear or be replaced by other content. Certainly there are exceptions to every rule and only you and your user community can decide the best approach.  It all depends on how its going to be used. If you will want to switch back and forth between these two panels then use a CardLayout. If you are only switching from the first to the second once and (and not going back) then I would use telcontars suggestion and just replace it. Though if the JPanel isn't the only thing in your frame I would use remove(java.awt.Component) instead of removeAll. If you are somewhere in between these two cases its basically a time-space tradeoff. The CardLayout will save you time but take up more memory by having to keep this whole other panel in memory at all times. But if you just replace the panel when needed and construct it on demand you don't have to keep that meory around but it takes more time to switch. Also you can try a JTabbedPane to use tabs instead (its even easier than CardLayout because it handles the showing/hiding automitically)  Just call the method pack() after setting the ContentPane (java 1.7 maybe older) like this: JFrame frame = new JFrame(); JPanel panel1 = new JPanel(); JPanel panel2 = new JPanel(); .... frame.setContentPane(panel1); frame.pack(); ... frame.setContentPane(panel2); frame.pack(); ..."
6,A,"only mouse clicked event of jlabel update jlabel text property properly i am using a java thread to update jlabel text value in my application but after it updated text on jlabel jlabel showing all past updated values and new value periodically in order via refreshing itself but when i use same update function within the mouseclick event of jlabel it is updating itself as i expected and showing last value only what can cause this problem am i missing some methods which mouseclick event internally calls ? nore:application is japplet Not sure exactly what's going on but I would start by making sure your update happens in the event dispatch thread. Have your updater thread call: SwingUtilities.invokeLater(new Runnable() { public void run() { // ...update the text... } }); See the Event Dispatch Thread tutorial.  You must ensure that any changes to Swing UI components are performed on the Event Dispatch Thread. Here are two suggestions for accomplishing this: Timer You may want to check out javax.swing.Timer if the aim is to periodically refresh the JLabel text. The timer fires ActionEvents periodically on the Event Dispatch Thread:  int delay = 1000; //milliseconds ActionListener taskPerformer = new ActionListener() { public void actionPerformed(ActionEvent evt) { label.setText(""foo""); } }; new Timer(delay taskPerformer).start(); SwingWorker Alternatively you may want to consider using a SwingWorker to perform your background processing. The background worker thread can communicate information back to the Event Dispatch thread by calling publish. new SwingWorker<Void String>() { // Called by the background thread. public Void doInBackground() { for (int i=0; i<100; ++i) { // Do work. Periodically publish String data. publish(""Job Number: "" + i); } } // Called on the Event Dispatch Thread. @Override protected void process(List<String> chunks) { // Update label text. May only want to set label to last // value in chunks (as process can potentially be called // with multiple String values at once). for (String text : chunks) { label.setText(text); } } }.execute(); thank you soooo much timer class solved my problem :)  why don't u try this: labelname.paintImmediately(**labelname**.getVisibleRect());"
7,A,What are good ways to keep GridBagConstraints under control? I'm somewhat new to Swing programming and I find that as much as I love the power of GridBagLayout if you've got a lot of components there are lots of lines of code just setting up the constraints for the layout. What are some good ways to keep this under control besides using a visual editor? Check out MigLayout instead of GridBagLayout - http://www.miglayout.com/ I feel your pain. I feel it so much that I have recently abandoned GridBagLayout entirely in favor of another tool - JGoodies Forms. Its layout code is more concise reads at a higher level and is in general much more satisfying to use than GridBagLayout. It defines a mini-language to define layouts. It's cryptic at first glance but don't let that discourage you. If you are able to use it in your environment I would highly recommend it. I checked it out - really great. A huge improvement over GBL. You may also check out DesignGridLayout (http://designgridlayout.dev.java.net) which does the same as JGoodies forms but exclusively through its API which prevents any possible problem in runtime (if it compiles it will run correctly!)  Remember that when you add GridBagConstraints to a GridBagLayout the data is copied (actually cloned). Therefore you don't need to start from scratch for each component you add. You may find the double-brace idiom useful. I recommend using a better builder than GridBagConstraints public fields. See my blog entry on the subject for an example.  Yes GridBagLayout is really painful. But it's still powerful. In many cases you cannot escape from it. Lets check this tiny utility to see it it ease your pain painless-gridbag
8,A,"Where are Swing applications used? Are Swing applications really used nowadays? I don't find a place where they are used. Is it okay to skip the AWT and Swing package (I learned a bit of the basics though)? Related: http://stackoverflow.com/questions/2994304/is-java-swing-still-in-use/2994324#2994324 Swing applications are used in most cases where a Java app runs on the desktop. Sometimes you don't even know - for example LimeWire is a Java Swing application. When learning Swing you'll find that you will come to know those parts of AWT that are still important such as Event LayoutManager Graphics Font Color etc. No Azureus/Vuze is NOT Eclipse RCP based but on SWT. Yes Azureus is an Eclipse RCP i.e. it uses SWT. azureus was developed in swing ? wow .. thanks for the info pal :) I believe that Azureus uses SWT toolkit (from of Eclipse) not Swing. OK edited my answer to fix that. Sorry for the mistake. I tend to agree. You won't even realize you're running Swing apps when they're done right. Unless you really look there's no way to tell our app (http://www.landlordmax.com) is a Swing app.  You may checkout Swing Sightings. This website is hosted by SUN and it is dedicated to sw projects that use Swing. There are a lot of projects using Swing ... http://java.sun.com/products/jfc/tsc/sightings/ While I don't doubt Swing has it's place even today (and at the same time being an ugly and complex beast to get started with) the last sightings issue is from 2005 - so it cannot really prove that Swing is used _today_ ;) LandlordMax (http://www.LandlordMax.com) is a current desktop application that's based on Swing. I can assure you the Swing community is very alive! FYI: It was feature on Swing Sightings years ago.  AWT I never actually learnt in full as swing is just a more sophisticated version knowing swing is very important if you have any intention of ever making a Java GUI application. will it be ever used for enterprise application development ?  You should certainly write Swing for desktop Java only using AWT to the degree that Swing demands it. I'm sure people can come up with examples of very good Swing apps besides SQL Squirrel and IntelliJ. I think that RIA technologies like Flex Silverlight etc. are ascendant because the web and services are taking mindshare from desktops. It's not just Swing that's losing out. ""certainly"" perhaps not there is at least the SWT alternative (which I didn't learn). I wouldn't consider SWT as a viable alternative but that's my personal choice.  Hmmmm... how about NetBeans? You know the IDE? It uses Swing. oh thanks for the info ya i know and also eclipse While Eclipse is great IDE it doesn't use Swing but SWT.  If you are writing for the web exclusively you can probably skip Swing but otherwise you're absolutely going to run into it. I've never worked on a non-trivial Java app without a Swing GUI. Also Swing is one of the better APIs to use. If you use most others you are going to find them more difficult to use and/or platform incompatible. (If anyone reading this is aware of exceptions to this please leave comments I haven't looked for a while and am kind of curious if anything better has become available) Other JVM languages like JRuby and Jython are often used because of their access to Swing.  Geertjan Wielenga often blogs about applications based on the NetBeans platform and therefore Swing. The applications range across the board from rather small esoteric applications to very large mission-critical systems (Boeing Aircraft comes to mind). Many of the enterprise-level applications that Geertjan misses are mentioned on Planet NetBeans. It seems like every few weeks there is an announcement or description of such a program. As noted above lots of tools use Swing including the IntelliJ IDEA IDE a favorite. I'm surprised no one else mentioned it. Sun also used to maintain a Swing Sightings web site but it hasn't been updated in a few years. Where I work Swing is used in the presentation layer for a very large document management system. In my own development experience I've used Swing for desktop applications in the areas of image processing device control (video motors etc.) math statistics and medical devices. BTW I agree about the slowness of file choosers. But there are lots of alternatives that will use the native file chooser. It can just be a bit jarring if the L&F's don't match up very well. EDIT: Oh and as others have mentioned it's very easy to use Swing from other languages on the JVM. With Clojure for example it is even easier to use than in Java in my opinion.  Are you skipping it for an exam/interview? Besides really good apps like IntelliJ IDEA and NetBeans there are lots of Swing like frameworks [SWT (Eclipse) GWT etc.] which you can learn faster with Swing knowledge...  You should probably be looking at JavaFX for future work. As the FAQ states Sun is not replacing Swing with JavaFX Script. Instead JavaFX Script makes Swing easier to use. Using/learning it will give you a very good understanding of the important Swing concepts and how they fit in with ""the future"". I haven't used JavaFX yet but heard very good things about it.  IIRC jEdit is also a Swing app. Quite a popular text editor.  There is no universal question to whether it is ok to skip something or not. It's a matter of priorities. While Swing has a lot to teach you (and it is too heavily infused with AWT) if you're never going to be writing GUIs you may be better off investing in something else. Swing while ugly as hell is still used in many places. A quick search on ""java swing"" in Indeed or dice would reveal many jobs and industries that require it. I always put the following right at the top of my `main` method to reduce the ugly-ness: `UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());` (with the necessary try/catch). It's still not as beautiful as you might want it to be but it helps a lot. i find that the file choosers are very slow in swing - i hate them Swing while not great in many ways is far from ""ugly as hell"". It has many nice concepts and is quite good to use after a bit of experience is gained. And with recent font improvements makes it quite possible to write a GUI which is indistinguishable from a native app. Indistinguishable except that it resizes properly that is. You can write something pretty in every language but in my experience the vast majority of applications written with similar effort in Swing compared to other APIs tend to be clunkier less aesthetic and less robust.  Skip AWT and Swing? To jump where? SWT? Web-based development? In the broader sense I have a number of Java applications although I am not too sure if they use Swing or SWT. Lot of database tools like SQuirreL SQL Client are written in Java. I think SQuirrel uses stuff from Netbean which is of course Swing based. yEd is written in Java probably Swing. A number of P2P softwares are written in Java including Frostwire (I see no trace of SWT there but I can just miss it). And this list is far from exhaustive! Lol! I forgot to mention the software suite made by the company I work for! It is quite specialized used by mobile phone companies to monitor health of their network nodes (superficially looks like a spreadsheet). Totally Swing based. Open Office is *not* written in Java (it's slow for other reasons ;)). Ah? Somebody already told me but before posting I checked and found lot of jar files (in program/classes). It has lot of DLL and exe files too indeed. Confusing at least. OpenOffice is written in C++ and supports Java plug-ins somehow.  While Swing has some cross-platform look-and-feel deficiencies and it would be nice if it was updated to support generics it is still well designed and quite usable. I have always been a fan of the sheer amount of customization offered. SWT is nice and is more native but you give up some power and control with that as well. In addition it seems simpler to use which can be a plus since Swing can be overly complex due to its flexibility.  Whenever you want to write a desktop GUI app for non-Windows OS you use Swing as the only sane and guaranteed cross-platform GUI framework. Besides Swing has a very good design. I recommend to learn it anyways to make yourself a better programmer.  Swing is heavily used in business specific (vertical)/internal application development.  Check out Filthy Rich Clients. It explains some of the history of AWT and Swing. Swing being a lightweight alternative (successor) to most of the AWT classes."
9,A,"How do I get InputVerifier to work with an editable JComboBox I've got an JComboBox with a custom inputVerifyer set to limit MaxLength when it's set to editable. The verify method never seems to get called. The same verifyer gets invoked on a JTextField fine. What might I be doing wrong? Show us a small section of your code. package inputverifier; import javax.swing.*; class Go { public static void main(String[] args) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { runEDT(); }}); } private static void runEDT() { new JFrame(""combo thing"") {{ setLayout(new java.awt.GridLayout(2 1)); add(new JComboBox() {{ setEditable(true); setInputVerifier(new InputVerifier() { @Override public boolean verify(JComponent input) { System.err.println(""Hi!""); return true; } }); }}); add(new JTextField()); setDefaultCloseOperation(EXIT_ON_CLOSE); pack(); setVisible(true); }}; } } Looks like it's a problem with JComboBox being a composite component. I'd suggest avoiding such nasty UI solutions.  I wouldn't use the term workaround. Based on all the swing code I've seen from a bunch of different sources that looks to be the canonical solution.  I found a workaround. I thought I'd let the next person with this problem know about. Basically. Instead of setting the inputVerifier on the ComboBox you set it to it's ""Editor Component"". JComboBox combo = new JComboBox(); JTextField tf = (JTextField)(combo.getEditor().getEditorComponent()); tf.setInputVerifier(verifyer);"
10,A,"How to create a JButton with a menu? I want to create a Toolbar in my application. If you click a button on that toolbar it will pop up a menu just like in Eclipse's toolbar. I don't know how to do this in Swing. Can someone help me please? I've tried Google but found nothing. See the section Bringing Up a Popup Menu in How to Use Menus. just that this is the more specific link: http://docs.oracle.com/javase/tutorial/uiswing/components/menu.html#popup  I think it's the same as in AWT. You should put an ActionCommand on that button and when it's executed show the pop-up menu according to the mouse coordinates.  This is way harder in Swing than it needs to be. So instead of pointing you to tutorials I've created a fully working example. import javax.swing.*; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; public class ToolbarDemo { public static void main(String[] args) { final JFrame frame = new JFrame(); frame.setPreferredSize(new Dimension(600 400)); final JToolBar toolBar = new JToolBar(); //Create the popup menu. final JPopupMenu popup = new JPopupMenu(); popup.add(new JMenuItem(new AbstractAction(""Option 1"") { public void actionPerformed(ActionEvent e) { JOptionPane.showMessageDialog(frame ""Option 1 selected""); } })); popup.add(new JMenuItem(new AbstractAction(""Option 2"") { public void actionPerformed(ActionEvent e) { JOptionPane.showMessageDialog(frame ""Option 2 selected""); } })); final JButton button = new JButton(""Options""); button.addMouseListener(new MouseAdapter() { public void mousePressed(MouseEvent e) { popup.show(e.getComponent() e.getX() e.getY()); } }); toolBar.add(button); frame.getContentPane().add(toolBar BorderLayout.NORTH); frame.pack(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLocationRelativeTo(null); frame.setVisible(true); } } What if you want to make this so that it has the arrow (down) image that you see in Microsoft. I have been doing something like this but without the JToolBar. Does your solution have the behavior where if you click the button again with the menu up it pops up the menu again instead of dismissing it? I also did something slightly differently: popup.show(c 0 c.getHeight()); Thank you. This is the easiest to understand solution that I've found so I'll use it although it's not exactly a Dropdown JButton.The other solutions are too complicated for me to understand. I've list some of them below. I'm not sure I understand you correctly but if you want to know how to make toolbars in Swing check this Java Tutorials: How to Use Tool Bars and this Java Tutorials: How to Use Actions  I don't see why this is harder than it needs to be or why you should use a MouseListener. The solution by Steve McLeod works but where the menu appears depends on where the mouse was clicked. Why not just use an ActionListener as normally used for a JButton. It seems neither harder nor less hard. final JPopupMenu menu = new JPopupMenu(); menu.add(...whatever...); final JButton button = new JButton(); button.setText(""My Menu""); button.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ev) { menu.show(button button.getBounds().x button.getBounds().y + button.getBounds().height); } }); This positions the menu about the same as a menu in a JMenuBar for me and the position is consistent. You could place it differently by modifying the x and y in menu.show(). The problem with approach is that the popup menu only appears when the user releases the mouse button. The menu should appear upon mouse down not mouse up You're right. I didn't notice. I still like it better than the other way but neither is completely satisfactory. I ended up not implementing what I was trying to do that way and so didn't use it anyway. I guess you could do what you did and use my version of menu.show with the button coordinates to avoid the position inconsistency. This is a far better answer and should get more votes. Looks better than having the mouse click location."
11,A,Tracking changes in a swing GUI Say an application properties page with lots of JCheckboxes JTextfields JLists and other JComponents. Now what I need to do is track the changes user makes and save them. What would be the correct way of implementing this? Two approaches you can use: (1) When the user clicks OK on your properties page pull the current values out of your JComponents and update your settings or whatnot. This is the easiest method as you don't need ActionListeners and if the user backs out you don't have to roll back changes (from your question it's not entirely clear what this dialog/page does though). (2) For swing objects that implement ActionListener listen for the ActionEvent and process the changes accordingly. For JTextFields use a DocumentListener as in the sample code below: import java.awt.BorderLayout; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JTextField; import javax.swing.event.DocumentEvent; import javax.swing.event.DocumentListener; public class Test implements DocumentListener { private JTextField jtf; public static void main(String[] args) { javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { Test test = new Test(); } }); } public Test() { JFrame jf = new JFrame(); JPanel jp = new JPanel(); jtf = new JTextField(); jtf.getDocument().addDocumentListener(this); jp.setLayout(new BorderLayout()); jp.add(jtf BorderLayout.CENTER); jf.add(jp); jf.setSize(200 100); jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); jf.setVisible(true); } public void changedUpdate(DocumentEvent e) { // Do stuff here } public void insertUpdate(DocumentEvent e) { // Do stuff here } public void removeUpdate(DocumentEvent e) { // Do stuff here } } As you might guess from (1) the challenge from (2) comes about if the user backs out and you have to think about how you're going to roll back any changes. It really depends on what you're doing though. A great answer thanks.  You don't need to track changes in real times (unless special needs). You can react on the OK button iterating on the components getting their value perhaps comparing with the old one or just saving all the values blindly. And of course abandon everything if the user cancels. Agree will keep it simple.  The main question i have is what changes/events you want to log. Clicks Text changes button States .... For every event you can add listeners to the swing components. One singleton class could be an implementor of the listeners you want to add to the different components. these singleton class you can add to the different components. When the component changes or notify a special listener the singleton manager is notified and can handle this event. The manager can log the events which are coming in and also save an EventObject which contains everything you want to store. A list of EventObjects you can store at the disk using xstream. I wouldn't use a singleton in this case... It's not necessary and limits your flexibility.  Observer Pattern should help with this. Basically it allows a component (The publisher) to notify other components (subscribers) of things basically it is an ActionListener (like Catchwa's Answer). Java Example of Observer Pattern from Google If you can check out chapter 2 of Head First Design Patterns or the Action Listener Tutorial I hope that helps a little bit I can't whip up an example at the moment but hopefully that will help get you started.  A Command class and a serializable ArrayList or LinkedList of Commands. Commands would be generated in the actionPerformed method(s). Yeah but just typing into a JTextfield won't generate ActionEvents. Isn't there an event handler for typing into text fields though? all you need is an abstract command class and subclasses like TypingCommand CheckboxCommand etc etc. At least that's that I'd do
12,A,Best Java/Swing browser component? What's the best cross platform Java Swing browser component at least able to play nicely in a swing interface (lightweight component ?) and able to run on MacOSX and Windows ? Things like : FlyingSaucer JDIC maybe others ? i belive this could help: http://djproject.sourceforge.net/ns/index.html I tried them all DJ is the best Well their webstart doesn't demo doesn't launch! Boo. isnt this windows only? It runs on Mac OS as well even on new Lion. I could not find a method to integrate it into netbeans so it seems useless.  We (@ WebRenderer) believe we have the best Java browser SDK - http://www.webrenderer.com/ WebRenderer is Swing based using Firefox as the underlying engine and supports HTML5 SVG etc on both 32 and 64bit systems. Welcome to Stack Overflow! Thanks for posting your answer! Please be sure to read the [FAQ on Self-Promotion](http://stackoverflow.com/faq#promotion) carefully. Thank you Andrew for your contribution. I checked the FAQ before posting my response and hence made sure to identify my association with WebRenderer. Whilst we are on this topic you may however wish to look at Vladimirs (of JXBrowser) posts (user #459345 and user#241010) above. Secondary I decided to post WebRenderer as it is not only relevant to the discussion but also for completeness. WebRenderer was previously posted on this Question as an answer back in 2009 by Lukasz (last name withheld) – http://goo.gl/8263M Lukasz Drukarz posted a link-only answer on July 1 09 and it was deleted because it was only a link. (as a 10k user I can see deleted posts). I saw Vladimir's post and would have left a comment for him as well but he has not been on the site for quite some time (over 2 years). This type of question and the answers that it generates are not generally preferred around here and this question has been protected and flagged for closure. This question is in fact quite problematic most'best to do this' question are since they (naturally) just attract links. The accepted answer to this question is in fact a link. Deleting self promotional answers on a question basically _asking_ for them is not going to help so I have closed this instead.  Highweight browser based http://code.google.com/p/jbrowser/. It use Canvas component. based on Mozilla 2.x  The Lobo Browser could be what you're looking for: http://lobobrowser.org/index.jsp It's GPL and renders JavaFX as well as HTML Edit JavaFX 2.0 comes with a Browser component: http://docs.oracle.com/javafx/2/webview/jfxpub-webview.htm Lobo is almost useless in that too many websites don't render right.  you can go for Mozswing which have all the features that mozilla firefox 3.0 supports .. but the same is heavy. Mozswing has been dead for quite a while and only supports 32 bit.
13,A,Java: Howto get the thumbnail from a file In windows explorer (and linux gnome) views for each file a thumbnail / icon. Like with EXEs images videos txt-files ini-files and so much other file types. Now is my question: Is there a way to get them by file. Something like: public static BufferedImage getThumbnail(File file) {...} Thanks If you are looking for a plattform-independent (i.e. pure java) solution hava a look at JavaThumbnailer. It's still beta though and has a limited number of supported file types.  Not entirely sure if you will be able to get the icon but take a look at AssociationService that is accessible using JDIC. http://java.sun.com/developer/technicalArticles/J2SE/Desktop/jdic%5Fassoc/ Also this thread http://forums.sun.com/thread.jspa?threadID=5357995 The sun thread doesn't exist any more.  I don't think the answers above are addressing the right question. Martjin isn't asking for the API for manipulating icon images. He wants to know how to get to the desktop's cache of thumbnail images for items in the browsable filesystem. I don't think there's a portable way to do this at all but the Linux world (Gnome and KDE) adhere to the Freedesktop thumbnail standard which can be read at: http://jens.triq.net/thumbnail-spec/ There may be code perhaps in Gtk (but probably not Java) that implements a compatibility layer for windows but I'm not aware of it if there is.  It looks like there is no AWT way of doing this. If you're using Swing there is a method you can use to get a Swing Icon... import javax.swing.filechooser.FileSystemView; import javax.swing.Icon; ... Icon ico = FileSystemView.getFileSystemView().getSystemIcon(file); You can also convert that Icon back into an Image (most likely a BufferedImage but I haven't tested it): Image image = ((ImageIcon) ico).getImage(); There is also a class to get the icon directly but this class is JDK dependent. On Sun JDK's it's the sun.awt.shell.ShellFolder class. If you're using SWT things are a bit trickier. This is what I want. Thanks maybe you know also a way for bigger icons? Yes is there a way to get bigger icons? I would like to use sun.awt.shell.ShellFolder.getIcon(true) but sun.awt.shell.ShellFolder has access restriction. :-(
14,A,"Digital or LCD-like display class? I remember seeing a tutorial on Sun's site that had a class for a digital-like display but I can no longer find it. How would you make numbers appear like a digital clock using Swing? Where do you want to display those numbers ? console/swing app/web app/sth else ? You mean something like this? Or possibly more old school? Have a look at the Harmonic Code Blog the guy writes has provides a library called the Steel Series which does these components and many more. This entry shows of some of his clock / round gauges components. However its best to see his components in action - he provides 2 webstart demos of his components Standard Steel Series (direct link to webstart app) Extra Steel Series (direct link to webstart app)  There is no such class in Java. That being said if you're in Swing you can adjust the Font settings for the text to a more digital look. On a website you'd do it with CSS etc.  I found this tutorial for constructing a 7 segment display component in Java. Unfortunately it's in German. Here's http://www.addison-wesley.de/Service/Krueger/kap23002.htm&ei=A_MOS7KuIpLesgah8qCnAw&sa=X&oi=translate&ct=result&resnum=9&ved=0CDUQ7gEwCA&prev=/search%3Fq%3Djava%2B%25227%2Bsegment%2522%2Bdisplay%2Bcomponent%26hl%3Den%26safe%3Doff%26sa%3DG"">Google's translation. Bah that link doesn't show up. Here it is again: http://translate.google.de/translate?hl=en&sl=de&u=http%3A//www.addison-wesley.de/Service/Krueger/kap23002.htm&ei=A%5FMOS7KuIpLesgah8qCnAw&sa=X&oi=translate&ct=result&resnum=9&ved=0CDUQ7gEwCA&prev=/search%3Fq%3Djava%2B%25227%2Bsegment%2522%2Bdisplay%2Bcomponent%26hl%3Den%26safe%3Doff%26sa%3DG Again? translation . ('m gonna bug this in meta)"
15,A,"Add JScrollPane to a panel that shows an image i have this little program for showing images on apanel.. but i'm not able to add a scroll to it.. and this is my code the class that extends jpanel to show the image: public class ShowPanel extends JPanel{ public ShowPanel(BufferedImage image int height int width) { this.image = image; this.height = height; this.width = width; //this.setBounds(width width width height); } public void paintComponent(Graphics g) { super.paintComponent(g); g.drawImage(image height width null); } public void setImage(BufferedImage image int height int width) { this.image = image; this.height = height; this.width = width; } private BufferedImage image; private int height; private int width; } and a sample of the main Frame that has another panel called imageContainer to hold the showing panel: public class MainFrame extends javax.swing.JFrame { /** Creates new form MainFrame */ public MainFrame() { initComponents(); image = null; path = ""PantherOnLadder.gif""; image = Actions.loadImage(path); showPanel = new ShowPanel(image 0 0); spY = toolBar.getY() + toolBar.getHeight(); showPanel.setBounds(0 spY image.getWidth() image.getHeight()); showPanel.repaint(); imageContainer.add(showPanel); JScrollPane scroller = new JScrollPane(imageContainer); scroller.setAutoscrolls(true); } so what's the mistake i did here ? Since the 'imagecontainer' is the class being added to your scrollable panel that is the panel which needs to exceed a certain size to make things scrollable. You should place the 'showPanel' directly into a scollable container. so is it right to make the code like this? JScrollPane scroller = new JScrollPane(showPanel); scroller.setPreferredSize(new Dimension(image.getWidth()image.getHeight() )); imageContainer.add(showPanel); but I'm still gettig nothing even the image isn't showing !!  The scrollbars appear automatically when the preferred size of the component added to the scrollpane exceeds the size of the scroll pane. Your custom panel doesn't have a preferred size so the scrollbars never appear. One solution is to just return a preferred size equal to the size of the image. Of course I never understand why people go to all the trouble to do this type of custom painting. There is no need for a custom class. Just create an ImageIcon from the BufferedImage and then add the Icon to a JLable and then add the label to the scrollpane and you won't have any of these problems. The only reason to do custom painting is if you need to scale the image or provide some other fancy effect. thanks.. well I will also do scalnig and ather things on the image but even the scaling can be handled just by overriding the ""paint"" method on the JLabel"
16,A,"javax.swing.grouplayout not exist in jdk 1.5 I developed a java application with netbeans. It used jdk 1.6. It works fine. But now the requirement is I need to build the jar for the application from the .java files in another machine without netbeans and where jdk 1.5 is used. I cannot upgrade that machine to jdk 1.6. Is there any way I could make my java files compile and work in jdk 1.5 machine with a possible minimal change to my source code.. The error is javax.swing.grouplayout not available in jdk 1.5 Please help... For NetBeans see the answer by John Doe. For Eclipse with MyEclipse so you can use Matisse in the Outline View select the Form. Now in the Properties View look at ""Layout Generation Style"" and select ""Swing Layout Extensions Library"" rather than ""Standard Java 6 Code.""  Use the netbeans preferences and select org.jdesktop.... update manually the generated code by right-click in the form (Inspector Window -> select swing layout extensions instead of standard java6 code).  This test specification has the info that you need though it lacks screen shots. Pay special attention to 'steps' 7 and 8."
17,A,"Java newbie: Swing and displaying ASCII files G'day all I have an application which needs to display an ASCII file of 15 lines in a Swing component that cannot be edited by the user. Below is my code which reads the ASCII file byte by byte. My thanks to the helpful commenters who explained that a JTextArea.setEditable(false) would be appropriate in Swing. However my code merely displays a string of numbers when I personally made the ASCII file to be something quite different. Does anyone know what I am doing wrong and how to get the ASCII characters themselves to display? import java.io.*; import javax.swing.*; public class LoadMap extends JFrame { public LoadMap() throws IOException { FileInputStream fIn = new FileInputStream(""map.srn""); BufferedReader rd = new BufferedReader(new InputStreamReader(fIn ""US-ASCII"")); String map = """"; JTextArea mapArea = new JTextArea(15 50); try { int c; while ((c = rd.read()) != -1) { map= map + c; } } finally { if (rd != null) { rd.close(); } } mapArea.setText(map); mapArea.setEditable(false); add(mapArea); pack(); setVisible(true); } } Here: String map = """"; int c; while ((c = rd.read()) != -1) { map= map + c; } What you're doing it appending int's to the string. You should cast them to char instead. int c; while ((c = rd.read()) != -1) { map= map + ( char ) c; } You can see much better patterns in these questions. http://stackoverflow.com/questions/326390/how-to-create-a-java-string-from-the-contents-of-a-file http://stackoverflow.com/questions/181634/simplest-efficient-ways-to-read-binary-and-ascii-files-to-string-or-similar-in-v/324792#324792 ( see java part )  A JLabel will not display line breaks (unless you use HTML). So as the others wrote use a text area. However there's another hidden problem with your code: you don't specify the file's encoding which means the file contents may be garbled if it contains non-ASCII characters and its encoding does not match Java's platform default. To fix this do not use FileReader. Instead use a FileInputStream and wrap it in an InputStreamReader specifying the encoding in its constructor. Thanks Michael that's useful to know.  This makes me feel like Captain Obvious but still: just load the entire text first and then build the label using the desired text. Or as other posters rightly suggest use a JTextArea since its more well-suited for multiline content.  You could construct a String inside the loop and then put the string into JLabel when you've finished.  You could use a JTextArea and set it to read only: jtextarea.setEditable(false);  Use a JTextArea and call setEditable(false). http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/text/JTextComponent.html#setEditable(boolean) Thank you very much. I appreciate MrWiggles was first but you were a close second!  Use a JTextArea and call setEditable(false); to stop the user being able to edit the data I've just read your code through and realise that's not a comprehensive enough answer. You can't do ""+"" on a label. What you need to do is read the text in first and store it somewhere then call setText(yourTextAsString); on your text component on screen (for which I'd still use the JTextArea) and you need to add the text area to the frame so your code would look something like: public LoadMap() { String data = // read your data JTextArea textArea = new JTextArea(); textArea.setText(data); textArea.setEditable(false); setLayout(new GridLayout()); add(textArea); pack(); setVisible(true); } I would suggest reading the Swing tutorial to get some more info on using Swing components Thank you very much. You beat me by 10 seconds with practically the same wording!"
18,A,"Implementing a log viewer GUI with C# (or java) I'm writing a software component that displays on-the-fly the content of a certain log file. Think of boosted-up tail -f. It should be a part of a bigger GUI. I was wondering which GUI componenet should I choose to implement the scrollable textarea which should display the log file output. Three my main requirements are: Search - let the user find words in the log output. I'll emphasize that search cannot be implemented by filter. I want to jump to the a cell containing foo in the log file without hiding its neighbors which do not contain foo unlike filtering. Copy - it should enable to select and copy lines easily (That's why I ruled out DataGrid based solutions). Filter - it should enable me to hide certain lines easily. Colors - it'd be nice to have the ability to use certain colors sometimes (based on filters) It would also be nice if the component would obey the MVC pattern. Of course it is possible to implement all of those with regular read-only textarea but I was wonderring if there's something easier. The only unusual feature here is to filter after all searchable text area seems to me like a common requirement. Java GUI solutions might also be accepted (it could be used for a java app as well). BareTail is similar to what I'm looking for but unfortunately it's not availible as a component. I'd suggest a simple grid in .NET or Java see above comment to @noselasd  Key concepts for creating such GUI: GlazedLists is your friend So is JTable If your log format is fixed/xml its even easier. Do you want something like this. Its not entirely open source but I am at liberty to share some of its properties. I think GlazedLists is missing the Search feature also I'm not sure it enables copy & paste easily but it looks nice. Thanks. Search is just locate select and jump to that line.  I've implemented something similar using a JFace TableViewer. This article should give you a decent starting point.  To enable precise filtering I think you should reconsider structuring the lines into ""columns"" at least under the hood. For an intuitive UI showing these columns seems right to me too. For the coloring this should not make a difference. Copying rows from grids should be easy to achieve as soon as you have some multi-row-selection available transforming records back to ""raw"" text-lines in some ToString-method should be much easier than the other way around. Therefore I think you should really go with some grid-approach. If it shall be Xceed infragistics other vendors or the built-in .NET-datagrid... that's a different question.  Just use a RichTextBox in .NET/C# It's just a text viewer component you decide what thext you put in there you can color lines according to the rtf format it supports copy/paste(like notepad does) you can easily hook into the selection code if you need to only select whole lines in a click or hook into the copy pasting if you need to. I'll be glad if you'll specify how do you achieve my requirements with those. Copying from a grid doesn't seem trivial to me.  This is a good WPF starter project I have it does highlighting on the fly log file loading and basic search. In the past I found that maintaining a full text index just for log file searching is too expensive. http://code.google.com/p/videobrowser/source/browse/#svn/trunk/LogViewer To display the log messages I use a WPF listview which is completely virtual and supports all of your requirements. 1) Searching through the whole text is OK as well it'd only be a few Megabytes. 2) I'll have a look at it. Does it supports filtering and searching and copying out of the box? Or do I have to implement some (ie hook Ctrl+F to a search box and have it search in the list hook Ctrl+C and inspect the selection for copying) Thanks  ObjectListView (an open source wrapper around .NET WinForms ListView) does prefix searching and copying out of the box (plus lots of other neat things). You can easily use a RowFormatter to give specific rows colors. If you use the virtual list version you can implement filtering without difficulty too. I've used it to apply filtering to lists of 100000+ items and the performance is fine (on my mid-range laptop). Full text searching would have to be implemented specifically. There are hooks for search-by-typing events. All this is assuming you have some sort of reasonable LogEntry type model object to display. If you only have a series of lines of text then you are on your own :)  The Eclipse UI Framework contains such a console that you can improve with Text search syntax highlighting and the such. However I think the minimum RCP plugins that you need would be too much for your needs. However if you are already Eclipse based it would be a good solution."
19,A,ActionListener on JLabel or JTable cell I have a JTable with JLabel[][] as data. Now I want to detect a double click on either the JLabel or a table cell (but only in one of the columns). How can I add an Action/MouseListener on JLabel respectively table cell? JLabels haven´t ActionListeners but has MouseListener add them and listen on mouseClick How about: table.addMouseListener(new MouseAdapter() { public void mouseClicked(MouseEvent e) { if (e.getClickCount() == 2) { JTable target = (JTable)e.getSource(); int row = target.getSelectedRow(); int column = target.getSelectedColumn(); // do some action if appropriate column } } }); if i have that Jlabel inside Table cell then how will i call that click event on click? That does it for me. Thanks!  Basically the same suggestion as the one already accepted except: a) you should handle mousePressed not mouseClicked. A mouseClicked event is only fired when a mousePressed and mouseReleased event is generated at the same pixel location. You if the user moves the mouse even 1 pixel while double clicking you will not get the expected double click. b) Also you may want to consider using the columnAtPoint() and rowAtPoint() methods to get the clicked cell. Although it probably doesn't make a difference in this case it will matter if you ever try to use a MouseListener for right mouse clicks since the selection isn't changed. So if you get in the habit of using this method you won't have problems in the future.
20,A,"How can I create a Java Swing app that covers the Windows Title bar? I'm working on a java swing application that will be used in a psychology experiment and the researchers have requested that I make the program ""black out the screen"" in order that there should be no outside stimuli for the user. They want the swing app to be truly full-screen and without any type of title bar or minimize/maximize/close buttons on the top. The software will be running in a Windows XP environment using JavaSE 6. How can I do this and please provide a code snippet if applicable. Thanks! Use the setUndecorated(true) property. Note that this has to be done before making the frame visible. JFrame frame = new JFrame(); Toolkit tk = Toolkit.getDefaultToolkit(); frame.setBounds(new Rectangle(new Point(0 0) tk.getScreenSize())); frame.setUndecorated(true); frame.setVisible(true);  Use the Full Screen Java APIs? http://java.sun.com/docs/books/tutorial/extra/fullscreen/exclusivemode.html http://www.artificis.hu/2006/03/16/java-awtswing-fullscreen JFrame fr = new JFrame(); fr.setResizable(false); if (!fr.isDisplayable()) { // Can only do this when the frame is not visible fr.setUndecorated(true); } GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice(); try { if (gd.isFullScreenSupported()) { gd.setFullScreenWindow(fr); } else { // Can't run fullscreen need to bodge around it (setSize to screen size etc) } fr.setVisible(true); // Your business logic here } finally { gd.setFullScreenWindow(null); } Can you explain (concisely) how these APIs are used instead of just posting links? I'll obviously read the links but still... Full-screen mode uses a different paradigm from normal Swing applications. It's intended for things like games or screen savers. As the link says ""Most full-screen exclusive applications are better suited to use undecorated windows."" It's an option but will require you to write more code yourself. That's a mash up of both links untested. Helps? erickson - the user requirement: make the program ""black out the screen"" in order that there should be no outside stimuli for the user Unfortunately I don't know this particular API well enough to give you a code sample but if I were you I'd definitely invest the effort to learn it. It sounds like exactly the right solution for your problem. JeeBee that's a simple requirement easily met by undecorating the frame. erickson - How much extra code are we talking about here using this API? Are you saying that I wouldn't be able to use the standard Swing containers and dialog boxes because those are absolutely imperative to the application? @Yoely you can use normal Swing containers. I'm not sure about dialogs and other top-level frames. If you aren't writing low-level painting for some of your own components then you aren't taking advantage of full-screen mode. Try it and see what breaks or just use the simple reliable approach. You can use JInternalFrames. http://java.sun.com/docs/books/tutorial/uiswing/components/internalframe.html  I know this thread is old but I found it while searching on how to do the same thing myself. I couldn't find any solutions I wanted to use so I came up with this. I found that the below solution not only works but is also much simpler than the above answers. JFrame frame = new JFrame(); frame.setResizable(false); frame.setUndecorated(true); Dimension dim = Toolkit.getDefaultToolkit().getScreenSize(); frame.setSize(dim); frame.setVisible(true);"
21,A,Add text and icon (with MouseListener) to JTable column I want to implement following functionality but I am confused if it's possible in Java. If yes than how? Please help: I want to create a JTable kind of table where 1st row of table contains column names and an icon in each column i.e. in each cell of 1st row. Clicking on that icon should lead to removal of that column from table (possible using MouseListener??). I have found many solution where I can add button to a cell in JTable but none which describes adding both text and icon (with MouseListener) to a cell. Please see if you can help and thanks a lot for reading. You might find this helpful: http://www.exampledepot.com/egs/javax.swing.table/pkg.html You can create a custom TableCellRenderer that extends JLabel. This JLabel can be created with an icon (JLabel can display icons to the right or left of the text). You will want the getTableCellRendererComponent to test wether the row being rendered is the first or not and if so set the icon otherwise do not. For the removal action you can add a MouseListener on the table and when processing the mouseClicked method you can find the cell that was clicked in by testing the rowAtPoint and columnAtPoint by creating a Point from the mouseEvent.getX() and mouseEvent.getY(). If you determine the first row with the icon was clicked you can remove the column from the column model. If by 1st row you actually mean the table header you can create the same renderer for the JTableHeader and set the MouseListener on that component.  Well I don't understand your question. I want to create a JTable kind of table where 1st row of table contains column names and an icon Do you mean the Table Header like the way sorting works by displaying the column name and the sort direction? If so then you use a custom renderer for the table header and add a MouseListener to the header to determine which column was clicked. You should be able to customize the Default Table Header Renderer to do what you want. Or do you mean the first row of data in the table. If so then you still need to use a custom renderer but this time you add the MouseListener to the table not the table header. In both cases you can use the TableColumnModel.removeColumn() method to remove the column from the view of the table.
22,A,"How can I have a download file option in JAVA Swing? I am new to Swing and wish to implement the download file feature in my Swing code that would allow the user to either save or open the specific file. I did have a look at JFileChooser.showOpenDialog and showSaveDialog but I don't wish to use it as it gives me the option to choose any file from the file system. Hope my problem is clear. Please help me with this. You want to use them and add a filter. For Example:  JFileChooser chooser = new JFileChooser(); // Note: source for ExampleFileFilter can be found in FileChooserDemo // under the demo/jfc directory in the Java 2 SDK Standard Edition. ExampleFileFilter filter = new ExampleFileFilter(); filter.addExtension(""jpg""); filter.setDescription(""JPG & GIF Images""); chooser.setFileFilter(filter); int returnVal = chooser.showSaveDialog(parent); if(returnVal == JFileChooser.APPROVE_OPTION) { System.out.println(""You chose to open this file: "" + chooser.getSelectedFile().getName()); } This will only show JPG and GIF files. Example stolen from here Edit: Just so you know ExampleFileFilter implements the abstact class FileFilter Edit: Since you know the name of the file you could just have a button that says open and use Runtime.getRuntime.exec('the file to be opened.doc"") and that should open it in the appropriate application. For saving you will still want to prompt them to find out where they want to save it so you would still need the JFileChooser. I would still use a filter and determine what the file extension will be dynamically if necessary and then do:  JFileChooser chooser = new JFileChooser(); // Note: source for ExampleFileFilter can be found in FileChooserDemo // under the demo/jfc directory in the Java 2 SDK Standard Edition. String selectedFile = ""The suggested save name.""; chooser.setSelectedFile(selectedFile); ExampleFileFilter filter = new ExampleFileFilter(); String extension = ""Do something to find your extension""; filter.addExtension(extension); filter.setDescription(""JPG & GIF Images""); chooser.setFileFilter(filter); int returnVal = chooser.showSaveDialog(parent); if(returnVal == JFileChooser.APPROVE_OPTION) { System.out.println(""You chose to open this file: "" + chooser.getSelectedFile().getName()); //then write your code to write to disk } Hope that helps. Hey I dont want to put restrictions for openign a file but want to have a dialog box that would allow the user to either open or save a particular file say a report that is generated by my system.Hope it is much clear now. Are you saying that you want to be able to prompt them to open a specific file that you already know the name of? yes u r absolutly rit..wat i want is if we have an atatchment on gmail the way it prompts download and then shows either save or open. Hey Thanks.. not tried it out.. but i think this shud work fine for me :)  You can add filter to file chooser. It's easy to implement your own which will accept only the files that you allow. After choosing file you need to implement saving / reading of file by yourself. There is no such thing as download/upload in desktop applications. as far as i understand a filter wud just help me to restrict some file types. what i want is a dialog that wud allow the user to either savor open a particular file generated by my tool say a report or smthing. Thnaks Marko.. now i have an idea how its to be done.. thanks a lot for ur inputs :) An upvote is as good as thanks :)"
23,A,"Swing components and serialization Why does Swing JComponent class implement the interface Serializable? The way I've implemented my views they are stateless all the state data is stored in a Presentation Model. So I don't need to serialize my views. I've used a @SuppressWarnings(""serial"") annotation to remove the warnings. Are there better ways to remove them? *Way* too many parts of the Java API implement Serializable. Personally unless I was actually writing code that made use of serialization I'd just turn off serialization warnings in my build/IDE. Why does Swing JComponent class implement the interface Serializable? Although this allows you to serialize classes and send them to and from the client and the server this does not seem to be an intuitive scenario. There is a better chance still slim that someone might want to serialize components to a file. This will allow for that sort of serialization. Are there better ways to remove [the warnings]? You could instantiate the serialVersionUID but if you do so you will need to maintain it when you class changes. This seems like overkill. Another option as Laurence Gonsalves points out in his comment is to suppress the warnings altogether in the Preferences->Java->Compiler->Errors/Warnings->Potential Programming Problems field.  In the beginning GUI builders were going to save the UI in serialised format. The applet tag even has an attribute to load from serialised form (I don't know anyone else who has used that and I've only used it to be malicious). Unfortunately using the serialisation mechanism for GUIs doesn't really work. Swing only guarantees compatibility in within the same major release (and I'm guessing even that has few tests)."
24,A,"Really quick and dirty solution for embedding webkit in a Swing UI? I am looking for a really quick and dirty solution for embedding webkit in a Swing application. What I am looking for is a way to implement a panel that contains a webkit browser running some JavaScript that will be able to do one or more of the following: Call a Java function of the containing application Send JSON objects to the containing application I would also like to have access to the DOM from my Java code. Does ""Get JDK7 from near future"" count as quick'n'dirty? :) @Esko `from __future__ impor...` oh wait nevermind. @Carson et. al: Just to update seems like WebKit won't be embedded in JDK7 so better tune that timemachine to jump a bit further. JWebPane is allegedly going to do this for you but it's vaporware for the time being. Your best bet might be to take a look at the WebKit component in Qt Jambi and use the Swing bridge to stick it in a Swing app."
25,A,"How to animate showing of JPopupMenu? I'd like to show increasingly more of a JPopupMenu so it appears to ""slide out"". It's not for menu items where animation doesn't make too much sense. Instead it's for a panel with some real components (oh yeah you can add any JComponent to JPopupMenu). JPopupMenu has many private fields and methods which makes it hard to extend. Plus I'm not familiar with Swing animation to begin with. Thanks a lot for your help! what have you tried so far? I tried to set JPopupMenu's height in a timer but the popup isn't displayed correctly. broschb's answer gave me the idea to set the height of the JPanel I put into the popup which works. I just did this within the last few weeks. I went a slightly different approach and Grabbed the layeredPane and then added a Custom JPanel to the layered pane. In the jpanel i overrode the getHeight method and had the height start at 0. I could then add whatever components I wanted to my jpanel. In the jpanel I had a method to start animation this started a timer and in the timer all I did was increase the height of my jpanel to a max size. That's it. It works really well in my application I have it tied to expand below a Jbutton on press and collapse on another press. One more thing you'll want to add a mouseAdapther to the jpanel so events don't go through the components below the layer. Thanks! I still want to put the JPanel into JPopupMenu so Swing handles the popup correctly. So I take your idea to set JPanel's height and it works."
26,A,"setting a prototype value (for auto-width calculation) of a JTable column either this doesn't exist or I'm not thinking/searching correctly because it's late... I want to set a JTable column width in Swing based on a prototype value for the largest string I expect (or know) to exist in a particular column. I don't know the # of pixels since I don't necessarily know the font at compile time. Is there a way to set a prototype value for column width purposes the way there is for row height purposes? If so how? Instead of creating a Label get the actual component from the TableCellRenderer and test the size on that: // create the component that will be used to render the cell Comp prototype = table.getDefaultRenderer(model.getColumnClass(i)).getTableCellRendererComponent(table ""Not Applicable"" false false 0 i); // get the labels preferred sizes int preferredWidth = comp.getPreferredSize().getWidth(); int preferredHeight = comp.getPreferredSize().getHeight(); This is a single column example you'll need to repeat this to get the size for each column (and also set it). See http://www.exampledepot.com/egs/javax.swing.table/PackCol.html for an example of this. ??? And how does this reflect the width/height of a particular maximum-length string? I want my column that can contain ""$222.22"" to be a smaller width than the one that can contain ""Miscellaneous grocery purchases"". This is a single column example you'll need to repeat this to get the size for each column (and also set it). See http://www.exampledepot.com/egs/javax.swing.table/PackCol.html for an example of this. The JLabel answer will have the same problem because you are setting every column to the same preferred width.  If you don't know the font at compile time then the width of any JTable column is always going to be unknown. As a sanity check open a text document and play with different fonts whilst keeping the point size constant. The length of what is written varies on a font-by-font basis but the height doesn't. The height of a JTable row should be able to be determined for any font size (in points) as it is a defined standard. It might take a bit of experimenting though given that JTable probably gives a bit of spacing inbetween cells. If you can't guarantee neither the font size nor the font itself at compile time then I'm interested in what answers other people come up with :) ""the width of any JTable column is always going to be unknown."" ??? I have some example text e.g. ""Not Applicable"" that I want to use as the maximum column width. Surely at runtime when the font is known it is possible to determine column width from that?  Have you tried creating a JLabel at run time and using its size to resize your table? // create a label that will be using the run-time font JLabel prototypeLabel = new JLabel(""Not Applicable"") // get the labels preferred sizes int preferredWidth = prototypeLabel.getPreferredSize().getWidth(); int preferredHeight = prototypeLabel.getPreferredSize().getHeight(); // set the sizes of the table's row and columns myTable.setRowHeight(preferredHeight); for(TableColumn column : myTable.getColumnModel.getColumns()){ column.setPreferredWidth(preferredWidth); } -1 not a good idea to use an arbritrary component for measuring the size. Instead use the rendering component as provided by the table It would probably depend on whatever font your TableCellRenderer was using. If you had access to the renderer(s) and they were JLabel's as well you could create your prototype label using the same font with something like: JLabel prototypeLabel = new JLabel(""Not Applicable""); prototypeLabel.setFont(cellRenderer.getFont()) oh that's clever. Is there any way I can be sure the JLabel and the table column entries use the same font?  You can try the following code: /** * Sets the preferred width of the columns of a table from prototypes * @param table the target table * @param prototypes an array of prototypes {@code null} values will be ignored * @param setMaxWidth {@code true} if the maximum column width should also be set */ public static void setWidthFromPrototype(JTable table Object[] prototypes boolean setMaxWidth) { if (prototypes.length != table.getColumnCount()) throw new IllegalArgumentException(""The prototypes array should contain exactly one element per table column""); for (int i = 0; i < prototypes.length; i++) { if (prototypes[i] != null) { Component proto = table.getCellRenderer(0i) .getTableCellRendererComponent(table prototypes[i] false false 0 i); int prefWidth = (int) proto.getPreferredSize().getWidth() + 1; table.getColumnModel().getColumn(i).setPreferredWidth(prefWidth); if (setMaxWidth) table.getColumnModel().getColumn(i).setMaxWidth(prefWidth); } } } to use it just call setWidthFromPrototype(myTable new Object[]{""Not Applicable""}); upvoted for measuring the component provided by the renderer - just getting the renderer is wrong: you have to ask the table for it (table.getRenderer(row column)) otherwise you'll miss per-column renderers - please edit for perfection :-) And no you are wrong in thinking _getDefaultRenderer is safer_: it's up to the table to decide which renderer to use which happens in getCellRenderer (indeed you found the correct method name :-) The last part of your comment doesn't make much sense though: the renderer lookup mechanism doesn't care about what how your data is stored in the model ... thanks for the suggestions @kleopatra but I don't see the `JTable.getRenderer(intint)` method. In all cases I think `getDefaultRenderer` is safer as it returns the renderer associated with a type which can be useful if you don't want to create a full instance of the object and for instance just pass its string representation. ok I think you meant `JTable.getCellRenderer(intint)` :) Allow me to clarify: suppose you have a class Student that store a name id full history of grades. You may define a custom renderer that will render an instance of Student in the form ""Name Surname GPA"". If you are just interested in setting the column width you may not want (or be able to) create a full instance of Student but just pass ""John Doe 4.5"" as a prototype in which case using the rendered provided by `JTable.getCellRenderer(intint)` will likely cause a casting exception. only if the renderer is crappily implemented - fix it ;-) ok I see your point I updated the code (and fixed my renderer ^^)  SwingX extended JXTable/Column support setting prototypes for initial column width sizing you can do so either after the columns have been created for(int col = 0; ....) { table.getColumnExt(col).setPrototypeValue(myPrototype[col] } or by implementing a custom ColumnFactory which configures the columns on creation ColumnFactory factory = new ColumnFactory() { @Override protected void configureTableColumn(TableModel model TableColumnExt columnExt) { super(...); columnExt.setPrototypeValue(myPrototype[columnExt.getModelIndex()]; } } table.setColumnFactory(factory); table.setModel(myModel);"
27,A,"Finding the restore bounds of a JFrame when it is in a maximized state When a JFrame is in a maximized state the getBounds method returns bounds that match its current state. What I need is the ""restore bounds"" (that is the size/location of what the window would be set to if a user clicked on ""Restore Down"" on a Windows platform) without actually setting it to a non-maximized state. The reason I ask is because I wish to save the bounds as a preference and then when the user reopens the application set the window to the saved bounds (and then maximize it if that is what the last state was). I considered adding a listener for when a window is maximized but it seems to me that the listener is notified after its maximized and I'll need to be notified right before it is maximized. I store the extendedState window location and frame size in the user preferences in my application. Adding a ComponentListener is the way to go. You will have to listen to the componentMoved componentResized and componentShown methods. When the value returned from frame.getExtendedState() == JFrame.NORMAL store the Rectangle from frame.getBounds() as your non-maximized value. If getExtendedState() returns JFrame.MAXIMIZED_BOTH then don't store the current bounds but do store the fact that it is extended. As long as you only store the value from the last JFrame.NORMAL extended state you will be good. Why is componentShown method needed? @this is a dead end Honestly I don't remember. I copied this from how I had it implemented in my code and don't have that code with me. Just from reading it now it appears the componentShown method can be ignored as *moved* and *resized* should cover all situations. Yeah I noticed because I was trying to do the same thing as you. Thanks for the answer.  I considered adding a listener for when a window is maximized but it seems to me that the listener is notified after its maximized and I'll need to be notified right before it is maximized. That should work. Add a listener to handle component resized. When the event is fired before updating the saved bounds you check to make sure that the window is not in its maximized state."
28,A,How can jFrames be used inside of JavaFX? I just saw a article on Swing being used in JavaFX. How can an application that uses a jFrame to display graphics be ported into JavaFX? Also will the jButtons and jSliders work in the normal manner? I know this is a generic question but I know little of JavaFX and am curious about porting some desktop applications to the web via the JavaFX package. javafx file: import javax.swing.JComponent; import javafx.ext.swing.SwingComponent; class NewFxComponent extends SwingComponent { var comp: JComponent; public override function createJComponent():JComponent { return new OldJComponent(); } }
29,A,"Swing: How can I prevent flickering and ""vibrating"" of a component when restricting its movement? I need to restrict movement of a component (JInternalFrame) inside a JPanel. More exact: a component should only move along one axis when dragged by the user. I tried to do it by adding a component listener and reset the position of one axis everytime the component moves. But it ""vibrates"" (moves rapidly during dragging). I even wrote a custom layout manager it didn't help a little! I guess the problem is: Both the layout manager and the listener handle the movement-event after the component is actually moved right? Any suggestions? Should (can I) intercept some event and modify it before it's delivered? you might want to subclass your InternalFrameUI. I see in BasicInteralFrameUI.BorderListener.mouseDragged(event)(line 885 in version 1.129) a call to getDesktopManager().dragFrame(frame newX newY); You could extend BasicInternalFrameUI to return a custom DesktopManager (extension of DefaultDesktopManager) where in dragFrame() you test the identity of your frame and adjust the axis. edit: thinking about it you are right - it is too complex. as the UI for the internal frame defers to the DesktopManager of the JDesktopPane you can set it there. here is a poc: public Demo() { JFrame frame = new JFrame(); frame.setSize(300300); JDesktopPane df = new JDesktopPane(); DesktopManager dm = df.getDesktopManager(); df.setDesktopManager(new DefaultDesktopManager(){ public void dragFrame(JComponent f int newX int newY) { super.dragFrame(f newX 5); } }); JInternalFrame jif = new JInternalFrame(""test ""); jif.setLocation(5 5); jif.setSize(150100); jif.setVisible(true); df.add(jif); frame.setContentPane(df); frame.setVisible(true); } Works perfectly !!!  There is no ""event"" you need to intercept. Once Swing processes the mouse event it tells the component to move - and that's where you can tweak the movement values. move setLocation and resize are all just wrappers to setBounds. Extend JInternalFrame override the setBounds() method and ignore the new value of x (or y if you want horizontal movement) before calling super.setBounds(). import javax.swing.JInternalFrame; public class VerticalOnlyFrame extends JInternalFrame { public void setBounds(int x int y int width int height) { super.setBounds(getBounds().x y width height); } } That should solve your example although looking at the JRE code setBounds() is actually a wrapper to the deprecated reshape() method so if you're feeling brave override reshape() instead. Thank you. This sounds good. The reason I was thinking about intercepting events is the ability to do the intended alignment for any component. Unfortunately events are for notification so a component move event is only fired after the component has moved and repainted. To avoid jitter you need to do your work before the event. The only alternative is some kind of mouseDragged listener as akf suggested :)"
30,A,"Swing application framework for multilanguage application Can the swing application framework be used to implement multilanguage swing applications? If so how should it be done? Should I use multiple .properties files one for each language? How can I let the system know which properties file to use then? Does anybody know a good tutorial for this? Just to clarify is this a question about JSR-296 ""Swing Application Framework"" or just about programming in plain-old vanilla Swing? I have assumed it's about JSR-296 in my answer below. JSR-296 indeed... take a look to the ResourceBundle class and this tutorial. NB: this class is not tied to Swing you can use it in console or web applications)  Short answer: yes it can and yes you should. Here's a short bit of user-friendly blurb on it: http://chaoticjava.com/posts/the-quiet-revolution-part-i-jsr-296/ However a word of warning: According to the web-site for the JSR http://jcp.org/en/jsr/detail?id=296 It is currently inactive.  Original project is dead now but you can use a fork of it. The most active one is BSAF.  You can put the following in your base panel class (or anywhere else and plug it in): public ResourceMap getResourceMap() { if (resourceMap == null) { ApplicationContext context = getContext(); if (context != null) { resourceMap = context.getResourceMap(getResourceStartClass() getResourceStopClass()); } } return resourceMap; } public ApplicationContext getContext() { if (applicationContext == null) { Application app = getApplication(); if (app != null) { applicationContext = app.getContext(); } } return applicationContext; } public Application getApplication() { if (application == null) { application = Application.getInstance(); } return application; } Thanks for this. This works for me together with having the correct name for the properties files... Although it looks a bit weird you apply the singleton pattern in your getApplication() method. This looks like overhead to me. Why don't you just call 'Application.getInstance()' here? it's some kind of lazy loading. I got this from an old codebase so if Application.getInstance() is itself lazy you can omit that method."
31,A,"How to Set the Background Color of a JButton on the Mac OS Normally with Java Swing you can set the background color of a button with: myJButton.setBackground(Color.RED); which would cause the button to be red. But on the Mac OS this method seems to be ignored. The button just stays the default color. How can the color of a JButton be set on the Mac OS? you are probably going to have to do it C somehow and access the functionally through JNI. I hate macs. ""Just because your unique doesn't mean your useful."" Have you tried setting JButton.setOpaque(true)? JButton button = new JButton(""test""); button.setBackground(Color.RED); button.setOpaque(true); Seems that you need to add a setBorderPainted(false) command in order to get the button to opaque(Java 6 on Mavericks). Thanks. I completely missed the setOpaque() call.  If you are not required to use Apple's look and feel a simple fix is to put the following code in your application or applet before you add any GUI components to your JFrame or JApplet:  try { UIManager.setLookAndFeel( UIManager.getCrossPlatformLookAndFeelClassName() ); } catch (Exception e) { e.printStackTrace(); } That will set the look and feel to the cross-platform look and feel and the setBackground() method will then work to change a JButton's background color.  Have you tried setting the painted border false? JButton button = new JButton(); button.setBackground(Color.red); button.setOpaque(true); button.setBorderPainted(false); It works on my mac :)"
32,A,"Why does windows XP minimize my swing full screen window on my second screen? In the application I'm developping (in Java/swing) I have to show a full screen window on the second screen of the user. I did this using a code similar to the one you'll find below... Be as soon as I click in a window opened by windows explorer or as soon as I open windows explorer (i'm using windows XP) the full screen window is minimized... Do you know any way or workaround to fix this problem or is there something important I did not understand with full screen windows? Thanks for the help import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JWindow; import java.awt.BorderLayout; import java.awt.Dimension; import java.awt.GraphicsDevice; import java.awt.GraphicsEnvironment; import java.awt.Window; import javax.swing.JButton; import javax.swing.JToggleButton; import java.awt.Rectangle; import java.awt.GridBagLayout; import javax.swing.JLabel; public class FullScreenTest { private JFrame jFrame = null; // @jve:decl-index=0:visual-constraint=""9435"" private JPanel jContentPane = null; private JToggleButton jToggleButton = null; private JPanel jFSPanel = null; // @jve:decl-index=0:visual-constraint=""39237"" private JLabel jLabel = null; private Window window; /** * This method initializes jFrame * * @return javax.swing.JFrame */ private JFrame getJFrame() { if (jFrame == null) { jFrame = new JFrame(); jFrame.setSize(new Dimension(474 105)); jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); jFrame.setContentPane(getJContentPane()); } return jFrame; } /** * This method initializes jContentPane * * @return javax.swing.JPanel */ private JPanel getJContentPane() { if (jContentPane == null) { jContentPane = new JPanel(); jContentPane.setLayout(null); jContentPane.add(getJToggleButton() null); } return jContentPane; } /** * This method initializes jToggleButton * * @return javax.swing.JToggleButton */ private JToggleButton getJToggleButton() { if (jToggleButton == null) { jToggleButton = new JToggleButton(); jToggleButton.setBounds(new Rectangle(50 23 360 28)); jToggleButton.setText(""Show Full Screen Window on 2nd screen""); jToggleButton.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent e) { showFullScreenWindow(jToggleButton.isSelected()); } }); } return jToggleButton; } protected void showFullScreenWindow(boolean b) { if(window==null){ window = initFullScreenWindow(); } window.setVisible(b); } private Window initFullScreenWindow() { GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] gds = ge.getScreenDevices(); GraphicsDevice gd = gds[1]; JWindow window = new JWindow(gd.getDefaultConfiguration()); window.setContentPane(getJFSPanel()); gd.setFullScreenWindow(window); return window; } /** * This method initializes jFSPanel * * @return javax.swing.JPanel */ private JPanel getJFSPanel() { if (jFSPanel == null) { jLabel = new JLabel(); jLabel.setBounds(new Rectangle(18 19 500 66)); jLabel.setText(""Hello ! Now juste open windows explorer and see what happens...""); jFSPanel = new JPanel(); jFSPanel.setLayout(null); jFSPanel.setSize(new Dimension(500 107)); jFSPanel.add(jLabel null); } return jFSPanel; } /** * @param args */ public static void main(String[] args) { FullScreenTest me = new FullScreenTest(); me.getJFrame().setVisible(true); } } Usually when an application is in ""full screen"" mode it will take over the entire desktop. For a user to get to another window they would have to alt-tab to it. At that point windows would minimize the full screen app so that the other application could come to the front. This sounds like it may be a bug (undocumented feature...) in windows. It should probably not be doing this for a dual screen setup. One option to fix this is rather than setting it to be ""full screen"" just make the window the same size as the screen with location (00). You can get screen information from the GraphicsConfigurations on the GraphicsDevice. Making the window the same size as the screen was my emergency option. I'll try it and will report the result... But I'm curious to know if the behavior of Windows with fullscreen apps is documùented somewhere.  The following code works (thank you John). With no full screen and a large ""always on top"" window. But I still don't know why windows caused this stranged behavior... private Window initFullScreenWindow() { GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] gds = ge.getScreenDevices(); GraphicsDevice gd = gds[1]; JWindow window = new JWindow(gd.getDefaultConfiguration()); window.setContentPane(getJFSPanel()); window.setLocation(1280 0); window.setSize(gd.getDisplayMode().getWidth() gd.getDisplayMode().getHeight()); window.setAlwaysOnTop(true); //gd.setFullScreenWindow(window); return window; }"
33,A,"Howto perform a MULTIPLY composite effect using Graphics2D I have two different javax.swing.Icon objects and I want to a create new Icon which is the composite of these two. I want the composite to be a MULTIPLY effect similair to what you would get in any photoshop-like image editing application when you choose that option. Specifically per every pixel if you have color Ca and Cb from image 1 and image respectively Ca = (RaGaBa) Cb = (RbGbBb) the i want output to be Cc = (Ra*RbGa*GbBa*Bb) I want to do this on the fly (in realtime) so I've got to do this using only Graphics2D operations. I've looked at AlphaComposite and don't see that this can be done. Anyone have any ideas? Have you already looked at the contents of java.awt.image? Is there some reason why BufferedImageFilter and BufferedImageOp are not appropriate? What you need is a ""multiply"" alpha composite. Conveniently I asked the same question a while ago about a ""screen"" effect. I was pointed at http://www.curious-creature.org/2006/09/20/new-blendings-modes-for-java2d/ which has the multiply composite you need. oooh. Perfect! Many thanks...."
34,A,How could I allow only unique strings in a JList? I have a JList that holds a bunch of strings . I would like it to act like a Set  so that it will only hold unique values . Is there any way to achieve this without checking that a new string doesn't already exist there ? To what purpose? Is it necessary to iterate in the order items were added? Is it necessary to randomly access the items? Why does a set not work for you? take a look at the docs: 1.4.2 | Java 6 You can set your own ListModel via JList#setModel(ListModel) which might be backed by e.g. a HashSet instead of the Vector which is used by default. See also ListModel and AbstractListModel LinkedHashSet would make more sense but it'd still be an awkward O(n^2) operation to say repaint the widget.
35,A,"""Spotlight"" like component for Swing? I am just thinking about ways to improve the user experience for our data entry application and thought about a Mac OS X Spotlight like search bar which allow the user to search for arbitrary terms and pick from a list of choices that match the terms. I imagine something that is capable of showing categories (like contacts appointments mails etc.) and the related results simultaneously. Do you know of any Swing component that is readily available somewhere so I would not need to create the UI part again but concentrate on the actual ""search plugins""? Like the search tool? or the ""spotlight"" visual where everything is dimmed but there's a light shining on the things that match? If you're talking about a UI component the ""Swing Hacks"" O'Reilly book has a spotlight example. If you're talking about search/indexing i'd recomment Apache Lucene. Not sure that anyone [edit:my answer was cut off right here?] has a ready made fully functional search results browser like spotlight has now. Thanks for the tip about Lucene. I will have a look at their browser. thanks for the -1 without a comment. although it looks like my answer got cut off in the middle somehow? If you go with lucene also look at Luke which is a lucene index browser thing which works awesome for debugging issues/contents of your indexes  Offhand I cannot think of a ""ready made"" component for what you are looking at but you may find the following interesting: macwidgets This is a collection of ""mac style"" widgets such as a ""heads up display"" and sidebar lists similar to the ones you find in iTunes. You may want to try adapting some of them to what you need."
36,A,Adding a Web Browser in a JFrame/JPanel/JComponent in Java I'm doing a Java application that requires to use a web browser inside the application. I have seen some applications doing this such as RSS readers when clicking in a feed in the left panel and opening the link in a right panel in the same application and I would like to implement something similar. Is it possible to do this in java? Is there any library included in the Java API? Do I need external libraries? Any information? IE Firefox Chrome Opera? What should I use? Thanks in advance The obvious one that everyone is avoiding is JEditorPane which is right in swing. It's a pig and very limited but for certain types of HTML rendering it does ok. I have used it for simpler jobs. As mentioned in the other links Lobo Browser is another option. The cobra stuff in that is pretty good and handles a lot more pages than JEditorPane. I found it does all of my medium jobs but has some frustratingly unextensible parts of its design. I use it for my help systems and some non-AJAX heavy web work. For anything like google maps and those sorts of heavy AJAX style web applications you are pretty much stuck with DJ Native as another poster and the other question responses mention. Since it's shelling out to a real browser underneath the covers it will handle any web site. The only down side is that you lose a certain level of control over what it's doing since you have to make calls to it through Java script and get events back through a similar mechanism. As an example no sane person would need I've had applications that rendered swing controls (reports etc.) right into the web page on the fly. In JEditorPane this was confounding but possible. In Cobra it's almost easy but a few private or final methods requiring work-arounds. In DJ Native it would be impossible without generating the image ahead of time and making it available via URL (either local or remote). So it all depends on your needs. For free there is no perfect solution.  There is the Flying Saucer XHTML renderer project which you may try. It's kind of interesting. Take a look at this link: http://code.google.com/p/flying-saucer//  You could try the Eclipse SWT - this is the GUI toolkit that is used in the Eclipse project. In particular the Browser widget should do what you need.  As per one of the answers in darkassassin93's link the native web browser as part of the DJ Project seems reasonable. I've tried it out briefly and it works pretty well. (Of course you could wait until JWebPane finally gets released...whenever that might be)  You might look into the Desktop API.
37,A,"Swing mouseClicked and Z-Order I have a JFrame with null layout and two one character JLabels on the same position. When I add a MouseListener the MouseClicked event always goes to the first JLabel even if it has a transparent pixel there. Is there a solution for this? (eg: I display ""a"" and ""á"" and I need to know if the user clicked on the character or on the accent) IIRC you need to call setOpaque false and override contains(intint). Okay but I found no ""getpixel"" like functions in the JLabel documentation. I need to render the text to some Image and use it as a reference? Found it Robot.getPixelColor."
38,A,Java Beans - creating an inspector window I'm wondering whether there is an existing Java class that given a Java bean uses introspection to find all the publicly modifiable fields and displays them using default PropertyEditors. I see a bunch of information about BeanInfo PropertyEditor Bean Customizers but nowhere can I find actual examples. Basically I want the functionality of the Inspector window from XCode or the Properties panel in Netbeans. Sound like you want the old sun BeanEditor I cannot find a link to this; is it deprecated and dead?  Found another potential one: Java-Bean-Examiner. But I cannot log into the CVS to download the source.  NetBeans is open source; you could use that (i.e. find the relevant piece of code within the project - I think it's called the Inspector) Downloading through mercurial now: http://wiki.netbeans.org/WorkingWithNetBeansSources Actually it's called the Property Editor according to http://java.sun.com/docs/books/tutorial/uiswing/learn/netbeansbasics.html . Unfortunately I've been having a really hard time getting the source to netbeans... is there some trick I'm missing? The NetBeans stuff is VERY complicated (I have been learning it over the past month or so). Not very well documented IMO at least with respect to the property sheets.  Looks like L2FProd commons library has something just up my alley: http://www.l2fprod.com/common/ Searching some more on StackOverflow turned up this answer in which Yan Cheng Check noted that he extended the classes to be exactly what I need: ObjectInspectorJPanel EnumComboBoxPropertyEditor you can't download l2fprod commons
39,A,"Specify antialias property in the command line I remember not too long ago somebody post a link on how to specify the global rendering hints to use anti-alias in java. Unfortunately I can't find the question. How can I specify the rendering hint to use anti-alias in swing? think I found the way to set it globally. For a single Graphics2D: Graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING RenderingHints.VALUE_ANTIALIAS_ON); Call that on the Graphics2D you are drawing on and you will have anti-aliasing!! For global settings: //this SHOULD enable global anti-aliasing System.setProperty(""awt.useSystemAAFontSettings""""on""); System.setProperty(""swing.aatext"" ""true""); EDIT By oreyes: The first one did it!!! vs. I guess it will work if used as first line ( or second ) in the main function :P ... Wow what a difference! p.s. You spelled '`Hello`' wrong. `:P` Although I think it was another system property this did the work. The one displayed in the screenshot is: java -Dawt.useSystemAAFontSettings=on say.Hello Need to be the first line in main() in a large amount of cases. I'd highly encourage it :D"
40,A,"How to create shortcut icon for java program Hi I have created executable jar of my java program i want to create shortcut icon for that jar. Means may be my jar is in any other memory location of hard drive(eg- D or E drive for windows) but my icon must be at Desktop. So that if i double click on icon from desktop then my application will start. How to create this Thanks Sunil Kumar Sahoo 100% Working native windows shortcut for jar execution: First create regular windows shortcut (right click on desktop new -> shortcut) In text field ""Type the location of the item"" write: ""C:\path\to\javaw.exe"" -jar ""C:\path\to\jar\myExecutableJar.jar"" Click next type shortcut name ant press Finish. That's all! :) Then You can set custom icon: Right click on shortcut -> Properties -> Change Icon...  If Java is properly installed the JAR extension is assigned to java. That means on commandline you can type C:> myprogram.jar And if your jar is properly build that runs the program. You can copy/paste-link your JAR file to desktop.  Assume your jar file is in location c:\pgm\abc.jar open notepad and type c: cd\ cd pgm java -jar abc.jar Then save that notepad document as ""anyname.bat"" Then create a shortcut for that batch file (ie...right click that file and click ""Create Shortcut""). You can use this shortcut to run your jar file.  You should be able to create shortcut as normal. After all installing Java on Windows should by default allow you to run .jar files directly; there should be an association of that extension to java.exe. Alternatively you can create a batch file to run the jar and then create the shortcut for that file.  You need to look around for Java Windows Installers they have functionality to create desktop shortcuts. Take a look at this article and this one too. Install4J is my personal favorite  Creating shortcut for java .class file is very easy just follow the instructions: create a .class file using javac open a notepad and type following line (note: here filename is the name of my file. Type your file name without .java or .class )  java filename pause 3.save it as anyname.bat in the same folder where your .class file resides 4.copy and paste shortcut of your new file  right click on desktop select option new - shortcut click on brows button and select path of jar file select next - finish button. shortcut file is created on desktop . right click on shortcut file select properties click on change icon and change icon of file Congratulations you created a shortcut  This is a short tutorial for creating shortcuts to existing programs: http://support.microsoft.com/kb/140443  I'm not entirely sure about this answer but I've recently found this:  try { Files.createLink(FileSystems.getDefault().getPath(""C:/Documents and Settings/MyUser/Desktop"" ""MyLink.lnk"")  FileSystems.getDefault().getPath(""C:/Documents and Settings/MyUser/Desktop"" ""MyExistingFile.pdf"")); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } This example create a link (shortcut) in the desktop to another file in the desktop. it in deed creates a shortcut recognized by the OS but I have not been able to make it work in Windows systems (the shortcut is been created and it is recognized by Windows but it does not work) but I'm working on it so as soon as I get the answer I'll post it here in the meantime you may try to help me lets see who is the first to make it work :D! Greetings! hahahah well it seams I'm many steps behind the java programmers XD but is good to know that I won't have to reinvent the wheel *""lets see who is the first to make it work""* [Java Web Start](http://stackoverflow.com/tags/java-web-start/info) beat you to it in around Java 1.2 or Java 1.3. And the JWS desktop icon is cross-platform for any OS That allows desktop icons. ;) More recent JREs allow for the creation of an icon at run-time - see the [`IntegrationService`](http://docs.oracle.com/javase/7/docs/jre/api/javaws/jnlp/javax/jnlp/IntegrationService.html)."
41,A,"Java: JProgressBar Is it possible to make a progressbar in Java like displayed on this page? Image. So not the default progressbar ""filling-way"". If so how? Thanks You'd have to do some wicked overriding of either the paint or paintComponent methods (I forget which one exactly) but yeah it's possible. The best way is to look at existing tutorials on custom swing components: http://today.java.net/pub/a/today/2007/02/22/how-to-write-custom-swing-component.html They're pretty old but still applicable.  I think the easiest way would be to write your own custom component. The alternative would be a custom look and feel (there's a lot of work involved in that) but it shouldn't be too difficult to write a custom component with your own indeterminate animation very similar to what you see there. If your goal isn't the specific look but just a generic indeterminate progress bar more help is available here: http://java.sun.com/docs/books/tutorial/uiswing/components/progress.html  I found it self. Just call setIndeterminate(true);!! I found it on java2s"
42,A,Question about JInternalFrames I have a frame that once it's minimized I'd like to minimize other frames related to it. If the frame is no longer minimized I want to restore the other frames too. How should I go about doing this? EDIT: nvm it works. Exactly how are they related? JInternalFrame.addInternalListener and then catch in the internalFrameDeiconified method. Then you can just call JInternalFrame.setMaximum(true) on any of the others that are minimized.
43,A,"What's the best way of dealing with AWT Graphics contexts? Some users of our Swing application have reported weird artefacts appearing on the display. This ranges from components not repainting themselves properly for a second or two right upto whole portions of the application being repainted like tiled wallpaper over areas of the window. The app has been worked on by developers of all levels between experienced Java guys to young chaps right out of university over the course of five years or so and as you'd expect some of the AWT code is an outright mess. I'm now faced with the task of trying to correct as much of the badness as I can over the next few months or so. Some of this is easy to deal with. Deal with components only on the event dispatch thread IO asynchronously kind of thing and I'm hopefully getting the message across to the rest of the team. What I'd like to know is the best way of dealing with Graphics contexts especially in a paintComponent() context. I see a lot of... public void paintComponent( Graphics g ) { super.paintComponent( g ); Graphics2D gfx = (Graphics2D)g; // ...Whole lotta drawing code... } Is it better practice to do this? public void paintComponent( Graphics g ) { super.paintComponent( g ); Graphics2D gfx = (Graphics2D)g.create(); // ...Whole lotta drawing code... gfx.dispose(); } If the g parameter is going to be reused in other paints then don't I need to restore it to a good state undo AffineTransforms etc.? I heard that this has been fixed in jdk-1.6.12 but didn't try it.  According to Filthy Rich Clients you should not alter the Graphics object passed to you (which sucks as an API IMO). The correct way to handle it is slightly more verbose: public void paintComponent(Graphics g1) { super.paintComponent(g1); final Graphics2D g = (Graphics2D)g1.create(); try { // ...Whole lotta drawing code... } finally { g.dispose(); } } IIRC in the Sun implementation it doesn't matter if you don't dispose of ""sub-Graphics"" objects. (Don't quote me on that.) You might want to delegate that comment bit to another object."
44,A,"How can I make JOptionPane dialogs show up as a task on the taskbar? Edit: The question follows the horizontal rule; my own answer precedes it. Based on help from Oscar Reyes I crafted this solution: import javax.swing.JOptionPane; import javax.swing.JFrame; public class MyApp extends JFrame { public static void main(String [] args) { new MyApp(); } public MyApp() { super(""MyApp""); setUndecorated(true); setVisible(true); setLocationRelativeTo(null); String i = JOptionPane.showInputDialog(this ""Enter your name:"" getTitle() JOptionPane.QUESTION_MESSAGE); if(null != i) { JOptionPane.showInputDialog(this ""Your name is:"" getTitle() JOptionPane.INFORMATION_MESSAGE null null i.concat(i)); } dispose(); } } Notice I display my output in a JOptionPane.showInputDialog also. This way the output is highlighted in a text field so I can simply press CTRL+C to copy the output to the system clipboard and them press ESC to dismiss the application. I've created a trivial GUI for my trivial application. My application prompts for a single input with a JOptionPane.showInputDialog performs a calculation and then displays a single output with a JOptionPane.showMessageDialog. I sometimes switch to a maximized browser window or something else to copy from and then want to switch back to my JOptionPane dialog to paste into. I want to have my JOptionPane dialog show up as a task on the taskbar so I could switch to it like nearly any other running program. I prefer JOptionPane's simplicity rather than having to create a JFrame a FlowLayout an Icon a JTextField a JButton an ActionListener and so on and so on. Can JOptionPane show up as a task on the taskbar? If so how do I get it to show up? If not is there anything else that's a one-liner like JOptionPane.show[whatever]dialog()? Can JOptionPane show up as a task on the taskbar? No If not is there anything else that's a one-liner like JOptionPane.show[whatever]dialog()? Not exactly one liner ( but some extra 6 lines :P ) I bet you cam put all this in a utlity method pretty easy and call it whenever you need it with a single call. The following code would add a taskbar for your app. import javax.swing.JFrame; import javax.swing.JOptionPane; public class OptionTest { public static void main ( String [] args ) { JFrame frame = new JFrame(""My dialog asks....""); frame.setUndecorated( true ); frame.setVisible( true ); frame.setLocationRelativeTo( null ); String message = JOptionPane.showInputDialog(frame ""Would this be enough?."" ""My dialog asks...."" JOptionPane.INFORMATION_MESSAGE); System.out.println( ""Got "" + message ); frame.dispose(); } } By the way in Windows Vista I can switch to the OptionPane using Alt+Tab without anything else ( although I cannot see it in the taskbar as you said ) ahh yes. Probably I initally use showXX( ( Component ) null  etc etc ) and didn't remove the awt stuff Adding the frame and having it be the parent of the JOptionPane dialogs works great for what I am doing. What did you do there with the double braces and method calls? Is that called an inner class? Javac creates a file OptionTest$1.class. I eliminated that by using frame.setUndecorated(true); frame.setVisible(true); frame.setLocationRelativeTo(null); and eliminating that block. Ahh yes that's better. I was trying to create an ""online"" instance like: showXXXDialog( new JFrame(""t""){{setUndec.. setVisi. etc}} ""dialog"" ""title"" ); ] But then I realize the reference is needed for the ""dispose"". So I create the variable but just didn't feel like correcting the double brace :) And yes that's an ""anonymous inner class"" for you cannot reference it by name. The compiler created a .class with a name like the one you've described. I can Alt+Tab to it in XP also; that's nothing new. Sometimes I forget it's there and launch it again only to find a few unused instances of it when I minimize everything else. I was wondering if you couldn't ( which would be very strange ). So what do you think about using the frame as shown? If you pack that on function you can pretty much have the same one line behavior you expect ( aflter all that's exactly what ""showInputDialog does"" pack a bunch of calls into one. I find that your code compiles perfectly without importing java.awt.* by the way.  This question is platform dependent. On my system Debian Linux with OpenBox JOptionPanes always show up on taskbar. I can't prevent any JDialog from appearing on taskbar. I just made another test. Fired a one-line java app: javax.swing.JOptionPane.showMessageDialog(null ""test""). XP and my Linux behave differently with it. That's no surprise as taskbar is operating system element not mentioned in java documentation. As such it's platform dependent. Why do people with 11k reputation make such newbie-style hasty and confusing comments? The comment I was talking about has been deleted."
45,A,How do I bind to this JList so I can change what gets displayed to the user? I have a JList which i want to use to display a list a caches that are added in from another form I've got this working and I want to be able to add the caches directly to the list... Is there a way to change what gets displayed to the user? or would it simply be a case of making to the toString method of my object what i want to be displayed? public void update(Observable o Object arg) { GeoGolfHole hole = (GeoGolfHole)arg; model.add(0 hole); jlHolesInGame.setText(Integer.toString(model.getSize())); } You can create a new ListCellRenderer to render what you want out of the class.
46,A,"Is it safe to dispose a JFrame from a different thread in Java? Is it safe to call the dispose() method of a JFrame from a different thread (not the EDT)? No Swing is not thread safe. Use something like Runnable doWorkRunnable = new Runnable() { public void run() { myFrame.dispose(); } }; SwingUtilities.invokeLater(doWorkRunnable);  No. It may work or it may cause problems. Just wrap the method in a SwingUtilities.invokeLater(...) and don't worry about it. Yeah but wrapping a single method call in a new runnable seems quite cumbersome doesn't it? cumbersome or not that's what you have to do if you need to do gui work from another thread It seems unlikely that calling the method is the only thing which is being done. There's probably other code that is being run in a non-thread safe manner. (Anyway real h4x0rz would use `java.beans.EventHandler`.) As a matter of fact there is more potentialy dangerous code running there but is all invoked using SwingUtilities. This dispose method is called from a different method of the class and I was just wondering if you need to wrap the dispose method too as it is only ""freeing"" resources not manipulating with anything else. But I guess disposing is still a manipulation and has to be executed withing the main thread too. :) @Tom Hawtin - I'm guess I'm not a real H4x0r then. I prefer compile time safety in my applications. I guess that comes from learning the hard way. Reflection is ""cool"" but it also a sure-fire way to make your application break easily."
47,A,Multiple animated JPanels - only last one added to JFrame is displaying I am making a multithreaded pacman game. There is a PacmanController class which extends JFrame a Maze class which extends JPanel a Pacman class which runs in its own thread and extends JPanel and a Ghost class which runs in its own thread and extends JPanel. Each thread (pacman and each Ghost) continuously repaints itself and calls maze.repaint() as well. When I add the maze to the frame it displays fine if I then add pacman it still displays and animates fine. However when I add the Ghost to the frame after pacman the ghost appears and pacman disappears. If I switch the order in which pacman and the ghost are added the opposite is true i.e. only one of pacman or each instance of ghost is ever displayed - the one which is added last. Eg: add(maze); add(pacman); add(ghostA); Only the maze and ghostA appear? I realize this has something to do with JFrames BorderLayout i.e. only one component can be added to the center region but don't know how to fix it. I have tried adding pacman and ghosts to EAST WEST etc but this didn't work. I have also tried maze.add(pacman); add(pacman); //etc but this didn't work either. Sorry for the long post any help is much appreciated. I can't post any code as the code is too long and spread over many classes. Many thanks! First: Repainting from multiple threads in Swing is a recipe for trouble. A better way is to update from the main game class and pass the Graphics object to all the actors to paint themselves (I'm sure there are other patterns but I haven't done this sort of thing in a while). Second: Your actors (pacman ghosts) should not be JPanels. That's a recipe for even worse trouble. Make them extend an Actor class or something but they should not be Swing components. I realize that this doesn't directly answer your question but some of your problems will go away if you design your game properly. There are a number of tutorials on game design out there on the web; I can't recommend any of them personally but the first couple of chapters of Killer Game Programming in Java look promising. Edit: All right I'll try to address the actual question. If you're using BorderLayout the way to add multiple components is to specify the position: setLayout(new BorderLayout()); add(maze BorderLayout.CENTER); add(pacman BorderLayout.EAST); add(ghostA BorderLayout.WEST); Alternatively (and maybe better) you could add the players to the maze: setLayout(new BorderLayout()); maze.setLayout(new BorderLayout()); maze.add(pacman BorderLayout.EAST); maze.add(ghostA BorderLayout.WEST); add(maze BorderLayout.CENTER); Now while these ought to get all three components added to the frame I still can't see how you could have a game where the player is a JPanel trying to escape JPanels. Anyway if they don't work the next thing to do is to try a different layout manager. Many recipes for trouble in Swing aye :-) Thanks for the reply but this is for an assignment; thus I don't really have time to start redesigning my program - it is 2000 lines long altogether. What I really want to know is can I make it work using what I have done so far? Both are displaying OK just not at the same time - so given what I have described is there a quick fix for this? Cheers Had already tried those with no success. Nevermind thanks anyway.  Are you adding these panels directly to the JFrame? If so you should be adding them to the frame's content pane instead: getContentPane().add(maze); getContentPane().add(pacman); getContentPane().add(ghostA); you can add directly to a frame that problem went away in Java5  Take a look at Layered panels or StackLayout  FYI mmyers is right. You will be fighting this design until the end and it will never work correctly. You're going about it the wrong way. Let's start by working on some of these questions How do you control the position/location of pacman and the ghost? Are you setting the position of the jpanel or are you drawing at some x/y within the panel? Do you expect all 3 panels to draw/render on top of each other? Did you override paintComponent() in each JPanel to draw the pacman/ghost/maze? What is the criteria of the homework assignment? Does it have to be multithreaded? @mmyers thanks for the format update. I'm lazy Pacman is controlled by arrow keys + a simple algorithm makes ghost move in random directions It has to be multithreaded - thats the whole point of the assignment. The maze is represented by a 2d array of Cell objects. Each image associated with a cell is drawn on the Maze Panel in the correct position Pacman and Ghosts move 32 pixels[1 cell position] each time they move paintComponent() is overridden in each JPanel to draw the maze/ghost/pacman
48,A,"Is there a lazy loading implementation of JList? Is there a way to make a lazy loading with Swing JList ? I solved it. I had missed the solution discussed at the top of the JList API documentation. In the example source code I posted in another answer on this topic add this line (and comment) after creating the JList:  // Tell JList to test rendered size using this one value rather // than every item in ListModel. (Much faster initialization) myList.setPrototypeCellValue(""Index "" + Short.MAX_VALUE); The problem is that JList by default is accessing every item in the entire ListModel to determine at runtime the necessary display size. The line added above overrides that default and tells JList to examine just the one value as passed. That one value acts as a template (prototype) for sizing the display of the JList. See: http://java.sun.com/javase/6/docs/api/javax/swing/JList.html#prototype_example Thanks for this - it's something I also missed.  Just to add to the other answer when you create your own implementation of ListModel while you are loading the data you will want to call: fireIntervalAdded(Object sourceint index0 int index1) Assuming that you are loading data into your list incrementally. This will cause the JList that is using it as a model to update. See Javadoc for fireIntervalAdded Huh I wonder why the example didn't do this. Perhaps it's more for aesthetics (keep the scroll bar in sync). thanks for this also I used it when I implemented a ""addAll"" method in my custom list model  Incorrect. That JList above is NOT lazily loaded. Swing insists on accessing each item in the entire ListModel while getting it displayed on screen. Furthermore after accessing all the items Swing then re-accesses the first n number of items visible on screen (in the viewport not off screen below). Run this simple ""TestJList"" class to prove it. I call println each time 'getElementAt' is executed. You can plainly see that Swing calls that method for every item in the ListModel. This happens for me on a MacBook unibody running Mac OS X 10.6.2 with Java: ""1.6.0_17"" Java(TM) SE Runtime Environment (build 1.6.0_17-b04-248-10M3025) Java HotSpot(TM) 64-Bit Server VM (build 14.3-b01-101 mixed mode) import javax.swing.*; /** * This example proves that a JList is NOT lazily-loaded. */ public class TestJList { private static void createAndShowGUI() { //Create and set up the window. JFrame frame = new JFrame(""HelloWorldSwing""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //Create an artificial ListModel. ListModel bigData = new AbstractListModel() { public int getSize() { // return Short.MAX_VALUE; // Try this if you have a long while to waste. return 10; } public Object getElementAt(int index) { System.out.println(""Executing 'getElementAt' # "" + index); return ""Index "" + index; } }; // Create a JList. JList myList = new JList(bigData); // Add the JList to the frame. frame.getContentPane().add(myList); //Display the window. frame.pack(); frame.setVisible(true); } public static void main(String[] args) { //Schedule a job for the event-dispatching thread: //creating and showing this application's GUI. javax.swing.SwingUtilities.invokeLater( new Runnable() { public void run() { createAndShowGUI(); } }); } } Run that code and you'll see: Executing 'getElementAt' # 0 Executing 'getElementAt' # 1 Executing 'getElementAt' # 2 Executing 'getElementAt' # 3 Executing 'getElementAt' # 4 Executing 'getElementAt' # 5 Executing 'getElementAt' # 6 Executing 'getElementAt' # 7 Executing 'getElementAt' # 8 Executing 'getElementAt' # 9 Executing 'getElementAt' # 0 Executing 'getElementAt' # 1 Executing 'getElementAt' # 2 Executing 'getElementAt' # 3 Executing 'getElementAt' # 4 Executing 'getElementAt' # 5 Executing 'getElementAt' # 6 Executing 'getElementAt' # 7 Executing 'getElementAt' # 8 Executing 'getElementAt' # 9 -fin-  In a way yes. You can create a custom ListModel which uses the getElementAt(int index) method to load the correct value if it hasn't already been loaded. See the example in the Javadocs for JList: // This list model has about 2^16 elements. Enjoy scrolling. ListModel bigData = new AbstractListModel() { public int getSize() { return Short.MAX_VALUE; } public Object getElementAt(int index) { return ""Index "" + index; } }; thanks for the answer I tried it and it made me realize my interface was so slow because of a custom ""sorted"" list model someone wrote and used"
49,A,"How to code startup tips to be easily localized I'm writing a new Java 6 Swing application and want to have a ""Show tips at start-up"" feature. I've done this before but never with localization in mind. In the past my tips dialog used an XML file to hold the tips but I'm afraid this will make things difficult when it comes time to translate these tips into different languages. I've thought about using a .properties file like with other strings in the application but wonder if this is a maintainable approach. I would like to give the user the ability to add their own tips which will also display in the same dialog. Is the properties approach the way to go? If I allow users to add their own tips I'll need some way to make sure the keys (for text retrieval) are unique. I would say the properties files is the best approach. But i would make the user a screen to add new tips instead of letting them modify the properties files directly. To read all the keys you can use java.util.ResourceBundle you will find a method called getKeys You should build a screen like this: @medopal - The .properties file was definitely the way to go. I haven't implemented the user screen yet but displaying the tips was much less work than my previous XML implementation. Thanks for your help! @medopal - Thanks. I was planning on a screen. However I want something a bit simpler which will let the user just add a tip in their native language. I suppose I could detect the locale first and then just update the appropriate properties file. Does that sound like a good approach or am I making more work for myself that way? I never tried to autodetect the user Locale myself so in your place i will make a dropdown list like the one in the image and default it to my customer language. To make the screen simpler you can make it just one column with an 'Add new' button @medopal - It looks like I can use Locale.getDefault() to get the default locale for the currently running JVM. This should be good enough for my purposes. My target audience for the app is non-technical so the less they have to do on their own the better. I believe getDefault() will do the job i was preferring the drop down list since the user might want to add the same message in multiple languages. But better to make it simple as you mentioned :)"
50,A,"Painting over JMF component I'm capturing the Stream from a webcam and would like to draw something on top of the video image. I try that in the example below the problem is that the other component is always in the background no matter how I arrange the components. Is there a way do solve this? public class SwingCapture extends JPanel { private static final long serialVersionUID = -1284686239737730338L; private static Player player = null; public static final int WIDTH = 640; public static final int HEIGHT = 480; private MediaLocator ml = null; public SwingCapture() { setLayout(null); setSize(WIDTH HEIGHT); ml = new MediaLocator(""vfw:Microsoft WDM Image Capture (Win32):0""); try { player = Manager.createRealizedPlayer(ml); player.start(); Component comp = null; if ((comp = player.getVisualComponent()) != null) { add(comp); comp.setBounds(0 0 640 480); } add(Canvas.getInstance()); Canvas.getInstance().setBounds(0 0 640 480); } catch (Exception e) { e.printStackTrace(); } } public static void playerclose() { player.close(); player.deallocate(); } } I have solved the problem. I used a Manager.setHint(Manager.LIGHTWEIGHT_RENDERER true); and a JLayerPane. public class SwingCapture extends JPanel { private static final long serialVersionUID = -1284686239737730338L; public static Player player = null; public static final int WIDTH = 640; public static final int HEIGHT = 480; public MediaLocator ml = null; public SwingCapture() { setLayout(null); setSize(WIDTH HEIGHT); JLayeredPane jLP = new JLayeredPane(); jLP.setBounds(00800600); ml = new MediaLocator(""vfw:Microsoft WDM Image Capture (Win32):0""); try { Manager.setHint(Manager.LIGHTWEIGHT_RENDERER true); player = Manager.createRealizedPlayer(ml); player.start(); jLP.add(Canvas.getInstance()); Canvas.getInstance().setBounds(0 0 200 200); Component comp = null; if ((comp = player.getVisualComponent()) != null) { jLP.add(comp -1); comp.setBounds(0 0 640 480); } add(jLP); } catch (Exception e) { e.printStackTrace(); } } public static void playerclose() { player.close(); player.deallocate(); } }"
51,A,"Where do I find a good short architecture-oriented introduction to Java Swing GUI for web developerrs? I'm just starting my first Java Swing project(doing mainly web-based apps before) and try to understand how to build a proper architecture with separation of concerns between the MVC components. Just about any documentation I find goes very deep into the details of how each and every Swing UI widget works and can be used but all examples just directly call program logic from a Class that extends for example JPanel - which seems odd and no good architecure. It would be best if that would be IDE-independent but if such things come into play it should be said that in the overall project we have already Eclipse JFormdesigner and JGoodies in use. I also see that JSR296 defines a framework that seems to address my concerns. Should I just use something that implements it? Martin Fowler has started a development on his Patterns of Enterprise Application Architecture book covering some patterns that were not covered in the original book including GUI patterns. Although its contents are not exclusively Java oriented they are very valuable. thanks for those - I'll check them out! Fowler's work has been incredibly helpful in my development as a GUI developer. Highly recommended once you get to a point where you can abstract your thinking about GUI development to a design pattern level. Presentation Model is insanely useful.  The Java Tutorial has a Swing trail that is very good for getting the concepts straight. If you are used to web apps you will find the GUI-model rather confusing until you have this straight. http://java.sun.com/docs/books/tutorial/uiswing/ Sure I saw that :) but it falls in the mentioned category: telling me lots of detals about every widget( no doubt this will be good to see at some point and there are some more interesting things to find there!) but I'm looking to get the architecture right!  This is an area of Java programming that is highly under-documented. As you mention extending from JFrame or JDialog to develop a GUI is not a good design practice yet you see it all over the place in sample code. JSR 296 is a useful starting place but it's architecture has some serious problems. I do use JSR 296 but I have my own flavor of it and consistently have to work around issues introduced by the framework design. I've long thought that there should be a discussion group/wiki/something focused on this topic. So far I've found the listserv for various rich client libraries to be useful but not comprehensive. Something to think about starting maybe in my free time :-) So I can't provide any definitive resources for best practices in building swing applications. But I can give you some pointers to the toolkits and concepts that I've found that I use over and over again. Maybe these will be useful to you as you get going. Also if enough people are interested in having a discussion about best practices sharing code etc... I'd be interested in being part of it. First some absolutely critical libraries if you are going to do Swing development: Binding - there are a number of libraries that do this (JGoodies JSR295 which has spun off into an open source project called Better Beans Binding (BBB) Eclipse binding framework). I started years ago using JGoodies but I have moved over to using BBB because I find it's approach to be more intuitive. I can't stress the advantages of the declarative coding approach that binding allows for - it will truly revolutionize your code AppFramework (or some flavor thereof) - JSR 296 is the place to start here. As I mentioned above it has some problems - if you do use JSR296 I strongly strongly recommend that you try to avoid using the singleton that is at the core of the framework (other than as a source for injection of the framework components that you actually need). EDIT - since I wrote this I've started using GUTS in our projects (this is a Guice based app framework - it started life as JSR 296 but has very little in common with it now). GUTS is still a young project but it's worth taking a look at if you are considering frameworks. GlazedLists - if you are doing anything in the UI that involves lists tables or trees you should take a hard look at GlazedLists. It's an incredible project (not just for Swing apps but it really shines in that arena) Validation - JGoodies has a very good validation library. Learn it use it be one with it. Real time validation is an incredibly important part of a modern Swing app. MigLayout - The Mig layout manager is the best around. I strongly advise against the temptation of using an IDE GUI builder - learn MigLayout (it will take a couple of hours tops) and code things up by hand. So those are the key absolutely must-have libraries in my book. Now some concepts: A. Presentation Model - Martin Fowler has a lot of info on this design pattern. Long and short it separates behavior from presentation at the GUI level. IF you are used to MVC Presentation Model adds another layer of separation that is quite important to 'live' UIs. All of my views are backed by a corresponding presentation model. The end result is that the view code is really really simple - focusing on two things: 1. Layout and 2. Binding view components to the presentation model. That's it. B. Views are NOT subclasses of JPanel. Instead I follow the JGoodies inspired technique of treating the View as a builder that creates JPanels. The basic pattern is: public class MyView{ private MyPresentationModel model; private JButton okButton; private JButton cancelButton; ... public MyView(MyPresentationModel model){ this.model = model; } public JPanel buildView(){ initComponents(); // this method actually creates the okButton and cancelButton objects bindComponentsToModel(); // this method binds those objects to the PresentationModel JPanel p = new JPanel(new MigLayout()); p.add(...); ... return p; } } This approach followed religiously allows incredibly rapid development of UIs that are easy to maintain. Note that we can use a given View to construct multiple JPanels that are all backed by the same PresentationModel - changes in one panel generated by the view will immediately be visible in another panel generated by the same view. C. Use Actions not event handlers. JSR 296 actually does a good job of making Actions easy to create and work with. D. Do long running operations (even something that takes 100ms) off of the EDT. JSR 296 makes this fairly easy with it's Task support - but there are a number of gotchas in 296's Task system when it comes to exception handling. If you have property changes that in turn result in long running events be sure you think carefully about which thread those changes are going to occur on. Using Tasks is a big change to how you do development but it's a really important area for any real Swing application - take the time to learn about it. E. Resource injection is important. Use it from the beginning (instead of telling yourself that you'll add it later) - if you find yourself calling setText() on a JLabel it's time to sit back and call setName() instead and add an entry to the resources file. JSR 296 makes this pretty easy to do if you are disciplined about it. I think that's enough for now - this is a highly complex subject with lot's of nuance. I've spent the past 7 or 8 years banging my head into things that don't work - and I'm continually finding better ways to do even the things that work well for me. One other thing that I want to mention here: I have looked extensively at the Eclipse NetBeans and Spring rich client platforms. My take away is that they might be useful for some types of projects but the learning curve is steep and you really have to play by their rules if you choose to use one of those platforms. What's wrong with extending JPanel (or any JComponent)? If I have for example a panel that's purpose is to show a map I will create a class called MapPanel extend JPanel and draw a map on the panel. no problem with that usage at all Thomas - The issue I have is the scenario where folks sub-class JPanel so they can add components to it (extending from JFrame or JDialog is an even better example - I'll edit the post to indicate that). In your case if you placed the map inside a JScrollPane then added the JScrollPane to the panel then I'd say that a different approach was warranted. But for creating a truly new UI component extending JPanel is the way to go. thanks kevin that's a lot stuff to look into! I thin if we were about to start a project from scratch eclipse/netbeans/spring would be nice - probably a bit fatter that AppFramework. But as I have to add stuff to an existing code base (of which the creator himself is not sure if it's architected properly) I need something that can fit into this and still be properly designed as far as possible. I hear you. The idea of using an RCP framework as a baseline was really appealing - but my first read through of how to use NetBeans to build RCP apps filled me with horror (the number of code smells *required* by the framework was just aweful). App Framework has problems as well but at least it's possible to build an application 'correctly' using it. Eclipse RCP would probably have been ok but the deployment alone is so huge that we just couldn't go down that path.  You can try the Spring Rich Client project. I have a very good experience with the rest of the spring portfolio. Thanks! I knew of it and will look at it sooner or later. But first I want to learn from scratch how to do it properly then I have to integrate some new functionality into an existing codebase (and eventually refactor this base on the go). So the full-blown frameworks might not be what I can use now.  Another very basic very simple howto showing things about this is there: http://www.macs.hw.ac.uk/guidebook/?name=Using%20The%20GUI&page=1 I'm not sure if I like the idea of the Controller itself implementing ActionListener - on the other hand if it wouldn't I'd need an extra class for this which again would need to know the controller and tell him things... Maybe the problem is just that there are so many possible choices of how Swing components can communicate with a controller and none of them looking really ""right"" at the first glance..."
52,A,"Easy way to fill a JTable with CSV data I have CSV data (in fact the values are separated by a tab character but I can use ; as the separator). The data are stored in a String object. Is there simple way to create a JTable with this data (without doing it manually by reading and parsing the String object) ? (note: my project is using Java 1.4 but if you have a solution that needs Java 1.5 I would be happy anyway) unless there is a csv -> tablemodel method out there somewhere you will have to write the code to populate the model yourself unfortunately. That's what I am looking for ;) I've implemented the manual code for creating this table but I wanted to see if there was an easier way to do that...  The TableModelExtTextLoader from swinglabs will do you. It supports both tab and comma separated text. OpenCSV is also an easy way to get it : http://stackoverflow.com/questions/10466079/import-csv-to-jtable  It's easy enough to do this without an external library. Here is an example using the Scanner class from Java 1.5:  import java.io.*; import java.net.URL; import java.util.Scanner; import javax.swing.*; import javax.swing.table.DefaultTableCellRenderer; import javax.swing.table.DefaultTableModel; public class CSVTable extends JFrame { JTable table; DefaultTableModel model; JButton closeButton webButton; /** * Takes data from a CSV file and places it into a table for display. * @param source - a reference to the file where the CSV data is located. */ public CSVTable(String title String source) { super(title); table = new JTable(); JScrollPane scroll = new JScrollPane(table); String[] colNames = { ""LastName"" ""FirstName"" ""Email Address"" ""Dept.""}; model = new DefaultTableModel(colNames 0); InputStream is; try { if(source.indexOf(""http"")==0) { URL facultyURL = new URL(source); is = facultyURL.openStream(); } else { //local file? File f = new File(source); is = new FileInputStream(f); } insertData(is); //table.getColumnModel().getColumn(0).setCellRenderer(new CustomCellRenderer()); } catch(IOException ioe) { JOptionPane.showMessageDialog(this ioe ""Error reading data"" JOptionPane.ERROR_MESSAGE); } JPanel buttonPanel = new JPanel(); closeButton = new JButton(""Close""); webButton = new JButton(""Proctinator.com""); buttonPanel.add(closeButton); buttonPanel.add(new JLabel("" You can download this file from our site: "")); buttonPanel.add(webButton); JPanel notesPanel = new JPanel(); JLabel note1 = new JLabel("" Make sure that your list is formatted exactly as shown below including the *markers between categories ""); JLabel note2 = new JLabel("" Be sure to place each faculty member into the correct category: *Teacher *Subs *TeacherAids *TeacherAssistants ""); JLabel note3 = new JLabel("" Note that the your faculty list must be a plain text file: Export to either CSV or tab delimited format.""); BoxLayout layout = new BoxLayout(notesPanel BoxLayout.Y_AXIS); notesPanel.setLayout(layout); notesPanel.add(note1); notesPanel.add(note2); notesPanel.add(note3); getContentPane().add(notesPanel BorderLayout.NORTH); getContentPane().add(scroll BorderLayout.CENTER); getContentPane().add(buttonPanel BorderLayout.SOUTH); pack(); } /** * Places the data from the specified stream into this table for display. The data from the file must be in CSV format * @param is - an input stream which could be from a file or a network connection or URL. */ void insertData(InputStream is) { Scanner scan = new Scanner(is); String[] array; while (scan.hasNextLine()) { String line = scan.nextLine(); if(line.indexOf("""")>-1) array = line.split(""""); else array = line.split(""\t""); Object[] data = new Object[array.length]; for (int i = 0; i < array.length; i++) data[i] = array[i]; model.addRow(data); } table.setModel(model); } public static void main(String args[]) { CSVTable frame = new CSVTable(""Faculty List Example""""http://proctinator.com/help/faculty.csv""); frame.setVisible(true); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } } Thanks for your reply but my question was how to do that *without* reinventing the wheel. Extracting data from CSV file is easy and inserting them in JTable too..."
53,A,"Deleting and replacing selected text in JEditorPane I am trying to make a Text Editor using Java Swing. In that I am using JEditorPane instead of JTextArea. I am facing problems in deleting selected text and replacing selected text from the JEditorPane. The Code I am Using is: public void delete(JEditorPane txt) { int start = txt.getSelectionStart(); int end = txt.getSelectionEnd(); String startText = txt.getText().substring(0start); String endText = txt.getText().substring(endtxt.getText().length()); txt.setText(startText + endText); } The problem I am facing here is that when I consider the value from getSelectionStart() and getSelectionEnd() They don't consider newline character but while using substring newline character is being considered. So if I use this code on a line before which there are 5 newline characters then instead of deleting selected text text gets deleted from a position which is 5 less then the selected text. Same is happening with Replace. Please Help. I think they both consider newline characters but Windows actually uses two characters for newline (carriage return + line feed) and that seems to cause confusion here. Use JEditorPane.getDocument().remove() and JEditorPane.getDocument().insertString() Definitely. Note: `remove` takes `len` as second parameter so you'll have to use `end - start`. Thanks it worked.  You can use the replaceSelection() method that takes a string to replace the selected text. Here is it's syntax. When you want to delete it simply pass an empty string as parameter. jTextArea.replaceSelection("""");"
54,A,"Overlay multiple JSliders in Swing Is it possible to overlay multiple JSliders so I can see the ""thumbs"" on both (I've tried disabling the painting of the track and setting opacity to false but one still hides the other)? Basically I'd like to create a component that allows the user to define a range (and I didn't really want to write a custom one since it has most of the attributes of a slider). If there is another way I could do that with a slider that would work too. thanks Jeff Perhaps you could define your range using JSpinners instead? Unfortunately I do need to use the slider mechanism for this one. Ah I found it (i must not have been seraching on the right terms). Swing labs as a JXMultiThumbSlider that I think will do the trick. http://swinglabs.org/hudson/job/SwingX%20Weekly%20Build/javadoc/org/jdesktop/swingx/JXMultiThumbSlider.html  JIDE has a RangeSlider with 2 thumbs (and a nice extra one on top to move both thumbs at once (e.g. drag the range around) in their open source common layer: http://www.jidesoft.com/products/oss.htm  I recently had the same problem I wanted a slider with two thumbs. I didn't get into it too much and what I ended up doing to get the range is simply putting two sliders and in the ""onSliderChange"" event listener prevented one beeing smaller than the other and the other bigger than the one. I don't beleive Swing has a two-thumb-Slider although it might be a cool new feature to add so I think this is your best bet."
55,A,"firePropertyChange on Sequence generated Id When calling persist the setId method never gets called which in turns causes the firePropertyChange not to execute. I need to fire the changeSupport method because I have functionality that dependants on the state of my entity. public void setId(Long id) { Long oldId = this.id; this.id = id; changeSupport.firePropertyChange(""id"" oldId id); } This is most probably because you annotated the id field and not the setter or getter. At least Hibernate will use this as an indicator to use direct field access instead of the setters."
56,A,"When is a Swing component 'displayable'? Is there a way (e.g. via an event?) to determine when a Swing component becomes 'displayable' -- as per the Javadocs for Component.getGraphics? The reason I'm trying to do this is so that I can then call getGraphics() and pass that to my 'rendering strategy' for the component. I've tried adding a ComponentListener but componentShown doesn't seem to get called. Is there anything else I can try? Thanks. And additionally - is it ok to keep hold of the Graphics object I receive? Or is there potential for a new one to be created later in the lifetime of the Component? (e.g. after it is resized/hidden?) Don't save the Graphics object. It could change for many reasons. You can listen for a resize event. When a component is first displayed it is resized from 00 to whatever the layout manager determines (if it has one).  Add a HierarchyListener public class MyShowingListener { private JComponent component; public MyShowingListener(JComponent jc) { component=jc; } public void hierarchyChanged(HierarchyEvent e) { if((e.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED)>0 && component.isShowing()) { System.out.println(""Showing""); } } } JTable t = new JTable(...); t.addHierarchyListener(new MyShowingListener(t)); This is definitely the best answer for my question although I think I'll go with wilums2's resizing suggestion as that's an event I'm going to be listening for anyway. Thanks.  You need to check up the component hierarchy. Check after AncestorListener.ancestorAdded is called.  I've always used Coomponent.addNotify to know when the component is ready to be rendered.Not sure if is the the best way but it works for me. Of course you must subclass the component. Component.isDisplayable should be the right answer but I know it didn't worked for me as I thought it will(I don't remember why but there was something and I switched to addNotify). Looking in the SUN's source code I can see addNotify fires a HierarchyEvent.SHOWING_CHANGED so this is the best way to be notified."
57,A,How to get some interactivity with a JTable I Have a JTable where the data model contains information from a sql query. Want to get the added ability to take me to a new jpanel by double-clicking a row in the jtabel. Thnx Do you want to be able to edit the cells or are you talking about popping up a dialog or making a previously hidden JPanel visible? You can add a MouseListener to a JTable and then handle the mouseClicked event. The following code shows a mouseClicked implementation that finds out what row was double clicked. You can then navigate to a panel using this information. public void mouseClicked(MouseEvent event) { if (event.getClickCount() == 2) { JTable source = (JTable)event.getSource(); int rowIndex = source.rowAtPoint(event.getPoint()); // get data from table model using row index // navigate to panel } } nice m8te thnx alot i'll try it right away.
58,A,"Images will not work in a .jar file When a JAR of an application is created the images in the application no longer appear. An example of our code for loading images is: ImageIcon placeHolder = new ImageIcon(""src\\Cards\\hidden.png""); We have no idea why this is happening. The application runs as expected if we do not compress it to a JAR; as a JAR the images simply disappear. We also tried using URLs instead of ImageIcons but that just causes the program not to run at all. Any ideas? EDIT: We are putting the image files into our JAR file in the correct paths so that's not the problem. are the location of the images correctly set up in relation to the location of the .jar file? http://stackoverflow.com/questions/31127/java-swing-displaying-images-from-within-a-jar You should load resources from the classpath as such:  InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(""Cards/hidden.png"") This of course assumes that when you create the JAR you are actually putting the image files into it. There is also a method for getting the resource as a URL. From the javadoc you linked to: ""The name of a resource is a '/'-separated path name that identifies the resource."" You may want to correct the path in your example which uses a backslash :-)  Check the API for the constructor you're calling. The string you pass in is a file path - when the resources are packaged in a JAR there is no file on the filesystem containing the image so you can't use this constructor any more. Instead you'd need to load the resources from a stream using the classloader and pull them into a byte array: byte[] buffer = new byte[IMAGE_MAX_SIZE]; InputStream imageStream = getClassLoader().getResourceAsStream(""src\Cards\hidden.png""); imageStream.read(buffer 0 IMAGE_MAX_SIZE); ImageIcon placeHolder = new ImageIcon(buffer); Needs more exception and edge-case handling of course but that's the gist of it. `MyClass.class.getClassLoader()`. Forward slashes would at the very least be preferred. And `read` does not always read the full buffer (`DataInputStream.readFully` for example does that). There is a simpler way to load the image by using getClass().getResource(""image.png""). This returns correct URL either for file system or jar. This URL can be used then in many ways icluding new ImageIcon(url)  Question: Does the folder src exist in the jar? Tip: You can open .jar with any unpacking program which supports ZIP to see its contents. Answer: The way you reference the resource is incorrect you should do something like getClass().getClassLoader().getResource(""Cards/hidden.png"") instead. Why is it ""incorrect""? Because you amenend it as a relative disk file system path instead of as a classpath resource."
59,A,"How to do smooth scrolling for lists in Swing On the iPhone scrolling through lists is animated smoothly. Ignoring the inertia effect (though having it would be cool as well) - how would I go about making a Swing listbox scroll smoothly like that? There are other examples as well like browsers but those use native controls which I cannot use with Swing. If you are using JList try overwrite getScrollableUnitIncrement(Rectangle int int) and getScrollableBlockIncrement(Rectangle int int) to return custom increment .. e.g. 2 pixels instead of default values computed from list entry height.  I'm not sure that this answers your question but I had a similar issue. My problem was that dragging vertical JScrollPane knob made JList to scroll by blocks instead of by units that is the top cell was always displayed in whole except when list was scrolled to the bottom. Curiously this happened only when using Windows look and feel. By using default L&F I got the behavior I wanted. And after much digging I found this post which revealed that there is L&F property for that. By default this is true for Windows L&F but you can set it to false like this: UIManager.put(""List.lockToPositionOnScroll"" Boolean.FALSE);"
60,A,How to decrease the perceived loading time of Java Swing forms? In my Swing application I have the problem that when creating a new instance of a Swing form for the first time it takes several hundreds of milliseconds. That's not really long but the subjective impression of getting slowed down is really annoying. It happens with all forms even a JOptionPane message or other trivial forms. (Of course larger forms need longer because of the more complex constructor) Now I noticed that the second time creating a new form instance is significantly faster. Since the initial startup time doesn't matter I'm planning to create invisible instances of all important forms at startup but that looks like a dirty hack to me. (And I'm not sure it'll even work) My questions: Is there a more elegant way to speed up the creation and display of forms? What happens the first time a form is shown that doesn't happen the second time? Since you describe the problem happening with JOptionPane it sounds like slowness in class-loading. Are you loading over a network by any chance? It could also be garbage collection as older windows are disposed to make room for new ones. I'd start with garbage collection as it's easy to test and rectify: use the -verbose:gc argument when starting Java (have to do this from a console) and note whether the GC is running during these pauses. If yes increase the memory allotment using -Xmx and perhaps adjust the heap sections as described here. If it's a case of a slow network connection (and a tool like strace can help diagnose this) then you'll need to preload classes (not instantiate them). You can do this on a background thread using Class.forName(). Other than those two obvious things you'll need to run a profiler to get an idea of what's going on. Yes you were right about the Garbage Collection. I set the minimum heap size to 100 MB and the (subjective) speed increase was amazing.  See this article for some performance tips. Essentially you want to keep to a bare minimum the work done in the UI thread as this impacts the rendering of components and makes it feel slow. Swing applications have three types of threads: An initial thread A UI event dispatch thread (EDT) Worker threads Every application must have a main method that represents its starting point. This method runs on an initial or startup thread. The initial thread might read program arguments and initiate a few other objects but in many Swing applications this thread's primary purpose is to start the application's graphical user interface (GUI). Once the GUI starts for most event-driven desktop applications the initial thread's work is done. Swing applications have a single EDT for the UI. This thread draws GUI components updates them and responds to user interactions by calling the application's event handlers. All event handlers run on the EDT and you should programmatically interact with your UI components and their basic data models only on the EDT. Any tasks running on the EDT should finish quickly so that your UI is responsive to user input. Accessing your UI components or their event handlers from other threads will cause update and drawing errors in the UI. Performing long-running tasks on the EDT will cause your application to become unresponsive because GUI events will accumulate in the event dispatch queue. Update based on the comment here are a couple of other things to check: Do you have a virus scanner running? On my work machine the virus scanner checks the contents of all jar files on load this has a huge impact on startup times. If possible try turning the Virus scanner off or disabling it for that folder. Are you loading extra classes on startup? Ideally you should have lightweight delegates loaded that only load the implementation when first invoked (this is common practice in sWT where each menu item is associated with a lightweight delegate that instantiates the type that does the actual processing when needed). You could try profiling the application to see what is being created on startup and add in some indirection accordingly. Yes all that is very good advice and I follow it religiously in my application(s) but in this case the only work I want to do is show a form. I don't think I would gain something if I put parts of the form creation in a thread except perhaps many threading issues. I've updated my answer with a few more options +1 Thank you I'll check that.
61,A,"Preserve JTable selection across TableModel change We're seeing JTable selection get cleared when we do a fireTableDataChanged() or fireTableRowsUpdated() from the TableModel. Is this expected or are we doing something wrong? I didn't see any property on the JTable (or other related classes) about clearing/preserving selection on model updates. If this is default behavior is there a good way to prevent this? Maybe some way to ""lock"" the selection before the update and unlock after? The developer has been experimenting with saving the selection before the update and re-applying it. It's a little slow. This is Java 1.4.2 on Windows XP if that matters. We're limited to that version based on some vendor code we use. This is default behavior. If you call fireTableDataChanged() the entire table is rebuild from scratch as you set entirely new model. In this case the selection is naturally lost. If you call fireTableRowsUpdated() the selection is also cleared in general cases. The only way is to remember selection and then set this. Unfortunately there is no guarantee that the selection will be still valid. Be careful if restoring selection.  I was facing same issue and when tried to search the reason I got this question but it seems a bug in Java SDK. http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4276786 WORK AROUND A temporary work-around is available. It should be removed once this bug is fixed as it's suitability has NOT been tested against fixed releases. Use this subclass of JTable. Note: This is for the MetalLookAndFeel. If using other look and feels the inner FixedTableUI subclass will have to extend the TableUI subclass for that look and feel. import java.awt.*; import java.awt.event.*; import javax.swing.*; import javax.swing.table.*; import javax.swing.event.*; import javax.swing.plaf.basic.*; public class FixedTable extends JTable { private boolean isControlDownInDrag; public FixedTable(TableModel model) { super(model); setUI(new FixedTableUI()); } private class FixedTableUI extends BasicTableUI { private MouseInputHandler handler = new MouseInputHandler() { public void mouseDragged(MouseEvent e) { if (e.isControlDown()) { isControlDownInDrag = true; } super.mouseDragged(e); } public void mousePressed(MouseEvent e) { isControlDownInDrag = false; super.mousePressed(e); } public void mouseReleased(MouseEvent e) { isControlDownInDrag = false; super.mouseReleased(e); } }; protected MouseInputListener createMouseInputListener() { return handler; } } public void changeSelection(int rowIndex int columnIndex boolean toggle boolean extend) { if (isControlDownInDrag) { ListSelectionModel rsm = getSelectionModel(); ListSelectionModel csm = getColumnModel().getSelectionModel(); int anchorRow = rsm.getAnchorSelectionIndex(); int anchorCol = csm.getAnchorSelectionIndex(); boolean anchorSelected = isCellSelected(anchorRow anchorCol); if (anchorSelected) { rsm.addSelectionInterval(anchorRow rowIndex); csm.addSelectionInterval(anchorCol columnIndex); } else { rsm.removeSelectionInterval(anchorRow rowIndex); csm.removeSelectionInterval(anchorCol columnIndex); } if (getAutoscrolls()) { Rectangle cellRect = getCellRect(rowIndex columnIndex false); if (cellRect != null) { scrollRectToVisible(cellRect); } } } else { super.changeSelection(rowIndex columnIndex toggle extend); } } } Note Curtsey to http://bugs.sun.com  If I recall correctly saving selection and re-applying it is what we have done too...  You can automatically preserve a table's selection if the STRUCTURE of that table hasn't changed (i.e. if you haven't add/removed any columns/rows) as follows. If you've written your own implementation of TableModel you can simply override the fireTableDataChanged() method:  @Override public void fireTableDataChanged() { fireTableChanged(new TableModelEvent(this //tableModel 0 //firstRow getRowCount() - 1 //lastRow TableModelEvent.ALL_COLUMNS //column TableModelEvent.UPDATE)); //changeType } and this should ensure that your selection is maintained provided that only the data and not the structure of the table has changed. The only difference between this and what would be called if this method weren't overridden is that getRowCount() - 1 is passed for the lastRow argument instead of Integer.MAX_VALUE the latter of which acts a signifier that not only has all the data in the table changed but that the number of rows may have as well. You mean columns and/or rows right? And by inserts/deletes do you mean the addition of columns and/or rows or something else? Sorry guess I'm still a bit confused but it sounds like what you're saying here is really important for me to understand Wouldn't that be a structureChanged then? yeah the api doc of which event to fire isn't overly clear: to understand we have to read carefully those of both AbstractTableModel.fireXX methods and TableModelEvent ;-) A tableModel's structure == set of columns so whenever a column is removed/inserted (or even moved) structureChanged must be fired. The insert/remove/update for single bounded ranges are obvious. A change which includes hard-to-express (in terms of single blocks) inserts/removes must fire a dataChanged no a structureChanged is when the columns are changed along with the data beware: doing so might backfire - a dataChanged may include inserts/deletes. If that's the case listeners might be severely misled  You need to preserve the selection and then re-apply it. First of all you will need to get a list of all the selected cells. Then when you re-load the JTable with the new data you need to programmatically re-apply those same selections. The other point I want to make is if the number or rows or columns in your table are increasing or decreasing after each table model reload then please don't bother preserving the selection. The user could have selected row 2 column 1 having a value say ""Duck"" before model updation. But after model updation that same data can now occur in row 4 column 1 and your original cell row 2 column 1 could have new data such as ""Pig"". Now if you forcibly set the selection to what it was before the model updation this may not be what the user wanted. So programmatically selecting cells could be a double edged sword. Don't do it if you are not sure.  I had the same issue in an application. In my case the model in the table was a list of objects where the object properties where mapped to columns. In that case when the list was modified I retrieved the selected index and stored the object that was selected before updating the list. After the list is modified and before the table is updated I would calculate the position of the selected object. If it was still present after the modification then I would set the selection to the new index. Just setting the selected index in the table after the modification will not work because the object may change position in the list. As a side note I found that working with GlazedLists makes life much easier when dealing with tables."
62,A,Embedding an application inside another application I'm sure some of you noticed that if you have Acrobat Reader ( or any other pdf viewer )  and open a pdf in Firefox  you will see it embedded inside your tab . Is there any way to embed an application in a JFrame ? This is a rather tricky. In general native application such and Adobe Reader does not provide component which can be embedded into swing application. But in Windows there is COM/OLE approach which allows embedding of application together. This article can help you. It points on two project JCOM and JACOB which allows such embedding.  Yes but that application will need to provide JComponent version which is embeddable.
63,A,"Where can I find a good HTMLEditorKit tutorial/reference which actually explains how to edit HTML documents? My intention is to edit HTML documents including modifying existing elements deleting elements and inserting new ones. I've read HTMLEditorKit's and related classes' documentation as well as the relevant topic in Sun's Java Trail yet there is very little information about actual HTML document manipulation. Most of the discussion and examples deal with reading and parsing HTML not really editing it. Some Googling still did not yield an adequate solution and trying to tackle the task with some coding trial and error mostly resulted in exceptions. I've gone over related questions and answers here in SO but most answers suggested some alternative while I'm looking for a solution in the JDK. Perhaps HTMLEditorKit is of little use to non-swing applications and there is an alternative outside javax.swing? Here are a few tasks I'd like to learn how to perform: Replace text in certain text fields. Basic editing (find/replace or regexes) of <script> elements. Color the border of certain elements. Remove certain tags entirely (for example flash elements). Assuming that HTMLEditorKit is the best HTML editing component in the JDK what tutorial or reference do you recommend? Are you creating a visual editor or is it ok to edit the HTML structure in memory? I intend to edit in memory. I don't if there exists any tutorial on using HTMLDocument and HTMLEditorKit for editing HTML documents in Java. The JDK implementation is somewhat limited yet internally it creates a tree of elements similar to DOM. You can access the tree from HTMLDocument using getRootElements() method: Element html = doc.getRootElements()[0]; Here doc is an instance of HTMLDocument. I don't think it is easy to edit HTML with HTMLDocument but it is possible see the following methods: insertAfterEnd(Element elem String htmlText) insertAfterStart(Element elem String htmlText) insertBeforeEnd(Element elem String htmlText) insertBeforeStart(Element elem String htmlText) setInnerHTML(Element elem String htmlText) setOuterHTML(Element elem String htmlText) All of these methods accept Element as a reference point where the editing takes place. You can walk the tree structure of elements using its methods and I showed you how to get the reference to the root of the tree. Using these methods you can write a visual HTML editor. Just to show your HTML model call setEditable(false) method on JEditorPane object. For a very simple example on how you can manipulate the contents of HTML loaded into JEditorPane with HTMLDocument model see my sample application in the answer to another HTML-related question in particular the code of propertyChange even handler. Although to have more control on the HTML I would recommend using a library which creates HTML DOM and allows to modify it.  The HTMLEditorKit is not an HTML editor but an editor for document models which allows to convert these document models from and to HTML. The internal model of the editor kit is not ""HTML"" but is based on DefaultStyledDocument. What confuses you is that there is a HTMLDocument class. But that is just a thin wrapper for the DefaultStyledDocument so it can be created from HTML and saved as HTML. What you need is an HTML parser. Try jTidy. It will read the HTML build an internal model (keeping things like <script> which HTMLEditorKit will ignore). You can then use a DOM API to modify the model. That said for many use cases it's enough to filter the HTML with regular expressions or simple string search&replace. `HTMLDocument` actually contains a tree similar to DOM. It is designed to preserve everything it does not understand but it would not remove `"
64,A,"Relationship between JTable TableModel & TableData Whats the relationship between a JTable TableModel and TableData. If i just modify the TableData does that also change the data display on the JTable component or i have to call some method to sync the two. I have looked at this but it does not explicitly tell or show me the relationship in terms of updates I presume you're using the phrase ""TableData"" to just mean the data being shown in the JTable. To answer your question whether you see automatic updates or not depends upon your TableModel and how it interacts with your data. A TableModel should fire events when the underlying data model has changed this in turn will notify the JTable that a change has occurred and it should be redrawn. So in terms of a relationship the JTable listens to event changes on the TableModel; the TableModel has no knowledge of the JTable. Depending on how your model is organised the data underneath it could change without the TableModel knowing. In this instance if you have a direct passthrough from the TableModel to the data the values onscreen will change when a repaint naturally occurs (screen resize mouse moving over etc.) but it you want to force the event you should get the TableModel to notify the JTable through the aforementioned events. In terms of relationship the TableModel knows about the table data but the table data has no knowledge of model (usually). The TableModel may or may not be listening on the data for changes.  When you change a value in the TableModel data you must fire this event. eg. changing the value of one cell you call fireTableCellUpdated(row col);. Look at this more specifically. fireTableCellUpdated(row col) only applies to TableModels which are subclasses of the AbstractTableModel.  When setting the TableModel in a JTable the table adds an observer (TableModelListener) to get informed about changes in the model. When changing data in the model the model is expected to notify the registered listeners by firing a TableModelEvent. The event itself can contain supplemental information about the granularity of the change (whether the structure significantly changed or only some cell data is changed) to allow the JTable to do an optimized view update."
65,A,"Accessing a ""nameless"" Jbutton in an anonymous class from another anonymous class? alright I know this sounds a little far-fetched but let me explain. I created 26 JButtons in an anonymous actionListener labeled as each letter of the alphabet.  for (int i = 65; i < 91; i++){ final char c = (char)i; final JButton button = new JButton("""" + c); alphabetPanel.add(button); button.addActionListener( new ActionListener () { public void actionPerformed(ActionEvent e) { letterGuessed( c ); alphabetPanel.remove(button); } }); // set the name of the button button.setName(c + """"); } Now I have an anonymous keylistener class where I would like to disable the button based off of which letter was pressed on the keyboard. So if the user presses A then the A button is disabled. Is this even possible given my current implementation? Thanks in advance Tomek Could you not simply declare an array of 26 JButton objects at class level so that both listeners can access them? I believe anonymous inner classes can access class variables as well as final variables. Or even store them in a Map keyed by character so you could look up a JButton instance by the character.  You could also iterate through the components comparing getText() to the key pressed. As someone else mentioned anonymous classes can also access members of the outer class as well as local finals  I don't know if you want to disable the button or do you want to remove it? In you code you're calling remove and in your answer you're talking about disabling. You could achieve this by adding a KeyListener to the alphabetPanel. So you could add this just before starting the for-loop: InputMap iMap = alphabetPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW); ActionMap aMap = alphabetPanel.getActionMap(); and instead of your ActionListener added to the JButton call this: iMap.put(KeyStroke.getKeyStroke(c) ""remove""+c); aMap.put(""remove""+c new AbstractAction(){ public void actionPerformed(ActionEvent e) { // if you want to remove the button use the following two lines alphabetPanel.remove(button); alphabetPanel.revalidate(); // if you just want to disable the button use the following line button.setEnabled(false); } });"
66,A,How do you create a javax.swing.Timer that fires immediately then every t milliseconds? Right now I have code that looks something like this: Timer timer = new javax.swing.Timer(5000 myActionEvent); According to what I'm seeing (and the Javadocs for the Timer class) the timer will wait 5000 milliseconds (5 seconds) fire the action event wait 5000 milliseconds fire again and so on. However the behavior that I'm trying to obtain is that the timer is started the event is fired the timer waits 5000 milliseconds fires again then waits before firing again. Unless I missed something I don't see a way to create a timer that doesn't wait before firing. Is there a good clean way to emulate this? You can only specify the delay in the constructor. You need to change the initial delay (the time before firing the first event). You cannot set in the constuctor but you can use the setInitialDelay method of the Timer class. If you need no wait before the first firing: timer.setInitialDelay(0); Is that the only way? I would like to do it in the constructor if possible but it appears that isn't possible. Which kind of sucks... No such constructor. Do not know why. Could you also add your comment about this not being able to be set via a constructor to your posting as well? That would just make it better for people searching. Thanks for your help.  I am not sure if this will be of much help but: Timer timer = new javax.swing.Timer(5000 myActionEvent){{setInitialDelay( 0 );}};  Simple solution: Timer timer = new javax.swing.Timer(5000 myActionEvent); myActionEvent.actionPerformed(new ActionEvent(timer 0 null)); But I like timer.setInitialDelay(0) a lot better.  I wouldn't use a Timer at all but instead use a ScheduledExecutorService import java.util.concurrent.* ... ScheduledExecutorService executor = Executors.newScheduledThreadPool(1); executor.scheduleAtFixedRate(myRunnable 0 5 TimeUnit.SECONDS); Please note that there is scheduleAtFixedRate() and scheduleWithFixedDelay() which have slightly different semantics. Read the JavaDoc and find out which one you need. Updates to Swing components should be done on the EDT. A Swing Timer does execute in the EDT. From the reading I've done the ScheduledExecutorService does not execute in the EDT and should not be used with Swing.
67,A,"Who loads javax.swing.* classes in Equinox osgi container? I read some equinox code and doc. I came to understand that at present only class loading for java.* packages are delegated to the parent classloader(given that i have not modified org.osgi.bootdelegation property which by the way seems to be null). Then who is loading the javax.swing.* classes. I have not mentioned it anywhere in the imported packages/ required bundles but still it loads just fine. I wanted to know who the heck is ""formally"" responsible for loading it? Thanks a lot in advance. From this thread: equinox knows about spec'ed packages from the JRE for a given JSE level. These spec'ed packages are automatically exported by the Equinox system.bundle depending on the execution environment level you are at (e.g. J2SE-1.3 J2SE-1.4 etc.) So as long as you define a ""org.osgi.framework.executionenvironment"" equinox should load the right JVM packages and export them for consumption by the bundles. Thanks a lot. That was exactly I needed.;) I had still one doubt though. J2SE-1.3 J2SE-1.4...etc are these the .profile files found insider the org.eclipse.osgi bundle. If so can I add my own profile that would export say for e.g. com.abc.*. if it is possible will it cause any license issues if I do so. Thanks again I am not sure about that licensing issue regarding the export of a profile. I will check that out."
68,A,Waiting for mouse input in Java Swing I'm working on a Java Swing application. I have a button whose action runs a query on a database and then plots the results. These commands are performed from the listener on the Run button. As I understand it this means that the thread running at this point is from the EventQueue. Given certain input I need to halt processing and wait for the user to click on the plot area. I'm struggling with finding a way to do this. I've looked all over but I can't seem to find a solution that works. I've tried to create a new thread that waits for the user input (I call join on this thread). The problem is that this makes the previous thread (from the EventQueue) wait. For some reason the mouse clicks are not causing an interrupt so the mouse clicks are never captured. Any help would be much appreciated. Thanks in advance. Use the SwingWorker class. The `SwingWorker` class is great for demos but I woudln't want to see it used in production code. It cripples the design by tightly coupling UI action on the EDT with non-UI actions off the EDT. @Tom Hawtin - What would you suggest for production code then? I agree this is low level but honestly when you need to run a long-running task off the EDT you have little other choice and in that case a time tested debugged API is the right way to go. I built my app before 1.6. If you have access to 1.6 definitely use SwingWorker. Unfortunately I'm stuck with 1.5. I have an Intel-based Mac and last time I checked 1.6 was not available to me. SwingWorker has been back-ported to 1.5. https://swingworker.dev.java.net/ SwingWorker is definitely the way to go. You can get the backport for 1.5 of the 1.6 version here: https://swingworker.dev.java.net/  It seems like you are doing roughly the right thing but you should not be calling join on the background thread from the UI thread as that will freeze the UI until the background thread has completed. Here is a highly compressed example of the basic method I would use (if SwingWorker is not available): class QueryPerformer implements Runnable { private volatile boolean plotAreaClicked; public void run() { // Perform query and process while (!plotAreaClicked) { try { Thread.sleep(500); } catch (InterruptedException exception) { } } // Perform tasks following plot area click } public void setPlotAreaClicked(boolean plotAreaClicked) { this.plotAreaClicked = plotAreaClicked; } } And in your UI listeners: private QueryPerformer queryPerformer; public void actionPerformed(ActionEvent event) { // Run button pressed queryPerformer = new QueryPerformer(); new Thread(queryPerformer).start(); } public void mouseClicked(MouseEvent event) { // Plot area clicked if (queryPerformer != null) { queryPerformer.setPlotAreaClicked(true); } } Please note that the above is not optimal and some things have not been handled (such as multiple run button presses).  Let the EventDispatcherThread handle input. Rather your spawned thread should be the one doing calculations. I built an interactive UI that did something similar a year or two ago and that's how I accomplished this behavior. Essentially you create a producer/consumer model between the GUI and the data processing thread. When an input is fired off you feed to the consumer thread and resume activity. All you need to do is create a SwingWorker instance where the long-running database code is in the doInBackground() method and the subsequent UI updates are in the done() method and execute this SwingWorker thread in your button's ActionListener.
69,A,"JTree connecting lines in Substance Using the new version of the substance look and feel for Java the connecting lines in a typical JTree are not drawn (parent - child lines). In the official forum in java.net someone asked the same thing and the answer of the developer for this is that it was a choice based on the newer UI's and there is no plan to implement the option in the future. His answer also said that you could implement this yourself by subclassing the SubstanceUI class and implementing the paintHorizontalPartOfLeg / paintVerticalPartOfLeg methods. Can someone either explain the process needed or maybe give me an example? I'm sure that someone must have done this since it is a very weird choice on behalf of the developer not to draw these lines. This is all going from memory. I will edit if I find anything wrong with this tomorrow. check out BasicTreeUI or MetalTreeUI. I believe they both paint lines. What you need to do is create a new class that extends (I'm guessing on the name here) SubstanceTreeUI and override paintHorizontalPartOfLeg() and paintVerticalPartOfLeg(). Then you have a choice: You can call myTree.setUI( new MyTreeUI() ) UIManager.getDefaults().put(""TreeUI"" MyTreeUI.class.getName() ) at some point before you make your JTree If you don't want to subclass try UIManager.getDefaults().put(""TreeUI"" BasicTreeUI.class.getName() ) and see if that looks ok. EDIT 2: After further review it would be easier to just call .setUI(new BasicTreeUI()) on your JTree or call UIManager.getDefaults().put(""TreeUI"" BasicTreeUI.class.getName() ) before creating your tree. EDIT: SubstanceTreeUI is a cubclass of BasicTreeUI. It has overridden paintXXXPartOfLeg(). Horiz: @Override protected void paintHorizontalPartOfLeg(Graphics g Rectangle clipBounds Insets insets Rectangle bounds TreePath path int row boolean isExpanded boolean hasBeenExpanded boolean isLeaf) { boolean toPaint = (!this.tree.isEnabled()) || this.isInside || !FadeConfigurationManager.getInstance().fadeAllowed( SubstanceLookAndFeel.TREE_DECORATIONS_ANIMATION_KIND tree); if (FadeTracker.getInstance().isTracked(this.tree SubstanceLookAndFeel.TREE_DECORATIONS_ANIMATION_KIND)) { Graphics2D graphics = (Graphics2D) g.create(); graphics.setComposite(TransitionLayout .getAlphaComposite(this.tree FadeTracker.getInstance() .getFade10(this.treeSubstanceLookAndFeel.TREE_DECORATIONS_ANIMATION_KIND) / 10.0f g)); super.paintHorizontalPartOfLeg(graphics clipBounds insets bounds path row isExpanded hasBeenExpanded isLeaf); graphics.dispose(); } else if (toPaint) { super.paintHorizontalPartOfLeg(g clipBounds insets bounds path row isExpanded hasBeenExpanded isLeaf); } } It looks like the lines are only painted if either of the following is true: The Tree is not enabled the mouse is in the tree bounds [this.inside] and fading (?) is not allowed on the tree [!FadeConfigurationManager.getInstance().fadeAllowed(...)] The FadeTracker is tracking the JTree [FadeTracker.getInstance().isTracked(...)] Figure out how to ensure that the JTree is being Tracked by the FadeTracker or try this VERY rough hack (see below): You could also cut and paste the code from BasicTreeUI's paintXXXPartOfLeg methods into a subclass. public MyTree extends JTree { private boolean overrideIsEnable = false; public void setOverrideIsEnable(boolean b) { overrideIsEnabeld=true; } public boolean isOverrideIsEnable(boolean b) { return overrideIsEnabeld; } public boolean isEnabled() { if(overrideIsEnabled) return false; return super.isEnabled(); } } class MyTreeUI extends SubstanceTreeUI { protected void paintHorizontalPartOfLeg(Graphics g Rectangle clipBounds Insets insets Rectangle bounds TreePath path int row boolean isExpanded boolean hasBeenExpanded boolean isLeaf) { if(this.tree instanceof MyTree) try { Field f = SubstanceTreeUI.class.getDeclaredField(""inside""); f.setAccessible(true); Boolean v = (Boolean)f.get(this); f.set(thisBoolean.true); ((MyTree)this.tree).setOverrideIsEnable(true); } catch(Throwable t) { //want to default back to substanceUI if this fails. } super.paintHoriz.....(); try{ f.set(thisv); ((MyTree)this.tree).setOverrideIsEnable(true); }catch(Throwable t) { //see above } } //repeat for Vertical } thank you very much. Your answer is right on the spot. very helpful. Which one? I outline several. I'm just interested in which you tried and which you liked best. Thank you for your answer. What i am actually interested in is how exactly do i draw the lines once i subclass and implement the methods. (Mind you the substanceUI class does not have these methods. it's not a descendant of BasicUI). Could you maybe give me a small example or point me to a direction where i can find info? Please take a look at my edited answer. FYI You do not want to be looking at SubstanceUI you want to be looking at SubstanceTreeUI which (according to google) has both methods. For anyone else who's googled across this answer: UIManager.getDefaults().put(""TreeUI"" BasicTreeUI.class.getName() ); Worked perfectly for me (remember to put it before the creation of your JTree) using Substance. This is however with custom Icons for each of my JTree nodes (I'm not sure how it will look otherwise). Thankyou!"
70,A,"Tab character in Java Trying to get a tab character into a JMenuItem using \t but it's not printing. I bet it's something really basic I'm missing. Here's the code menuItem = new JMenuItem(""New\tCtrl + N""); Thanks This should probably be tagged under Swing too! You're not supposed to add keyboard shortcuts manually there's an API for it that puts them in the proper place. Look here for instance or search the Swing docs for ""accelerators"".  Try this instead: menuItem = new JMenuItem(""New""); menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N ActionEvent.CTRL_MASK)); You should also add mnemonics for usability: menuItem.setMnemonic(KeyEvent.VK_N); See the Java Look and Feel Guidelines for greater clarification especially volume 1. Alternative: `KeyStroke.getKeyStroke(""control N"")`"
71,A,AffineTransform: scaling a Shape from its center I'm trying to scale a rectangle from its center using AffineTransform. I'm sure the solution is obvious but I cannot make it work ! Here is what I've tested so far... import java.awt.Color; import java.awt.Dimension; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.Rectangle; import java.awt.geom.AffineTransform; import javax.swing.JOptionPane; import javax.swing.JPanel; public class Test extends JPanel { Test() { super(null); setOpaque(true); setBackground(Color.WHITE); setPreferredSize(new Dimension(200200)); } @Override protected void paintComponent(Graphics g1) { super.paintComponent(g1); Rectangle r= new Rectangle(55getWidth()-10getHeight()-10); double cx= r.getCenterX(); double cy= r.getCenterY(); Graphics2D g=(Graphics2D)g1; g.setColor(Color.BLACK); AffineTransform old= g.getTransform(); for(double zoom=0.9; zoom>=0.5; zoom-=0.1) { AffineTransform tr2= new AffineTransform(old); tr2.translate(-cx -cy); tr2.scale(zoom zoom); tr2.translate(cx/zoomcy/zoom); g.setTransform(tr2); g.draw(r); g.setTransform(old); } } public static void main(String[] args) { JOptionPane.showMessageDialog(null new Test()); } } But it doesn't work.... Any suggestion ? I assume you're trying to track concentric/internal rectangles? Assuming scaling fixes the location of the top lefthand corner of the rectangle (which I think is right but it's been a long time since I've done graphics in Java) you need to translate the rectangle in the direction opposite to the scaling. tr2.translate( r.getWidth()*(1-zoom)/2 r.getHeight()*(1-zoom)/2 ); tr2.scale(zoomzoom); g.setTransform(tr2); So you move the rectangle left and up half of the change in width and height. Doesn't seem to work. your solution doesn't work but it gives me some new ideas thanks @mmyers: what is the result you get? I don't have access to a Java IDE at work so I can't test it myself. I'm working largely from memory. @Welbog: With the original code all the squares originate in the upper left corner. With your code they get progressively shifted towards the middle but not enough. Ah got it. All you have to do is move the scale() after the translate() and it works perfectly. @mmyers: Good to know. I edited my answer to reflect that. Hooops I'm sorry I was too fast. This centered square was the most special case. When this is a rectangle anywhere on the screen your solution doesn't work. I again tried to shift the shape from its center scake and re-center but I still cannot get the right solution...  I see what you mean when you're dealing with rectangles. The reason is because the initial calculation for the translation didn't take into account the size of the container object. Use this instead: tr2.translate( (this.getWidth()/2) - (r.getWidth()*(zoom))/2 (this.getHeight()/2) - (r.getHeight()*(zoom))/2 ); tr2.scale(zoomzoom); g.setTransform(tr2); What this is doing is translating the rectangle to the center of the panel before scaling it. In my tests it works just fine.  This involves a process called conjugating a transform. If S is the scaling you want to do and T is the transformation that takes point (00) to the point that is to be the center of your scaling then the transform that does the job is T(S(inverse(T)))  (Later) Here is a solution working without any prior knowledge of the Dimension of the panel. import java.awt.Color; import java.awt.Dimension; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.Shape; import java.awt.geom.AffineTransform; import java.awt.geom.Ellipse2D; import javax.swing.JOptionPane; import javax.swing.JPanel; public class Test extends JPanel { private static final long serialVersionUID = 1L; private Test() { super(null); setOpaque(true); setBackground(Color.WHITE); setPreferredSize(new Dimension(600600)); } @Override protected void paintComponent(Graphics g1) { super.paintComponent(g1); Shape r= new Ellipse2D.Double(5380400200); double cx= r.getBounds2D().getCenterX(); double cy= r.getBounds2D().getCenterY(); Graphics2D g=(Graphics2D)g1; g.setColor(Color.BLACK); AffineTransform old= g.getTransform(); g.drawLine((int)cx-10 (int)cy (int)cx+10 (int)cy); g.drawLine((int)cx (int)cy-10 (int)cx (int)cy+10); for(double zoom=1; zoom>=0.1; zoom-=0.1) { AffineTransform tr2 =AffineTransform.getTranslateInstance(-cx -cy); AffineTransform tr= AffineTransform.getScaleInstance(zoomzoom); tr.concatenate(tr2); tr2=tr; tr =AffineTransform.getTranslateInstance(cx cy); tr.concatenate(tr2); tr2=tr; tr= new AffineTransform(old); tr.concatenate(tr2); tr2=tr; g.setTransform(tr2); g.draw(r); g.setTransform(old); } } public static void main(String[] args) { JOptionPane.showMessageDialog(null new Test()); } }
72,A,"Java problem: Need a sorted JList to represent a database table I've found a sample for a sorted JList but my application is powered by an embedded H2 database so I'm wondering if there isn't a better way to implement this with that in mind. Especially considering the table in question could become enormously large and duplicating all that data in a JList's list model seems to kinda defeat the point of having a database to manage it. Is there a good way to do this? Or am I forced to cobble together some clumsy hack to allow the JList to ""scroll"" through dynamically queried chunks of data or something? Your JList's ListModel is responsible for exposing the backing data as an ordered list. ListModel's methods will be called by JList from the UI (AWT event) thread so its performance needs to be pretty good. This is why most implementations have the ListModel's backing data in memory. I suppose you could implement ListModel with your database as the backing data. You'll most likely extend AbstractListModel to get the listener registration and implement getElementAt(int) and getSize(). getElementAt would then be responsible for getting the object for a particular index. Keep in mind that JList will call getElementAt many times for different indices so you may find yourself caching the results. Depending on how much data you're caching you might just retrieve the entire dataset from the database."
73,A,"How to actually use Swing Application Framework? I'd like to learn how to effectively use Swing Application Framework. Most of the the examples I've found are blog entries that just explain how to great it is to extend SingleFrameApplication and override its startup method but that's about it. Sun's article is almost two years old as is the project's own introduction and there has apparently been some evolution since then. Are there any recent and thorough tutorials/HOWTOs available anywhere? There is JavaDoc of course but it's hard to get the big picture from there. Any pointers are appreciated. Update: I realized that there's a mailing list archive at the project's site. While somewhat clumsy (compared to StackOverflow ;) it seems to be quite active. Still it's a pity that there are no real tutorials anywhere. The information is scattered here and there. Update 2: Let me clarify - I'm not having trouble using Swing (the widget toolkit) itself I'm talking about its Application Framework which is supposed to ease things like application lifecycle (startup exit and whatever happens between them) action management etc. - that is things that most Swing applications will need. It's cool to get such framework to be standard part of Java. The only problem is to learn how it's intended to be used. Update 3: For the interested there was just some discussion at the project's forum regarding the current state and future of JSR 296. Shortly: the current version 1.03 is considered to be quite usable but the API is not stable and it will change to the final version in Java 7. The package name will also change so Java 7 will not break current applications made on SAF. Update 4: Karsten Lentzsch stated at the above mentioned forum: ""I doubt that it can be included in Java 7; and I'll vote against it."". I would rather not question the sincerity of this great guru and it's certainly wise not to let anything flawed to slip into the core JDK but frankly it's a strange situation - he is the author of JGoodies Swing Suite which is partly a commercial competitor of JSR 296 and he is sitting in the committee that will decide whether this JSR will be included to standard Java. It was the same thing with JSR 295 Beans Binding which I wrote about earlier. Given the current state of SAF I think the best solution is to wrap the current implementation into a ""homebrew"" framework which can then accommodate possible changes to the existing API. You could take a look at SwingWiki which has a series of best practices and tutorials although it hasn't been updated for about two years. SwingWiki does no longer exist.  While it is true that there has been some evolution of Swing in the last two years the fundamentals haven't changed much. I would start with Sun's own tutorials. If you want books then plenty are available from the usual suspects (McGraw Hill O'Reilly) and others for those with all levels of knowedge. Some books refer to Swing by its old name ""Java Foundation Classes"" or JFC. Oops. Just ignore me. The original question is about ""Swing Application Framework"" (aka JSR-296) not about Swing itself.  First of all my personal advice would be not to use the latest version of SAF which is more like ""refactoring in progress"" (and this has not evolved for 6 months now...) I much prefer version ""1.03"" which although not perfect is much more stable and usable (I mean in a real-life application). It is true that resources about SAF are scarce. I remember I followed this path: read a JavaOne 2007 seminar about it; this gives quite a good picture about it used it and read javadoc whenever needed sometimes took some looks at the source code to palliate javadoc lacks The mailing list is not that active currently (but it's true traffic has just restarted a little bit since the beginning of the year however I haven't seen there any Sun representative since August or September 2008!) Last year after about one year of practice with SAF I have presented a talk at Jazoon'08 you can find the slides on my blog. This presentation was more about tips & tricks I gathered while using the framework. Sometimes I also had to patch some points by myself because many issues are long standing (some not important to me some other blocking). I remember having seen (not attended) another presentation about SAF practice in a conference I think in Sweden sorry can't remember more detail. Was interesting also. That's pretty much what exists about it (to my knowledge). Thanks! I'll have a look at your slides.  Not that I know of. I decided to avoid using swing app framework until it matures (or dies). I decided to use jgoodies libraries instead to wait for Sun to do something for swing developers. I'm already using JGoodies Binding (free) and I'll seriously consider buying JGoodies whole Swing Suite (expensive). It is very high quality stuff indeed. Can you add a link? http://jgoodies.com/ I wish it wasn't so expensive :( Yep but the base libraries are BSD licensed and are quite good.  Netbeans 6.5 has skeleton applications that can give you a good kickstart. Just create a new project from within the IDE and select Java > Java Desktop Application. Thanks it seems to cover at least ResourceMap and TaskMonitor classes."
74,A,How can I flash the Windows taskbar using Swing? I'm developing a Swing application and I need to flash the Windows taskbar. I can't use frame.requestFocus() because I don't want to steal focus from any other application. I don't know if it applies to newer versions of Windows but the .toFront() method used to flash the window if none of the current VM's windows were in the foreground. This means that calling frame.toFront() on a minimized frame would always make it flash... There's a downside to this approach. If a user is in the application typing in a JTextArea for instance this functionality removes focus and disrupts the typing.  Using Swing per se you very probably can't; that's a Widnows specific thing. Uh and? The Windows Taskbar is still windows specific.  JNIWrapper with its winpack extension can do what you want. The Demo on the site shows it in action. Link is broken! 4 year old link has been corrected.
75,A,Dragging text from a Word document to a Java text component? When you drag a block of text from a Word document into a Java text component the text is removed from the Word document. This is obviously undesirable in some cases. Is there a way I can prevent Word from removing the text while still copying it into the Java text component? Try holding down ALT CTL or SHIFT (I forget) while dragging. I believe this changes the default behavior of your cursor from cut -> copy. You may be able to set the default Drop action in your JText component to only allow copy I know you can do that in SWT.  Return false from TransferHandler.importData(JComponent compTransferable t). You can keep the data but you tell the drag system that you didn't take it. Caveat: This requires implementing one's own TransferHandler. Corrected in answer. But thanks this is exactly what I was looking for.  I think that is the default behavior (This would happen even if you drag the text from one Word document to another one). You may want to keep the 'Ctrl' key pressed to achieve the desired results (Ctrl + Drag forces a copy operation).  Can't you make use of copy/paste? Highlighting and dragging anything around in a Word document or out of a word document into another document or text area is the equivalent of cutting and pasting. Ctrl + C (copy) and Ctrl + V (paste) works just as fast. Unfortunately I can't force any particular behavior from the user which is why I'm trying to find a programmatic solution. :o) Then I think you're stuck. Word's default behavior is that drag 'n drop is the equivalent of cut/paste unless you use a hot key to override it. Otherwise you have to find a way to go in and modify Word itself which is probably a no-no. :-/ Perhaps the best solution is to include text warnings encouraging copy/paste. I feel like there must be *some* way to override this behavior on the recieving end... I can drag from a Word document into a text box on a web browser and it doesn't cut the text from the Word document.
76,A,"A Fast Way to Determine Whether A Componet is Found In JPanel May I know how can I determine whether a component is found in JPanel? boolean isThisComponentFoundInJPanel(Component c) { Component[] components = jPanel.getComponents(); for (Component component : components) { if (c== component) { return true; } } return false; } Using loop is not efficient. Is there any better way? So you got in a huff about my editorial comments and ended up accepting an answer that not only uses a loop but hides it behind a collection. No. Is merely based on 'false' technical reason. In order to get >1st depth level parent-child relationship I have use to recursive call to achieve. At the time I read Tom Hawtin's my first thought is getComponents will return >1st depth level children (which is not true). Hence I first thought it is more straight forward than yours and this makes me click on accept it as answer without much thought. Is my mistake. The answer shall go to yours :) Performance of this operation is highly unlikely to be a bottleneck. Looking through the contents of a container probably indicates bad design. Tell the GUI what to do don't interrogate its state. Probably a better way to write the code is to use existing routines. Whilst there is some overhead they are more likely to be already compiled (therefore possibly faster) and are less code. boolean isComponentInPanel(Component component) { return java.util.Arrays.asList(panel.getComponents()) .contains(component); } (Or use kdgregory's answer.)  you can use jPanel.isAncestorOf(component) for recursive search  if (c.getParent() == jPanel) Call recursively if you don't want immediate parent-child relationships (which is probably the case in a well-designed panel). ... although in a well-designed panel it's very questionable why you'd need to know whether a component is contained in the panel. +1 for ""... although in a well-designed panel it's very questionable why you'd need to know whether a component is contained in the panel."" Is a dynamic panel a poorly designed panel? There are no one rule that fit for all. Use common sense. Dynamic panel is good and my users is happy about it and dynamic panel need to discover parent/ child dynamically during run-time. As along as my users is happy it is nothing to be questionable when I need to know whether a component is contained in the panel."
77,A,"MouseListener on JFrame I want to be notified of mouse events (specifically the mouse entered and exited events) on my JFrame. But when i add a mouselistener to it i get the events on the borders of the frame not the entire frame with it's contents. Any ideas as to why? EDIT : Or at least do you have an alternative? I want a ""gloabal"" way to catch mouse events on the JFrame. Maybe a mouselistener is not the answer. Because the contents ( probably a JPanel ) are ""shadowing"" and consuming the events and they don't reach the JFrame. What you can do is to add the same listener to all the children. There should be a better way though.  An alternative to AWTEventListener is to push an EventQueue. This has the advantage that applets and WebStart application can do this.  You can get all events and check if their source is a component in the JFrame. See Toolkit.addAWTEventListener  There is an invisible component that overlays the whole GUI the ""glass pane"". You can attach your listeners to that. Example: JFrame frame = new JFrame(); Component glassPane = frame.getGlassPane(); glassPane.addMouseListener(myListener); If you want your intercepted events to pass through to the underlying components you can redispatch them. For example: public void mouseMoved(MouseEvent e) { redispatchMouseEvent(e false); } I must agree with @Sawas alas. I implemented the code in http://codeidol.com/java/swing/Rendering/Create-a-Global-Right-Click/ (similar to what you show) but while it worked quite fine I had issues with underlying L&F components like split bars (no cursor change over them and drawing fails when going too fast) and scrollbar buttons (no scrollbar move). i would have to enable it. this would prevent the components beneath to receive events You can redispatch. See my revised answer. There is entire issue when enabling the glass pane. It is best described in Filthy Rich Clients. You need to foresee all the problems and rectify them. For instance you also need to account for key events mouse cursor changes among other things. I'm looking for a ready made solution. something that was designed to notify on mouse events on a frame level."
78,A,"Why do my Swing application windows intermittently not close when the application exits? Why are my Swing applications not closing when using Netbeans 6.5 on Ubuntu 8.10 with Sun JDK 6. Even the Netbeans tutorials downloaded from the Netbeans website do the same. When I close the application I'm left with a dead window. I then have to manually kill the process. It comes and goes but I can't figure out what triggers this behavior. I have also run my applications from the command line terminal using openjdk (6b12-0ubuntu6.1) and sun-java (6-10-0ubuntu2) still no luck. I have noticed when running it through netbeans after trying to close it netbeans still shows the app as running and after manually killing the process my netbeans log prints ""Java Result: 137"" Update - 4Mar: I have also tried upgrading to Sun JDK 6u12 and Netbeans 6.7m2. But still no luck. Update - 4Mar: Ok after further testing I found that this behavior starts as soon as I add JPA to my application. That makes explains why the JPA tutorial examples on the netbeans website also do the same. I have tried writing an ExitListener to first close the EntityManager but no luck yet. If I delete the EntityManager Query and List from my Form Panel the applications closes properly again. This is caused by using the ""System Default"" or ""GTKLookAndFeel"" look and feel. I switched over to ""NimbusLookAndFeel"" and the issue disappeared. I have tried all suggestions including Netbeans 6.7 and Java 6.12. Still unclear as to why this is happening on Ubuntu 8.10.  What minor release of Java 6 are you using? I was on update 10 I think and having a lot of issues on Ubuntu 8.10 upgrading to .12 helped a lot. I'm on 10 also. I'm going to do the upgrade and see if it works. I'm positive that this might just do the trick. Thanx  make sure you call setDefaultCLoseOperation(JFrame.EXIT_ON_CLOSE);  Have you looked at http://stackoverflow.com/questions/258099/how-to-close-a-java-swing-application-from-the-code yet? I have yes. Thank you. Like I said even the out of the box examples on the Netbeans website does the same."
79,A,"Converting Swing application to JavaFX What are necessary steps for converting Swing application to JavaFX? It would be interesting to know also about best practices for performing such task (i.e. problems that can be encountered and resolutions). I don't know if there are ""best"" practices there as JavaFX is quite new and people are more busy making new JavaFX programs than converting old Java ones... First I would ask why you want/need to do that... Second I would say it depends on the purpose and complexity of the Swing program. If that's a plain dialog it shouldn't be hard. If it is a complex application with sub-panels lot of pop-up dialogs menus MDI behavior with docking etc. it might be hard to impossible to port... Somehow it might be better to rewrite the GUI from scratch knowing that you have to either use a wrapper of Swing components in JavaFX or limit yourself to the (currently) limited range of native JavaFX components. Now if your application was written with good principles you can rewrite only the view and controller parts and re-use (most of) the models / business logic as JavaFX can very well exploit Java classes."
80,A,"How to notify the user of important events for a desktop application? Our customer is using our software (Java Swing application started using Webstart) besides other software like MS Office to do his job. From time to time there are important events he has to deal with in our software without much delay. The customer wants to have a prominent notification then. Now he might be using Excel at the moment so popping up a message box will not suffice (although the entry in the task bar will be flashing). We need some mechanism like the Outlook notifier i.e. a popup that is always visible but does not steal the focus. The notifier should be displayed all the time until the reason for the message has gone (the user has solved the issue) or the user has closed the message (like in outlook). Additionally we want to display a tray icon and maybe play a sound. I've tried the Java6 java.awt.SystemTray as well as the JDIC (version 0.9 since we already have that lib in the classpath of that project) equivalent but I did not find a way to set the timeout of the TrayIcon.displayMessage method and the message seems not to be always on top. Is there any other option besides JNI to achieve the requested behavior? If JNI is the only choice and since Windows is the only platform of our customers is the Outlook notifier an Outlook only feature or is it freely usable through the Windows API? Or what other options exist to notify the user about an important task to perform in one software without hindering him to complete his current task in another software. A system modal dialog therefore is no option! If you've got a budget consider a license for JIDE. JIDE has an alert popup designed to look exactly like the outlook popup/alert widget.  Using Tray: Which component are you using to show message (JPopup JDialog JFrame JWindow)? Whichever you use try to make it unfocusable(override isFocusable method) and call toFront. Also let me know the result. java.awt.TrayIcon has a method displayMessage that pops up a bubble with an icon depending on the messagetype a title and a text. So there is no control of how the message is displayed. This feature is documented to be platform dependent. Therefore the actual behavior might change in the future.  With OS X the obvious answer would be to use Growl. But there exists a little project doing a similar service on windows environments. It's called Snarl. This might give you a new option to try. Drawback: You'll have to install a tool on the client's machines. From your description I assume you have a defined group of users on company workplaces right? So this might acceptable nevertheless. Yes it is a defined group of users on company workplaces I will have a look at the tool. Growl and Snarl seem to be impressive tools and seem to be easily used from an application without much effort with a nice result. However the need to install the tool on every client pc might be a no go for our customer. Snarl4Java is published under GPL and therefore no option for us. The only way would be to implement the connection using JNI ourself.  Try using setAlwaysOnTop on your JFrame/JWindow. Nice hint. Using an undecoraded JDialog with setAlwaysOnTop does not steel the focus and really is always on top system-wide. In combination with the java.awt.SystemTray this might be what we need. I think this will be the way to go for us since Snarl is nice but not really an option because of the install overhead. Using java.awt.GraphicsEnvironment I will try to position the window at the lower left corner (assuming the user has the task bar at the default location).  Here is an example: class AlertWindow extends Window implements MouseListener { AlertWindow(JFrame frame) { super(frame); this.setAlwaysOnTop(true); this.setFocusable(false); this.setSize(200 200); this.setLocation(500 0); this.setBackground(Color.BLACK); addMouseListener(this); try { Class<?> awtUtilitiesClass = Class.forName(""com.sun.awt.AWTUtilities""); Method mSetWindowOpacity = awtUtilitiesClass.getMethod(""setWindowOpacity"" Window.class float.class); mSetWindowOpacity.invoke(null this Float.valueOf(0.50f)); } catch (NoSuchMethodException ex) { ex.printStackTrace(); } catch (SecurityException ex) { ex.printStackTrace(); } catch (ClassNotFoundException ex) { ex.printStackTrace(); } catch (IllegalAccessException ex) { ex.printStackTrace(); } catch (IllegalArgumentException ex) { ex.printStackTrace(); } catch (InvocationTargetException ex) { ex.printStackTrace(); } } public void mouseClicked(MouseEvent e) { this.setVisible(false); } public void mousePressed(MouseEvent e) { } public void mouseReleased(MouseEvent e) { } public void mouseEntered(MouseEvent e) { } public void mouseExited(MouseEvent e) { } } Since you do the same thing with all of the exceptions... why not just cath Exception instead? Or am I missing something?"
81,A,"How can I travese to a next / previous page in a swing GUI I am new to Swing. I am trying to develop an application using Swing. I have managed to create the first page of my application. Now what I want to do is to traverse to a new page using the next button. But am not able to find a way to do it using Swing. Also if I click the previous button would I be able to get the data that I had entered in the text boxes or selected using radio buttons on the previous page. I think this can be done pretty easily in Struts but how is this to be achieved using Swing. Please do help. Thanks a lot. Would be helpful to get some details about what you are actually trying to do. -Pages? -Which ""Next Button""? -...? I assume you're trying to build a wizard-style swing dialog? swing does not offer an out-of-the-box framework for this type of task (but of course it offers all UI elements/controls that you will need to create one). just google for ""swing wizard framework"" and you will find plenty of inspiration -- unfortunately i can't recommend a single best one (at my company we have written our own) but i am confident that you will either find one that will work for you or you will familiarize with some patterns that will help you to write one yourself -- good luck!  Try a tabbed pane or use a CardLayout. http://java.sun.com/docs/books/tutorial/uiswing/components/tabbedpane.html http://java.sun.com/docs/books/tutorial/uiswing/layout/card.html  I am using the link you have sent. The basic motive is achieved on having a wizard but now i m stuck at a point. The problem is... suppose i have entered some value on screen 1 and then i move to screen 2.. and on basis on screen 1 i have to display some values on screen 2.. how do I get the values set in screen 1 in screen2 using the same code given in the link u have mentioned.  You can create different views like ""Login"" ""Configuration"" ""MainPage"". The views will contain all components you want to show at the screen. You can implement a ViewManager who can handle this views (Show one of the views). At the bottom of the Main Frame you can add a Button area where the forware/backward buttons are placed. At the center of the frame you will show the views. When the button are selected the ViewManager decideds which view is set to visible. From the ViewManager you can get every information from the views you want. The views can enter the ViewManager and can get the information they need from another view. Hi Markus But wouldn't all this view management be in context of a web app? I am developing a desktop application and want to manage the same there.  This one is old but might just get you started: http://java.sun.com/developer/technicalArticles/GUI/swing/wizard/ I do not now how to do it in that specific situation just make sure you store your data in a place that is accessible from both the screens if there is currently none then make sure to give both the screens a reference to a third object and store it there. Hi Simon using the linki am bale to hv wizard but suppose i hv entered some value on screen1 and then i move to screen2and on basis on screen1 i have to display some values on screen2 how do I get the values set in screen 1 in screen2 using the same code given in the link u have mentioned."
82,A,Anchoring and Docking Controls in java Swing In .net there is a control called anchoring that is used to resize controls dynamically with the form. When a control is anchored to a form and the form is resized the control maintains the distance between the control and the anchor positions. My question is that is there any controls in java that does same functionality as anchoring in .net. As for an example i have selected a textfield and put it on the panel and resized it properly. Now when i change the size of window(JFrame) or maximize the window the textfield will not maintain the same distance as it was previously. I have been using netbeans and i havent found any properties in pallete manager that answers my question. Please explain me with an example or some links. Java Swing uses Layout Managers to manage the size and postion of visual components. This is the official java tutorial on how to use this Layout managers: http://java.sun.com/docs/books/tutorial/uiswing/layout/using.html And there is a brief description of the most common layout managers FlowLayout (default): it disposes the components left to right and up to down. BorderLayout: it divides the container in NORTH SOUTH WEST EAST center CENTER. Only one component by position. Components on border expands and the center component uses the space avaiable GridLayout: you initialice the manager indicating how many rows and cols the grid is going to have. Each cell has same size and you start adding component on the top left cell. GridBagLayout: the MOST fine grained layout manager you can do anything with this but is a bit complicated see the java documentation for it. NullLayout (when you nullify the container's layout manayer): no layout manager components uses the location and size properties to show on components. And of course containers inside in other containers can use a different layout manager than their parent. Combining layout managers is a difficult art to learn.  Netbeans has inbuilt support for designing GUIs using the Matisse GUI builder. This is the closest you'll get to the drag & drop style form design that's available with environments such as VB. There is a flash demo here. (Personally I'm not a huge fan of this approach though as it autogenerates a lot of code that quickly becomes unmaintainable especially if not everyone in your development team is using Netbeans.)  If you've only got a single control then using java.awt.BorderLayout and adding your control with BorderLayout.CENTER is your best bet. If you've multiple controls then you need to use java.awt.GridBagLayout. You need to set the following: gridBagConstraints.anchor = GridBagConstraints.NORTHWEST; gridBagConstraints.fill = GridBagConstraints.BOTH; gridBagConstraints.weightx = 1; gridBagConstraints.weighty = 1; when adding the control you want to re-size. There's a tutorial about it here: http://java.sun.com/docs/books/tutorial/uiswing/layout/gridbag.html
83,A,"JDialogs cause my application's menus to disappear on OSX Whenever any of my JDialogs have focus the toolbar does not display any menus accept for my applications main menu (it doesn't show file edit etc....). Is this an issue inherent to JDialogs/Swing or is this some sort of problem with how I made my dialogs? Swing can optionally use the JMenuBar from your application's JFrame and display it along the top of the screen. Set the following property to enable that feature. System.setProperty(""apple.laf.useScreenMenuBar"" ""true""); Unfortunately this does not work with JDialog only JFrame."
84,A,"How to get the z order of JInternalFrames in a JDesktopPane How would one go about getting the z order (layer depth of ) all the JInternalFrames inside a JDesktopPane. There does not seem to be a straight forward way for this. Any ideas? Although I haven't tried this the Container class (which is an ancestor of the JDesktopPane class) contains a getComponentZOrder method. By passing a Component which is in the Container it will return the z-order of as an int. The Component with the lowest z-order value returned by the method is drawn last in other words is drawn on top. Coupling with the JDesktopPane.getAllFrames method which returns an array of JInternalFrames I would think that one could obtain the z-order of the internal frames. Edit I've actually tried it out and it seems to work: final JFrame f = new JFrame(); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); final JDesktopPane desktopPane = new JDesktopPane(); desktopPane.add(new JInternalFrame(""1"") { { setVisible(true); setSize(100 100); } }); desktopPane.add(new JInternalFrame(""2"") { { setVisible(true); setSize(100 100); } }); desktopPane.add(new JInternalFrame(""3"") { JButton b = new JButton(""Get z-order""); { setVisible(true); setSize(100 100); getContentPane().add(b); b.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { JInternalFrame[] iframes = desktopPane.getAllFrames(); for (JInternalFrame iframe : iframes) { System.out.println(iframe + ""\t"" + desktopPane.getComponentZOrder(iframe)); } } }); } }); f.setContentPane(desktopPane); f.setLocation(100 100); f.setSize(400 400); f.validate(); f.setVisible(true); In the above example a JDesktopPane is populated with three JInternalFrames with the third one having a button which will output a list of JInternalFrames and its z-order to System.out. An example output is the following: JDesktopPaneTest$3[... tons of info on the frame ...] 0 JDesktopPaneTest$2[... tons of info on the frame ...] 1 JDesktopPaneTest$1[... tons of info on the frame ...] 2 The example uses a lot of anonymous inner classes just to keep the code short but an actual program probably should not do that."
85,A,"How do you add a border to a row in a Jtable? I have a Jtable and I want to highlight a row by adding a border to the row. I have extended a DefaultTableCellRenderer and I figure the work needs to be done in the getTableCellRendererComponent method. I'm guessing that since there doesn't seem to be a concept of a row that I need to create a custom border for the individual cells in the row. Something like a left side top and bottom for the first cell a top and bottom for all the inner cells and a top bottom and right side for the last cell in the row. I'm having problems finding out how to go about actually executing the thought process. I'm not sure how to use the setBorder() method or if that's even the direction I need to take. You have the correct idea in mind you will need to set the border on the label in the cellrenderer depending on where it is in the table(i.e. edge center etc). Take a look at matteborder. You can specify which areas to draw a border along w/ width and color. Thanks that pointed me in the right direction. I'll edit my question with a more complete answer for future reference. +1 but I'm outta votes :)  I would not create a custom renderer for this. Yes it will work if all your data is of the same type. But what happens when you start to mix Strings with Dates and Integers and Booleans which all use different renderers? Then you would need to create 4 custom renderers. The better approach is to override the prepareRenderer(...) method JTable so you can add the code in one place. Here is an example to get you started. In reality you would want to use a CompoundBorder that contains a MatteBorder for the top/bottom and and EmptyBorder for the left/right and you would create a single instance of the Border. import java.awt.*; import java.util.*; import javax.swing.*; import javax.swing.table.*; import javax.swing.text.*; import javax.swing.border.*; public class TablePrepareRenderer extends JFrame { JTable table; public TablePrepareRenderer() { Object[] columnNames = {""Type"" ""Company"" ""Shares"" ""Price"" ""Boolean""}; Object[][] data = { {""Buy"" ""IBM"" new Double(1000) new Double(80.5) Boolean.TRUE} {""Sell"" ""MicroSoft"" new Double(2000) new Double(6.25) Boolean.TRUE} {""RSell"" ""Apple"" new Double(3000) new Double(7.35) Boolean.TRUE} {""Buy"" ""Nortel"" new Double(4000) new Double(20) Boolean.TRUE} }; DefaultTableModel model = new DefaultTableModel(data columnNames); table = new JTable( model ) { // Returning the Class of each column will allow different // renderers to be used based on Class public Class getColumnClass(int column) { return getValueAt(0 column).getClass(); } public Component prepareRenderer( TableCellRenderer renderer int row int column) { Component c = super.prepareRenderer(renderer row column); JComponent jc = (JComponent)c; // Color row based on a cell value // Alternate row color if (!isRowSelected(row)) c.setBackground(row % 2 == 0 ? getBackground() : Color.LIGHT_GRAY); else jc.setBorder(new MatteBorder(1 0 1 0 Color.RED) ); // Use bold font on selected row return c; } }; table.setPreferredScrollableViewportSize(table.getPreferredSize()); table.changeSelection(0 0 false false); JScrollPane scrollPane = new JScrollPane( table ); getContentPane().add( scrollPane ); } public static void main(String[] args) { TablePrepareRenderer frame = new TablePrepareRenderer(); frame.setDefaultCloseOperation( EXIT_ON_CLOSE ); frame.pack(); frame.setLocationRelativeTo( null ); frame.setVisible(true); } } I already had a custom cellrenderer from some other requirements but the different data types didn't cause any problems. It doesn't matter. This approach doesn't care what cell renderer you are using. that is the key to the solution. It will work the the default renderers or your custom renderer. By the way if you have a renderer that renders Date Integers String and Booleans in a single renderer that is a terrible design.  I agree with > camickr the best way to go is to override the prepareRendere method. The following code will create a border for a row with a selected cell: @Override public Component prepareRenderer(TableCellRenderer renderer int row int column) { Component c = super.prepareRenderer(renderer row column); JComponent jc = (JComponent)c; if (isRowSelected(row)){ int top = (row > 0 && isRowSelected(row-1))?1:2; int left = column == 0?2:0; int bottom = (row < getRowCount()-1 && isRowSelected(row + 1))?1:2; int right = column == getColumnCount()-1?2:0; jc.setBorder(BorderFactory.createMatteBorder(top left bottom right this.getSelectionBackground())); } else jc.setBorder(null); return c; }"
86,A,SQL data and JTable I'm trying one sample program for practice and i want to display results of database in JTable. The problem is i have no idea how to do that. I know how to get data from database and display it on text field or console but never tried with JTable. How to do that ? Consider that i've table which is holding information like person name age city and date. i want it to be displayed via JTable. Also is it possible to update the JTable display if i add the option of adding more details in program(i mean adding entries to db then that will show immediately in JTable )? Any suggestions pointers on how to proceed is appreciated. Thanks in advance. Ok i can understand it could be duplicate. but i'm asking how to display results from SQL table to JTablestill it is duplicate? same as http://stackoverflow.com/questions/930745/how-do-i-display-a-java-resultset-visually JDBC + JTable @ google: Hacking Swing: A JDBC Table Model Mastering the JTable Making SQL Queries with JDBC and Displaying Results with Swing Ok. this is helpful but not answering my query completely. anyway thanks for the comments.
87,A,"Alternative document structure in JTextPane? In a JTextPane with a DefaultStyledDocument the document structure (hierarchy of Element objects) ends with a LeafElement that spans all the character of the enclosing paragraph. Is there a way to customize the document such that each leaf element will represent a single character? (Background: I am trying to implementing a custom coloring scheme - somewhat similar to syntax coloring in an IDE. Using setCharacterAttributes() for this purpose is not an option mainly due to performance considerations.) You may be interested in jsyntaxpane. It uses a PlainDocument instead of using the more resource hungry StyledDocument. A Leaf for each character will require lots of memory so you may want to use a leaf for each ""Token"". You can also use a StyledDocument then update the style for each Token in a separate Thread."
88,A,"How can I detect if caps lock is toggled in Swing? I'm trying to build a better username/password field for my workplace and would like to be able to complain when they have their caps lock on. Is this possible? And if so I'd like to have it detected before the client types their first letter. Is there a non-platform specific way to do this? Try this from java.awt.Toolkit returns a boolean: Toolkit.getDefaultToolkit().getLockingKeyState(KeyEvent.VK_CAPS_LOCK) Short and to the point perfect! Except that it doesn't work on all platforms. For instance it throws a UnsupportedException under OpenJDK-6 in Linux. :( JDK 1.7 i have compile time error with this keycode as others have pointed out this throws an error on Linux. Interestingly there must be an internal way to do it in Linux as Gnome displays the message ""You have the caps lock key on."" when it is on and the screen is locked. Perhaps OS has APIs but java has not implemented them? using jdk 1.6 and fedora 14  In addition to Nick's answer to react to this condition before the user presses a key you can listen to the focus event of your text entry component and test the caps-lock as the component receives focus.  here is some info on the class http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Toolkit.html#getLockingKeyState(int)"
89,A,"Java GUI Swing Model Explanation I've been working with Java GUI for a while now but the whole model/structure of JFrames paint() super etc is all murky in my mind. I need a clear explanation or link that will explain how the whole GUI system is organized. Thanks everyone some more answers would be better but this is great! I've found that simply browsing around in the source code (ctrl-click on a name if you're using NetBeans) has been really helpful. If I see a method appear in the completion dialog that I'm not familiar with I'll just click ""Go to source"" and look around until I'm comfortable with it.  I found Swing Explorer to be a precious tool to understand the hierarchy of components (particularly in complex GUIs) and look at properties (alas read-only: we get used to Firebug convenience!). It has an Eclipse plugin.  The same happened to me. Actually to this day I don't quite get 100% how all it works. Swing is a very flexible framework--perhaps too flexible. With flexibility comes a lot of abstraction and with abstraction comes confusion. :) I've found the following articles worth reading. They helped me to better understand the big picture of Swing. http://web.archive.org/web/20110413222135/http://java.sun.com/products/jfc/tsc/articles/architecture/ http://www.oracle.com/technetwork/java/architecture-142923.html (original links now broken) http://java.sun.com/products/jfc/tsc/articles/architecture/ http://java.sun.com/products/jfc/tsc/articles/architecture/ui_install/index.html They explain quite well how the model and the delegate work. It always drives me mad when I see those JLabel LabelUI ui.update etc. I hope this helps. @OscarRyz links are dead. do you have the copy? i need those for my students. thanks. @OscarRyz Cool thanks! @ihsan Unfortunately the site in Oracle has broken images:http://www.oracle.com/technetwork/java/architecture-142923.html Fortunately we have the wayback machine: http://web.archive.org/web/20110413222135/http://java.sun.com/products/jfc/tsc/articles/architecture/ Very useful link - had not seen that before; bookmarked for a closer look later. Yeahh ... I don't remember how I came to that link. I didn't found it until after several years. I don't know the ""google search"" to produce it either so I have it in my bookmarks too.  Since this question is tagged with JFrame I'll suggest a few links for understanding how JFrames and other top-level Swing containers work. I also found that Swing was (and still is) quite involved and taking a look at the documentation provided by Sun is required every once in a while -- Every time I check I seem to learn something new. First the basics: JFrame class from the Java API Specifications. The Java API Specifications often provide good detailed information about the classes. In this instance you'll notice that there are several links such as How to Make Frames section from The Java Tutorials. Aside from that I'll also recommend looking at the Lesson: Using Swing Components from The Java Tutorials. The lesson provides instructions on how to use the components provided in Swing along with some useful examples. For more specifics parts that I've found confusing when I started with Swing was all the different types of panes such as the ContentPane RootPane GlassPane. The Using Top-Level Containers section provides information and helpful diagrams on the container hierarchy of the top-level containers. The How to Use Root Panes section gets into the details about the Glass Layered and Content Panes with plenty of examples.  If after reading the Swing tutorial you find your interest lies in more advanced topics you may also wish to look at Swing Second Edition by Robinson and Vorobiev.  Filthy Rich Clients by Chet Haase and Romain Guy is a great book about Java UI. It covers some more advanced stuff too but introduction and few first chapters explain fundamental things well.  Have you looked at the Java Swing Tutorial (click here)? It does a pretty good job of covering the basics of developing Swing applications."
90,A,Compare SWT with SWING Is swt faster than swing? Where can i get good tutorials about swt? it easy to migrate from swing to swt? See also http://stackoverflow.com/questions/1037080/swing-versus-swt possible duplicate of [Java Desktop application: SWT vs. Swing](http://stackoverflow.com/questions/2306190/java-desktop-application-swt-vs-swing) I think it's important to remember SWT came in to being when Swing was very immature and I guess the Eclipse folks thought it necessary to reinvent-the-wheel (suspect in retrospect that's something they regret however thin a layer SWT is). Nowadays Swing has matured many of the problems and performance issues it used to have have been fixed and with the 3rd party extensions like JGoodies and JIDE I can't think of a good reason you would use anything but Swing for thick-client development.  I think you will experience some headache if application is to be run on different OS-es dont know for now but before there was no support for Mac OS so forget about it if your app is to be run on Mac OS. We also had this question in company and decided to go with Swing because for normal desktop application you just cannot sense the speed difference which is supposedly on SWT side and this speed you are buying with ruining WORA principle you have to bring with your application needed .dlls or .so files to natively support your application running in desired OS-es. For long time Swing part of Java (with printing) was weak point of Java. I think they will make much more out of Java if they succeeded to make Swing simple intuitive and responsive at that time. Nowadays they made some positive steps in it although still can be said swing is big complicated..  There's a comprehensive tutorial here which takes you from 'Hello World' up. Swing and SWT are two completely different APIs although the principles are the same. MIgrating your skill is easy. Migrating a program however would be a lot of work.  See this web sites: SWT AWT and Swing Swing vs SWT Swing vs SWT(2nd) Very nice webpages with example source code: SWT SWT 2d-Graphics
91,A,"JTable with a complex editor I have many custom editors for a JTable and it's an understatement to say that the usability particularly in regard to editing with the keyboard is lacking. The main reason for this is that my editors are always created with a similar (though often more complex) situation to this: @Override public Component getTableCellEditorComponent(JTable table Object value boolean isSelected int row int column) { JPanel container = new JPanel(); container.setLayout(new BorderLayout()); container.add(field BorderLayout.CENTER); field.setText((String) value); container.add(new JButton(""..."") BorderLayout.EAST); return container; } I.E a panel with more than one component inside. The actual text editor is a descendant of the component being returned as the editor. So rendering issues aside from what I can tell the JTable is focusing the component that is returned by the getTableCellEditorComponent method so when you press a key with a cell highlighted it passes focus and the key press to the panel thinking that's the editor. Is there anyway I can inform JTable that the ""real"" editor is the JTextfield? Adding a hacky requestFocusInWindow on the correct component is insufficient as the key press won't get passed on. Check some related articles here and here. Another good article about JTable editing in general. Yes thanks. I just got some similar advice on the sun forum. http://forums.sun.com/thread.jspa?threadID=5368525  I think that I solved it. To tell you the truth I don't know what solved the problem since I'm using a custom editor a custom renderer and stuff... When a cell is highlighted and I press ""abc"" the 3 letters go on screen (cell in this case). grid.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent ke) { int l = grid.getSelectedRow(); int c = grid.getSelectedColumn(); grid.editCellAt(l c); } }); Well... I tried... =) (I don't know if it's the same because my JTable uses JTextField and JComboBox as editors).  I had very similar problem. In my case I had complex TableCellEditor which consists of JSpinner and some other components. The problem was that when cell editor started I wanted to transfer focus to its internal component. I fixed this by calling panel.transferFocusDownCycle() but this in turn caused keyboard events to stop working - when my internal component had focus and I pressed key up I was expecting that component will intercept this event and change its value. Instead table changed row focus to one above... I fixed this by adding KeyListener and dispatching all key events directly to the internal component. This is wrapper class based on JPanel I wrote to make my life easier. public class ContainerPanel extends JPanel implements KeyListener FocusListener { private JComponent component = null; public ContainerPanel(JComponent component) { this.component = component; addKeyListener(this); addFocusListener(this); setFocusCycleRoot(true); setFocusTraversalPolicy(new ContainerOrderFocusTraversalPolicy()); add(component); } @Override public void keyTyped(KeyEvent e) { component.dispatchEvent(e); } @Override public void keyPressed(KeyEvent e) { component.dispatchEvent(e); } @Override public void keyReleased(KeyEvent e) { component.dispatchEvent(e); } @Override public void focusGained(FocusEvent e) { component.transferFocusDownCycle(); } @Override public void focusLost(FocusEvent e) { } }  If I read your question correctly you want the user to be able to type into a cell immediately without activating the cell editor first i.e. you want whatever keystroke activated the cell to be the first character entered into the text field. My first attempt was to add a propertyChangeListener on the focusOwner property of the KeyboardFocusManager only to notice that the focus never leaves the JTable. You probably ran into that as well. Time for plan B. I got that ""first keypress"" thing to work by adding a KeyListener to the table that records the last KeyEvent for the keyPressed() method in an instance field. The getTableCellEditorComponent() method reads the character from there. I also needed that hacky requestFocusInWindow() call you mention if the user is to keep typing any characters after the first one. For my sample app I created a subclass of JTable that adds a KeyListener to itself. It's a much better idea to make your CellEditor instance implement KeyListener and add that to the regular JTable instead but I'll leave that to you. Here's your code snippet as I modified it: @Override public Component getTableCellEditorComponent(JTable table Object value boolean isSelected int row int column) { JPanel container = new JPanel(); container.setLayout(new BorderLayout()); container.add(field BorderLayout.CENTER); // Will want to add an instanceof check as well as a check on Character.isLetterOrDigit(char). char keypressed = ((StickyKeypressTable)table).getLastKeyPressed(); field.setText(String.valueOf(keypressed)); container.add(new JButton(""..."") BorderLayout.EAST); SwingUtilities.invokeLater(new Runnable() { public void run() { // This needs to be in an invokeLater() to work properly field.requestFocusInWindow(); } }); return container; } As far as nastiness goes this sits somewhere up there with Vogon Poetry but it should solve your immediate problem. Thanks for the answer. We've effectively been doing this (in different ways for different editors) for some time now and it gets us into all sorts of trouble (e.g the editor is activated by the mouse and the table key listener still has a lastKeyPressed). Kind of looking for a nicer solution. I've been looking into it a bit further and eventually ended up at the Handler inner class in BasicTableUI. No code samples yet though.  I fixed something similar in 2 steps First override the editCellAt from your JTable and call requestFocus after preparing the editor: public boolean editCellAt( int row int column EventObject e ) { if ( cellEditor != null && !cellEditor.stopCellEditing() ) { return false; } if ( row < 0 || row >= getRowCount() || column < 0 || column >= getColumnCount() ) { return false; } if ( !isCellEditable(row column) ) return false; TableCellEditor editor=getCellEditor(row column); if ( editor != null && editor.isCellEditable(e) ) { editorComp=prepareEditor(editor row column); if ( editorComp == null ) { removeEditor(); return false; } //aangepast Rectangle rect=getCellRect(row column false); if ( datamodel_.useAdaptedEditorRect() ) rect=datamodel_.changeRectangle(rect editorComp); editorComp.setBounds(rect); add(editorComp); editorComp.validate(); setCellEditor(editor); setEditingRow(row); setEditingColumn(column); editor.addCellEditorListener(this); //NEXT LINE ADDED editorComp.requestFocus(); return true; } return false; } Then overload the requestFocus from your JPanel and make sure your textfield is put as editorComponent: public class EditorPanel extends JPanel { JComponent editorComponent; public boolean isRequestFocusEnabled() { return true; } public void requestFocus() { editorComponent.requestFocus(); } } You can always grab the keyEvent and set it yourself: AWTEvent event = EventQueue.getCurrentEvent(); if ( event instanceof KeyEvent ) { char newSelection = ( (KeyEvent) event).getKeyChar(); int keyCode = ( (KeyEvent) event ).getKeyCode(); editorComponent.requestFocus(); if ( editorComponent instanceof JTextField ) { if ( ( newSelection >= (char) FIRST_ALLOWED_CHAR ) && ( newSelection != (char) LAST_ALLOWED_CHAR ) ) //comes from DefaultKeyTypedAction ( (JTextField) editorComponent ).setText(Character.toString(newSelection)); if ( keyCode == KeyEvent.VK_BACK_SPACE || keyCode == KeyEvent.VK_DELETE ) ( (JTextField) editorComponent ).setText(""""); } } else editorComponent.requestFocus(); Yeah I've tried this approach before. I tried it on my code and as I expected the first key press that activates the editor is not getting passed on (as it does when you're using a simple edit field) i.e if you tab to the cell and hit ""123"" only ""23"" appears in the component."
92,A,"Best practice for handling null strings from database (in Java) In my database application I sometimes have to deal with null strings in the database. In most cases this is fine but when it comes do displaying data in a form the Swing components - using JTextField for example - cannot handle null strings. (.setText(null) fails) (EDIT: I just noticed that JTextField actually accepts a null string but the question remains for all other cases where unexpected null values can lead to problems.) The null values have no special meaning they can (must) be treated as empty strings. What is the best practice to deal with this problem? Unfortunatly I cannot change the database. Checking every value if it is null before calling setText()? Adding a try-catch handler to every setText() call? Introducing a static method which filters all null strings? Replace all null values to empty strings immediatly after reading from the database? ... [your suggestions] You could extend or wrap JTextField and overwrite the setText() method to replace NULL with an empty String. Yes but actually ""NULL"" can be legal value in DB ;> Indeed that is why you would wrap setText() & getText() so you can interchange null with """" for setText and vice versa for getText.  I think all your answers are reasonable but since you tagged this ""best practices"" I'd like to remind you of the null object design pattern. Wherever it seems worth the effort for whatever class need the protection write special instantiation code for a ""null"" object of that class. The idea is this ""null"" object is real and can behave appropriately no matter what you ask it to do. Your null ""String"" object could provide whatever you want as it's value. This pattern also means you can get rid of lots of null checks and the code is more robust. It does use up a bit of CPU sending messages to nulls and having them do nothing so it is less desirable when a large percentage of objects are expected to be null.  As Ruben said I would extend the JTextField to overwrite the setText() method and replace NULL with the empty string. However I would also overwrite the getText() method to overwrite empty string with NULL so that when you are saving back into the database you do not overwrite a null value in there with the empty string.  If you can add a default value - empty string - for a field in DB . Yes that would be best but unfortunatly I cannot do that :(  If you are using any ORM tool or somehow you map your DB fields to Java bean you can allways have:  public void setFoo(String str) { this.foo = str != null ? str : """"; } On Oracle i don't believe this is an issue. It may depend on settings but our 10g implementation interprets empty strings as nulls. Other DBMS's and perhaps other configurations may vary. You do have to be careful when writing back the data to the DB since you will be inserting an empty String instead of the NULL value! I think that's the best solution but I will change the getter. (I guess that's what you meant all along) I think Marko ment the setter since that is used by most ORM tools e.g. hibernate to put the values from the database into the instances. When using the getter you still need to be carefull for side effects in the database when using an ORM tool. FWIW I'd flip the inequality to an equality test. Just another best practice (or opinion depending on how you look at it). public void setFoo(String str) { this.foo = str == null ? """" : str; } Then how would you check whether the value is empty in the DB or NULL from your Entity object?  Use Beans Binding API to bind values from your entity objects to your SWING Widgets. Beanins Binding will transparently handle null values and will not replace the null with an empty string.  From a SQL angle try: select ISNULL(column_name'') from ... Someone just marked this answer down :(. While I accept that the question asks about Java. This solution can be used to handle ALL unexpected null values from a database. and as the question states ""unfortunately I can't change the database"" it implies that non java answers are also acceptable."
93,A,"How to have a specific component resize based on available visible space? In my application I have a layout similar to what is shown below: @@@@@@@ XXXXXXX*** XXXXXXX*** XXXXXXX*** %%%%%%% In this layout X is a JTable. The other components can remain the same size. Is there a layout or strategy that will have the JTable (X) resize based on available screen size and have everything else stay on the sides properly? Thanks. That looks very much like a BorderLayout to me. Have you tried that? How can you keep the top and bottom components from taking up the entire width of the BorderLayout? When I try it it will fill all three components horizontally. You can use three BorderLayout panels p1 p2 p3 with '@' set to the NORTH of p1 'X' the CENTER of p1 '%' the SOUTH of p1. '*' the CENTER of p2 with Box.createRigidArea(size) add to north and sourth. and p3 will contain both p1 and p2 with p1 as the CENTER and p2 as the EAST. Yes I knew you could do it with multiple layouts. I was just curious if the initial answer was indicating it could be done with just one layout.  It can also be done with GroupLayout but it is designed for GUI builders as it's very verbose. So if you already have existing code you might not want to try it first.  I am a big fan of JGoodies FormLayout. Here is some sample code of one way to do this with FormLayout.  JPanel panel = new JPanel(); FormLayout layout = new FormLayout(""100dlu 20dlu:grow"" ""pref pref pref""); panel.setLayout(layout); JTextField t1 = new JTextField(); JTextField t2 = new JTextField(); JTable tb = new JTable(); JScrollPane sp = new JScrollPane(); sp.setViewportView(tb); CellConstraints cc = new CellConstraints(); panel.add(t1 cc.xy(1 1)); panel.add(t2 cc.xy(1 3)); panel.add(sp cc.xyw(1 2 2));"
94,A,overriding JTree double-click to prevent node expansion? It looks like there are 2 default mechanisms to expand a folder node in a JTree. One is to click on the expanded/collapsed icon next to a node. The other way is to double-click on the node itself. Is there a way to stop this 2nd mechanism? I would like to override the double-click on a node so it does something (updates another display to show statistics on the node being double-clicked) and would like it to not expand/collapse the tree node. (just to be clear: I don't want to prevent the node from being expanded/collapsed I just want to require the user to click on the expanded/collapsed icon.) How can I do this? Call setToggleClickCount(0) on the JTree This will effectively disable expanding on double-click.  From the relevant API page you would do something like this: JTree tree = new JTree(); tree.setToggleClickCount(0); This means you must use 0 clicks to expand a tree node effectively disabling double click. This will not interfere with other methods of tree expansion. thanks !
95,A,"Maintaining a single instance of JInternalFrame? I have an application which opens multiple JIFs But I only want to create a single instance of the JIF so I use these function to check that and I use dispose to close the JIF after a key is pressed(JDesktopPane.getSelectedFrame().dispose()). However after 2-3 successive disposes it doesn't create a new JIF? Am I doing anything wrong over here? public static void setInternalFrame(final JInternalFrame internalFrame) { log.debug(""CurActiveInternalFrame "" + ShoppyPOSApp.getCurrentActiveInternalFrame() null); log.debug(""Incoming internalFrame "" + internalFrame null); boolean isFrameFound = false; try { // Have a check whether the DesktopPane contains the internal Frame // If yes bring it to front and set the focus for (int i = 0; i < ShoppyPOSApp.frame.mainDesktopPane.getAllFrames().length; i++) { if (ShoppyPOSApp.frame.mainDesktopPane.getAllFrames()[i].getClass() == internalFrame.getClass()) { isFrameFound = true; } } if (!isFrameFound) { internalFrame.setVisible(true); internalFrame.setLocation( ShoppyPOSApp.frame.mainDesktopPane.getWidth()/ 2 - internalFrame.getWidth() / 2 ShoppyPOSApp.frame.mainDesktopPane.getHeight() / 2 - internalFrame.getHeight() / 2 ); ShoppyPOSApp.frame.mainDesktopPane.add(internalFrame); } internalFrame.setSelected(true); } catch (Exception e) { log.debug(e.toString() null); } } I don't think dispose is doing what you mean for it to do. dispose gets rid of the operating system ""peer"" of your frame. But if you intend to show that frame again then you shouldn't throw away its underpinnings! I'd go with setVisible(false) on the JIF to hide it. Then you can re-activate it with setVisible(true).  You are comparing the classes of your input parameter and your desktops internal frames in your for loop. This will always be true as your parameter is an instance of JInternalFrame and the getAllFrames method returns an array of JInternalFrames. Why not just do a regular comparison? : ShoppyPOSApp.frame.mainDesktopPane.getAllFrames()[i] == internalFrame I would recommend using HIDE_ON_CLOSE as your default close operation on the frames and using setVisible(false) in your key listener instead of dispose(). When frames are disposed they are closed and you should not try and reuse a frame after is has been closed. If you just hide the frame it will still be a child of the desktop pane so you shoud add a call to setVisible(true) when you find a frame in your setInternalFrame method. It sounds like you're getting inconsistent behaviour (you say it fails after two or three disposes). This suggests to me that you have an event thread problem. Is your setInternalFrame being called on the event thread? Are you familiar with the Event Dispatch Thread and are you using it correctly?"
96,A,"Passing data from GUI to event dispatch thread in Swing I am developing a Swing/Java app but having difficulties passing data from the initiliaser threads to one of the GUIs. The GUI is initialised by invoking an 'initComponents()' method on the event dispatch thread in its run() method: javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { ChatSession ed = new ChatSession(client); ed.initComponents(); ed.setVisible(true); } }); In ChatSession.java I have a method initComponents() which contains the line: conversation = new javax.swing.JTextArea(); I then need to update the GUI from another method in the ChatSession.java object which is listening for TCP packets. I need to append new text that comes in over the TCP socket to the 'conversation' JTextArea on the GUI. How can I do this? I have tried using invokeLater to run a method on the event dispatch thread but I get a NullPointerException error...??? java.awt.EventQueue.invokeLater( new Runnable() { public void run() { //conversation.append(text); ChatSession.this.conversation.append(""text to append to chatbox""); } }); I have also tried the commented out line and still get a NPE. I also need to pass data from the event dispatch thread to the ChatSession object on click of a button (in order to send it over the network to another client). I have a method in ChatSession.java which is assigned to respond to clicks of the button using an Action Listener initialised on the event dispatch thread: The method in ChatSession.java: private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) { // add to toSend buffer toSend.append(sendtext.getText()); } .... is assigned to an ActionListener in initComponents()  part of ChatSession.java (which is run on the event dispatch thread see earlier): jButton1.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton1ActionPerformed(evt); } }); So how do I pass data from the event dispatch thread to the 'initialiser' object and then how do I pass data from the initialiser back to the event dispatch? I am not entirely clear on all of your questions but I think you may be structuring your program oddly and creating problems for yourself. Your ChatSession class should change its own text. If your main program has to catch the packets (rather than the ChatSession) you should have setters for the text field on the ChatSession. Check out this article on Swing's version of MVC. thanks for the tip on getters and setters. I have restructured my code to use that. And the tip on structuring. very helpful  You've got the correct way to push data onto the event dispatch thread already with the SwingUtilities.invokeLater(). The NPE suggests that you've got something else wrong. Given that this line: conversation.append(text) was producing an NPE there are three options: conversation is null. Did you initialize conversation in the constructor of ChatSession? something else in your ChatSession that gets called inside append() is null The passed-in text is null and append() does not handle that correctly. You should be able to look at the exception's stack trace to figure out if it's the first problem (the .append() line will be the last line in the trace). If that's the case make sure you new up conversation. For the other two look at the first line in your stack trace and see what's broken there. There are several possible ways to get data off the EDT onto a background thread; which method you want depends on a number of aspects of the ""initialiser"" object. many thanks for the great answer. conversation was indeed null. the problem was that I wasn't creating it on the dispatch thread. The solution that works was to replace the 'ed' object I created with a blank object and create 'conversation' like eg. initComponents() in run() rather than ed.initComponents()"
97,A,"Is it OK to change a model outside the Swing worker thread? In a ""serious"" Java GUI app you'll have models behind many of your GUI elements: A DocumentModel backing a JEditorPane for example or a ListModel behind a JList. We're always told not to make GUI changes from outside the Swing worker thread and given SwingUtilities.invoke...() for working around that. Fine I can live with that! It's certainly necessary (and works well) when changing attributes of GUI components directly. Ideally most of my GUI-visible changes will be to models not to JComponents anyway. But because they're GUI-visible do they ""count"" as GUI changes? I.e. do change events and listeners provide the necessary decoupling or do model changes need to be wrapped in invoke...() as well? Probably old hat to Swing pros but I wasn't able to find any reference that clearly states one way or another. Yes it is most definitely OK. While it is true you should not modify Swing components outside of the EDT. You can certainly make changes to their models outside the EDT. If you have wired the models to your Swing components correctly the view updating and hence EDT scheduling will happen almost automatically. See: http://java.sun.com/products/jfc/tsc/articles/architecture/#roots See the part about JavaBeans Event model. This is how models communicate their changed state to the GUI in an EDT safe manner. When creating new GUI components you should follow this design pattern. Also note the distinction between GUI-state models and application-data models. Making changes to models from the EDT still requires care. In fact most Swing issues happen when the programmer is modifying a model in the EDT when they should be modifying it from a separate thread. (Infamous frozen GUI problem) Also none of this precludes being fully aware of typical multi threading pitfalls. But you can most definitely make changes to a JTableModel from outside the EDT.  Generally the model change must be wrapped into invokeLater(...). There is no decoupling in the model's code of most of the swing classes in which I looked. It's up to you to create a model which could contain the calls checking that GUI modifications are made on the Event Dispatcher Thread. For all swing components and related models you have to assume they must invoked on the GUI thread - unless their documentation explicitly state that you don't. Some components/models have synchronized methods that you can modify from different threads but the majority do not. -1: Not the answer I wanted to hear! (Just kidding +1) Thank you! Concerning Swing thread issues debugging I highly recommends this link: http://weblogs.java.net/blog/alexfromsun/archive/2006/02/debugging_swing.html The CheckThreadViolationRepaintManager saved me a lot of time. Swing text does *some* shifting of events to the EDT. Of course it just makes a bigger mess.  If the events are fired off the EDT and update Swing components that is going to be a problem. In Swing text events may or may not(!) get transferred to the EDT. This makes testing tricky. Unsurprisingly the API is not useful in a multithreaded environment. So: Easiest keep the model on the EDT and other threads should pass messages (involving EventQueue.invokeLater). Alternatively you can put a big lock around everything which is more difficult (and you'll probably still to need to pass stuff to the EDT). Attempting microsynchronisation is very difficult. ""microsynchronisation is very difficult."" : I totally agree with this point. I removed all my synchronized keywords and checked more carefully that every modification on the GUI (and models of the elements of the GUI) were done on the EDT. I was afraid of this. It means that my models technically become part of the GUI and have to be treated as part of it for this purpose. It doesn't seem ""clean"" from a layering/encapsulation point of view and (this is my biggest objection of course) it's more work! +1 thanks!"
98,A,"JEditorPane can't take Google search queries why? I am creating a very basic web browser using JEditorPane just to teach myself Swing and GUIs in Java but am having trouble implementing a Firefox-like Google Search bar. I'm not if it's due to a limitation of JEditorPane or my lack of understanding but if I try and take the string typed into the ""Google Search"" bar and use the setPage() method of JEditorPane it doesn't work. Here is my code for the ActionListener of the ""Google Search"" button: public void actionPerformed(ActionEvent arg0) { try { content.setPage(""http://www.google.com/search?q="" + searchBar.getText()); } catch (IOException e) { JOptionPane.showMessageDialog(frame ""Error searching for: "" + searchBar.getText()); } } Even when I try and just do content.setPage(""http://www.google.com/search?p=test""); it doesnt work so is it something to do with setPage()'s way of taking the URL string? As in it doesn't like the ""?"" or ""="" characters or is there another way of doing it all together? Thanks for your time InfinitiFizz If you need a full browser in Java check out Lobo: http://lobobrowser.org/java-browser.jsp Please look at the comment I gave to jonescb's answer.  JEditorPane is a poor choice to implement even the simplest browser. It works to display simple HTML pages but it stops there. Try The Flying Saucer Project it works pretty well(it's not a full browser but close enough).They have an example which simulates actually a web browser. Please look at the comment I gave to jonescb's answer.  Add something to print the exception you are catching and you'll see that you're receiving a 403 Forbidden from Google. There are a lot of Java bots out there and sites have started blocking requests with ""java"" in the User-agent field. Google will let you get their home page but won't let you search unless you override the User-agent field. Start your jvm with -Dhttp.agent=myappname/1.0 where myappname is the name of your application.  Like adrian.tarau said JEditorPane is very poor at displaying modern web pages. It doesn't even support HTML 4 or Javascript. I believe Google uses Javascript to make the Search button work. Another suggestion would be to use the Lobo Browser/Cobra engine. I am having to use JEditorPane because I'm not making a full-blown web browser this is just to teach me Swing and GUIs. So no I can't use other Java Browser engines. Also as I show above in my code I am not trying to implement a listener for the ""Google Search"" button I have created a JTextField ""search box"" and a JButton ""Search"" button and I'm just wondering if it doesn't like the ? or = in the String used for Google searching (because if I remove the ? and = it tries to go to ""http://www.google.com/searchq"" just fine). Thankyou for your answer but it doesn't answer my question."
99,A,Drag and drop feedback in a JTree with custom TreeCellRenderer (Java Swing) I have a class derived from JTree with custom TreeCellRenderers. I have implemented drag and drop in that tree so a user can rearrange tree nodes. The drop mode is DropMode.ON_OR_INSERT so the user can drop nodes on or between other nodes. While the user is dragging the node if the pointer points between nodes a blue line is drawn indicating a location where the node will be inserted. If the pointer is on a node there is no indication of where the node will be added. This only happens when I use my custom TreeCellRenderer. If I use a DefaultTreeCellRenderer the drop node gets highlighted during the drag. I found a few examples on the web where people store the node that is currently highlighted in the JTree and query it from the TreeCellRenderer rendering the node in different color if TreeCellRenderer is called for the node that is supposed to be highlighted. Is there a more elegant solution for highlighting the drop node? I haven't managed to figure out how DefaultTreeRenderer does this - there seem to be no hooks in it to drag and drop functionality. I figured it out so just in case anybody cares: The answer is right here: in javadoc for TreeCellRenderer The TreeCellRenderer is also responsible for rendering the the cell representing the tree's current DnD drop location if it has one. If this renderer cares about rendering the DnD drop location it should query the tree directly to see if the given row represents the drop location:  JTree.DropLocation dropLocation = tree.getDropLocation(); if (dropLocation != null && dropLocation.getChildIndex() == -1 && tree.getRowForPath(dropLocation.getPath()) == row) { // this row represents the current drop location // so render it specially perhaps with a different color } The code above should be added to getTreeCellRendererComponent() method.
100,A,Is it possible to perform active rendering in Java Swing without being on the EDT? I am looking into using Buffer Strategy and the following technique described on the Javadoc: // Main loop while (!done) { // Prepare for rendering the next frame // ... // Render single frame do { // The following loop ensures that the contents of the drawing buffer // are consistent in case the underlying surface was recreated do { // Get a new graphics context every time through the loop // to make sure the strategy is validated Graphics graphics = strategy.getDrawGraphics(); // Render to graphics // ... // Dispose the graphics graphics.dispose(); // Repeat the rendering if the drawing buffer contents // were restored } while (strategy.contentsRestored()); // Display the buffer strategy.show(); // Repeat the rendering if the drawing buffer was lost } while (strategy.contentsLost()); } It would be great to avoid EDT and invokeLater or invokeAndWait when performing an animation. My questions: If this is in a Swing application don't we need to worry about putting the call to show on the EDT? Can anyone else see any problems using this in a Swing app? This was inspired by this interesting answer to game programming. As mentioned by trashdog it is not good idea to do so. Create own animation thread which will draw off-screen image. Then push it to some holder. If paintComponent is called fetch current image and draw it on component. Done. Look at rendezvous pattern.  In general no. Painting on a thread other than the event dispatch thread (EDT) results in undesirable artifacts although the results may be acceptable. This example demonstrates some of the trade-offs. I prefer arranging to draw on the EDT using javax.swing.Timer but other approaches are possible. Also your chosen top-level Container may already implement a Buffer Strategy.
101,A,How can I turn off anti-aliasing for one specific JLabel? How can I turn off anti-aliasing for one specific JLabel? It uses a very small font which might look better without anti-aliasing. If important I'm using Java 1.5 on Mac OS X. I think you'll have to override the paint(Graphics g) method and draw the text yourself.  Have you tried overriding paint(Graphics g) or paintComponent(Graphics g) setting rendering hints for text AA on the graphics object and calling the super method? see RenderingHints: http://java.sun.com/j2se/1.4.2/docs/api/java/awt/RenderingHints.html#VALUE_TEXT_ANTIALIAS_OFF
102,A,"How do I add a menubar to a tabbed pane? Is it possible to add a menubar to one of the windows in a tabbed pane? And is a frame the only container which can have a menubar? Is it possible to add a menubar to one of the windows in a tabbed pane? What problem did you have when you tried to do this? If you need more help post your SSCCE showing the problem. My issue was I thought menubar could only be added outside the content panes and only to components like frames etc that have methods to handle it. @camickr..you seem to be an evangelist of SSCCE :) Are you the same guy who used to answer lot of swing question in the sun forum? ""My issue was I thought"" - And that was my point don't think try it. How do you ever expect to learn if you don't try things on your own? Your computer will not blow up or anything! It will only take 5 minutes to try it. Then if it doesn't work the way you expect you post your SSCCE so we have an idea what you tried. And yes I'm the guy from the Sun forum who always requests a SSCCE's because its shows you've made an effort.  As Suraj mentioned you can force the issue as as they are both both components and containers however you will have to do the extra work to organize it in your pane's layout along with the rest of the components in the pane -- unlike with a JFrame which has methods to support it outright (setJMenuBar and you're outta there). Normally when added to a JFrame the JMenuBar is not in the content pane it is in a layered pane which contains both the menu bar and the content pane below it. You might also want to consider using a JToolBar which is very flexible (more easily customized) and has some optional built-in goodies like being separable/dockable.  Though you can directly add a JMenubar in to a JtabbedPane as both are JComponents. But it wont look nice(usable) if you have tried it. I would suggest to subclass BasicTabbedPaneUI and override installComponents() there you can add you JmenuBar at the top or wherever you want."
103,A,"Is there a good DI framework suitable for Java 1.4 and SE (Swing) apps? I am looking for a dependency injection framework for a Java SE (Swing) application that runs under JDK 1.4. Are there any recommended DI frameworks that I can use? (Guice and other annotation-based frameworks are out and I don't want to mess with something like Retroweaver.) Also is Spring suitable for use in a Java SE application? edit: this is a legacy application (which is why it's jdk 1.4) - I want to use spring to get some sanity into the ball of mud You can introduce a DI framework like Spring into your app but you can't move up from Java 1.4 (end-of-lifed by SUN by the way)? With any significant code base it would be a lot of work to retrofit a DI framework. Are the potential benefits worth the cost? Well that's what I'm exploring. It wouldn't require a total retrofit would it? Couldn't I just start by injecting a few dependencies at a time? There are some significant technical barriers (deployment issues) that are keeping the app on 1.4. @hbunny for some mainframe installations you get 1.4 only and it is very tedious to have any other versions installed. yes it is. There is even a whole project called Spring Rich Client: Spring-RCP's mission is to provide an elegant way to build highly-configurable GUI-standards-following rich-client applications faster by leveraging the Spring Framework and a rich library of UI factories and support classes. you are right however spring 2.x runs under Java 1.4 On their site under FAQ: ""Can I use the project under java 1.4? No as of 1.1.0 the codebase can only be run on 1.5+ JVM environments. "" not so much interested in rcp I'm working on a legacy app. I see now that Spring 3.0 requires Java 5. Spring's web site is pretty but not terribly informative."
104,A,JScrollPane with scroll bar to left I need to place a scroll bar to the left of the contents in my JScrollPane. Can it be done without a separate JScrollBar component? Perhaps simply by setting some alignment? Using trial and error I found that JScrollPane.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT); worked like a charm. Nice. Did this have any other effects that you noticed?  I tried changing the alignment of the track div from 'right' to 'left' in the css class .jspVerticalBar. seems to work. .jspVerticalBar { position: absolute; top: 0; left: 0; width: 16px; height: 100%; background: red; } With the tags I wanted to indicate that the question is about Java Swing (not JavaScript).
105,A,"Reloading a JTree during runtime I create a JTree and model for it out in a class separate to the GUI class. The data for the JTree is extracted from a file. Now in the GUI class the user can add files from the file system to an AWT list. After the user clicks on a file in the list I want the JTree to update. The variable name for the JTree is schemaTree. I have the following code for the when an item in the list is selected: private void schemaListItemStateChanged(java.awt.event.ItemEvent evt) { int selection = schemaList.getSelectedIndex(); File selectedFile = schemas.get(selection); long fileSize = selectedFile.length(); fileInfoLabel.setText(""Size: "" + fileSize + "" bytes""); schemaParser = new XSDParser(selectedFile.getAbsolutePath()); TreeModel model = schemaParser.generateTreeModel(); schemaTree.setModel(model); } I've updated the code to correspond to the accepted answer. The JTree now updates correctly based on which file I select in the list. I've posted a follow on question here: http://bit.ly/iaDqS From the Component.add API docs. Note: If a component has been added to a container that has been displayed validate must be called on that container to display the new component. If multiple components are being added you can improve efficiency by calling validate only once after all the components have been added. You have called repaint and validate on a component that is not displayed which will not be effective. You need to call those methods on the mainPanel after the add. Also revalidate tends to be better than validate as it effectively coalesces. I've tried revalidate on the mainPanel however the JTree still doesn't update. I'll modify the code in the original question to what I have now It looks like you've now not added the new tree to the panel. Works now .. I now don't remove the JTree at all I just wasn't updating the model in the correct place. Thanks for your reply  I not sure that I'm understanding your question but I'll try... The right thing to do should be IMHO: get the file create a new TreeModel from your file give the model to the JTree In pseudocode it would look like that: File newContent = getSelectedByUser(...); TreeModel newModel = new MyFileBasedTreeModel(newContent); //this next part must be done in the EventDispatcherThread myTree.setModel(newModel); then the JTree would be updated without any call to repaint etc. Hope it helps Very good I've now modified the method generateTree() to return the model instead of the tree and renamed the method generateTreeModel(). The tree now updates correctly based on which file I click in the list. Thanks!"
106,A,How to get windows logon credentials from a Swing application? How would I go about getting the Windows user credentials from a Swing application? I am working on an internal (corporate) Swing application. Currently the user has to login to the application using a login screen which then connects to an app server which authenticates the user against the company LDAP server. Since the user has already logged in to his workstation using the same credentials is there any way that a Swing application can get these credentials from Windows itself and then automatically log the user in (SSO)? I know this is possible because I have seen some other applications do it but I don't know how to go about doing this with Swing/Java. Ah ok but you said 'credentials' and that's username+password. You certainly will not be able to retrieve the users password that's not stored on Windows (at least I really hope it isn't...). So no chance for full credentials. I don't need the password I just need to know that the user is authenticated against the domain. Both Windows and the server side are authenticating against the same LDAP server. how does one login to windows when one is not connected on network; surely it stores the password for the respective userid. Out of curiosity what kind of solution did you end to? @Touko - we never followed through on this feature but the answer below seemed like good information There are similar questions on SO that look like interesting (so this question might be a duplicate): How do I access Windows credentials from Java? Java Active Directory Integrated Windows Authentication IMHO read carefully Kohsuke's blog posts (here and here) and the Single-Sign-On in Java Platform using Active Directory article they contain very valuable informations. But you need to dig the whole thing a bit further.
107,A,"how to control focus in JTable What I want to do is when user finish editing of data in table cell to move focus onto another cell depending of what user entered and to turn that cell into editing mode so user can start typing immediately with no additional action. This way user can focus on his work and software will do the 'thinking' about which cell should be edited next. Simple task which does not look so simple in real life ... anyone some idea? Please try this example. It should let you navigate through the table by entering the values u d l r for Up Down Left Right. Hope that this will give you an idea about how to do it. import java.awt.event.ActionEvent; import javax.swing.AbstractAction; import javax.swing.Action; import javax.swing.JFrame; import javax.swing.JTable; import javax.swing.KeyStroke; import javax.swing.table.DefaultTableModel; import javax.swing.table.TableModel; public class Test extends JFrame { private JTable table; private TableModel tableModel; public Test() { tableModel = new DefaultTableModel(5 5); table = new JTable(tableModel); table.setColumnSelectionAllowed(true); getContentPane().add(table); Action handleEnter = new AbstractAction() { public void actionPerformed(ActionEvent e) { table.getCellEditor().stopCellEditing(); // store user input int row = table.getSelectedRow(); int col = table.getSelectedColumn(); String val = String.valueOf(table.getValueAt(row col)).toLowerCase(); if (val.equals(""u"")) --row; else if (val.equals(""d"")) ++row; else if (val.equals(""l"")) --col; else if (val.equals(""r"")) ++col; if ( row >= 0 && row < tableModel.getRowCount() && col >= 0 && col < tableModel.getColumnCount()) { table.changeSelection(row col false false); table.editCellAt(row col); } } }; // replace action for ENTER since next row would be selected automatically table.getInputMap().put(KeyStroke.getKeyStroke(""ENTER"") ""handleEnter""); table.getActionMap().put(""handleEnter"" handleEnter); } public static void main(String[] args) { Test test = new Test(); test.setSize(800 600); test.setVisible(true); } }  You should add a KeyListener to the JTable to get all typed Characters. After the user press [Enter] you should check the word the user has typed. Write your own FocusTraversalPolicy to set it to the Table table.setFocusTraversalPolicy(policy) The FocusTraversalPolicy describe which component get the next focus. After this you can call FocusManager.getCurrentManager().focusNextComponent(); EDIT: I did not test this it is just an idear."
108,A,How to create an image map using Java Swing? I need to make an image map using Swing that displays a background image and then when the mouse hovers over (or clicks) specific hotspots I need to pop up a 'zoomed-in' image and have it display. I was thinking of extending JPanel to include an image reference and have that drawn thru the paintComponent(g) method. This part I have done so far and here's the code: public class ImagePanel extends JPanel { private static final long serialVersionUID = 1L; private Image image; public ImagePanel(Image image) { setImage(image); } public void setImage(Image newImage) { image = newImage; } @Override public void paintComponent(Graphics g) { Dimension size = getSize(); g.drawImage(image 0 0 size.width size.height this); } Could anyone recommend how I might listen for / respond to mouse clicks over defined hot-spots? Could someone additionally recommend a method for displaying the pop-ups? My gut reaction was to extend JPopupMenu to have it display an image similar to the above code. Thanks for any help! To listen to the mouse clicks implement the MouseListener interface and add it to your panel. Then when the click is recieved you can use a JPopupMenu as you suggested or you could even use a glass pane to show the zoomed in image. I'm guessing you want to achieve something similar to this post by Joshua Marinacci he has also posted the source here I would take a look at that. Cool thank you!  I would probably: create some instance of Shape that represents each of your hotspots (could be a plain boring old Rectangle or see GeneralPath if you need to create fancy shapes) register a MouseListener which iterates through each of the Shapes and calls its contains() method to see if the clicked coordinate is inside the hotspot in question I'd like to do this but something I didn't mention is that the hotspots can be arbitrary in an image. So a way around this could be to overlay the sub images but I'm not sure if I want to do that.
109,A,"How to call setUndecorated() after a frame is made visible? In my Swing application I want the ability to switch between decorated and undecorated without recreating the entire frame. However the API doesn't let me call setUndecorated() after the frame is made visible. Even if i call setVisible(false) isDisplayable() still returns true. The API says the only way to make a frame not-displayable is to re-create it. However I don't want to recreate the frame just to switch off some title bars. I am making a full-screenable application that can be switched between fullscreen and windowed modes; It should be able to switch while maintaining the state etc. How do I do this after a frame is visible?. Have you tried calling Frame.dispose() and then changing it? Haven't tried it myself but it might work. If not then what you can do is have the frame an inconsiquential part of the class with only the most minimal hooks to the highest level panel or panels necessarity and just move those to the new frame. All the children will follow. It works for me. Which one dispose() or making a new frame? Calling dispose() works for me  Here is a code in how to make ALT+Enter enters Full Screen without the bar mode and Minimize with showing the Title bar and the Start bar: public class myTest extends JFrame{ //Your codes... //if ""ALT"" key on hold and ""Enter"" key pressed with it if (evt.isAltDown() && evt.getKeyCode() == evt.VK_ENTER) { //if the JFrame has Title bar if (isUndecorated()) { //this will dispose your JFrame dispose(); //here to set it with no Title bar setUndecorated(false); pack(); setLocationRelativeTo(null); //as you dispose your JFrame you have to remake it Visible.. setVisible(true); } else { dispose(); setUndecorated(true); setExtendedState(MAXIMIZED_BOTH); setVisible(true); } } //your codes }  Well you are going to need different frame instance. You may be able to move the contents of your frame over without recreating that. The key here is to make your code not be reliant on a specific frame. This is a basic good practice in any case. That's what I've considered but I'm looking for an alternative.  calling dispose() releases the native window resources. then you can edit properties like undecorated and so on. then just call setVisible(true) to recreate the window resources and everything works fine (the position and all compoenents won`t be changed) dispose(); setUndecorated(true/false); setVisible(true);  Have a look at https://tvbrowser.svn.sourceforge.net/svnroot/tvbrowser/trunk/tvbrowser/src/tvbrowser/ui/mainframe/MainFrame.java In Method switchFullscreenMode(): dispose(); ... setFullScreenWindow(...); setUndecorated(true/false); setBounds(mXPos mYPos mWidth mHeight); ... setVisible(true); Actually there's a lot more stuff going on to hide various sidepanels that reappear if the mouse touches the sides. Also note that you must explicitly set the bounds. Window.setExtendedState(MAXIMIZED_BOTH) interferes badly in timely vicinity of dispose() because they both rely on multiple native events of the operating system that are lost should the window no be displayable at that split second. I don't recommend taking the default screen directly: GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice(); and instead use the Screen your JFrame is currently on: setBounds(getGraphicsConfiguration().getBounds()); getGraphicsConfiguration().getDevice().setFullScreenWindow(this); Though it's currently the same it might change in the future. This worked perfectly for me and was a simpler code change than creating new frames reguarly. Your comments about bounds and using the frame's current screen were especially helpful. I additionally get the bounds of the window before turning it to full screen which lets me restore it back to the same location and size when I exit full screen.  You can't. That's been my experience when I tried to achieve the same. However if you have your entire UI in one panel which is in your frame you can create a new frame and add that panel to the frame. Not so much work. Something like this: // to start with JPanel myUI = createUIPanel(); JFrame frame = new JFrame(); frame.add(myUI); // .. and later ... JFrame newFrame = new JFrame(); newFrame.setUndecorated(); newFrame.add(myUI); In Swing a panel (and indeed any instance of a component) can only be in one frame at a time so when you add it to a new frame it immediately ceases to be in the old frame. calling `dispose()` releases the native window resources. then you can edit properties like undecorated and so on. with `pack()` you recreate the window resources. then just call `setVisible(true)` and everything works fine (the position and all compoenents won`t be changed)"
110,A,"JOptionPane call stacks I got a little problem with a JOptionPane which I use to warn user if wrong input is found. It works correct first time. But when I close down the JFrame which calls for that JOptionPane and open it again it will this time call for it twice. And it will stack for every close down I do. I have tried to look for the problem without any luck. I can provide the code but it is quite large though. Third EDIT: I have found and solved the problem now. Ok I provided the code I use. I have cut it down so it only show the necessary one. I dont think it will compile but this is how I use the addActionListener(); public class BorderLayoutDemo extends JFrame implements ActionListener { private JButton button1 = new JButton(""L?gg till kund""); private JButton button2 = new JButton(""Ta bort kund""); private JButton button3 = new JButton(""Visa kund""); private JButton button4 = new JButton(""Lista alla kunder""); private JButton button5 = new JButton(""Avsluta""); private JButton button6 = new JButton(""Change""); private JTextArea TextWindow = new JTextArea(""Hej\nHej\nHej\nHej\nHej\nHej\nHej\nHej\nHej\nHej\nHej\nHej\nHej\n""); private JScrollPane scrollPane = new JScrollPane(TextWindow); //l?gger in TextWindow s? att det f?r en scroll-bar private JPanel aPanel = new JPanel(); private JFrame aFrame = new JFrame(); private JTextField aTextfield1 = new JTextField(); private JTextField aTextfield2 = new JTextField(); private JButton aButton1 = new JButton(""L?gg till kund""); private JButton aButton2 = new JButton(""St?ng""); public BorderLayoutDemo() { setTitle(""Bankregister""); setLayout(new BorderLayout()); JPanel panel = new JPanel(); panel.setBorder(BorderFactory.createEmptyBorder(0 0 0 10)); panel.setLayout(new GridLayout(61555)); //row cols hgap vgap button1.addActionListener(this); button2.addActionListener(this); button3.addActionListener(this); button4.addActionListener(this); button5.addActionListener(this); button6.addActionListener(this); panel.add(button1); panel.add(button2); panel.add(button3); panel.add(button4); panel.add(button5); panel.add(button6); JPanel panel2 = new JPanel(); panel2.add(panel); add(panel2BorderLayout.WEST); add(scrollPaneBorderLayout.CENTER); setJMenuBar(menu()); setSize(600300); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setLocationRelativeTo(null); setVisible(true); } public void addCustomer(boolean status) { if(status) { aFrame.setTitle(""L?gg till kund""); aFrame.setSize(200300); aFrame.setLayout(new GridLayout(31)); aPanel.setLayout(new GridLayout(21)); //rad kolumn aPanel.add(aTextfield1); aPanel.add(aTextfield2); aButton1.addActionListener(this); aButton2.addActionListener(this); System.out.println(""Foo!!!!!!!!!!!!!""); aFrame.add(aPanel); aFrame.add(aButton1); aFrame.add(aButton2); aFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); aFrame.setLocationRelativeTo(null); aFrame.setVisible(true); } else { aFrame.setVisible(false); } } public static void main(String[] args) { new BorderLayoutDemo(); } public void actionPerformed(ActionEvent e) { if(e.getSource() == button1) { setEnabled(false); addCustomer(true); } //IFs f?r addCustomer(); else if(e.getSource() == aButton1) { if((aTextfield1.getText().isEmpty() || aTextfield2.getText().isEmpty())) { JOptionPane.showMessageDialog(null ""You miss to fill out the fields""); } else { JOptionPane.showMessageDialog(null ""Added""); Kund kund = new Kund(aTextfield1.getText()aTextfield2.getText()); setEnabled(true); register.add(kund); } } else if(e.getSource() == aButton2) { setEnabled(true); addCustomer(false); } try just posting the code that creates and the code that opens the JOptionPane. That code doesn't help us. Find in your code where you use ""addActionListener()"" and add a System.out.println(...) and as I suggested below I'm sure you will find the output displays more than once. By passing null as the first parameter of that method you are creating a default JFrame that the JOptionPane uses as its parent component and not the JFrame you have created in your code. If you provide more detail in your question I'm sure someone here will provide you with a much more detailed answer.  Sounds like you are adding the ""validation listener"" every time you open the JFrame. So check your ""addListenerXXX"" code to make sure it is only added/created once. Which also leads to the question why are you using a JFrame for this? Typically an application has a single JFrame. Then if you need a window to enter data you create a JDialog. ahhh I found out the error now. It is called and created several times as you said. ^^"
111,A,"Is it worth refactoring Swing code to conform to coding standards? Code generated for swing always fails when it comes to code quality. Inevitably there's one method that builds the entire interface and there's anonymous event handling code that calls member methods. Does anyone have some nuggets on transforming this monstrous code to well organized code. Is it worth going without a GUI builder tool for the sake of code quality. Thanks A lot of code generation systems have a model in which they generate two classes for everything (let's say a screen): one which they are free to revise at will and a second a subclass of the first which you the developer are free to revise at will (they will only generate the subclass once). If your system is doing this then I would say it makes sense to clean up the subclass - the one you'll be working on - and leave the superclass alone (because of course any work you put into cleaning it will be wiped out the next time you invoke the generator).  My approach is to avoid code generation. Bad formatting is the least of your worries. It's not too hard to build a GUI with straight Swing if you get to know a few layouts (border and flow at a minimum) and you can also create routines to automatically generate your GUI based on your data or metadata--a nice trick that a GUI builder cannot even start to do (but if you're using a GUI builder you'll probably never even try to make it data driven). Personally I'd like to see more builders that generate a ""Class"" file instead of a ""Java"" file--something with nothing but controls laid out in a reasonable manner allowing you to access the controls remotely either through a getter or something. (Heck since it's such a specific use case I wouldn't even have a problem making the members public..). Objective-C does something like this it's only the second builder I've seen that doesn't try to use code generation (the first was a private one we built for a product I worked on a long time ago that never got very far) Any of the several table-based layouts is an excellent foundation for building GUI's - all other layouts are then needed only occasionally for sub-component groups. Mine is published at: http://www.SoftwareMonkey.org/Code/MatrixLayout I am not likely to change my mind about code generation I've seen the things it does--it's just bad. I wasn't saying those would solve every problem but when i've needed to throw together a quick GUI they have often done the trick. Many others are useful as well but borderlayout does a better job than most at resizing it's predictable and trivial to nest. Flow sucks but when properly nested it can solve a few problems.. So let me take back any specific recommendations about layouts and just re-assert never use a tool that requires you to edit generated code. Ever. Intellij's IDEA uses this model for its builder. You have the option of generating a Java source file if you want but by default it stores it in a .form file and gives you a jar with an ant extension so you can generate the class even without IDEA around GridBagLayout is the one true layout manager you need. Seriously border and flow isn't going to work for much. Take a look at MigLayout you may change your mind. The Layout Manager that IDEA uses instead of GridBagLayout (optionally) is also decent but its proprietary. I also found that BoxLayout works if you can draw your UI in Excel but it gets a little weird in some places.  If you will keep using the GUI builder then there's not much point to refactoring any output of the GUI builder. Depending on the specific builder any refactoring you do to its code may mean that you can no longer use the builder on that GUI. Yes GUI builders often generate ugly code. But as long as you will continue to use the GUI builder just set findbugs and checkstyle etc to ignore the file(s) created by the GUI builder and move on. I have personally done this both ways. In some cases I've abandoned the GUI builder. For these I ended up refactoring the code to make it more maintainable. Agreed. I have yet to work on a project where we didn't wind up throwing out the auto-generated code at some point in the development cycle. I always code my GUIs by hand now (using MiGLayout) and find that I'm much more productive b/c of it. I now do my preliminary layouts on paper or using a drawing program. This also turned out to be a big time saver over using a gui builder. Who'd of thunk?!?  Generally you shouldn't be hand-editing generated code. If you use an editor with code-folding I suggest using that to keep the rest of the code looking tidy. or generating the code to a seperate file and then never opening it.  I would avoid a GUI builder as much as possible. Firstly it creates ugly code that generally can't be refactored (good luck trying to get your GUI builder to parse refactored code). But more importantly using a GUI builder really hampers re-usability. Like anything if you're smart you can use OOP to your advantage. Create re-usable components. Re-usable behaviours. If you're application is even mildly complex you'll want to use a framework to make things more manageable. If you don't good luck changing things in the future. You'll probably be ok for one maybe two version but after that you'll be fighting hard to get anything done. Every change will have to be done in a million places. Plus you can learn Swing pretty fast. It's not that hard once you get the hang of it. Using proper OO design in your Swing code will make a world of difference for the future.  The answer to your question lies in how much this code is going to be maintained and how central it is in your module. If this is a low-maintenance side component which its quality suffices for most needs I see no point in refactoring code which works now and can easily be thrown away and replaced by something new in the future (given it is a side component). Given the fact the Swing/AWT code is generally not nice to look at you might be able to pass this one by. However if you are going to be working on this code in the long run and it is central in your architecture the time spent on refactoring is going to be worth it when it comes to maintainability and supportability in the future."
112,A,Painting rows in a JTable I have an implementation of a DefaultTableCellRenderer. When someone selects a row in the table the row gets highlighted green. If I wanted to highlight the row under the one selected what is the easiest way to achieve this? Is this even possible without having to re-render the entire table? So at the moment I have something that looks like this: public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { Component component = super.getTableCellRendererComponent(table value isSelected hasFocus row column); if (isSelected) { component.setBackground(Color.GREEN); // Somewhere here I would like to retrieve the row below the current row and give it another color } else { component.setBackground(Color.WHITE); } return component; } Turn your thinking around a bit. You don't need the selected row's renderer to control the row below. What you should do have each row check and see if the row above is selected and if it is it then it highlights itself. if (table.isRowSelected(row - 1)) { // Highlight self. component.setBackground(Color.YELLOW); } You may also need to cause the highlighted row to get repainted whenever the selection changes. I suspect Java will only repaint the rows that have been selected/deselected by default so the row below won't get repainted. I don't have the JDK on my current machine so I can't test but if that is the case then something like this should do the trick: table.getSelectionModel().addListSelectionListener(new ListSelectionListener() { public void valueChanged(ListSelectionEvent event) { table.repaint(); } }); Actually you could be smarter and only repaint the exact row(s) that needs to be repainted. I will leave that as an exercise (a difficult and not terribly worthwhile exercise) if you are so inclined.
113,A,"How can I use Drag-and-Drop in Swing to get file path? I have a JTextField in my swing application that holds the file path of a file selected to be used. Currently I have a JFileChooser that is used to populate this value. However I would like to add the ability for a user to drag-and-drop a file onto this JTextField and have it place the file path of that file into the JTextField instead of always having using the JFileChooser. How can this be done? There is an example program which contains a class which can be used for facilitating drag and drop for files and folders: http://www.iharder.net/current/java/filedrop/ I tested this with both Windows 7 and Ubuntu 10.10 and it appears to work well in both environments. To use it you add something like this to your code:  JPanel myPanel = new JPanel(); new FileDrop( myPanel new FileDrop.Listener() { public void filesDropped( java.io.File[] files ) { // handle file drop ... } // end filesDropped }); // end FileDrop.Listener +1 .. This really saves a lot of time. Thanks for sharing. Will this work with a JTable instead of a JPanel? @Joe - From the website: ""Any java.awt.Component can be dropped onto but only javax.swing.JComponents will indicate the drop event with a changed border."" - Given JTable is a JComponent I'd say yes it'll completely work with it.  First you should look into Swing DragDrop support. After that there are few little tricks for different operating systems. Once you've got things going you'll be handling the drop() callback. In this callback you'll want to check the DataFlavor of the Transferable. For Windows you can just check the DataFlavor.isFlavorJavaFileListType() and then get your data like this List<File> dropppedFiles = (List<File>)transferable.getTransferData(DataFlavor.javaFileListFlavor) For Linux (and probably Solaris) the DataFlavor is a little trickier. You'll need to make your own DataFlavor and the Transferable type will be different nixFileDataFlavor = new DataFlavor(""text/uri-list;class=java.lang.String""); String data = (String)transferable.getTransferData(nixFileDataFlavor); for(StringTokenizer st = new StringTokenizer(data ""\r\n""); st.hasMoreTokens();) { String token = st.nextToken().trim(); if(token.startsWith(""#"") || token.isEmpty()) { // comment line by RFC 2483 continue; } try { File file = new File(new URI(token)) // store this somewhere } catch(...) { // do something good .... } } +1 Thank you very much! :) However [thankfully] this trick is not necessary with Java7. @Oleg: With Java 7 do you mean that the DataFlavor will be javaFileListFlavor irrespective of platform? @Adamski Yes with Java 7 JRE usage of javaFileListFlavor is enough (at least on Windows and Linux).  In case you don't want to spend too much time researching this relatively complex subject and you're on Windows here's a quick example on how to accept dropped files with a JTextArea as a drop target: JTextArea myPanel = new JTextArea(); myPanel.setDropTarget(new DropTarget() { public synchronized void drop(DropTargetDropEvent evt) { try { evt.acceptDrop(DnDConstants.ACTION_COPY); List<File> droppedFiles = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor); for (File file : droppedFiles) { // process files } } catch (Exception ex) { ex.printStackTrace(); } } }); Warning: this will work on Windows only! Why will this work only on Windows? I'd really like to know it's a nice and clean example. Sorry don't remember anymore. Thank you very much!  This works for me. I am using it like this (scala): def onDrop(files: List[java.io.File]): Unit = { ... } val lblDrop = new Label { peer.setTransferHandler(new FileDropHandler(onDrop)) border = EtchedBorder } class FileDropHandler(val onDrop: List[java.io.File] => Unit) extends javax.swing.TransferHandler { import javax.swing.JComponent import java.awt.datatransfer.{Transferable DataFlavor} import java.net.URI import java.io.File val stdFileListFlavor = DataFlavor.javaFileListFlavor val nixFileListFlavor = new DataFlavor(""text/uri-list;class=java.lang.String"") override def canImport(comp: JComponent flavors: Array[DataFlavor]): Boolean = flavors.exists(flavor => (flavor == stdFileListFlavor) || (flavor == nixFileListFlavor) ) override def importData(comp: JComponent t: Transferable): Boolean = { val flavors = t.getTransferDataFlavors() val files = if (flavors.exists(_ == stdFileListFlavor)) { val data = t.getTransferData(stdFileListFlavor) importStdFileList( data ) } else if (flavors.exists(_ == nixFileListFlavor)) { val data = t.getTransferData(nixFileListFlavor) importNixFileList( data ) } else List() onDrop( files ) !files.isEmpty } private def importStdFileList(data: Any): List[File] = { data.asInstanceOf[List[File]] //XXX NOT TESTED } private def importNixFileList(data: Any): List[File] = { def clean(rawLine: String): Option[String] = { val line = rawLine.trim if (line.length == 0 || line == ""#"") None else Some(line) } def asURI(line: String): Option[URI] = { try { Some(new URI(line)) } catch { case e:Exception => println(e); None } } def asFile(uri: URI): Option[File] = { try { Some(new File(uri)) } catch { case e:Exception => println(e); None } } data.asInstanceOf[java.lang.String].split(""\n"") .toList flatMap clean flatMap asURI flatMap asFile } } (-1) for ""hey you are looking for solution in Java let's waste your time and show how it is done in Scala."" Scala'ists are looking for the typical java-swing questions as well because we're the same ecosystem after all and this answer is not meant for the OP but for the typical stackoverflow-googler... whatever hope to haved wasted hours of your previous time. (-1) for ""The SO-Code-Sample-Button really S****"": keep that kind of comment out of the answer it's useless and clutters what you actually want to explain. If you really have a problem with it discuss it on the [Meta site](http://meta.stackoverflow.com/) not here."
114,A,"Can a Java Applet use the printer? Can a Java Applet able to print out text/html easily to standard printer driver(s) (with all common platforms Win/Mac/Linux)? Does it need to be signed? To print you will either need to use Signed Applets or if an unsigned applet tries to print the user will be prompted to ask whether to allow permission. Here is some sample code for printing HTML using JEditorPane: public class HTMLPrinter implements Printable{ private final JEditorPane printPane; public HTMLPrinter(JEditorPane editorPane){ printPane = editorPane; } public int print(Graphics graphics PageFormat pageFormat int pageIndex){ if (pageIndex >= 1) return Printable.NO_SUCH_PAGE; Graphics2D g2d = (Graphics2D)graphics; g2d.setClip(0 0 (int)pageFormat.getImageableWidth() (int)pageFormat.getImageableHeight()); g2d.translate((int)pageFormat.getImageableX() (int)pageFormat.getImageableY()); RepaintManager rm = RepaintManager.currentManager(printPane); boolean doubleBuffer = rm.isDoubleBufferingEnabled(); rm.setDoubleBufferingEnabled(false); printPane.setSize((int)pageFormat.getImageableWidth() 1); printPane.print(g2d); rm.setDoubleBufferingEnabled(doubleBuffer); return Printable.PAGE_EXISTS; } } Then to send it to printer: HTMLPrinter target = new HTMLPrinter(editorPane); PrinterJob printJob = PrinterJob.getPrinterJob(); printJob.setPrintable(target); try{ printJob.printDialog(); printJob.print(); }catch(Exception e){ e.printStackTrace(); } As Neil COffey's answer you do not need to sign. corrected as per Neil Coffey's answer Tom you have to have it use the HTMLEditorKit. Try testPanel.setContentType(""text/html"") before setting html content with setText Thanks for great code! However one issue with my testing data: testPanel.setText("" This is a test print blaa blaa ""); The output on paper has HTML tags visible so its not formatting e.g. header it just outputs H1 tags. what are all the necessary imports to make this run?  In order to print the security manager needs to allow it to access the printer. This means either signing the applet or at least with recent versions of Sun's Java plugin if an unsigned applet tries to print the user will be prompted to ask whether to allow permission. Even newer versions of the JRE can deploy the applet using JWS and use the `javax.jnlp.PrintService`. It is similar in feel to the 'prompt/print' of an untrusted applet. Wew! I would hate if a random site starts printing spam on my sheets... :-) PhiLho: There is a dialog box. JavaScript can do the same. Neil Coffey: Recent versions? It's been there for a decade. Tom -- thanks for the correction -- is it really that long...? You've suddenly made me feel very old!! :-)"
115,A,Modifying a Swing Timer's Delay during Runtime I'm developing a Queue simulation using a Swing Timer to dequeue objects after certain amounts of time. The interval is determined by peeking at the next object in the queue getting an integer from it and setting the delay of its corresponding timer. Here's the relevant snippet from the program (Note: _SECONDS_PER_ITEM is a constant defined elsewhere to 2000): // stop the timer qTimer[q].stop(); // peek at how many items the customer has and set the delay. qTimer[q].setDelay(customerQueue[q].peek().getItems()*_SECONDS_PER_ITEM); // the next time around this method will see the flag and dequeue the customer. working[q] = true; // denote that the customer is active on the UI. lblCustomer[q][0].setBorder(new LineBorder(Color.RED 2)); // start the timer. qTimer[q].start(); The problem I have is that every customer no matter how many items they have is processed in one second. Is there some other method or technique I should be using to set the delay? It would seem that when stop()ing a Timer the delay that is used to fire the next event is the initial delay. Thus the correct method to use in the above example is setInitialDelay(): { // stop the timer qTimer[q].stop(); // peek at how many items the customer has and set the delay. qTimer[q].setInitialDelay(customerQueue[q].peek().getItems()*_SECONDS_PER_ITEM); // the next time around this method will see the flag and dequeue the customer. working[q] = true; // denote that the customer is active on the UI. lblCustomer[q][0].setBorder(new LineBorder(Color.RED 2)); // start the timer. qTimer[q].start(); }
116,A,Java Swing: How to bind a JLabel's text to a column in the selected row of a JTable? I am using Netbeans and am trying to find a way for the IDE to auto-generate the code for me. I remember binding a JLabel's text to a column in the selected row of the JTable before but in that case the JTable's values were from an entity manager and it was very easy. I was wondering if there is a way to do it even if the JTable is not tied to a database. Also how else could one do it? I was thinking of implementing a ListSelectionListener and whenever an event got generated just update the text of the label. I think your second solution is best way to do it something like this: public class LabelSyncer implements ListSelectionListener { private JLabel toSync; private int columnIndex; public LabelSyncer(JLabel toSync int columnIndex) { } public void valueChanged(ListSelectionEvent e) { JTable table = (JTable) e.getSource(); int row = table.getSelectedRow(); toSync.setText(table.getModel().getValueAt(row columnIndex).toString()); } } and then table.getSelectionModel().addListSelectionListener(new LabelSyncer(label columnIndex)); Something like this. Probably a more generic solution but this should work.
117,A,Howto manage the game state in face of the EDT? I'm developing a real time strategy game clone on the Java platform and I have some conceptional questions about where to put and how to manage the game state. The game uses Swing/Java2D as rendering. In the current development phase no simulation and no AI is present and only the user is able to change the state of the game (for example build/demolish a building add-remove production lines assemble fleets and equipment). Therefore the game state manipulation can be performed in the event dispatch thread without any rendering lookup. The game state is also used to display various aggregated information to the user. However as I need to introduce simulation (for example building progress population changes fleet movements manufacturing process etc.) changing the game state in a Timer and EDT will surely slow down the rendering. Lets say the simulation/AI operation is performed in every 500ms and I use SwingWorker for the computation of about 250ms in length. How can I ensure that there is no race condition regarding the game state reads between the simulation and the possible user interaction? I know that the result of the simulation (which is small amount of data) can be efficiently moved back to the EDT via the SwingUtilities.invokeLater() call. The game state model seems to be too complex to be infeasible for just using immutable value classes everywhere. Is there a relatively correct approach to eliminate this read race condition? Perhaps doing a full/partial game state cloning on every timer tick or change the living space of the game state from EDT into some other thread? Update: (from the comments I gave) The game operates with 13 AI controlled players 1 human player and has about 10000 game objects (planets buildings equipment research etc.). A game object for example has the following attributes: World (Planets Players Fleets ...) Planet (location owner population type map buildings taxation allocation ...) Building (location enabled energy worker health ...) In a scenario the user builds a new building onto this planet. This is performed in EDT as the map and buildings collection needs to be changed. Parallel to this a simulation is run on every 500ms to compute the energy allocation to the buildings on all game planets which needs to traverse the buildings collection for statistics gathering. If the allocation is computed it is submitted to the EDT and each building's energy field gets assigned. Only human player interactions have this property because the results of the AI computation are applied to the structures in EDT anyway. In general 75% of the object attributes are static and used only for rendering. The rest of it is changeable either via user interaction or simulation/AI decision. It is also ensured that no new simulation/AI step is started until the previous one has written back all changes. My objectives are: Avoid delaying the user interaction e.g. user places the building onto the planet and only after 0.5s gets the visual feedback Avoid blocking the EDT with computation lock wait etc. Avoid concurrency issues with collection traversal and modification attribute changes Options: Fine grained object locking Immutable collections Volatile fields Partial snapshot All of these have advantages disadvantages and causes to the model and the game. Update 2: I'm talking about this game. My clone is here. The screenshots might help to imagine the rendering and data model interactions. Update 3: I'll try to give a small code sample for clarify my problem as it seems from the comments it is misunderstood: List<GameObject> largeListOfGameObjects = ... List<Building> preFilteredListOfBuildings = ... // In EDT public void onAddBuildingClicked() { Building b = new Building(100 /* kW */); largeListOfGameObjects.add(b); preFilteredListOfBuildings.add(b); } // In EDT public void paint(Graphics g) { int y = 0; for (Building b : preFilteredListOfBuildings) { g.drawString(Integer.toString(b.powerAssigned) 0 y); y += 20; } } // In EDT public void assignPowerTo(Building b int amount) { b.powerAssigned = amount; } // In simulation thread public void distributePower() { int sum = 0; for (Building b : preFilteredListOfBuildings) { sum += b.powerRequired; } final int alloc = sum / (preFilteredListOfBuildings.size() + 1); for (final Building b : preFilteredListOfBuildings) { SwingUtilities.invokeLater(=> assignPowerTo(b alloc)); } } So the overlapping is between the onAddBuildingClicked() and distributePower(). Now imagine the case where you have 50 of these kind of overlappings between various parts of the game model. The easiest approach is to make the simulation fast enough to run in the EDT. Prefer programs that work! For the two-thread model what I suggest is synchronise the domain model with a rendering model. The render model should keep data on what came from the domain model. For an update: In the simulation thread lock the render model. Traverse the render model updating where things are different from what is expected update the render model. When finished traversing unlock the render model and schedule a repaint. Note that in this approach you don't need a bazillion listeners. The render model can have different depths. At one extreme it might be an image and the update operation is just to replace a single reference with the new image object (this wont handle for instance resizing or other superficial interaction very well). You might not bother checking whether an item has change and just update eveything. Unfortunately the number of game objects (~10000) and AI players (13) requires about 250-300ms computation time (depending on the system). The UI animation and responsiveness is set to 20 FPS=50ms minimum. The update path is clear because AI and simulation imposed model changes affect about 500 game objects and most of it is just simple value assignment. And I don't want user action and UI response to be too far away (user actions are mouse clicks and keypresses which emerge on the EDT).  How about implementing a pipes and filters architecture. Pipes connect filters together and queue requests if the filter is not fast enough. Processing happens inside filters. The first filter is the AI engine while the rendering engine is implemented by a set of subsequent filters. On every timer tick the new dynamic world state is computed based on all the inputs (Time is also an input) and a copy inserted into the first pipe. In the simplest case your rendering engine is implemented as a single filter. It just takes the state snapshots from the input pipe and renders it together with the static state. In a live game the rendering engine may want to skip states if there are more than one in the pipe while if you're doing a benchmark or outputting a video you'll want to render every one. The more filters you can decompose your rendering engine into the better the parallelism will be. Maybe it is even possible to decompose the AI engine e.g. you may want to separate dynamic state into fast changing and slow changing state. This architecture gives you good parallelism without a lot of synchronization. A problem with this architecture is that garbage collection is going to run frequently freezing all the threads every time possible killing any advantage gained from multi-threading. In the design above there is no shared state between different threads. The first filter makes a copy of computed dynamic state which is passed along the chain. It then starts a new computation on the world state and inputs. Every subsequent filter works on this copy. The copy is only pushed into a pipe when the filter has finished. At the end of the pipeline the copy gets discarded. The problem is not how I will spit the computation. The problem is how to share the data between the computation the rendering and the real-time user interaction. Rendering and user interaction takes place in EDT - no conflict there but the simulation/AI computation requires a non-changing gameworld as input during their run. The question is how can I cheaply share the state without threading issues - full/partial copy; volatile fields etc?  It looks like you need a priorityqueue to put the updates to the model on in which updates frmo the user have priority over the updates from the simulation and other inputs. What I hear you saying is that the user always needs immediate feedback over his actions wheras the other inputs (simulation otherwise) could have workers that may take longer than one simulation step. Then synchronize on the priorityqueue. I don't know how to put more emphasis on the fact that the question is NOT about how I will apply changes to the model because that operation is clear and fast enough. The question is about how I traverse and modify the game model practically at the same time with a solution having the least threading related causes. No offense.  Is it possible to incrementally update the game state and still have a model that is consistent? For example recalculate for a subset of planet/player/fleet objects in between renders/user updates. If so you could run incremental updates in the EDT that only calculate a small part of the state before allowing the EDT to process user inputs and render. Following each incremental update in the EDT you would need to remember how much of the model remains to be updated and schedule a new SwingWorker on the EDT to continue this processing after any pending user inputs and rendering has been performed. This should allow you to avoid copying or locking the game model while still keeping the user interactions responsive. Like a round-robin style? The AI players take turn in the EDT as well as the human player? In terms of the simulation progress this might be a feasible solution. (In the current version the resource allocation is done in EDT on every repaint() but only for the currently selected planet). I'm thinking now in a hybrid version.  Not sure I fully understand the behavior you are looking for but it sounds like you need something like a state change thread/queue so all state changes are handled by a single thread. Create an api maybe like SwingUtilities.invokeLater() and/or SwingUtilities.invokeAndWait() for your state change queue to handle your state change requests. How that is reflected in the gui I think depends on the behavior you are looking for. i.e. Can't withdraw money because current state is $0 or pop back to the user that the account was empty when the withdraw request was processed. (probably not with that terminology ;-) ) No the problem is not with the state change part but rater to avoid race condition between user initiated state change and some currently running state-evaluation. The true solution would be the software transactional memory but it is not really available yet. STM is only software. It's not likely to solve performance problems. if all state-eval and state change were performed in the same thread it shouldn't be an issue. So add your state evaluation to the same queue as the state changes.  This sounds like it could benefit from a client/server approach: The player is a client - interactivity and rendering happen on that end. So the player presses a button the request goes to the server. The reply from the server comes back and the player's state is updated. At any point between these things happening the screen can be re-painted and it reflects the state of the game as the client currently knows it. The AI is likewise a client - it's the equivalent of a bot. The simulation is the server. It gets updates from its clients at various times and updates the state of the world then sends out these updates to everyone as appropriate. Here's where it ties in with your situation: The simulation/AI requires a static world and many things are happening at once. The server can simply queue up change requests and apply them before sending the updates back to the client(s). So as far as the server's concerned the game world isn't actually changing in real time it's changing whenever the server darn well decides it is. Finally on the client side you can prevent the delay between pressing the button and seeing a result by doing some quick approximate calculations and displaying a result (so the immediate need is met) and then displaying the more correct result when the server gets around to talking to you. Note that this does not actually have to be implemented in a TCP/IP over-the-internet sort of way just that it helps to think of it in those terms. Alternately you can place the responsibility for keeping the data coherent during the simulation on a database as they're already built with locking and coherency in mind. Something like sqlite could work as part of a non-networked solution. Thank you now I see the bigger picture. You actally solved two of my problems related to this game (the second is approximately depicted in my other question: http://stackoverflow.com/questions/993635/long-running-rts-game-multiplayer-considerations). The local and network game to be designed as same so there is practically no differentiation between a single-player and a multiplayer 'game-engine'. Ultimately it's just message passing. The point is yours.  If changing the game state is fast (once you know what to change it to) you can treat the game state like other Swing models and only change or view the state in the EDT. If changing the game state is not fast then you can either synchronize state change and do it in swing worker/timer (but not the EDT) or you can do it in separate thread that you treat similarly to the EDT (at which point you look at using a BlockingQueue to handle change requests). The last is more useful if the UI never has to retrieve information from the game state but instead has the rendering changes sent via listeners or observers. The problem is not the state change issued by the SwingWorker but the potential overlapping of user action and the evaluations running in the SwingWorker. For example the worker thread wants to compute the total energy demand and energy production of the player's buildings on the player's planets and then assign energy to various buildings based on some criteria. But when this aggregation runs the user might issue commands in EDT to add or remove buildings on a planet. If the state model is shared this leads to concurrency problems. I'm looking for methods to avoid this. You will need to synchronize the aggregation and the changes either by using a lock (possibly a ReadWriteLock) or by putting all the code in a single thread (although then it would have to be a thread other than the EDT). Approximately 75% of the game model is used for rendering or read only. The dynamic part is written in EDT and read in EDT/worker threads. Writes never overlap but reads/writes might. If the model is not in the EDT rendering slows down due increased number of cross-boundary query/lock contention. I'm thinking about taking a snapshot of the 25% into a sub model and use that as a read-only basis for the computations. Some of the computation/aggregation is currently performed in EDT on each rendering pass but these have to be moved elsewhere anyway.  I think you shouldn't have World store any data or make changes to any objects itself it should only be used to maintain a reference to an object and when that object needs to be changed have the Player making the change change it directly. In this event the only thing you need to do is synchronize each object in the game world so that when a Player is making a change no other Player can do so. Here's an example of what I'm thinking: Player A needs to know about a Planet so it asks World for that Planet (how is dependent upon your implementation). World returns a reference to the Planet object Player A asked for. Player A decides to make a change so it does so. Let's say it adds a building. The method to add a building to the Planet is synchronized so only one player can do so at a time. The building will keep track of its own construction time (if any) so the Planet's add building method would be freed up almost immediately. This way multiple players can ask for information on the same planet at the same time without affecting each other and players can add buildings almost simultaneously without much appearance of lag. If two players are looking for a place to put the building (if that is part of your game) then checking the suitability of a location will be a query not a change. I'm sorry if this doesn't answer you're question I'm not sure if I understood it correctly. The GUI renders based on state fields: progress field in the Building object. For progress between 0 and 10% show image 1 10-20% image 2 etc. However the progress is changed by simulation. On every 500ms the progress state is incremented. However the gameworld requires hundreds of state changes which depend on aggregated properties. For example building speed depends on all available factory capacity in the entire kingdom. This capacity value requires the simulation to traverse all buildings of all planets of the player for every player. The problem is that the planet statistics building state is used for rendering (90%) and simulation based progresses (25%) with overlapping between the two. For example the current complete percentage is drawn onto the building image on every repaint(). The players are fairly separated in terms of the planet and building evolution. Maybe I should put a reference to the actual game. Just to go through this step by step to make sure that I don't miss anything how does the GUI function? I had figured you were using an Observer pattern to have the GUI rendered based on the information contained in the objects it was showing. If the GUI is driving the construction of the building (to use your example) then that would create a problem.
118,A,Controlling JFrame from JMenuBar I am trying to maximize JFrame from within JMenuBar I can not pass a reference to the frame. Is it possible to get a reference to the frame that it is used in? i can get to the top level component but it does not have a way to maximize and minimize frame.  public Container getApplicationFrame(ActionEvent event){ JMenuItem menuItem = (JMenuItem) event.getSource(); JPopupMenu popupMenu = (JPopupMenu) menuItem.getParent(); Component invoker = popupMenu.getInvoker(); JComponent invokerAsJComponent = (JComponent) invoker; Container topLevel = invokerAsJComponent.getTopLevelAncestor(); return topLevel; } The class that creates the frame and the menubar can also act as the ActionListener for the menu item since it has access both the frame and the menubar.  Surely you can stash the frame in question in a local variable somewhere? As for actually maximizing the Frame once you've got ahold of it Frame.setExtendedState(MAXIMIZED_BOTH) is probably what you want. Javadoc While not as elegant as it could be quick path to ground on your existing code: public Frame getApplicationFrame(ActionEvent event){ if(event.getSource() == null) return null; Window topLevel = SwingUtilities.getWindowAncestor(event.getSource()); if(!(topLevel instanceof Frame)) return null; return (Frame)topLevel; } ... //Somewhere in your code Frame appFrame = getApplicationFrame(myEvent); appFrame.setExtendedState(appFrame.getExtendedState() | Frame.MAXIMIZED_BOTH); ... Minimum Java version 1.4.2. Be forwarned I have not tested the above code but you should get the idea.  You can get the Window that contains the JPanel via Window window = SwingUtilities.getWindowAncestor(popupMenu); You can then either maximise it using window.setSize() -- or since you seem to know that it's a JFrame cast it to Frame and use the setExtendedState method that Kevin mentions. Example code from the Java Developers' Almanac for that: // This method minimizes a frame; the iconified bit is not affected public void maximize(Frame frame) { int state = frame.getExtendedState(); // Set the maximized bits state |= Frame.MAXIMIZED_BOTH; // Maximize the frame frame.setExtendedState(state); }
119,A,"Standards for using inner classes for GUI? I'm wondering about the standard practice with inner classes (in Java but I suppose it applies to all OO languages). So I have a JFrame subclass ControllerWindow that contains a JPanel subclass MapPanel which I draw onto (so it needs to overwrite paintComponent method) and which needs to implement a mouse listener. My current solution which works is to have MapPanel in a seperate class implementing MouseListener but when I showed this to the guy who runs my course the other day he seemed to think (we have a bit of a language barrier) this should be in an inner class in ControllerWindow or at least the MouseListener should be an inner class. So my question is what would be the standard solution here to put a MouseListener in the inner class the JPanel in a different inner class or still in its seperate class? The JPanel implementing MouseListener in one inner class? And why? The most important thing to me is that it works but I'd like to know about and understand the standard practices behind these things if possible. EDIT: Very simplified version of current code below. class ControllerWindow extends JFrame{ ... MapPanel drawPanel = new MapPanel(); ... } and a separate class: class MapPanel extends JPanel implements MouseListener{ ... public void paintComponent(Graphics g){ ...//fillRects etc. } //MouseListener methods public void mouseReleased(MouseEvent e){ requestFocus(); ... repaint() ... } public void mousePressed(MouseEvent e){} public void mouseEntered(MouseEvent e){} public void mouseExited(MouseEvent e){} public void mouseClicked(MouseEvent e){} } Also could this be a situation where it would be acceptable to put both classes in the same file? I don't envisage using MapPanel for anything other than ControllerWindow. The standard practice for GUI code is one big ball of mud. Could you provide some code? Simplified if necessary. Because of multiple event handling requirement anonymous inner classes are required. Anonymous class can be written anywhere like in a class in a method in the argument. Therefore to abstain from creating many classes for each listener anonymous is preferred.  It is common to use anonymous inner classes as event listeners because the code is usually quite simple (so a separate class may be overkill) and keeping the handler code ""close"" to the code that registers the listener can improve readability for people trying to understand your code since all code related to the event is in one place. EDIT: This is particularly true for classes that implement only one listener method. Perhaps less true for multi-method interfaces like MouseListener since a class that implements the full interface will be more verbose. For interfaces like `MouseListener` there are classes like `MouseAdapter` that let you override only the methods you really care about. Yup and this can also be done as an anonymous inner class. Everybody wins.  inner class would be better if it has a simpler syntax. button1.click( function(event){ do something x... } ); button2.click( function(event){ do something y... } ); radio2.check ( function(event){ do something z... } ); java 7 may give us something like that and change the whole situation. as it is now using a lot of annonymous inner classes can mess up the code and make it impossible to read. you should choose whichever style that makes your code beautiful and legible.  I found this article useful: http://www.retrologic.com/innerclasses.doc3.html In general when you need to use a method pointer; extend adapter classes as inner classes to simplify your code.  I think it's somewhat arbitrary how you go about it (as Tom Hawtin commented GUI standards=mud) since you're trading off complexity in the number of classes versus complexity in a single class. If you want to produce code simply for a demonstration a single file might be easiest. If you want code that you're going to put into production and modify/maintain over time abstracting out into different classes is almost certainly the way you want to go. For example if you embed MapPanel as an inner class in ControllerWindow and then later want to replace it with a different type of MapPanel you've got a massive update to ControllerWindow rather than just swapping out MapPanel for a different component type. With the MouseListener I'd be inclined to include it in MapPanel if it's handling events specifically for that component (that is if only the MapPanel ""knows"" what a click means it should be the one to process that click). I definitely wouldn't put it in ControllerWindow since then you're ""leaking"" implementation detail from MapPanel. (The only case I can think of: in addition to your MapPanel you have multiple panels type that all need to respond to clicks in the same way so rather than implementing in each panel you could have the ControllerWindow do it. But even then I'm not sure the code should be in ControllerWindow). Whether MapPanel's mouse listener is an inner class implementation of MouseListener or whether MapPanel implements it (as in your code above) probably comes down to a question of which style you prefer."
120,A,Containers class owner's child object having to add components into his parent's container problem I am having problems dealing with containers and components in my JApplet. I don't put my code because I think there is no need for it. The main class owns the getContentPane(). Another class (let's call it class1) owns a JLayeredPane() and components that are added to it. Another class (let's call it class2) only have components to show. At the init() the main class adds class1's JLayeredPane(). At a later time class1 adds its components to its JLayeredPane() and create a new object from class2. Class2 is supposed to generate a variable number of components (the number of components and their properties change with time) but can't add them to class1's JLayeredPane(). How can I have the class2 components to be showed ? Thanks for reading. You can: Give a reference of class1 to class2 ....In Class1 code Class2 two = new Class2(); two.setClass1Ref( this ); And each time two adds new components set them to one ... in Class2 code Class1 one ... JComponent newComponent = .... one.add( newComponent ); // onw.add delegates to its own JLayaredPane If you don't want to have a reference of Class1 in Class2 then you can add a callback method on or something like a ContainerListener   Three ways 1. Pass JLayeredPane() to the class2's constructor or a method 2. Class2 has methods that return the components that Class1 can add to JLayeredPane() 3. Pass Class1's object to class2 which will call Class1's method through a known interface that Class1 implements (a callback) The first way worked perfectly ! Thank you.
121,A,Change button text without changing button size I'm using a borderLayout to arrange my components in a JFrame and a Box(BoxLayout.X_AXIS) to put buttons next to each other. But it creates two problems: I want the buttons to have the same size but it automatically resizes them to fit the text within them (especially annoying when I change the text inside a button at runtime) I want the buttons to have a little bit of space between them (let's say 10 px) Is this possible using the borderLayout or do I need to use the setLayout to null? And if so wouldn't this screw up the original placement of the buttons in the frame? Or would this still be dealt with by the Box which is placed with the borderLayout? A couple of suggestions Try setting the preferredSize to a suitable Dimension value If that doesn't work try also setting the maximumSize and minimumSize to this same Dimension value If that still doesn't work change the buttons' layout manager to a GridBagLayout. The advantage of this layout manager is that it lets you control the layout's behaviour in minute detail. The disadvantage is that you usually need to configure a large number of properties on the GridBagLayout in order to get the desired behaviour. I'd advise checking out a GridBagLayout tutorial first as it's a reasonably complex beast. Thanks setting the minimum/maximum size of the buttons worked. I'm now looking into the GridBagLayout. Setting the preferredSize only seems to work for the height not the width.  If you want them to have the same size then just add the buttons to a GridLayout and they will automatically be sized to the largest text string. You can also specify a gap between components. Thanks I've looked into the GridBagLayout but I think it is a bit too elaborate for the couple of buttons that I have so I'll try this GridLayout now (already came across it when reading about the GridBagLayout). If I can set a gap then that would be great.
122,A,"Unwanted border around JPanel I'm creating a form with a JPanel inside it for some graphics and some buttons for controlling the thing. For some reason I have to specify the JPanel to be 10 px less wide and 30 px less high than the actual graphics I want to put inside it. What causes this problem? This is the code: public class Window { public Sheepness sheepness; public ButtonPanel buttonPanel; public PaintPanel paintPanel; public JFrame frame; public Window(Sheepness sheepness) { this.sheepness = sheepness; frame = new JFrame(""Sheepness simulation""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //frame.setSize(width height); BorderLayout frameLayout = new BorderLayout(); JPanel background = new JPanel(frameLayout); background.setBorder(BorderFactory.createEmptyBorder(5 5 5 5)); buttonPanel = new ButtonPanel(this); background.add(BorderLayout.SOUTH buttonPanel.buttonBox); paintPanel = new PaintPanel(this); paintPanel.setPreferredSize(new Dimension(320 240)); background.add(BorderLayout.CENTER paintPanel); frame.getContentPane().add(background); frame.pack(); frame.setResizable(false); frame.setVisible(true); } } public class PaintPanel extends JPanel { public Window window; public PaintPanel(Window window) { this.window = window; } @Override public void paintComponent(Graphics g) { g.setColor(Color.blue); g.fillRect(0 0 320 240); } } Screenshot with a preferredSize of 320 x 240: . You can see the 320 x 240 fillRect doesn't fill the JPanel entirely a border of 10 px width and 30 px height remains. Screenshot with a preferredSize of 310 x 210: . Now it fits the 320 x 240 fillRect exactly! Any ideas? btw adding the border showed there wasn't any interaction with the buttonPanel since it showed the JPanel was lining up nicely with the buttons but as you can read from the previous comment the JPanel itself has the wrong size after packing. Try adding a `Border` (`BorderFactory.createLineBorder(Color.RED 1)`) around `paintPanel` so that you can rule out interaction with `buttonPanel`. I checked the size of the JPanel after setting it with the setPreferredSize: Arguments: Width: 640 Height: 480 after setPreferredSize and setSize: Width: 640 Height: 480 after frame.pack: Width: 650 Height: 510. I guess it has to do with the algorithm that packs everything. Still isn't it strange that the size is increased? Is there a way to tell the thing to stop touching the size of my components just their alignment? I thought this was supposed to be setPreferredSize but I guess this doesn't to what it's supposed to either. Different layout managers use different rules for computing actual managed controls sizes i.e. you can't expect that the panel has particular size only if you call 'setPreferredSize()' on it. Feel free to check javadoc for all target layout managers for more details about used algorithm in every particular case. Also note that you can avoid using layout managers and define all sizes absolutely via 'setBounds()' method.  believe it or not but try inverting the order of pack() and setResizeable()  ... frame.setResizable(false); frame.pack(); // should be called after any changes frame.setVisible(true); EDIT: checked using this  frame.pack(); frame.setResizable(false); System.out.println(paintPanel.getSize()); frame.setVisible(true); System.out.println(paintPanel.getSize()); and  frame.setResizable(false); frame.pack(); System.out.println(paintPanel.getSize()); frame.setVisible(true); System.out.println(paintPanel.getSize()); but if size isn't important you can fill the actual area with @Override public void paintComponent(Graphics g) { g.setColor(Color.blue); g.fillRect(0 0 getWidth() getHeight()); } []] You are filling the panel with getWidth() and getHeight() in your example this will cause the panel to fill up whatever the size of the panel. Try predefining the size of your panel and then after packing it filling it with a rectangle that same size. @FinalArt2005: isn't that what you want to do? fill the panel! Anyway I did the tests using the predefined size using exactly your code only changed the position of the pack() call! Very strange cause that doesn't work for me :s. And to comment on the filling: I don't want to fill the panel I want it to have a certain size ok eventually I will fill it with something but what I meant is that if I fill it with the getWidth and getHeight methods I don't have a border but also my filled area would be too big. I think I'll just have to accept the fact that as Denis Zhdanov already mentioned the preferredSize is used differently by different layout managers and that it's no guarantee the component will actually have that size after packing. Maybe it's a system or LookAndFeel specific problem... Im using Windows XP and the standard LookAndFeel. also strange that the size get changed in the setVisible() call... Thanks for the tip but it doesn't get rid of the border either. works fine here without the ButtonPanel (no code) I just get the 5x5 border (EmptyBorder). Using Java build 1.6.0_16-b01 on Windows XP I was just about to post that setResizable(false) is affecting this. I'm also seeing it work correctly if the order of setResizable(false) / pack() are reversed - JDK 1.5.0_16 on Windows Vista.  Here's a self-contained test case based on your code:  import java.awt.*; import javax.swing.*; public class Test { public PaintPanel paintPanel; public JFrame frame; public Test() { frame = new JFrame(""Sheepness simulation""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //frame.setSize(width height); BorderLayout frameLayout = new BorderLayout(); JPanel background = new JPanel(frameLayout); background.setBorder(BorderFactory.createEmptyBorder(5 5 5 5)); paintPanel = new PaintPanel(this); paintPanel.setPreferredSize(new Dimension(320 240)); background.add(BorderLayout.CENTER paintPanel); frame.getContentPane().add(background); frame.pack(); frame.setResizable(false); frame.setVisible(true); } public static class PaintPanel extends JPanel { public Test window; public PaintPanel(Test window) { this.window = window; } @Override public void paintComponent(Graphics g) { g.setColor(Color.blue); g.fillRect(0 0 320 240); } } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { new Test(); } }); } } When I run it on an IcedTea JVM on Linux I see this. Your problem is either due to the button container forcing the window to be wider or possibly due to a Swing bug in the version of Java you're using. My recommendation is not to bother with the built-in layout classes and to use MigLayout instead. I'd like to comment on one of the comments above but can comment there... Almost all layout managers ignore maximum and minimum size and some don't do exactly what you'd expect with preferred size. MigLayout respects all of these. This will get you something pretty close to what you're looking for: background.setLayout(new MigLayout(""ins 5"")); background.add(paintPanel ""w 320! h 240! wrap""); background.add(buttonPanel ""gapabove unrel""); http://www.migcalendar.com/miglayout/ I'm using Sun Java 6. I haven't checked the button container yet but since both cases use the exact same button container it seems unlikely that that is the problem. It's not so much that I want to solve the problem (I can just decrease the preferred size so it does work) but I want to find out what causes it.  I guess you got the label on the screenshots wrong. If you specify g.fillRect(0 0 310 210); in PaintPanel and paintPanel.setPreferredSize(new Dimension(320 240)); in Window. You get that what the first screenshot shows. Which makes sense as the rectangle has 10px less width and 30px less height. If you set the same (width/height; 310 210) for both the blue rectangle obviously ""fills ""the PaintPanel out. No it's backwards: it you set the fillRect to 00320240 and the preferredSize to 310210 you get the filled screenshot with both the same dimension you get the border that's exactly what my problem is."
123,A,"Problem with JEditor Pane while resizing the frame i am new to java GUI programming. i am adding a JEditor pane (with HTML text ) inside a JScrollPane and added the scroll pane to a JFrame.The problem is when i re size the frame the JEditor pane vanishes. Any one help me ? Hi All  Following is the code : here another problem is i set weightx and weighty for the pane .But still the JEditor pane is not resizing when the frame is maximized/mimized public class GridBagWithJEditorPane extends javax.swing.JFrame { public GridBagWithJEditorPane() { initComponents(); } private void initComponents() { java.awt.GridBagConstraints gridBagConstraints; Panel1 = new javax.swing.JPanel(); Button1 = new javax.swing.JButton(); Label = new javax.swing.JLabel(); Panel2 = new javax.swing.JPanel(); ScrollPane = new javax.swing.JScrollPane(); EditorPane1 = new javax.swing.JEditorPane(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); getContentPane().setLayout(new java.awt.GridBagLayout()); Panel1.setLayout(new java.awt.GridBagLayout()); Button1.setText(""Button""); Panel1.add(Button1 new java.awt.GridBagConstraints()); Label.setText(""Label""); Panel1.add(Label new java.awt.GridBagConstraints()); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST; getContentPane().add(Panel1 gridBagConstraints); Panel2.setLayout(new java.awt.GridBagLayout()); ScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS); EditorPane1.setContentType(""text/html""); EditorPane1.setText(""<html>\r\n <head>\r\n\r\n </head>\r\n <body>\r\n <p style=\""margin-top: 0\"">\r\n \rHere some html text sakdjslakdjsa dksa dsakjdklsajdklsad klsajd lksad<br>\n asdka;slkd;laskd;sa dlksa dksa dksald;lsakd;lsakd;l ska;dl sal;dk;salkd<br>\n asas;alks;laKSL;Kalk ALSKLAks;laSAsLAKS;Lk;slk<br>\t\n alsdasldk;alskd;laskd;l sadksa;dlksa;ldk;saldk;alsd<br>\n </p>\r\n </body>\r\n</html>\r\n""); EditorPane1.setMinimumSize(new java.awt.Dimension(15 15)); EditorPane1.setPreferredSize(new java.awt.Dimension(340 220)); ScrollPane.setViewportView(EditorPane1); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH; gridBagConstraints.weightx = 1.0; gridBagConstraints.weighty = 1.0; Panel2.add(ScrollPane gridBagConstraints); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.gridx = 0; gridBagConstraints.gridy = 1; gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH; getContentPane().add(Panel2 gridBagConstraints); pack(); } public static void main(String args[]) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new GridBagWithJEditorPane().setVisible(true); } }); } private javax.swing.JButton Button1; private javax.swing.JEditorPane EditorPane1; private javax.swing.JLabel Label; private javax.swing.JPanel Panel1; private javax.swing.JPanel Panel2; private javax.swing.JScrollPane ScrollPane; } Cross posted at JavaRanch. Quit cross posting. Do you think we like wasting time answering a questions that has already been answered? Hi Camickr ..ya i accept its in java ranch .. if i got the solution i will post here also and set the status of this question to ""ANSWERED"".. anyway now onwards i avoid this kind of cross posting ..thnks to remain me .. Yes well the problem is that you've been away from your computer for 15 hours. During that time 3 different people could have been wasting time answering the question that you posted on another forum. So even if you do mark the question as answered in all forums its still too little too late. can you post some related code....difficult tohelp without that :) sure i paste the code .. hi Suraj .. i have added the code above .. I suggest not using GridBagLayout. There are plenty of more modern layout managers out there (MiGLayout FormLayout SpringLayout...) and for that matter you can almost always get what you want just by nesting JPanels with BorderLayouts. This will also make your layout problems much easier to diagnose. Seriously I've been programming in Java since 1995 and with Swing since 1998 and I've never bothered to learn GridBagLayout properly. It's just not worth the effort. is the above layouts are custom one or they are present in jdk itself? SpringLayout is in the JDK since Java 1.4. (And BorderLayout has been in Swing forever.)  solved the problem myself . The solution is same as in resize problem with JList? I gave you the answer 5 hours before you apparently solved the problem yourself.  Small working example. Show us your code else we won't be able to tell where your problem lies import javax.swing.*; public class Test { public static void main (String args[]) { SwingUtilities.invokeLater(new Runnable() { public void run() { JFrame frame = new JFrame(""JScrollPane+JEditorPane""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.add(new JScrollPane(new JEditorPane())); frame.pack(); frame.setVisible(true); } }); } } ya it work .. bbut i am using gridbag layout ..i try to paste the code . hi Jitter ..i have added the code above  The problem is you set weightX/Y values for the scroll pane but not the panel. Why are you adding the scroll pane to a panel and then adding the panel to the frame? The panel is unnecessary. hi camickr ... i have the constraint like that i need to add the scrollpane to a panel and then add it to a frame .. still i have problem ..how to resolve ? I gave you the answer. In fact I gave you two suggestions. If you want a 3rd suggestion then listen to the advice you got earlier and you a more appropriate combination of layout managers. There is no need to nest GrigBagLayouts. Other layout managers are easier to use and understand."
124,A,"Swing component flickering when updated a lot I've got a couple thousand lines of code somewhere and I've noticed that my JTextPane flickers when I update it too much.. I wrote a simplified version here: import java.awt.*; import javax.swing.*; public class Test { static JFrame f; static JTextPane a; static final String NL = ""\n""; public static void main(String... args) { EventQueue.invokeLater(new Runnable(){ public void run() { f = new JFrame(); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.setVisible(true); f.setSize(400 300); f.setLocationRelativeTo(null); a = new JTextPane(); f.add(new JScrollPane(a)); new Thread(new Runnable(){ public void run() { int i = 0; StringBuffer b = new StringBuffer(); while(true) { b.append(++i+NL); a.setText(b.toString()); a.setCaretPosition(b.length()); try{Thread.sleep(10);}catch(Exception e){} } } }).start(); } }); } } This is for a terminal (cmd) style GUI component-- I think I've made all the optimizations I could here including having \n as a final variable so it won't be constructed hundreds of times. Still the flickering is noticeable and unacceptable. After a few minutes the component freezes completely. I must update the component very quickly and the pane must be scrolled to the bottom when updated. I've been thinking about making my own version of JTextPane from scratch but I'd like to see if you guys have an easier solution. Why the curious emphasis on the word ""experts""? Did you think you'd get a better answer by insulting us? Sorry no offense intended. Edited. Part of your error is that you are accessing a Swing component from outside the event thread! Yes setText() is thread-safe but Swing methods are not Thread-safe unless they are explicitly declared as such. Thus setCaretPosition() is not Thread-safe and must be accessed from the event thread. This is almost certainly why your application eventually freezes. NOTE: JTextPane inherits its setText() method from JEditorPane and its setCaretPosition method from JTextComponent which explains the links in the previous paragraph not going to the JTextPane JavaDoc page. To be Thread-safe you really need to at least call setCaretPosition() from within the event thread which you can do with code like this: SwingUtilities.invokeAndWait(new Runnable() { public void run() { a.setText(b.toString()); a.setCaretPosition(b.length()); } } And since you have to call setCaretPosition() from within the event thread you might as well also call setText() from the same place. It's possible that you may not need to manually set the caret position. Check out the section ""Caret Changes"" in the JavaDoc for JTextComponent. Finally you may want to check out a series of two articles: Faster JTextPane Text Insertion (Part I) Faster JTextPane Text Insertion (Part II) Not the sleep! But the setCaretPosition *must* be in the EDT. Otherwise you will experience occasional (or not so occasional) hangs. I can't really put all that in the EDT because the sleep() will clog it up so much that the component will freeze completely.  While JRE version 8 has problems. JRE 7 works fine. To switch your JRE version go to Window Preferences Java Installed JREs Add Standard VM Next Directory Computer Disc Program Files (86) Java JRE 7 OK OK make sure it is selected as JRE 7 OK.  Not sure if this will work but you could try using the insertString() method of the text pane's Document instance. I would try having a single space at the end of the document and keeping the caret positioned after that space; but when you insert a string insert it before the space. That way the caret position will remain at the end of the document automatically. I'm thinking that the text pane might be getting redrawn twice once when you call setText() and once when you call setCaretPosition() and that might be contributing to the flickering. Not sure though (it's been a while since I worked with Swing)."
125,A,"Which HTML tags are supported in Swing components? Many Swing components support embedded HTML but I cannot find any official documentation on that subject. (Everything on Sun's pages about HTML seems to be targeted at JEditorPane) So: Which HTML tags are supported in Swing components? EDIT: Although I said that I'm missing ""official documentation"" I'd also like any ""unofficial"" documentation. As with most things with Swing the best course of action is to look at the source. I believe it's a narrow subset of HTML 3.x although off the top of my head I don't remember where I read that. The Swing text component supports HTML 3.2 (Wilbur) and a reasonable subset of CSS 1.0.  This guy feels your pain and is at least starting to collect his experiences: http://retrovirus.com/brunch/2003/04/html-support-in-jeditorpane/  Swing supports HTML 3.2 (Wilbur) as Software Monkey said. You can find official documentation to this obsolescent (1996) version of HTML at: http://www.w3.org/TR/REC-html32.html Java 7 documentation on the topic: http://docs.oracle.com/javase/7/docs/api/javax/swing/text/html/package-summary.html Though it is worth of noting that it does not explicitly mention this information is valid for other Swing components.  I don't know exactly what tags are supported but I would suggest that you restrict yourself to bold/italics (or even better strong/em assuming it supports them) and img tags. Anything else is likely to cause headaches and probably means you're stuffing too much into that component. This is really a non-answer. I don't think so - I'm saying that although it probably ""supports"" more - it's unlikely to support it well and I've made a suggestion as to what the real issue might be. I think this is a valid answer I found this question through searching because I had the same question and I think Draemon brings up a good point- ""Anything else... probably means you're stuffing too much into that component."""
126,A,"Merging cells in a JXTreeTable I want to merge two cells in a JXTreeTable. Is this possible? I have read the solution for Merging cells in JTable but this does not work for JXTreeTables. What I mean with merging cells: I want to create a structure like this: node 1    | title for 3 cells | title for 3 cells |   subnode |  c1  | c2  |  c3  |  c1  | c2  |  c3  |   subnode |  c1  | c2  |  c3  |  c1  | c2  |  c3  | so the 'title for 3 cells' is created by merging 3 different cells on the same row/node. Unfortunately per http://www.inf.furb.br/~piva/downloads/compilador/Compilador/Compilador/bibliotecas%20extras/swinglabs-0.8.0-bin/swinglabs/docs/api/org/jdesktop/swingx/JXTreeTable.html and links therefrom it seems no such ""merging"" functionality is available in the class itself -- looks to me like you'll just have to do the ""merging""-like operations in your app-level code."
127,A,"Java - How to create a custom dialog box? I have a button on a JFrame that when clicked I want a dialog box to popup with multiple text areas for user input. I have been looking all around to try to figure out how to do this but I keep on getting more confused. Can anyone help? If you don't need much in the way of custom behavior JOptionPane is a good time saver. It takes care of the placement and localization of OK / Cancel options and is a quick-and-dirty way to show a custom dialog without needing to define your own classes. Most of the time the ""message"" parameter in JOptionPane is a String but you can pass in a JComponent or array of JComponents as well. Example: JTextField firstName = new JTextField(); JTextField lastName = new JTextField(); JPasswordField password = new JPasswordField(); final JComponent[] inputs = new JComponent[] { new JLabel(""First"") firstName new JLabel(""Last"") lastName new JLabel(""Password"") password }; JOptionPane.showMessageDialog(null inputs ""My custom dialog"" JOptionPane.PLAIN_MESSAGE); System.out.println(""You entered "" + firstName.getText() + "" "" + lastName.getText() + "" "" + password.getText()); This example unfortunately does not support for instance tabbing between fields or pressing enter for ""ok"". You can get some more control over the dialog by creating a JOptionPane using a constructor then calling createDialog on the resulting JOptionPane. This gives you a JDialog which you can customize further before making it visible. At some point though it makes more sense to roll your own custom component.  This lesson from the Java tutorial explains each Swing component in detail with examples and API links.  If you use the NetBeans IDE (latest version at this time is 6.5.1) you can use it to create a basic GUI java application using File->New Project and choose the Java category then Java Desktop Application. Once created you will have a simple bare bones GUI app which contains an about box that can be opened using a menu selection. You should be able to adapt this to your needs and learn how to open a dialog from a button click. You will be able to edit the dialog visually. Delete the items that are there and add some text areas. Play around with it and come back with more questions if you get stuck :)  Well you essentially create a JDialog add your text components and make it visible. It might help if you narrow down which specific bit you're having trouble with."
128,A,"Custom swing component - Turning a node into text I'm writing a custom swing component (something completely new but think JTree or JList). I'm trying to follow the general design of JTree JTable JList etc for consistency (I've also seen various poor 3rd party components abandon the separable model and/or renderer approach). So I have a model full of nodes the component itself and a renderer. At some point the node has to be turned into text and displayed by a renderer. I'm not clear on the best way to do this: Pass the node itself (as Object) to the renderer and let the renderer decide how to display it. This is how JList does it. Requires a customised renderer just to change the text. Allows great flexibility in how to display the node (doesn't even have to be text). Pass the node itself (as Object) to the renderer but have a convertValueToText() method in the component class. This is how JTree does it. Renderers can be just as flexibile as before - don't have to use this method. Have to override component to change the text transformation. As above but delegate convertValueTotext() to the model. This is how JXTable does it. The model is probably the best place for this method - and it's easier to override there. I don't want to have to customise the renderer just to change the text but I'd like to be able to customise the renderer to do more than display a model-displayed string (else why bother with renderers). I really don't like the fact that JXTable uses reflection to look for convertValueToText() in the model - this smells of bad magic to me. Can anyone shed any light on this oft-neglected part of Swing? SOLUTION What I ended up doing was this: Add a method to the model which returns a string for the given node. Importantly this can be null to indicate that the renderer should know what to do or that we simply can't provide anything useful. The component has the same method and passes the call on to the model. This is important for view-model separation. The renderer calls this method so it doesn't talk to the model directly. The default renderer calls the above method and if it's not null it uses it otherwise it can call toString on the value or provide a default or whatever. This leaves developers a choice when they want to override the displayed value - Override the method with a non-null return value knowing that the default renderer will display this text. - Provide a custom renderer which is passed the actual node object so it can do ""clever"" things if it needs to. I'm quite happy with it - it ""feels"" right it works and it's easy to use. Thanks for your perspectives! AFAIK neither JList nor JTree require the renderer to render text. The renderer gets passed the data object and return a JComponent which gets positioned as a child in Tree/List itself and then rendered. I would go with this. A renderer for text would simply return a JLabel. If you want to be able to change the way the text is constructed pass a Formatter to the TextRender and you are done. Stephan What do you mean pass a formatter to the TextRenderer? What's a TextRenderer? TextRenderer: A simple implementation of your renderer interface that returns a JComponent (e.g. JLabel) which displays/renders the data object as a string/text Pass a formatter: The render may take a (Format)[http://java.sun.com/j2se/1.5.0/docs/api/java/text/Format.html] as a constructor parameter The formatter's a good idea but you would still have to pass in a custom renderer instance (albeit just an instance of the standard renderer with a new formatter). I would rather they only had to customise the model in most cases  Good question. This is not specific to Swing but a philosophical question about the difference between a model and a view. In general is converting objects into text the job of the model or the view? My purist head says that actually you want a hierarchy of views - one to convert object model to text and one to display the text. You might even want more than two - for instance object-to-text text-to-document-structure document-structure-to-HTML and then CSS to present to the user. However pragmatism says this may get too hard to remember and maintain. So in your circumstance I would suggest: think about how likely it is you'll ever want to extract non-text data from the model. If it is not very likely then put the equivalent of convertValueToText in the model. Otherwise allow the component to either use a renderer if it is given one or else take the object value and convert it to text internally. This allows maximum flexibility and probably makes things feel most natural to the users of the API. I believe this is the JTable model though I haven't used Swing for a long time. Sorry the convertvalueToText() in my example applies to JTree not JTable (oops). JTable's default renderer seems to just call value.toString(). I've accepted this since I think it's pretty close to what I ended up doing - see question for update.  If you had to write your own component do it as simple as possible. In a lot of cases if you need a custom renderer then you don't care about interpretation by component or model. Model holds your data. And in this case is also custom written. From my point of view the good choice is based on first option. Provide DefaultRenderer which implements AbstractRenderer and add there all methods like toText(Object o) and so on. Then allow me to decide whether I want to use default functionality or I prefer to wrote my own. Do you really need custom component? To make it works correctly it is a LOT of work. Is this component worth all this?"
129,A,"circle packing - java I have a task to draw a circle and then fill in with the most amount of circles without touching the sides. I can draw the circle and I can make loops to pack the circle in a hexagonal/honeycomb format but can't control whether they are inside or outside the circle. I have used this: g.drawOval(50 50 300 300); to specify my circle. Given I'm actually specifying a square as my boundaries I can't actually determine where the circle boundaries are. So I'm basically packing the square full of circles rather than the circle full of circles. Can some please point me in the right direction? I'm new to java so not sure if I have done this the complete wrong way. My code is below. I have another class for the frame and another with the main in it. import java.awt.*; import java.awt.event.*; import javax.swing.*; class DrawCircle extends JPanel { private int width height diameter; public DrawFrame d; public DrawCircle() { width = 400; height = 400; diameter = 300; } public void paintComponent(Graphics g) { super.paintComponent(g); g.setColor(Color.blue); g.drawOval(50 50 300 300); for(int i=50; i<200; i=i+20) { for(int j=50; j<350; j=j+10) { g.drawOval(j i 10 10); } } for(int i=60; i<200; i=i+20) { for(int j=55; j<350; j=j+10) { g.drawOval(j i 10 10); } } for(int i=330; i>190; i=i-20) { for(int j=340; j>40; j=j-10) { g.drawOval(j i 10 10); } } for(int i=340; i>190; i=i-20) { for(int j=345; j>40; j=j-10) { g.drawOval(j i 10 10); } } } } All those magic numbers make me cringe a bit. You're new to Java and it's homework so I understand why you're doing it but I would not recommend it if you do much programming in the future. You need an algorithm or recipe for deciding when a small circle on the inside falls outside the big one you're trying to pack. Think about the ways you might do this: If the distance between the center of the big circle and the small circle is is greater than the difference in their radii the small circle will overlap the big circle or fall completely outside it. You can add this check to your code: Just before you draw the circle perform this check. Only draw if that circle passes. Don't worry about Java for a second; draw yourself a picture on a piece of paper draw that enclosing and packed circle and see if that statement is correct. Then think about any corner situations that it might not cover just as a check. I'll make two more recommendations. First do this by hand without a computer once so you'll see what the ""right"" answer might look like. Second see if you can separate the calculation of the circles from the drawing part. It might make your job easier because you can concentrate on one thing at a time. It's called ""decomposition"". You solve complex problems by breaking them up into smaller more manageable pieces. In this case it's also called ""model-view separation"". You might need to know that someday. Maybe another way to think about this problem would be to imagine a 2D arrangement of circles packed in their closest arrangement extending to infinity in both the x- and y-directions. Now take your enclosing circle put it on top of the 2D arrangement and eliminate all the circles that overlap the big circle. I don't know if it'll be optimal but it's easy to visualize. Thanks. I don't usually use magic numbers but I'm just trying to get it to work first and then I'll change them up later. I actually thought about it how you thought about it just didn't know how to go about doing it. Now that you mentioned it I can't believe I didn't see. I was looking for something harder and at the same time wondering what library functions might be available that I'm not aware of. Very good JR. Worry less about the libraries and more about your problem. Your brain is the best tool you've got. If you can do it out on paper you can instruct a computer on what to do. You'll sort it out quickly I'm sure."
130,A,"jCombobox JPA HQL inner join error i am new at Java  i got a problem like this ; i have got a desktop application  there is 2 jComboBox in JFrame.One of this jComboBox is hold Personels from Personel Table and another is take Personel's title.When jComboBox1's selected index changes occurs it will get personelid and fill jComboBox2 with its title.Thats so simple.But when selected index changes it filling with titles but showing something like Ljava.lang.object.xxxxx... Here is my codes ;  if (jComboBox1.getSelectedItem() !=null) { EntityManagerFactory emf = Persistence.createEntityManagerFactory(""SwingDenemePU""); EntityManager em = emf.createEntityManager(); Query sorgu = em.createQuery(""from Personel pUnvan u where p.unvanID = u.unvanID and u.unvanID=:id""); int id = ((Unvan)jComboBox1.getSelectedItem()).getUnvanID();  sorgu.setParameter(""id"" id); personelList = sorgu.getResultList(); Object[] items = new Object[personelList.size()]; for (int i = 0; i < personelList.size(); i++) { items[i] = personelList.get(i); } DefaultComboBoxModel def = new DefaultComboBoxModel(items); jComboBox2.setModel(def); if i change items[i] = personelList.get(i) to ;  Personel personel = personelList.get(i); items[i]=personel.getPersonelAdSoyad(); i am getting Exception in thread ""AWT-EventQueue-0"" java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to DBClasses.Personel error. The default combo box renderer simply invokes the toString() method of the Object contained in the model. So when you add a String to the model you see the value of the String because thats what the toString method returns. If you are storing a Personel Object in the model then you have two choices: a) add a toString() method to the Personel class b) create a custom renderer to display a property from the Personel class. Read the JComboBox API and you will find a link to the Swing tutorial on ""How to Use Combo Boxes"" which provides an example of a custom renderer. as we all know b is the way to go always :-)  you query appears incorrect not sure what your mappings are but try something more like these:  Query sorgu = em.createQuery(""select p from Personel pUnvan u where p.unvanID = u.unvanID and u.unvanID=:id""); or  Query sorgu = em.createQuery(""from Personel p where p.unvanID=:id""); thanx man u r solved my problem."
131,A,JFrame.setDefaultLookAndFeelDecorated(true); when i use setDefaultLookAndFeelDecorated(true) method in Java why is the Frame appear FullScreen when i maximize the Frame ? and how can i disaple the FullScreen mode in this method ? It's an old and annoying bug. If you don't want your JFrame to be maximize-able then then call .setResizable(false); on it. no  i want it to be maximize-able but i don't want it Full Screen  Setting setDefaultLookAndFeelDecorated to true causes the decorations to be handled by the look and feel; this means that a System look-and-feel on both Windows and Mac (I have no Linux at hand now) retains the borders you would expect them of a native window e.g. staying clear of the taskbar in Windows. When using the Cross Platform look-and-feel a.k.a. Metal which is the default on Windows the Windows version will take over the entire screen making it look like a full-screen window. On Mac the OS refuses to give away its own titlebar and draws a complete Metal frame (including the title bar) in a Mac-native window. So in short if you want to make sure the taskbar gets respected use the Windows system look-and-feel on Windows. You can set it by using something like UIManager.setLookAndFeel((LookAndFeel) Class.forName(UIManager.getCrossPlatformLookAndFeelClassName()).newInstance());
132,A,"How do I activate JButton ActionListener inside code (unit testing purposes)? I need to activate a JButton ActionListener within a JDialog so I can do some unit testing using JUnit. Basically I have this:  public class MyDialog extends JDialog { public static int APPLY_OPTION= 1; protected int buttonpressed; protected JButton okButton; public MyDialog(Frame f) { super(f); okButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { buttonpressed= APPLY_OPTION; } } ); public int getButtonPressed() { return buttonpressed; } } then I have my JUnit file: public class testMyDialog { @Test public void testGetButtonPressed() { MyDialog fc= new MyDialog(null); fc.okButton.???????? //how do I activate the ActionListener? assertEquals(MyDialog.APPLY_OPTION fc.getButtonPressed()); } } This may sound redundant to do in a unit test but the actual class is a lot more complicated than that... You can use reflection to get the button at runtime and fire the event. JButton button = (JButton)PrivateAccessor.get(MyDialog  ""okButton""); Thread t = new Thread(new Runnable() { public void run() { // What ever you want }; }); t.start(); button.doClick(); t.join();  If you have non-trivial code directly in your event handler that needs unit testing you might want to consider adopting the MVC pattern and moving the code to the controller. Then you can unit test the code using a mock View and you never need to programmatically press the button at all. The problem is that I'm extending a class (not actually JDialog) that I did not made the maker of that class didn't use the MVC pattern. Thanks for the info anyway.  AbstractButton.doClick Your tests might run faster if you use the form that takes an argument and give it a shorter delay. The call blocks for the delay. Thanks I can never find the methods that I need... It's not an obvious method."
133,A,"How can I fix a Java-GUI-program (swing) that it works with awesome-wm? The swing-UI of Java-programs doesn't work perfectly together with the awesome-wm. awesome is a window-manager for UNIX that automatically resizes program-windows and the Swing-UI doesn't recognize these resizes correctly. I don't care if awesome or Java is guilty what I wanna know if I can change my Java-programs in a way that they will work with awesome. So that users of my programs get the correct experience even when they use exotic window-managers. Easiest workaround - get wmname from suckless and use it to set the name of the window manager to LG3D: wmname LG3D 98% of the time this will fix the issue. This is really the only viable option as the AWT_TOOLKIT override no longer works on modern versions of Java yet this hack works on modern javas. You would not believe how many months I spent trying to solve this problem before I realised my window manager was causing it.  You might find that this is a similar problem to that experienced with using Compiz and Java (on Ubuntu at least) but I am guessing. The fix for this (taken from here) is to add the following environment variable to your program: AWT_TOOLKIT=""MToolkit""  From the man page of awesome: BUGS Of course there´s no bug in awesome. But there may be unexpected behaviours. Java applications which use the XToolkit/XAWT backend may draw grey windows only. The XToolkit/XAWT backend breaks ICCCM-compliance in recent JDK 1.5 and early JDK 1.6 versions because it assumes a reparenting window manager. As a workaround you can use JDK 1.4 (which doesn´t contain the XToolkit/XAWT backend) or you can set the following environment variable (to use the older Motif backend instead): AWT_TOOLKIT=MToolkit This solution isn't perfect. If you use Netbeans IDE setting AWT_TOOLKIT=MToolkit will result in locking out the keyboard b/c of an old swing bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6506617. MToolkit may not give you any problems just remember - if your keyboard starts to loose focus you may need to use AWT_TOOLKIT=XToolkit. java-6-openjdk package only has i386/xawt/libmawt.so and i386/headless/libmawt.so. Sun JDK also includes i386/motif21/libmawt.so Thanks for this hint. With the SUN-JDK it works. This brings up the following exception: Exception in thread ""main"" java.lang.UnsatisfiedLinkError: Can't load library: /usr/lib/jvm/java-6-openjdk/jre/lib/i386/motif21/libmawt.so"
134,A,"What is the rationale of SwingWorker? For what I can read it is used to dispatch a new thread in a swing app to perform some ""background"" work but what's the benefit from using this rather than a ""normal"" thread? Is not the same using a new Thread and when it finish invoke some GUI method using SwingUtilities.invokeLater?... What am I missing here? http://en.wikipedia.org/wiki/SwingWorker http://java.sun.com/products/jfc/tsc/articles/threads/threads2.html SwingWorker is far easier than mucking with your own threads because it gives you two things that are painful to manually thread coordination between the UI and the background process and doing loops effective background work that keeps working and sending updates back to the UI incrementally like process a large amount of data or loading a large list. The disadvantage (or advantage) depends on how you look at it is that it hides the underlying implementation so future version may have different behavior performance etc which may be undesirable. I've found it quite useful as the glue between a UI event and my own command code the SwingWorker maintains the link to the UI and my code pumps data.  to answer your question you are not missing anything. this class is just a convenient utility for wrapping up the functionality you discribed (start another thread to do the background work and then invoking some final action on the EDT with the results).  SwingWorker makes trivial example code much more concise. However it creates a ball of mud. Communications to and from the GUI and executed logic are all welded together. So I'd not like to see it used in real production code.  SwingWorker is an implementation of a common pattern (in .Net i read there is GuiWorker BackgroundWorker for this) where you have to do some work in a GUI program but keep the GUI responsive. The problem is that often GUI libraries are not multi thread safe so the common way to implement such workers is to use the message loop of the library to transfer messages into the event loop of the application. These classes allow you to easily update your GUI. Usually they have a update(int status) method that is called by the thread dispatched by the class and handled by the GUI while the thread continues its work. Using normal threads you would need to code your own events or some other messaging mechanism for this task which can be a pain if you need this functionality often. Using invokeLater in Java for example you would intermix the code for updating the gui into the code for doing the work. The SwingWorker allows you to keep things separate. You need listener with SwingWorker too. So? What i meant is that you would need own listeners (not listener interfaces already created) for your own event managing. SwingWorker handles all this for you. for example you can overwrite the method ""done"" which is called when the worker is finished. Or you can easily just add a property change listener on the way I see. So the code is clearer and maintainable because each time a new coder looks at the code he knows how the SwingWorker perform its job rathern than having to ""guess"" what the new thread code is all about. .. Yes exactly that's my point I'm coming from the C++ world. And i've coded a GuiWorker like that too. Before that i had to send events back and forth between the GUI and the Threads. It was a pain in the ass. The GuiWorker made many things more easy. I could use it for the background search filter and whatnot.  When working with Swing it is important to know that the main swing processing (ie. rendering) happens on a single thread (which is not your main thread). This is often called the Swing or awt event thread. Those familiar with the JDK pre 1.6 will remember the ""grey rectangle"" bug if you spent too much time in an event dispatcher for a swing component. What does this mean. In any swing application you will have 2 threads running that you will now have to deal with. Normally if all your operations within an event dispatcher (the code that gets fired say when a button is clicked) is short (ie. changing the state of a siwng button) you can just run this inside of the event dispatcher. If your application is going to call a web service or a database or you application state is driven by external events (ie. jms) or you want to just make your UI more interactive (ie. build a list of items and be able to do something else) you should use a thread other than the awt event thread (the main swing one). So in these cases you spawn a new thread and do what you have to and when the results finally come back you then somehow have to create an event that can be executed by the awt/swing dispatcher. SwingWorker is a great little design pattern that allows you do to do this (the other way is SwingUtilities). It is particularly useful for doing fetch data from external sources or say long calculations (rendering a graphics scene). It helps automate the dispatch and subsequent re-integration of the results from an external thread (other than the awt thread). For async events (ie. an event from JMS needs to update a result use SwingUtilities).  A code example: import org.jdesktop.swingx.util.SwingWorker; // This one is from swingx // another one is built in // since JDK 1.6 AFAIK? public class SwingWorkerTest { public static void main( String[] args ) { /** * First method */ new Thread() { public void run() { /** Do work that would freeze GUI here */ final Object result = new Object(); java.awt.EventQueue.invokeLater( new Runnable() { public void run() { /** Update GUI here */ } } ); } }.start(); /** * Second method */ new SwingWorker< Object  Object >() { protected Object doInBackground() throws Exception { /** Do work that would freeze GUI here */ return null; } protected void done() { try { Object result = get(); /** Update GUI here */ } catch ( Exception ex ) { ex.printStackTrace(); if ( ex instanceof java.lang.InterruptedException ) return; } } }.execute(); } } The choice always depends on personal preference and use case. The second method has an advantage when refactoring. You can more easily convert the anonymous class to an inner class when the method it's used in is too large. My personal preference goes to the second for we have built a framework where SwingWorkers can be added and are executed one after the other...  Yes you can accomplish what a SwingWorker does with vanilla threads + invokeLater. SwingWorker provides a predictable integrated way to accomplish tasks on a background thread and report result on the EDT. SwingWorker additionally adds support for intermediate results. Again you can do all of this yourself but sometimes it's easy to use the integrated and predictable solution especially when it comes to concurrency. @Rob finally fixed the typo. Only 3 years. *cough* ""integrated"" way *cough*"
135,A,"Why won't my JMenuBar show up? I'm trying to make a GUI in java but JMenuBar has been giving me a hard time for two days. Can someone please tell me why it isn't showing up? import java.awt.*; import javax.swing.*; import javax.swing.JPanel; import java.awt.event.*; import java.awt.image.*; import java.io.*; import java.util.Arrays; import javax.imageio.ImageIO; public class selectionFrame extends JFrame { Font name; Font title; public void setup() //can't use constructer because this isn't given a size until after it is constructed. { //getContentPane().add(menuBar); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); getContentPane().setLayout(new FlowLayout()); //getContentPane().add(j); setJMenuBar(createMenuBar()); //getContentPane().add(createMenuBar()); } public JMenuBar createMenuBar() { JMenuBar menuBar; JMenu m_file; JMenuItem mi_save; JMenuItem mi_load; JMenu m_edit; JMenuItem mi_tileHeight; JMenuItem mi_tileWidth; menuBar = new JMenuBar(); m_file = new JMenu(""File""); m_edit = new JMenu(""Edit""); mi_save = new JMenuItem(""Save file"" KeyEvent.VK_S); mi_load = new JMenuItem(""Load file"" KeyEvent.VK_L); mi_tileHeight = new JMenuItem(""Set tile height"" KeyEvent.VK_H); mi_tileWidth = new JMenuItem(""Set tile width"" KeyEvent.VK_W); menuBar.add(m_file); m_file.add(mi_save); m_file.add(mi_load); menuBar.add(m_edit); m_edit.add(mi_tileHeight); m_edit.add(mi_tileWidth); return menuBar; } public static void main(String[] args) //run { selectionFrame sel = new selectionFrame(); sel.setLocationRelativeTo(null); sel.setSize((int) 400 + (sel.getInsets().left + sel.getInsets().right)(int) 400 + (sel.getInsets().top + sel.getInsets().bottom)); sel.setVisible(true); sel.setTitle(""Tiles/Meta""); sel.setResizable(false); sel.setFocusable(true); sel.getContentPane().setSize(sel.getSize()); sel.setLocation((int) sel.getX() - (sel.getWidth()/2)(int) sel.getY() - (sel.getHeight()/2)); sel.setup(); sel.repaint(); } } You have an awful lot of extra code there. public class SelectionFrame extends JFrame { Font name; Font title; public SelectionFrame() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setJMenuBar(createMenuBar()); } public JMenuBar createMenuBar() { JMenuBar menuBar; JMenu m_file; JMenuItem mi_save; JMenuItem mi_load; JMenu m_edit; JMenuItem mi_tileHeight; JMenuItem mi_tileWidth; menuBar = new JMenuBar(); m_file = new JMenu(""File""); m_edit = new JMenu(""Edit""); mi_save = new JMenuItem(""Save file"" KeyEvent.VK_S); mi_load = new JMenuItem(""Load file"" KeyEvent.VK_L); mi_tileHeight = new JMenuItem(""Set tile height"" KeyEvent.VK_H); mi_tileWidth = new JMenuItem(""Set tile width"" KeyEvent.VK_W); menuBar.add(m_file); m_file.add(mi_save); m_file.add(mi_load); menuBar.add(m_edit); m_edit.add(mi_tileHeight); m_edit.add(mi_tileWidth); return menuBar; } public void main( String args[] ) { SelectionFrame sel = new SelectionFrame(); sel.setLocationRelativeTo(null); sel.setSize(400 + (sel.getInsets().left + > sel.getInsets().right) 400 + (sel.getInsets().top + sel.getInsets().bottom)); sel.setTitle(""Tiles/Meta""); sel.setResizable(false); sel.setFocusable(true); sel.getContentPane().add( new JLabel( ""Content"" SwingConstants.CENTER) BorderLayout.CENTER ); sel.setLocation(sel.getX() - (sel.getWidth() / 2) sel.getY() - > (sel.getHeight() / 2)); sel.setVisible(true); } } That shows up with a menu bar and everything. if you add your content to the CENTER of the content pane (by default a border layout) the center automatically fills the whole content area you don't have to resize anything. This shows up as a window with a menu bar and everything works fine. What platform are you doing this on? I'm on Vista i get what i expect to see.  sel.setVisible(true); Should be the last thing you call......  Also just before the call to sel.setVisible(true); pls invoke sel.pack(); Pls note that instead of setSize it is better to use setPreferredSize which is leveraged during frame packing. Not directly relevant to your question but still -- the use of a good layout manager is a huge time and frustration saviour when using Swing. MigLayout is simply an excellent one-stop layout manager.  When I compile and run it it shows up with a menu bar with file and edit menu items. Were you expecting more? Also capitalize your class- SelectionFrame EDIT: One thing I forgot to look at your code and every answer here is technically wrong. Often it happens to work but you are not allowed to do anything with Swing components unless you are in the AWT worker thread. Normally you don't have to think about the worker thread much because every event that comes from your window will be on the worker thread anyway but there is a tendency to forget about it when you construct your initial frame--and more often than not it just works anyway. Sun used to recommend that you can work with components outside the AWT thread until the window has been realized (with either pack() or setVisible(true)) but this is no longer considered safe. The easiest way to fix this might be for your main to create a swing worker thread before newing your SelectionFrame. There is only a 50-50 chance this will fix your problem but you should still take it into consideration whenever working on a GUI. Every time I compile and run it I don't get anything. Can you tell me what JDK you used? 1.6.0_05 but I have to type 10 characters  In my case I have tracked down a missing menu bar to a bug where I set the RootPane layout tsk tsk. The RootPane (see eg http://download.java.net/jdk7/archive/b123/docs/api/javax/swing/JRootPane.html ) controls the layout of the menu bar so when I changed its layout manager it lost the bar. Instead one should use the ContentPane to layout and add components to eg: frame.getContentPane().setLayout(...); frame.getContentPane().add(...); For future reference... this has nothing to do with the component being visible (as the OP said the frame is visible but the menu bar is not) I have working code that sets the JMenuBar outside the constructor and while being swing-thread-safe is Good Practice it is not the cause of the problem.  What Java version are you using? Your menu bar shows up fine in 1.6.0_10 on my system. Try wrapping the body of your main method in an invokeLater() call so that it runs on the correct thread like so: public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { selectionFrame sel = new selectionFrame(); sel.setLocationRelativeTo(null); sel.setSize((int) 400 + (sel.getInsets().left + sel.getInsets().right) (int) 400 + (sel.getInsets().top + sel.getInsets().bottom)); sel.setTitle(""Tiles/Meta""); sel.setResizable(false); sel.setFocusable(true); sel.getContentPane().setSize(sel.getSize()); sel.setLocation((int) sel.getX() - (sel.getWidth() / 2) (int) sel.getY() - (sel.getHeight() / 2)); sel.setup(); sel.setVisible(true); // Follow Kendrick's advice too. } }); }  Turns out you HAVE to set the JMenuBar inside the JFrame's constructor. I figured this out while looking at the differences between my code and the marked answers code. Thank you for your wonderful answer John Gardner. Without you I would have most likely been stuck for months."
136,A,"JTable selects wrong cell on click I am working inside of a quite complex eclipse based application and having a problem with a JTable based custom component inside of a JSplitPane. The part of the application that I actually have access to is a panel within a tab within a panel within the actual application so there are a lot of things that can go wrong. The specific problem that I'm having right now is that the table component is selecting the wrong cell when I click on it. If I select a cell in row 0 column 0 the cell that actually gets selected is at row 2 column 0 which is about 20 pixels below the actual click. This only happens if the table is in a JSplitPane though: if I just add the table itself to a panel cell selection is correct. What it seems like to me is that because the table is in a JSplitPane the boundaries of the table (or maybe the viewport of the scroll pane containing the table?) are off by about 20 pixels somewhere. Another problem that I had which can back this theory up is that scrolling the table caused repaints above the table: so for example as I scrolled down instead of the table scrolling it actually moved upwards (painting over the components above the table) about 20 pixels before scrolling. I was able to workaround this problem by adding jscrollpane.getViewport().setScrollMode(JViewport.BACKINGSTORE_SCROLL_MODE); to the scrollpane that contained the table. Because of all the custom components involved I can't actually get a small app that shows the problem but I have the next best thing which is an app that shows the layout that I have (of course it doesn't actually have the same problems). Any ideas on what might be causing the problem? //Test class showing layout of table/splitpane import javax.swing.*; import java.awt.*; public class SplitTest { private static JFrame frame; private static JPanel buildTable() { JPanel tblPanel = new JPanel(); tblPanel.setLayout(new BorderLayout()); String[] cols = new String[]{""one"" ""two"" ""three"" ""four"" ""five"" ""six"" ""seven""}; Object[][] data = new Object[30][7]; for(int x = 0;x < data.length;x++) for(int y = 0;y < data[x].length;y++) data[x][y] = x + "" "" + y; JTable tbl = new JTable(data cols); JScrollPane scrollPane = new JScrollPane(tbl); tblPanel.add(scrollPane BorderLayout.CENTER); return tblPanel; } private static JPanel buildTab() { JPanel pnl = new JPanel(); pnl.setLayout(new BorderLayout()); JPanel menuPnl = new JPanel(); menuPnl.setLayout(new FlowLayout(FlowLayout.LEFT)); menuPnl.add(new JLabel(""label"")); menuPnl.add(new JComboBox(new String[]{""one"" ""two""})); menuPnl.add(new JButton(""Button"")); pnl.add(menuPnl BorderLayout.NORTH); JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT); splitPane.setLeftComponent(buildTable()); JPanel bottomPnl = new JPanel(); bottomPnl.setPreferredSize(new Dimension(800 200)); bottomPnl.setBackground(Color.RED); splitPane.setRightComponent(bottomPnl); splitPane.setDividerLocation(.5); pnl.add(splitPane BorderLayout.CENTER); return pnl; } private static JTabbedPane buildGUI() { JTabbedPane topLevelTabbedFrame = new JTabbedPane(); topLevelTabbedFrame.addTab(""Tab 1"" buildTab()); topLevelTabbedFrame.addTab(""Tab 2"" new JPanel()); topLevelTabbedFrame.addTab(""Tab 3"" new JPanel()); return topLevelTabbedFrame; } private static void createAndShowGUI() { frame = new JFrame(""Split Test""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.getContentPane().add(buildGUI() BorderLayout.CENTER); // frame.setSize(new Dimension(800 600)); frame.pack(); frame.setVisible(true); } public static void main(String[] args) throws Exception { SwingUtilities.invokeLater(new Runnable() { public void run() { createAndShowGUI(); } }); } } Because of all the custom components involved I can't actually get a small app that shows the problem but I have the next best thing which is an app that shows the layout that I have (of course it doesn't actually have the same problems). I was about to tell you the posted code workd just fine and the I read this. Anyway it seems the problem lies in all the custom components you added to the mix. For JTable and JSplitPane work fine alone. What I would do is to remove components one by one until it works ( probably I will work when the code is similar to the one posted and there is nothing else there ) Or you can go the opposite way which is easier. Start with your sample code and then add more and more components until it fail. You can take this opportunity to refactor and clean your code and move unneeded components. And even ( why not ) add test cases in the process. Good luck. I've been working on doing that - the only problem is that this isn't my code I'm working within another system and don't have access to everything that I need (to even figure out what's going on in this custom component I've had to use a decompiler). I've gotten it to the split pane - everything works fine without it but once the custom table is in the split pane its positioning is off.  As it turns out the problem was with the order that the components were initialized and added to the split pane. So the eventual fix was to delay adding the table to the split pane until after the split pane was actually added to the panel rather than adding the table to the split pane before adding the split pane to the panel. Making that small change fixed the issue.  Have you tries running it on a different box to check if its hardware related. May be related to this bug http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4763448 I did see that bug and I've tried reproducing the bug on the machines that I've tried this on but it doesn't look like that bug is the culprit here. I have tried different machines and I get the same effect on each."
137,A,"What are the options to replace Java Swing GUI? We have a desktop client application developed in Swing. This application interacts with backend server using Servlet. The new requirement is to make a web based client. I have read about JavaFX Flex ExtJS etc. I would like to know which solution is best fit to replace a swing application? Does anyone have any experience of doing the same? (EDIT based on comments) The application is heavy weight in terms of widgets. Ofcourse we will redesign a bit when making a web based client. Users interact with the web differently than how they might interact with a desktop application. It would be ideal if you could redesign the user interaction as well so that it's consistent with the web. You know Swing can run in a web page! There are many other options including PHP ASP Ajax etc etc. How ""heavy"" is the Swing app i.e. are there lots of widgets? This is a very open ended question!  You could consider using the Google Web Toolkit GWT to make a web based client. Making a user interface in GWT is somewhat similar to doing it in Java Swing but the final result is a dynamic web client.  Since you already know Swing and you're supposed to make a web based client/interface you should consider Apache Wicket which structurally has lots of similarities with Swing (one of its original devs was in a similar situation as you are now). If you need to have heavyweight functionality which isn't easily done with Ajax and other such web technologies I'd suggest a combination of Flash/Flex for the UI mainly because there's a lot of people out there who know how to use both of those technologies. Quick edit: Also see this answer to another question it may help you understand the real issue at hand a bit better."
138,A,"Live sorting of JTable I've figured out how to get a JTable to be sorted properly but I can't figure out how to get it to automatically update the sort order when a table cell is changed. Right now I have this (admittedly long) code mostly based on that in the Java Tutorial's How to Use Tables. I've highlighted the changes I've made with // ADDED. In this case newly-added values sort properly but when I go in to edit a value it doesn't seem to resort even though I call fireTableCellUpdated? In short how can I get a table to re-sort when a data value changes in the model? /* * Copyright (c) 1995 - 2008 Sun Microsystems Inc. All rights reserved. * See the standard BSD license. */ package components; /* * TableSortDemo.java requires no other files. */ import java.awt.Dimension; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.util.ArrayList; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JOptionPane; import javax.swing.JPanel; import javax.swing.JScrollPane; import javax.swing.JTable; import javax.swing.table.AbstractTableModel; public class TableSortDemo extends JPanel { private boolean DEBUG = false; public TableSortDemo() { super(); setLayout(new BoxLayout(TableSortDemo.this BoxLayout.PAGE_AXIS)); final MyTableModel m = new MyTableModel(); JTable table = new JTable(m); table.setPreferredScrollableViewportSize(new Dimension(500 70)); table.setFillsViewportHeight(true); table.setAutoCreateRowSorter(true); //Create the scroll pane and add the table to it. JScrollPane scrollPane = new JScrollPane(table); //Add the scroll pane to this panel. add(scrollPane); // ADDED: button to add a value JButton addButton = new JButton(""Add a new value""); addButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { m.addValue( JOptionPane.showInputDialog( TableSortDemo.this ""Value?"")); } }); // ADDED button to change a value JButton setButton = new JButton(""Change a value""); setButton.addActionListener(new ActionListener() { /* (non-Javadoc) * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent) */ public void actionPerformed(ActionEvent e) { m.setValueAt( JOptionPane.showInputDialog( TableSortDemo.this ""Value?"") Integer.parseInt( JOptionPane.showInputDialog( TableSortDemo.this ""Which?"")) 0); } }); add(addButton); add(setButton); } class MyTableModel extends AbstractTableModel { private static final long serialVersionUID = -7053335255134714625L; private String[] columnNames = {""Column""}; // ADDED data as mutable ArrayList private ArrayList<String> data = new ArrayList<String>(); public MyTableModel() { data.add(""Anders""); data.add(""Lars""); data.add(""Betty""); data.add(""Anna""); data.add(""Jon""); data.add(""Zach""); } // ADDED public void addValue(Object v) { data.add(v.toString()); int row = data.size() - 1; fireTableRowsInserted(row row); } public int getColumnCount() { return columnNames.length; } public int getRowCount() { return data.size(); } public String getColumnName(int col) { return columnNames[col]; } public Object getValueAt(int row int col) { return data.get(row) + "" "" + row; } /* * JTable uses this method to determine the default renderer/ * editor for each cell. If we didn't implement this method * then the last column would contain text (""true""/""false"") * rather than a check box. */ public Class<String> getColumnClass(int c) { return String.class; } /* * Don't need to implement this method unless your table's * editable. */ public boolean isCellEditable(int row int col) { //Note that the data/cell address is constant //no matter where the cell appears onscreen. if (col < 2) { return false; } else { return true; } } /* * Don't need to implement this method unless your table's * data can change. */ public void setValueAt(Object value int row int col) { if (DEBUG) { System.out.println(""Setting value at "" + row + """" + col + "" to "" + value + "" (an instance of "" + value.getClass() + "")""); } data.set(row value.toString()); // ADDED: uncommented this line despite warnings to the contrary fireTableCellUpdated(row col); if (DEBUG) { System.out.println(""New value of data:""); printDebugData(); } } private void printDebugData() { int numRows = getRowCount(); int numCols = getColumnCount(); for (int i=0; i < numRows; i++) { System.out.print("" row "" + i + "":""); for (int j=0; j < numCols; j++) { System.out.print("" "" + data.get(i)); } System.out.println(); } System.out.println(""--------------------------""); } } /** * Create the GUI and show it. For thread safety * this method should be invoked from the * event-dispatching thread. */ private static void createAndShowGUI() { //Create and set up the window. JFrame frame = new JFrame(""TableSortDemo""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //Create and set up the content pane. TableSortDemo newContentPane = new TableSortDemo(); newContentPane.setOpaque(true); //content panes must be opaque frame.setContentPane(newContentPane); //Display the window. frame.pack(); frame.setVisible(true); } public static void main(String[] args) { //Schedule a job for the event-dispatching thread: //creating and showing this application's GUI. javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { createAndShowGUI(); } }); } } probably the easiest way to get it sorted would be to call fireTableDataChanged() instead of fireTableCellUpdated(). no that would loose the selection  There are several things you have to do here. Since the table model wraps your collection it has to be sortable. That means that your object (row) has to implement Comparable interface so collection can be properly sorted. In your setValueAt method you have to to update appropriate attribute and resort the collection using Collections.sort. Then obviously you have to call fireTableDataChanged to let table know that it needs to redraw. Same thing suppose to happen on adding data. When data is removed you don't have to resort but still have to fireTableDataChanged If your collection is to big you may think about adding data to appropriate place initially instead of resorting. Hope this helps Sorting should be done in View layer. User can specific ""I want to sort by X. Opps that's doesn't look nice. OK. Now I want to view it by sort by Y."" Why don't you just expose the sort method on the model then? IMO this will be proper MVC design. Table model represents data and should encapsulate related operations. This will let you fire proper events. By making it public you can call sorting from outside. Except in this case I don't want the TableModel to be responsible for the sorting I want that to be done by the Sorter in the view. As it stands this method sorts the table properly handles insertion properly but does not handle changes properly.  Its a long-standing bug on JTable reported in 2007 (astonished that it isn't fixed not even in jdk7) Firing a update on all rows is a reasonable quick fix if it doesn't degrade performance too much (due to triggering frequent complete resorts). For the fearless here's a partial fix on JTable - partial because not yet all possible scenarios are captured. Which is the reason it never made it into JXTable (or maybe I had other priorities then :-) public static class JTableRepaintOnUpdate extends JTable { private UpdateHandler beforeSort; @Override public void sorterChanged(RowSorterEvent e) { super.sorterChanged(e); maybeRepaintOnSorterChanged(e); } private void beforeUpdate(TableModelEvent e) { if (!isSorted()) return; beforeSort = new UpdateHandler(e); } private void afterUpdate() { beforeSort = null; } private void maybeRepaintOnSorterChanged(RowSorterEvent e) { if (beforeSort == null) return; if ((e == null) || (e.getType() != RowSorterEvent.Type.SORTED)) return; UpdateHandler afterSort = new UpdateHandler(beforeSort); if (afterSort.allHidden(beforeSort)) { return; } else if (afterSort.complex(beforeSort)) { repaint(); return; } int firstRow = afterSort.getFirstCombined(beforeSort); int lastRow = afterSort.getLastCombined(beforeSort); Rectangle first = getCellRect(firstRow 0 false); first.width = getWidth(); Rectangle last = getCellRect(lastRow 0 false); repaint(first.union(last)); } private class UpdateHandler { private int firstModelRow; private int lastModelRow; private int viewRow; private boolean allHidden; public UpdateHandler(TableModelEvent e) { firstModelRow = e.getFirstRow(); lastModelRow = e.getLastRow(); convert(); } public UpdateHandler(UpdateHandler e) { firstModelRow = e.firstModelRow; lastModelRow = e.lastModelRow; convert(); } public boolean allHidden(UpdateHandler e) { return this.allHidden && e.allHidden; } public boolean complex(UpdateHandler e) { return (firstModelRow != lastModelRow); } public int getFirstCombined(UpdateHandler e) { if (allHidden) return e.viewRow; if (e.allHidden) return viewRow; return Math.min(viewRow e.viewRow); } public int getLastCombined(UpdateHandler e) { if (allHidden || e.allHidden) return getRowCount() - 1; return Math.max(viewRow e.viewRow); } private void convert() { // multiple updates if (firstModelRow != lastModelRow) { // don't bother too much - calculation not guaranteed to do anything good // just check if the all changed indices are hidden allHidden = true; for (int i = firstModelRow; i <= lastModelRow; i++) { if (convertRowIndexToView(i) >= 0) { allHidden = false; break; } } viewRow = -1; return; } // single update viewRow = convertRowIndexToView(firstModelRow); allHidden = viewRow < 0; } } private boolean isSorted() { // JW: not good enough - need a way to decide if there are any sortkeys which // constitute a sort or any effective filters return getRowSorter() != null; } @Override public void tableChanged(TableModelEvent e) { if (isUpdate(e)) { beforeUpdate(e); } try { super.tableChanged(e); } finally { afterUpdate(); } } /** * Convenience method to detect dataChanged table event type. * * @param e the event to examine. * @return true if the event is of type dataChanged false else. */ protected boolean isDataChanged(TableModelEvent e) { if (e == null) return false; return e.getType() == TableModelEvent.UPDATE && e.getFirstRow() == 0 && e.getLastRow() == Integer.MAX_VALUE; } /** * Convenience method to detect update table event type. * * @param e the event to examine. * @return true if the event is of type update and not dataChanged false else. */ protected boolean isUpdate(TableModelEvent e) { if (isStructureChanged(e)) return false; return e.getType() == TableModelEvent.UPDATE && e.getLastRow() < Integer.MAX_VALUE; } /** * Convenience method to detect a structureChanged table event type. * @param e the event to examine. * @return true if the event is of type structureChanged or null false else. */ protected boolean isStructureChanged(TableModelEvent e) { return e == null || e.getFirstRow() == TableModelEvent.HEADER_ROW; } } Wow great answer. This was a years-ago co-op and in my case the hacky update-ALL-the-things! solution ended up working out just fine performance-wise.  This took a two-step solution: First I had the TableSorter sort on data change by using this rather than autoCreateRowSorter: sorter = new TableRowSorter<MyTableModel>(m); table.setRowSorter(sorter); sorter.setSortsOnUpdates(true); Then I had to change the update method to update the entire table. The fireTableCellUpdated and the fireTableRowsUpdated would only redraw the specific rows that were updated not the entire table (meaning you'd get a duplicate-appearing entry that changed as soon as it was redrawn later. So I changed fireTableCellUpdated(row col); to fireTableRowsUpdated(0 data.size() - 1); and now it sorts properly even upon data changes and selection is preserved."
139,A,"Get height of multi line text with fixed width to make dialog resize properly I want to create a dialog that contains some kind of text element (JLabel/JTextArea etc) that is multi lined and wrap the words. I want the dialog to be of a fixed width but adapt the height depending on how big the text is. I have this code: import static javax.swing.GroupLayout.DEFAULT_SIZE; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.*; public class TextSizeProblem extends JFrame { public TextSizeProblem() { String dummyString = """"; for (int i = 0; i < 100; i++) { dummyString += "" word"" + i; //Create a long text } JLabel text = new JLabel(); text.setText(""<html>"" + dummyString + ""</html>""); JButton packMeButton = new JButton(""pack""); packMeButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { pack(); } }); GroupLayout layout = new GroupLayout(this.getContentPane()); getContentPane().setLayout(layout); layout.setVerticalGroup(layout.createParallelGroup() .addComponent(packMeButton) .addComponent(text) ); layout.setHorizontalGroup(layout.createSequentialGroup() .addComponent(packMeButton) .addComponent(text DEFAULT_SIZE 400 400) //Lock the width to 400 ); pack(); } public static void main(String args[]) { SwingUtilities.invokeLater(new Runnable() { public void run() { JFrame frame = new TextSizeProblem(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } }); } } When running the program it looks like this: But I would like the dialog to look like this (as when you press the pack-button): I'm guessing that the problem is that the layout manager had not been able to determine the proper height of the text before displaying it to the screen. I have tried various validate() invalidate() validateTree() etc but have not succeed. I think this is what you want: JLabel label = new JLabel(""<html><div style=\""width:200px;\"">Lots of text here...</div></html>""); // add the label to some Container. This will restrict the JLabel to being 200 pixels wide and automatically adjust the height to fit the text. See an example in [LabelRenderTest.java](http://stackoverflow.com/questions/5853879/java-swing-obtain-image-of-jframe/5853992#5853992) (shown above).  I found a solution to my problem. By replacing the JLabel with a JTextArea: JTextArea text = new JTextArea(); text.setText(dummyString); text.setLineWrap(true); text.setWrapStyleWord(true); And calling pack() followed by an invocation to the layout manager to layout the components again followed by another pack: pack(); layout.invalidateLayout(this.getContentPane()); pack(); This will cause the layout manager to adapt to the width. The complete code: import static javax.swing.GroupLayout.DEFAULT_SIZE; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.*; public class TextSizeProblem3 extends JFrame { public TextSizeProblem3() { String dummyString = """"; for (int i = 0; i < 100; i++) { dummyString += "" word"" + i; //Create a long text } JTextArea text = new JTextArea(); text.setText(dummyString); text.setLineWrap(true); text.setWrapStyleWord(true); JButton packMeButton = new JButton(""pack""); packMeButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { pack(); } }); GroupLayout layout = new GroupLayout(this.getContentPane()); getContentPane().setLayout(layout); layout.setVerticalGroup(layout.createParallelGroup() .addComponent(packMeButton) .addComponent(text) ); layout.setHorizontalGroup(layout.createSequentialGroup() .addComponent(packMeButton) .addComponent(text DEFAULT_SIZE 400 400) //Lock the width to 400 ); pack(); layout.invalidateLayout(this.getContentPane()); pack(); } public static void main(String args[]) { SwingUtilities.invokeLater(new Runnable() { public void run() { JFrame frame = new TextSizeProblem3(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } }); } } (you can add some customization (border color etc) so it looks just like the JLabel but I have omitted that)  Here is an adaptation of your code doing what you want. But it needs a little trick to calculate the size of the label and set its preferred Size. I found the solution here import static javax.swing.GroupLayout.DEFAULT_SIZE; import java.awt.Dimension; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.*; import javax.swing.text.View; public class TextSizeProblem extends JFrame { public TextSizeProblem() { String dummyString = """"; for (int i = 0; i < 100; i++) { dummyString += "" word"" + i; // Create a long text } JLabel text = new JLabel(); text.setText(""<html>"" + dummyString + ""</html>""); Dimension prefSize = getPreferredSize(text.getText() true 400); JButton packMeButton = new JButton(""pack""); packMeButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { pack(); } }); GroupLayout layout = new GroupLayout(this.getContentPane()); getContentPane().setLayout(layout); layout.setVerticalGroup(layout.createParallelGroup().addComponent(packMeButton) .addComponent(textDEFAULT_SIZE prefSize.height prefSize.height)); layout.setHorizontalGroup(layout.createSequentialGroup().addComponent(packMeButton) .addComponent(text DEFAULT_SIZE prefSize.width prefSize.width) // Lock the width to 400 ); pack(); } public static void main(String args[]) { SwingUtilities.invokeLater(new Runnable() { public void run() { JFrame frame = new TextSizeProblem(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } }); } private static final JLabel resizer = new JLabel(); /** * Returns the preferred size to set a component at in order to render an html string. You can * specify the size of one dimension. */ public static java.awt.Dimension getPreferredSize(String html boolean width int prefSize) { resizer.setText(html); View view = (View) resizer.getClientProperty(javax.swing.plaf.basic.BasicHTML.propertyKey); view.setSize(width ? prefSize : 0 width ? 0 : prefSize); float w = view.getPreferredSpan(View.X_AXIS); float h = view.getPreferredSpan(View.Y_AXIS); return new java.awt.Dimension((int) Math.ceil(w) (int) Math.ceil(h)); } } God i wish i could Vote this Ton times. Yes this solution works!"
140,A,How to show a second MVC group as a dialog box in griffon I can see how to instantiate a second MVC group e.g. def (loginPaneModel loginPaneView loginPaneController) = createMVCGroup('LoginPane' 'LoginPane' [:]); view.loginPanel = loginPaneView.loginPanel But I don't want to show as part of my main window. I want it to pop up over it. What do I call to do that? Thanks! Well it seems that only the first line is needed. That was enough to pop up a window. I believe the key though was to make the view a frame. def frame = frame(title:'Login' pack:true locationByPlatform:true) { ... } frame.pack() frame.show()  The easiest way would be to use the view panel as the root of a dialog in the parent MVC group. In the view for the group that yor code snippet is the controller of you could do something like this... application(title:'your app' ....) { // your existing code... loginDialog = dialog(title:'Login Panel' visible:false) { panel(loginPanel) } } And then when you need to show the dialog (in the same controller) view.loginDialog.visible = true Nesting a dialog inside of another window has the side effect of setting the dialog's owner to the frame or dialog of the parent. Having a dialog owned by another dialog/window is what causes the dialog to be linked with the parent and always float on top of that parent. It will also raise/lower with the parent as well.
141,A,Swing bind a dialog box to a JButton I am trying to bind a new customer menu dialog box to a newCustomer button in my application. Any ideas? Can you be more specific? JButton newCustomer = new JButton(); newCustomer.addActionListener(new ActionListener(){ public void actionPerformed(ActionEvent e){ // TODO bind the new customer menu dialog box } });  As far as I know there are several add() methods which are inherited from Component but none of which will add an ActionListener to a JButton. Do you mean addActionListener() instead?  Well to bind actions in java you add ActionListeners. When constructing your button you need to add an ActionListener to it. That way when the click event happens the button knows what to do. newCustomerButon.add(new ActionListener(){ public void actionPerformed(ActionEvent e){ // This is where you put the code for popping up the form. yourForm.setVisible(true); // Or something similar. } });
142,A,"Ctrl-Delete in JTextField How can I get JTextFields to allow Ctrl-Delete and Ctrl-Backspace when editing text? In various other programs these key combinations can delete an entire word in one go. From what I can tell the default behaviour of a JTextField allows the user to use CTRL to jump over an entire word when using left and right keys and to select an entire word when SHIFT is used too. However deleting just doesn't work. Swing uses Key Bindings to map Actions to components. To find out the default mappings for a given component you can use the Key Bindings program. The article also contains a link to the Swing tutorial which contains a section on ""How to Use Key Bindings"". To create your custom Action you would extend TextAction so you have access to the text component. You would then need to get the current caret position. Then you can use the Utilities class to get the start or end of the current word and then you can remove the characters from the Document.  You need to define an Action and put it into the action map of the composite. See this article for an introduction."
143,A,"Dragging handle in Java Swing I can't seem to figure out how to make a resize drag handle in Java Swing. If you're not sure what I mean open up the ""Ask Question"" page on this website and look at the bottom of the text area. It has a bar which you can drag in order to change the size of the area. I'm looking for a way to do this in Java Swing. I don't even know where to look at this point. Any help would be appreciated. there is no link on this Are you really just wanting a JSplitPane? I assumed you wanted more complicated functionality but maybe I shouldn't have. Nope all I needed was JSplitPane. Regardless thanks for your help mmyers. This is just an idea where you may start looking. In swing the gui components do use a layout manager ( LayoutManagers ) whose are responsible to place each graphic element in its place. They are bit tricky because the logic to layout the elements vary from LayoutManager to another most of the times you have to combine them. LayoutManagers usually query the component they are laying out to know what is the minimum size the maximum size and the preferred size. Some lym completely ignore this information some of them use it partially. Well the suggestion would be to use a layout manager that honors the preferred size ( or the maximum ) and then add a mouse listener over other element. When then the element is dragged you may programaticlly increase/decrease the max/min/preff size of your component ( most likely a JTextArea ) and let the LYM resize the visual apparence of the component. So it would look like this pseudo:  public App { private JComponent container; private JComponent myTarget; private JComponent dragComponent; public void someWhere() { container.setLayoutManager( someLayoutManager() ); container.add( myTarget ); container.add( dragComponent ); // warn: not actual method names I don't remember them dragComponent.addMouseListener( new MouseAdapter() { public void mouseDragged( MouseEvent me ) { Point point me.getPoint(); int h = myTarget.getHeight(); int w = myTarget.getWidth(); // Do some math to know if you have to add or subtract. int movement = // -20 +20 whatever. myTarget.setMaximumSize( h + ( movement )  w ); } } ); } } That's just a pseudo code so don't shoot me. Again the idea is to find the right layoutmanager and add a mouse listener to know where the component is being dragged. Each time the component is dragged you change the size of the target component and let the LayoutManager reshape the component. I hope this helps. p.s. Swing also have drag/drop support see if it helps. Oooorrrr... you can use a JSplitPane => http://bit.ly/l8doc hehehe  As another person answered already what you are trying to do simply requires a JSplitPane set to horizontal alignment. You can adjust the split bar width to the pixel size you wish.  I haven't done it either but since you're just looking for a start I'll give it a shot. I would put a JComponent of some sort (possibly a custom subclass) at the spot where you want the handle to appear (I'm assuming you can manipulate layout managers well enough to do that part). Then I would add a MouseListener and a MouseMotionListener -- probably the same class a subclass of MouseAdapter -- to the component. When a click and drag is detected I would resize the component that the handle is attached to. Does that help any?  In my opinion the drag handle that's used on the Stack Overflow posting form most closely resembles that of a vertical JSplitPane both in appearance and functionality. Exactly what I was looking for. Thanks."
144,A,"Java swing UI crash debugging I am trying to debug a problem where a user clicks on the button and the UI just dies. I know good luck. The logs just end after the user clicks the button so i'm thinking there may be some exception/error that we are not logging. Maybe an OutOfMemoryError. Any suggestions on how to proceed? to get more information. Java command setting etc. Thanks for any help rich I don't know what you mean by ""just dies"". Does the UI still redraw itself if you drag it outside your screen edge and then back in? Does the entire process eventually terminate unexpectedly? Does the entire process immediately terminate unexpectedly? Assuming the UI is still there when you click a button and nothing seems to be happening another easy way to diagnose what might be going wrong is to monitor that process' CPU and memory usage. Task Manager (or better Process Explorer) if you're in Windows; ps if you're some flavor of Unix (and probably Mac as well). Check how much CPU that process is using first. If it's 0% then you probably have something benign like the button having no listener (and hence clicking it has no effect whatsoever). If it's 100% then you probably have some business logic running like mad possibly in an infinite loop. Two things to look at: one check memory usage and see whether it's going up; a bug could be causing large numbers of objects to be created and you'll eventually run out of memory. It's impossible to say for sure without knowing what the code does. The second thing is mentioned above: drag the UI offscreen and then back. Java's EDT (Event Dispatch Thread) is responsible for handling all UI events including redrawing the UI when it is made visible; if it doesn't do that then you know something is running in the EDT that shouldn't be keeping it from getting around to doing things like redraws. For all I know the business logic is working just fine but merely takes a while and is hogging the EDT. (If it's just under 50% 33% 25% etc. then you're on a multiple-CPU machine; see 100% above...) From your description however (namely ""the logs just end"") it sounds like your UI or business logic is waiting on something that'll never come so you'll have 0% CPU on that process. Worth checking anyway since it's quick and can head off a needless bug hunt in the wrong place.  Try redirecting standard output - you'll probably see the exception stack trace there.  Which version of java and what machine? In any case here's the scoop: the event queue thread runs somewhat separately from the main thread. In Java < 5 there was a bug that made it difficult to capture events from that thread so some exceptions just went away. In Java 5 there's a new method Thread.setDefaultUncaughtExceptionHandler() that will let you set up an exception handler for anything that might otherwise have gone uncaught. Add a handler there and catch all Throwables and log them. This is also a good hack for dealing with things you might otherwise call System.exit() for as well; have a normalExit Throwable; throw that anywhere you'd call exit in the GUI and make sure all gets cleaned up. Charlie: I think of myself as pretty Java savant and this is one new feature of the language I definitely didn't know about. Thanks for sharing it! Well it happened in part because I complained about the difficulty when I was a Java Architect at Sun. System.exit() basically just shoots the process in the head; I wanted an orderly shutdown.  i was able to find the jvm error file. Looks like something happened while in the ""AWT-Windows"" native thread. =>0x02acf000 JavaThread ""AWT-Windows"" daemon [_thread_in_native id=3616 stack(0x02eb00000x02f00000)] siginfo: ExceptionCode=0xc0000005 writing address 0xe2789280 Registers: EAX=0x234f099c EBX=0x00001400 ECX=0x00000100 EDX=0xe2789280 ESP=0x02eff4a4 EBP=0x00000400 ESI=0x234f099c EDI=0xe2789280 EIP=0x6d02bcbd EFLAGS=0x00010206 Top of Stack: (sp=0x02eff4a4) 0x02eff4a4: 02eff500 00000100 02eff584 00000100 0x02eff4b4: 6d0a5697 00000400 00000400 00000100 0x02eff4c4: 00000100 02eff700 02eff500 00000000 0x02eff4d4: 00000000 00000100 041ac3a0 00000100 0x02eff4e4: 00182620 00000400 e2789280 00000000 0x02eff4f4: 00000000 00000100 00000100 00000000 0x02eff504: 00000000 00000100 00000100 00000000 0x02eff514: 00000000 00000004 00000400 00000000 Instructions: (pc=0x6d02bcbd) 0x6d02bcad: 00 00 00 8b 4c 24 14 8b e9 c1 e9 02 8b f0 8b fa 0x6d02bcbd: f3 a5 8b cd 83 e1 03 f3 a4 8b 74 24 18 8b 4c 24 Stack: [0x02eb00000x02f00000] sp=0x02eff4a4 free space=317k Native frames: (J=compiled Java code j=interpreted Vv=VM code C=native code) C [awt.dll+0x2bcbd] [error occurred during error reporting (printing native stack) id 0xc0000005] Java frames: (J=compiled Java code j=interpreted Vv=VM code) j sun.awt.windows.WToolkit.eventLoop()V+0 j sun.awt.windows.WToolkit.run()V+69 j java.lang.Thread.run()V+11 v ~StubRoutines::call_stub  You must have an event listener waiting for the mouse clicked event. Did you trace through that code to a specific line? The code must at least reach the first line I can't see the event listener not working. You'll need to break it down a bit. And if it's only got one line then you need to drill into that code until you have more than one line or until you can isolate it some more...  the application is running on java 1.6. and the entire process immediately terminate unexpectedly. One other piece of information is that the swing app is started using webstart. i'm are looking through code based on the last line in the log to see if i can figure out what's happening. unfortunately this has happened before and each time at a different point so i haven't been able to reproduce. we'll probably end up eventually using the Thread.setDefaultUncaughtExceptionHandler() suggestion and see if we can get more info. any more thought are welcome. thanks so much for the help"
145,A,"Swing: Which objects for a multi panel display and highlighting text I plan on making a multi comparison program. It will compare multiple files by displaying N number of files in a grid where N = X * Y. X and Y are the width and height of the grid elements. Easy enough I know how to do this pretty much. The question: How do and in what way is best to highlight individual characters in each of these grid elements? I plan on highlighting matching text that is found in the same position. I'm not sure what you mean by ""Highlight the characters"" but to bring attention to grid elements or pairs of grid elements you could set the background color of the appropriate component. Need to highlight the invidiual letters. For example if 'ABC' and 'ACB' are being compared both A's need to be highlighted.  I'd use a JTextPane rather than a JTextArea and read up on the StyledDocument class. This will give you all sorts of options.  You could use a JTextArea with a Highlighter. See the second example on this page for how."
146,A,"Dynamically changing the column header text in JTable I have a table with 3 columns which have the following values in the headers: 'No.' 'X [mm]' 'Y [mm]'. This table contain the coordinates of points in millimeters. I have a checkbox on checking of which the table should repopulate to show the coordinates in inches. Moreover the column header values should be: 'No.' 'X [in]' 'Y [in]'. In short I want to dynamically change the header text of the table. In detail: The table is a subclass of JTable. Moreover a subclass of 'DefaultTableModel' has been set as the model for the table. I have provided the header values in the constructer of the datamodel subclass. Any idea? My application is compatible with only jdk v1.4 so it would be good if the solution is compatible with the verion :) I can't test here but familiar that this method '[DefaultTableModel.setColumnIdentifiers(...)][1]' should do what you want. Basically you run 'DefaultTableModel.getColumnCount()' to find out how many column (unless you already know). Then you run 'DefaultTableModel.getColumnName(int ColumnIndex)' to get the name of each change it the way you want and put it in an array. After thatn you set them back using 'DefaultTableModel.setColumnIdentifiers(...)'. Hope this helps.  You can update the TableColumnModel directly: JTableHeader th = table.getTableHeader(); TableColumnModel tcm = th.getColumnModel(); TableColumn tc = tcm.getColumn(0); tc.setHeaderValue( ""???"" ); th.repaint(); +1. Works great. Thanks. This is not a 100% solution cause it works only until model is changed or ""tableStructureChanged"" is fired. Then column text will be re-read from the model. If that is an issue you can use table.setAutoCreateColumnsFromModel( false ) after the table is initially created  If you have column number use that code  jtable.getColumnModel().getColumn(5).setHeaderValue(""newHeader"");"
147,A,"Changing NetBeans UI Look/Feel Is it possible to somehow change the look/feel of NetBeans? I know it uses Swing and that usually apps using Swing for its UI can usually have their UI scheme changed. The default appearence for OSX is vomitastic and would even settle for just some sort of barebones default look. The whole look is just too distracting and unnecessary. See the answer to this question: http://stackoverflow.com/questions/231738/force-look-and-feel-on-netbeans-65#233855  Looks like this might be what I was looking for: http://wiki.netbeans.org/FaqCustomLaf  To change the default look and feel of netbeans 7.2.1 go to the home directory\Program file \netbeans 7.2.1\etc; Now open to the netbeans.confg file and find out the following text. netbeans_default_options=""-J-client -J-Xss2m -J-Xms32m -J-XX:PermSize=32m -J-Dapple.laf.useScreenMenuBar=true -J-Dapple.awt.graphics.UseQuartz=true -J-Dsun.java2d.noddraw=true -J-Dsun.zip.disableMemoryMapping=true"" Now add the following text; -- laf com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel; Now it will be looked like; netbeans_default_options=""-J-client -J-Xss2m -J-Xms32m -J-XX:PermSize=32m -J-Dapple.laf.useScreenMenuBar=true -J-Dapple.awt.graphics.UseQuartz=true -J-Dsun.java2d.noddraw=true -J-Dsun.zip.disableMemoryMapping=true --laf com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel"" //Now you can see the new look and feel of netbeans (NimbusLookAndFeel)"
148,A,"Drawing on Java heavyweight swing components I'm working with an application in which I add a heavyweight (Canvas) to a JFrame. The Canvas is a 3rd party component so I am required to keep it heavyweight. I'd like to add capabilities for the user to draw on the canvas and paint a selection rectangle. I don't think I can do this with the glass pane since the heavyweight canvas will be displayed over the glass pane. I've tried adding a mouse listener to the canvas and drawing directly on its graphics but that seems to give the ""flicker"" effect since it's not a lightweight double-buffered component. Is there a way to achieve this smooth drawing on heavyweight components? This is my current attempt in the paint method of the heavyweight component but there is still the flashing.  @Override public void paint(Graphics g) { super.paint(g); if (showUserSelection) { Point startDrawPoint = new Point(Math.min(startSelectPoint.x endSelectPoint.x) Math.min(startSelectPoint.y endSelectPoint.y)); Point endDrawPoint = new Point(Math.max(startSelectPoint.x endSelectPoint.x) Math.max(startSelectPoint.y endSelectPoint.y)); int w = endDrawPoint.x - startDrawPoint.x; int h = endDrawPoint.y - startDrawPoint.y; if (w > 0 && h > 0) { BufferedImage img = new BufferedImage(w h BufferedImage.TYPE_INT_ARGB); Graphics2D imgGraphics = img.createGraphics(); imgGraphics.fillRect(0 0 w h); g.drawImage(img startDrawPoint.x startDrawPoint.y w h null); } } } I'm not aware of a drop in ""Host AWT/SWT in Swing"" component but you should be able to build a work around yourself. Have you considered implementing double buffering yourself? You're 90% of the way there with your code just at a glance. @Override public void paint(Graphics g) { BufferedImage buffer = new BufferedImage(COMPONENT_WIDTH COMPONENT_HEIGHT BufferedImage.TYPE_INT_ARGB); Graphics bufferG = buffer.getGraphics(); super.paint(bufferG); if (showUserSelection) { Point startDrawPoint = new Point(Math.min(startSelectPoint.x endSelectPoint.x) Math.min(startSelectPoint.y endSelectPoint.y)); Point endDrawPoint = new Point(Math.max(startSelectPoint.x endSelectPoint.x) Math.max(startSelectPoint.y endSelectPoint.y)); int w = endDrawPoint.x - startDrawPoint.x; int h = endDrawPoint.y - startDrawPoint.y; if (w > 0 && h > 0) { bufferG.fillRect(startDrawPoint.x startDrawPoint.y w h); } } g.drawImage(buffer 0 0 null); } thanks. appreciate the help. i thought i was just slightly off and i think this is getting me closer."
149,A,Global context menu for Cut/Copy/Paste with JTextField in Swing App? What is the best way to implement a global default context menu for a Swing app that has the Windows-standard cut/copy/paste/etc. popup menu for things like JTextField? Tim Boudreau suggested installing a custom UI delegate in this javalobby thread but that was written with Java 5 in mind so I'm wondering if there's a better way today. Are there plans to add this behavior in a future version of Swing itself? Good timing. My blog entry for tomorrow was going to be about using Global Event Listeners. The simple answer is to use an AWTEventListener (instead of a custom EventQueue) to listen for MouseEvents and to then check the mouse event to see if it is a popup trigger. I'll post the link to the entry tomorrow afternoon (EDT) when I get it published. Then you can decide which approach is better. You can now check out the Global Event Listeners entry for a really simple example of using an AWTEventListener. Would you mind posting at least some of the content of your blog post here? That way it's here on the site permanently. I keep the explanation and examples in one place so it only ever needs to be maintained in one place. That way when I answer questions I only need to provide a simple answer and I can spend more time answering other question. If there is something specific that you used that you think is important you can paste it here yourself I'm not worried about people copying or using the code.
150,A,"Detect whether FocusEvent of component is lost or gained I implementing a EventQueue and get notified when AWTEvents are send. I wait till instances of FocusEvent are send to the dispatchEvent methode. The FocusEvent by itself does not have a methode to ask if the focus of the component is gained or lost. The methode paramString returns a String in which the information is placed but i dont want to hack or pars the String. A contains call can give me the answer but the returnes String is no constant so it could change in the future. The paramString methode of FocusEvent is like:  switch(id) { case FOCUS_GAINED: typeStr = ""FOCUS_GAINED""; break; case FOCUS_LOST: typeStr = ""FOCUS_LOST""; break; default: typeStr = ""unknown type""; } return typeStr + (temporary ? ""temporary"" : ""permanent"") + ""opposite="" + getOppositeComponent(); Do you know another solution for this issue. What's wrong with ""evt.getID()""? It returns FOCUS_LOST or FOCUS_GAINED? when you want to implement something during the last minutes in the office you sometimes get crazy. Thanks a lot. @Markus - I know that feeling well. Glad to help."
151,A,Moving a row in jTable How can one move a row in jTable so that row1 goes to row2's position and row2 goes to row1's position ? Use the moveRow(...) method of the DefaultTableModel. Or if you aren't using the DefaultTableModel then implement a simliar method in your custom model. this link is out of date The example link has been removed. You will now need to read the API for the proper syntax. thanks. can you provide a code snippet  plz ? I didn't notice that there was a link. it's been helpful. thanks.  Here is my code that I've just developed using the answer in this question. With those function you can select multiple rows at a time and move them down or up in a JTable. I've attached those function to JButton but i clean them out to make them more readable. The last code line of both function (setRowSelectionInterval()) is used to follow the selection on the row being moved since the moveRow does't move the selection but the content of the row. private void moveUp(){ DefaultTableModel model = (DefaultTableModel)Table.getModel(); int[] rows = Table.getSelectedRows(); model.moveRow(rows[0]rows[rows.length-1]rows[0]-1); Table.setRowSelectionInterval(rows[0]-1 rows[rows.length-1]-1); } private void moveDown(){ DefaultTableModel model = (DefaultTableModel)Table.getModel(); int[] rows = Table.getSelectedRows(); model.moveRow(rows[0]rows[rows.length-1]rows[0]+1); Table.setRowSelectionInterval(rows[0]+1 rows[rows.length-1]+1); }  TableModel model = jTable.getModel(); for(int col=0; col<model.getColumnCount(); col++) { Object o1 = model.getValueAt(row1 col); Object o2 = model.getValueAt(row2 col); model.setValueAt(o1 row2 col); model.setValueAt(o2 row1 col); }
152,A,"What should qualify as a ""long running task"" to be executed in a SwingWorker thread? I know how to use SwingWorker threads but I still don't have precise criteria to decide when to use one or not. I/O seems obvious but what about methods operating on potentially large collections ? A criterion could be the actual running time but what kind of number (in ms) would qualify ? There is not a specific number it is a matter of what the app is supposed to do and how responsive the gui needs to be. Best approach is to do some testing no one can answer this for you. ( though comments may be of great use to you in determining what testing you need to do )  A long running task would be anything long enough for the user to notice glitches or delays in redrawing the UI. Setting the text of a label is probably not ""long running"" but just taking a few milliseconds to draw an image into an offscreen bitmap may delay the UI redrawing long enough to be noticeable. Setting the text of a label or getting the text of a field must be done on the EDT. @Nemi there is always something to learn about Swing ! @Skeptic - this is true for JLabels but JTextComponent.setText() is one of the rare Swing methods that IS thread safe. See here: http://java.sun.com/javase/6/docs/api/javax/swing/text/JTextComponent.html  The important thing is how responsive is the UI. Jef Raskin (of Mac UI fame) said that the maximum delay should be limited to 50 ms. RISC OS guidelines said 100 ms. Button clicks are about 50 ms so if you want to act on release you need to act fast as the user model is generally click for action. Above 140 ms not only does it some unresponsive but UI responses appear to disconnected from user actions (see for instance O'Reilly's Mind Hacks). 250-350 ms and the (normal) user will think something has gone wrong. On the other side of things you need 8 fps (and the includes rendering) to have the illusion of animation (for instance) scrolling. And you know how gamers like their fps. However I prefer software that more or less works than best possible software that is not available. Having said that having Opera lock up for a few minutes whilst it hammered the disc in the middle of this edit did not please me. <~100 ms is what we've always used (OS guidelines specify this plus long experience and user feedback) - but you have to be hyper aware of how things can cause delay (something might seem really fast on your dev machine but be considerably slower after deployment). Our in-house rule is that *anything* that isn't specifically geared towards updating the UI should go into a worker thread. If something indirectly updates the UI (i.e. update the data model which triggers a UI refresh via binding) it is also done in a background thread.  For me it would be 1 s. If your processing takes more than that your UI will freeze. In that situation is much better to show a ""busy"" paint or progress bar. How much time would you like to wait for ANY application that you use become responsive? Let's say you open your IDE or MS-Word or anyother. If you notice most of the times when the application is loading a progress bar or some other animation shows even when the document/project/whatever is small enough as to be opened in 2 s. And remember to take into consideration those users with slower boxes than the developer's. 1s is way too long. 100ms seems more appropriate.  Basically if you cannot predict how long the processing will take it will be a good idea to put it in a separate thread as it will keep you applciation responsive even in extreme cases with bad data etc. Good candidates are Doing expensive operations on all fields in a model. Depending on an external data source or destination. You never know if that might be a slow network drive or similar. But why not just simply make a rule if it has a loop (any for/while) then it goes in a SwingWorker? Naturally. Rules of thumb tend to have cornercases. ""loops"" can be hidden deeply in object creation..."
153,A,"Adding an Icon to JTable by overriding DefaultTableCellRenderer I'm trying to add an icon to a particular JTable column by specifying my own table cell renderer as below (based on parts of this tutorial): public class MyTableCellRenderer extends DefaultTableCellRenderer { public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { JLabel label = (JLabel)super.getTableCellRendererComponent(table value isSelected hasFocus row column); if(column == MyTableModel.IMAGE_COLUMN){ String status = (String)value; Icon icon = StatusImageUtil.getStatusIcon(status); if(icon == null){ label.setText(status); }else{ label.setIcon(icon); } } return label; } } The above code works but: All cell have the icon instead of the specific one i want specified in the if statement Cell MyTableModel.IMAGE_COLUMN which should only have an icon also has text. Thanks in advance For better performance reasons JTable reuses the same label for each cell it renders. This means you need to set both text and icon each time you change it. The same goes for fonts backgroundcolors and the like  if(icon == null){ label.setText(status); label.setIcon(null); }else{ label.setText(""""); label.setIcon(icon); } should do the trick thanks didn't know that the same label is reused for all table cells. Using the above code i still got the same results. I have solved it by setting to null the icon just after casting the table cell renderer to JLabel. yup my adivce did not help because i forgot about the column == MyTableModel.IMAGE_COLUMN test"
154,A,"Can you set a permanent size for a JPanel inside of a JFrame? My current problem is that I have a JFrame with a 2x2 GridLayout. And inside one of the squares I have a JPanel that is to display a grid. I am having a field day with the java swing library... take a look Image Java is automatically expanding each JLabel to fit the screen. I want it to just be those blue squares (water) and the black border and not that gray space. Is there a way I can just set the size of that JPanel permanently so that I don't have to go through changing the size of the JFrame a million times before I get the exact dimension so that the gray space disappears? I also would like to set the size of those buttons so they are not so huge (BorderLayout is being used for the buttons and TextField) If you want the two checkerboards to stay the same size then you'll need to have them each contained in their own JPanel. Set each of those parent JPanel's to have a layout type of GridBagLayout. Set the preferedSize for each checkerboard component and then add them to their respective containers. GridBagLayout should by default lay each board out in the center of the parent JPanel. So as the window is resized the JPanel parent area will get larger or smaller but the checkerboard components inside will remain the same size. Alternatively you could have your blue squares scale to the right size as the window is resized by having each checkboard square be a JPanel with a BorderLayout layout manager and adding the JLabel (with a blue background color) to its BorderLayout.CENTER location. As for your buttons try something like this: JPanel theButtonPanel = new JPanel(new BorderLayout()); JButton button1 = new JButton(""Fire""); JButton button2 = new JButton(""Pass""); JButton button3 = new JButton(""Forfiet""); JPanel innerButtonContainer = new JPanel(new Grid(1 3 8 8)); innerButtonContainer.add(button1); innerButtonContainer.add(button2); innerButtonContainer.add(button3); theButtonPanel.add(innterButtonContainer); Lastly consider using a design tool for your Swing user interface. Netbeans has an excellent UI designer built into it. Download Netbeans here.  I have had success solving problems like these using TableLayout which is a third party layout manager. You will need to download it and read the tutorial but the key would be to set the justification to CENTER when adding the JButtons to their positions in the layout.  If you can setResizeable( false ) on the top level frame you can then set your layout manager to null and hard code each location and size via setBounds. This is how I would do it (contingent on resizing of course).  GridBagLayout is what you really want to use. The GridLayout will force the same size for each component in the layout no matter what size constraints you put on them. GridBagLayout is a lot more powerful and a lot more complicated. Study up on the API page for it. Using GridBagLayout the components won't fill the whole grid space if you don't want them to and can even stay the size that you ask it to be. To keep a component's size from changing I would set all three available size constraints: water.setPreferredSize(new Dimension(20 20)); water.setMinimumSize(new Dimension(20 20)); water.setMaximumSize(new Dimension(20 20)); For your buttons I would definitely use an inner panel as Bryan mentions. You could use either a GridLayout like he suggests or a FlowLayout if you don't want all the buttons to be the same size. Add all your buttons to that inner panel instead of the main one."
155,A,Does anybody have any information on Nimbus Look and Feel customization? Simply looking for some documentation. Answering my own question. I found the information I needed in Jasper Potts presentation for JavaOne 2008 available on his blog at http://www.jasperpotts.com/blog/2009/01/nimbus-the-new-face-of-swing-javaone-2008  Nimbus is based on Synth so you should look at customizing it from a Synth point of view which is well documented. @Yishai Up 1... thanks dor stearing me into right direction :) I'm not sure about that. Most of it is built on vector graphics. I'm sure that Nimbus is based on Synth using vector graphics. If by your comment you mean you might lose the vector graphics in your customizations if you treat it like Synth that is true you would have to use vector graphics for your customization.
156,A,"Java MouseListener - Events Does any know if the following is the expected behaviors in terms of what MouseEvents are fired? One seems to be missing or consumed elsewhere. Right-click on JPanel and display JPopupMenu: MousePressed java.awt.event.MouseEvent[MOUSE_PRESSED (469347)absolute(2214490)button=3modifiers=Meta+Button3 extModifiers=Button3clickCount=1] MouseReleased java.awt.event.MouseEvent[MOUSE_RELEASED (469347)absolute(2214490)button=3modifiers=Meta+Button3 extModifiers=MetaclickCount=1] MouseClicked java.awt.event.MouseEvent[MOUSE_CLICKED (469347)absolute(2214490)button=3modifiers=Meta+Button3 extModifiers=MetaclickCount=1] So far so good all 3 from button 3 and in correct order With JPopupMenu still showing left-click somewhere in the JPanel not in the JPopupMenu: What happened to the MousePressed event? MouseReleased java.awt.event.MouseEvent[MOUSE_RELEASED (452339)absolute(2197482)button=1modifiers=Button1clickCount=1] MouseClicked java.awt.event.MouseEvent[MOUSE_CLICKED (452339)absolute(2197482)button=1modifiers=Button1clickCount=1] Thanks in Advance. So the event that causes the popup menu to close has disappeared. IIRC exactly how this is implemented changed from 1.5 to 1.6. In 1.5 there is a glasspane in 1.6 AWTEventListeners are used. See BasicPopupMenuUI sources for details. It looks as if you can (globally) stop the event being consumed with: UIManager.put(""PopupMenu.consumeEventOnClose"" false); Wouldn't that be ""false"" to stop the event from being consumed?"
157,A,"Java: Accounting for taskbars/menubars/etc when placing a window on the desktop? When my program starts the main window places itself where it was when it was last closed. I want to modify this behavior some so if the window is off-screen (or partially off-screen) it moves itself to fully on screen. I've got this working perfectly. Here's the code:  int x = gameConfig.windowX; int y = gameConfig.windowY; int width = gameConfig.windowWidth; int height = gameConfig.windowHeight; if( x < 0 ) x = 0; if( y < 0 ) y = 0; Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); if( x + width > screenSize.width ) x = screenSize.width - width; if( y + height > screenSize.height ) y = screenSize.height - height; if( width > screenSize.width ) width = screenSize.width; if( height > screenSize.height ) height = screenSize.height; this.setLocation(x y); this.setSize(width height ); if( gameConfig.screenMaximized ) { this.setExtendedState(getExtendedState() | MAXIMIZED_BOTH ); } This works as expected but with one big exception; it doesn't account for taskbars. On windows if the window is past the bottom of the screen this code will correct it but it still leaves a piece of the window blocked by the taskbar. I'm not sure how to do this. Is there someway to ask java about any taskbars in the system and what their width/height is? Thanks that worked perfectly. Do you know how to get it so Java will reflect the total screen size of both of my monitors when I call getScreenSize() ? Right now it is returning 1600x1200 when it's really 3200x1200 spanned across two monitors. The Java API suggests that GraphicsConfiguration.getBounds() would do the trick but that still returns the rectangle {0 0 1600 1200}. Use getScreenInsets (Java 4+): static public Insets getScreenInsets(Window wnd) { Insets si; try { if(wnd==null) { si=Toolkit.getDefaultToolkit().getScreenInsets(new Frame().getGraphicsConfiguration()); } else { si=wnd.getToolkit() .getScreenInsets(wnd.getGraphicsConfiguration()); } } catch(NoSuchMethodError thr) { si=new Insets(0000); } return si; } (This method allows for multiple screens and older JVM's that don't support the API). And always remember the task bar may be on any edge of the screen not just the bottom. ""Task bar may be on any edge of the screen"" -- that's my taskbar you're talking about (at the right of the screen). Too many applications *forced* me to move it to the left (arghh!) and still some don't work correctly. Yeah - Sun didn't help us though waiting until Java 4 to include the ability to determine where the darn thing was.  By following Pavan Kumar Kundagol Sundara´s post answered Jan 9 at 14:03 I got this good looking and working perfectly code: import java.awt.GraphicsEnvironment; import java.awt.Rectangle; Rectangle janelSOdisponivel = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds(); int janelaSOaltura = janelSOdisponivel.height; int janelaSOlargura = janelSOdisponivel.width; And then using the two variables (janelaSOaltura janelaSOlargura) however I needed.  On the issue of multiple screens I've not actually done that but I believe each screen has it's own graphics config. As I understand it you can enumerate the configurations to find the one you want - then you use the same API's as we've already discussed. Looks like the doco for GraphicConfiguration has the detail you need: GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] gs=ge.getScreenDevices(); for(int j = 0; j<gs.length; j++) { GraphicsDevice gd=gs[j]; GraphicsConfiguration[] gc=gd.getConfigurations(); for (int i=0; i<gc.length; i++) { ... } }  The below code worked for me even tested by moving the toolbar to the right. But did not try with multiple screens. public class Scene extends JFrame { private static final long serialVersionUID = 42L; public Scene() { Canvas canvas = new Canvas(); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); this.setContentPane(canvas); this.pack(); this.putFrameInRightCorner(); this.setVisible(true); } protected void putFrameInRightCorner(){ Rectangle winSize = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds(); Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); Dimension frameSize = this.getSize(); int taskBarWidth = screenSize.width - winSize.width; int taskBarHeight = screenSize.height - winSize.height; this.setLocation((screenSize.width - frameSize.width - taskBarWidth) (screenSize.height - frameSize.height - taskBarHeight)); } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { new Scene(); } }); } } Have to override the canvas's (JPanel) getPreferredSize to return the desired size. @Override public Dimension getPreferredSize() { return dimension; }"
158,A,"Button text in JTable renderer not visible. Why? I have a custom cell renderer set in JTable and it works but instead an ""x"" visible on buttons being table cells I see ""..."" (three dots). What did I miss ??  /*************************************************************************** * Listener reagujący na dodanie nowej wartości **************************************************************************/ private static class ButtonRenderer extends JButton implements TableCellRenderer { /*********************************************************************** * Konstruktor **********************************************************************/ public ButtonRenderer() { super(""x""); } /*********************************************************************** * @see TableCellRenderer#getTableCellRendererComponent(JTable Object * boolean boolean int int) **********************************************************************/ public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { return this; } } The size of the button isn't large enough to contain the rendered ""x"" plus the padding around it. A solution would be to enlarge the table cell or reduce the padding (always assuming that the button has the same size as the table cell)."
159,A,How can I get the text from a component in a JList? I have a JList and I am wanting to get the text of an entry of that list at a specific index. Could someone inform me how to do this or should I restructure my code to getValues instead of getIndices? DefaultListModel list = new DefaultListModel(); JList jl = new JList(list); int i = 21; Object = element; String = yourElement; element = jl.getModel().getElementAt(i); yourElement = element.toString;  JList dataList=(...) for(int i = 0; i < dataList.getModel().getSize(); i++) { System.out.println(dataList.getModel().getElementAt(i)); }  Object[] temp = jList1.getSelectedValues(); temp[i] = the object you want. then why you accepted Pierre answer then Are you sure that's what you want? That only works if all objects in the list are selected. I only need to get the objects of the items that are selected I probably forgot to say that sorry.
160,A,"How to create a JButton extension with rounded corners? This is a continuation of the question ""Java rounded Swing JButton"". I have searched for an extension of javax.swing.JButton which will inherit all runtime behavior and just override drawing of the corners. Using the code given by noah.w on sun forums page the result looks like this: I'd like to be able to have the same gradient in the background on mouse over change etc. Does anybody know how to do that? Code which creates the Java Swing window from the picture is: public class XrButton extends JButton implements MouseListener { private static final long serialVersionUID = 9032198251140247116L; String text; boolean mouseIn = false; public XrButton(String s) { super(s); text = s; setBorderPainted(false); addMouseListener(this); setContentAreaFilled(false); } @Override public void paintComponent(Graphics g) { Graphics2D g2 = (Graphics2D) g; if (getModel().isPressed()) { g.setColor(g.getColor()); g2.fillRect(3 3 getWidth() - 6 getHeight() - 6); } super.paintComponent(g); if (mouseIn) g2.setColor(Color.red); else g2.setColor(new Color(128 0 128)); g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING RenderingHints.VALUE_ANTIALIAS_ON); g2.setStroke(new BasicStroke(1.2f)); g2.draw(new RoundRectangle2D.Double(1 1 (getWidth() - 3) (getHeight() - 3) 12 8)); g2.setStroke(new BasicStroke(1.5f)); g2.drawLine(4 getHeight() - 3 getWidth() - 4 getHeight() - 3); g2.dispose(); } public static void main(String[] args) { JFrame frame = new JFrame(); frame.getContentPane().setLayout(new FlowLayout()); XrButton xrButton = new XrButton(""XrButton""); JButton jButton = new JButton(""JButton""); frame.getContentPane().add(xrButton); frame.getContentPane().add(jButton); frame.setSize(150 150); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } public void mouseClicked(MouseEvent e) { } public void mouseEntered(MouseEvent e) { mouseIn = true; } public void mouseExited(MouseEvent e) { mouseIn = false; } public void mousePressed(MouseEvent e) { } public void mouseReleased(MouseEvent e) { } The easiest way to get the same gradient/behavior is to look into the jdk source for that look and feel. Dig into ButtonUI and its subclasses and see what they do. You have to care it by yourself: first of all you can catch every kind of action that is used on the button to change the state (like in the code where mouseIn is used to change a color) then you have to care about every single paint detail you need for example for gradients you should point to class GradientPaint that is used to draw gradients.. By the way mind that you have to take care of various look-and-feels and that your solution will fit just one of these..  I think you've got 2 choices here: 1.Implement drawing yourself in a paint method of your component 2.Create new ButtonUI for your look and feel. In this case i would suggest to use Synch LAF In both cases drawing different states is your resposibility very useful information...thumbs up.. Agreed. StackOverflow isn't about doing ALL of your work for you. If you want to do gradients i'm sure someone's asked ""how do i draw a gradient in swing"" (See GradientPaint) etc.  The best implementation I have seen of rounded buttons in Swing are in the Substance look and feel: https://substance.dev.java.net/ Not all themes have rounded buttons so you may need to change the defaults in the demo. The project is open source so it might be worth poking around in the code for some ideas.  I needed to make this as well this is what I ended up with (Metal LAF only!) @Override protected void paintComponent(Graphics g) { Graphics2D g2 = (Graphics2D) g; g2.setRenderingHints(new RenderingHints(RenderingHints.KEY_ANTIALIASING RenderingHints.VALUE_ANTIALIAS_ON)); Shape firstClip = g.getClip(); RoundRectangle2D rect = new RoundRectangle2D.Double(); double arc = Math.ceil(getSize().getHeight()/3); rect.setRoundRect(0 0 Math.ceil(getSize().getWidth()) Math.ceil(getSize().getHeight()) arc arc); Area secondClip = new Area(getBounds()); secondClip.subtract(new Area(rect)); Area finalClip = new Area(firstClip); finalClip.subtract(secondClip); g2.setClip(finalClip); super.paintComponent(g2); Color[] gradients; if(getModel().isRollover()) { gradients = new Color[] { new Color(184 207 229) new Color(122 138 153) new Color(184 207 229) }; } else { gradients = new Color[] { new Color(122 138 153) }; } for(int i = 0; i < gradients.length; i++) { arc -= 2; g2.setColor(gradients[i]); g2.drawRoundRect(i+1 i+1 (int)Math.ceil(getSize().getWidth()-2)-(i*2) (int)Math.ceil(getSize().getHeight()-2)-(i*2) (int)arc (int)arc); } } Which looks like this: http://i.stack.imgur.com/unZuc.png"
161,A,"Swing: Creating a draggable component...? I searched the web for examples of draggable Swing components but I found either incomplete or non-working examples. What I need is a Swing component that can be dragged by the mouse inside an other component. While being dragged it should already change its position not just 'jump' to its destination. I would appreciate examples which work without non-standard APIs. Thank you. I propose a simple but well-working solution found out by myself ;) What do I do? When mouse is pressed I record the cursor's position on screen and the component's position. When mouse is dragged I calculate the difference between new and old cursor's position on screen and move the component by this difference. Tested with latest JDK 6 unter Linux (OpenSuse KDE3) but hey it's Java Swing should work equally everywhere. Here goes the code: import java.awt.*; import java.awt.event.*; import javax.swing.*; import javax.swing.border.*; public class MyDraggableComponent extends JComponent { private volatile int screenX = 0; private volatile int screenY = 0; private volatile int myX = 0; private volatile int myY = 0; public MyDraggableComponent() { setBorder(new LineBorder(Color.BLUE 3)); setBackground(Color.WHITE); setBounds(0 0 100 100); setOpaque(false); addMouseListener(new MouseListener() { @Override public void mouseClicked(MouseEvent e) { } @Override public void mousePressed(MouseEvent e) { screenX = e.getXOnScreen(); screenY = e.getYOnScreen(); myX = getX(); myY = getY(); } @Override public void mouseReleased(MouseEvent e) { } @Override public void mouseEntered(MouseEvent e) { } @Override public void mouseExited(MouseEvent e) { } }); addMouseMotionListener(new MouseMotionListener() { @Override public void mouseDragged(MouseEvent e) { int deltaX = e.getXOnScreen() - screenX; int deltaY = e.getYOnScreen() - screenY; setLocation(myX + deltaX myY + deltaY); } @Override public void mouseMoved(MouseEvent e) { } }); } } public class Main { public static void main(String[] args) { JFrame f = new JFrame(""Swing Hello World""); // by doing this we prevent Swing from resizing // our nice component f.setLayout(null); MyDraggableComponent mc = new MyDraggableComponent(); f.add(mc); f.setSize(500 500); f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); f.setVisible(true); } }  Also I found out that one could create an JInternalFrame inside an JFrame but the problem is: you get always an annoying window title bar. To disable the title bar sadly a dirty workaround is necessary: public class MyDraggableComponent extends JInternalFrame { public MyDraggableComponent() { InternalFrameUI thisUI = getUI(); if (thisUI instanceof BasicInternalFrameUI) { ((BasicInternalFrameUI) thisUI).setNorthPane(null); } } I really miss a method like ""someInternalFrame.setWindowTitleBar(false)""... :'( Subclassing could provide the `setWindowTitleBar()` method!"
162,A,"How to generate a form file from existing code? In netbeans you can choose to work on ""design"" or ""source"". If you don't have a form file netbeans won't let you see the design and work on that with drag and drop. I have some existing code with much swing. How can I use the ""design"" mode in netbeans on that code? To me it seams I can only use the ""design"" mode if I create a new empty file and work on that. I can't copy the existing code to new file because netbeans have this autogenerated code that none can edit :S Unfortunatly Netbeans (latest that I try was 6.5) can not generate form file from existen code. So you can only edit it manual because as you mentored you can not create new file and copy&paste old code in it. Also if you not resrticted with using Netbeanse for edit existen swing components -you can try IntelliJ IDEA. As I know - it has special tool for working with existen swing windows. Do not remember details sorry :) If you don't have IDEA license - you can or: try trial for 30 days (if I'm right) try beta version. Hope this helps."
163,A,"How do I assign Enter as the trigger key of all JButtons in my Java application? I'm writing a Java Swing application using the Metal look-and-feel. Every time there is a JButton in my application the user uses the Tab key to move the focus to the button and then hits the Enter key. Nothing happens! If he hits the Space key the button events are fired. How do I assign the Enter key to trigger the same events as the Space key? Thank you for your help. You do it by assigning an input / action map for the Enter key. Something like the following: // save the command mapping for space Object spaceMap = button.getInputMap.get(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE 0 true)); // add a mapping from enter to the same command. button.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER 0 true)spaceMap); I don't want to do this to all the buttons in my application too much hassle. You can subclass JButton and add this in the constructor.  I found the following: http://tips4java.wordpress.com/2008/10/25/enter-key-and-button/ Where Rob Camick writes that when using JDK5 and later you simply add... UIManager.put(""Button.defaultButtonFollowsFocus"" Boolean.TRUE); ...to the application to solve the problem. This did the trick for me! And I can't imagine anything simpler. However when using older versions of Java you will have to do something like Richard and Peter describe in their answers to this question. Aah very nice ;-) Good article too. I looked at MetalLookAndFeel class while working on my answer and this is just few lines above ""Button.focusInputMap"" which I used.  Here is complete example. Richard was close but you also need to map pressed ENTER to action not just released. To make it work for ALL buttons I have put this mapping to default input map for buttons. Add imports and it should be runnable. public class Main implements Runnable { public static void main(String[] args) { SwingUtilities.invokeLater(new Main()); } @Override public void run() { setupEnterActionForAllButtons(); JFrame frame = new JFrame(""Button test""); frame.getContentPane().add(createButton() BorderLayout.NORTH); frame.getContentPane().add(createButton() BorderLayout.SOUTH); frame.pack(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } private void setupEnterActionForAllButtons() { InputMap im = (InputMap) UIManager.getDefaults().get(""Button.focusInputMap""); Object pressedAction = im.get(KeyStroke.getKeyStroke(""pressed SPACE"")); Object releasedAction = im.get(KeyStroke.getKeyStroke(""released SPACE"")); im.put(KeyStroke.getKeyStroke(""pressed ENTER"") pressedAction); im.put(KeyStroke.getKeyStroke(""released ENTER"") releasedAction); } private JButton createButton() { JButton b = new JButton(""press enter""); b.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { System.out.println(""Pressed""); } }); return b; } } Thank you very much Peter. I think the best answers are Code-Based answers. Thumbs up!  You can also set the ""default button"" to the button most recently focussed. I did this on an application and all methods of doing this are a nightmare to maintain and debug. The fact is this is clearly not what the designers of Swing intended to happen. I agree this would be a nightmare.  Actually this is a look and feel issue. It is (and should be) up to the look and feel as to which key triggers the focused button. The ""default button"" work-around works since the L&F you're using uses enter for the default button. Peter's workaround explicitly changes the L&F default ""focus action"" key - which is somewhat more convincing if you ask me. I would add that I don't think many users would want to tab to the button then hit enter (most won't even notice the focus indicator) - they want the default action to be the ""right"" one and work wherever they press enter. This can only be done with input maps as Richard suggests. I would certainly suggest getting a very clear picture of what your users actually want and expect (preferably with reference to other apps they use) before changing anything globally."
164,A,Active rendering and the EDT (Swing animation) How should I run animation in a Swing applet? I have an animation thread performing active rendering and it initially animates fine. Sometimes (anywhere from 1 minute to 2 hours later) it begins to fail to update the screen and only the sounds occur. I believe this is due to the fact that the paint is not performed from the EDT causing some kind of concurrency problem. So should the active rendering (ie getGraphics() and painting) be called only from the EDT? A problem with this is the Swing timer lacks precision. Or has anyone had success with active rendering without using the EDT and completely disabling any EDT updates to the page (maybe using Canvas / or ignore repaint on a JPanel)? A few things to look at would be to make sure you are only repainting what needs to be repainted and not the whole graphics context each time unless necessary. Also there is a timing framework that you can use to handle some animations. I don't think it is actively being developed but last time I looked at it it had some nice api's to use for animation. Without knowing your specific use case this is all I could come up w/ off the top of my head. Thanks actually the timing framework and optimisation (including clipping) is pretty mature as the Swing applet is basically being converted from AWT. Replacing active rendering with invokeLater and sleep(1) until invoke has been carried out is a simple swap that slots in the old code.  You can paint graphics into your own off-screen image in another thread and copy to the screen in the EDT. But for single threaded stuff I would hope your frame rate is high enough to be able to do it in the EDT. There is no deliberate delay in invokeLater although it may be late if the GUI is busy. IIRC it's wait in particular that is unreliable for Swing Timer (as well as currentTimeMillis). So just be careful to hack around the problems in your scheduler thread. Thanks Tom the problem is still that the EDT through the Swing timer is lacking precision regardless of how much or little work is performed on the timer. Here are some samples in ms between calls (method just records time) when asking for 60fps. This is unacceptable. 19 32 29 18 28 19 28 44 7 27 Yeah the Swing timer resolution is poor (at least on some platforms). But you can run a proper scheduler on another thread and invoke later (which is almost how Swing Timer) is implemented. I mistakenly assumed that the invoke later would be as unreliable as the swing timer. It's not it's accurate. Now just some work with yielding and preventing the invoke laters backing up and it should be there. Thanks for the advice.
165,A,Using extended Swing component threading doubt I have built my own component extending JPanel. I've added a few methods like calculateWhatever()... Should I call those methods with invokeLater() as well? Substance L&F is not complaining about it but I'm having rare random painting problems and I'm wondering If they're happening because of those calculations inside the extended swing component. You only need to invoke these methods using invokeLater() (or using the SwingWorker) when you are modifying your component (or painting on it) from within these methods. If you merely do calculations you only need to synchronize when accessing the result in e.g. the paint() method.  You should generally use SwingUtilities.invokeLater or the SwingWorker to isolate the changes to GUI components from any potential locking scenarios (file I/O or remote server calls) or processor intensive operations. If your calculations do any disk reading or writing or if you make calls to a server I would suggest that you reorganize your code to do all of you painting calls in the AWT thread. Likewise if you realize your calcs are taking too long to complete and your GUI seems sluggish breaking them out would be prudent.  If you are doing a large number of calculations then it would be prudent to execute them in a thread other than the event dispatch thread. If you are using JDK 1.6 you could also use the SwingWorker class rather than invokeLater. So just being methods from an extended swing component implies running in the EDT by default? Take a look at this article. It's a good summary. http://java.sun.com/docs/books/tutorial/uiswing/concurrency/index.html
166,A,"Fast search in java swing applications? I'm wandering myself what component is the best for displaying fast search results in swing. I want to create something like this make a text field where user can enter some text during his entering I'll improve in back end fast search on database and I want to show data bellow the text box and he will be able to browse the results and on pres enter result will be displayed in table. So my question is is there any component which already have this logic for displaying? Or is it's not what is the best way to implement that. This search will be something what ajax gives me on web same logic same look and feel if it's possible on desktop application. In the interest of killing two birds with one stone: have a separate indexing thread. This will: Improve the speed of searches whenever they are executed. Improve the responsiveness of the UI since indexing is happening in a separate thread. Of course exactly how you perform the indexing will vary widely depending on your particular application. Here is a good place to start researching: Search Indexing. And please ignore the reference to Web 3.0 [sic].  It is possible of course. It is simple too. For drop down list of terms just use popup menu. This is simple. The background processing of entered text is simple too. Enjoy!  Are you looking for something like an AutoComplete component for Java Swing? SwingX has such a component. See here for the JavaDoc. It has a lot of utility methods to do various things i.e. auto-completing a text box from the contents of a JList. Thanks for the tip. I downloaded the swingx classes and I tried: ArrayList nums = new ArrayList(); numsadd(new StringBuffer(""4000"")); nums.add(new StringBuffer(""5000"")); autoCompleteAdaptor = new TextComponentAdaptor(numsInputnums); where numsInput is a JTextField. I don't know what do I need to setup next. Do you happen to know where I can find a sample to get started ?  I strongly strongly recommend that you take a look at Glazed Lists - this is one of the finer open source Java libraries out there and it makes the bulk of what you are asking about super easy.  You will have to first attach a listener to the JTextFields Document to be notified whenever the user types in the field (or changes it). From there you can fire off any server-side code you need. The results of that can be used to update a listbox. A few things to keep in mind: The code to do the search against the backend must be in another thread The code that updates the list box should update the list box's model You will need to manage all your backend search results so that you only update the listbox with the most recent result (e.g. user types 'A' backenf searches for that. Meanwhile user has typed 'C' kicking off a backend search for 'AC'. You need to ensure the results from the 'A' search dont' make it to the listbox if the 'AC' search results are available).  Use Hibernate Search. The SwingHack (http://oreilly.com/catalog/9780596009076/) book has an example of this."
167,A,Swing Thread Callbacks Any suggestions on how I can cleanup the following code pattern that repeats multiple times in my app. new Thread(new Runnable() { public void run() { // Do some work here SwingUtilities.invokeLater(new Runnable() { public void run() { // Update the Swing Interface to reflect the change } }); } }).start(); Basically there are two code blocks the section that does the work on another thread and the code block that executes in the Swing UI Thread. I'm pretty sure I can create a class to sub in these blocks but I'm hoping there something in the Swing Library that makes this easier. Thanks. As far as I know if you want to throw something on the Event Dispatch Thread that is the way to go about it. look at the SwingWorker framework Swing worker uses a background thread. Allain wants to put the action on the Event Dispatch Thread. Actually the only portion I need to run in the Event Dispatch Thread is the portion *after* the main block has completed and by overriding SwingWorker.done() in the SwingWorker class I get that behaviour. Well there ya go!!  The Concurrency in Swing tutorial is another good place to look. There's discussion about SwingWorker there too.
168,A,GridBagLayout .NET WinForms Is there anything similar to Java Swing's GridBagLayout on .NET and Winforms? TableLayoutPanel.  You can do some of what GridBagLayout does with the TableLayoutPanel. E.g. you can place controls at specified rows and columns using SetRow and SetColumn and have them span using SetRowSpan and SetColumnSpan; you can control sizing and weighting using the RowStyles and ColumnStyles collection etc. Whether it supports every feature of GridBagLayout I don't know but it's probably the closest thing that's built into WinForms.
169,A,Send a JPanel to the printer Is it possible to just send a JPanel or any other component to the printer? Or do I have to implement all the drawing to the graphics object by hand? I have tried to use the Print* functions of the JPanel to print to the graphics object but the page that gets printed is blank. Check out the Java printing API and tutorial along with JComponent.print(Graphics). Here is a rudimentary class which will print any component which fits on 1 page (I can't take credit for this I got the code from Marty Hall's tutorial): package dol.lpc.lib.gui; import java.awt.*; import java.awt.print.*; import javax.swing.*; /** * Generic component printer. This object allows any AWT or Swing component (or DCT system) * to be printed by performing it pre and post print responsibilities. * <p> * When printing components the role of the print method is nothing more than to scale the Graphics turn off double * buffering and call paint. There is no particular reason to put that print method in the component being printed. A * better approach is to build a generic printComponent method to which you simply pass the component you want printed. * <p> * With Swing almost all components have double buffering turned on by default. In general this is a great benefit * making for convenient and efficient painting. However in the specific case of printing it can is a huge problem. * First since printing components relies on scaling the coordinate system and then simply calling the component's * paint method if double buffering is enabled printing amounts to little more than scaling up the buffer (off-screen * image) which results in ugly low-resolution printing like you already had available. Secondly sending these huge * buffers to the printer results in huge print spooler files which take a very long time to print. Consequently this * object globally turns off double buffering before printing and turns it back on afterwards. * <p> * Threading Design : [x] Single Threaded [ ] Threadsafe [ ] Immutable [ ] Isolated */ public class ComponentPrinter extends Object implements Printable { // ***************************************************************************** // INSTANCE PROPERTIES // ***************************************************************************** private Component component; // the component to print // ***************************************************************************** // INSTANCE CREATE/DELETE // ***************************************************************************** public ComponentPrinter(Component com) { component=com; } // ***************************************************************************** // INSTANCE METHODS // ***************************************************************************** public void print() throws PrinterException { PrinterJob printJob=PrinterJob.getPrinterJob(); printJob.setPrintable(this); if(printJob.printDialog()) { printJob.print(); } } public int print(Graphics gc PageFormat pageFormat int pageIndex) { if(pageIndex>0) { return NO_SUCH_PAGE; } RepaintManager mgr=RepaintManager.currentManager(component); Graphics2D g2d=(Graphics2D)gc; g2d.translate(pageFormat.getImageableX()pageFormat.getImageableY()); mgr.setDoubleBufferingEnabled(false); // only for swing components component.paint(g2d); mgr.setDoubleBufferingEnabled(true); // only for swing components return PAGE_EXISTS; } // ***************************************************************************** // STATIC METHODS // ***************************************************************************** static public void printComponent(Component com) throws PrinterException { new ComponentPrinter(com).print(); } } // END PUBLIC CLASS  This tutorial mentions translating the Graphics object. Have you tried that?
170,A,"What is 'JNI Global reference' I am using jProfiler to find memory leaks in a Java swing application. I have identified instances of a JFrame which keeps growing in count. This frame is opened and then closed. Using jProfiler and viewing the Paths to GC Root there is only one reference 'JNI Global reference'. What does this mean? Why is it hanging on to each instance of the frame? A JNI global reference is a reference from ""native"" code to a Java object managed by the Java garbage collector. Its purpose is to prevent collection of an object that is still in use by native code but doesn't appear to have any live references in the Java code. A JFrame is a java.awt.Window and is associated with a ""native"" Window object. When you are completely finished with a particular JFrame instance you should invoke its dispose() method to clean up. I am not sure if any native code is creating a global reference to the JFrame but it seems likely. If it does this will prevent the JFrame from being garbage collected. If you are creating many Windows (or subclasses) and seeing that they are never collected make sure that they are disposed. If the code is only Java this is the most likely explanation. I've had problems with global pointers but I've been working with JNI.  Wikipedia has a good overview of Java Native Interface essentially it allows communication between Java and native operating system libraries writen in other languages. JNI global references are prone to memory leaks as they are not automatically garbage collected and the programmer must explicitly free them. If you are not writing any JNI code yourself it is possible that the library you are using has a memory leak. edit here is a bit more info on local vs. global references and why global references are used (and how they should be freed) Wikipedia is a secondary source. The primary source and official document is the [JNI Specification](http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/jniTOC.html)."
171,A,"Java JFileChooser opens back up after clicking open in the chooser dialog When I use the JFileChooser in my project that i am working on everything works just like it is supposed to work with no problems at all except for one. when you click ""open"" in the dialog it changes my background and then the JFileChooser dialog opens up again. could anyone tell me what i need to do to make that not happen?? here's all of my source below..  import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.io.*; import java.net.*; import java.util.*; import org.w3c.dom.*; import javax.xml.parsers.DocumentBuilder; import javax.xml.parsers.DocumentBuilderFactory; public class COS extends JPanel implements ActionListener{ static JFrame f=new JFrame(); static Image bgImage=null; static String message=""""; JButton chbg=new JButton(""change background""); public COS(){ } public void paintComponent(Graphics g){ if(bgImage!=null){ g.drawImage(bgImage00this); chbg.setBounds(101015025); chbg.addActionListener(this); add(chbg); } else{ g.drawString(message4040); } } public static void loadbg(){ try{ String xmlpath=""background.xml""; DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance(); try{ String fimg=""""; DocumentBuilder db=dbf.newDocumentBuilder(); Document dom=db.parse(xmlpath); dom.getDocumentElement().normalize(); NodeList ndlst=dom.getElementsByTagName(""background""); Node firstnd=ndlst.item(0); if(firstnd.getNodeType()==Node.ELEMENT_NODE){ Element firstele=(Element)firstnd; NodeList firstnamenodelist=firstele.getElementsByTagName(""bgimage""); Element firstnamele=(Element)firstnamenodelist.item(0); NodeList firstname=firstnamele.getChildNodes(); fimg=((Node) firstname.item(0)).getNodeValue(); } getFileImage(fimg); } catch(Exception e){ } } catch(Exception e){ message=""File load failed: ""+e.getMessage(); } } public static void getFileImage(String filein) throws IOException InterruptedException{ FileInputStream in=new FileInputStream(filein); byte[] b=new byte[in.available()]; in.read(b); in.close(); bgImage=Toolkit.getDefaultToolkit().createImage(b); } public void actionPerformed(ActionEvent e){ Object source=e.getSource(); JFileChooser jfc=new JFileChooser(); if(source==chbg){ int returnVal=jfc.showOpenDialog(null); if(returnVal==JFileChooser.APPROVE_OPTION){ File file=jfc.getSelectedFile(); String fileone=file.getName(); changebg(fileone); } } } public void changebg(String filein){ try{ getFileImage(filein); saveDefaultImage(filein); repaint(); } catch(IOException e){ } catch(InterruptedException ie){ } } public void saveDefaultImage(String filein){ String newdefbg=filein; //don't mind this method i am still working on it... } public static void main(String[] args){ COS newcos=new COS(); loadbg(); f.setSize(825640); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.getContentPane().setLayout(null); newcos.setBounds(55800600); f.setLocation(105); f.getContentPane().add(newcos); f.setVisible(true); } } Simply because you add new action listener with every repaint. Paint method is ONLY for painting and nothing else. You have to rethink your strategy. that didn't help when i take repaint() out from the changebg method the JFileChooser still acts the same exact away. No he means move the .addActionListener() call to the constructor rather than the paintComponent() method. You keep adding more and more instances of 'this' to the button's actions listeners list and so they are being called sequentially. Only add the listener once per instance. oooh i see thankyou =]"
172,A,Java glazedlists: how to update a table row I'm missing something obvious here. I have a glazedlists EventList<X> where X is my custom class. This list contains a bunch of values. When I update one of the values how do I make sure the GUI updates its display for that row? The way to do this appears to be to replace the list element with itself:  EventList<X> list = /* get reference to a list */ X x = list.get(3); /* update x here */ list.set(3x);  It looks like you can invoke addListEventListener to register a ListEventListener. See also the Glazed Lists Tutorial. great thanks! -
173,A,"How do you set the tab size in a JEditorPane? A JTextArea's tab size can easily be set using setTabSize(int). Is there a similar way to do it with a JEditorPane? Right now text with tabs in my pane looks like: if (stuff){ more stuff; } And I'd prefer a much smaller tab stop: if (stuff){ more stuff; } As JEditorPane is designed to support different kinds of content types it does provide a way to specify a ""tab size"" directly because the meaning of that should be defined by the content model. However when you use a model that's a PlainDocument or one of its descendants there is a ""tabSizeAttribute"" that provides what you are looking for. Example: JEditorPane pane = new JEditorPane(...); ... Document doc = pane.getDocument(); if (doc instanceof PlainDocument) { doc.putProperty(PlainDocument.tabSizeAttribute 8); } ... From the Javadoc: /** * Name of the attribute that specifies the tab * size for tabs contained in the content. The * type for the value is Integer. */ public static final String tabSizeAttribute = ""tabSize""; For Styled EditorKit it's also possible http://java-sl.com/tip_default_tabstop_size.html Thanks for not just a 'how' but a 'why' too!  In case anyone's using a StyledDocument (The link on the other answer died) You create a TabSet which is an array of TabStops. In my case I only cared about the 1st tab and I wanted it 20px from the left so this code worked for me: StyleContext sc = StyleContext.getDefaultStyleContext(); TabSet tabs = new TabSet(new TabStop[] { new TabStop(20) }); AttributeSet paraSet = sc.addAttribute(SimpleAttributeSet.EMPTY StyleConstants.TabSet tabs); pane.setParagraphAttributes(paraSet false);  Took me a while to figure this out. And decided to use TabStop's in a TabSet that have calculated width based on the font size. This has to be reset when ever the font size changes (in the paint() method of the JEditPane). Complicated stuff! :( This isn't an answer!"
174,A,My slider in java does not give same look and feel in all platform Hi I have created a slider in java in linux platform. But the slider gave different look and feel in different operating systems. Means in linux it looks little bit good but in mac operating system the slider looks different. so how to give same look and feel to my slider irrespective of operating system The code is given below. import javax.swing.JFrame; import javax.swing.JSlider; import javax.swing.Timer; public class Test { static int percent = 0; public static void main(String[] args) { JFrame f = new JFrame(); final JSlider s = new JSlider(); f.getContentPane().add(s); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); f.setVisible(true); Timer time = new Timer(100 new ActionListener() { @Override public void actionPerformed(ActionEvent e) { percent++; if (percent>100) percent = 0; // s.setMajorTickSpacing(10); //s.setMinorTickSpacing(1); //s.setPaintTicks(true); //s.setPaintLabels(true); // JScrollBar sb = s.getHorizontalScrollBar(); s.setValue((int)(s.getMaximum()*(percent/100.0))); s.setAutoscrolls(true); } }); time.start(); } } Thanks Sunil kumar Sahoo well the point of different look and feels is that they look differently. but check out nimbus or metal they are supposed to look almost the same on every platform (Note you shouldn't use Swing from any thread other than the AWT Event Dispatch Thread (EDT) including the main thread. Wrap the code in the standard boilerplate: `java.awt.EventQueue.invokeLater(new Runnbale() { public void run() { ... }});`. You can change the look and feel of the swing components by using UIManager.setLookAndFeel( UIManager.getCrossPlatformLookAndFeelClassName() ); or some other values defined by UIManager.getInstalledLookAndFeels();
175,A,"Where are these error and warning icons as a java resource? I've got a custom tree cell renderer that I'm using to render custom icons a JTree and I really like the warning icon and the error icon that JOptionPane displays for both warning messages and error messages respectively. Obviously I can use the following code to get the icons for my own use but this is way heavy handed and requires me to instantiate dialogs that I'm never going to use: public class ValidationCellRenderer extends DefaultTreeCellRenderer { private Icon warnIcon; private Icon errorIcon; public ValidationCellRenderer() { JOptionPane optionPane = new JOptionPane(new Object() JOptionPane.WARNING_MESSAGE); warnIcon = optionPane.getIcon(); optionPane = new JOptionPane(new Object() JOptionPane.ERROR_MESSAGE); errorIcon = optionPane.getIcon(); } } There's got to be a better way to get these icons as a resource but I'm not finding an easy way to do this from the Java API. Anyone have any suggestions? And if you want to know about all the icons and their names you can check out: UIManager Defaults  We use them too via: UIManager.getIcon(""OptionPane.errorIcon"") UIManager.getIcon(""OptionPane.warningIcon"") Thanks that's exactly what I needed."
176,A,"Java Swing GUIs on Mac OS X Have you ever attempted using Swing only to end up changing courses because it just couldn't do what you wanted? I'm pretty new to Swing having only used it for school projects over 5 years ago but it seems Swing has come a long way in providing a more native look and feel so much so that I'm considering using it to develop the GUI for an app on Mac OS X. Before I do though I wanted to see if anyone has run into any showstopper issues that prevented them from using Swing. Just off the top of my head some possibilities: Problems developing custom components that looked ""right"" Bad interactions with native applications and widgets Performance issues (unresponsiveness repaint problems) Inability to mimic native behaviors (like Dock interaction) @alanlcode: I wouldn't call these showstoppers but when you want to support OS X 10.45 and 6 and 32 bit Macs that don't have Java 6 and need stuff like good looking *sortable* JTable it's a *lot* of work. Then there's the memory piggyness issue and the slowness issues GC that seems to take longer on OS X than on other platform etc. I've considered switching but having the same source code for Windows OS X and Linux is enough to keep using Swing/Java :) Also I considered doing more Obj-C but going to XCode or anything else from IntelliJ IDEA would be like going back to the stone age! As Kevin and John said you should try Objective-C Cocoa and XCode if you are only targeting Mac users. The developer tools for Mac is freely available. If you want to (or have to) use Java and Swing you can use some libraries to create a GUI that looks well on Macs: Quaqua look and feel MacWidgets For deploying your application you should read the JarBundler docs. However in this case interaction with dock and native applications is very limited. Some other good links are: Making Java/Swing Applications Look (More) Like Native Mac OS X Applications Java: How to handle drop events to the Mac OS X Dock icon  Macify can help.  Swing isn't going to give you perfect fidelity with the hosting OS. Sun simply can't devote the considerable resources necessary to do so. My impression is that Swing has gotten much better but is still going to look out of place by default. The minimum required to even hope to pass as a Mac app: package your .jar in a .app set the L&F to system default set apple.laf.useScreenMenuBar property to true must do this before any UI code Dock interaction is non-existent in standard Java. You'll have to use Apple's Cocoa-Java bridge which is no longer supported. I have no idea how tractable JNI is on OS X which is the only real alternative. Performance shouldn't be a problem. Drag & Drop is probably as hairy on OS X as it is everywhere else. Basically if you're explicitly targeting OS X you're best off using Objective-C. Its far from impossible to build an app on OS X using Java & Swing but its a lot of work to make it look ""native"". Thanks for the ideas. My original impetus for trying Java on the Mac was to be able to gain some real experience using Clojure which seems like an interesting language. I've decided to use Objective-C for this GUI and maybe tackle Clojure on something non-graphical.  @Kevin++ Using Cocoa is probably better If you want it to look exactly like native applications If you are targeting only the Mac If you intend to distribute your applications for Windows Linux etc. Swing is a decent choice. It's better but like in any toolkit there are still issues. You'll never get a truly native look and feel with it same goes for similar UI toolkits which claim to be ""cross-platform"". The Apple Guidelines for Java development can be found here.  Swing is a nice way to go or you can go SWT or BOTH! But either way use them on top of the RCP platform. (either with Eclipse or Netbeans). Have a look at this: http://www.adam-bien.com/roller/abien/entry/eclipse_rcp_vs_netbeans_rcp marco"
177,A,"Adding a watermark to an empty JCombobox I'm trying to reproduce the behavior of the search field of Firefox or Safari or the search field of stackoverflow.com on the top right of this page. I mean when there is no text on the editable JComboBox an instruction text is displayed like ""Type here"" or whatever. When the JComboBox is focused the text is removed. If the focus is lost with no text typed the instruction text comes back. Here's something simple I threw together. I'm sure you can tidy it up. Since the code works on a JTextField you would need to get the editor of the combobox. I no nothing about how Glazed lists is implemented so I'm just guessing it will work for you. import java.awt.*; import java.awt.event.*; import javax.swing.*; import javax.swing.border.*; import javax.swing.event.*; import javax.swing.text.*; public class TextPrompt extends JLabel implements FocusListener DocumentListener { private JTextComponent component; private Document document; public TextPrompt(String text JTextComponent component) { this.component = component; document = component.getDocument(); setText( text ); setFont( component.getFont() ); setBorder( new EmptyBorder(component.getInsets()) ); component.addFocusListener( this ); document.addDocumentListener( this ); component.add( this ); } public void checkForPrompt() { if (document.getLength() == 0) setSize( component.getSize() ); else setSize(0 0); } // Implement FocusListener public void focusGained(FocusEvent e) { checkForPrompt(); } public void focusLost(FocusEvent e) { setSize(0 0); } // Implement DocumentListener public void insertUpdate(DocumentEvent e) { checkForPrompt(); } public void removeUpdate(DocumentEvent e) { checkForPrompt(); } public void changedUpdate(DocumentEvent e) {} public static void main(String[] args) { JPanel panel = new JPanel(); JTextField tf1 = new JTextField(10); panel.add(tf1); JTextField tf2 = new JTextField(10); panel.add(tf2); new TextPrompt(""First Name"" tf1); new TextPrompt(""Last Name"" tf2); JFrame frame = new JFrame(); frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); frame.add(panel); frame.pack(); frame.setLocationRelativeTo( null ); frame.setVisible(true); } } This class has been updated with more features. See: [Text Prompt](http://tips4java.wordpress.com/2009/11/29/text-prompt/) Almost perfect for my use case. I did just three changes: 1) when focused there must be no text so I added a ""&& !component.hasFocus"" to the if on checkForPrompt. 2) on focusLost I call checkForPrompt instead of setSize. 3) There must be a checkForPrompt call on startup for the initial visibility state. This call must be made after the layout size calculation otherwise component.getSize() will be 0. Thanks!  Its called a waterMark. jQuery has one. I've never tired to apply a watermark to a jComboBox. Good luck thanks i was looking for a known term for this"
178,A,"How can I detect from a Swing app that the PC is being shut-down? Well behaved windows programs need to allow users to save their work when they are shutting the PC down. How can I make my app detect the shutdown event? Any solution should allow the user to abort the shutdown if user selects say ""Cancel"". The normal Swing window closing hook doesn't work nor does adding a shutdown hook. On testing the methods of WindowListener (windowClosingwindowClosed etc) do not get called. The answer I have accepted requires the use of platform specific code (JNI to register for WM_QUERYENDSESSION ). Isn't this a bug on Swing? See http://forums.sun.com/thread.jspa?threadID=481807&messageID=2246870 Are you using the shutdown hook from java.lang.runtime ? Look for signal handling in java. when Windows closes it will send a signal to the application asking it to terminate most likely a sigterm see here for more about this (I am not the owner of the website)  how-do-i-get-my-java-application-to-shutdown-nicely-in-windows That might be of help  Write some JNI code to WM_QUERYENDSESSION message. You can get details for this from the MSDN documentation or by googling it. If you don't want to write too much C++ code to do this I can recommend the JNA library click here. Which gives you some nice Java abstractions for C code.  The above seems to be the better answer. I can't find any good information on detecting window shutdown events. I guess the best possible method would be to detect weather your application is trying to close using a window closing event or the like then ask the question. http://www.javalobby.org/java/forums/t17933"
179,A,"Java Swing: Libraries Tools Layout Managers What libraries/tools do you have in your Java Swing Tool set? XUL Layout Managers Packagers/Installers Books etc..... Not really a tool but I've been working on annotating important things in the JavaDocs for Swing (and several other APIs). Too many methods contain surprises like ""don't call this if you want a refresh call X instead"". I use a tool that I built for my PhD to access that kind of info (it highlights calls in the source code to methods that have those sort of things). IMHO the JavaDocs for swing are difficult to use because they combine information that is meant for people using an object and people subclassing existing classes. Sounds interesting. Anything that you are going to make available to the rest of us? Right now it only supports Eclipse. I've still got to do some cleanups and update the annotations database before I am presenting it at Eclipsecon at the end of March but if you want to try it out visit http://emoose.cs.cmu.edu or contact me and I'll gladly help you with the install.  Here is what I use: ""Framework"": Swing Application Framework does not do much but does it quite well (if you use it you may want to take a look at one presentation I did last year) JTables: handling tables is often a pain (lots of boilerplate code...); I generally use GlazedLists which simplifies the work a lot (and brings many improvements) EventBus: this was mentioned in another answer LayoutManager: DesignGridLayout (shameless plug this is one of my open source projects) Look & Feel: Substance is very good in some situations where you don't want to use the system look and feel Docking library: if your application needs docking you will find MyDoggy useful (and it has a well-written API). One problem it has is a bad integration with some third-party look and feels (like Substance) All these libraries above are open source. In addition to that I have my own set of utility classes that among other things help integrating the GUI with a Dependency Injection library: I have a set of utilities for HiveMind container (for the few developers that know it and still use it) and another -in preparation soon open sourced- for Guice. I have read no specific book about Swing development but I have used Swing for about 10 years now (not continuously however). Hence I have no recommendation in terms of books (unfortunately because I admit that this is one weak point of Swing). ""Filthy Rich Clients"" book is useful only if: you know Swing well you want to build ""fancy"" GUIs  Netbeans with the GUI WYSIWYG editor. It makes creating Java 6 Swing forms very easy. I subclass the forms to add functionality to ensure continued tool support. I've also used SwingX for widgets like date pickers and collapsible panels. Plus there's always SwingWorker in the JRE for running background jobs that update the UI.  Spring Rich Client and JGoodies are the base of my team's GUI applications; Spring remoting for connecting to server and Java Web Start for deployement.  For books take a look at the answers to Swing Programming Books.  I pretty much only use GridBagLayout for production code unless the GUI is so simple that I can get away with a BorderLayout. I sometimes look into other LayoutManagers but never really found the need to change since GridBagLayout can do pretty much anything I need. The installer I use for my own stuff is izPack and works for me so far. It has been a long time since I really read any Swing books now. Obviously the Java Swing one from O'Reilly is the de facto bible :) When it comes to books on design I do have a lot of recommendations but that might be off topic? Totally Gridbag - http://madbean.com/anim/totallygridbag/ @Ran Biron that is the best comment I have seen on SO thus far. That is so reminiscent of my GridBagLayout experiences. At one point I even wrote a GridBagLayout wrapper for most of the stuff I do but it's hard to really grok. +1 for this answer so more people see this comment :)  Two useful Swing related libraries: The Swing Application Framework is a light framework that simplifies the creation and maintaining of small- to medium-sized Java desktop applications. The framework consists of a Java class library that supports constructs for things such as the following: Remembering state between sessions. Easier managing of actions including running as background tasks and specifying blocking behavior. Enhanced resource management including resource injection for bean properties. Here's an article about it. It's been integrated with Netbeans 6.0 and later. EventBus is a Swing-oriented publisher-subscriber framework that I've found very useful for updating GUIs."
180,A,"Arranging Nodes in A JTree I have a JTree in which the user can drag/drop or re-arrange nodes upon saving I have to re-arrange the nodes such that File type nodes must appear before Folder type nodes. I don't need to sort the files/folders name. User Tree:  -FolderA +FFA1 -FA1 -FA2 -FolderB -FB1 -File1 -File2 +FolderC -File3 Resulting Tree: -File1 -File2 -File3 -FolderA -FA1 -FA2 +FAF1 -FolderB -FB1 +FolderC I have the following codes below it worked but I don't know if it is the proper way or the good practice perhaps. Can you suggest which of the 2 solutions is better or can you suggest other way. Thanks you very much. Solution 1: private void arrange(DefaultMutableTreeNode parent){ DefaultMutableTreeNode sorted = new DefaultMutableTreeNode(); List<DefaultMutableTreeNode> files = new ArrayList<DefaultMutableTreeNode>(); List<DefaultMutableTreeNode> folders = new ArrayList<DefaultMutableTreeNode>(); for (int i = 0; i < parent.getChildCount(); i++){ DefaultMutableTreeNode node = (DefaultMutableTreeNode) parent.getChildAt(i); int type = ((BusinessObject) node.getUserObject()).getType(); if (type == BusinessObject.FILE) files.add(node); else{ arrange(node); folders.add(node); } } for (int i = 0; i < files.size(); i++) sorted.add((DefaultMutableTreeNode) files.get(i)); for (int i = 0; i < folders.size(); i++) sorted.add((DefaultMutableTreeNode) folders.get(i)); while (sorted.getChildCount() > 0) parent.add((DefaultMutableTreeNode) sorted.getChildAt(0)); sorted = null; files = null; folders = null; } Solution 2: private void arrange(DefaultMutableTreeNode parent){ DefaultMutableTreeNode sorted = new DefaultMutableTreeNode(); List<DefaultMutableTreeNode> nodes = new ArrayList<DefaultMutableTreeNode>(); for (int i = 0; i < parent.getChildCount(); i++){ DefaultMutableTreeNode node = (DefaultMutableTreeNode) parent.getChildAt(i); int type = ((BusinessObject) node.getUserObject()).getType(); if (type == BusinessObject.FILE) nodes.add(node); } for (int i = 0; i < parent.getChildCount(); i++){ DefaultMutableTreeNode node = (DefaultMutableTreeNode) parent.getChildAt(i); int type = ((BusinessObject) node.getUserObject()).getType(); if (type == BusinessObject.FOLDER){ arrange(node); nodes.add(node); } } for (int i = 0; i < nodes.size(); i++) sorted.add((DefaultMutableTreeNode) nodes.get(i)); while (sorted.getChildCount() > 0) parent.add((DefaultMutableTreeNode) sorted.getChildAt(0)); sorted = null; nodes = null; } I think both are fine solutions. It was pretty easy to tell what they were doing: pull out the files pull out the folders throw them back in the tree in the right order. Also the recursive call was straight-forward and intuitive. Pick whichever seems the most natural to you. The second seems more like the way I would do it but that's just me and there's not much difference. Are you using Java 5 or 6? If so use for-each loops. Also you don't have to clear that values of your private variables at the end of the method. They go away anyhow when the method returns. Thanks Jeremy I am also thinking of #2 is better because there is only one instance of the list is created.  It is verry simple : Put all Leafs of a folder in to an array (named hear o_people)  DefaultMutableTreeNode all_node = new DefaultMutableTreeNode(""Root folder""); DefaultMutableTreeNode one_node; Vector sorted_people=new Vector(); // a simple algorithm of sorting array for (int i=0;i&lt;o_people.length-1;i++){ for (int j=i+1;j&lt;o_people.length;j++){ if(o_people[j].toString().compareTo (o_people[i].toString())<0) { String permut=o_people[i].toString(); o_people[i]=o_people[j]; o_people[j]=permut; } } sorted_people.add(o_people[i]); //in my case the leaf is a JChechbox but you can put a String one_node = new DefaultMutableTreeNode ( new JCheckBox(o_people[i].toString() boolien)); all_node.add(one_node); } tree_model.setRoot(all_node); Simple !!! isn't it ? a general rule is: don't re-invent the wheel :-) See the other answers for available api on Collections.  I modified Mike's code example a bit to account for duplicate names and sorting folders before files. Otherwise it worked like a dream. Thanks Mike. public static void sortTreeNode(DefaultMutableTreeNode node) { List<DefaultMutableTreeNode> children = Collections.list(node.children()); List<String> sortFileNames = new ArrayList<>(); List<String> sortFolderNames = new ArrayList<>(); List<String> sortNames = new ArrayList<>(); List<String> origNames = new ArrayList<>(); DefaultMutableTreeNode temParent = new DefaultMutableTreeNode(); for (int x = 0; x < children.size(); x++) { DefaultMutableTreeNode child = children.get(x); temParent.insert(child 0); if (!child.isLeaf()) { sortFolderNames.add(ViewMethods.getStringForNode(child).toUpperCase() + x); origNames.add(ViewMethods.getStringForNode(child).toUpperCase() + x); if (child.getChildCount() > 0) { sortTreeNode(child); } } else { sortFileNames.add(ViewMethods.getStringForNode(child).toUpperCase() + x); origNames.add(ViewMethods.getStringForNode(child).toUpperCase() + x); } } Collections.sort(sortFolderNames); Collections.sort(sortFileNames); sortNames.addAll(sortFolderNames); sortNames.addAll(sortFileNames); for (String name : sortNames) { // find the original location to get from children arrayList int indx = origNames.indexOf(name); node.insert(children.get(indx) node.getChildCount()); } }  this actually works as i use it in my application. My nodes are all defaultmutabletreenodes with no changes. The node to be sorted is passed in and changed. It makes an arraylist of the child nodes. Then two arraylists of the text of the nodes which one gets sorted. The other is used to find the nodes in the arralylist. The nodes are all moved off of the initial node then added back in from the arraylist. Works a charm may be overkill to use an arraylist but I like them. private void sortchildren(DefaultMutableTreeNode node) { ArrayList children = Collections.list(node.children()); // for getting original location ArrayList<String> orgCnames = new ArrayList<String>(); // new location ArrayList<String> cNames = new ArrayList<String>(); //move the child to here so we can move them back DefaultMutableTreeNode temParent = new DefaultMutableTreeNode(); for(Object child:children) { DefaultMutableTreeNode ch = (DefaultMutableTreeNode)child; temParent.insert(ch0); cNames.add(ch.toString().toUpperCase()); orgCnames.add(ch.toString().toUpperCase()); } Collections.sort(cNames); for(String name:cNames) { // find the original location to get from children arrayList int indx = orgCnames.indexOf(name); node.insert((DefaultMutableTreeNode)children.get(indx)node.getChildCount()); } }"
181,A,"Hibernate + Swing What's the best practice? A single session for the whole app A session per window A session per thread and detaching everything at random Something else? I've googled around and there's no consensus. Everyone says something and then takes it back. I find lugging a session around stupid... So what's the deal? Did you abandon the question ? Mostly yes. <> 3 years have passed and you didn't get appropriate answer. Me neither. Sometimes I have a feel that even guys from JBoss don't know how to use their own product. I just use one session per event. It really depends on the app but really you only want a session to last as long as the logical transaction on the database. I'm pretty sure sessions aren't thread-safe so you may want to look at localising the behaviour to a single class.  Best Practice (your mileage may vary): The most common pattern in a multi-user client/server application is session-per-request. In this model a request from the client is send to the server (where the Hibernate persistence layer runs) a new Hibernate Session is opened and all database operations are executed in this unit of work. Once the work has been completed (and the response for the client has been prepared) the session is flushed and closed. You would also use a single database transaction to serve the clients request starting and committing it when you open and close the Session. The relationship between the two is one-to-one and this model is a perfect fit for many applications. see: http://docs.jboss.org/hibernate/stable/core/reference/en/html_single/#transactions-basics-uow  When closing the session be aware that this causes your objects to become detached and will involve some additional overhead to reattach the objects to the session in order to save or update them with the database. That being said I agree with you that lugging a session around doesn't make much sense and you should be releasing the session at the end of each transaction. I would lead toward having a pool of sessions from which each thread can access a session as it needs it and release it back to the pool when it is done. You can use Spring to help you manage the sessions for this.  Since session creation is expensive in Oracle and I mostly use Oracle as RDBMS I'd go for ""one single session for the whole application"". ""One session per event handling"" seems ridiculous in the context of a GUI application. There are reasons to do that on the web but those reasons do usualy not apply for a GUI program. Would you care to elaborate why session creation is so expensive in Oracle? I use Hibernate with Oracle and haven't noticed any major performance problems but I don't really do anything too heavy and our DB is very fast so it might just be hiding any problems. Hibernate sessions are quite cheap using one session per application will lead to memory leakage :(  Maybe a session per event handling is the right approach. In web applications we usually create one session per request (using all those OpenSessionInView stuff and etc). If we think through every request in web application is a different interaction in the application and in a Swing application every fired event is a different interaction in the application. If we apply the same principles we apply in web applications in Swing applications then we should create a session per event handling. But we must determinate if using Hibernate is the best option... The database you are accessing is a local or a remote database? Do other applications share the same database? You should consider creating an EJB\HTTP backend instead having your Swing applications directly accessing the database. Using Hibernate suggest that you have a not-so-simple database so I think you should consider create a EJB\HTTP backend.  If you create a threadpool then you don't pay much of a price for making connections per transaction or per request depending on what you are doing. I tend to divide my code at the lower level into a class that deals with a table or some other object and then above that will be a controller which knows how to talk to multiple daos. For example to place a book order you check if it is in stock then you process payment then decrement the item and place the order. These would be a transaction spanning multiple daos so they should use the same session. But using one connection would be problematic as you are tying up a connection for a while and you may lose the connection while assuming it still exists. The same problem would be compounded if one request per screen or page. You could look at some best practices from Spring users as Hibernate seems to be pretty popular with that framework.  What you want to solve is synchronizing two models: You have the in-memory model and the database model. Just propagating each change into the database as it happens is too expensive. Also you want to be able to handle errors (i.e. roll back your model to a consistent state). To be able to do this you must have a way to say ""now it's consistent"". The current solution is to start a transaction in the database when the model is known to be consistent (usually before you start making changes) and then do all the changes in your in-memory mode map them somehow to the database update the database and then commit the transaction. While this sounds simple OO programming actively gets in the way. We hide model operations deep in the call structure we try really hard for users of a piece of code not to know what the code actually does. In a perfect world your development tools should unroll all the code an operation needs into a single method/function wrap that in a transaction and be done with it. This doesn't work. Instead we decided to introduce a global variable: the session. Which is bad and we're ashamed of it so we try to hide this fact but session is global - per operation. Now you need a way to attach the session to the operation. You can say ""all code which gets executed in the current thread is one operation"". If you do the natural solution is to make the session global per thread. Or you have some token. Then you will attach the session to the token and pass that around. But the fundamental problem is and always was: How to attach a session to a single operation on the model. The hard parts are to know when an operation starts when it ends and how to handle errors. For web applications using a request is the natural way to define an operation: Everything that happens during a request is considered a single step. The app doesn't really keep the model in memory; everything is forgotten at the end of the request and loaded again from the database when the next request comes in. Slow but manageable. Desktop application are a completely different kind of beast. They usually keep the whole model in memory all the time. We don't persist changes unless the user asks for it (when she ""saves"" her work) because that would be too slow and since there is nothing like a request there is no simple automatic way to define an ""operation"". The idea to attach an operation to an event is good. Only in desktop apps you can have multiple threads which communicate with events and now you need a way to mark all events as ""they belong to the operation started with event X received long ago"". Events are usually small immutable pieces of data so you can't attach your session to them. But you need some kind of token to mark all events which belong together. Which is why most desktop apps either work with a server (which again works like a web app) and without a big in-memory model or they don't use a database but save their model in a custom format (think Office). I must say that is an excellent definition of the problem. But not a solution (although a definition of the problem does help obtain a solution). Thanks. Since computers are still so slow today that we have to care about performance there is not yet a general solution.  I prefer session per model update. It helps avoid long-lasting sessions and also it helps minimize total number of session creations.  I can't really see any compelling reason why you would want to things differently in an app with a Swing front-end then a web front-end. In the latter case usually a Session is created for each request though in many cases the actual creation of the Session is handled transparently (e.g. by Spring). Assuming your Swing app implements the MVC pattern then why not just create the Session at the beginning of each controller method and close it at the end. If your app is multi-threaded you could use a ThreadLocal variable to easily scope each Session to a particular thread. This is almost exactly analogous to what happens in a Servlet container (i.e. a web app).  I've used Hibernate in a enterprise size Rich Internet Application which by technique resembles a lot of a hibernate + swing combination. I spent quite a lot of time investigating the different design patterns for using hibernate in a 3-tier application. Hibernate isn't exactly meant for this kind of application so there wasn't that much information available on this subject. I tried a different design patterns but most of them lead to memory leakage problems with attaching and de-attaching objects in session(s) problems with transactions etc etc. The final solution was to use a session-per-request pattern. Basically at every request you make from the UI logic to the business logic you create a new hibernate session. Your business logic then performs whatever you want it to do and right before ending the business logic execution you flush and close the open session. This way there won't be any memory leakage objects will be correctly attached and de-attached from sessions. This isn't a perfect solution as you will encounter some problems such as with lazy loading and transactions. I'll briefly explain those problems and how to solve them. Transactions Because you terminate the hibernate session after each request you cannot have transactions which live beyond one request. This can be somewhat problematic for example let's say you want to store 10 objects within the same transaction. You cannot make a save request separately for each object as the transaction is terminated. Therefore you need to make a method which takes as input a list of objects and saves all those objects within the same transaction. If the transaction fails then you rollback all the objects. Lazy loading Your objects' lazy loading will not work because they most likely not attached to a session (that is if you lazy load something once the session has been terminated). For the lazy loading to work you need to reattach the objects to the session. I came up with a workaround for this as well which is a bit tricky when creating new entity objects but works nicely in everyday development. The idea is to have duplicated getters and setters for a field which is lazy loaded. One pair is private and the other one is public. The idea is that the private getter/setter pair is what hibernate uses internally and the public getters and setter are transient and used by the developer. So what happens is that when the developer calls on the public getter the getter checks if the field has already been loaded if not then attach the object to a session load the field and close the session. Voilá everything works and the developer never noticed anything. Here's a small code to give you the idea:  @Entity public class Foo { List<Bar> bars = new ArrayList<Bar>(); @OneToMany private List<Bar> getBarsInternal() { return bars; } private void setBarsInternal(List<Bar> bars) { this.bars = bars; } @Transient public List<Bar> getBars() { // pseudo code if(check if bar is still lazy loaded) { // the field is still lazy loaded // attach the field to a session an initialize it // once the field is initialized it can be returned } return getBarsInternal(); } public void setBars(List<Bar> bars) { setBarsInternal(bars); } }  I use a session per series of database actions that can be wrapped in a transaction this includes passing Collections of objects whenever possible at a go but the issue for closed session for lazy loaded fields / properties kept cropping up. My Applications are hybrid of Swing and JavaFX and this is how I fixed them : My first approach was not to have any Lazy Loading in use but this turned out to be nightmare for some of the Entities with more complicated Object Graphs. The Table View control from JavaFX plays an important role in my apps I think the swing JTable sucks as compared to the TableView on JavaFX. Now when I load a JFrame or an JInternalFrame or a JDialog I preload the most recent 'worked on' entities all their children are Loaded with Lazy Loading no perfomance hit I bind the data to the TableView control with the primary core eager loaded fields being visible. A user is required to select a record from the TableView Grid to work on when they do that I fetch the instance of the entity afresh since I have a handle to its Idafter the object is fetched then the .size() method is invoked for all the children collections that are loaded lazily. This forces Hibernate to load the lazy fields / properties. I can now do whatever I want with a particular instance of an Object and all the children are populated. I think this approach improves performance two-fold. When fetching List dataits fast. When you fetch an Object with an Id its pin point and since the children are all lazy loaded means the selects are also light and more compact.  We started out with one-session-per-app  I've listed the the motivations and issues below As the name suggests the whole user interaction with the app would consist of one single long living session and all ( main) the communication with the database would be through this session. Your “unit of work” would now encompass all the user interaction with the application …meaning your “application transaction ” is the whole life of the application. Why ? 1. The Biggest driver for doing this seems to be ability to use hibernate’s lazyintialization capabilities  for example a dialog displaying Book information can dynamically populate author information when the drop down combo box is selected. Since all the modifications to underlying data is done through this single long running session  you can explicitly demarcate transaction boundaries at convenient locations . Take advantage of session cache without having to load/unload object each time from the DB. How : If you perform all the major work in GUI thread ( almost all java GUI systems are single event threaded you can use tweak thread local pattern to get the main session from a GUI thread . Issues: Above advantages might paint a rosy picture but using long running sessions without much forethought might cause some serious problems that might not really be apparent until the application get big or complex enough . Your app might suffer from ” bloated session cache ” phenomenon..with each your application getting slower and slower with as the session cache grows bigger and bigger as hibernate has to go through all the objects in the session cache for every query ( with huge session this might slow you down If the session gets big flushing it will take more and more time even if there are no changes). Essentially advantage no 3 above can become a disadvantage ( due to hibernates transactional write-behind ) if session in allowed to grow big. A workaround that might be useful in some cases might be to use query.setReadOnly(true)  session.setReadOnly() for queries/ entities which load up readonly objects into the session. Manual “eviction” to keep session consistent You might have use sql queries for various reasons in various places in the app to perform updates/deletes in such case you have do manual evicts in order to keep session from being corrupted. Transactional write-behind might come in your way ( depending on how you manage long running session ) if you plan to access data from “other sessions” . User might experience GUI freezing when hibernate is doing its lazyloading magic. Classic lazy loading n+1 query problems ( see links below) Stale data problems .if the data is updated by some background job or thread not using the main session ..your main session will not be up to date with the changes. I still think if you have a consistent eviction strategy  for example evicting the order graph when order window is closed this might be a good startegy . We switched to session-per-window  which had its own issues like managing inter window communication ( for example changes in prices window could make order window data stale ). Might want to Look at Christian Bauer's swing example which uses this approach. I guess  as with everything else  there is no single right way to do it how you manage the session depends on how the application is laid out  for example  if each window can be an independent unit of work  which doesnt interfere with other units of work then session per window might be a better approach .  What you really want to avoid is the session-per-operation scenario where for every single database operation a new Hibernate session is created and closed. EDIT: Ignore my earlier nonsense about one session for the lifetime of the app it's entirely possible (and probably the most efficient way) of doing this. Just make sure to demarcate your transactions appropriately - be it declaratively using something like Spring @Transaction or programmatically. I don't see how having one session for the lifetime of the program could keep you from doing a commit whenever a request has been processed; so why should there be a big data loss? You're right actually that shouldn't stop you from using one session."
182,A,"Creating a JFrame from another JFrames constructor I have 3 objects that extend JFrame let's call them FrameA FrameB FrameC. FrameA is my main application window. From FrameA's constructor if the application is not registered i create FrameB and FrameC. They are just popup's that indicate trial period. 2 times out of 10 application freezes and never shows the B anc C frame and frame A becomes unresponsive. I was wondering if there is a side effect of creating frames in this fashion? Your going to want to use a JDialog. There made to do this exact thing.  You should think about your logic. Creation of new frames in constructor of another frame sounds strange. If you doing it in the constructor - that means that first frame is not shown yet. Why don't you show you frame B and C outside of frame A constructor - logically it seems to be the same. But then depending on your conditions you can create Frame A and set it visible.  The symptoms you describe sounds like something's locking up the event thread - this may or may not have anything to do with how you're launching the frames - you'll want to run in a debugger and when it starts exhibiting the symptoms check on the state of the event thread. (Though I would agree with everyone else in the thread that you should pull the frame launching logic to some other place - however - there's nothing ""unsafe"" about calling frame constructors from another frame constructor - they're no different from any other constructor. It may be bad design - but it shouldn't lock up the event thread.)  That's because you are not letting FrameA finish it's construction process you're interrupting it and then in the same thread displaying those two other frames. I would suggest to change your strategy and use a factory method and probably in conjunction with SwingUtilities.invokeLater method. Let say you have something like:  public static void main( String [] args ) { JFrame a = new FrameA(); // Has both display logic and trial ""pop up"" logic } Change it for:  public static void main( String [] args ) { JKFrame a = FrameA.createFrame(); // the same but splited like the following code } class FrameA extends JFrame { // new method public static JFrame createFrame() { return new FrameA(); } } Nothing changed you just added the factory method later you can:  public static JFrame createFrame() { if( thatSpecialLogicSaysItIsTrialAndShouldPopUp() ) { JFrame b = new FrameB(); b.setVisible( true ); JFrame c = new FrameC(); c.setVisible( true ); return new FrameA(); } else { return new FrameA(); } } What you will be doing in the second code is separate the logic from the class constructor and put it in the factory method. That way if thatSpecialLogicSaysItIsTrialAndShouldPopUp returns true you display B and C You can also as described use a JDialog there but pretty much the problems will be gone when you separate the responsabilities."
183,A,"Display Hibernate Query in JTable I'm seeking an efficient way to display an SQL table queried via Hibernate in a JTable.  Query q = em.createNamedQuery(""Files.findAll""); List rl = q.getResultList(); It would probably be preferable to use the List returned by that (In this case that would make a list of Files objects (where Files is an internal class not java.io.File)) but I won't be picky as long as it is neat. I have one answer I worked up below but that doesn't work very well. I'd going to end up having to write a TableModel for it if I keep going down this path. Well here's what I ended up doing for now: //client-side class public String[][] getFilesArray() { List<Files> files = remote.getFiles(); String[][] x = new String[files.size()][]; for (int i = 0; i < files.size(); i++) { x[i] = files.get(i).getStringArray(); } return x; } //DAO class public String[] getStringArray() { return new String[] { fileid.toString() name DateFormat.getInstance().format(timestamp) status hash }; } public static String[] getColumnNames() { return new String[] { ""Id"" ""Name"" ""Timestamp"" ""Status"" ""Hash"" }; }  JIDE Data Grids provides a HibernateTableModel that could provide the functionality you are looking for if you are happy to buy a third party library.  Did you take a look at the org.hibernate.metadata classes. These provide you metadata information about classes and collections. You can also make calls to SessionFactory.getClassMetadata(Class) to get the metadata information for the class in question.  In the answer below I expect that your HQL returns not a list of objects but a list of arrays of necessary properties that you wish to show in JTable (i.e. that you're using so calling report queries). In that case you can write simple TableModelAdapter that will be used as a TableModel for JTable. public class TableModelAdapter extends AbstractTableModel{ private List<Object[]> list; public TableModelAdapter(List<Object[]> aList){ list = aList; } public int getColumnCount() { if (list == null){ return 0; } if (list.size() == 0){ return 0; } return list.get(0).length; } public int getRowCount() { if (list == null){ return 0; } return list.size(); } public Object getValueAt(int row int column) { if (list == null){ return null; } return list.get(row)[column]; } } If you have to return list of objects we can change the example and path throw properties via reflection instead of array. Briefly everything right now is returned as an object. Having strongly avoided reflection until now I ask how you would do that. The secret is in Hibernate report query. It works only with HQL and construct for you not a whole object but an array of requested properties. And if you ask a .list() of them you'll get List which was used in an example.  There are a lots and lots of ways to do this but are you looking for something that would automatically figure out the columns or what? If you used the java reflection pieces you can read the Hibernate annotations to find out the column names and populate the JTable that way... Otherwise this is just a straight forward piece of code that a. creates a JTable and TableModel and b. populates the display with the database data. EDIT: I think this example may cover walking the annotation tree and processing them. The specifics are the AnnotationProcessorFactory part iirc. EDIT 2: I also found this library which is built to help lookup annotations at runtime. One of their examples is looking up Entity classes in hibernate to build a resource list - I believe you could do something similar to find classes that that implement @column or @basic etc. This should allow you via reflection to pretty easily do it but as I said java's standard library already provides the ability to walk the annotation tree to find out the column names - at which point creating the JTable from that should be very easy to do in a programmatic way. EDIT 3: This code is all that and a bag of chips! From here you should easily be able to walk the list of maps and pull out all of the info you want the value its class type the field name for the column headers... Note that it isn't particularly safe.. I've dropped out all of the error code I did while testing to keep it short... List<Map> createTable(List queryResults) { List<Map> r = new LinkedList<Map>(); for (Object o : queryResults) { r.add(entityMap(o)); } return r; } Map entityMap(Object obj) throws Throwable { Map m = new HashMap(); for (Field field : getFields(obj.getClass())) { Method method = getMethod(field); Object value = method.invoke(obj); m.put(field value); } return m; } List<Field> getFields(Class<?> clazz) { List<Field> fields = new LinkedList<Field>(); for (Field field : clazz.getDeclaredFields()) { Column col = field.getAnnotation(Column.class); if (col != null) fields.add(field); } return fields; } Method getMethod(Field field) throws NoSuchMethodException { Class<?> clazz = field.getDeclaringClass(); String name = ""get"" + uppercase(field.getName()); Method method = clazz.getMethod(name); return method; } String uppercase(String str) { return str.substring(01).toUpperCase() + str.substring(1); } It'd be nice to have it automatically figure out the columns. I did note that I can do List.toArray() and then attach toArray() to the Files class as well. Seems messy allocation-wise. A reflection setup may be wise."
184,A,"Can groovy's swingbuilder get more than one look and feel in a Java swing application? Via this question it would seem that normally you can't mix-and-match look and feels in the same swing app. However we've been using groovy's swingbuilder to handle all of our GUI code and groovy seems to do enough black magic that this seemed in the Realms of the Possible. Can swingbuilder set the LaF at say the Frame level? (Specifically the main app opens a specific sub-utility in it's own frame rather than a dialog box. This child frame and all of its children are what I'd like to have in a different LaF from the main app frame.) For the record the answer is ""no."""
185,A,"What technology to use to write systray front-end to webapp? we have an internal webapplication running on tomcat build on Spring. The webapplication front-end is build with Flex. I would like to create a cross-platform systray application that allows to go the home page of the application and displays alerts when certain things happen in the server. What would you think is the best technology for: The systray itself? Java Swing? Communication between the server and the systray? Webservice? RSS feed? Spring remoting? JMX Notifications? regards Wim What would be the target version of the JRE ? v.6 has extensive systray support. I would have the systray app poll a status page via scraping. (cause it is simple and it would work) :D I would go for FreePascal. It compiles natively to windows / mac / linux and because of this you do not depend on any other framework (.net java air) to be installed. Just one single executable and that's it. Well rather ""just one single executable for every single platform you want to support"" and probably one single set of source as well as the native APIs for systray icons are everything but standardized.  With Adobe AIR and BlazeDS or LCDS you can easily build this type of application. Thanks for that seems interesting. This is the link if people are wondering: http://merapiproject.net/ Yes but I forgot an important requirement. The systray should also be able to start an arbitrary application. I have read that you cannot start an application from AIR because of sandbox restrictions. Maybe something like Merapi will help with that?  I agree with James: if you have an investment and know-how in Flex it makes sense to extend that with Air. As for the payload - if you simply need to 'pop up' notifications from time to time RSS is the way to go. Otherwise roll you own XML REST-like service since it's easy to set up and will give you flexibility in the long run. Yes what do you mean by XML REST like service? Are there any things in Spring or any other library that would help with that? Thanks for the input. I am hoping to still get some more answers on the communication between server and systray part Would any additions to my answer help? Additional info about your needs would help.  If you want to stay with Java you have two options: Use Swing/AWT. Make sure you are using Java 6 and above (you can install it with your application) since it has support for system tray (from the API): TrayIcon trayIcon = null; if (SystemTray.isSupported()) { // get the SystemTray instance SystemTray tray = SystemTray.getSystemTray(); // load an image Image image = Toolkit.getDefaultToolkit.getImage(""""); // create a action listener to listen for default action executed on // the tray icon ActionListener listener = new ActionListener() { public void actionPerformed(ActionEvent e) { // execute default action of the application // ... } }; // create a popup menu PopupMenu popup = new PopupMenu(); // create menu item for the default action MenuItem defaultItem = new MenuItem(""""); defaultItem.addActionListener(listener); popup.add(defaultItem); // / ... add other items // construct a TrayIcon trayIcon = new TrayIcon(image ""Tray Demo"" popup); // set the TrayIcon properties trayIcon.addActionListener(listener); // ... // add the tray image try { tray.add(trayIcon); } catch (AWTException e) { System.err.println(e); } // ... } else { // disable tray option in your application or // perform other actions // ... } // ... // some time later // the application state has changed - update the image if (trayIcon != null) { trayIcon.setImage(updatedImage); } // ... Use SWT/JFace. Here is an example (taken from here): public static void main(String[] args) { Display display = new Display(); Shell shell = new Shell(display); Image image = new Image(display 16 16); final Tray tray = display.getSystemTray(); if (tray == null) { System.out.println(""The system tray is not available""); } else { final TrayItem item = new TrayItem(tray SWT.NONE); item.setToolTipText(""SWT TrayItem""); item.addListener(SWT.Show new Listener() { public void handleEvent(Event event) { System.out.println(""show""); } }); item.addListener(SWT.Hide new Listener() { public void handleEvent(Event event) { System.out.println(""hide""); } }); item.addListener(SWT.Selection new Listener() { public void handleEvent(Event event) { System.out.println(""selection""); } }); item.addListener(SWT.DefaultSelection new Listener() { public void handleEvent(Event event) { System.out.println(""default selection""); } }); final Menu menu = new Menu(shell SWT.POP_UP); for (int i = 0; i < 8; i++) { MenuItem mi = new MenuItem(menu SWT.PUSH); mi.setText(""Item"" + i); mi.addListener(SWT.Selection new Listener() { public void handleEvent(Event event) { System.out.println(""selection "" + event.widget); } }); if (i == 0) menu.setDefaultItem(mi); } item.addListener(SWT.MenuDetect new Listener() { public void handleEvent(Event event) { menu.setVisible(true); } }); item.setImage(image); } shell.setBounds(50 50 300 200); shell.open(); while (!shell.isDisposed()) { if (!display.readAndDispatch()) display.sleep(); } image.dispose(); display.dispose(); } I have extensive Swing experience but no SWT experience. Would it make sense to move to SWT for this? From a technological perspective no. As far as I understand all you want is a small monitoring application for your server. I don't believe that learning new technology just for this will be the best use of your time (unless you want to use it as an educational project)."
186,A,Java default form action or button In HTML forms if you press 'enter' while in a text field the form will generally submit. I'm implementing a search panel in Java Swing and I want to include the same functionality as I think users will be expecting this. I know that it's possible to use setAction on a JTextField to accomplish this however I was wondering if there was an easier / better way than setting the action on every field. I've tried looking around but there doesn't seem to be a standard solution to this problem that I can find! Edit: There is getRootPane().setDefaultButton(...) but that only seems to set the default button for a frame. That wouldn't work for me as I'm using a tabbed pane each panel of which has a form on it! afaik the fact that enter submits a html-form is more a feature of the browser than of html. i am afraid there is no other solution in java than to add a keylistener to the jtextfield I think an ActionListener would be better than a KeyListener - the action listener fires on enter in a textfield. We have the same problem in one of our applications. You can add a Key Listener to the JTextField's editor: txtField.getEditor().getEditorComponent().addKeyListener(new java.awt.event.KeyAdapter() { @Override public void keyTyped(final KeyEvent e) { super.keyTyped(e); // Check if the user pressed Enter if (e.getKeyChar() == '\n') { // Action here/button press here } } }); the dude abides. -1 - You would not use a KeyListener to listen for the Enter key on a JTextField. You either use an ActionListener or the setAction method.  IIRC adding an ActionListener to the JTextField will provide the functionality you want quick google later... Yep - and this appears to be the recommended way by Sun as shown in the text field trail...  You may have to listen for the tab switch and reset the default button for the current tab using getRootPane().setDefaultButton(...). And you would use a ChangeListener to listen for the tab switch.
187,A,"Java swing. How to wait for other Jframes In a JFrame when I click on 'login' I pop up another Jframe which is the login window. How do I make my main Jframe wait for my login Jframe to exit before doing anything else? Can we presume there is a reason you aren't putting the login into a modal dialog? Use JModalFrame instead of JFrame. JModalFrame isn't part of the standard Swing API. You can find it in http://jmodalwindow.java.net/  I agree that a modal dialog would be the best option here but if I were to answer this question in it's more general form say: How do I make one JFrame wait for another JFrame? I would say the easiest way to acheive this is by registering and firing event listeners. In your ""child"" frame register the ""main"" frame as an event listener. In your ""main"" frame implement your choice of listener e.g. ActionListener in the method called by the listener e.g. actionPerformed code the logic that handles what happens upon each of the actions it can respond to in the ""child"" frame. One can easily implement this to a ny number of situations including the login scenario described in the question.  Just use a modal dialog in stead of a frame that way you cannot do anything else until it'is closed see http://mindprod.com/jgloss/modal.html for explanation and see http://www.java2s.com/Tutorial/Java/0240%5F%5FSwing/ASimpleModalDialog.htm for code example If you insist on using a JFrame you could use a workaround by cover the other frame by a glassframe.. Not too a nice solution I admit.. note that if you use a JModal you must call its constructor with ""true"" in order for it to block the parent from being active until it closes like new MyClass(this true) I would advise the same but nonetheless could you suggest how could be ANY JFrame made modal? I come from Delphi world and there one would call myForm.showModal; instead of just myForm.show; Is there any simple way to achieve this effect? Not that I know of but my swing is very rusty it has been years so don't trust me on this one Modality is only available for classes that subclass java.awt.Dialog (like javax.swing.JDialog) classes that subclass just java.awt.Window can't be model. @Andreas_D change your comment into an answer and I would give you an upvote"
188,A,JTable column spanning I am trying to make a JTable that has column spans available. Specifically I am looking to nest a JTable inside another JTable and when the user clicks to view the nested table it should expand to push down the rows below and fill the empty space. This is similar to what you see in MS Access where you can nest tables and clicking the expand button on a row will show you the corresponding entries in the nested table. If someone knows of a way to perform a column span with JTable can you please point me in the right direction? Or if you know of an alternative way to do this I am open to suggestions. The application is being built with Swing. Elements in the table both high level and low level have to be editable in any solution. Using nested JTables this won't be a problem and any other solution would have to take this into consideration as well. You need to write your own TableUI for the master table. It can also helpful to use your own TableModel to save additional data like if a row is expanded. But this is optional. I write an equals TableUI that expand a row and show an text editor. In the TableUI you need to change the the row hight dynamically with table.setRowHeight(height). Also it is necessary to copy some stuff from the BaseTableUI because you can not access the private stuff. I still don't see how you would go about telling your JTable to merge columns in a given row. I know how to insert a new row into the table but how do I tell the table to merge those cells?  Code-Guru Example: http://www.codeguru.com/java/articles/125.shtml Java-6 updated sources: http://qoofast.blog76.fc2.com/blog-entry-2.html (translated) ColumnGroup.java GroupableTableHeader.java GroupableTableHeaderUI  As a pointer in the right direction try this article at SwingWiki that explains the TableUI method of column spanning quite well. Before this I also tried some alternatives such as overriding the TableCellRenderer paint methods without much success. The link is not working anymore :( Copy if article is still offline: http://web.archive.org/web/20080726035429/http://www.swingwiki.org/howto:column_spanning The archive show Error 500 on this article :(
189,A,JList item : changing the vertical alignement My application is using a JList to display numerical values. Here is the default display : +-----------------+ |value 1 | |value 2 | |value 3 | | | | | | | | | +-----------------+ I would like to change the vertical alignement so that the values are display at the bottom right of the frame like this : +-----------------+ | | | | | | | | | value 1| | value 2| | value 3| +-----------------+ If a new element is added it should be displayed at the bottom : +-----------------+ | | | | | | | value 1| | value 2| | value 3| | value 4| +-----------------+ The list is inside a JScrollPane to limit the number of element displayed. Is it doable ? Or do I have to use another component ? As a hack maybe you can play with the Border of the JList. When the list is empty you size the Border to take up all the space of the list. When you add a row you decrease the Border.top insets by the row size. Changing the Border size according to the number of elements in the list works I just had to add a ListDataListener to react to any change in the model. I'm still struggling with window resizing though : I haven't found a way to correctly adapt the border size when the window displaying the list is being resized.
190,A,Swing JButton: Icon above Text How can I create a JButton in Swing with the icon above the text? just do this:   button.setVerticalTextPosition(SwingConstants.BOTTOM); button.setHorizontalTextPosition(SwingConstants.CENTER);
191,A,Java Problem with the clearselection() method I have 2 trees in my program. Iam using JTree's clearselection() method to clear the selection in 1 tree when something in the other tree is selected. The main code is something like this:(inside a valueChanged event listener and tree being the one on which the current selection has been triggered)  if ( tree == tree1 ){ tree2.clearSelection(); } else { tree1.clearSelection(); } When I select for the first time it works fine. But when I try to select from a different tree after this it appears the valueChanged method is getting called twice. Any solution? Did you use the code I gave you in this question? This included a flag to get round the problem of introducing an infinite loop and should also ignore subsequent selection events when it is processing the current one. BTW Given this relates directly to the previous question you may have been better off just commenting on the previous post. That way all the context is kept in one place. My bad. I actually edited the previous question assuming you will be notified about it. I did use the code exactly as you had given. It didn't work. Will give it a shot again and let you know.  clearSelection() triggers valueChanged as well so you need a workaround add some flag and do not clear selection when it's true. EDIT. Seems like using some flag is tricky. Can you use MouseListener instead and run same code within mouseClicked event?
192,A,"How to make a JTable non-editable How to make a JTable non-editable? I don't want my users to be able to edit the values in cells by double-clicking them. Any help would be greatly appreciated. Thanks. You can use a TableModel. Define a class like this: public class MyModel extends AbstractTableModel{ //not necessary } actually isCellEditable is false by default so you may ommit it. (see: http://docs.oracle.com/javase/6/docs/api/javax/swing/table/AbstractTableModel.html) Then use setModel method of your JTable. JTable myTable = new JTable(); myTable.setModel(new MyModel()); You can't have a `public void` method return a boolean. Also the method is `isCellEditable` While the approach you specify works there is no such method as isEditable in the AbstractTableModel. What exists is the method isCellEditable(intint) which takes rowIndex and coulmnIndex as parameters. The user can selectively enable/disable editing for a particular row/column by overriding ""isCellEditable"" method or can use the default implementation to disable editing for all cells. As i pointed it is not needed but thank you for fixing.  create new DefaultCellEditor class : public static class Editor_name extends DefaultCellEditor { public Editor_name(JCheckBox checkBox) { super(checkBox); } @Override public boolean isCellEditable(EventObject anEvent) { return false; } } and use setCellEditor : JTable table = new JTable(); table.getColumn(""columnName"").setCellEditor(new Editor_name(new JCheckBox()));  just add table.setEnabled(false); it works fine for me. This is great if you're not using a custom table model! But you won't be able to select a cell or row. This will look ""greyed out"" in some L&F's. This is the simplest solution to what I understand the initial question to be asking. With regard to the inability to select cells and rows would `setCellSelectionEnabled()` help? I suspect that the disabled default cell colors could be overridden at the very least with `setOpaque(false)` and using the containing JPanel background color. @siddhu It works for me too.Thank you :)  If you are creating the TableModel automatically from a set of values (with ""new JTable(Vector Vector)"") perhaps it is easier to remove editors from columns: JTable table = new JTable(my_rows my_header); for (int c = 0; c < table.getColumnCount(); c++) { Class<?> col_class = table.getColumnClass(c); table.setDefaultEditor(col_class null); // remove editor } Without editors data will be not editable. Please can you explain why it is a ""random hacking at inappropriated locations""? According to the [setDefaultEditor() doc](http://docs.oracle.com/javase/7/docs/api/javax/swing/JTable.html#setDefaultEditor%28java.lang.Class%20javax.swing.table.TableCellEditor%29): ""If editor is null removes the default editor for this column class."" yeah and falls back to the default for Object ;-) So you don't really disable editing (just accidentally if one of the columns is of type Object) also you are missing any columns that might have a custom editor. There _is_ api meant to be implemented to control cell editability and that's the model's. Everything else is hacking and as such inappropriate. I see your point. But what I understood from the api is that if I create a table in the fast way (with ""new JTable(Vector Vector)"") then the table will have default editors for all of its columns. So if I run ""table.setDefaultEditor(column null)"" then I will remove the default editor from the column so the column will not have any editor and the column will not be editable. Will it be? -1 random hacking at inappropriated locations is _never_ an option  You can override the method isCellEditable and implement as you want for example: //instance table model DefaultTableModel tableModel = new DefaultTableModel() { @Override public boolean isCellEditable(int row int column) { //all cells false return false; } }; table.setModel(tableModel); or //instance table model DefaultTableModel tableModel = new DefaultTableModel() { @Override public boolean isCellEditable(int row int column) { //Only the third column return column == 3; } }; table.setModel(tableModel); This is the most simple solution indeed for someone who just wants a default table model only not editable. Thank you Nelson This is also the solution for making double click events work correctly with JTable. A double click is normally consumed by a cell as it goes into edit mode and this will keep a cell from doing that and instead send the double click to the JTable itself. Thanks for the solution Nelson! Doesn't work for me the table just dissapears @Jop then something is wrong elsewhere in your code - a table _never_ disappears just because the table's model is not editable ... Isn't they way the isCellEditable written supposed to return a true or false value and not return column == 3."
193,A,"Difference between java.exe and javaw.exe Recently I noted that some applications are running on javaw (not in java). What is the difference between them and how can I run my Swing application on javaw? Similar question and good answer here: http://stackoverflow.com/a/8194750/99717. Note that the question there asks also about javaws.exe so not technically a duplicate... The javaw.exe command is identical to java.exe except that with javaw.exe there is no associated console window Technically more correct: With `javaw` there is no associated *console*. The window isn't necessarily created (for example when you run from an existing console window or completely in background).  java.exe is the command where it waits for application to complete untill it takes the next command. javaw.exe is the command which will not wait for the application to complete. you can go ahead with another commands.  java.exe is the console app while javaw.exe is windows app (console-less). You can't have Console with javaw.exe. I'll add that ""the console app"" here doesn't necessarily mean that ""this was run from a console"" only that `java.exe` is allowed to access its console. Running an applet from within a browser on Windows for example always uses `java.exe` even if my Java Control Panel is set to _Hide the console window_ or even _Do not start a console window_. Following answer seems better to me and has Java documentation references: http://stackoverflow.com/a/8194750/99717  The difference is in the subsystem that each executable targets. java.exe targets the CONSOLE subsystem. javaw.exe targets the WINDOWS subsystem.  http://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/java.html http://www.processlibrary.com/directory/files/javaw/24870/"
194,A,"Learning Java Swing? I am a veteran C/C++ programmer who has used Win32 MFC and WTL to write Windows apps for many years. I have some very basic Java experience but haven't done anything with a UI. I want to start learning how to write desktop apps in Java and from what I can gather Swing is the way to go. My question is: where do I start? Can anyone recommend any decent books? (I do like a good programming book). I've played with Netbeans a little in the past (and was impressed with what I saw) so I'd like to use that as my Java IDE of choice if that makes any difference. I wrote a site as part of a project whilst at University that taught students how to learn Swing through example and exercises (with a bunch of screenshots). Although I don't have personal access to it any longer Heriot Watt University still host it. You can find the link here.. The Guidebook - Lessons in Swing Might get you started at least :)  Once you have mastered the basics the de-facto standard book for top notch swing GUIs is Filthy Rich Clients. I think your link is not what you think. Corrected thanks for the heads up.  This question and this question is very similar to yours. There are a ton of good answers here too.  The Swing Tutorial is very nice. That's how I taught myself swing.  You can start to learn it by doing simple apps using Netbeans GUI editor which gives you a quick view on your app. Meanwhile Swing is very flexible and powerful. Since you can do almost anything in Swing this advantage leads to somehow deeper learning curve. To learn more you need some good book (like java swing or sun's swing tutorial on their web) and good understanding of MVC design pattern Java bean style event handling customerized rendered etc. Anyway Swing is of much better OOP and MVC than the old age mixed MFC library. You should be able to learn a bit on how to design a clean a extensible app through the learning of Swing.  I'm sorry but what I'd recommend is to stay clear of Swing altogether X-) From my point of view it's veeery verbose (even for Java) but more than anything it has a confusing and unintuitive API (repaint()/refresh() comes to mind) that will haunt you with subtle bugs every day. I'd try SWT instead.. Clearer better looking and has better performance too. What are your credentials? How big applications have you build in Swing and SWT? Are you talking about the core APIs or about certain RCP layers on top of them? Hi :) I've been a Java dev for 3yrs my team was to build a rich client designed to manage small-to-mid retail stores at every level. Eventually we dropped it and went for a web UI instead (management decision). I knew my answer would be downvoted I just had to share the pain Swing did to us :D  If your intention is to use NetBeans and its powerful GUI building capabilities I'd recommend trying to do a lot of hand coding to start with. When I conduct interview we get a lot of people who might be able to use a GUI builder but that is not quite the same thing as 'knowing' Swing.  Netbeans is a decent environment. Check out the O'Reilly Java Swing (Marmoset on cover) for a pretty good look at the ins and outs. However My edition is 2001 and I don't know if the more current ones are any good or not. The big gotcha in Swing is: Don't do any significant work in the listeners. And don't access swing components from any thread other than the EDT (SwingUtilities.invoke* and SwingWorker are your friends) +1 jsight. Even seemingly ""safe"" calls such as ""setVisible()"" on a top-level frame are not necessarily safe from outside the EDT.  That's exactly how I came to Java/Swing from C++/MFC etc. I have to agree that Swing is the only way to go there's a lot to learn in terms of concepts but if you know MFC inside out it will help (because the fundamentals aren't that different they're both event driven windowing systems except one of them is a bag of spanners held together with string)... I started with a copy of an IDE (Jbuilder in my case) and worked through the Sun Java Swing Tutorials Also this beginner's guide is pretty useful for the big picture.  You should definitely see the SwingSet2 demo which comes with jdk. You can see the sources there and it is a great reference as an ""how-to"" about Swing objects. If I start to use a new Swing object in my application I just check those sources to see my options.  If you really want a good book and not an eBook or a pdf Java : The complete reference by Herbert Schildt is the best. It is like an encyclopedia and explains a lot of concepts including swing clearly.  I also like the O'Reilly Java Swing book; it's been useful to me. Good descriptions of concepts good references clear concise and to the point. That would be my recommendation. It's the first book I get when searching amazon for ""java swing"". Also amusingly that search will get you a porch swing made from wood from the island of Java...  Once you get your feet wet I highly recommend the book ""Swing Hacks"" to harness the full power of swing.  Just another book recommendation: Java Swing by Matthew Robinson und Pavel Vorobiev It's the only book i read on Swing so far so i can't compare it to the other ones. On the other hand it's the only book i needed so far so it can't be bad."
195,A,How to disable scrolling from mouse wheel in a JScrollPane header? I am currently working on a SWING frame with a JScrollPane (including a JComponent) with a row header and a column header (which are also JComponents). When the mouse is over the JComponent or one of these 2 headers mouse wheel provokes scrolling. What I want to do is to disable this scrolling when the mouse is over the column header but I can't find a direct way nor in JScrollPane instance nor in JComponent. For information I had a look at these sources : Sun's Howto on JScrollPane JScrollPane javadoc JComponent javadoc Thank you in advance if you have a way to do that. yourJTable.getTableHeader().setReorderingAllowed(false); working for me  I think you need a 2 step solution. To disable/enable the scroll wheel for the whole component use setWheelScrollingEnabled() on the JScrollPane. To do this selectively do addMouseListener() on the JScrollPane to catch all mouse movement (including entering and leaving) so you'll know when the pointer is in the header. Whenever this changes you can turn scrolling on or off. Ok I tested that: actually the custom MouseListener shall be added to the JComponent used for header (and not to the JScrollPane) but basically it works. Thank you very much. Excellent! Thank you for playing guinea pig for my wild and crazy idea. I'm happy to see it worked. :)
196,A,"Modal dialogs in IE gets hidden behind IE if user clicks on IE pane I have to write an applet that brings up a password dialog. The problem is that dialog is set to be always on top but when user clicks on IE window dialog gets hidden behind IE window nevertheless. And since dialog is modal and holds all IE threads IE pane does not refresh and dialog window is still painted on top of IE (but not refreshed). This behaviour confuses users (they see dialog on top of IE but it looks like it has hanged since it is not refreshe). So I need a way to keep that dialog on top of everything. But any other solution to this problem would be nice. Here's the code:  PassDialog dialog = new PassDialog(parent); /* do some non gui related initialization */ dialog.pack(); dialog.setLocationRelativeTo(null); dialog.setAlwaysOnTop(true); dialog.setVisible(true); Resolution: As @shemnon noted I should make a window instead of (null Frame Applet) parent of modal dialog. So good way to initlialize parent was: parent = javax.swing.SwingUtilities.getWindowAncestor(theApplet); You might try launching a modal from JavaScript using the JavaScript integration (see http://www.raditha.com/java/mayscript.php for an example). The JavaScript you would need would be something like: function getPassword() { return prompt(""Enter Password""); } And the Java would be: password = jso.call(""getPassword"" new String[0]); Unfortunately that means giving up all hope of having a nice looking modal. Good luck!  What argument are you using for the parent? You may have better luck if you use the parent of the Applet. javax.swing.SwingUtilities.getWindowAncestor(theApplet) Using the getWindowAncestor will skip the applet parents (getRoot(component) will return applets). In at least some versions of Java there was a Frame that was equivalent to the IE window. YMMV. Well I did something like JOptionPane.getRootFrame. I'll look into it first thing tommorow. Worked - thanks.  Make a background Thread that calls toFront on the Dialog every 2 seconds. Code that we use (I hope I got everything): class TestClass { protected void toFrontTimer(JFrame frame) { try { bringToFrontTimer = new java.util.Timer(); bringToFrontTask = new BringToFrontTask(frame); bringToFrontTimer.schedule( bringToFrontTask 300 300); } catch (Throwable t) { t.printStackTrace(); } } class BringToFrontTask extends TimerTask { private Frame frame; public BringToFrontTask(Frame frame) { this.frame = frame; } public void run() { if(count < 2) { frame.toFront(); } else { cancel(); } count ++; } private int count = 0; } public void cleanup() { if(bringToFrontTask != null) { bringToFrontTask.cancel(); bringToFrontTask = null; } if(bringToFrontTimer != null) { bringToFrontTimer = null; } } java.util.Timer bringToFrontTimer = null; java.util.TimerTask bringToFrontTask = null; } Its a bit to brute force to me. But it's the easiest choice.  This is a shot in the dark as I'm not familiar with applets but you could take a look at IE's built-in window.showModalDialog method. It's fairly easy to use. Maybe a combination of this and Noah's suggestion?"
197,A,"Java equivalent of OpenLayers I am looking for a Java library to display map data from various sources including shapefile WMS WFS Google Maps possibly ArcIMS etc. It seems like OpenLayers is the closest thing to what I want except it's a JavaScript library and I'm writing a Swing application. GDAL looks promising but as far as I can tell there won't be Java bindings until ""sometime"" in the future. Just to be clear I am looking for a single Java API that I can use to display maps from a number of map servers/sources. Does anyone know if anything like this exists and if not where to go from here? Should I build this API on top of GeoTools? Or... Maybe I accepted this answer too soon since this was my first question on SO? It seems to have gotten more views but no more input. This is a case where you have lots of choice. GeoTools is indeed a low level library and an excellent choice for some hands on work. We recently started using Swing for our example code in order to make tutorials more visual. That said they are tutorial code only and do not represent a multi threaded system such as uDig. If you are looking for Swing applications to start form there is the Jump family (sadly scattered through a closed development process - OpenJump represents a collection of the various forks) gvSig which has excellent financial backing in Span and so on. You may also wish to look at the library side of the deegree project (which I seem to recall produced a desktop application as well?). I also recommend looking at some of the tiled map viewers produced around Nasa World Wind and Open Street Map datasets. These will be more similar to the OpenLayers experience. Disclaimer I am on the steering committee for GeoTools and uDig.  It doesn't handle all the formats you mention but I was successful displaying Web maps using modestmaps for Processing (find it here). A processing PApplet can be embedded in a swing GUI as explained here.  Try mapscript for java www.mapserver.org CU  uDig would probably meet your needs just fine if you can work within the RCP framework. I don't have any experience with uDig or NASA World Wind but if you need to put the map features in an existing application NASA's World Wind Java SDK is another option. It is extensible and supports industry standards for geospatial data. They have an informative wiki here. I first saw NASA World Wind at JavaOne 2007 and it doesn't look like the Java SDK has really taken off nor does it look like the .Net version is seeing a lot of new releases but it could meet your needs if they are basic.  GeoTools is a good bet for this. The Google Maps Terms of Service prohibit accessing Google Maps tiles except through the (JavaScript) Google Maps API so it's not likely that you'll find a freely available codebase to access them in a Java application. Similar restrictions probably apply to other commercial layers. I was hoping for something at a higher level of abstraction than Geotools but I will just have to build what I need on this foundation.  Have a look at UDig http://udig.refractions.net/ It is based on the eclipse RCP works with Geotools and can display most types of spatial data. it is open source and seems to have quite a bit of activity  I have used MapXtreme for Java it was pretty good and supported several formats. It is not cheap but it delivers. It is geared towards rendering vectorial data formats. You can use it either server or client side.  ArcGIS Engine Java will do what you need. It integrates into a fully-integrated GIS platform. There are tools to create cartographic quality maps publish them host them out or to build custom apps.  OpenMap is supposedly pretty good. Warning: the ""open"" license they use is considered non-free by Fedora and GNU.  You can use GoogleMaps if you can embed a Web browser into your Java swing application try JDIC or DJ Project. Also see Is there a way to embed a browser in Java? I have been working with such solution in C# - embedding IE. However you must embed a good web browser usually some native web browser and this limits your such solution."
198,A,Adding rows to a JTable We have a simple project where we read data from a socket and we want to populate a table with the coming data but we can't find a way to add rows to a yet created JTable object we can only find how to add rows at creation time of the table. Is it possible to add rows dynamically to a JTable or there is a better alternative object to deal with this way of showing data? EDIT: Thanks a lot for your answers. All three of them look very promising but I have to choose only one and I think the best is Guillaume's. Once you start dynamically adding and removing elements from a JTable you really need to start using a TableModel. See the Java Tutorial for more details.  You should create a custom TableModel. A JTable doesn't actually store the rows it always delegates that to a TableModel. To help you implementing it you should make use of AbstractTableModel. Don't forget to call fireTableRowsInserted() every time you add rows. For better performances if you add a lot of rows try to batch the updates and add many rows at a time.  If you use the default table model for a JTable then you can add rows with following code  if ( dest+1 < table.getRowCount()-1 ) ( (DefaultTableModel) table.getModel() ).insertRow(dest+1 getValuesForNewRow()); else ( (DefaultTableModel) table.getModel() ).addRow(getValuesForNewRow()); It's best to just keep hold of the DefaultTableModel before passing it to the JTable constructor. Then you don't need to touch the JTable or do any casting.
199,A,"How can I display a bitmap image in a Java applet? I am having a hard time figuring out how to show an Image (or ImageIcon) in a Java applet. The following is my code. The picture (test.bmp) does exist and is on the D drive but when I run this I get the applet window with nothing in it. Can somebody tell me what I am missing to make the ImageIcon show? public class Form1 extends JApplet { ImageIcon i; public void init(){ i = new ImageIcon(""D:\test.bmp""); } public void paint(Graphics g){ i.paintIcon(this g 0 0); } } Thanks Steve. ImageJ is an Open Source application / library that has support for may formats including BMP. Here is some real code using BMPDecoder from ImageJ: Here is the license statement. import java.awt.image.ColorModel; import java.awt.image.IndexColorModel; import java.awt.image.MemoryImageSource; import java.io.IOException; import java.io.InputStream; import javax.swing.ImageIcon; import javax.swing.JFrame; import javax.swing.JLabel; public class BMPDecoder { InputStream is; int curPos = 0; int bitmapOffset; // starting position of image data int width; // image width in pixels int height; // image height in pixels short bitsPerPixel; // 1 4 8 or 24 (no color map) int compression; // 0 (none) 1 (8-bit RLE) or 2 (4-bit RLE) int actualSizeOfBitmap; int scanLineSize; int actualColorsUsed; byte r[] g[] b[]; // color palette int noOfEntries; byte[] byteData; // Unpacked data int[] intData; // Unpacked data boolean topDown; private int readInt() throws IOException { int b1 = is.read(); int b2 = is.read(); int b3 = is.read(); int b4 = is.read(); curPos += 4; return ((b4 << 24) + (b3 << 16) + (b2 << 8) + (b1 << 0)); } private short readShort() throws IOException { int b1 = is.read(); int b2 = is.read(); curPos += 2; return (short) ((b2 << 8) + b1); } void getFileHeader() throws IOException Exception { // Actual contents (14 bytes): short fileType = 0x4d42;// always ""BM"" int fileSize; // size of file in bytes short reserved1 = 0; // always 0 short reserved2 = 0; // always 0 fileType = readShort(); if (fileType != 0x4d42) throw new Exception(""Not a BMP file""); // wrong file type fileSize = readInt(); reserved1 = readShort(); reserved2 = readShort(); bitmapOffset = readInt(); } void getBitmapHeader() throws IOException { // Actual contents (40 bytes): int size; // size of this header in bytes short planes; // no. of color planes: always 1 int sizeOfBitmap; // size of bitmap in bytes (may be 0: if so // calculate) int horzResolution; // horizontal resolution pixels/meter (may be 0) int vertResolution; // vertical resolution pixels/meter (may be 0) int colorsUsed; // no. of colors in palette (if 0 calculate) int colorsImportant; // no. of important colors (appear first in // palette) (0 means all are important) int noOfPixels; size = readInt(); width = readInt(); height = readInt(); planes = readShort(); bitsPerPixel = readShort(); compression = readInt(); sizeOfBitmap = readInt(); horzResolution = readInt(); vertResolution = readInt(); colorsUsed = readInt(); colorsImportant = readInt(); topDown = (height < 0); if (topDown) height = -height; noOfPixels = width * height; // Scan line is padded with zeroes to be a multiple of four bytes scanLineSize = ((width * bitsPerPixel + 31) / 32) * 4; actualSizeOfBitmap = scanLineSize * height; if (colorsUsed != 0) actualColorsUsed = colorsUsed; else // a value of 0 means we determine this based on the bits per pixel if (bitsPerPixel < 16) actualColorsUsed = 1 << bitsPerPixel; else actualColorsUsed = 0; // no palette } void getPalette() throws IOException { noOfEntries = actualColorsUsed; // IJ.write(""noOfEntries: "" + noOfEntries); if (noOfEntries > 0) { r = new byte[noOfEntries]; g = new byte[noOfEntries]; b = new byte[noOfEntries]; int reserved; for (int i = 0; i < noOfEntries; i++) { b[i] = (byte) is.read(); g[i] = (byte) is.read(); r[i] = (byte) is.read(); reserved = is.read(); curPos += 4; } } } void unpack(byte[] rawData int rawOffset int bpp byte[] byteData int byteOffset int w) throws Exception { int j = byteOffset; int k = rawOffset; byte mask; int pixPerByte; switch (bpp) { case 1: mask = (byte) 0x01; pixPerByte = 8; break; case 4: mask = (byte) 0x0f; pixPerByte = 2; break; case 8: mask = (byte) 0xff; pixPerByte = 1; break; default: throw new Exception(""Unsupported bits-per-pixel value: "" + bpp); } for (int i = 0;;) { int shift = 8 - bpp; for (int ii = 0; ii < pixPerByte; ii++) { byte br = rawData[k]; br >>= shift; byteData[j] = (byte) (br & mask); // System.out.println(""Setting byteData["" + j + ""]="" + // Test.byteToHex(byteData[j])); j++; i++; if (i == w) return; shift -= bpp; } k++; } } void unpack24(byte[] rawData int rawOffset int[] intData int intOffset int w) { int j = intOffset; int k = rawOffset; int mask = 0xff; for (int i = 0; i < w; i++) { int b0 = (((int) (rawData[k++])) & mask); int b1 = (((int) (rawData[k++])) & mask) << 8; int b2 = (((int) (rawData[k++])) & mask) << 16; intData[j] = 0xff000000 | b0 | b1 | b2; j++; } } void unpack32(byte[] rawData int rawOffset int[] intData int intOffset int w) { int j = intOffset; int k = rawOffset; int mask = 0xff; for (int i = 0; i < w; i++) { int b0 = (((int) (rawData[k++])) & mask); int b1 = (((int) (rawData[k++])) & mask) << 8; int b2 = (((int) (rawData[k++])) & mask) << 16; int b3 = (((int) (rawData[k++])) & mask) << 24; // this gets // ignored! intData[j] = 0xff000000 | b0 | b1 | b2; j++; } } void getPixelData() throws IOException Exception { byte[] rawData; // the raw unpacked data // Skip to the start of the bitmap data (if we are not already there) long skip = bitmapOffset - curPos; if (skip > 0) { is.skip(skip); curPos += skip; } int len = scanLineSize; if (bitsPerPixel > 8) intData = new int[width * height]; else byteData = new byte[width * height]; rawData = new byte[actualSizeOfBitmap]; int rawOffset = 0; int offset = (height - 1) * width; for (int i = height - 1; i >= 0; i--) { int n = is.read(rawData rawOffset len); if (n < len) throw new Exception(""Scan line ended prematurely after "" + n + "" bytes""); if (bitsPerPixel == 24) unpack24(rawData rawOffset intData offset width); else if (bitsPerPixel == 32) unpack32(rawData rawOffset intData offset width); else // 8-bits or less unpack(rawData rawOffset bitsPerPixel byteData offset width); rawOffset += len; offset -= width; } } public void read(InputStream is) throws IOException Exception { this.is = is; getFileHeader(); getBitmapHeader(); if (compression != 0) throw new Exception(""Compression not supported""); getPalette(); getPixelData(); } public MemoryImageSource makeImageSource() { ColorModel cm; MemoryImageSource mis; if (noOfEntries > 0) { // There is a color palette; create an IndexColorModel cm = new IndexColorModel(bitsPerPixel noOfEntries r g b); } else { // There is no palette; use the default RGB color model cm = ColorModel.getRGBdefault(); } // Create MemoryImageSource if (bitsPerPixel > 8) { // use one int per pixel mis = new MemoryImageSource(width height cm intData 0 width); } else { // use one byte per pixel mis = new MemoryImageSource(width height cm byteData 0 width); } return mis; // this can be used by Component.createImage() } public static void main(String[] aqgs) { BMPDecoder bd = new BMPDecoder(); try { bd.read(BMPDecoder.class.getResourceAsStream(""bmp.bmp"")); } catch (Exception e) { // TODO Auto-generated catch block e.printStackTrace(); } JFrame jf = new JFrame(); JLabel jl = new JLabel(); ImageIcon ii = new ImageIcon( jl.createImage(bd.makeImageSource())); jl.setIcon(ii); jf.add(jl); jf.pack(); jf.setVisible(true); } }  Referencing your image through an absolute local file path might not work when you run your applet from a server. Use the ImageIcon (URL location) constructor and Have the URL point to the image resource on the server. Use the JApplet.getCodeBase() to determine where your applet originates and append the file name to it. public class Form1 extends JApplet { Image i; public void init() { try { i = ImageIO.read(new URL(getCodeBase() ""test.bmp"")); } catch (MalformedURLException ex) { ex.printStackTrace(); } catch (IOException ex) { ex.printStackTrace(); } } public void paint(Graphics g) { g.drawImage(i 0 0 null); } } Edit: ImageIO supports BMP and the changed sample works for me. Edit 2: If it still doesn't display the image try ""../test.bmp"" because when you run an applet from lets say Eclipse it has the bin directory as the codebase. Edit 3: If you put your test.bmp into the jar or on the classpath you can load it using the same way but replacing new URL(getCodeBase() ""test.bmp"") with Form1.class.getResource(""test.bmp"")  bmp files are not supprted in java. You should probably consider unsing other formats such as .png .gif or .jpg If you really HAVE to do it here's an article from Java World that explains how to read the bit map file and interpret it. Java Tip 43: How to read 8- and 24-bit Microsoft Windows bitmaps in Java applications from JavaWorld I've never tried though BMP is not supported in Swing/ImageIcon. ImageIO however is happy to read it (ref: http://forums.sun.com/thread.jspa?threadID=666189)  To start with it's probably a good idea to correctly escape your \ as \\. Edited to add: You probably want to learn your language's (or library's) equivalent of Path.combine (or File.join) which is a method for taking a list of file path parts and combining them with the platform-appropriate path separator. Or you can write it yourself quickly in Java as the path separator is documented in File.pathSeparator. (Off the top of my head I didn't know that forward slash always works in ImageIcon but note the other response that indicates this). Additionally make sure you are loading a supported file type such as .png .gif or .jpg. BMP may be supported in JDK 1.5 Also if you are running in an Applet context you may not have access to the path in question due to sandboxing rules. In that case make it available in the same path as to the HTML file hosting the applet (possibly in the Jar's path if memory serves me) and use a relative path. I think we have a winner. If he'd named his file ""imagetest.bmp"" it would have been obvious what the problem was. +1 this is probably the issue. The only reason you aren't getting a compiler error is because ""\t"" is a valid escape sequence for the tab character. Which gets us to the second lesson: Check if init (opening the file) was successful. I tried changing this and it still didn't work. Any other ideas? Now that you've corrected this does it work with an equivalent .jpg or .gif file? Is ImageIcon null after loading? -1 this is not an answer but a comment. Should go in the comments section. http://bit.ly/MohSi How is this not an answer? He's mentioning two potential problems (bad escape character and possible invalid image type) and how to fix them.  Instead of making an ImageIcon that is told to draw itself onto a graphics try it this way: public class Form1 extends JApplet { Image i; public void init(){ i = getImage(""D:\\test.bmp""); } public void paint(Graphics g){ g.drawImage(i00this); } } Also you may want to try using .png instead of a .bmp file.  From the Java Docs: When specifying a path use the Internet-standard forward-slash (""/"") as a separator"
200,A,"Accelerate 2D images in Java *without* disturbing JMenus Already implemented performance boosters : - Get compatible image of GraphicsConfiguration to draw on - Enable OpenGL pipeline in 1.5: Not possible due to severe artifacts So far I am fine the main profiled bottleneck of the program is drawing an image with several thousand tiles. Unfortunately it is not regular else I simply could set pixels and scale them. I accerelated the image with VolatileImages and own rendering routines (ignore repaint and draw it itself with a timer). The result was pleasing and would suffice BUT: Choosing a JMenu which hovers normally over the part of the image is severely disturbed because the JMenu is overdrawn. Inacceptable and the layout couldn't be changed. I tried the GLJPanel of JOGL but there is no visible performance improvement. So is there a possibitlity to use VolatileImages (or other accerelated lightweighted components like GLCanvas) and still get normal JMenu display and if yes how ? You could try to set the popups to non-leightweight. I am not quite sure if it works but it could because the popup is a native component then and will not be overdrawn. Setting Popups to heavyweight: JPopupMenu.setDefaultLightWeightPopupEnabled(false) More Information: Mixing heavy and light components  Here is some example code: import javax.swing.*; import java.awt.*; import java.awt.event.WindowAdapter; import java.awt.event.WindowEvent; import java.awt.image.BufferStrategy; import java.awt.image.BufferedImage; import java.awt.image.VolatileImage; import java.io.File; import java.io.IOException; import java.util.Timer; import java.util.TimerTask; public final class FastDraw extends JFrame { private static final transient double NANO = 1.0e-9; private BufferStrategy bs; private BufferedImage frontImg; private BufferedImage backImg; private int PIC_WIDTH PIC_HEIGHT; private Timer timer; public FastDraw() { timer = new Timer(true); JMenu menu = new JMenu(""Dummy""); menu.add(new JMenuItem(""Display me !"")); menu.add(new JMenuItem(""Display me too !"")); JMenuBar menuBar = new JMenuBar(); menuBar.add(menu); setJMenuBar(menuBar); setIgnoreRepaint(true); setVisible(true); addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent evt) { super.windowClosing(evt); timer.cancel(); dispose(); System.exit(0); } }); try { backImg = javax.imageio.ImageIO.read(new File(<insert a jpg picture here>)); frontImg = javax.imageio.ImageIO.read(<here too>)); } catch (IOException e) { System.out.println(e.getMessage()); } PIC_WIDTH = backImg.getWidth(); PIC_HEIGHT = backImg.getHeight(); setSize(PIC_WIDTH PIC_HEIGHT); createBufferStrategy(1); // Double buffering bs = getBufferStrategy(); timer.schedule(new Drawer()020); } public static void main(String[] args) { new FastDraw(); } private class Drawer extends TimerTask { private VolatileImage img; public void run() { long begin = System.nanoTime(); Graphics2D g = (Graphics2D) bs.getDrawGraphics(); GraphicsConfiguration gc = g.getDeviceConfiguration(); if (img == null) img = gc.createCompatibleVolatileImage(PIC_WIDTH PIC_HEIGHT); Graphics2D g2 = img.createGraphics(); do { int valStatus = img.validate(gc); if (valStatus == VolatileImage.IMAGE_OK) g2.drawImage(backImg00null); else { g.drawImage(frontImg 0 0 null); } // volatile image is ready g.drawImage(img050null); bs.show(); } while (img.contentsLost()); } } } Resize the window to make the JMenuBar visible. Try to select a menu point. See?  Well I'm not sure if I fully understand your problem but it seems that main problem is with repainting the panel where image is displayed. Should you please provide your drawing routine which draws image on panel?"
201,A,"Communication between the EDT and main threads I have been asking a lot of questions about a project I have been working on recently. Here is the scenario I am in and any help or point in the right direction would help a lot... This is a network program built with a server and multiple clients. Each client has a GUI which must act according to commands sent from the server. Each client is wrapped within a class called Player. This Player has a GUI (extends JFrame) and a main method and the Server has a main method only (no GUI). At first this class was created in the main thread like this: EventQueue.invokeLater(new Runnable() { public void run() { new Player().setVisible(true); } }); This was working fine until I realized that the entire Player class was now executing in the EDT. So when I wait for commands from the server the entire GUI locks up until that command is sent and proper actions are executed. As you can imagine this is a horrible design and proved to be a real pain of a coding environment when every time you want to check for something you must find some crazy work around so that the GUI still remains intact. Obviously I must check for the commands from the Server in a separate thread and run the GUI components in the EDT. My second implementation had two classes - one for the GUI and one for the Player. The idea was that the Player had a variable that held the GUI so that I could access the GUI from the Player class something like this: class Player { public GUI gui; ... // And then start this gui inside of the EDT. EventQueue.invokeLater(new Runnable() { public void run() { this.gui = new GUI().setVisible(true); } } This doesn't work either because this inside of the new Runnable object refers to the Runnable object not the Player. How can I communicate between the Player class in one thread and the corresponding GUI class in the EDT thread? You may try this: class Player { public GUI gui; ... // And then start this gui inside of the EDT. EventQueue.invokeLater(new Runnable() { public void run() { Player.this.gui = new GUI().setVisible(true); } }  To handle your problem with the this pointer you should write: class Player { public GUI gui; ... // And then start this gui inside of the EDT. EventQueue.invokeLater(new Runnable() { public void run() { Playser.this.gui = new GUI().setVisible(true); } } }  Boris Pavlović gets the syntax right (actually you could just remove the this.) but still the code doesn't make sense. The gui field is initialised sometime after the Runnable event is queued so it is unsafe for the player thread to use it. You could construct Player on the EDT (but do the network operations off EDT). Or register the GUI as a listener (observer) of the Player. invokeAndWait would work but is dangerous as it often leads to the occasional difficult-to-debug deadlock.  ""until I realized that the entire Player class was now executing in the EDT"" The constructor occurs on the EDT but methods called on this class might not be. You should construct the player GUI as you originally intended.  EventQueue.invokeLater(new Runnable() { public void run() { new Player().setVisible(true); } }); But Player can launch a separate thread in the constructor (personally I'd share a connection between the Players). Of course the callback methods from the server should use invokeLater() when modifying visible components.  Instead of using an anonymous inner class why not just declare a class the implements Runnable and have a constructor that takes a GUI instance as argument? Also if your GUI class is not thread safe consider using a message queue to communicate between the EDT & main thread.  Writing Responsive UIs with Swing Worker Threads: Swing Worker"
202,A,Free Java Swing calendar component for date picking I need to add ability to pick a date in my Swing application. Picking should be similar to JComboBox but instead of drop down list I would like to obtain one month with dates and ability to scroll between months. There is no such component in JDK. A list with a lot of third party components is available at http://www.java2s.com/Product/Java/Swing/Calendar-Date-Time.htm. Which third party Swing Component for date picking can you suggest which is free and easy to use? Thanks! It is not a combobox like you said you wanted (more of a traditional calendar widget) but JCalendar by Kai Toedter works pretty well.  JXDatePicker from SwingX should meet your needs.
203,A,Using MediaTracker to cache images in Swing Application I have a Swing based financial ticker that will display a financial symbol the price movement and an arrow for either up or down for each counter / company. This ticker can have a lot on counters (up to 100) and see the need to cache the images symbols to boost performance. I have tried following this article but fail to understand it especially how the MediaTracker class is going to cache the images. From what i can see i place the images in an array and still retrieve from the array. Does anyone know how it works and is supposed to be used? where do you load the image(s) from? from a web server A MediaTracker will help you keep a track on loading lots of images but that's about it. Once all is loaded you'll be need something like a good old Map with the images hashed against either the filename or the company name or ID. private Map<StringImage> imageCache = new HashMap<StringImage>(); There's a reasonable example of using a MediaTracker to load images on the 1.4 JavaDocs: http://java.sun.com/j2se/1.4.2/docs/api/java/awt/MediaTracker.html. Note that there's no getImage() method and you need an int id in order to track them. You have to maintain the BufferedImage references yourself hence the HashMap<>.
204,A,"Native Swing Menu Bar Support For MacOS X In Java A link that stands out is http://www.devdaily.com/blog/post/jfc-swing/handling-main-mac-menu-in-swing-application/ however the menu bar under Mac OS X displays as the package name as opposed to the application name. I'm using the code in the above link without any luck so I'm unsure if anything's changed in recent Mac OS versions. Here's an extract: public RootGUI() { super(""Hello""); JMenuBar menuBar = new JMenuBar(); JMenu file = new JMenu(""File""); JMenuItem item = new JMenuItem(""Woah""); file.add(item); menuBar.add(file); setJMenuBar(menuBar); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setSize(100 100); pack(); setVisible(true); } public static void main(String[] args) { javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { try { System.setProperty(""apple.laf.useScreenMenuBar"" ""true""); System.setProperty(""com.apple.mrj.application.apple.menu.about.name"" ""Test""); UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); new RootGUI(); } catch(ClassNotFoundException e) { System.out.println(""ClassNotFoundException: "" + e.getMessage()); } catch(InstantiationException e) { System.out.println(""InstantiationException: "" + e.getMessage()); } catch(IllegalAccessException e) { System.out.println(""IllegalAccessException: "" + e.getMessage()); } catch(UnsupportedLookAndFeelException e) { System.out.println(""UnsupportedLookAndFeelException: "" + e.getMessage()); } } }); } The first menu item on the menu bar should display as ""test"" unfortunately this isn't the case. The file menu works fine on the other hand. Any ideas? @brendan this was 4 years ago c'mon eh ;) ooh look at all those exceptions If you are launching multiple JFrames and you use the mac menu then one of the JFrames could be replacing the JFrame you want with one that has a different menu structure. I'm not sure if you can share one JMenuBar for multiple JFrames but you could just make an application wide menubar that all the frames instantiate.  You can also use Macify when you build the app so you don't need to change any code.  @Matt: Unfortunately that didn't work for me. public static void main(String[] args) { try { System.setProperty(""apple.laf.useScreenMenuBar"" ""true""); System.setProperty(""com.apple.mrj.application.apple.menu.about.name"" ""Test""); UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); } catch(ClassNotFoundException e) { System.out.println(""ClassNotFoundException: "" + e.getMessage()); } catch(InstantiationException e) { System.out.println(""InstantiationException: "" + e.getMessage()); } catch(IllegalAccessException e) { System.out.println(""IllegalAccessException: "" + e.getMessage()); } catch(UnsupportedLookAndFeelException e) { System.out.println(""UnsupportedLookAndFeelException: "" + e.getMessage()); } javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { new RootGUI(); } }); } That's what I had tried in addition to your comment.  If you want to deliver an application that looks native on Mac OS X one important part is to deliver an appplication bundle. Within the application bundle you will be able to provide a property list file in order to solve this problems. Some official info: Java Development Guide for Mac OS X  You need to set the ""com.apple.mrj.application.apple.menu.about.name"" system property in the main thread not in the Swing thread (in other words just make it the first line in the program).  As I understand you want to rename your application menu shown on the os x menu bar. Well I didn't find a system property but I found a command line option: -Xdock:name=""YourNameHere"" that worked for me. BTW: The syystem property com.apple.mrj.application.apple.menu.about.name is for renaming the about menu item in your application menu not the menu bar itself See this link here.  @Kezzer I think I see what's going on. If you put the main() method in a different class then everything works. So you need something like: public class RootGUILauncher { public static void main(String[] args) { try { System.setProperty(""apple.laf.useScreenMenuBar"" ""true""); System.setProperty(""com.apple.mrj.application.apple.menu.about.name"" ""Test""); UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); } catch(ClassNotFoundException e) { System.out.println(""ClassNotFoundException: "" + e.getMessage()); } catch(InstantiationException e) { System.out.println(""InstantiationException: "" + e.getMessage()); } catch(IllegalAccessException e) { System.out.println(""IllegalAccessException: "" + e.getMessage()); } catch(UnsupportedLookAndFeelException e) { System.out.println(""UnsupportedLookAndFeelException: "" + e.getMessage()); } javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { new RootGUI(); } }); } And then put your RootGUI class in a different file. @Matt Solnit: I also had same problem. This answer solved my problem. Merci beaucoup :-) The admins just merged this thread into my root account so I've marked this as the correct answer for you now :)"
205,A,"JScrollPane now showing its viewport I am making an application with Java Swing and i have a problem. I have made a Tabbed Panel which need to hold a simple panel and a scroll-panel. The simple panel is working fine but in my scroll-panel i can only see the scrollbars but not the viewport my code is as follows: ContentPane public class ContentPane extends JTabbedPane { private InfoPanel ip; ScrollPanel sp; public InfoPanel getIp() { return ip; } public ContentPane(GraphPanel gp) { this.sp = new ScrollPanel(gp); this.sp.setViewportView(gp); this.addTab(""Graph"" this.sp); this.ip = new InfoPanel(gp); this.addTab(""Info"" ip); } } ScrollPanel public class ScrollPanel extends JScrollPane { public ScrollPanel(GraphPanel gp){ this.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS); this.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); this.repaint(); } } GraphPanel public GraphPanel(StatusBar sb) { this.sb = sb; zoomLevel = 5; sm = new Simulation(); mh = new MouseHandler(this sm); this.addMouseListener(mh); this.setBackground(new Color(240 165 98)); this.repaint(); } Since i don't get any errors or exceptions i am now completely lost in which aproach to take. I can add to this that i have a MouseListener in GraphPanel which still registers my mouse clicks in the panel but still nothing is showing in there.. Can you post an screenshot? http://bayimg.com/DAMnMAAbp You should not subclass JScrollPane it is not necessary. But if you do so don't forget to add the component to the scrollpane. In your subclass you are not adding the GraphPanel to the scroll pane.: public class ScrollPanel extends JScrollPane { public ScrollPanel(GraphPanel gp){ // :::: HERE ::: you are not doing anything with gp // like this.setViewPort( gp ) or something like that this.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS); this.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); this.repaint(); } } Try: public class ScrollPanel extends JScrollPane { public ScrollPanel(GraphPanel gp){ super( gp ); .... etc ... And have GraphPanel extend JComponent or JPanel I added the graphpanel as viewport in the ContentPane class and i tried this too but it still doesn't work. oohh  yeap I have just seen that part... let me try other thing. Dude that worked can you in a few words explain what i did wrong? Thank you so much :) Oh and also my scrollpanel doesn't really know when it needs to scroll where should i put an option in for this? Look again did it really worked ? Because probable the other tab is not working very well. The other tab is working fine it is not supposed to be a scroll-panel just a simple panel. But the graph panel is still not scrolling when the graph is bigger than the scrollpanel.. I have just modified the code and it scrolls well. I don't know what the graph panel but I have added a JLabel see: http://pastebin.com/f5f69fe80 One thing is true if GraphPanel is a JComponent ( or a subclass ) and you try to render in two different places ( say GraphTab and InfoTab ) it will show well only in one of them. Okay by using that i have a scrollpanel that will scroll but the panel will be on top of the graph and my graph is a variable size do i need to specify the minimumsize of the graphpanel somewhere? Finally see the if you're defining preferredSize and/or minimSize. That's what the JScrollPane takes to know when to show the scrolls bar. ""do i need to specify the minimumsize "" yeap I think prefferredSize is enough that is what the JScoll takes to know if it should or not show the scrolls ""How much is visible and how much should it scroll"" If your graph is variable size you'll have to implement the Scrollable Interface that is a little bit tricky. I think i just found a solution with just varying the PreferredSize when i change something in the GraphPanel Yeap. In the code in pastebin notice the JLabel has a big preffered size... :) I'm glad you have make this thing to work. I am glad you helped me make this thing work :). About that Scrollable interface how difficult is it? Cause this approach i took it is not working :P Well let say I tried once .... aaand.. gave up :P I have implemented the methods in the interface now but they don't seem to ever be called :/"
206,A,"Is there a free (LGPL BSD etc) implementation of XML editor swing component I need a JComponent thad enables editing xml documents so I can embed it in my application. It doesnt need to bee fancy. Plain text editing and highlighting would bee enough. Thank in advance Maybe this Xml Editor would do: I had to enhance and restructure my XML Editor to make it a ""plugable"" JPanel. Otherwise you still have the SimpleEditor.java which might be as good."
207,A,"how do i close a frame yet open a new frame? how do i close a frame yet open a new frame? i have a frame (help) when i click on my menu item i want to open (mainForm) exit from help. new mainForm().setVisible(true); System.exit(0); i know this closes the whole program however how do i get it to only close the current frame thanks maybe you need to post your entire code that refers to your 'help' frame @Tuffy- from your comment in extraneon its unsure of what your code is actually doing from 'main' and 'help' so could you post code for those created frames I think you should hide the frame you do not wish shown with setVisible(false). System.exit(0) stops the JVM ending the entire program. In short the semantics of setVisible has nothing to do with starting / stopping the application. If you want to start an entire new application you'd have to look at Runtime.exec(). I don't really know if you can close the parent process (the Help application) with exit() though. i think i may have confused you. here is the scenario. i am in help i click on the menu bar where it says main. when main is clicked i want it to show main and hide help. if i set that to false it will also hide main there is no exit() method for a Frame. 'exit' is for the entire system I know. I was wondering whether you can start a new process from within the JVM and then close the current process while not killing the newly started process also. yes you can do that if their both independently created processes  Let's say you created your frame as so:  JFrame mainframe = new JFrame(""Radio Notes""); //show Frame mainframe.setVisible(true); //close the frame mainframe.dispose(); it's not main frame iam trying to get rid of its help. when i do help.dispose(); it doesn't work mainframe was just an example of a created frame if you named the frame help then yes help.dispose will close it; for example if you created a frame: JFrame help= new JFrame(""help""); then help.dispose() will close it  try setting the default close operation for the JFrame like so. frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE); Then implement a WindowListener that performs the actions you want when a window closing event is fired.  You should rethink your requirments. For the user it would be best to have both the program and the help window visible at the same time. Closing the main window when showing the help screen and vice versa is really really bad for usability - you shouldn't do it. We've had window-based GUIs for almost 30 years now - showing several windows on screen at the same time is what they're for! thanks. i'll take your advice  If you no longer want to use the frame you could use frame.dispose() If you just want to hide it use frame.setVisible(false). If you extended a Frame and are trying to close it from within use this.dispose or this.setVisible(false)."
208,A,"Best way for a Swing GUI to communicate with domain logic? I have some domain logic implemented in a number of POJOs. I want to write a Swing user interface to allow the user to initiate and see the results of various domain actions. What's the best pattern/framework/library for communications between the UI and the domain? This boils down into: the UI being able to convert a user gesture into a domain action the domain being able to send state/result information back to the UI for display purposes I'm aware of MVC as a broad concept and have fiddled with the Observer pattern (whose Java implementation has some drawbacks if I understand correctly) but I'm wondering if there's an accepted best practise for this problem? Definitely MVC - something like this example which clearly splits things out. The problem with the Swing examples is that they seem to show the MVC all working within the swing stuff which does not seem right to me That article looks really well written; I'll check it out and see how I go.  MVC is fantastic for an individual widget however it gets a little unruly when you have ""pages"" and ""forms"" with lots of widgets. One thing that might be worth looking into (and I'm not endorsing it I haven't actually used it just implemented something very similar for myself) is the Beans Binding Framework (JSR295)  I have used the Observer pattern (using AspectJ magic) in the past with some success but found that unless you were careful it quickly became a cluster.. uhh.. flick? It quickly became hard to manage and most importantly extremely hard to debug. Edit: To expand slightly on my answer we were using SWT not Swing so YMMV. We basically used AspectJ to hook up the transference of data from the UI components to the model objects. These model objects were dumb POJOs. Actual business logic was done by 'watching' the model objects with AspectJ and firing off the required event if they changed. So if you changed a value in a textbox AspectJ would fire and copy that value into a POJO. If that field in the POJO had an event on it for business logic that would then fire. If that logic modified any POJOs (and it could) AspectJ would notice and copy the value from the POJO into the UI component. @Andrew Swan: I believe you mean the _former_ are dumb data stores but the _latter_ may indeed be rich domain types with the full range of behavior/logic. I've re-read my comment and it says what I meant it to say. I think you're confusing POJOs (http://en.wikipedia.org/wiki/POJO) with JavaBeans. The latter are dumb data stores but the former may indeed be rich domain types with the full range of behaviour/logic. The ""plain"" bit of POJO simply indicates no dependency on any specific framework or technology. Yeah my bad. Updated post to reflect :)"
209,A,"""Always on Top"" Windows with Java In Java is there a way to have a window that is ""Always on top"" regardless if the user switches focus to another application? I've searched the web and all of the solutions lean to some sort of JNI interface with native bindings. Truly this can't be the only way to do it?.. or is it? Try this method of the Window class: Window.setAlwaysOnTop(boolean) It works the same way as the default in the Windows TaskManager: switch to another app but it shows always on top. This was added in Java 1.5 Sample code: import javax.swing.JFrame; import javax.swing.JLabel; public class Annoying { public static void main(String[] args) { JFrame frame = new JFrame(""Hello!!""); // Set's the window to be ""always on top"" frame.setAlwaysOnTop( true ); frame.setLocationByPlatform( true ); frame.add( new JLabel("" Isn't this annoying?"") ); frame.pack(); frame.setVisible( true ); } } Window remains on top even when is not active Unfortunately this does not work for me when running a full screen application such as a video game. Anyone know of a way to force it to the top in that situation? @Dream lane I'd probably ask that as a new question This works for a login dialog box but my main application window then goes to the background. I'm open to suggestions. +1 for nothing more than the ""Isn't this annoying"" quip. @MMJZ haha true. Actually I'm surprised I didn't do it for the `args` declaration. I **always** use space after parenthesis. This is a very very old habit that I develop back in the days I used notepad to program. Double clicking on a word would select the parenthesis if there is no space between which was very annoying because I had to delete them afterwards if what I intended to do was re-use the variable somewhere else. This is like the first code I've seen anywhere ever that pads out boolean parameters with spaces. you would think a simple search for ""java application always on top"" on would have this answer but it couldn't find it. Thanks. Guess what. Now it does!! :) It brings you here! http://www.google.com/search?&q=java+application+always+on+top This is simple and awesome. I was also looking for something like this but didn't know they implemented this in Java 1.5. Thanks for posting.  From my observation I found that AlwaysOnTop privilege is given to the latest process which requested to be always on top. So if you have an application which setAlwaysOnTop(true) and later another application uses this option the privilege is given to the second application. In order to work around this I have set the setAlwaysOnTop(false) and again setAlwaysOnTop(true) whenever any window comes on top of the current window. I've checked it with wordweb in windows. WordWeb is one of the applications which uses AlwaysOnTop option from the OS I'm not sure about if it works properly with your game scenario. Warning: I'm not aware of the side effects. Here is the code example: import java.awt.event.*; import javax.swing.*; public class MainWindow extends JFrame implements WindowFocusListener { public MainWindow() { addWindowFocusListener(this); setAlwaysOnTop(true); this.setFocusable(true); // this.setFocusableWindowState(true); panel = new JPanel(); //setSize(WIDTHHEIGHT); setUndecorated(true); setLocation(XY); setExtendedState(MAXIMIZED_BOTH); setVisible(true); } public void windowGainedFocus(WindowEvent e){} public void windowLostFocus(WindowEvent e) { if(e.getNewState()!=e.WINDOW_CLOSED){ //toFront(); //requestFocus(); setAlwaysOnTop(false); setAlwaysOnTop(true); //requestFocusInWindow(); System.out.println(""focus lost""); } } private JPanel panel; private static final int WIDTH = 200; private static final int HEIGHT = 200; private static final int X = 100; private static final int Y = 100; public static void main(String args[]){ new MainWindow();} }"
210,A,"Close one JFrame without closing another? I want to display two (or more) JFrames at the same time. When I close one of them (use the default close button) the other frames should still be visible. How can I do that? Does it help you ? import java.awt.BorderLayout; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.SwingUtilities; public class TwoJFrames { public static void main(String[] args) { int nb = 4; if (args != null && args.length > 0) { nb = Integer.parseInt(args[0]); } final int frameCount = nb; SwingUtilities.invokeLater(new Runnable() { public void run() { for (int i = 0; i < frameCount; i++) { JFrame frame = new JFrame(""Frame number "" + i); frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); JPanel p = new JPanel(new BorderLayout()); p.add(new JLabel(""Click on the corner to close..."") BorderLayout.CENTER); frame.setContentPane(p); frame.setSize(200 200); frame.setLocation(100 + 20 * i 100 + 20 * i); frame.setVisible(true); } } }); } } that's useful  thank you!  EDIT: If I understand your edited question then your application terminates when you close a JFrame even if there are others open. If this is the case make sure to use setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); on your JFrame when initializing not setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); DISPOSE_ON_CLOSE will terminate your application when the last JFrame is closed. EXIT_ON_CLOSE will terminate your application as soon as that JFrame is closed. HIDE_ON_CLOSE (default) will not terminate your application even if all JFrames are hidden. You can use setVisible(false) on your JFrame if you want to display the same frame again. Otherwise call dispose() to remove all of the native screen resources. If that's not what you need please edit your post to provide some more information about how and why you want to close the frame. thanksbut i close the window with the close-button at the upper-right corner. It doesn't use setVisible(false) definitely and must stop the thread. I think i must override some mothed i don't know which mothed but i believe it isn't the closing mothed. I'm not sure what you try to achieve could you please edit your question and add some information about what you try to do and what does not work? i edit the question thanks that's what i want ! thank you !"
211,A,"Extra button on title bar for Swing GTK L&F Anyone know of anyway to add an extra button next to the general maximize minimize restore and close button on the title bar in Swing GTK L&F? Thanks much. You can also try to make the window ""borderless"" and make your own ""titlebar"" (adding it on top of the JFrame). Of course you have to construct all the buttons on your own and emulate all other titlebar functions. The result will be cross-platform and it will work on all L&F regardless if GTK+ or not.  I think you're going to need a lot of looking at the source. Probably forcing you down the clone-and-own route. GTK is particularly difficult because the emulated engine reads look descriptions from XML files. So you are going to need some heuristics to guess where to place the button given the locations of others. Of course you could assume a particularly look and slap a button down in a fixed position."
212,A,"How to get a correct visible rect during a validateTree? First to describe the problem: During a re-layout due to a change in width or height Java's ScrollPaneLayout requests the preferredSize of it's children BEFORE setting the bounds of it's viewport. On Text-Components calling getPreferredSpan can change the layout since this getPreferredSpan calls setSize internally. The effect is that no view (extending javax.swing.text.View) can for sure retrieve the real size of it's parent Component in this situation. A getVisibleRect will fail in this situate as the bounds of the viewport are not yet set. Checking the validity of the text component to block the layout process is not an option as it is already valiid in this scenario. So the question is: is there a possibility to find out whether the bounds of a JComponent are up to date? no. idea.... :P Sorry no idea either. added ""swing"" tag ... This question is very confusing. would you clear it for us? I would not worry about this. The need to get the parent component's size from a child one is a good indicator of an incorrect app design. I mean - do you really have to solve this problem? What is the background? Maybe you could subclass ScrollPanel and set a custom property like ""com.mycompany.BoundsSet"" to false when invalidated and set it true when the bounds are set. Then the view can check this property and if it's false revalidate the ScrollPanel and return the last know preferred size. Hopefully then the ScrollPane will proceed and set it's bounds then the revalidate event will come down the pipe and the flag will have been cleared allowing you to trust the getBounds(). Or something like that.  Can't you simply use Component#isValid method. If the method returns true then it means that the component is correctly sized and positioned within its parentcontainer and all its children are also valid."
213,A,Select all data when start editing JTable Cell I'm trying for a long time to make a table that works like Excell do. It means when user starts to insert data into the cells the content into them is selected and changed by the new data inserted. I don't know how to do it I googled it a lot and didn't give any good idea. All the best! You should look at extJS. There is a pretty steep learning curve though.. I found extJS working with java script and it is GPL liscence. I need at least a LGPL Liscence.  Note that there is also another possibility you can override JTable#prepareEditor like the following: @Override public Component prepareEditor(TableCellEditor editor int row int column) { Component c = super.prepareEditor(editor row column); if (c instanceof JTextComponent) { ((JTextComponent) c).selectAll(); } return c; } this doesn't work at all  You can create a custom TableCellEditor for your table. This class will have an instance variable of a TextField lets call it textField. Then the getTableCellEditorComponent method could look like this: public Component getTableCellEditorComponent(JTable table Object value boolean isSelected int row int column ) { textField.setText(value.toString()); textField.selectAll(); return textField; } I don't think this solution will work in all cases... try wrapping selectAll in SwingUtilities.invokeLater(new Runnable(){public void Run(){textField.selectAll();}}); And don't forget to make textField final. Very good solution. Thank you!  If your objective is to empty the cell when editing begins no need to use selectAll(). Simply set value to null. Implementation example: (overriding getTableCellEditorComponent() in DefaultCellEditor) TableCellEditor myCellEditor = new DefaultCellEditor(new JTextField()){ @Override public Component getTableCellEditorComponent(JTable table Object value boolean isSelected int row int column) { // empty the cell on edit start delegate.setValue( (editorComponent instanceof JTextField)? null : value); return editorComponent; } };  The solution above doesn't work when editing is started by a mouse click. For some people the solution is to call selectAll() in an invokeLater() so that the text gets selected after the mouse events have been dispatched but this isn't working for me (possibly because I'm using Substance look and feel?) Swing internals get a mouseReleased() event later and change the caret again as shown in this stack trace: at javax.swing.text.JTextComponent.fireCaretUpdate(Unknown Source) at javax.swing.text.JTextComponent$MutableCaretEvent.fire(Unknown Source) at javax.swing.text.JTextComponent$MutableCaretEvent.mouseReleased(Unknown Source) at java.awt.AWTEventMulticaster.mouseReleased(Unknown Source) at java.awt.AWTEventMulticaster.mouseReleased(Unknown Source) at java.awt.AWTEventMulticaster.mouseReleased(Unknown Source) at java.awt.AWTEventMulticaster.mouseReleased(Unknown Source) at java.awt.AWTEventMulticaster.mouseReleased(Unknown Source) at java.awt.Component.processMouseEvent(Unknown Source) at javax.swing.JComponent.processMouseEvent(Unknown Source) at java.awt.Component.processEvent(Unknown Source) at java.awt.Container.processEvent(Unknown Source) at java.awt.Component.dispatchEventImpl(Unknown Source) at java.awt.Container.dispatchEventImpl(Unknown Source) at java.awt.Component.dispatchEvent(Unknown Source) at javax.swing.plaf.basic.BasicTableUI$Handler.repostEvent(Unknown Source) Here is my solution: Listen for caret position changes and the first time the selection goes from all selected to none selected after cell editing has started call selectAll() again. The caret listener can be installed by a custom cell editor as shown here or in an overridden editCellAt() method in a custom JTable. private class SelectAllCellEditor extends DefaultCellEditor { public SelectAllCellEditor( JTextField tf ) { super( tf ); } /** * Flag to ensure we only install the caret listener on the editor once. */ boolean listenerInstalled = false; /** * Primes the caret listener to override deselection when the first mouseReleased() event is reposted to the editor. */ boolean overrideDeselection = false; @Override public Component getTableCellEditorComponent( JTable table  Object value  boolean isSelected  int row  int column ) { final JFormattedTextField tf = ( JFormattedTextField ) super.getTableCellEditorComponent( table  value  isSelected  row  column ); if( !listenerInstalled ) { tf.addCaretListener( new CaretListener( ) { int lastDot = 0; int lastMark = 0; @Override public void caretUpdate( CaretEvent e ) { if( overrideDeselection ) { int length = tf.getText( ) == null ? 0 : tf.getText( ).length( ); boolean wasAllSelected = ( lastDot == 0 && lastMark == length ) || ( lastDot == length && lastMark == 0 ); boolean nowNoneSelected = ( e.getDot( ) == 0 && e.getMark( ) == 0 ) || ( e.getDot( ) == length && e.getMark( ) == length ); if( wasAllSelected ) { // don't try to override again until the next time cell editing is started overrideDeselection = false; // only re-select all if the selection went to none; otherwise the user clicked the cell and dragged to select part of the text if( nowNoneSelected ) { tf.selectAll( ); } } } lastDot = e.getDot( ); lastMark = e.getMark( ); } } ); listenerInstalled = true; } // Prime the caret listener to override deselection when the first mouseReleased() event is reposted to the editor. overrideDeselection = true; tf.selectAll( ); return tf; } }  Creating a custom editor works fine if you only ever have String data in the table and only need a single editor. However if you have multiple different types of data like String Integer Double currencies percentages etc which all use a JTextField as an editor then you need to create multiple custom editors. You can read up on the Table Select All Editor for another possible solution. Great Thanks your solution works perfect for me but i want to show cursor after edit how can it possible. It requires Clicking after making edit to show Cursor. @Camickr
214,A,"Java: Swing Libraries & Thread Safety I've often heard criticism of the lack of thread safety in the Swing libraries. Yet I am not sure as to what I would be doing in my own code with could cause issues: In what situations does the fact Swing is not thread safe come into play ? What should I actively avoid doing ? If you're using Java 6 then SwingWorker is definately the easiest way to deal with this. Basically you want to make sure that anything that changes a UI is performed on the EventDispatchThread. This can be found by using the SwingUtilities.isEventDispatchThread() method to tell you if you are in it (generally not a good idea - you should know what thread is active). If you aren't on the EDT then you use SwingUtilities.invokeLater() and SwingUtilities.invokeAndWait() to invoke a Runnable on the EDT. If you update UI's not on the EDT you get some incredibly strange behaviour. Personally I don't consider this a flaw of Swing you get some nice efficiency by not having to synchronize all of the threads to provide a UI update - you just need to remember that caveat.  It's not just that Swing is not thread-safe (not much is) but it's thread-hostile. If you start doing Swing stuff on a single thread (other than the EDT) then when in cases where Swing switches to the EDT (not documented) there may well be thread-safety issues. Even Swing text which aims to be thread-safe isn't usefully thread-safe (for instance to append to a document you first need to find the length which might change before the insert). So do all Swing manipulations on the EDT. Note the EDT is not the thread the main is called on so start your (simple) Swing applications like this boilerplate: class MyApp { public static void main(String[] args) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { runEDT(); }}); } private static void runEDT() { assert java.awt.EventQueue.isDispatchThread(); ... +1 for thread-hostile  Here's a pattern for makng swing thread-freindly. Sublass Action (MyAction) and make it's doAction threaded. Make the constructor take a String NAME. Give it an abstract actionImpl() method. Let it look like.. (pseudocode warning!) doAction(){ new Thread(){ public void run(){ //kick off thread to do actionImpl(). actionImpl(); MyAction.this.interrupt(); }.start(); // use a worker pool if you care about garbage. try { sleep(300); Go to a busy cursor sleep(600); Show a busy dialog(Name) // name comes in handy here } catch( interrupted exception){ show normal cursor } You can record the time taken for the task and next time your dialog can show a decent estimate. If you want to be really nice do the sleeping in another worker thread too.  invokeLater() and invokeAndWait() really MUST be used when you are doing any interaction with GUI components from any thread that is NOT the EDT. It may work during development but like most concurrent bugs you'll start to see weird exceptions come up that seem completely unrelated and occur non-deterministly - usually spotted AFTER you've shipped by real users. Not good. Also you've got no confidence that your app will continue to work on future CPUs with more and more cores - which are more prone to encountering weird threading issues due to them being truely concurrent rather than just simulated by the OS. Yes it gets ugly wrapping every method call back into the EDT in a Runnable instance but that's Java for you. Until we get closures you just have to live with it.  This is one of those questions that makes me glad I purchased Robinson & Vorobiev's book on Swing. Anything that accesses the state of a java.awt.Component should be run inside the EDT with three exceptions: anything specifically documented as thread-safe such as repaint() revalidate() and invalidate(); any Component in a UI that has not yet been realized; and any Component in an Applet before that Applet's start() has been called. Methods specially made thread-safe are so uncommon that it's often sufficient to simply remember the ones that are; you can also usually get away with assuming there are no such methods (it's perfectly safe to wrap a repaint call in a SwingWorker for example). Realized means that the Component is either a top-level container (like JFrame) on which any of setVisible(true) show() or pack() has been called or it has been added to a realized Component. This means it's perfectly fine to build your UI in the main() method as many tutorial examples do since they don't call setVisible(true) on the top-level container until every Component has been added to it fonts and borders configured etc. For similar reasons it's perfectly safe to build your applet UI in its init() method and then call start() after it's all built. Wrapping subsequent Component changes in Runnables to send to invokeLater() becomes easy to get right after doing it only a few times. The one thing I find annoying is reading the state of a Component (say someTextField.getText()) from another thread. Technically this has to be wrapped in invokeLater() too; in practice it can make the code ugly fast and I often don't bother or I'm careful to grab that information at initial event handling time (typically the right time to do it in most cases anyway). ""Component in a UI that has not yet been realized"" -- no longer recommended practice. You should always work with your components on EDT regardless of whether they are realized or not. Assuming you're right it makes me wonder why they'd recommend this. It's a substantial change given how it would affect huge amounts of tutorial code. ...In fact I can find no Java 6 tutorials making this recommendation; sample code still builds UIs in the main thread. Do you have a source for this? @Paul 'tis true see http://stackoverflow.com/questions/491323/is-it-safe-to-construct-swing-awt-widgets-not-on-the-event-dispatch-thread/491377#491377 and more. It's retrospective and it's a pain. Wow. Nice find. This'll affect a lot of my older code. Oddly I haven't written much UI code in the past five years come to think of it and when I did I never had a deadlock so I never noticed.  Never do long running tasks in response to a button event etc as these are on the event thread. If you block the event thread the ENTIRE GUI will be completely unresponsive resulting in REALLY pissed off users. This is why Swing seems slow and crusty. Use Threads Executors and SwingWorker to run tasks NOT ON THE EDT ( event dispatch thread). Do not update or create widgets outside of the EDT. Just about the only call you can do outside of the EDT is Component.repaint(). Use SwingUtilitis.invokeLater to ensure certain code executes on the EDT. Use EDT Debug Techniques and a smart look and feel (like Substance which checks for EDT violation) If you follow these rules Swing can make some very attractive and RESPONSIVE GUIs An example of some REALLY awesome Swing UI work: Palantir Technologies. Note: I DO NOT work for them just an example of awesome swing. Shame no public demo... Their blog is good too sparse but good Good points. Could you say me why is swing not thread safe like the AWT? There's also an invokeAndWait() method but use invokeLater() whenever possible. Use invokeAndWait if you want deadlocks. ;) Or are paid by the hour. :-) Agreed. Invoke and wait is very scary. Consider this: http://blog.palantirtech.com/2008/02/21/invokeandnotwaiting/  Note that not even the model interfaces are thread safe. The size and the content are queried with separate get methods and so there is no way of synchronizing those. Updating the state of the model from another thread allows for it to at least paint a situation where size is still bigger (table row is still in place) but the content is no longer there. Updating state of the model always in EDT avoids these.  The phrase 'thread-unsafe' sounds like there is something inherently bad (you know... 'safe' - good; 'unsafe' - bad). The reality is that thread safety comes at a cost - threadsafe objects are often way more complex to implement (and Swing is complex enough even as it is.) Also thread-safety is achieved either using locking (slow) or compare-and-swap (complex) strategies. Given that the GUI interfaces with humans which tend to be unpredictable and difficult to synchronize many toolkits have decided to channel all events through a single event pump. This is true for Windows Swing SWT GTK and probably others. Actually I don't know a single GUI toolkit which is truly thread-safe (meaning that you can manipulate its objects' internal state from any thread). What is usually done instead is that the GUIs provide a way to cope with the thread-unsafety. As others noted Swing has always provided the somewhat simplistic SwingUtilities.invokeLater(). Java 6 includes the excellent SwingWorker (available for previous versions from Swinglabs.org). There are also third party libraries like Foxtrot for managing threads in Swing context. The notoriety of Swing is because the designers have taken light handed approach of assuming that the developer will do the right thing and not stall the EDT or modify components from outside the EDT. They have stated their threading policy loud and clear and it's up to the developers to follow it. It's trivial to make each swing API to post a job to the EDT for each property-set invalidate etc. which would make it threadsafe but at the cost of massive slowdowns. You can even do it yourself using AOP. For comparison SWT throws exceptions when a component is accessed from a wrong thread.  Actively avoid doing any Swing work at all except on the event dispatching thread. Swing was written to be easy to extend and Sun decided a single-threaded model was better for this. I have had no issues whilst following my advice above. There are some circumstances where you can 'swing' from other threads but I've never found the need.  For more details about threading Taming Java Threads by Allen Holub is an older book but a great read. Holub really promotes responsive UI and details examples and how to alleviate problems. http://www.amazon.com/Taming-Java-Threads-Allen-Holub/dp/1893115100 http://www.holub.com/software/taming.java.threads.html Love the ""If i was king"" section in the end there.  An alternative to using intelligent skins like substance is to create the following utility method: public final static void checkOnEventDispatchThread() { if (!SwingUtilities.isEventDispatchThread()) { throw new RuntimeException(""This method can only be run on the EDT""); } } Call it in every method you write that is required to be on the event dispatch thread. An advantage of this would be to disable and enable system wide checks very quickly eg possibly removing this in production. Note intelligent skins can of course provide additional coverage as well as just this."
215,A,Increasing Cell Height with multilinewithout Scrollbar in Jtable Hai I am developing a standalone application using Java in which I am using a JTable.The problem is when I enter a multiline textthe entire text is not displayed in the cell while I am typing.I get a scroll when I type a multiline text.How can I get my whole text to be visible while I type.i.e How can I increase my Cell width in JTable while I am Typing. But the entire text will displayed only when I click out of that Cell.Can someone help me how to solve this problem Thank You Chaithu You should try a custom TableCellRenderer with JTextArea for example. For typing you'll probably need similar TableCellEditor. An example can be seen at Java Specialists' Newsletter : Multi-line cells in JTable in JDK 1.4+. @chaithu Did you het it to dysplay the whole text while typing? Hai Thanks for ur answer I have used the code suggested by you.I am sending my code.Its working but he whole text is not displayed while typing in the cell.find my code give me the suggestion where to change the code so that whole text displays in the cell with out scroll after the first line find my code in this link http://forums.sun.com/thread.jspa?messageID=10822453#10822453
216,A,"Why shouldn't you extend JFrame and other components? I've seen this come up here a few times but in the postings I've seen no one explained it. Why shouldn't I extend JFrame (or any component)? Are there conditions where I should extend a component or is this a firm rule that you don't? Prefer composition over inheritance. All the usual reasons. Composition forces less dependencies between code. Swing and event AWT components are hideously complicated. You don't want to be getting into that mess. You can easily override methods accidentally. In cases where you do need to override methods it's difficult to see where that is done if it is amongst normal code. isValid is a classic for overriding accidentally  I don't see the problem as long as you are extending the class and can preserve the ""is-a"" aspects of inheritance. When you extend a JPanel but your new object is not a true specialization of JPanel that is where you get into trouble. But if you create a new SpeciallyFormattedJLabel that extends JLabel I see no problem with that.  Generally speaking extending the component tends to be done strictly to use the component. This severely limits your options in unnecessary ways in terms of design so that your classes can't extend different classes you can't hide the JFrame's methods causing it to be more difficult to maintain and easier to trigger unexpected bugs when using the class. Typically the intention is strictly to use the class to draw a frame and composition is preferred over inheritance. That being said subclassing should be fine when you intend your subclass to add project-specific functionality to the Frame (such as convenience methods and the like) where the subclass would be used instead of the Frame itself but used as a frame in general not as a view of a specific frame in the application.  There are (as said by everyone else) lots of problems that could surface from extending components such as JFrames. I was facing these problems but posted some sample code that I used to solve my problems. I was having lots of difficulty giving focus to specific JFrames to pull them to the front. My solution utilizes classes that extend JFrame and a class Dashboard which implements WindowListener. How it works.. Basically there is a Dash class which runs the Dashboard class. This Dashboard class creates ExtendedFrame classes to open multiple frames. You can then pull specific frames to focus by accessing the ArrayList frames. I'm not sure why it bugs out when you store things differently but I believe it has to do something with the JFrames being children of the window. When the JFrames are created in a separate class (such as DashboardFrameManager) they don't have Dashboard as a parent. The ability to gain focus is gone. Try adding a key listener to Dashboard to access the JFrames by pressing a key (I also implemented a Queue to cycle through). Keep in mind that I didn't include any imports or the rest of the methods you need to implement WindowListener. public class Dash { public static void main(String[] args) { javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { Dashbored c = new Dashbored(); } }); } } public class Dashbored implements WindowListener { private static ArrayList<JFrame> frames; private JFrame frame; public Dashbored() { frame = new JFrame(""go go gadget""); frames = new ArrayList<JFrame>(); frame.addWindowListener(this); addList( frame.getContentPane() ); frame.setSize(300300); frame.pack(); frame.setVisible(true); simulateFramesOpening(); } public static void addList(Container c) { c.setLayout(new GridBagLayout()); JButton jbnButton; GridBagConstraints gbc = new GridBagConstraints(); gbc.fill = GridBagConstraints.HORIZONTAL; jbnButton = new JButton(""Button 1""); gbc.weightx = 0.5; gbc.gridx = 0; gbc.gridy = 0; c.add(jbnButton gbc); return; } public static void simulateFramesOpening() { //make 7 frames with titles 1-7 for(int i = 0; i < 7; i++) { //this is our extended frame class //which can create and populate a JFrame FrameExtended z = (new FrameExtended(i+1)); //add the frame to our list of frames frames.add((JFrame) z.getFrame()); } System.out.println(""changing it!""); //the # in the ArrayList of which JFrame to give focus (0-6) int frameToFocus = 4; // <-- arbitrary gets JFrame with title ""5"" //both requestFocus and toFront work frames.get(frameToFocus).requestFocus(); frames.get(frameToFocus).toFront(); } } public class FrameExtended extends JFrame{ private JFrame j; public FrameExtended(int i) { j = new JFrame( """"+i+"""" ); j.setSize(375500); j.setLocation(360+75*i 150+50*i); //j.pack(); j.setVisible(true); } public JFrame getFrame() { return j; } } welcome to the forum :-) but this is not an answer to the question ask here ...  If your application REALLY is just a JFrame go ahead and extend it. However it's best to use object composition rather than inheritance if you are simply using a JFrame. If your object extends some other object you would have no choice in the matter as an example. @kd304 *""to get paint behavior.""* We can do 'paint behavior' in a `BufferedImage`.. Agreed. This is swing you have to extend components to get paint behavior.  I know this is an old post but I just came across it and I gotta tell you... extending limited my options of calling certain actions of the object. I'm actually rewriting some parts of the code now to get rid of the damage that extended has caused me. Unless I'm writing a one-file program I'm not going to use extended again."
217,A,"Swing Overlapping components I have two AWT components in a Frame Panel A and Panel B. I would like panel A to be sized to the height width of the frame (and maintain that size on frame resize) but I would like panel B to overlap A. B will be at a fixed position (00 to make it easier) with a fixed height and width. I'm not sure what kind of layout manager I would need to make this work. If I use a null layout I think I would have to manage the resizing of panel A myself but it would make the sizing of panel B relatively easy. Any thoughts on how to accomplish this? thanks Jeff You said that panel A's width should match the frame's width- what about its height? Yes basically I want A to fill the entire Frame both height and width. Maybe I'm missing something. If B is fixed size and is at (00) and A runs the full width what's the use of having B overlap A? You will never see anything that is placed under B. I can't think of any of the default layout managers but Orielly has this one you can use: relative layout manager (see source code link) with documentation. I haven't used it in a long while but it should beat managing the layout yourself. Eventually I will make B not fixed such that it can move to different locations. In the first pass I'm just keeping it at 00. You are correct though I won't see that piece that B covers but that is ok. Screen real estate is at a premium and B is small so I'd rather cover up a small section of A than use something like BorderLayout and waste a large part of the screen I won't use.  Take a look at JLayeredPanes. Here is a tutorial. edit: If panelA is an AWT component you will be hard pressed to get panelB to overlap. From Sun's article entitled Mixing Heavy and Light Components: Do not mix lightweight (Swing) and heavyweight (AWT) components within a container where the lightweight component is expected to overlap the heavyweight one. However if you are looking to have panelA fill the Frame completely why not add panelB as a component of panelA? Edit2: If you can make panelB a heavyweight component then you can use the JLayeredPane. Here is a quick mockup that shows how: public static void main(String[] args){ new GUITest(); } public GUITest() { frame = new JFrame(""test""); frame.setSize(300300); addStuffToFrame(); SwingUtilities.invokeLater(new Runnable(){ public void run() { frame.setVisible(true); } }); } private void addStuffToFrame() { Panel awtPanel = new Panel(); awtPanel.setBackground(Color.blue); //here you can fool around with the pane: //first you can see how the layered pane works by switching the //DEFUALT_LAYER and PALLETTE_LAYER back and forth between the two panels //and re-compiling to see the results awtPanel.setSize(200300); frame.getLayeredPane().add(awtPanel JLayeredPane.DEFAULT_LAYER); //next you comment out the above two lines and //uncomment the following line. this will give you the desired effect of //awtPanel filling in the entire frame even on a resize. //frame.add(awtPanel); Panel awtPanel2 = new Panel(); awtPanel2.setBackground(Color.red); awtPanel2.setSize(300200); frame.getLayeredPane().add(awtPanel2JLayeredPane.PALETTE_LAYER); } It didn't really occur to me to use JLayeredPane with AWT components but this works thanks. I should have mentioned that JPanel A is actually an AWT component my mistake. I'll edit the post. I can make B AWT as well no problems there. The issue is the PanelA (which I don't have control over) is not a Container so it doesn't have the add methods. I want to just add them both to some parent container but that's where I'm not sure about how to lay them out properly so A fills the entire container but B just fills a portion of it. Jeff I have updated my answer. Please take a look. Sorry got away from this for a little while. I'll check this out in a little while and upvote/accept if it works. Thanks!  Your best bet is to have your own LayoutManager. The easiest way is probably to extend or proxy BorderLayout and have a specific case to layout panel B."
218,A,"Show/Hide JMenuItems in a JPopupMenu based on a JTree's selection I have a JTree which displays a JPopupMenu when I right click nodes in the JTree. What is the best way to hide/show or enable/disable certain JMenuItems in my JPopupMenu based on the node selected in the JTree? The first solution that came to mind was to add a TreeSelectionListener to the JTree for the 'value changed' event. In the event handling code I would use the TreeSelectionEvent's getNewLeadSelectionPath() method to get the path of the most recent selection and use the resulting TreePath object's getLastPathComponent() to get the selected node. From here I would have a series of IF statements that access my JPopupMenu object and perform the modifications necessary to hide/show specific JMenuItems. However something feels off about this and so I decided I would ask SO if there was a better approach. The way that I chose to tackle this within my own app was to use the ""userObject"" property of the DefaultMutableTreeNode class which allows you to just store any data you want along with your node. I have a variety of types of things that extend from an abstract base class which defines a ""createPopupMenu()"" method. Then in the selection listener (just as you described in your question) I get the user object and ask it to create a popup menu appropriate for the selected object and display that.  Getting the selected tree node is straight forward and should work as you described it. To modify the popup menu I would recommend using Actions. This way you wouldn’t have to modify your live menu and could also add e.g. a JToolBar that contains the same actions that react the same way the items in your menu do."
219,A,"Handling Swing focus events with Jython Jython 2.5 I'm trying to bind a method to the focusGained event of a JText control but all the examples that I found are Java samples not Jython. Here's the code I want to run a custom method when each text control gains focus (to select all the control's text for instance) from javax.swing import * from java.awt import * class Test(JFrame): def __init__(self): JFrame.__init__(self 'JDesktopPane and JInternalFrame Demo' size=(600 300) defaultCloseOperation=JFrame.EXIT_ON_CLOSE) self.desktop = JDesktopPane() self.contentPane.add(JScrollPane(self.desktop)) # This is the same as self.getContentPane().add(...) frame = JInternalFrame(""Frame"" 1 1 1 1 size=(400 400) visible=1) panel = JPanel() self.label = JLabel('Hello from Jython') panel.add(self.label) self.textfield1 = JTextField('Type something here'15) # self.textfield1.addFocusListener(event.FocusListener()) # ??? panel.add(self.textfield1) self.textfield2 = JTextField('and click Copy' 15) panel.add(self.textfield2) copyButton = JButton('Copy'actionPerformed=self.noAction) panel.add(copyButton) frame.add(panel) frame.pack() self.desktop.add(frame) frame.setSelected(1) frame.moveToFront() def noAction (self event): pass if __name__ == '__main__': test = Test() test.setLocation(100 100) test.show() Cool'n simple. Thank you! I think that the idiom is {var} = {constructor}({param} {event}={function}) tf = JTextField('1.23' focusLost=tf_focus_lost) Other alternative: from java.awt.event import FocusListener class Enfoque(FocusListener): '''Add dynamically''' # Left unimplemented # def focusGained(self event): # print 'tf_b Enfoque.focusGained' def focusLost(selfevent): print 'tf_b Enfoque.focusLost' enf = Enfoque() tf_b = JTextField('2.34') tf_b.addFocusListener(enf)  I was just trying to figure this out yesterday myself...tested and works: from javax.swing import * from java.awt import * class Test(JFrame): def __init__(self): JFrame.__init__(self 'JDesktopPane and JInternalFrame Demo' size=(600 300) defaultCloseOperation=JFrame.EXIT_ON_CLOSE) self.desktop = JDesktopPane() self.contentPane.add(JScrollPane(self.desktop)) # This is the same as self.getContentPane().add(...) frame = JInternalFrame(""Frame"" 1 1 1 1 size=(400 400) visible=1) panel = JPanel() self.label = JLabel('Hello from Jython') panel.add(self.label) self.textfield1 = JTextField('Type something here'15focusGained=self.myOnFocus) panel.add(self.textfield1) self.textfield2 = JTextField('and click Copy' 15) panel.add(self.textfield2) copyButton = JButton('Copy'actionPerformed=self.noAction) panel.add(copyButton) frame.add(panel) frame.pack() self.desktop.add(frame) frame.setSelected(1) frame.moveToFront() def myOnFocus(selfevent): print ""testing..."" def noAction (self event): pass if __name__ == '__main__': test = Test() test.setLocation(100 100) test.show() Excellent thank you!"
220,A,how to focus a JFrame? I am writing a small game with one JFrame that holds the main game and another JFrame that displays the score. the problem is when I am done constructing them the score JFrame always ends up focused! I have tried calling scoreDisplay.toFront() scoreDisplay.requestFocus() and even: display.setState(JFrame.ICONIZED); display.setState(JFrame.NORMAL); Is there any way to make this work? Thanks in advance john murano Toggle alwaysOnTop See here: http://forums.sun.com/thread.jspa?threadID=5124278 Read about toFront in the API http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Window.html#toFront Some platforms may not permit this VM to place its Windows above windows of native applications or Windows of other VMs. On Windows OS for example toFront causes the icon on the Task Bar to flicker but the window stays in the back. The only think that will force the window to front is setAlwaysOnTop. frame.setAlwaysOnTop(true); frame.setAlwaysOnTop(false);  frame.setExtendedState( JFrame.MAXIMIZED_BOTH); frame.setVisible(true); Try the above..  The way that I would do is:  frame.toFront(); frame.setState(Frame.NORMAL); and If you also want have more control on it you should use requestFocuse. BTW here is an example : http://coding.derkeiler.com/Archive/Java/comp.lang.java.gui/2006-06/msg00152.html I tried this and this method does not work. Thanks anyway though!  Have you consider setting the score in the same frame as the game frame? Other possible ( quick and dirty ) option is to create them in reverse order or at least ( if score depends on game ) display them in reverse order. score.setVisible( true ); game.setVisible( true ); My guess is that currently they are: game.setVisible( true ); score.setVisible( true ); Thank you. This solution works perfectly!
221,A,"Multiple Strings colored in different way into the same cell of a JTable Suppose you have a JTable and for each cell you want to display three strings with different color say value1 (red) value2 (blue) value3 (green). I overrode the getTableCellRendererComponent of DefaultTableCellRenderer but setForeground(Color) method gives an unique color for all the string showed in the cell. @Override public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { String s = table.getModel().getValueAt(rowcolumn).toString(); StringTokenizer st = new StringTokenizer(s"" ""); int nToken=st.countTokens(); value1=st.nextToken(); value2=st.nextToken(); value3=st.nextToken(); // so now all the values are blue... setForeground(Color.blue); return super.getTableCellRendererComponent(table value isSelected hasFocus row column); } The default renderer for a cell table is a JLabel. This component supports HTML tags. The easiest solution you can have is to use HTML to render the Strings with different colours. So you can build a String such as:  <html><font color=""blue"">A String</font><font color=""red"">Another String</font></html> And set it to the cell and you don't have to worry about the renderer. Most swing components allow you to use HTML this is not only limited to tables. Another possibility is that you create a class that extends from JComponent and program paintComponent() so it draws these three strings in different colors. Then you can set this component as the renderer. But this is way more complicated. Because the renderer works like a ""stamp"" it will stamp the right colors when the cells are drawn. This is useful if your needs are to for example draw extremely complex and custom graphics on a cell. I would stick with using HTML if you don't have a humongous amount of cells. HTML components in tables gets very slow very quickly. You can cache the components but that gets tricky in anything other than some special cases. The alternative though writing your own JComponent is fast. But tricky to get it right  JIDE provides a StyledLabel as part of their open source Common Layer which is exactly what you want and 10x easier than implementing anything on your own. https://jide-oss.dev.java.net/"
222,A,"jgoodies binding: using a JTextField with a formatted number? I am trying to bind a JTextField to a bean's field that is a double using JGoodies Binding: JTextField myJTextField = ... BeanAdapter adapter = ... Bindings.bind(myJTextField ConverterFactory.createStringConverter(adapter.getValueModel(""amplitude"") new DecimalFormat(""0.00000""))); This works at least in the bean → JTextField direction. In the JTextField → bean direction it has one hitch: if I start typing in the JTextField it takes my update immediately after the first digit after the decimal point messes up the JTextField focus and tweaks my JTextField value. (the problem seems to come from trying to adapt a GUI's String to a model's double) How do I fix this???? sample program that demonstrates this: package com.example.test.gui; import java.awt.GridLayout; import java.beans.PropertyChangeListener; import java.text.DecimalFormat; import java.util.Hashtable; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JSlider; import javax.swing.JTextField; import com.jgoodies.binding.adapter.Bindings; import com.jgoodies.binding.adapter.BoundedRangeAdapter; import com.jgoodies.binding.beans.BeanAdapter; import com.jgoodies.binding.beans.ExtendedPropertyChangeSupport; import com.jgoodies.binding.value.ConverterFactory; public class FloatPointBinding { public static class MyModel { private int x; final private ExtendedPropertyChangeSupport changeSupport = new ExtendedPropertyChangeSupport(this); public void addPropertyChangeListener(PropertyChangeListener x) { this.changeSupport.addPropertyChangeListener(x); } public void removePropertyChangeListener(PropertyChangeListener x) { this.changeSupport.removePropertyChangeListener(x); } static private int clip(int a) { return Math.min(Math.max(a -32768) 32767); } static private int d2i(double a) { return clip((int) Math.floor(a*32768 + 0.5)); } static private double i2d(int a) { return (clip(a)/32768.0); } public void setXCount(int x) { int oldX = this.x; int newX = x; this.x=newX; this.changeSupport.firePropertyChange(""x"" i2d(oldX) i2d(newX)); this.changeSupport.firePropertyChange(""XCount"" oldX newX); } public void setX(double x) { setXCount(d2i(x)); } public double getX() { return i2d(this.x); } public int getXCount() { return this.x; } } public static class MyView extends JFrame { public MyView(MyModel model String title) { super(title); JTextField jtf = new JTextField(); JSlider jsl = new JSlider(); jsl.setMinimum(-32768); jsl.setMaximum(32767); jsl.setMajorTickSpacing(4096); jsl.setPaintTicks(true); Hashtable labelTable = new Hashtable(); labelTable.put( new Integer( -32768 ) new JLabel(""-1"") ); labelTable.put( new Integer( 0 ) new JLabel(""0"") ); labelTable.put( new Integer( 32767 ) new JLabel(""1"") ); jsl.setLabelTable( labelTable ); jsl.setPaintLabels(true); setLayout(new GridLayout()); add(jsl); add(jtf); BeanAdapter adapter = new BeanAdapter(model true); Bindings.bind(jtf ConverterFactory.createStringConverter(adapter.getValueModel(""x"") new DecimalFormat(""0.#####""))); jsl.setModel(new BoundedRangeAdapter(adapter.getValueModel(""XCount"") 0 -32768 32767)); } } public static void main(String[] args) { MyModel model = new MyModel(); MyView view = new MyView(model ""FloatPointBinding""); view.pack(); view.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); view.setVisible(true); } } I am not sure if this is what you are trying to solve but if you change the binding to only commit on focus lost you shouldn't have that issue anymore. Just specify true as the third argument to the bind method below: Bindings.bind(jtf ConverterFactory.createStringConverter(adapter.getValueModel(""x"") new DecimalFormat(""0.#####"")) true); Oh -- ok I didn't realize you could do that. It's not as nice as the instant-update but much more reliable + probably the right way to handle it. Thanks!"
223,A,Listening for new child components in Swing I have a specific requirement that all children of a particular JComponent have double buffering turned off. I can recurse through it easily enough and disable them when needed but I'd like to detect the addition of new children components regardless of their position in the hierarchy and disable it then. I've taken a look at addHierarchyChangeListener but it seems to only detect changes in parents not children. Can someone point me down the right path? I think you need a RecursiveContainerListener that could execute a common operation whenever any component added or removed in a given parent component. Please find the code for it here(RecursiveContainerListener.java). It does exactly what you want. All you need is to change/override handleAdd and handleRemove methods to turn of double buffering. And finally you simply add it to your parent: parentComponent.add(new RecursiveContainerListener()); No need to explicitly add listener to each child :) Um RecursiveContainerListener doesn't support that constructor and ultimately it is adding a ContainerListener to all components. Though it is an interesting bit of code. You have to modify it a bit to suit your needs. You can completely remove the constructor and member field listener and keep everything else same. And finally override the handleAdd/handleRemove methods :) Anyway the intention was to give another approach of doing thing.  You are looking for a ContainerListener. Here is Sun's demo. +1 Exactly what I was looking for. Thanks!
224,A,"approach to build a simple Calendar in Java Swing I need a simple way to implement a Calendar (similar to google calendar) in java. The calendar must display Monday - Sunday at the top and each hour as a row.  Monday | Tuesday | Wednesday 08:00 09:00 10:00 11:00 How would one create a calendar in Swing like that? I'm using Netbeans IDE. Each column should be able to hold some text. Could I just use the table component in swing? If so can i modify it to meet my needs? You would probably want to think about using JTable. You can use an AbstractTableModel to define the dimensions of the table as well as some other properties then you can fill in the top row and first column with the desired values. You can also set certain parts of the table editable by your users in the event that you wanted to be able to input data into the calendar. For more info take a look at the JTable documentation. Okey I will try them both and see which one fits my needs. I will need a mouse over effect and also actually a drag n drop functionallity to move events. It doesn't need to look good in any way just work :) Don't do it! JTable sucks particularly for rich content. I'd recommend using a JPanel with a GridLayout with JPanels for each panel. JTables approach of using renderers for each cell and switching to editors will be wholly innappropriate for a calendar component. ""Rich content""? The OP specified that each cell had to hold text not images or anything else. I think using a JTable would be the simpler solution for this problem given that there's no need to do the hard work of instantiating bunches of JPanels in a GridLayout then dealing with making them editable somehow. For rich content yes a bunch of JPanels might beat out a JTable. But for a plain text calendar I don't see why a JTable is inappropriate. True but they also mentioned that it should be similar to Google Calendar which goes way beyond JTable's functionality. Also JTable still sucks. What happens when the OP needs to change the cursor for a particular cell add a mouseover effect use wrapped text or have a complex editor containing more than one Component? They'll run into JTable's myriad of shortcomings."
225,A,"Java Swing revalidate() vs repaint() I'm putting together a Swing application where I often want to replace the contents of a JPanel. To do this I'm calling removeAll() then adding my new content then calling revalidate(). However I'm finding that the old content is still actually visible (though obscured by the the new content). If I add a call to repaint() in addition to revalidate() it works as expected. I'm sure on other occasions I've experienced that just calling revalidate() is enough. So basically my question is - should I need to call both functions and if not when should I call each of them? I suspect you need to call repaint() and perhaps not call revalidate(). The former tells Swing that an area of the window is dirty; the latter tells the layout manager to recalculate the layout. This should cause children of the panel to repaint but may not cause the panel itself to do so (see this for the list of repaint triggers). On a more general note: rather than reusing the original panel I'd recommend building a new panel and swapping them at the parent. This didn't help. :( But the second answer does. I was having the same issue on my program as well (http://stackoverflow.com/questions/21137700/calling-setvisibletrue-on-an-already-visible-frame) Calling revalidate() was necessary but repaint() was not - and all I was doing was repainting the background of the panel. I found that calling setVisible(true) on the frame when it was already visible also worked for some reason. The General Note at the end is more Helpful then the Actual Answer and a pretty clean job it is of using separate Panels and Swapping between them  Any time you do a remove() or a removeAll() you should call  validate(); repaint(); after you have completed add()'ing the new components. Calling validate() or revalidate() is mandatory when you do a remove() - see the relevant javadocs. My own testing indicates that repaint() is also necessary. I'm not sure exactly why. This one helps!! Thanks! The relevant javadocs: http://docs.oracle.com/javase/7/docs/api/java/awt/Container.html#removeAll() ""If the container has already been displayed the hierarchy must be validated""  revalidate is called on a container once new components are added or old ones removed. this call is an instruction to tell the layout manager to reset based on the new component list. revalidate will trigger a call to repaint what the component thinks are 'dirty regions.' Obviously not all of the regions on your JPanel are considered dirty by the RepaintManager. repaint is used to tell a component to repaint itself. It is often the case that you need to call this in order to cleanup conditions such as yours. +1 This is a much clearer answer than the accepted one in my opinion."
226,A,"GUI programming in Scala I'm trying to learn Scala and I'd like to learn by writing a simple swing app but I'm unsure what GUI programing looks like in a functional world and specifically when using Scala. Any pointers or tutorials or gotchas when coming from an OO/Java background would be really welcome. The only functional paradigm of GUI programming I know of is Lisp's Cells. Scala's present Swing library is reactive which isn't bad. It's being reworked for version 2.8 I have heard. There are though alternative frameworks. One recent one for instance is a Scala wrapper for SWT. I think that at this point there hasn't been enough projects done for any particular pattern to emerge as a superior choice. I'd advise taking a look at everything out there and choosing one that fits you better. Who knows? You might even become a major contributor to the best Scala GUI framework that comes to be... @sana Some but I don't keep much in touch with that sort of thing. Any updates on the GUI programming with Scala?  The Programming in Scala book did contain an overview of the scala-swing project. The book is very good overall and worth the money as a general reference and sounds just like what you're looking for. Scala-swing is a ""wrapping"" library approach so I wouldn't call it functional really. State is mutated all over the place mostly because that's just how Swing works. I'm not really aware of many ""free as in beer"" resources for this topic yet and I think the Syngeca scala wiki probably lists some preliminary approaches that became scala-swing but that's just a guess. :)"
227,A,"How can I print a single JPanel's contents? I have a JPanel with two labels with pictures. I need to print these content of the JPanel. Please help me out. How can I print only this JPanel's contents as I also have different components on my JFrame but I just need to print this JPanel. Thanks. Here is the sample to print any Swing component. public void printComponenet(){ PrinterJob pj = PrinterJob.getPrinterJob(); pj.setJobName("" Print Component ""); pj.setPrintable (new Printable() { public int print(Graphics pg PageFormat pf int pageNum){ if (pageNum > 0){ return Printable.NO_SUCH_PAGE; } Graphics2D g2 = (Graphics2D) pg; g2.translate(pf.getImageableX() pf.getImageableY()); componenet_name.paint(g2); return Printable.PAGE_EXISTS; } }); if (pj.printDialog() == false) return; try { pj.print(); } catch (PrinterException ex) { // handle exception } } Hope this can help others. how can you scale the component accordingly in the page so that it fits? @Saher did you ever figure out how to do this? Thanks  A simple way to do it would be implementing the Printable interface (in java.awt.print) and adding the specified print method (it works similar to paint—in here you could specify what components you would want to draw onto the printed page). And when you want to actually print the contents of the panel obtain a PrinterJob instance and call its setPrintable method passing the object that implemented Printable. That's just a quick overview though. I'd recommend taking a look at Sun's tutorial on printing for further information.  just edit and put the name of your frame panel(jPanel1) and button(print). 'this' refers to the JFrame class(i.e my class extends javax.swing.JFrame ) just put your frame's reference instead of 'this'. private void PritnActionPerformed(java.awt.event.ActionEvent evt) { // TODO add your handling code here: Toolkit tkp = jPanel1.getToolkit(); PrintJob pjp = tkp.getPrintJob(this null null); Graphics g = pjp.getGraphics(); jPanel1.print(g); g.dispose(); pjp.end(); }"
228,A,"Ensuring that a JButton can fit a String of a given length Let's say I have a JButton and I want it to be big enough to fit a string of 8 ""M"" characters regardless of the string that is actually assigned to it and the font size without using elipsis. The JButton has to have precisely this size no more no less. Layout manager in use is GridBagLayout. I tried overwriting the getPreferredSize() method and perform a calculation using the string and the current font of the system. The calculation gives me back some sensible value however I have no idea how to set the preferred size in such a way that the borders are also considered. I tried to get the insets of the component but they are all 0's. This is the code of my method: public void getPreferredSize() { Dimension d = super.getPreferredSize(); // Geometry width indicates how many characters must fit char[] pad = new char[propGeometryWidth]; Arrays.fill(pad 'M'); String tmpTemplateString = new String(pad); FontMetrics tmpMetrics = getFontMetrics(getFont()); Rectangle2D tmpR2D = tmpMetrics.getStringBounds(tmpTemplateString getGraphics()); int tmpWidth = (int)tmpR2D.getWidth(); int tmpHeight = (int)(tmpR2D.getHeight() * propGeometryHeight + tmpR2D.getHeight()); // We need to take into consideration borders and padding! Insets insets = getInsets(); Dimension tmpSize = new Dimension(tmpWidth + insets.left + insets.right tmpHeight + insets.top + insets.bottom); return tmpSize; } I get the feeling that this might be related to the fact that my component is not realized yet but I am completely unsure how I could solve this issue. Am I approaching this problem from the wrong perspective? I think you may actually be doing it right already. From the Javadoc for getInsets(): If a border has been set on this component returns the border's insets; otherwise calls super.getInsets. A freshly-created JButton for me shows insets of java.awt.Insets[top=5left=17bottom=5right=17] with the default look and feel and java.awt.Insets[top=4left=16bottom=4right=16] with the Windows look and feel. Are you using a custom look and feel perhaps?  I found the reason for my problem. The problem is that I had a panel with a JButton inside and I overwrote the method on the panel (There is a relatively complex hierarchy of classes). Then of course the insets for the Panel are all set to 0. After getting the insets for the button as stated by Mr. Mmyers it all works great."
229,A,"My (Java/Swing) MouseListener isn't listening help me figure out why So I've got a JPanel implementing MouseListener and MouseMotionListener: import javax.swing.*; import java.awt.*; import java.awt.event.*; public class DisplayArea extends JPanel implements MouseListener MouseMotionListener { public DisplayArea(Rectangle bounds Display display) { setLayout(null); setBounds(bounds); setOpaque(false); setPreferredSize(new Dimension(bounds.width bounds.height)); this.display = display; } public void paintComponent(Graphics g) { Graphics2D g2 = (Graphics2D)g; if (display.getControlPanel().Antialiasing()) { g2.addRenderingHints(new RenderingHints(RenderingHints.KEY_ANTIALIASING RenderingHints.VALUE_ANTIALIAS_ON)); } g2.setColor(Color.white); g2.fillRect(0 0 getWidth() getHeight()); } public void mousePressed(MouseEvent event) { System.out.println(""mousePressed()""); mx1 = event.getX(); my1 = event.getY(); } public void mouseReleased(MouseEvent event) { System.out.println(""mouseReleased()""); mx2 = event.getX(); my2 = event.getY(); int mode = display.getControlPanel().Mode(); switch (mode) { case ControlPanel.LINE: System.out.println(""Line from "" + mx1 + "" "" + my1 + "" to "" + mx2 + "" "" + my2 + "".""); } } public void mouseEntered(MouseEvent event) { System.out.println(""mouseEntered()""); } public void mouseExited(MouseEvent event) { System.out.println(""mouseExited()""); } public void mouseClicked(MouseEvent event) { System.out.println(""mouseClicked()""); } public void mouseMoved(MouseEvent event) { System.out.println(""mouseMoved()""); } public void mouseDragged(MouseEvent event) { System.out.println(""mouseDragged()""); } private Display display = null; private int mx1 = -1; private int my1 = -1; private int mx2 = -1; private int my2 = -1; } The trouble is none of these mouse functions are ever called. DisplayArea is created like this: da = new DisplayArea(new Rectangle(CONTROL_WIDTH 0 DISPLAY_WIDTH DISPLAY_HEIGHT) this); I am not really a Java programmer (this is part of an assignment) but I can't see anything glaringly obvious. Can someone smarter than I see anything? The implements mouselistener mousemotionlistener just allows the displayArea class to listen to some to be defined Swing component's mouse events. You have to explicitly define what it should be listening at. So I suppose you could add something like this to the constructor: this.addMouseListener(this); this.addMouseMotionListener(this);  I don't see any code here to register to the mouse listeners. You have to call addMouseListener(this) and addMouseMotionListener(this) on the DisplayArea.  I don't see anywhere in the code where you call addMouseListener(this) or addMouseMotionListener(this) for the DisplayArea in order for it to subscribe to those events."
230,A,"How do I get which JRadioButton is selected from a ButtonGroup I have a swing application that includes radio buttons on a form. I have the ButtonGroup however looking at the available methods I can't seem to get the name of the selected JRadioButton. Here's what I can tell so far: From ButtonGroup I can perform a getSelection() to return the ButtonModel. From there I can perform a getActionCommand but that doesn't seem to always work. I tried different tests and got unpredictable results. Also from ButtonGroup I can get an Enumeration from getElements(). However then I would have to loop through each button just to check and see if it is the one selected. Is there an easier way to find out which button has been selected? I'm programing this in Java 1.3.1 and swing. Java 1.3.1? As in only supported on vintage Solaris 8 and no bugs from April? Yeah I know. The desktop machines that I'm developing this for have older applications that still run on this version and I don't want to mess with that. I would just loop through your JRadioButtons and call isSelected(). If you really want to go from the ButtonGroup you can only get to the models. You could match the models to the buttons but then if you have access to the buttons why not use them directly? please consider this reading : http://www.javaworld.com/article/2077509/core-java/java-tip-142--pushing-jbuttongroup.html what could possibly be the point of button group then? @Thufir : ButtonGroup tells Java that only on of the JRadioButtons of the group should be selected. without that all of them could be selected simultaneously. It does look like this is the only way thanks.  The following code displays which JRadiobutton is selected from Buttongroup on click of a button. It is done by looping through all JRadioButtons in a particular buttonGroup.  JRadioButton firstRadioButton=new JRadioButton(""Female""true); JRadioButton secondRadioButton=new JRadioButton(""Male""); //Create a radio button group using ButtonGroup ButtonGroup btngroup=new ButtonGroup(); btngroup.add(firstRadioButton); btngroup.add(secondRadioButton); //Create a button with text ( What i select ) JButton button=new JButton(""What i select""); //Add action listener to created button button.addActionListener(this); //Get selected JRadioButton from ButtonGroup public void actionPerformed(ActionEvent event) { if(event.getSource()==button) { Enumeration<AbstractButton> allRadioButton=btngroup.getElements(); while(allRadioButton.hasMoreElements()) { JRadioButton temp=(JRadioButton)allRadioButton.nextElement(); if(temp.isSelected()) { JOptionPane.showMessageDialog(null""You select : ""+temp.getText()); } } } } hmm ... this differs from earlier answers in that .. ?  Add the radiobuttons to a button group then: buttonGroup.getSelection().getActionCommand not answering the question (which was to get the selected _JRadioButton_ vs. its actionCommand)  I suggest going straight for the model approach in Swing. After you've put the component in the panel and layout manager don't even bother keeping a specific reference to it. If you really want the widget then you can test each with isSelected or maintain a Map<ButtonModelJRadioButton>.  You could use getSelectedObjects() of ItemSelectable (superinterface of ButtonModel) which returns the list of selected items. In case of a radio button group it can only be one or none at all. I tried this but I was getting a NPE. I did a little research and found this: http://java.sun.com/javase/6/docs/api/javax/swing/DefaultButtonModel.html#getSelectedObjects() Since JRadioButton's button model is JToggleButton.ToggleButtonModel it will always return null.  Use the isSelected() method. It will tell you the state of your radioButton. Using it in combination with a loop(say for loop) you can find which one has been selected. Isn't this the same as the accepted answer?  you must add setActionCommand to the JRadioButton then just do String entree = entreeGroup.getSelection().getActionCommand(); ex  java = new JRadioButton(""Java""); java.setActionCommand(""Java""); c = new JRadioButton(""C/C++""); c.setActionCommand(""c""); System.out.println(""Selected Radio Button: "" + buttonGroup.getSelection().getActionCommand());  jRadioOne = new javax.swing.JRadioButton(); jRadioTwo = new javax.swing.JRadioButton(); jRadioThree = new javax.swing.JRadioButton(); ... then for every button: buttonGroup1.add(jRadioOne); jRadioOne.setText(""One""); jRadioOne.setActionCommand(ONE); jRadioOne.addActionListener(radioButtonActionListener); ...listener ActionListener radioButtonActionListener = new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { radioButtonActionPerformed(evt); } }; ...do whatever you need as response to event protected void radioButtonActionPerformed(ActionEvent evt) { System.out.println(evt.getActionCommand()); } That confuses input events and state changes. Other code may change the state. It also takes responsibility away from the button group model.  I got similar problem and solved with this: import java.util.Enumeration; import javax.swing.AbstractButton; import javax.swing.ButtonGroup; public class GroupButtonUtils { public String getSelectedButtonText(ButtonGroup buttonGroup) { for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) { AbstractButton button = buttons.nextElement(); if (button.isSelected()) { return button.getText(); } } return null; } } It returns the text of the selected button. I love making custom methods for tasks. Nicely done. This method is EXACTLY what I needed. I thank you very much! I wish I could give you 999 ups. This should probably be in Java in the first place...  import javax.swing.Action; import javax.swing.ButtonGroup; import javax.swing.Icon; import javax.swing.JRadioButton; import javax.swing.JToggleButton; public class RadioButton extends JRadioButton { public class RadioButtonModel extends JToggleButton.ToggleButtonModel { public Object[] getSelectedObjects() { if ( isSelected() ) { return new Object[] { RadioButton.this }; } else { return new Object[0]; } } public RadioButton getButton() { return RadioButton.this; } } public RadioButton() { super(); setModel(new RadioButtonModel()); } public RadioButton(Action action) { super(action); setModel(new RadioButtonModel()); } public RadioButton(Icon icon) { super(icon); setModel(new RadioButtonModel()); } public RadioButton(String text) { super(text); setModel(new RadioButtonModel()); } public RadioButton(Icon icon boolean selected) { super(icon selected); setModel(new RadioButtonModel()); } public RadioButton(String text boolean selected) { super(text selected); setModel(new RadioButtonModel()); } public RadioButton(String text Icon icon) { super(text icon); setModel(new RadioButtonModel()); } public RadioButton(String text Icon icon boolean selected) { super(text icon selected); setModel(new RadioButtonModel()); } public static void main(String[] args) { RadioButton b1 = new RadioButton(""A""); RadioButton b2 = new RadioButton(""B""); ButtonGroup group = new ButtonGroup(); group.add(b1); group.add(b2); b2.setSelected(true); RadioButtonModel model = (RadioButtonModel)group.getSelection(); System.out.println(model.getButton().getText()); } }"
231,A,"JToolbar background image I'm using a customized JToolbar using the following code: public class GeneralToolbar extends JToolBar{ public GeneralToolbar() { super(); setBackground(Color.white); setOpaque(true); setPreferredSize(new Dimension(5454)); setMinimumSize(new Dimension(5454)); setMaximumSize(new Dimension(5454)); setSize(new Dimension(5454)); } public void paintComponent(Graphics g) { super.paintComponent(g); Dimension size = this.getSize(); ImageIcon image = DefaultAction.createImageIcon(""/com/aaa/resources/tabback""); g.drawImage(image.getImage() 00 size.width size.height this); } } Now the image is seen. But I get a opaque rectangle around my buttons. I tried to set the button opaque to false but it didn't add any affect. Thank you for the support Maybe you need to use: button.setBorderPainted( false ); button.setContentAreaFilled( false ); Of course when you get rid of the Border then you don't see the effect of clicking on the button. If you need more help post your SSCCE showing the problem. Done the job! Thank you.  public GeneralToolbar() { super(); setBackground(Color.white); setOpaque(true); setPreferredSize(new Dimension(5454)); setMinimumSize(new Dimension(5454)); setMaximumSize(new Dimension(5454)); setSize(new Dimension(5454)); } public void paintComponent(Graphics g) { super.paintComponent(g); Dimension size = this.getSize(); ImageIcon image = DefaultAction.createImageIcon(""/com/aaa/resources/tabback""); g.drawImage(image.getImage() 00 size.width size.height this); }"
232,A,Find out if JList has an item currently selected I have a JList which is populated after importing a file. Is it possible to have the first item/element of the JList highlighted/selected. I have browsed many places hoping to find a line along the lines of list.setFocus(0); //or listSelectionEvent.setSelection(0); //0 referring to index point of the list Maybe this isn't even possible... ? Your question title doesn't seem to match with the question content. Is the title wrong? Use:  list.setSelectedIndex(0);
233,A,"JMS Queue to JTable Update [Now getting exception after changes] I am writing my own JMS Browser and I am struck at the JTable update of Messages from JMS servers. I have tried AbstractTableModel TableModelListener to make Jtable refresh when the data added into LinkedList. This below logis works  but its not updating realtime  means I would like to display each and every row added to Jtable immediately when its added from QueueBrowser to LinkedList. I have updated the code as per the suggestions below. Am I doing something wrong? can anyone help me ? QueueBrowser qb = session.createBrowser(q); MsgTable mt = (MsgTable) queueTable.getModel(); mt.load(qb.getEnumeration()mt); qb.close(); class MsgTable extends AbstractTableModel implements TableModelListener{ final String[] columnNames = { ""#"" ""Timestamp"" ""Type"" ""Mode"" ""Priority"" }; public void setRowSize(){ } LinkedList queueList = new LinkedList(); public int getRowCount() { if (queueList == null) { return 0; } else { return queueList.size();}} public int getColumnCount() { return columnNames.length;} public String getColumnName(int column) {return columnNames[column];} public Object getValueAt(int row int column) { if(queueList == null){ return null; } Message m = (Message) queueList.get(row); ... } void load(Enumeration eMsgTable mt) { mt.addTableModelListener(this); while(e.hasMoreElements()){ queueList.add(e.nextElement()); } fireTableDataChanged(); } Message getMessageAtRow(int row) { if (queueList == null) return null; return ((Message) queueList.get(row)); } @Override public void tableChanged(TableModelEvent arg0) { // TODO Auto-generated method stub fireTableDataChanged(); } } and getting this exception. Exception in thread ""AWT-EventQueue-0"" java.lang.StackOverflowError at javax.swing.table.AbstractTableModel.fireTableRowsInserted(Unknown Source) Is it wrong ? Except for some obvious performance issues the code looks ok in theory. What is your actual problem? @jambjo  Its working fine But Jtable is showing the data when the list gets all data and not showing real time refresh when its added to LinkiedList To my knowledge your JTable should update automatically when a change to the TableModel happens. Check out the sun tutorial on working with tables and specially the section on listening for data changes this may help. That said I have a couple of remarks: I don't really get the getValueAt(int row int col) method. Shouldn't you get the row-th message and the col-th attribute of the message? I'd add a addRow(...) and addRows(...) to MsgTable implementation of TableModel to update the internal model and fire the appropriate event. You don't need to implement TableModelListener (I can't see any call to addTableModelListener(...) anyway) (EDIT: The OP has updated his question with new code so I'm updating my answer accordingly below.) You've modified the load(...) signature and body to add a call to addTableModelListener(...) and I think that both modifications are not correct. About the addTableModelListener(...) the documentation says: Adds a listener to the list that is notified each time a change to the data model occurs. And about the various fireFooXxx(...) methods: Notifies all listeners that [a changed occurred] So with the following implementation of a TableModelListener: @Override public void tableChanged(TableModelEvent arg0) { // TODO Auto-generated method stub fireTableDataChanged(); } You'll end up making infinite recursive calls (the listener is notified by a change and fire an event that will notify him again etc) hence the java.lang.StackOverflowError. Actually I still think that you don't need a TableModelListener (and the way you are registering it is not correct IMO see Listening for Data Changes in the Sun tutorial). I'd thus remove the implements TableModelListener and rather implement the load(...) method like this: void load(Enumeration e) { while(e.hasMoreElements()) { queueList.add(e.nextElement()); } fireTableDataChanged(); } Thanks Pascal. This makes sense Let me check it and come back.  Well the proper design is to create an addRow(...) method that receives a row of data and updates the internal storage of your TableModel. This method should then invoke the fileTableRowsInserted() method. Your getValueAt() method also makes no sense. According to your model you have 5 columns of data yet you never check the column variable to return the proper column object. Take a look at the source code of the DefaultTableModel to see how an insertRow() and getValueAt() method might be coded.  one way to up performance would be to only call fireTableDataChanged() at the end of the load() method as opposed to after each line is loaded. that should help. ie: void load(Enumeration e) throws JMSException { while(e.hasMoreElements()){ queueList.add(e.nextElement()); fireTableDataChanged(); } } to void load(Enumeration e) throws JMSException { boolean dataAdded = false; while(e.hasMoreElements()){ queueList.add(e.nextElement()); dataAdded = true; } fireTableDataChanged(); } I agreed  but I want to update the Jtable at the moment the new data added into the list.  A couple points to add for consideration: your load(Enumeration e) method does not need to throw a JMSException as you are just iterating over an Enumeration. you should ensure that your firing of events is done within the EDT. This could be as simple as wrapping your call to load in a runnable and dropping it into SwingUtilities.invokeLater() : MsgTable mt = (MsgTable) queueTable.getModel(); final Enumeration e = qb.getEnumeration(); SwingUtilities.invokeLater(new Runnable() { public void run() { mt.load(e); } });"
234,A,Using Swing I want to draw a couple of points ... in an image and do some calculation on their [x y] coordinates. My first idea was to use an image as the background of a JPanel and then register the points but I'm not sure there will be a way to mark these on the JPanel. There is also the Drawing library which I'm unfamiliar with but I'm not sure if I can combine these with Swing. Can you name me the packages/classes I can use in order to do the task? References of code that already does it are also welcome. Thank you! You may also find this useful in case you want a heavyweight component (AWT) this tutorial explains how to extend the Canvas class to draw stuff.  The Background Panel gives a couple of suggestion on how to display a background image depending on your requirements. Custom Painting Approaches then gives some ideas of how to do custom painting if you need to add custom points to the image.  Subclass a JPanel and override the method paintComponent: public void paintComponent(Graphics g) { super.paintComponent(g); } In the method you can use methods of the Graphics object passed to it. This method will be invoked every time there is a need to redraw the panel so you need to store your points in an array and then read and draw each of them in your paintComponent.  The issue here is three-fold: There needs to be a way to display a background image. One must be able to find the point at which the mouse was clicked. There must be a way to draw the point on the panel. One way to accomplish the above points would be to subclass a JPanel and provide those functionalities. 1. Display a background image in a panel. Firstly as a JPanel does not have a way of displaying a background image by default there must be a way to hold an image in the JPanel and then draw that on the panel itself which can be performed via the paintComponent method. One way to accomplish this is to have a field in the class which holds on to an Image to draw: class MyPanel extends JPanel { // Background image. Initialize appropriately. Image backgroundImage; public void paintComponent(Graphics g) { super.paintComponent(g); // Draw background image each time the panel is repainted. g.drawImage(backgroundImage 0 0 null); } } The Graphics object in paintComponent is associated with the MyPanel and can be used to perform graphics operations. 2. Finding the point at which the mouse was clicked. Secondly in order to retrieve the point at which the mouse was clicked one could assign a MouseListener to the MyPanel. In the following example an anonymous inner class extending the MouseAdapter is used to minimize writing extra code: class MyPanel extends JPanel { // Background image. Initialize appropriately. Image backgroundImage; public MyPanel() { // Add a MouseListener which processes mouse clicks. this.addMouseListener(new MouseAdapter() { public void mouseClicked(MouseEvent e) { // Process mouse-click. } }) } // paintComponents method here. } Processing that needs to be performed when the mouse is clicked can be included in the mouseClicked method. 3. How to draw a point on the panel. Thirdly in order to find one point at which the mouse was clicked one can obtain it from the MouseEvent object that was passed in from the mouseClicked method: class MyPanel extends JPanel { // Background image. Initialize appropriately. Image backgroundImage; Point pointClicked; public MyPanel() { // Add a MouseListener which processes mouse clicks. this.addMouseListener(new MouseAdapter() { public void mouseClicked(MouseEvent e) { // Retrieve the point at which the mouse was clicked. pointClicked = e.getPoint(); // Repaint the panel. this.repaint(); } }) } public void paintComponent(Graphics g) { super.paintComponent(g); // Draw background image each time the panel is repainted. g.drawImage(backgroundImage 0 0 null); // Draw a little square at where the mouse was clicked. g.fillRect(pointClicked.x pointClicked.y 1 1); } } Although the above code is not tested it should be a starting point. For example if multiple points needs to be drawing perhaps having a List<Point> to hold the points and drawing each Point in the paintComponents method could be done. If additional processing needs to be performed when the mouse is clicked additional code can be added to the mouseClicked method. Additional resources: Lesson: Performing Custom Painting Painting in AWT and Swing How to Write a Mouse Listener Thank you to zedoo for pointing out in the comments that making a call to super.paintComponent should be performed when overriding the paintComponent method. When overwriting paintComponent you should make sure that the hole component gets painted either by calling super.paintComponent() or by filling it with a rectangle of its size (i guess the two options are pretty equal for JPanels)
235,A,"Java document state pattern? I am a new to programming with Java and I would like to know if there is some common practice for managing state of opened document (is current state saved or dirty)  saving document opening creating new document and so on. How do you approach this? Right now I have my little Swing application and have actions for opening and closing document and creating new one but I don't know how to manage if user has saved file or not (I need this to check if user wants to create new one or open existing while working on current.) Is there some pattern for this? All advices are very welcome since I am still learning how to swim with Java. You may think about working with temporary versions of your document (i.e. you open main document but when you edit it then temp document is created). In this case another user who opens the same document will see original doc. As I know it's common practice.. But I'm not sure that you want to maintain so complex behavior..  You have a boolean variable named isDirty which starts at false. Every time a change is made to the document it is set to true by the code. All other program functions (Opensavenew menus e.t.c) check the status of this boolean before doing anything else. This way they also present the familiar dialogs: Are you sure you want to exit Discard your changes e.t.c I have used this several times on real world Swing Apps This was simple just what I needed so it worked out well for me.  As far as I know Swing does not have mechanisms for managing document state. You have to do that yourself. But then it is not that much code that has to be written and if you have several different documents in your app you can put that stuff in an abstract base class. The basic approach has been outlined already: just have a ""dirty"" flag in your document data structure. You should put some thought into writing down which of your operations like ""create"" ""open"" ""save"" ""close"" should modify and evaluate this flag. I would suggest a state chart (not necessarily the UML state machine variant) as a tool to specify this. If you need more complex functionality especially undo/redo take a look at the Memento pattern. Most of the code that has to be written when you use this pattern is specific to the application and its data structures (i.e. the types you create for managing documents) so it would be hard to impossible to effectively generalize this and put it into a framework like Swing or RCP."
236,A,"Preserving the size of a JButton in BorderLayout.CENTER Is there a way of preserving the natural size of a JButton in the center of a BorderLayout? Right now it expands in all directions to fill it up but I want it normal size. If it isn't possible how can I get a button to be in the center of a panel with its normal size? I think you can't do that with BorderLayout. The container's constraints will take priority over preferred sizes. For manual coding I recommend to have a look at MiG Layout.  Using a GridBagLayout for such a simple layouts are overkill. I would avoid GridBagLayout as much as possible - use a nested JPanel or MigLayout if you can (external jar)  The component in the center of a BorderLayout is always stretched you can get round this by adding the button to a JPanel with a FlowLayout and then adding that into the CENTER. JPanel borderPanel = new JPanel(new BorderLayout()); JButton theButton = new JButton(""Click Me""); JPanel flowPanel = new JPanel(new FlowLayout()); flowPanel.add(theButton); borderPanel.add(BorderLayout.CENTER flowPanel); I think mixing layout is a bad habit as it makes the code confusing I disagree - http://madbean.com/anim/totallygridbag/ - I would prefer MigLayout followed by nested layout with GridBagLayout last - only if forced to use it.  no matter what component you put in the center of a BorderLayout panel it'll resize vertically and horizontally to fill all the available area. that's the characteristic of the center position.  I suggest going straight for GridBagLayout. Although it has some odd behaviour and a bad interface it's a standard layout that does pretty much everything. You are going to need it so you might as well consistently use the same layout manager even when it is not strictly necessary. It is the most powerful one and the only one I use"
237,A,"java Swing debugging headaches with Wacom pen tablet I've been running up against a problem with Java Swing + my Wacom Graphire tablet for a few years in several Java applications and have now encountered it in my own. I use a pen tablet to get around wrist issues while clicking a mouse and it works fine under Windows except when I'm using Java applications. In Java applications the single-click of the pen doesn't work correctly. (Usually the problem only occurs with file-selection dialog boxes or tree controls.) The pen tablet also comes with a wireless mouse that works with the same tablet and its single-click does work correctly. I don't know whether the problem is in the WACOM driver or in the Java Swing runtime for Windows or both. Has anyone encountered this before? I'd like to file a bug report with WACOM but I have no idea what to tell them. I have been able to reproduce this in my own application that has a JEditorPane with an HTML document that I've added a HyperlinkListener to. I get HyperlinkEvent.ACTIVATED events on every single click with the mouse but I do NOT get HyperlinkEvent.ACTIVATED events on every single click with the pen. One big difference between a pen and a mouse is that when you click a button on a mouse it's really easy to cause the button-click without mouse movement. On the pen tablet it is very hard to do this and that seems to correlate with the lack of HyperlinkEvent.ACTIVATED events -- if I am very careful not to move the pen position when I tap the tablet I think I can get ACTIVATED events. Any suggestions for things to try so I can give WACOM some good information on this bug? It's really frustrating to not be able to use my pen with Java apps especially since the pen works fine with ""regular"" Windows (non-Java) applications. Normally I wouldn't ask this question here but I'd like to find out from a programmer's standpoint what might be going on so I can file a good bug report. What you should do is add a mouseListener and see when it registers a mouseClicked() mousePressed() mouseReleased() event. I'm not sure if the swing reads the tablet pen as a mouse though. However it should give you some insight into what's actually going on. Great! I haven't used mouseListener before but it worked like a charm.  I reported this bug many years ago to Sun. It still is not fixed. Any decent ui framework will allow some movement between a press and release to generate a click event. A maximum movement of 1 pixel on a high dpi display is just ridiculous. It is not only an issue with wacom tablets ie older people also have difficulties to keep the mouse still when clicking.  I tried dr.manhattan's suggestion and it works like a charm. I get mousePressed/mouseReleased events correctly; mouseClicked events happen always with the pen tablet mouse but mouseClicked events do not happen with the pen unless I manage to keep the pen very still. Even a 1-pixel movement is enough to make it fail. I guess I should blame Java for this one: there's no way to specify a ""click radius"" for acceptible movement. package com.example.bugs; import java.awt.Dimension; import java.awt.event.MouseEvent; import java.awt.event.MouseListener; import javax.swing.JFrame; public class WacomMouseClickBug { public static void main(String[] args) { JFrame jframe = new JFrame(); jframe.addMouseListener(new MouseListener(){ @Override public void mouseClicked(MouseEvent event) { System.out.println(""mouseClicked: ""+event); } @Override public void mouseEntered(MouseEvent event) {} @Override public void mouseExited(MouseEvent event) {} @Override public void mousePressed(MouseEvent event) { System.out.println(""mousePressed: ""+event); } @Override public void mouseReleased(MouseEvent event) { System.out.println(""mouseReleased: ""+event); } }); jframe.setPreferredSize(new Dimension(400400)); jframe.pack(); jframe.setLocationRelativeTo(null); jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); jframe.setVisible(true); } }  I think you already got the answer yourself: Moving the pen results in some other event than a simple click perhaps maybe a Drag and drop like event. I'm not sure whether it's a Java/Swing or a Wacom problem it could be that the tablet doesn't register the clicks as such but as drag events or it could be that swing interprets the events incorrectly."
238,A,"Wrong packing of JFrame using JPanel in borderlayout I am writing a simple application in Java that does some particle simulation on a bunch of sheep (don't ask). For this I want a window with a JPanel for graphics (which will be resizable with a simple combobox that contains some standard resolutions) and some other elements like buttons to start and pause the simulation etc. My question: I'm using the JFrame.pack method to pack everything nicely together using a borderLayout. But for some reason the JPanel is packed wrong it seems like the packing ignores it so the window is resized to fit the size of only the two buttons that I have now. What am I doing wrong? This is the code so far (bit of a newbie so no comments on my dumbness if there is any ;)): public class Window { public Sheepness sheepness; public ButtonPanel buttonPanel; public PaintPanel paintPanel; public JFrame frame; public Window(Sheepness sheepness int width int height) { this.sheepness = sheepness; frame = new JFrame(""Sheepness simulation""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //frame.setSize(width height); BorderLayout frameLayout = new BorderLayout(); JPanel background = new JPanel(frameLayout); background.setBorder(BorderFactory.createEmptyBorder(10 10 10 10)); buttonPanel = new ButtonPanel(this); background.add(BorderLayout.SOUTH buttonPanel.buttonBox); paintPanel = new PaintPanel(this); paintPanel.setSize(600 600); background.add(BorderLayout.CENTER paintPanel); frame.getContentPane().add(background); frame.pack(); frame.setResizable(false); frame.setVisible(true); } } public class PaintPanel extends JPanel { public Window window; public PaintPanel(Window window) { this.window = window; } @Override public void paintComponent(Graphics g) { g.setColor(Color.blue); g.fillRect(0 0 300 200); } } public class ButtonPanel { public Window window; public Box buttonBox; public JButton startButton; public JButton resetButton; public ButtonPanel(Window window) { this.window = window; buttonBox = new Box(BoxLayout.X_AXIS); startButton = new JButton(""Start""); startButton.addActionListener(new startButtonListener()); buttonBox.add(startButton); resetButton = new JButton(""Reset""); resetButton.addActionListener(new resetButtonListener()); buttonBox.add(resetButton); } } I cleared up the tags on your question I hope you do not mind. Thanks totally forgot about java and swing tags. Try: paintPanel.setPreferredSize(600 600); As Window.pack() sizes to the preferred sizes of its subcomponents and JPanel gets its preferred size from its child components (in your case there are none). I'm not sure I followed all that. If you have a separate problem ask it as a new question (it sounds like including a screenshot may help in this case too). Ok I'm sorry I'll put it in a new question. I just thought it would be easier this way since the code was already here. Put it in a new question if you have this problem of the border as well check: http://stackoverflow.com/questions/1593683/unwanted-border-around-jpanel It works! Thank you very much! Same code new problem: I'm getting somewhat of a border to the right and bottom of the window. I know there is another similar thread around here but the solution there was setting the resizable option of the frame to false though this doesn't work for me. It's probably caused by the pack method but why does it add the border? I just want it to pack tightly around all the components (with a border of 10 px but that's already done with setBorder). Also there is a big 'whitespace' between the JPanel and the buttons is this caused by the same problem and how do I remove it? Sorry not to the bottom only to the right but I guess it's bottom and right of the JPanel so that it also causes the 'whitespace' between the JPanel and the buttons. I tried filling it with more than the size of the JPanel and now the border is gone. Why is the panel bigger than what I specified? It's exactly 30 px higher and 10 px wider than what I specified."
239,A,"Java GUI LayoutManagers I'm busy with an asignment where i have to make a graphical interface for a simple program. But i'm strugling with the layout. This is the idea: What is the easiest way to accomplish such a layout? And what method do you use to make layouts in java. Just code it or use an IDE like netbeans? For myself gui-builders for swing or swt never worked that well that's why i code layouts myself using layout managers. Your question doesn't mention which gui-system you are using but i assume you want to use swing. If that's the case I would recommend to use GridBagLayout for your layout. It is not that easy to use in the beginning but as soon as you know how it works you can do most layouts in the way you want it to be and i think it is also the layoutmanager of choice for the layout you want to do.  I used to love Motif's XmForm for this sort of thing. In Java I usually put Boxes inside of boxes. So I have a vertical box. First row of the box contains a JLabel for the Instruction. Second row contains something for the label/result stuff possibly some sort of grid. Third row contains whatever that blacked out thing Fourth row contains the JTable. Then I'd spend some time to try to figure out how to do the lable/result stuff. Then I'd probably end up saying ""dammit"" and doing it as a GridBagLayout.  Well considering how simple the layout is I would suggest you use a BorderLayout with NORTH set to the top section in a container and the JTable in the CENTER of the BorderLayout. For the Top it appears to be a simple BorderLayout again with NORTH as the Instruction: south as the black box (possibly in a container with a FlowLayout). The center of the top pane appears to be 2 Containers of GridLayouts with 2 rows and 2 columns so put thos in another container with a GirdLayout. So in pseudo: Container(BorderLayout) { @NORTH Container(BorderLayout) { @NORTH Label(Instruction); @CENTER Container(GridLayout(21)) { Container(GirdLayout(22)) { Label() TextField() Label() TextField() } Container(GirdLayout(22)) { Label() TextField() Label() TextField() } } @SOUTH Container(FlowLayout()) { JButton() //shaded thing? } } @CENTER { JTable } }  I've used GUI layout generating tools for super rapid development (maybe get the first 2 or 3 iterations of an interface out of the way). I've ultimately found that using a simple fixed layout (no layout manager) with these tools is the best approach. Once we are starting to hone in on a design we switch to manual layout. Whenever I've tried to use GUI generators to create code for layout managers I've almost always been bitten eventually where the layout would just stop working and I spent more time debugging the impossible to read auto-generated code than if I'd done the layout by hand anyway. For what it's worth when we are doing the early phase of layouts we use the Jigloo plugin for Eclipse. It's very inexpensive and does a good job. I'm a big fan of MiGLayout. I've found that it is incredibly easy to use for simple layouts and is capable of doing extremely complicated layouts. All without the need to resort to nested panels etc... JGoodies Forms is also good but harder to use.  I build everything by hand. Like Christian I've had bad experiences with GUI builders; they always either refused to configure a couple of components quite right or they generated huge amounts of unnecessary code which made later maintenance impractical or both. I used to do build a lot of UIs using GridBagLayout but for years I've never seen an office-environment UI that couldn't be built with nested BorderLayouts GridLayouts and the occasional BoxLayout or FlowLayout. About 98% of the stuff I've seen is doable with nested BorderLayouts. In your case the layout organization will be as bmeck says. Speaking from memory using CENTER for the JTable (remember to put it in a JScrollPane!) and NORTH for everything else ensures that if you resize your JFrame the JTable will get all of the extra space and that should be exactly what you want. For the top labels and fields the nested GridLayouts should ensure that each ""column"" of labels and fields will take up equal horizontal space. (They'll get only enough vertical space to be completely visible and no more since the JTable is taking up everything else.) Everything else is just a matter of adding borders and setting the GridLayout padding reasonably.  Try table layout. Works great. https://tablelayout.dev.java.net/  And what method do you use to make layouts in java. Just code it or use an IDE like netbeans? NetBeans for GUI developers is like a calculator for grade schoolers: you really shouldn't use it until you know how to do things without it but then it will save you a lot of time. (I'd love to answer your primary question but the firewall I'm behind is blocking the picture.)  I wrote an article a while back on layout managers: http://developer.java.sun.com/developer/onlineTraining/GUI/AWTLayoutMgr It describes how nesting (as bmeck above demonstrates) can be used very effectively for many UI designs.  Use GroupLayout :) All the alignments are pretty easy to do"
240,A,"Do .NET GUI components support HTML (like Java swing does)? HTML can be used in Java swing GUI components like JTextBox JButton ... etc. Is there an equivalent to that in .NET (C#) WinForms? Or at least some simple way of making a single word bold inside a textbox without using another GUI component? In Swing you shouldn't really use this too since it seriously gets in the way with many Look and Feels. Definitely not very fun and what they support of HTML is basically not very much either. I find it useful for making a word bold or italic instead of using a more complex GUI component. Just very basic HTML .. Used it for that purpose too but quickly becomes a mess and is generally not very pleasant to work with. One of the many things Sun got somehow very wrong with Swing (imho) :) One option would be to use a WPF TextBlock (I think) control which has support for basic formatting like HTML (but not HTML tag themselves).  No I don't think you can easily do that with a normal TextBox or Button. There are third party controls that might do that. WinForms is not a very extensible GUI framework at heart. If you are looking for that kind of capabilities WPF is a great thing. WPF supports control composition and styling almost everywhere.  For .Net you'll need to either use a RichTextbox control (and rtf formatting) embed a WebBrowser control or inherit your own OwnerDrawn control from textbox. I would be surprised if there aren't third-party controls out there that do that last option for you but there's nothing ""official"" for this and you'll have to evaluate them yourself."
241,A,"Java Swing: JList with ListCellRenderer selected item different height I'm making a custom ListCellRenderer. I know that you can have different dimensions for each individual cell. But now I want to have a different dimension for the selected cell. Somehow the JList is caching the dimension for each individual cell the first time it has to calculate bounds for each cell. This is my code: public class Test { static class Oh extends JPanel { public Oh() { setPreferredSize(new Dimension(100 20)); } protected void paintComponent(Graphics g) { super.paintComponent(g); g.setColor(Color.WHITE); g.fillRect(0 0 getWidth() getHeight()); } } static class Yeah extends JPanel { private boolean isSelected; public Yeah(boolean isSelected) { setPreferredSize(new Dimension(100 100)); this.isSelected = isSelected; } protected void paintComponent(Graphics g) { super.paintComponent(g); //setSize(100 100); // doesn't change the bounds of the component //setBounds(0 0 100 100); // this doesn't do any good either. if (isSelected) g.setColor(Color.GREEN); else g.setColor(Color.BLACK); g.fillRect(0 0 getWidth() getHeight()); } } public static void main(String[] args) { JFrame f = new JFrame(); f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); f.setSize(800 500); Vector<Integer> ints = new Vector<Integer>(); for (int i = 0; i < 100; i++) { ints.add(i); } JList list = new JList(ints); list.setCellRenderer(new ListCellRenderer() { public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { if (isSelected || ((Integer) value) == 42) return new Yeah(isSelected); else return new Oh(); } }); //list.setPrototypeCellValue(null); //list.setFixedCellHeight(-1); f.add(new JScrollPane(list)); f.setVisible(true); } } In the comments you can see what I've already tried. I've already searched quite long and found a lot of useless articles some of them touch the ListCellRenderer/dynamic height thing but they only work because the height stays the same for the individual cells. My heights are changing so how do I do this!?!?? I've been tearing my hair out about this stupid JList row height problem. I have a cell renderer which sets a variable row height for every row - problem is that JList keeps a cache of the heights. Using the other answers I think I've struck on the holy grail. Here it is: Use a simplified version of the BasicListUI as created by Jaap: public class BetterListUI extends BasicListUI { public void triggerUpdate() { updateLayoutState(); } } Then when you create a JList - extend it like this : betterListUI = new BetterListUI(); myJList = new JList() { @Override public void repaint(long tm int x int y int width int height) { betterListUI.triggerUpdate(); super.repaint(tm x y width height); } }; myJList.setUI(betterListUI); You may need to put a guard around the triggerUpdate during creation depending on your circumstances. Looks interesting I didn't check this implementation since it has been a while. READERS: I would try this approach before using mine! It works a treat! Using it to prototype an iPad app... Why didn't you just extend JList to override the repaint method (instead of having to re-write that code in each instance)? Also I haven't tried but if your problem was just triggering the JList to lay out its components again - wouldn't `SwingUtilities.updateComponentTreeUI(myJList);` have worked? I am extending it - anonymously. I only have the one instance - so extending it inline is sufficient for my purposes rather than bothering to create and name a separate class. Also makes the example less verbose. Could try the updateComponentTreeUI thing - might work on a cursory look it seems heavy handed telling it to update look and feel.  The JList has no ability to change size of cell depending on selection or whatever. The list use ""cached"" sizes. If there is new cellRenderer provided this sizes are recounted and applied within all cells in list. I think the reason is performance for list with a lot of entries. The possible solution is to write own ListUI implementation which is able to use different sizes for selected and unselected cells. This brings also possibility to adjust size of cells around selection by logarithm or other interpolation. I hope you have a big reason why to do this. It is a lot of work! Thanks for pointing me into the ListUI direction. I've been spitting in the BasicListUI implementation and in the end it's not difficult though it's a hack!  Thanks to Rastislav Komara I've been able to solve this quite easily: I've created an inner class that extends BasicListUI and created public method that is called on ListSelectionListener.valueChanged: private class MyRenderer implements ListCellRenderer { public int listSelectedIndex = -1; public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { if (index == listSelectedIndex) return new Yeah(isSelected); else return new Oh(); } } MyRenderer lcr = new MyRenderer(); private class MyListUI extends BasicListUI { public void triggerUpdate() { lcr.listSelectedIndex = list.getSelectedIndex(); updateLayoutState(); list.revalidate(); } } The updateLayoutState method is normally triggered when the JList height changes. The only ""insane"" thing I'm doing here is that my renderer needs to know what the selected index is. This is because the updateLayoutState method doesn't use the selected index in it's height calculations. Somehow using list.getSelectedIndex() inside getListCellRendererComponent doesn't work well. Edit: Check also the anser by nevster and kleopatra they look way smarter try them first... What i figured out is that you get an OutofMemory Error later on because the BasicListUI CellRendererPane is caching all added components (Yeah and Oh classes). This error i got in my usecase and in the end i created a subclass of BasicListUI for removing all previous registered components.  Basically there are two aspects of the problem both located in the ui delegate it fails to configure the renderer to its real state when measuring that is ignores the selection (and focus) completely it is notoriously stubborn against being forced to re-calculate the cached cell sizes: it has no public api to do so and only does voluntarily on model changes. The remedy to fix the first is indeed the renderer: implement to ignore the given selected flag and query the list for the real selection as outlined by @Andy. In code using the OP's components ListCellRenderer renderer = new ListCellRenderer() { Yeah yeah = new Yeah(false); Oh oh = new Oh(); @Override public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { // ignore the given selection index query the list instead if (list != null) { isSelected = list.isSelectedIndex(index); } if (isSelected || ((Integer) value) == 42) { yeah.isSelected = isSelected; return yeah; } return oh; } }; list.setCellRenderer(renderer); To fix the second a custom ui delegate (as suggested in others answers as well) is a possible solution. Though some work in the general case if supporting multiple LAFs is needed. A less intrusive but slightly dirty method to force the ui into voluntarily update its cache is to send a fake ListDataEvent on selectionChange: ListSelectionListener l = new ListSelectionListener() { ListDataEvent fake = new ListDataEvent(list ListDataEvent.CONTENTS_CHANGED -1 -1); @Override public void valueChanged(ListSelectionEvent e) { JList list = (JList) e.getSource(); ListDataListener[] listeners = ((AbstractListModel) list.getModel()) .getListDataListeners(); for (ListDataListener l : listeners) { if (l.getClass().getName().contains(""ListUI"")) { l.contentsChanged(fake); break; } } } }; list.addListSelectionListener(l); BTW JXList of the SwingX project has a custom ui delegate - mainly for supporting sorting/filtering - with public api to re-calculate the cache then the above ListSelectionListener would be simplified (and clean :-) to  ListSelectionListener l = new ListSelectionListener() { @Override public void valueChanged(ListSelectionEvent e) { ((JXList) e.getSource()).invalidateCellSizeCache(); } }; list.addListSelectionListener(l); I can't see any diff did you remember your commnent (e.i.) about doLayout() @mKorbel hmm ... using the combination of the renderer with direct querying of the selection state (as suggested by @Andy) and forcing the ui to update its cached sizes (by the fake event) in a ListSelectionListener in the OPs SSCCE works fine for me that is selected lines are higher than unselected well have to test for larger model btw +1 for a bit of :-)  I just implemented this feature. The problem is that the cell renderer is asked twice for rendering a cell. In the first round all list entries are rendered without selection then the selected cells are rendered again using selection. So if you provide a preferred size in the first round it is cached and also used for the second round. The trick is to ignore the isSelected boolean parameter in the getListCellRendererComponent and to figure out the selection state by checking if list.getSelectedIndices() contains the given index. But I still have the problem that after the list is made visible the height of the rendered components are sometimes to large/small. After resizing the list by mouse everything is fine again. I played around with validate/revalidate repaint reset of cached heights but nothing worked. Swing is sometimes a bit strange... +1 good idea :-) Have a look at my answer to see if it solves your remaining problem. If not consider to post a separate question with some code to reproduce the issue will give it a look then.  The JList is probably ""caching"" your cell renderer. Try to attach a ListSelectionListener and set the renderer again when selection is changed. ... addListSelectionListener(new ListSelectionListener() { public void valueChanged(ListSelectionEvent event) { if(event.getValueIsAdjusting() == false) { list.setCellRenderer(new MyRenderer()); } } ) ... This won't help.. This doesn't work"
242,A,"How do I add components at run time to a Swing UI created with Netbeans visual editor? I am currently writing an application where the user has at some point to click a button which have been generated at run time. I know how to do it when writing all my swing code from scratch but I'd like to take advantage of Netbeans' visual editor. The generated UI code goes into an initComponents() method I can't modify since it is regenerated automatically from the visual form. I'd like to have a panel I place at design time using the visual editor in which I could add the buttons at run time so that they fit nicely in the layout but I don't know how to access the panel in a convenient way. Besides there may be another method than using a panel. So basically : How do I locate a Swing component at run time ? Is there a better way of integrating components created at run time in a generated Swing UI ? Thanks for your help. Just because you are using NetBeans generated GUI classes doesn't mean that you have to use the Group layout for the panels. I find that switching it to a BorderLayout helps especially in cases where I want to add some dynamic user interface code. I came across that problem once I accessed the panel properly : buttons where not showing up due to the way the default GroupLayout was configured for the panel. I switched to a BoxLayout and everything worked as intended. I only got confused by the fact that the layout for a container must be changed through the right-click menu on the container not in the property inspector. Hope this helps too.  NetBeans-generated GUI classes store all the components in private variables. You can add a method into the generated class that returns the panel and it will remain even as you do additional design. If you're going to use a generated UI then it's probably best to use a JPanel within that UI to ""carve out"" space for your own components. Otherwise you'll have to worry about how your components affect the layout of the components placed by the UI. Shame on me I didn't look well enough in the generated source (""Variables declaration - do not modify"" section) for member declarations (that old habit of only looking at the top of the class declaration). Thank you for your answer.  It is possible to change private to protected/public by either right clicking on a component in the GUI-Designer choosing properties and hitting the Source-tab or right clicking on a component and choosing ""Modify Source"" (or something like that) and setting the appropriate access modifier. Or just export them via a getXYZComponent() method. Locating the component should provide as being too difficult as you built it with the designer and thus know each component. For example if you had a JTabbedPane and wanted to add tabs to it when the user hits a button or something like that you would simply issue myJTabbedPane.add(myCustomComponent); et voila a new tab appears. It is also possible to modify the auto-generated code and/or the code used for auto-generation by using the ""Modify source"" dialog mentioned above which can be really useful."
243,A,"Mimicking Zoom bar from Office 2007 in Java (Modified JSlider) I'm attempting to mimic (or find a preexisting component) that mimics the zoom slider from Word 2007: There are two main differences between this component and a standard Java JSlider: Does not snap to ticks except at 100% and snaps while you're sliding the bar rather than when you release mouse Slider is not linear the whole way across: The left half of slider goes from 10% to 100%; the right side goes from 100% to 500%. Here is what I have so far: Source:  import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JSlider; import javax.swing.event.ChangeEvent; import javax.swing.event.ChangeListener; /** * * @author NDUNN * @date Nov 25 2009 */ public class ZoomBar extends JPanel implements ActionListener ChangeListener { private JLabel zoomAmount; private JButton minus; private JButton plus; private JSlider slider; private static final int MIN_ZOOM = 10; private static final int MAX_ZOOM = 200; private static final int DEFAULT_ZOOM = 100; private static final int MAJOR_ZOOM_SPACING = 50; private static final int MINOR_ZOOM_SPACING = 10; public ZoomBar() { super(); minus = new JButton(""-""); plus = new JButton(""+""); slider = new JSlider(MIN_ZOOM MAX_ZOOM DEFAULT_ZOOM); slider.setMinorTickSpacing(MINOR_ZOOM_SPACING); slider.setMajorTickSpacing(MAJOR_ZOOM_SPACING); slider.setPaintTicks(true); slider.setSnapToTicks(true); zoomAmount = new JLabel(slider.getValue() + ""%""); add(zoomAmount); add(minus); add(slider); add(plus); plus.addActionListener(this); minus.addActionListener(this); slider.addChangeListener(this); } public static void main(String[] args) { JFrame frame = new JFrame(""Zoom bar clone""); frame.setContentPane(new ZoomBar()); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); } public void actionPerformed(ActionEvent e) { if (e.getSource() == plus) { slider.setValue(slider.getValue() + MINOR_ZOOM_SPACING); } else if (e.getSource() == minus) { slider.setValue(slider.getValue() - MINOR_ZOOM_SPACING); } } public void stateChanged(ChangeEvent e) { if (slider.getValueIsAdjusting()) { return; } zoomAmount.setText(slider.getValue() + ""%""); } } Basically just mimicking the look but without those two features mentioned above. I don't see anything in the JSlider API that allows me to get this behavior. Would I have to start from scratch to get this behavior? If so it's not worth my time but if anyone knows of a good way to get this behavior I think it'd be nice to have in the project I'm working on. Thanks Nick EDIT: Thanks to PSpeed for idea about just mapping the 0..50 and 50..100 to different values. Code to do so is below. Unfortunately the idea about changing setValue to snap did not work. public void stateChanged(ChangeEvent e) { // While slider is moving snap it to midpoint int value = slider.getValue(); if (slider.getValueIsAdjusting()) { return; } zoomValue = fromSlider(value); zoomLabel.setText(zoomValue + ""%""); } public int fromSlider(int sliderValue) { int mappedValue = 0; if (sliderValue <= 50) { // Map from [0 50] to [MIN ... DEFAULT] mappedValue = (int) map(sliderValue 0 50 MIN_ZOOM DEFAULT_ZOOM); } else { // Convert from (50 100] to (DEFAULT ... MAX] mappedValue = (int) map(sliderValue 50 100 DEFAULT_ZOOM MAX_ZOOM); } return mappedValue; } public int toSlider(int modelValue) { int mappedValue = 0; if (modelValue <= DEFAULT_ZOOM) { // Map from [MIN_ZOOM DEFAULT_ZOOM] to [0 ... 50] mappedValue = (int) map(modelValue MIN_ZOOM DEFAULT_ZOOM 0 50); } else { // Convert from (DEFAULT ... MAX] to (50 100] mappedValue = (int) map(modelValue DEFAULT_ZOOM MAX_ZOOM 50 100); } return mappedValue; } /** * @param value The incoming value to be converted * @param low1 Lower bound of the value's current range * @param high1 Upper bound of the value's current range * @param low2 Lower bound of the value's target range * @param high2 Upper bound of the value's target range * @return */ public static final double map(double value double low1 double high1 double low2 double high2) { double diff = value - low1; double proportion = diff / (high1 - low1); return lerp(low2 high2 proportion); } public static final double lerp(double value1 double value2 double amt) { return ((value2 - value1) * amt) + value1; } Edit 2: One other difference I notice is that a JButton doesn't let you hold it down to fire button multiple times whereas the +/- buttons in office do. Any idea how to mimic this? Where did you do the snapping? The idea was to do it inside the custom bounded range model. The theory is that the JSlider will try to tell you 47 but the model wouldn't listen and just set its own value to 50... it would still need to fire a change event though. That way the JSlider would know what the proper position for its thumb is. Since the user is still dragging the mouse should still be in the '47' position and if they move a little more to the left then it should snap. If you describe what is actually happening then maybe I can think of something else. I tried both in the BoundedRangeModel and in the JSlider itself. http://pastebin.com/f10ddb17f The value is certainly wrapping (I notice it in the label I'm also updating) but the problem is the position of the thumb is firmly tied to that of the mouse cursor. re: Your Edit 2 a custom ButtonModel should be able to handle that... Swing may already have one they use in their spinners but not exposed. Actually looks like they do some complicated tricks in the action listener. I still think at first blush a custom button model would be easiest. Have setPressed(true) start a timer that fires action performed and setPressed(false) stop the timer. Add an initial delay to make it feel better. If it were me I might look into how JSlider implements its own snap-to-tick functionality and see if that gives hints on a good way to do what you want. It's different but similar enough to maybe be inspiring. I believe you can get all of this behavior with a custom BoundedRangeModel. The key is to make the model report a normal type of range of values but treat it differently when you want your zoom factor. So for example if you let your range run from 0 - 100 you'd treat 0-50 one way and 50-100 another way (10-100% and 100-500% respectively). To get the snap behavior I'm pretty sure you can just override setValue() to snap the range you want. So using 0-100 as the value range if setValue() is called with 47-53 then just snap the value to 50."
244,A,"Java dynamic JTree I want to find the method that adds nodes to a JTree dynamically looking through the documentation and the examples this can only be done at the constructor of the JTree. If possible please show me the code snippets to do this. Thanks in advance. You can't add nodes to a JTree dynamically because a JTree is the view part not the model part. You need to separate and keep track of your model (Adrian posted a good model to use) and then you can add nodes dynamically to your model. Try this Edit with more explanation: you want your tree model to be based on MutableTreeNode. The link above is an example from the Sun tutorial. I saw this example but i cant find the source code for it nor i know how to set a root node or get the root node at runtime to use it. Thanks for your concern.  The Sun example tutorial mentioned by I82Much includes a demo project DynamicTreeDemo that is made up of the two source files DynamicTreeDemo.java and DynamicTree.java. You should be able to get to them from these links.  You need to have a custom implementation of a TreeModel and TreeNode see bellow. Just extend LazyTreeModel and implement loadChildren(). There a few dependencies that you must replace with your implementations : LOG - your logger and WorkerManager.getInstance().schedule(new LoadNodesWorker()) you can replace it with a Thread() - Worker is the equivalent of Runnable. public abstract class LazyTreeModel extends DefaultTreeModel implements TreeWillExpandListener { public LazyTreeModel(TreeNode root JTree tree) { super(root); setAsksAllowsChildren(true); tree.addTreeWillExpandListener(this); tree.setModel(this); } public void treeWillExpand(TreeExpansionEvent event) throws ExpandVetoException { LazyTreeNode node = (LazyTreeNode) event.getPath().getLastPathComponent(); if (node.isLoaded()) { return; } setLoading(node false); WorkerManager.getInstance().schedule(new LoadNodesWorker(node)); } public void reloadNode(String id) { LazyTreeNode node = findNode(id); if (node != null) { node.setLoaded(false); setLoading(node true); WorkerManager.getInstance().schedule(new LoadNodesWorker(node)); } } public void reloadParentNode(String id) { LazyTreeNode node = findParent(id); if (node != null) { node.setLoaded(false); setLoading(node true); WorkerManager.getInstance().schedule(new LoadNodesWorker(node)); } } public LazyTreeNode findParent(String id) { LazyTreeNode node = findNode(id); if (node != null && node.getParent() != null) { return (LazyTreeNode) node.getParent(); } return null; } public void loadFirstLevel() { setLoading((LazyTreeNode) getRoot() false); WorkerManager.getInstance().schedule(new LoadNodesWorker((LazyTreeNode) getRoot())); } public void treeWillCollapse(TreeExpansionEvent event) throws ExpandVetoException { } protected void setChildren(LazyTreeNode parentNode LazyTreeNode... nodes) { if (nodes == null) { return; } int childCount = parentNode.getChildCount(); if (childCount > 0) { for (int i = 0; i < childCount; i++) { removeNodeFromParent((MutableTreeNode) parentNode.getChildAt(0)); } } for (int i = 0; i < nodes.length; i++) { insertNodeInto(nodes[i] parentNode i); } } private void setLoading2(final LazyTreeNode parentNode final boolean reload) { if (reload) { setChildren(parentNode createReloadingNode()); } else { setChildren(parentNode createLoadingNode()); } } private void setLoading(final LazyTreeNode parentNode final boolean reload) { if (SwingUtilities.isEventDispatchThread()) { setLoading2(parentNode reload); } else { try { SwingUtilities.invokeAndWait(new Runnable() { public void run() { setLoading2(parentNode reload); } }); } catch (Exception e) { LOG.error(""Cannot create loading node"" e); } } } private LazyTreeNode findNode(String id) { return findNode(id (LazyTreeNode) getRoot()); } private LazyTreeNode findNode(String id LazyTreeNode parent) { int count = parent.getChildCount(); for (int i = 0; i < count; i++) { LazyTreeNode node = (LazyTreeNode) parent.getChildAt(i); if (id.equals(node.getId())) { return node; } if (node.isLoaded()) { node = findNode(id node); if (node != null) { return node; } } } return null; } public abstract LazyTreeNode[] loadChildren(LazyTreeNode parentNode); protected LazyTreeNode createLoadingNode() { return new LazyTreeNode(null ""Loading..."" false); } protected LazyTreeNode createReloadingNode() { return new LazyTreeNode(null ""Refreshing..."" false); } class LoadNodesWorker implements Worker { private LazyTreeNode parentNode; LoadNodesWorker(LazyTreeNode parent) { this.parentNode = parent; } public String getName() { return ""Lazy loading of node "" + parentNode.getId(); } public void execute() throws Exception { final LazyTreeNode[] treeNodes = loadChildren(parentNode); if (treeNodes == null) { return; } SwingUtilities.invokeLater(new Runnable() { public void run() { parentNode.setLoaded(true); setChildren(parentNode treeNodes); } }); } } } public class LazyTreeNode extends DefaultMutableTreeNode { private boolean loaded; private String id; public LazyTreeNode(String id) { this(id null); } public LazyTreeNode(String id Object userObject) { this(id userObject true); } public LazyTreeNode(String id Object userObject boolean allowsChildren) { super(userObject allowsChildren); this.id = id; } public String getId() { return id; } protected boolean isLoaded() { return loaded; } protected void setLoaded(boolean loaded) { this.loaded = loaded; } @Override public boolean isLeaf() { return !getAllowsChildren(); } }"
245,A,Why do my JDialogs leak? I have a JFrame and I open a JDialog from it and another JDialog from that dialog - which menas i have 3 windows visible (JFrame JDialog1 Jdialog2). When I close both dialogs and run a garbage collectior few times (from netbeans profiler) I can see that JDialog2 (the one opened from JDialog1) is garbage collected but JDialog1 (opened from JFrame) is still hanging in live objects pool. I create new objects every time - so after some time I have an OutOfMemoryError doue to memory leak. Do I have to treat JDialogs in som special way so they don't leak ? by the way i do setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE) on both dialogs What is your default close operation? From the java JDialog api: The value is set to HIDE_ON_CLOSE by default. What this means is basically that setVisible(false) or a near equivalent of that is called when a user clicks close. The behavior you observe is consistent with that. Try jDialog1.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE) wow I cannot believe that dispose_on_close is not the default  Have you unregistered all of your listeners on the dialog (including any of it's components)? Leaving listeners registered can be a major source of memory leaks.  In order to release allocated resources you have to call the dispose method. Simply hiding the dialog is not enough.
246,A,"AWTUtilities Transparent JFrame Using this article from sun. I am trying to create a transparent window. I have one image inside a label on the frame. I want the image to be visible but the frame invisible. When i use  try { Class awtUtilitiesClass = Class.forName(""com.sun.awt.AWTUtilities""); Method mSetWindowOpacity = awtUtilitiesClass.getMethod(""setWindowOpacity"" Window.class float.class); mSetWindowOpacity.invoke(null window Float.valueOf(0.75f)); } catch (NoSuchMethodException ex) { ex.printStackTrace(); } catch (SecurityException ex) { ex.printStackTrace(); } catch (ClassNotFoundException ex) { ex.printStackTrace(); } catch (IllegalAccessException ex) { ex.printStackTrace(); } catch (IllegalArgumentException ex) { ex.printStackTrace(); } catch (InvocationTargetException ex) { ex.printStackTrace(); } It makes everthing transparent is possible to keep components not transparent. You can still use the AWTUtilities class but instead of setting the opacity with setWindowOpacity() setWindowOpaque(). This will turn off the background of the window but anything you draw inside the window will still be drawn as before. As of the recent Java 6 updates this is now the correct way to do things. AWTUtilities will work on both Mac & MS Windows. These methods will be moved into java.awt.Window itself in Java 7.  I'd like to expand on a previous answer with the following. This will create a window with 0.05 transparency or 12.75 out of 255. Then the components are set to a transparency of 0.50f this will only effect clickable components. Non clickable like Labels can have their transparency set to what ever. This however patches the clickable components problem of it changing colors. JWindow subFrame = new JWindow(); subFrame.setBounds(0 0 500 500); subFrame.setAlwaysOnTop(true); subFrame.setOpacity(0.50f); subFrame.setBackground(new Color(1.0f 1.0f 1.0f 0.05f)); JButton button = new JButton(""Hello""); button.setBounds(20 180 100 40); subFrame.getContentPane().setLayout(null); subFrame.getContentPane().add(button); subFrame.setVisible(true);  You could try just setting the alpha channel for the background color of your frame that shouldn't descend to components. window.setBackground(new Color(1.0 1.0 1.0 0.25)); should give you a white transparent window. Thanks! This works great for me... on Mac OS X. Does it work on other platforms? In researching transparent window stuff I've found a number of articles that say other techniques are required on other platforms. http://explodingpixels.wordpress.com/2009/06/19/hud-on-windows-finally/  You need to set the opacity of the child components something like childComponent.setOpaque(true); That will make them opaque without making the frame opaque."
247,A,"Getting ENTER to work with a JSpinner the way it does with a JTextField First to make my job explaining a bit easier here's some of my code:  JSpinner spin = new JSpinner( ); JFormattedTextField text = getTextField( spin ); text.addActionListener( new java.awt.event.ActionListener() { public void actionPerformed( java.awt.event.ActionEvent evt ) { // Do stuff... } } ); ... private JFormattedTextField getTextField( JSpinner spinner ) { JComponent editor = spinner.getEditor(); if ( editor instanceof JSpinner.DefaultEditor ) { return ( ( JSpinner.DefaultEditor )editor ).getTextField(); } else { System.err.println( ""Unexpected editor type: "" + spinner.getEditor().getClass() + "" isn't a descendant of DefaultEditor"" ); return null; } } So as you can see I got that far. And indeed when I type in a value into the text field component of the spinner (JFormattedTextField) and THEN press ENTER it works. What I want now is to be able to have the text field respond to ENTER without having to manually type in a new value (which sorta defeats the purpose of making a spinner out of it). How do I do that? I know this is not the action listener...but maybe this can work for you?  text.addKeyListener( new KeyAdapter() { @Override public void keyReleased( final KeyEvent e ) { if ( e.getKeyCode() == KeyEvent.VK_ENTER ) { System.out.println( ""enter pressed"" ); } } } ); It works! Thanks. Happy to help. Though I'd like to know why the action listener did not work :D Beats me. :P Probably because the JSpinner was stealing away inputs somehow? I'd probably use getInputMap() and getActionMap() but thanks for the post!"
248,A,In what way do many graphical components affect the performance of a Swing GUI? I've creating a Java Swing application and I realized that I have many many components on a form. It's not that my interface is cluttered but nevertheless the total amount can be quite high (hundreds) because the user can enable additional parts of the interface and there have to be list-like repeating panels on the form. Additionally many components are wrapped into a JXLayer again increasing the number of visual components. Until now I couldn't detect any problems besides lagging during scrolling and resizing. Are there any theoretical limits on the number of components? (I doubt it but I also have to code in VB6 so I've been there...) Are there any pratical limits? At work we have some medium-end workstations which perform fine at first sight but how does Java/Swing react on low-end workstations or extreme counts of components? Is there any way to profile the GUI of my application besides checking the subjective impression of the user? Are there any objective indicators I can look for (Like total time spent in javax.swing.SwingCoreClassWhichContainsBottleneckCode or something...) Could you give us a screenshot of the window? Unfortunately our company policies don't allow that because it's an unfinished product. Swing can handle a significant number of components with only memory limitations particularly using simple components (text box label radio button etc). There are some tricks eg reducing the window size and wrapping everything in a JScrollPane but generally standard techniques such as doing heavy processing in the background will be all you need. One of the features my company is working on involves a dialog with a repeating JPanel that contains a handful of labels and a button. We tested it on our old Mac Mini (intel core solo with 512mb ram) and creating 500 panels took a few seconds to load but after that scrolling through the panel list or adding new panels was not slow at all. For serious performance concerns look at JTable which is pretty highly optimised for displaying large amounts of data. It's a little tough to create custom renderers and editors but not impossible.  In theory you can have as many components as you like. The practical limit is the amount of RAM. Also the UI will start to get slow when you have too many components so performance is an issue too (as always). Java 6 will help a bit. Yes. You can create the UI and then force a repaint at the shell level (so everything gets painted) and measure that. Using a profiler should give you some idea which component is especially slow.  Only the memory and the underlying OS limits the number of components. The practical limit is a bit user-subjective. Try splitting the UI into separate tabs or JFrames this will limit the rendering overhead per screen. JVisualVM is quite good in profiling java application. You will need to remove the class filters to see the sun* and javax* classes profiled.
249,A,"How can I change te background color of a Java applet? Greetings So far my code compiles but it changes white to black and then don't want to change. Supposely it should change from red->orange->green->pink->blue->black.. public void init() { c=new Color[] {Color.red Color.orange Color.green Color.pink Color.blue Color.black }; btnNext = new Button(""Next Color""); btnNext.addActionListener(this); setLayout(new BorderLayout()); add(btnNext BorderLayout.SOUTH); } public void paint(Graphics g) { } public void actionPerformed(ActionEvent e) { if(e.getSource() == btnNext) { for(int n=0;n<6;n++) { setBackground(c[n]); } repaint(); } } Thank you for your help. What's happening is that you're looping through all of the colors all at once every time the btnNext action is triggered. It goes by so fast that you do not see the other colors. What I would do is have a variable that keeps track of what position in the array you are in and have that variable be incremented when the user hits next and then change the background to that color. You have to get rid of the for loop inside your actionPerformed.  What you need to do is keep an int member variable of the current position in the array. Then increment that position every time you click the button. // New int keeping track of background pos private int arrPos; public void init() { c=new Color[] {Color.red Color.orange Color.green Color.pink Color.blue Color.black }; // initialize the int arrPos = 0; btnNext = new Button(""Next Color""); btnNext.addActionListener(this); setLayout(new BorderLayout()); add(btnNext BorderLayout.SOUTH); } public void paint(Graphics g) { } public void actionPerformed(ActionEvent e) { if(e.getSource() == btnNext) { // increment the background arrPos++; if (arrPos >= c.length) arrPos = 0; setBackground(c[arrPos]); repaint(); } } @mjh2007I wouldn't recommend overriding paint with a blank method. I was just showing that the paint method didn't need to change for the background color to change. If you override your paint() method with an empty method won't the applet not be drawn at all after a repaint?"
250,A,How can I best implement a Fade Button Effect in Swing? I have a JButton which when pressed changes background color from active to normal: final Color activeButtonColor = new Color(159 188 191); final Color normalButtonColor = new Color(47 55 56); I want to fade the active button color back to the normal button color when a specific task has finished executing. I'm using SwingWorker and wondered if anybody could suggest an efficient way to do this please? button.addActionListener(new ActionListener() { public void actionPerformed(final ActionEvent event) { new SwingWorker<Object Object>() { protected Object doInBackground() throws Exception { button.setBackground(activeButtonColor); for (int note = 60; note < 120; note++) { midiController.sendMidiMessage(1 note 83); midiController.stopMidiMessage(note 83); } Thread.sleep(200); return null; } protected void done() { try { Object result = get(); // Fade back } catch (Exception ex) { ex.printStackTrace(); if (ex instanceof java.lang.InterruptedException) return; } } }.execute(); } }); EDIT: Just to be clear I'm looking for an efficient way to fade the RGB values for activeButtonColor back to normalButtonColor without having to create a huge number of Color objects. Is it possible? Or do I just have to limit the number of fade steps to be more efficient? Create a method that takes 3 arguments a button a from color and to color. Inside the method create a swingworker to run in the background that does the fade of the colors. Then on your actionlistener where you do your work before you do anything call the fade method from active to normal. When its done call the fade method from normal to active. You'll end up with 3 total swingworkers being used in this situation. One for your work one for the first fade and one for the last fade. Sure that's great but how do I avoid creating several Color objects each time during the fade. I might be missing something here but Color appears to be immutable. I need to change the rgb values of the color I'm assuming. Create an array of intermediate color objects and keep it at the class level?  Color objects should be fairly lightweight; they're basically just four floats plus a handful of pointers to pre-existing objects. If you really want to save on Color object instantiation and you're sure the start and end colors above will not change you could precompute the Color objects for the fade sequence but I'm quite sure you could compute them on the fly as well and suffer no consequences.
251,A,"JavaFX component that emulates JTable I have a large dataset that needs to be displayed for users and looking for Swing's JTable like component in JavaFX. You can wrap JTable to be used in JavaFX. Check out the following article http://java.dzone.com/articles/javafx-reintroduce-swing-jtabl The article looks interesting but the code will not work under JavaFX 1.2. You may also find more info at http://weblogs.java.net/blog/aim/archive/2009/06/insiders_guide.html  I recommend you read Amy Fowler's recent blog post (especially point 6): Any Swing component can be embedded in a JavaFX scene graph using the SwingComponent wrap() function. This conveniently allows you to directly leverage those Swing components which you've already configured customized and hooked to your application data; all that Java code can remain happily unmodified. Once you've created the structure of your scene's layout you can pull your Swing components into the appropriate locations. http://weblogs.java.net/blog/aim/archive/2009/06/insiders_guide.html  Use a TableView control. javadoc tutorial A TableView is a ""virtualized"" control which efficiently reuses a small number of node cells to present a view into potentially very large data sets. Note other answers on this page which were written before 2012 concern JavaFX 1.x and are obsolete."
252,A,Adding additional JPanels to a JPanel Rather basic question here guys. Basically I have code like this: public SuperPanel() { setLayout(new BorderLayout()); add(panel1() BorderLayout.NORTH); add(panel2() BorderLayout.CENTER); add(panel3() BorderLayout.SOUTH); } And that all works well and good. The problem is that I have another part I wish to add to the center. Just using add(newPanel() BorderLayout.CENTER) doesn't work obviously. But you can add JPanels in JPanels correct? So I made the following change: public SuperPanel() { setLayout(new BorderLayout()); add(panel1() BorderLayout.NORTH); add(supersweetpanel() BorderLayout.CENTER); add(panel3() BorderLayout.SOUTH); } With supersweetpanel() being: public JPanel supersweetpanel() { JPanel sswp = new JPanel(); setLayout(new BorderLayout()); add(panel2() BorderLayout.NORTH); return sswp; } Now it overrides panel1! If I set it to anything else (CENTER SOUTH what have you) the first two panels disappear entirely. Help is much appreciated. SuperPanel is likely a subclass of JPanel right? You are accidentally adding panel2 to this (the SuperPanel) not sswp. Try: public JPanel supersweetpanel() { JPanel sswp = new JPanel(); sswp.setLayout(new BorderLayout()); sswp.add(panel2() BorderLayout.NORTH); return sswp; } +1. That's got to be it and it gives a good example of why using inheritance can make things fragile. Ah that was it exactly. Lovely. What Eddie said. It's a shame most Swing tutorials (and Swing GUIs) have such bad code.
253,A,"Swing GUI components too tighly packed In the Java Swing app I made it seems to me that all the component are too tightly packed. In QT one can specify padding and margins for the layout. Is there something similar for swing? Here is a screen shot of my application that I thing is too tight (is it? what do you think?. Thanks. You could achieve a much better layout for the example above by using DesignGridLayout in just a couple of lines of code (one per row in your layout). DesignGridLayout will automatically use the correct spacing for the runtime platform. besides I would highly suggest that you DON'T use TitledBorders in your form because it prevents ANY LayoutManager (as advanced as it may be) from automatically aligning correctly the various components across different groups. Instead you could use a JLabel with a JSeparator (there are examples in DesignGridLayout but this works with any other LayoutManager). oh so this is how you solve the V align issue great thanks. About the DesignGridLayout as I said: I am reluctant to add another dependency to the project. no problem with that! But you should be aware that working with ""pure"" Swing (without ANY 3rd-party library not just for layout but also for tables special widgets...) is a big pain! Your choice anyway;-)  FormLayout is another good layout manager. With a good GUI editor like JFormDesigner it makes GUI building easy enough. JFormDesigner actually automatically adds sufficient padding in most cases. I have to recommend against using GridBagLayout. It does the job alright but is very complex which makes it difficult to use and maintain. maybe but I write open source and JFormDesigner is not free. maybe for others...  You could use MiGLayout as your layout manager. It allows all kinds of customizations including margins/paddings. Thanks that could be an even better solution but currently I am reluctant to add another dependency to the project.  Take a look to the GridBagLayoutManager. Its the most compex layout manager but everything can be acomplished whith it. It uses the GridBagConstraintObject which has the inset property it specifies the separation to the top bottom left and right components. example: GridBagConstraintObject.insets.left=20  What LayoutManager are you using? Adding margins is quite easy it depends however on the specific LayoutManager used. It is a vertical BoxLayout with horizontal Box(es).  Since Java 1.6 swing there is a new GroupLayout manager that make this kind of works easier. For instance there is a method: setAutoCreateGaps() that: ...you add two components to a SequentialGroup a gap between the two components is automatically be created... For instance: That group layout seems great I will give it a try. Does by using GroupLayout the user must have at least Java 6 runtime? That's correct 1.6 is needed. I think if the user has < 1.6 you could take the source code of GroupLayout and ship it with your app. It is open source after all. I like this better than GridbagLayout because you don't need all those gridbagcontraints objects :)"
254,A,"Is there a way to hide the tab bar of JTabbedPane if only one tab exists? I want a behavior similar to e.g. Firefox where the list of available tabs does only show up if at least two tabs exist. I wasn't able to find anything like that yet. The best idea I had was changing the layout manually: in case of one component just add that to the surrounding panel if a component is added remove the component from the surrounding panel add a JTabbedPane instead and add both the previous and the new component to that pane. if a component is removed and only one component is left in the pane remove the pane and add the contained component instead. While this would probably work it feels like a hack or workaround... Any better idea? A solution should ideally work in both Java 1.5 and 1.6... but I'd be happy about a 1.6-only solution too. I think this can be achieved using tab bar and a card layout add the tab bar and card layout to a grid bag layout so that they re-size automatically the max height of the tab bar should be the height of the tab add a listener to tab bar so that when certain tabs are clicked it will switch the card layout to show appropriate content hide the tab bar if it has only one tab and this should do the job.  I believe you'll have to do it manually. Apparently it has been done before but only as a small bit of a system which seems to not be available. Your approach looks good to me. I would do it just like you laid it out and wrap all that logic in a custom JComponent so it will feel less hackish. I'll wait a little longer to see if someone has a brilliant idea before checking the answer... Thanks I guess there's really no other way... Sorry. If anyone finds such a component or makes one I would like to hear about it. I agree with @mmyers. If someone has a prebuilt component to do this I'd be pretty certain it worked this way.  Another option would be to customize the L&F delegate (either BasicTabbedPaneUI or WindowsTabbedPaneUI depending on the platforms you care about) used by the JTabbedPane. This would allow you to customize the behavior of the tabbed pane in the case where only a single tab was being shown. This is another way of doing things however I would say it's quite an undertaking and doing what Michael said will get you where you want to go with a lot less effort. I just wanted to post this as an answer in case you weren't aware of this option.  You can override the UI method that calculates the height for the tab button area forcing the height to 0 when there's only one tab: tabbed_pane.setUI(new BasicTabbedPaneUI() { @Override protected int calculateTabAreaHeight(int tab_placement int run_count int max_tab_height) { if (tabbed_pane.getTabCount() > 1) return super.calculateTabAreaHeight(tab_placement run_count max_tab_height); else return 0; } }); This works but i had a thin coloured top border on my TabbedPane that was left out at the area where the tab used to be. Trying a bit and doing almost the same override for 'paintTabBorder' and 'paintTabBackground' solved the problem.  You may be better off simply using CardLayout. Simply jTabbedPane1.setLayout(new CardLayout()); +50! @eugener Could you add some example of how to use CardLayout with jTabbedPane1? is it possible to set CardLayout for this object and for example AbsoluteLayout for the others?? +1 for this is what I would have done Good general idea but I want to have a JTabbedPane incl. the various looks regarding PLAF. Anyway your input is appreciated.  Yes there is a way. Took me four hours to find at the oracle website: http://docs.oracle.com/javase/7/docs/api/javax/swing/JTabbedPane.html#setTabLayoutPolicy() Simply use this: //declare private JTabbedPane editor = new JTabbedPane (); //construct like this: editor.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT); //just add components and see how it goes. editor.addTab("""" newPanel);"
255,A,"Java Swing or Java Qt? Can someone with extensive experience with both Qt and Java Swing please discuss whether you would use Swing or Qt under Java and why? Secondly what is the business impact of using Qt? Is it reasonably popular or will I have a hard time finding experienced Qt developers? Are there any other business impacts I should be aware of? UPDATE: I am more interested in the technical and business impacts of Swing vs Qt than the license type/fee since in my case the cost is not a concern. I agree with Jason. This issue is quite subjective. I accepted an answer favoring Qt but I personally still favor Swing. @HaveAGuess: because at the time the question was posed Qt was a rising star. There are plenty of questions discussing other frameworks. This question focuses solely on the differences between Swing and Qt. Can I ask why we are disregarding Netbeans/Eclipse RCP and even Gtk? Qt Jambi has been picked by community though: http://qt-jambi.org It is licenced under LGPL and approaching 4.7 release. And now Qt will become LGPL as of Qt 4.5 Qt Jambi too ;-) http://www.qtsoftware.com/about/news/lgpl-license-option-added-to-qt As far as Qt vs Java PDF Deepak has presented it clearly was written many years ago. Since then Java's virtual machine has improved tremendously so memory and performance issues are not an issue anymore. The article discusses even the validity of using garbage collector which I find hilarious! Next discussing programming models signal-slot model has been presented as superiour to MVC with only measurement being number of the lines of the code required to achieve same effect! What was overlooked in that document is that Java's code is clearly self-documenting unlike Qt's. I'm not saying that Qt is worse than Swing. I'm just saying that that document should NOT be used as an argument. First two answers give the best description of both frameworks discussing it's strenghts and weakness alone without comparing programming models and pulling conlusions out of a thin air.  Be aware that Qt Jambi will be discontinued shortly. http://www.qtsoftware.com/about/news/preview-of-final-qt-jambi-release-available. My interpretation of this is that following the March 4.5 release Jambi will be in the same boat as Qt bindings for other languages - up to the community to maintain. Regarding your questions I have a few years of Swing experience and I've been working with Qt Jambi for the past month and I'm pretty mixed. On one hand I'm particularly disappointed with Qt's model/view paradigm. Creating an editable tree in Swing by contrast using a completely non-Swing model is a breeze. A couple of hours work. After a week of struggling I've come to the conclusion that it's just not possible to do such a thing in Jambi 4.4. (Dunno about 4.5) The only solution I can find in Qt is to tie data to the Qt model classes by subclassing QStandardItemModel and QStandardItem. (While QAbstractItemModel is very capable in C++ Qt it's literally unusable in Qt Jambi.) On the other hand Qt Jambi gives me access to the amazing QGraphicsView drawing tools and I don't know of a Java library that can compare. To me that's the power of Qt Jambi - it gives you access in Java to excellent 2D and GL drawing tools that really aren't available in Java otherwise. My advice is that if you need to build an application that uses only standard UI widgets like tables trees menus etc. then just use Swing. Layout in Swing is not that hard really especially with tools like NetBeans. However if you need GL or a canvas to paint on Qt Jambi might be worth looking into.  Pete's comment is right on. For those who need a more powerful swing based toolkit check out Jide http://www.jidesoft.com/.  To correct Adeel's comments; You can ship your software commercially - you just have to include the source. There are thousands of developers with Qt experience (KDE). Qt is standard (used by KDE Nasa ESA Adobe Skype etc) There's a large Qt community and many books and the Qt Jambi product is quite new so it's not surprising it's not that well known yet. And thats what we are talking about Qt Jambi not Qt. I admit Qt is quite common even I am using KDE and quite a no. of applications built on top of Qt. By Commercially I meant closed source. I said it wrong sorry for that. Now correction is made.  Qt is far better than AWT/Swing. I have been using Qt for past three years and have found absolutely no issues in application development. Compared to Qt(C++) Swing(Java) loses out in run time efficiency and memory efficiency. You may get a lot of Java/Swing resources easily they are hundred a penny but if you can hire a good Qt/C++ application developer thats the best choice I say. No offence to Java developers but you have to accept the facts. Qt is available with LGPL licensing. I did not see anybody mention about its cross platform support and the way it is implemented. There is tremendous advantage for Qt there. Great documentation Qt's own intuitive IDE(QtCreator) lotsa examples and a great and fast growing community out there for support! Regarding shipping extra files - there are packaging solutions available. Read more here link text All the Qt applications I have seen look horrible especially on OSX whereas Java on OSX is quite reasonable Questionable. How is Qt more cross-platform than Swing? How is LGPL better than ""GPL with classpath exception"" which Swing ships with?  As far as Qt vs Java PDF Deepak has presented it clearly was written many years ago. Since then Java's virtual machine has improved tremendously so memory and performance issues are not an issue anymore. The article discusses even the validity of using garbage collector which I find hilarious! It’s also old when it comes to Qt: The Qt toolkit follows a similar approach; like Swing it only relies on the native libraries only for very basic things and handles the drawing of GUI components itself. This is not true anymore Qt now uses native widgets. It no longer emulates them.  I think the most important factor you should consider is that Jambi QT is going to be discontinued from active development. Swing isn't that of a recent product as well. You should also definitely consider SWT since in my opinion it generally looks better than Swing. Eclipse comes built in with Windows Builder Pro now (or actually at the time of writing an available download that was suppose to be included into the Indigo release). There are not production quality designers for SWT  I completely disagree with Aaron Digulla's entire answer as it pertains to Swing. I have found Swing to be while not the best design and a little convoluted reasonably simple and workable and ultimately quite well thought out. Further it most definitely is capable of what is required for almost all GUI app's. Using the native LAF the application will look and function enough like a native application to receive a passing grade (IMO). As to the bit about layouts... it's true that the Swing layout's are a little hard to use and need nesting (sometimes a fair amount thereof) to get the desired results but the concept of Layouts are one of the best things about doing GUI's in Java. Take the time to understand what they do for you and get yourself a good table-based layout (e.g. MatrixLayout TableLayout JGoodies FormLayout or MigLayout) which will eliminate 99% of the nesting. A table-based layout will also make your GUI simpler and will make the code better reflect the end visual result. So my advice is that if QT does things in a way in which you would prefer or provides functionality that Swing doesn't then by all means look into it - provided that you are happy with distributing it's Java and native components with your app and that it targets the platforms on which you want to run (or may want to run in the future). Otherwise it's hard to beat Swing's flexibility the fact that it's baked into every Java install and it's ability for you to easily tailor look and behavior. Oh and to be fair I have not looked at QT before - But I have about 6 10 years of active Swing and AWT development comprising 1 commercially deployed AWT application and 3 such (non-trivial) Swing applications plus a number of personal Swing apps. Perhaps more important is that I have implemented a fully-functional lightweight GUI toolkit on top of AWT very much analogous to Swing but with a completely different component and event architecture which has been successfully deployed commercially. Dude half year of Qt and 2 years of Swing and AWT here and if you say such things about Swing than you should definitely try Qt... Give a try to Qt ;) @Massimo: Last time I check QT for Java was abandoned or discontinued. You should give a try to C++ Qt  I don't know much about swing but I'd like to react to Adeel's answer regarding Qt. I don't think finding experienced developer in Qt should be a showstopper : it is very easy and fast to learn Qt. The documentation is very good (that's maybe the best part of Qt : its documentation). IMHO the Qt community is great and I always found the help needed when I had problems. There is many forums (QtCenter.org QtForum.org and others) and Trolltech is running a very active mailing list. I didn't say that it is a showstopper. I just made a point to consider. As the original question mentioned it clearly. Would you down-vote the question too. Kidding. I didn't made any point regarding documentation. Its great I must admit. But I forgot to include it and now I did. By not so strong community I meant number of developers strength. Just go to any Java forum Suns JavaRanch Stackoverflow you would find much help. Of course your list is specific to Qt where else you will find help then if not there.  From my experience (one year Qt several years of Swing). Swing: Pro: Available on any Java installation. No need to ship any additional code You can write your own custom widgets in Java Contra: Swing is old. There haven't been any updates on the core for years and there won't ever be. If you plan to use Swing get a good wrapper which will make using Swing much more simple. Swing is hard to understand and use especially if you're used to UI programming on Windows. (One word: Layouts). Not many powerful widgets in the core set. You'll especially miss a good data grid. For a good look&feel you need an extra library Qt: Pro: Comprehensive set of powerful widgets Easy to use and learn Good documentation Good support Active development Uses native widgets and wraps them in a common API across all platforms Contra: You need to ship extra files Qt is written in C++ so you're accessing it via a wrapper library. If you need to implement a complex custom component things can get hairy. If you can hire a seasoned Swing developer give it a try. If you can't and if you have to start from scratch I suggest against Swing. With Qt you'll have results within hours and with only little hair pulling. Swing is powerful but it makes no attempt to hide this fact. So you'll find yourself struggling a lot with the API and the defaults which have made sense in 1996 but not anymore today. Qt has a much steeper learning curve and the API is much more consistent not to mention that Qt has been improved the last seven years while Swing hasn't (see below). KDE is based on Qt so there are lot of people out there using it and most of them have only little time (say a few hours here and there) and most can handle Qt after a short time. Which you simply can't say for Swing. There is a lot of Swing documentation but most only covers the common cases which you can figure out yourself from the Javadoc. If you need something more complex and if you're looking for a bird's eye view something which gives you a feeling how to combine things to achieve the desired result I haven't seen anything free and I also can't recommend a book for Swing book because I have stopped looking at them five years ago. If you look at Java 7 then you'll find that Sun is thinking about working on the Swing API. But: Java 7 is due in two years there is no commitment for this work items and last but not least: Can you switch to Java 7 when it will be available? Update: It seems that there won't be any Swing updates for Java 7 after all. Which is a pity. It will leave us with a built-in UI framework from the late 90's which just isn't on top of the times anymore. Being an old Amiga lover I know how it feels to be abandoned. Thanks Swing it's been a nice time. ""If you plan to use Swing get a good wrapper which will make using Swing much more simple."" Which wrappers would you suggest? I've removed the part about Qt not being free for commercial apps. Qt is LGPL'd now. @Alexey: Try Swingx http://swingx.java.net/ +1 for the Amiga lover. I have FIVE. ;-) yeah because playing with AWT to generate a custom swing component is not a pain. Do you think in Swing we don't have good documentation good support. Come on I can come up with 10 or more times more article tutorials and books. Your pro and con stuff is just plain wrong. Swing has a lot more documentation tutorials and other resources available than there will ever be for QT. Swing is a very flexible framework which allows you to do whatever you want granted that makes it sometimes a bit complicated. At least it is free. I strictly disagree with your pros and cons. Completely disagree with all of your Swing cons. If you want to list pros and cons you must draw a line somewhere. Yeah there is a lot of Swing docs. They explain the basic stuff pretty well and then the air gets thin quick. So the Qt docs are better. Swing is flexible but it is also old. That's why I said it's more simple to write custom widgets in Swing *in Java* but Qt is easier to use and understand. From my experience Swing was good seven years ago and it stayed that way while everything else improved. It's sad :( Adeel: Ok I call. give me the URL of a good documentation of JTextPane which explains how to build your own custom editor with syntax hl spell checking everything you expect from an editor today. Dan: Since you give no reasons I can only ignore your comment :) Completely disagree with the entire answer quite frankly. Details in my answer below. It should also be pointed out that Swing widgets are non-native and ass ugly while Qt widgets are native and beautiful. Qt for Java i.e. Jambi will be officially abandoned as announced by Nokia. @Xolve: Last I heard is that Jambi > 4.5 will become OSS (just like Qt). Please either post a link if you have new information or stop spreading FUD. @Monkey: Please read the question again. This is not an argument against Swing it's whether he'll likely find developers. Qt is easier to learn than Swing. Plus Swing has been abandoned by Sun so no updates for Java 7 :( Gili: URL? As I heard it the Swing JSR will be part of the OpenJDK; that doesn't mean it will be in Java 7 :( FYI: Sun just announced that Swing Application Framework will be part of Java 7. To be completely clear Aaron's update about Swing updates not being issued past Java 7 is purely simply wrong. The Swing Application Framework (JSR 296) was (IMO) a relatively unambitious compromise effort to provide a unified foundation for building GUI apps but it only addressed the least interesting plumbing and infrastructure bits (e.g. resource mgmt bootstrapping session state etc). These are all capabilities that every Java app framework (including NetBeans and Eclipse) have done well for *years* so it's absolutely no loss (again IMO) that JSR 296 has been shelved. @Chas Emerick: I'm sure most readers will understand that my complaint is that Sun didn't put any effort into Swing for years not even something as JSR 296. I didn't say anything about JSR 296 itself. Qt widgets are _not_ native. It draws them itself just as Swing with native L&F does. It's just that Qt native L&F is somewhat better than Swing. Qt has themes that use native widget drawing mechanisms even if it does everything else itself so you can get a native ""look"" even if the ""feel"" is implemented in Qt. Aaron care to comment on this now one year later and with the changes in QT? Please include a @yar in your answer as I THINK that SO will inform me that way. Thanks! @yar: Well ... in one sentence: Swing still sucks a lot C++ Qt sucks a bit less than last year Java Qt sucks much more. I haven't used Qt Jambi for anything serious last year so I can't comment on its state but at least there is an open repository with the code and TrollTech tries to build a community to support it which is more than Sun does for Swing. Interesting. I got burned answering a few questions SO recently because I said that Swing does NOT give you native look and feel. People said ""get with it! That's no longer true! Swing is now near perfect."" I don't know myself... QT does NOT look like it's got much of a community behind it judging from random googling. So uh if Swing goes away what else can we use that's ""native""? Java would be left with no UI? Would we be stuck with either doing command line or web pages? @Brian: My experience is that Qt is much more simple to learn and use then Swing. This doesn't mean you *must not use Swing*. That would be silly. If you have a choice by all means use Qt. If you *don't* have a choice (because Qt just isn't available) well there is no point in arguing which is better is there? @Aaron Qt is fine except that it's not native. You have to go out of your way to use it. It adds complexity to the project and I don't even know if it's readily available in a stable version on all the platforms that Swing is. That's my concern right there. Qt is the basis for the Unix GUI environment KDE. Millions of lines of example code. And in my time maybe 10 years ago very well and extensively documented in the standard documentation. And the Qt philosophy matches QUI development very well which makes it easy to learn."
256,A,How to wait until JComponent is fully painted? I need a way to wait until a (Swing) JComponent is fully painted. This actual problem arises from an openmap application: The task is to draw a map (mapBean) with a couple of layers and create an image from that map. Unfortunatly and it's clearly documented the image formatter takes the current state from the map to create the picture and there's a chance especially when maps become complex that the formatter ist called before the mapBean a JComponent is painted. Although explained with this openmap application the problem is quite general and supposedly Swing related. Right now I just wait a fixed time (one second) but that does not eliminate the risk of creating incomplete maps... Edit Some more details - I have to start with constructing a (OpenMap) MapPanel which internallz creates a MapBean (JComponent subclass) and a MapHandler. Then I feed the MapHandler with geographical Layers and the Framework starts painting the geographical data 'on' the JComponent type MapBean. After adding all layers to the Map I use another framework class to create a JPG image (or: the byte[] that holds the image data). And this can cause problem if I don't wait: this 'image creator' creates the image from the current state of the map bean and if I call this 'image creator' to early some map layers are not painted and missing. Pretty annoying... It is unclear from this post what problem you actually have. Can you sketch out what your code is doing? java.awt.EventQueue.invokeLater will allow you to run a task after the paint operation has finished. If it is doing some kind of asynchronous load then it will be API specific (as MediaTracker does for Image). +1 for suggesting the simple and correct approach. :) This would work also. That's what I try first. Thanks!  You might also try using an off screen buffer to render your image in:  MapBean map = new MapBean(); map.setData(...); BufferedImage bi = new BufferedImage(...); map.paintComponent(bi.getGraphics()); writeToFile(bi); Sounds promising but I don't have control over the mapBean painting this is done by the framework I just add geographical layers Which framework swing? Do you want to make a JPEG of what the mapBean currently shows on the screen or something else? Calling mapBean.paintComponent(offscreenBuffer) will force it to draw to the offscreen buffer.  It sounds like you need to synchronize updating your JComponent's underlying data with Swing's paint cycle. You can subclass your JComponent and decorate the paintComponent() method you might also look at ImageObserver.imageUpdate() though I'm not sure if that is going to tell you what you want. public class DrawingCycleAwareComponent extends MyOtherJComponent { private final Object m_synchLock = new Object(); protected void paintComponent(Graphics g) { synchronized (m_synchLock) { super.paintComponent(g); } } protected void updateData(Object data) { if (SwingUtilities.isEventDispatchThread()) { reallySetMyData(data); // don't deadlock yourself if running in swing } else { synchronized (m_synchLock) { reallySetMyData(data); } } } } I don't follow why you don't need the synchronisation in one case there. The caller might be updating their components underlying model from another thread or from the SWMET. We synchronize so that if they call setData() while the component is drawing it waits until the draw is finished. Actual Problem is that the JComponent subclass (the mapBean) is constructed by the framework and I don't believe that I can provide a custom implementation (a MapBean subclass)
257,A,Where to look to get started with making an animated clock with Swing in Java? I am trying to make an animated clock using Swing in Java. The picture I have posted is a basic idea of what I am looking for. In the end I hope to have the arrow be stationary and the numbers move to indicate the hour plus I want to have a nested circle with 60 boxes doing the same. I'm not looking for code on how to do this just some tips on how I should get started links to good tutorials that kind of thing. Thanks. edit: I for got to mention that I'm not actually making a clock its just the simplest way to explain the premise of what I'm trying to accomplish to the more general the answers the better. Did you consider using JavaFX? www.javafx.com This page on Java 2D looks like it might be a good place to start. Disclaimer: I've never seriously dealt with Java graphics before.  You could draw it on a JPanel by overriding the paintComponent method. Use a Timer to tick every second to redraw the clock. The timer fires ActionEvents which your panel could listen for. As for drawing the center of the boxes with the numbers can be calculated with a bit of trigonometry. For the hour boxes: x = sin(hour / 12 * 2 * pi) and y = cos(hour / 12 * 2 * pi). For the minute boxes: x = sin(minute / 60 * 2 * pi) and y = cos(minute / 60 * 2 * pi). These will be relative to the center of the clock and will need to be multiplied by some constant. Actually those equations might not be quite right but the way to do it is something like that.  http://www.jhlabs.com/java/layout/index.html provides a ClockLayout layoutmanager  I found some code in this posting which I believe is actually fairly close to what you want. It shows how to draw multiple sprites in a circle about a given point. It even does animation at 1/10 of a second. Slow it down to 60 minutes and its close to what you want. Note the code doesn't compile as posted. Just comments out the 2 statements in error and it should work fine.  If you want a really general answer... Make objects to represent everything that moves on screen. Have the objects know their own position and the direction they are facing. Every few milliseconds update the objects' position and direction data and then clear and redraw the screen. So in this specific case the clock face would be a background that never changes and the hands would be objects. Every millisecond use something like David's formulas to calculate the hands' new positions and directions and then draw them.
258,A,Do I need to free Swing components before letting them get garbage collected? Wnen I use external resources such as files or DB connection I need to close them before I let them go. Do I need to do the same thing with Swing components ? If yes then how ? Normally you don't need to dispose of objects when you are done with them (although setting the references to them to null may allow them to be GCed sooner). However AWT and Swing objects allocate some amount of native resources that need to be freed. Furthermore the AWT thread treats the windows as top-level objects preventing them from being garbage collected and the JVM from terminating. Thus when you are done with your window you need to dispose of it which frees the native resources that it has allocated. One way to do this is to call Window.dispose() on it. However a better option would be to call JFrame.setDefaultCloseOperation() when you initialize each of your root windows. If you pass it DISPOSE_ON_CLOSE it will take care of disposing itself when the user closes the window. When the last such window closes the AWT thread will stop blocking and allow the JVM to close (assuming you don't have any other aberrant threads running). Alternatively you can pass it EXIT_ON_CLOSE which will cause your window to call System.exit() which tells the JVM that your application is done and to gracefully terminate. An what if I only get rid of a JPanel lith some controls in order to put there someting else ? Withount closing the entire window. What then ?  Windows (including dialogs and frames) should be disposed. If you create (AWT) Graphics objects then they should be disposed of too (but usually locally within say a paintComponent method). If you have a listener to update a short lived target from a long lived source then you should remove it before discarding the target. There's a neat hack where the listener uses a WeakReference to the target so that it can deregister when the reference goes away (and an event is fired).  At one point it was taught that you had to disconnect all the listeners because otherwise they'd act as references to the Swing component. But I'm told that this is no longer a problem.  Objects are automatically garbage collected if there are no references to them. You do not have to treat Swing components the same way that you do external resources. However if you have a component that you are not going to need later you can set any references to that component to null. JPanel p = new JPanel(); p = null; Setting p to null does not delete the object but it removes any references to the object so the next time the garbage collector passes it gets picked up. You will have to be careful though that other reference to the component do not exist. p = null is rarely needed. See http://stackoverflow.com/questions/271530/cross-references-and-garbage-collection But swing components use external resources (eg window handles I gues) what about them ?
259,A,"Action commands vs Action classes? A shout out to the Swing gurus out there!! I've been doing Swing programming for several years but have always been unclear on this. As you know Swing/AWT gives you several ways to execute a particular action when a button is clicked. I've seen it done several different ways in the applications I've worked on. The project I'm currently working on tends to follow this approach: someButton.setActionCommand(""mycommand""); someButton.addActionListener(listener); --snip-- public void actionPerformed(ActionEvent event) { String command = event.getActionCommand(); if (command.equals(""mycommand"")) doThis(); else if (command.equals(""someothercommand"")) doThat(); etc. This seems kind of clunky to me - is there any benefit to this style of programming or is it better to use Swing Actions? Or are there different situations where the different approaches are better/worse? I think you just need to use your discretion to decide when either is appropriate. I don't think there is any right or wrong as such it's just one of those many things that programmers have personal preferences on but like Brandon said if you multiple buttons that do the same thing it would make sense to use one action listener! IMO it is better to use separate listeners for Actions. That way you leave the delegating of what action should happen up to Swing. You don't have to compare Strings to decide what to do. Having one huge ActionListener for more than one action feels like breaking the pattern to me. Additionally it allows for the code in the action listener to be larger or for the delegation to be internally held. I believe that the main reason to use the command element is if there are different commands that can cause actions out of the same component. However off the top of my head I cannot think of one that is inherent to Swing/AWT.  its Useful if you have several buttons or components that perform the same action (ie. several exit buttons on the same page will use the same code) Set them all to the same action command and they will all use the same code in the listener JButton.addActionListener(this); JButton2.addActionListener(this); JButton.setActionCommand(""exit""); JButton2.setActionCommand(""exit""); public void ActionPerformed(ActionEvent e){ if(e.getActionCommand==""exit"") System.exit(0); } No if they perform the same action...give them the same action listener....no need for command strings Ok thanks still learning and this is what i was taught they were used for :) It can be useful...but it would be better to give the listener to both components.  I know that's demo code but since you're working on this stuff I thought I'd mention that swing tends to be really repetitive if you're not careful. Using Action classes tends to let you refactor better. In swing one of the best ways to start is to ensure that NO strings are in your code. Nearly every ""New"" will be in a loop of some sort reading from a dataset (Often the dataset is as simple as an array)--Once you start reading from a dataset like that actions can help you a lot. You use data to create your action data to create your control and data to associate the two--in this way you can end up very close to (or at) 0 lines of code for a new control. Once you start programming this way and can see the patterns it's at least as quick as the repetitive way and much less error prone.  From a design point of view I think it is better to have one class to handle one specific action for a component as opposed to one class that is a ""lets handle everything for all components here"" type of design. Also if you use Action you can a) apply it to more than one component (e.g. a button and a menu item) b) call setEnable to enable/disable it for all components its attached to and c) Also use it to define various settings on the components its attached to (namely the text label the tooltip text the accelerator key icon etc.). This last one is done via the putValue method and calling this method again will change the settings for all components its attached to. Specifically I would advise to subclass AbstractAction for your needs."
260,A,How to turn off key handling on BasicTreeUI BasicTreeUI (in JDK 1.5) handles key events on JTree by navigating to an item on the tree that starts with that letter. What is the most straight forward way to turn that behavior off? Don't know much about JTree but it provides a method you can customize: JTree tree = new JTree(...) { public TreePath getNextMatch(String prefix int startingRow Position.Bias bias) { return getLeadSelectionPath(); } };  I think the most straightforward way is to override the createKeyListener method: tree.setUI( new BasicTreeUI(){ protected KeyListener createKeyListener(){ return null; } } );
261,A,"Why do JList selections occur twice? I have a JList with some items. I've added a listener for when a item in the list is selected. Here is the code for what happens when an item in the list is selected:  private void questionaireNamesListValueChanged(javax.swing.event.ListSelectionEvent evt) { try { inputPanel.setEnabled(false); inputPanel.setVisible(false); inputTextField.setText(""""); inputStatusLabel.setText(""""); // get the questionaireIndex selected int questionaireIndex = questionaireNamesList.getSelectedIndex(); **System.out.println(""Questionaire Index: "" + questionaireIndex);** // check if that questionaire has five questions if (remoteQuestionServer.getQuestionCount(questionaireIndex) == 5) { answerQuestionButton.setEnabled(true); addQuestionButton.setEnabled(false); } else { addQuestionButton.setEnabled(true); answerQuestionButton.setEnabled(false); } } catch (RemoteException ex) { ex.printStackTrace(); } } As you can above I put a System.out.print statement in and every time I click on something in the list I get two ouputs for that item eg. Questionaire Index: 4 Questionaire Index: 4 Questionaire Index: 2 Questionaire Index: 2 Questionaire Index: 0 Questionaire Index: 0 Questionaire Index: 2 Questionaire Index: 2 Any idea why this is happening? Thanks Patrick When you change a selection one or two events can occur depending on the implementation. If index #4 is selected and you click on the second item then the following occurs: First index #4 is UNSELECTED. Depending on the model questionaireNamesList.getSelectedIndex() can legally return either 2 or -1. second index #2 is SELECTED. At this point questionaireNamesList.getSelectedIndex() will surely return 2. Thus there are two events fired. The definition of how these events are generated allows leeway for different JVM implementations do go things slightly differently. NOTE: You should probably check the value of ListSelectionEvent#getValueIsAdjusting() to see if the event you are processing is one in a series of events. You probably need to ignore all events where this returns true. Correct answer but I don't believe it is a matter of the implementation of the **JVM**. It is more a matter of the implementation of the ListSelectionModel actually it is documented in [setValueIsAdjusting](http://docs.oracle.com/javase/7/docs/api/javax/swing/JList.html#setValueIsAdjusting(boolean) ""ListSelectionModel.setValueIsAdjusting"") @CarlosHeuberger: When I said ""different JVM implementations"" I really meant ""JVM"" including the full set of libraries as part of the implementation. I didn't mean to imply that the implementation details of the virtual machine itself would affect this. Sorry I'm not that good at English I understand ""JVM implementation"" as (only) the Java Virtual Machine implementation... The libraries are part of the JRE in my opinion. If index 4 is unselected then why would getSelectedIndex() return 4 and not -1? I edited my answer to explain. You say if index #4 is UNSELECTED it can legally return 2 or -1. Why 2? In my example you have just selected #2 so it can legally tell you that nothing is selected or that the new selection (#2) is the selection. Ah I see now. So in my case when I have x selected and click y it prints y twice which you have covered here strange that it works this way though. Anyway thanks for the answer :)  Further to the answer by Eddie look at the getValueIsAdjusting method on the event."
262,A,"JSlider key bindings So I'm a bit nonplussed at the JSlider default key bindings for vertical sliders. Home: goes to the bottom (why not the top?) End: goes to the top (why not the bottom?) PageUp/PageDown: direction good but goes up by some amount K which I can't control up/down arrow keys: direction good but goes up by 1 and I have a high-granularity slider (0 to 65535) which I would like to have a little more intuitive control over. Is there a way to customize this behavior? There isn't a straightforward way as for menus. But you can probably use actions for your purpose: http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html  You can access the keybindings via the getInputMap and getActionMap methods. For example to switch the home/end key bindings (make Home go to the top and end go to the bottom): InputMap im = yourSlider.getInputMap(); im.put(KeyStroke.getKeyStroke(""HOME"") ""maxScroll""); im.put(KeyStroke.getKeyStroke(""END"") ""minScroll""); Here's a tutorial on key bindings. Correct and complete answer Great! thanks a bunch."
263,A,"Hide print dialog I am printing a Jpanel and its working fine but now I need the print dialog box which always appear when the print button is clicked. It suppose to go like when user press print button the default printer should start printing the job with out coming up with a print dialog box. Here is the code I am using Paper paper = new Paper(); paper.setImageableArea(0 0 153 243); paper.setSize(243 154); PageFormat format = new PageFormat(); format.setPaper(paper); format.setOrientation(PageFormat.LANDSCAPE); printjob.setPrintable(printable format); if (printjob.printDialog() == false) return; try { printjob.print(); } catch (PrinterException ex) { System.out.println(""NO PAGE FOUND."" + ex); } Thanks. did you call setPrintService() on printjob? Or try using printjob.getPrinterJob() to get an instance associated with the default printer."
264,A,"String variable to a DefaultMutableTreeNode object? Is it possible to convert a String variable to a DefaultMutableTreeNode object? Please explain. Context: String s = new String(outputTagName); Object s2 = (Object) s; DefaultMutableTreeNode selectedNode2 =(DefaultMutableTreeNode) s2; DefaultMutableTreeNode parent2 =(DefaultMutableTreeNode) parent; model.insertNodeInto(selectedNode2 parent2 parent2.getChildCount()); This is the code I wrote. This is used within an enumeration that traverses the tree in the BreadthFirstSearch fashion. And the 2nf line gives me this error: java.lang.ClassCastException: java.lang.String cannot be cast to javax.swing.tree.DefaultMutableTreeNode at .... That depends entirely on the semantics of the tree you wish to use the node with. For example you can create a node containing the string as simply as: String s = ...; // your string new DefaultMutableTreeNode(s); Whether that will be any use to you depends on how you're using the tree. Basically more context please. Otherwise this simple ""yes"" answer is the best you're going to get. :-p @fixxxer: What I mean is that the process of ""conversion"" your question refers to depends on what properties you want the resulting node to have - which depends in turn on how you use it. So my answer will create a node that wraps the given String but if the other nodes contained `Booleans` or `Files` or `MyCustomRunnableImpl` (looked up by string ID) this wouldn't do you any good. Basically what I wrote will work in many situations that your question could describe and fail in many more that it could describe. In my experience I hv been unable to typecaste the String object to DefaultMutableTreeMode as the program throws errors(I was running it in Elcipse IDE).So I used setUserObject method to attach the string to the node.But this is just a temporary work-aroundin my case. What would be the semantics  that you speak of here? Can I have more than a yespretty please? :P  You cannot cast String object to any type other than String or Object or one of interfaces String implements (Serializable CharSequence Comparable). To cast object to some type the object must be of this type. String object is of type String and not of type DefaultMutableTreeNode. You cannot even make DefaultMutableTreeNode a subclass of String (in which case casting would be possible) as String class is final. Can I convert a String to Object type and then convert Object to DefaultMutableTreeNode type? A String is always a Object but an Object is not always a DefaultMutableTreeNode @Nettogrof What do you think about the ANSWER below this comment?  Link that you have provide in your other question You can see that you can do new DefaultMutableTreeNode(""Any String""); To correct your code example  the way to do it is: String s = new String(outputTagName); DefaultMutableTreeNode selectedNode2 = new DefaultMutableTreeNode(s2);  Correct me if I'm wrong but it seems like you want to change the selected node's displaying text to some new given text. If this is the case I think this might help. DefaultMutableTreeNode node=(DefaultMutableTreeNode)tree.getLastSelectedPathComponent(); node.setUserObject(""New Node Text"");"
265,A,"Java 1.5 Filter JTable I would like to filter some rows in a JTable but all the stuff google found me is for java 1.6. I would like to do this using java 1.5 since i can not upgrade? I haven't used them (I'm lucky enough to be using 1.6) but you could try Glazed Lists. It seems to work with 1.5.  You should be able to use the SwingX library to accomplish this: e.g. Filter[] filterArray = { new PatternFilter(""(.*1st.*)|(.*Final.*)"" 0 0) }; FilterPipeline filters = new FilterPipeline(filterArray); table.setFilters(filters); There's an article here on this: http://www.javalobby.org/java/forums/t18819.html You can chain various filters together using the FilterPipeline and there's a bunch of built in filters that can be used (ShufflerSorter PatternFilter). It should provide you with what you need without resorting to a Java 6 upgrade. Word of warning - The performance over large datasets is pretty poor in comparison to JDK 6's JTable filtering."
266,A,"Basic Java Question Classes updating GUI I will try and illustrate my question with examples I am attempting to create a Java program that will (eventually) incorporate a complex Swing GUI. I have Main.java public class Main extends JFrame implements ActionListener { JTextArea example; public Main() { //... Missing basic swing code example = new JTextArea(); //... example added to jpanel jpanel added to jframe jframe set visible etc. } public void actionPerformed(ActionEvent e) { if(e.getActionCommand().equalsIgnoreCase(""Do Something!"")) { new DoSomething(); } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { new Main(); } }); } } So now I want my DoSomething() class to update my example JTextArea what is the best way to do this? I can pass a reference to example to DoSomething() so DoSomething(example) but that doesn't seem nice. I could also pass ""this"" to DoSomething() and implement a updateExample(String newString) method in Main but that doesn't seem great either. Basically what is the best way to achieve what I want to do? The program I am writing will ultimately get much more complicated than this and I can't see a way that will allow me to do this without it getting too messy. It seems you're looking for Observer pattern I wrapped up a small example using your words import java.util.Observable; import java.util.Observer; public class Main implements Observer { private DoSomething businessClass; public Main() { businessClass = new DoSomething(); businessClass.addObserver(this); } public static void main(String[] args) { Main main = new Main(); } @Override public void update(Observable obs Object obj) { // Do whatever you want to do with textarea or other UI components } } class DoSomething extends Observable { public DoSomething() { Object result = new Object(); // It can be any type not just an object // After finish... setChanged(); notifyObservers(result); } } By using this small pattern the UI can be always aware of the status of your DoSomething class and that class just need to invoke notifyObservers method. Thus your system keeps decoupled while being robust Brilliant thankyou! After playing around with this I found that the observer would not be updated unless I called setChanged(); before notifyObservers(); You are right I missed that part. Answer updated"
267,A,"Select next cell JTable I would like to make a jTable in which when user select an uneditable cell then it should change focus to the next editable cell automatically. Important: the user could select a cell by keyboard (tab or arrow) and by mouse clicking. Is it possible?? How to to it? I don't understand how using a SelectionModel causes the focus to go to a cell that is editable. Why don't you post your code so others can learn from it. Table Tabbing shows how you can do it with the keyboard. I've never tried it but you should be able to use a MouseListener to invoke the same Action when you click on a cell. Just did a quick test for the MouseListener and it seems to work fine: JTable table = new JTable(...); final EditableCellFocusAction action = new EditableCellFocusAction(table KeyStroke.getKeyStroke(""TAB"")); MouseListener ml = new MouseAdapter() { public void mouseReleased(MouseEvent e) { JTable table = (JTable)e.getSource(); int row = table.rowAtPoint(e.getPoint()); int column = table.columnAtPoint(e.getPoint()); if (! table.isCellEditable(row column)) { ActionEvent event = new ActionEvent( table ActionEvent.ACTION_PERFORMED """"); action.actionPerformed(event); } } }; table.addMouseListener(ml);  This link details Programmatically Making Selections in a JTable Component; you'd have to have mouselisteners/etc chained to work off this."
268,A,"Java sampling pixel color in swing I have to create a special TextFieldUI that draws an image as the background. That image contains some alpha components. However whenever a character is written in that text field first it redraws the background and then draws the character. This is fine when the background contains no alpha components but after a few characters have been typed the alpha areas sum up to become black. The only way I can see around this is in the paintBackground method of TextfieldUI (which I'm overriding) I have to first sample the color of the background at that location paint the entire graphics component that color and then paint my background. Does anyone know how to sample the color of a pixel when all I have access to is the Graphics object? Is there a better way to draw a custom image as the textfield background other than overriding paintBackground in TextfieldUI? Thanks Well I don't know what your custom code looks like in the paintBackground method but I would make sure you fill in the text field background before you draw the image. I'll let you decide if its ""better"" or not but you can use the Background Panel which allows you to add an image to a panel. Then you add the text field to the panel (the text field is automatically made non-opaque so the image shows through). Then you add the panel to the GUI. If that doesn't work then it would be nice to have a demo of your code so we can see whats actually happening. JComponent component=getComponent(); Int width=component.getWidth(); int height=component.getHeight(); BufferedImage scaledImage=PreferencesDialog.scaleToFitWindow(imagewidthheight); g.drawImage(scaledImage00component);  I haven't tried it before but Swing is built on top of AWT and the Robot class had a way of sampling specific pixels in the AWT So I tried the Robot class and it seems to work but I'm having issues getting the correct pixel location. I tried component.getSreenLocation() and that doesn't give me the right results. Any ideas? This worked perfectly when I used component.getLocationOnScreen() and sampled the pixel at x-1 y-1 I'm not sure but I think there is an issue of relative coordinates vs. absolute coordinates. It is possible that you were somehow giving it the relative coordinates (e.g. relative to this specific panel) then a screen coordinate. OK so now I have another issue with this when the screen is being repainted the Robot gets the color from the old screen and not the new screen. Essentially I want to force a full redraw then repaint again. Any ideas?  When you override paintBackground you're calling the superclass version first right? It already lays down a background-color rectangle that would give your image a fresh-start. Rather than 'sampling' the background color it's probably already correct (the superclass paintBackground code gets it from the parent component if not locally set). If that default is not correct set it in initial interface construction. (Your field isn't being overlaid on other complicated arbitrary interface of unknown solid colors is it?) no i am using an arbitrary background which makes this problem much more difficult"
269,A,"Java Swing: what class can be used to implement this? What Swing class can I use to implement something like this? EDIT: Hmm..for some reason I cannot add the image here. Well here's the link: Basically I need a list table where each column can be of different type of gui (i.e. plain text check box or drop-down menu). EDIT I have re-publish the image for you ;) if someone tries clicking ""edit"" on my post you will see I try to add an image to this post. How come I was not able to do it? It looks like the picasaweb redirect a number of times the request or something like that. I have re-publised your image in other hosting service. I hope you don't mind oh definitely not. thanks for doign that now. now i know it was because of picasa. Definitely JTable. JTable allow you to define what render will have each column. That way you can add checkboxes combos textfields etc. to it. Here's an screenshot: You can read more about it here: How to use Tables  You would use a JTable to implement it. Your data will be stored in a TableModel. The DefaultTableCellRenderer and DefaultTableCellEditor should do what you need but you can also customize the rendering/behavior if necessary. More info on renderers/editors: http://java.sun.com/docs/books/tutorial/uiswing/components/table.html#editrender Thanks. The link in your post is perfect for what I'm trying to do.  JTable will do this for you you're going to need to understand the MVC pattern pretty well to acheive this as you will need a custom model and renderer but once you get the hang of it its not too hard. David gearys book ""Graphic Java Vol.2"" has an excellent section on JTable whilst this book is now fairly old I still personally think thats the best explanation of JTable I've seen."
270,A,Winforms for a java swing guy [Applying MVC] I am developing a GUI application in C# using the design mode in VS2008. Now that I am finished with the looks of the application I am ready to add some functionality to it. What really confuses me though is that VS2008 designer only uses the empty constructor. When developing applications in Java I normally pass around a model and controller object to every view object in the constructor. I am unsure if I have used the designer too much and needs to hardcode more or if there is some other way to do it. How do you pass around data to view objects? Hope you understand me Too bad you didn't create your app in wpf in which case you could have used MVVM relatively easily. I am doing this app just to learn winforms :) Try to use : http://smartclient.codeplex.com/ (formerly known as Composite Application Block). It's a MVP framework for Windows Form which allows you to do dependency injection of your presenter in your view. Manitra. Not really looking for thirdparty components. I am just a beginner in C# and winforms and dont quite understand how to use it.  you can use your constructor in subclasses of Form class without problems. However for Controls to be compatible with designer this doesn't work well. You can pass model object to public property or method of you view object (form or control). You can use Passive View or Supervising Controller patterns in which View knows little about model and is modified by Presenter. Thanks! I dont really like the third option. I want to keep it as MVC. But out of the first two what is used more often by C# developers? To me it seems like a big limitation of winforms or have I just been using MVC wrongly in Java? Unfortunately code generator of WinForms designer is not smart enough to work with arguments in user controls. You can circumvent it by changing generated file (usually XXX.designer.cs) and replacing default constructor with constructor you need but your changes will be most certainly lost. Or you can write form creation code by hand but this can be very tedious and error-prone. So the second way I've proposed earlier will be the easiest IMHO.
271,A,"Implementing on-the-fly text styling in a JEditorPane I have an idea to write a note-taking app in Java that does some simple text replacement as you type; probably a small subset of the Markdown syntax. So for instance if you entered a line that was #sometext it would get rendered: sometext Wikidpad is part of what I'm trying to do (I'm not just re-implementing that just parts of the syntax/display functionality). So essentially I'm looking for a way to write some kind of component that when the user hits ""return"" it will look at the line entered and do any magic it needs to do to get the html tags right. I've been beating my head against Documents and DocumentFilters and DocumentListeners and HTMLReaders and such without much luck can anyone put me on the right path? At first I recommend to use JTextPane since this is more suitable for applying styles to text. Then it is very easy to add a keyPressed event: jTextPane1.addKeyListener(new java.awt.event.KeyAdapter() { public void keyPressed(java.awt.event.KeyEvent evt) { jTextPane1KeyPressed(evt); } }); private void jTextPane1KeyPressed(java.awt.event.KeyEvent evt) { // TODO add your handling code here: String txt = jTextPane1.getText(); } The above code was easily generated with Netbeans. You can then apply styles doing something like this: StyledDocument doc = jTextPane1.getStyledDocument(); Style style = jTextPane1.addStyle(""Bold"" null); StyleConstants.setBold(style true); int pos endpos; // Find pos of word to be displayed in bold ... // Set style doc.setCharacterAttributes(pos endpos style true); You could use evt.getKeyChar() and read the whole text only when is needed to. Set a flag when '#' is first pressed and then read the text and apply the format when space/new line is pressed. You should also cater for the case a user pastes text into the control. You can monitor meta characters for such events. I thought about this too; my concern is that it wouldn't scale with large documents since it's reading the entire text & reformmating every time a key is pressed.  Sounds like what you need to do is implement some sort of key listener in your editor component that examines key strokes before they enter the text field. It can then search back in the buffer find your control characters and do what ever it needs to do. I don't have a whole lot of experience with JEditorPanes and the like. But I think you can add key listeners to them just like any other swing component. Basically I don't think there is a component like this that exists so you'll essentially need to implement your own. I might be wrong though. Yes I've played with keylisteners but they don't seem to consume the key event so I can't ""do what I need to do"" before the pane has already stuck the character in its content.  Does it have to happen when they hit enter or just when they submit the data? If it's on submit wait for them to press a button that would save the data then do JEditorPane.getText() ""fix"" the text and do JEditorPane.setText(text); Okay if it should be on the fly try adding an Input Method Listener. InputMethodEvent should be able to call ""getText()"" and you should be able to parse for this after every keypress. If you want to do it after every time the user hits enter get the text on every keypress and see if the current location in the text is one character after an \n or similar. I'd like to do it on the fly.  What you are interested in is a java text editor kit. This tutorial was great and helped me implement a wiki-editor that sounds similar to your problem. The swing Editor kit (believe it or not) is specifically designed to handle your problem. I've written a dynamic wiki like linking system using this technique albeit not without a lot of struggle. Here's what I had to do: Make a Document The first task is to create a document model that tags the pattern when it identifies the text. If you look at the JavaDocument in the linked example there is an insertUpdate call. In the document you can find the pattern you are looking for and replace it with a custom style appropriate. Essentially you just create a style and apply it to the document where the pattern is matched. An alternative to the update method is to make this use a private worker thread to periodically scan for new wiki content. Build a rendering Context After your model is complete you can implement a Context that builds a view appropriate to rendering your new text. In the linked example they extend a StyleContext. This is what is used to render the text to the view. Here you can set rendering rules that will find your specific tag and do something like underline it and remove the square brackets. Make an editor kit This will stitch everything together and identify a content type for your document. The good thing about keeping the document and view as separate contexts is you can attach the document to two views one in plain text the other in your new custom context. Since the default style doesn't recognize your tag it should display it in the raw wiki code form. The new view will transform the view into the appropriate linking. I hope this helps. A word of caution this stuff is unfortunately complex even for swing. Good luck! Like almost all Oracle that link is broken. Any clue where to find this tutorial now? WayBack Engine to the rescue! http://web.archive.org/web/20120419114724/http://java.sun.com/products/jfc/tsc/articles/text/editor_kit Yes that's where I've been headed - but I hadn't run across that tutorial yet. It's been frustratingly complex but I think that page will help a lot. I understand your frustration. The text editor could use some code usability refactoring  Use RSyntaxTextArea it does what you need and you can add your own lexer/rules. I will definitely check it out."
272,A,Java applications with Windows 7 - are there compatibility concerns? with some fuzz around Windows 7 does somebody have experiences with Java compatibility with Windows 7? Should this be a concern or do the programs probably work ok? I'd be especially interested if somebody has experiences with Swing applications? The versions available seem to be beta versions so they won't provide perfect basis for evaluation but some. br Touko The problem I have with my Swing application on Windows 7 (and presumably Vista - haven't tried it) is that the Java Runtime indicates to Windows that it is UAC-aware while my application that runs in the JVM actually isn't. As a result if someone installs it into the traditional location (e.g. C:\Program Files\MyApp) the application fails because it cannot write configuration data or error log files to its installation directory. Because I use some third-party libraries that write their own files to the current (i.e. install) directory and I've got many more important things to do than dig into those libraries just to make their error reporting and configuration storage UAC-aware I took the path of least resistance and changed my default install directory to C:\MyApp. I realize that this is a regression back to the old DOS days where people ended up with myriad application directories in C:\ but it's not my fault that Windows' method of implementing UAC Virtualization for legacy applications doesn't work for Java apps.  There are several problem of swing application in windows7 there are stated below: JCheckBoxMenuItem will not show image JCheckBoxMenuItem(IconTextboolean);//Icon will not displayed you can refer the http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7122141. Focus issues. Sometimes escape won't work UAC issueswe need to very keen before playing with the %ProgramFiles%.Windows7 security Folder structure is good it depends how we make our code  Updating info related to the question: According to Supported System Configurations for Java SE 6 and Java For Business 6  Windows 7 support was introduced in 1.6.0_14 From Java SE 6 Update 14 Release Notes changes: 6821003 hotspot runtime_system Update hotspot windows os_win32 for windows 7 From Java SE 6 Update 18 Release Notes: For 6u18 support has been added for the following system configurations: * Windows 7 support is now available  I have been using various Java apps on my Win 7 x64 box just fine and never had any problems. Even some of my oldt poorly coded swing apps have worked without issues. For the most part Win 7 is Vista in new clothing. Shouldn't have much issues because of that.  Your biggest concern is having the right Java runtime installed. WHen that is out of the way you can expect properly written Swing programs to work identically. (With proper I refer to not having hardcoded button sizes or similar)
273,A,"reassigning JList & JComboBox data I've been looking through the Java API but have had no luck in working this out. After you initiate a JList is there any way to replace or reload the 'data' string? I've also been looking to do the same thing with a JComboBox. String[] data = {""one"" ""two"" ""three"" ""four""}; JList dataList = new JList(data); The list data is stored in a ListModel (Accessable via the get/set Model methods). You simply need to create a new ListModel (Well an implementation of a ListModel) and pass it to the JList using its setModel method. How come it is set with a string initially then?  You are using one of the utility constructors for JList which takes an array. The List is backed by a ListModel. The utility constructor uses the following to create an implementation of an AbstractListModel: new AbstractListModel() { public int getSize() { return listData.length; } public Object getElementAt(int i) { return listData[i]; } } where listData would be your data set. You can do the same and pass it into dataList.setModel(). You might be best served if this is for more than just a prototype by creating your own full-blown implementation of ListModel. For reference here is the JList tutorial from Sun. JComboBox is a bit simpler as the DefaultComboBoxModel class has a constructor that takes an array of Object as a parameter. To replace the data there you can simply call:  myComboBox.setModel(new DefaultComboBoxModel(data)); thanks akf. That makes things a little clearer. I've been looking for how to replace the array ... Thanks akf got it all working!"
274,A,"Hide a button from Layout in Java Swing I am trying something very basic: I have a list of 5 buttons. They are in a FlowLayout and the general idea should be that once I click one it should disappear and the others should reorder themselves accordingly. Now if I call setVisible(false) the button becomes invisible but it still occupies it's space in the Layoutmanager. Is there any way to keep the Button in the JPanel while hiding it so it doesn't get picked up by Layout? Update:: Thanks for all the answers the problem with removing the buttons is that the order is important. The problem I was trying to solve was a find as you type szenario where a very long list of buttons gets filtered down to only the ones matching the characters entered so users can easily click them. Since users can delete characters from the search field ordering is important and buttons have to pop back in once they match again. Does it matter if the buttons get reordered? Because that would rule out all answers with removal and re-adding for the FlowLayout. You could override each button's getPreferredSize() methods (and possibly getMinimumSize() as well to return 00 when the component is invisible; and you need to call I think invalidate() (or revalidate or validate I can never keep them straight) on the container. The problem is that the space that FlowLayout puts between components will be present twice so there will still be a noticeable gap. Right you are! I hadn't thought of that thanks.  Just remove it:  panel.remove( button ); What's wrong with this option? Layout managers are thought precisely to avoid having the ""user"" to make tricks in order to have each component it the right place ( although it seems to provoke the opposite effect ) Removing the button from the panel will have the effect of laying out again all the remaining components. That's why it's name is ""Layout manager"" it manages to layout the components for you.  Works fine for me. import java.awt.*; import java.awt.event.*; import javax.swing.*; public class FlowLayoutInvisible extends JFrame implements ActionListener { JPanel north; int i; public FlowLayoutInvisible() { north = new JPanel(); for (int i = 0; i < 5; i++) { JButton button = new JButton(""North - "" + i); button.addActionListener(this); north.add(button); } getContentPane().add(north BorderLayout.NORTH); } public void actionPerformed(ActionEvent e) { Component c = (Component)e.getSource(); c.setVisible(false); ((JPanel)c.getParent()).revalidate(); } public static void main(String[] args) { FlowLayoutInvisible frame = new FlowLayoutInvisible(); frame.setDefaultCloseOperation( EXIT_ON_CLOSE ); frame.pack(); frame.setLocationRelativeTo( null ); frame.setVisible(true); } } If you need more help post your SSCCE. Update: I don't know if the revalidate() is required. I seemed to have a problem once but now I can't duplicate the problem.  I see two possibilities: Write your own layout manager that listens for changes to its children's visible property - shouldn't be too hard you can probably subclass FlowLayout to do it. actually remove the clicked-button from the panel and if necessary re-add it later."
275,A,"Association of an image with a Java tree node object I have a Tree node. I want an image to be displayed beside the node name when the tree is viewed. How do I go about? create an ImageIcon from your image ImageIcon icon = ....; (there are a number of ways to do this) create an instance of DefaultTreeCellRenderer DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer(); set the leaf icon field of the renderer renderer.setLeafIcon(icon); set the tree's renderer tree.setCellRenderer(renderer); if you can't figure it out try the demo to add to the above answer: If you are looking to set an image on the right side of the text (basically not an icon) you still need to create your own instance of DefaultTreeCellRenderer to return a component which includes the image  You can use a custom leaf renderer . Override the getTreeCEllRendererComponent () method. When you render a component . Use a panel and put the text first and the icon folliwng the text . And then return the component. public Component getTreeCellRendererComponent(JTree tree Object value boolean selected boolean expanded boolean leaf int row boolean hasFocus) { JLabel l = (JLabel)renderer.getTreeCellRendererComponent( tree """" true expanded leaf row true); Component com = renderer.getTreeCellRendererComponent( tree """" true expanded leaf row true); l.setIcon(YOUR_IMAGE); l.setText(value.toString()); panel.removeAll(); panel.add(this BorderLayout.EAST); panel.add(j); return panel; }"
276,A,"Swing: Getting JPopupMenu's position I have trouble getting JPopupMenu's position. What I need is: to be able to right click on the work area click some menu item and it would create an element ""in place"" so right under the position of the previously displayed menu. I tried getting the position of the menu itself and of its items but it gives me constant values around 0. (see comments in code) The problem is: because of separation of concerns the menu is displayed in one class while its actions are handled in another. public final class MainFrameMenu extends JPopupMenu implements ActionListener { private final MainFrame mainFrame; private final JMenuItem item1 = new JMenuItem(""add line""); private final JMenuItem item2 = new JMenuItem(""add element""); public MainFrameMenu(MainFrame mainFrame) { super(""Main menu""); this.mainFrame = mainFrame; item1.addActionListener(this); item2.addActionListener(this); add(item1); add(item2); } @Override public void actionPerformed(ActionEvent e) { if (e.getSource() == item1) { System.out.println(getLocation()); // gives ALWAYS [0 0] System.out.println(item1.getLocation()); // gives ALWAYS [1 3] // I want to create an element IN PLACE mainFrame.addConnectionLine(getX() getY()); } } } public final class PopupMouseListener extends MouseAdapter { private final JPopupMenu menu; public PopupMouseListener(JPopupMenu menu) { this.menu = menu; } @Override public void mousePressed(MouseEvent e) { popup(e); } @Override public void mouseReleased(MouseEvent e) { popup(e); } private void popup(MouseEvent e) { if (e.isPopupTrigger()) { menu.show(e.getComponent() e.getX() e.getY()); } } } I know I could store the last known position in PopupMouseListener and read it from MainFrameMenu but it would ruin the classes hierarchy (most other occurrences of PopupMouseListener don't need it). getLocation() returns the location relative to the parent components coordinate space. This is why item1.getLocation() always returns the same value as it is always in the same location relative to the popup menu. From reading the Javadoc it sounds like calling mainFrame.getMousePosition() could return the point you are looking for. Of course! The mouse position!!! It works thank you! - (BTW getParent().getLocation() also return constants.)  Old thread but I had this issue recently. The problem here is that during the ActionPerformed call the PopupMenu's visibility has already been set to false meaning that its location is no longer defined (ie. (00)). I am developing for a mouseless interface so grabbing the mouse's position was not possible for me. I ended up storing the menu's position every time it was made visible and using that to create my component."
277,A,How do I center a JDialog on screen? How do I go about positioning a JDialog at the center of the screen? AFAIK you can pass a GraphicEnvironment to each JDialog/JFrame/JWindow constructor. This object describes the monitor to use.  In Java 1.4+ you can do: final JDialog d = new JDialog(); d.setSize(200200); d.setLocationRelativeTo(null); d.setVisible(true); Or perhaps (pre 1.4): final JDialog d = new JDialog(); d.setSize(200 200); final Toolkit toolkit = Toolkit.getDefaultToolkit(); final Dimension screenSize = toolkit.getScreenSize(); final int x = (screenSize.width - d.getWidth()) / 2; final int y = (screenSize.height - d.getHeight()) / 2; d.setLocation(x y); d.setVisible(true); Wanted to add that you do need to use setSize() or else the setLocationRelativeTo() will not work. I had to use both setSize() AND setPreferredSize() in order to get everything to look right. very useful. :)) In answer to the question by @marked: If the component is not currently showing or c is null the window is placed at the center of the screen. (from the java.awt.Window javadocs) Note that both of these methods will center the dialog *on the primary monitor* (at least on Windows). Better to pass an argument to `setLocationRelativeTo` so the dialog appears on the appropriate monitor for multi-monitor users. what exactly is happening when you setlocation relative to null?  Use this line after the pack() method: setLocation((Toolkit.getDefaultToolkit().getScreenSize().width)/2 - getWidth()/2 (Toolkit.getDefaultToolkit().getScreenSize().height)/2 - getHeight()/2);  here's my solution to retrieve screen dimension with multiple monitors. import java.awt.*; import javax.swing.JFrame; /** * Méthodes statiques pour récupérer les informations d'un écran. * * @author Jean-Claude Stritt * @version 1.0 / 24.2.2009 */ public class ScreenInfo { /** * Permet de récupérer le numéro de l'écran par rapport à la fenêtre affichée. * @return le numéro 1 2 ... (ID) de l'écran */ public static int getScreenID( JFrame jf ) { int scrID = 1; GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] gd = ge.getScreenDevices(); for (int i = 0; i < gd.length; i++) { GraphicsConfiguration gc = gd[i].getDefaultConfiguration(); Rectangle r = gc.getBounds(); if (r.contains(jf.getLocation())) { scrID = i+1; } } return scrID; } /** * Permet de récupérer la dimension (largeur hauteur) en px d'un écran spécifié. * @param scrID --> le n° d'écran * @return la dimension (largeur hauteur) en pixels de l'écran spécifié */ public static Dimension getScreenDimension( int scrID ) { Dimension d = new Dimension(0 0); if (scrID > 0) { GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); DisplayMode mode = ge.getScreenDevices()[scrID - 1].getDisplayMode(); d.setSize(mode.getWidth() mode.getHeight()); } return d; } /** * Permet de récupérer la largeur en pixels d'un écran spécifié. * @param scrID --> le n° d'écran * @return la largeur en px de l'écran spécifié */ public static int getScreenWidth( int scrID ) { Dimension d = getScreenDimension(scrID); return d.width; } /** * Permet de récupérer la hauteur en pixels d'un écran spécifié. * @param scrID --> le n° d'écran * @return la hauteur en px de l'écran spécifié */ public static int getScreenHeight( int scrID ) { Dimension d = getScreenDimension(scrID); return d.height; } }  Two helpers for centering within the screen or within the parent. // Center on screen ( absolute true/false (exact center or 25% upper left) ) public void centerOnScreen(final Component c final boolean absolute) { final int width = c.getWidth(); final int height = c.getHeight(); final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); int x = (screenSize.width / 2) - (width / 2); int y = (screenSize.height / 2) - (height / 2); if (!absolute) { x /= 2; y /= 2; } c.setLocation(x y); } // Center on parent ( absolute true/false (exact center or 25% upper left) ) public void centerOnParent(final Window child final boolean absolute) { child.pack(); boolean useChildsOwner = child.getOwner() != null ? ((child.getOwner() instanceof JFrame) || (child.getOwner() instanceof JDialog)) : false; final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); final Dimension parentSize = useChildsOwner ? child.getOwner().getSize() : screenSize ; final Point parentLocationOnScreen = useChildsOwner ? child.getOwner().getLocationOnScreen() : new Point(00) ; final Dimension childSize = child.getSize(); childSize.width = Math.min(childSize.width screenSize.width); childSize.height = Math.min(childSize.height screenSize.height); child.setSize(childSize); int x; int y; if ((child.getOwner() != null) && child.getOwner().isShowing()) { x = (parentSize.width - childSize.width) / 2; y = (parentSize.height - childSize.height) / 2; x += parentLocationOnScreen.x; y += parentLocationOnScreen.y; } else { x = (screenSize.width - childSize.width) / 2; y = (screenSize.height - childSize.height) / 2; } if (!absolute) { x /= 2; y /= 2; } child.setLocation(x y); }
278,A,Corrupted Java Swing Window One of the users of a Java swing GUI program that I wrote is having an issue where the main swing window doesn't render to the screen properly and the GUI freezes up. Here's a comparison of the screenshot on his screen (top) and what is supposed to show up (bottom): He is running Windows XP SP3 with Java 1.6.0_13 and his graphics card is an ATI X1600 with a dual monitor set-up. The program (if you would like to test for yourself) is at: www.shapecollage.com/download.html I have several thousand users and no one else has reported this error and I have tested it thoroughly on Windows XP. Anything computational is done in a separate thread from that of the regular GUI thread and the program works on many other computers so I don't think it's a problem with the program itself but rather something wrong with his particular set-up. Has anyone seen this type of error before on a system or have any suggestions as to what might be wrong on this user's system that would cause such a problem? Thanks Vincent Interesting. Such an issue was reported to me a year or two back; I could never reproduce it so I closed it as probably a driver bug. I'll be interested to see if any good answers show up here. Yikes! For it to be that bad it must be a jvm vs graphics driver thing - I doubt there's a lot you can do. Once the program is loaded there are a few minor but obvious artefacts in the rendering and then when attempts are made to actually use the interface it apparently goes crazy and it freezes. I cannot replicate this on my desktop or several other computers. It pretty much has to be a driver problem. I have seen corrupted graphics like that but never in java. The places i've seen it were in windows draw/etc code and the tiling and snow look generally indicated something like telling the image draw code that you were going to draw an image of a certain size and bit depth but then filling the image buffer with a different bit depth. like filling the byte array with data from an integer RGBA source and putting it into an integer RGB destination? but from the screen shot the user looks like they're also running some other kind of app too as there's an extra button by the minimize/maximize/close buttons so some other third party application is modifying the window. Maybe that's messing with it? Otherwise i'd say driver issue. There's always some solutions like disabling d3d drawing or some other draw optimizations that the VM does automatically now maybe that solves it?  We had a very similar problem which was fixed by updating the graphics driver. The problem might come from the dual monitor setup leading to VRAM corruption so your customer might try if it will work better with only a single monitor. While you might expect Java would not be very dependent on the hardware our graphics-intensitive application always manages to BSOD when run through a particular projector type... The user updated his graphics card driver and it fixed the problem.  Maybe there's a problematic interaction between Java and the graphics driver and/or graphics hardware. There are several flags that can influence how Java draws to the screen. You might want to try to start the applications with any of those flags: -Dsun.java2d.opengl=true -Dsun.java2d.d3d=false -Dsun.java2d.noddraw=true Those flags toggle the OpenGL pipeline turn of using Direct3D and disable use of DirectDraw respectively. If any of those solves your problem then you might consider filing a Bug with sun because then it's probably not the applications that's at fault here. I had a related issue in which -Dsun.java2d.d3d=false solved the issue. See http://stackoverflow.com/questions/848481/problem-with-painting-in-java-swing-app-in-java-1-6  I haven't seen that particular type of corrupted graphics but I have seen Java graphics problems on Windows disappear when the hardware acceleration in the extended display control panel is reduced.  Swing isn't thread safe so if you're doing the rendering anywhere other than the GUI thread you can expect this sort of thing. The rendering is only done in the GUI thread. The program works fine on thousands of other computers.
279,A,"Swing tweaks for Mac OS X I remember having once seen a list of properties that could be set on Swing components to make them look more native on Mac OS X. This included ways to mark ""dirty"" documents with the ""dot"" in the window close button open dialogs as sheets (not sure about that but sure would be nice) etc. I know Apple has let Java down as a ""primary"" programming language but as they recently updated Java and even offer Java 6 I wonder if there is a comprehensive and current list - ideally with examples - on what you can do to make Swing apps look better without much effort on the Mac. After receiving some answers I put this into community wiki mode and started the following list to be expanded if need be: Technical Notes: Java - User Experience: Overview page on Apple's developer connection reference library (index page). New Control Styles available within J2SE 5.0 on Mac OS X 10.5: Examples for Button styles etc. specific to Mac OS X 10.5 Leopard. Java Runtime System Properties: Information on System properties that help you enable the Apple-style menubar at the top of the screen give rendering hints for text anti-aliasing etc. Mac OS X Integration for Java: Information on Menubar and Application menu context menus keyboard shortcuts and AppleScript PDF ""Java 1.3.1 Development for Mac OS X (Legacy)"": 80 pages of information on various topics such as packaging applications. This is somewhat outdated. If you use the [Macify Maven plugin](http://simplericity.com/2007/10/02/1191336060000.html) to build your app it will take care of several of these tweaks. Is there an update for Java 7? The Java Development Guide for Mac OS X has a Mac OS X Integration for Java section that is probably what you're looking for.  The Quaqua site may be interesting as well. From the site: ""The Quaqua Look and Feel (Quaqua) is a user interface library for Java applications which wish to closely adhere to the Apple Human Interface Guidelines for Mac OS X. ... It runs on top of Apple's Aqua Look and Feel and provides fixes and enhancements for it."" It has a fairly good user guide with examples as well.  My personal link collection: From developer.apple.com: Java Runtime Properties for Mac OS X (don't get scared by the ""not recommended"" popup some of the information is still useful) Apple Java Extensions OS X Runtime Configuration Guidelines (not directly related to Java but an interesting read anyway) From Sun: Bringing your Java Application to Mac OS X Part Three same page at another location with working images: http://192.9.162.55/developer/technicalArticles/JavaLP/JavaToMac/ When clicking on some old links I'd been redirected to Java Design Guidelines and Java Guides seems as though I have to update my links...  You can check this PDF at Apple but it's marked as legacy. On some applications I'm still using com.apple.macos.useScreenMenuBar to have the Java application use the Mac OS X menu bar and it still works in Leopard."
280,A,"Server-client Java distributed application I have to design a distributed application composed by one server (developed in Java) and one or more remote GUI clients (Swing application with windows). As stated before the clients are Swing GUI application that can connect to the server in order to receive and send data. The communication is bidirectional (Server <=> Clients). Data sent over the network is mainly composed by my domain logic objects. Two brief examples: a client calls the server in order to receive data to populate a table inside a window; the server calls client in order to send data to refresh a specific widget (like a button). The amount of data transmitted between server and clients and the frequency of the network calls are not particularly high. Which technology do you suggest me for the server-clients communication? I've in mind one technology suitable for me but I would like to know your opinions. Thanks a lot. The first technology that came to my mind was RMI - suitable if you're communicating between java client and java server. But you may get difficulties if you want do switch the client technology to - say - a webinterface. Thanks for your answer. In fact the technology I thinked about is RMI. I don't think that client will be changed in a web interface in the future (Swing technology will be enough). So other than this point do you think that there can be other disadvantages adopting RMI? to be honest I haven't used RMI for a long time. ""Long"" in a sense of 2 years. What I'm using now a lot is SOAP with Apache CXF - which might not be the best choice if you're sending huge Object graphs. The stuff I did with RMI however worked pretty well (I used to sync data between a PDA and a workstation back then). In fact data sent over network for server-clients communication is composed by domain objects. Sometimes these objects can be ""simple"" (for example only one object with two integers and a string) or ""complex"" (a list of many objects sent by the server to the clients). Clearly the implementation of these objects is visible to the servers and to the clients.  You can try using ICE http://www.zeroc.com for establishing server-client connection.  I believe sockets should do the trick. They are flexible and not especially hard to code/maintain. Most entry level programmer should also be able to maintain them. They are also fast and adapt to any kind of environment. Unless your server is going to be off-site or you expect to have firewall issues. In that case web services are the way to go since your basic communication happens through port 80. If you want to send domain objects I agree that RMI is a better option. I must admit that my first thought is never RMI but with Java clients and servers it may be a better option. By off-site I meant server is somewhere on the internet while your clients are in a network. Looks like that is not expected to happen. Thanks for your comment. Probably (as suggested by msparer and you) I will adopt RMI for server-client communication. Thanks for your answer. I think socket is an easy way for network communication too. But what about you effort for writing and reading domain objects on sockets? It can be negligible? What do you mean for ""off-site""? I think that server will be placed in a dedicated LAN and accessible from any remote host where my Swing application is installed (software authentication/login will be required).  I would go with RMI but implement the whole architecture using Spring framework. This way it is independent of technology used and can be switched to other ways of communication (such as HTTP or other ) with almost no coding. UPDATE: And Spring will allow you to have none of RMI specific code.  I would second msparer's suggestion of RMI except I would just use EJB3 (which uses RMI as the communication protocol). EJB3 are very easy and even if you don't use the other feaures EJB gives you (e.g. security) you can still leverage Container Managed Transactions (CMT). It really does make development easy. As for the server->client communication you would probably want to use JMS. Again using EJB3 this is pretty e3asy to do with annotations. The clients will subscribe to the message service and receive update notifications from the server. And yes I am currently working on an application that does this very thing. Unfortunately we are using EJB2.1. Still it is my opinion that this is where EJBs really shine. Using EJBs in a web app is frequently overkill but in a distributed client/server app they work very well."
281,A,"Using the NetBeans GUI editor how can I create a JTextField or JFormattedText field that must be validated against a regular expression? I have a regular expression (\d{4}\w{3}(0[1-9]|[12][0-9]|3[01])([01][0-9]|2[0-3])([0-5][0-9]){2}) that I need to validate the input of a text field against when the user clicks the OK button or moves the cursor to another field. That I know how to do writing the code. However I'm interested in if it's possible to have the NetBeans GUI editor do some of the work for me especially since I'm moving away from Eclipse and towards NetBeans as my IDE of choice and I would like to take full advantage of the tools it provides. There are some nice validator components for JSF but I'm not aware of any for swing. Devon there are formatters and validators for Swing components using the InputVerifier and DefaultFormatter classes. Open the Properties of your JTextField in the Properties tab look for inputVerifier. Open it Now you'll be asked to introduce the InputVerifier code. ftf2.setInputVerifier(new InputVerifier() { public boolean verifyText(String textToVerify) { Pattern p = Pattern.compile(""your regexp""); Matcher m = p.matcher(textToVerify); if (m.matches()) { setComponentValue(textToVerify); return true; } else { return false; } } }); I haven't compiled this code so could contain errors. But I think you get the idea ;)  This isn't the easiest solution but it is a very powerful one: try spring rich client where validation could be reached via: public class Validation extends DefaultRulesSource { private Constraint NAME_VALIDATION = all(new Constraint[]{minLength(3) required()}); public void load() { addRules(new Rules(Person.class) { @Override protected void initRules() { add(""name"" NAME_VALIDATION); } }); ... and the gui form is easily created via:  TableFormBuilder formBuilder = getFormBuilder(); formBuilder.add(""firstName""); formBuilder.add(""name""); formBuilder.row(); E.g. look here for validation or here for more infos. I am using this sucessfully in my open source project ... This way you could create a more general swing component which could be added to the netbeans component palette"
282,A,Java JPanel redraw issues I have a Java swing application with a panel that contains three JComboBoxes that do not draw properly. The combox boxes just show up as the down arrow on the right side but without the label of the currently selected value. The boxes will redraw correctly if the window is resized either bigger or smaller by even one pixel. All of my googling has pointed to calling revalidate() on the JPanel to fix this but that hasn't worked for me. Calling updateUI() on the JPanel has changed it from always displaying incorrectly to displaying incorrectly half of the time. Has anyone else seen this and found a different way to force a redraw of the combo boxes? Can you give us some more information on how you add the combo boxes to the JPanel? This is a pretty common thing to do in Swing so I doubt that it's a JVM issue but I guess anything is possible. Specifically I would double check to make sure you're not accessing the GUI from any background threads. In this case maybe you're reading the choices from a DB or something and updating the JComboBox from a background thread which is a big no-no in Swing. See SwingUtils.invokeLater(). A background thread was exactly the problem. Thanks.
283,A,"What happens when Swing's threading policy is violated? In the past few years I've mostly done UI development in Eclipse which is very conservative in terms of thread access: any attempt to change a property on a UI widget (e.g. color text) from outside the UI thread throws an exception. I am now looking at an existing program in Swing that has a window with a large number of custom widget. There is a separate threads that runs a mutation function for each of these widgets and the mutation function reads the value of some things (e.g. label colors and values) and writes some (e.g. changes background colors). Note that there is no custom painting involved or anything like that just a bunch of changes to the sub widgets it contains which are mostly JLabels. At present this runs from the separate thread not from the Swing event thread. This thread goes over all the 400 widgets and calls the mutator on each. The updates seem to work correctly but the GUI is unresponsive to user input. If I take the whole thing which runs for about 0.4 msec from outside the Swing thread and wrap every call to a mutator in an invokeLater or invokeAndWait the UI is a lot more responsive. What I'm trying to understand is: 1) Is it sometimes legitimate to make all these calls from outside the Swing thread? 2) What is the impact on the Swing thread and why is the UI less responsive when I call it from outside? 1) Is it sometimes legitimate to make all these calls from outside the Swing thread? There are a few exceptions (setting the text value of a text field for example does automatic EDT proxying for you) - but there are no situations where it is better to do so. If you are performing lots of updates you can do them all in a single EDT call (a single call to invokeLater()) instead of individual calls - but even that sort of batching very rarely helps things. Long and short: Perform operations on Swing components from the EDT. That includes reads and writes. 2) What is the impact on the Swing thread and why is the UI less responsive when I call it from outside? Well the EDT is responsible for updating the GUI. If you call from outside it isn't 'less responsive' - it's that the actual low level system calls that update the user interface don't occur (at all). What is probably happening in your app is that the original developers are getting lucky and changing state in the swing component without creating a really nasty race condition. Then some other event is causing a repaint to occur on the EDT which results in the component being updated. This may appear to be a 'lack of responsiveness' - but what's really happening is a 'lack of screen refresh'. The EDT is just a regular thread but it is a bit special in that it runs in a tight loop that processes GUI related signals (draw commands for example). The semantecs of posting these types of commands on the EDT is really really different from what we typically think of as Java threading (it involves submitting operations to a message pump). Long and short - all those Javadocs that say 'only interact with Swing objects on the EDT' are written for a reason. Don't mess with it. If you want to do background processing fine - but you are responsible for proxying the interaction with the J* components back onto the EDT (most generally using invokeLater() ).  From ""Nothing"" to intermittent problems to ""Everything Broke pull everyone off to work on the GUI!"" The main (most obvious) visual effect is that if you hold up the GUI thread (like someone presses a button and you do a sleep(5000) or something) your GUI won't repaint. It can't because you are holding onto the only thread it's allowed to pass you! This makes people think Java is really slow. It's not bad but it's easy enough to program that a lot of people who don't bother researching practices like this have produced shipping products. The next biggest problem is that when you are drawing the screen in another thread (like the one passed to main) it can have strange behavior. Swing is already too picky about how you render your frames--take out threading as a variable! Finally rarely (or often if you are calling a swing component in a tight loop on the wrong thread) you can get thread collisions. If that happens an exception may be thrown (or not) and something will probably render wrong but it may not be obvious.  The basic problem is that non-thread-safe objects are executed in a multithreaded fashion. Even something as simple as reading a HashMap can be caught in an infinite loop. Because AWT uses locks (badly) you can also end up with deadlocks. However you are likely to get away with it although you might find that an updated version of Java suddenly causes you issues on some customer machines. (BTW: It's AWT's Event Dispatch Thread not Swing's.)  For (1) as a rule of thumb anything that updates pixels on screen must be called from the Event Dispatching Thread (EDT). Where some JVMs may handle updates from outside the EDT acceptably you should never rely on this working some machines and different look and feels will not work acceptably. The behaviour is undefined - and this could explain the lack of responsiveness you have seen.  There really are no exceptions. Kevin is partially correct - the JTextComponent.setText() is advertised as thread safe. However looking at the 1.6 code it provides synchronization on the document object and does not use the EDT. This is fine unless another swing component (or something that controls swing components) is listening to the document object. Save yourself the trouble of worrying about it and just always use the EDT - like Kevin says there really are no situations (that I'm aware of) to do otherwise. Hard to say without digging into the code; the behavior is undefined. If your background tasks were long running (> a few seconds) you'd see the opposite effect - using the EDT will make the UI unresponsive while your tasks are running. Fortunately it sounds like doing it the right way is working best for you anyway. :) Sun used to say it was ok to use other threads with components that haven't been realized but later recanted: Related stackoverflow question Check out Sun's UI tutorial on swing and concurrency (I'd post the link but this is my first answer on stackoverflow0."
284,A,"Handcode GUI or use gui-designer tool I would like to hear some opinions on hand coding your GUIs as one typically do when using Java or Qt with C++ vs using a gui-designer tool? Examples of GUI designer tools would be MFC GUI-designer Qt designer Interface Builder (Apple). I used to be a fan of hand coding but from recent experience I have switched. The problem I have seen with hand coding is that it is fairly quick and flexible to write the GUIs but once you need to make a change to a GUI written a long time ago it can be very difficult. Finding the right element in big panel can be difficult. The second problem is that it makes it far too easy to add a lot of logic in the GUI creation and layout code. I have often had to take over maintenance of GUI code which is really hard to reuse because its behavior is mixed with its appearance and mixing layout and behavior often makes the class very large and difficult to understand. Using a GUI designer tool force a much clearer separation between appearance and logic in my view. I would strongly advice you to use Interface Builder on OS X. Doing it by hand is fine if you want to learn but you're going to save yourself a lot of headaches by using it on actual projects. It really is quite powerful. As for Java and C++ it depends on what you're doing and on what platforms. For simple applications you can get away with never seeing the UI code. However for complicated applications and rich clients you typically have to do some of the code by hand.  Funny enough it has gone the other way round for me. Talking from Winforms perspective the code generated by the designer is quite noisy with maybe a quarter or half of all the property settings really necessary. Making pretty big controls is also more of a temptation when working with a designer. Changing some hierarchy of controls in the Winforms designer is quite a nightmare in my eyes. In my last project I have created additional APIs to set up splitters in forms dockmanagers menus toolbars etc. in a declarative fashion. These are such that they will further enforce separation of concerns. I also try to rely much more on auto-layout features which admittedly are a lot nicer in WPF but can also go some way in Windows Forms. I completely agree with your comments about noise generated by using builders. This is also true of Java - one usually ends up with tens of JLabels as fields of your class whereas they are never really needed. I don't think the noise generated by the designer matters as long as you can treat that code as a black box and don't need to edit that by hand in any way. Preferably GUIs should be constructed at runtime by parsing a markup language. E.g. XML like XAML XUL (firefox) or Qt designer XML.  It depends on the situation really. I think both have their place and I usually use a hybrid approach. There are always some things that the GUI builder can't do (for example setting the color to a UIColor constant in Interface Builder). On the other hand most of UI work is pretty mundane (for example adding static labels). I prefer to do the mundane stuff in the GUI builder and the more interesting stuff in code. Also I occasionally find myself editing the XML produced by the GUI builder (Interface Builder and glade in my case) by hand. I think GUIs should be defined in something easily readable like XML so you can change it by hand if you need to. The benefit of XML compared to e.g. C++ code is that it can be easily parse back by the designer.  I feel strongly that you should use an interface builder instead of hand-coding a GUI. As in the question mentioned it's a much cleaner separation and once something has to be edited it's much easier. The Qt Designer got this feature to create a class out of a .ui file1) but I think that not using this feature is the best way as this creates just more coded that shouldn't exist at all. The speed issue of creating the window from a .ui-file is negligible because the window has to be loaded only once. This is PyQt but something similar is possible in C++: class SelectDateDialog(QDialog): def __init__(self): QDialog.__init__(self) uic.loadUi(""resources/SelectDate.ui"" self) Essentially this has the same effect as including all your UI-code into the __init__() method but the UI is almost completely separated from the code. 1).ui files are XML files that describe a user interface Yes this is my preferred approach when using Qt too. Very dynamic UI I will hand code but I will try to stick to a designer for the rest. Transforming and XML file as the library changes should also be a lot faster than transforming C++ code describing a GUI.  Hand coding can be good if you want some non-standard features included in you UI. You have more flexibility but you will need to invest more time to create a good interface because Java/C++ are language not mean to target UI design. On the plus if you have a revision control you can look at the history of changes something that can't be done with a designed that uses a binary format or an xml format which is not RCS friendly. Today most of the available tools to visually design an UI have missing some features. They are not flexible enough some features can only be attained coding them. Also in some cases the generated code is not really human friendly and if you modify by hand you may no longer be able to continue using the designer. But the designed can be really a time saver if the design is simple and we can hope designers will be improved in the future but I will not hold by breadth. My conclusion is if you need flexibility today you will have to code by hand the interface if you want something simple and fast then designer is the best choice. Perhaps in the future the designers will be more powerful or perhaps there will be new languages specialized in the UI design which will be more suitable for use in C++/Java something like XUL or XAML.  I would always hand-code the GUI design where there is no standard (or de-facto standard) GUI markup language (as with Java). The reason for this is that I have found that usin a GUI builder design tool will tie you in to using a particular IDE. Over time the best IDE for GUI design and/or writing code will change and each developer should be free to choose whichever IDE they feel most comfortable with. Where I work at the moment we have a lot of legacy GUIs which were written using Netbeans Matisse GUI builder (against my advice at the time :-). These are now almost unmaintainable because all of the developers prefer either IntelliJ IDEA or Eclipse as their IDE. It is not realistsic or workable to have developers fire up Netbeans just to modify GUI layout (people don't keep the Netbeans project definitions in sync etc). Another point is that the total time writing out GUI layout code is probably only 5% of the total development effort of a given project. Even if it takes you twice as long to write the code yourself this doesn't translate as much of an overhead in the grand scheme of things. And it's a small price to pay for long-term maintainability. As long as you are clear about separating out GUI layout logic from business logic I don't believe anything suffers as a result. No-one here uses GUI builders any more! Oh. nice comment and nice thinking :) I completely agree. If Java had an IDE-independent GUI markup (which was either a standard or a de-facto standard) then I would be happy to use it. I still think that with GridBaglayout I could achieve the same results though :-) I don't think this is a proper argument against GUI designers in general. It is an argument against how Java IDEs typically do GUI design. The GUI should be stored in some markup language and created at runtime so you don't end up with unmaintainable generated code. or do like Qt with uic.  If you are designing a business application with lots of entry forms and tabular data writing code for your UI is both faster and more maintainable than using an UI designer. In those kinds of applications there almost never need to precisely place one element at predefined place on screen while on the other hand there is a lots of repetition and design conventions that can simply be extracted into separate methods. Take for example an Eclipse or OpenOffice preferences dialog. There are a bunch of categories and a bunch of different options to set for each. If you have to make something of that size hand designing each screen is a mundane task. Much better approach is to write code which will generate UI elements on-the-fly from provided domain data according to some conventions and defaults. I don't see how using a designer facilitates better separation nor how that perceived separation would help with anything given that you already keep your business logic out of the UI. And finally if you're using Java be sure to check out MigLayout. It works with Swing and SWT its' syntax is very concise and clear and it has a debug mode that's unbelievably useful. I agree that for very dynamic GUIs e.g. ones that can be generated from model data then hand coding is better. However I think that is a special case. Depends on the niche you're working in I guess. Majority of UIs that I write are much better suited for hand coding: rows and rows of trading and payments data different kinds of options for reporting adding/changing options often etc.  My view on this: 1. Hand-coded GUI code is much more reusable 2. Layout issues are simpler with designers  I tend to think the right answer depends on the culture of the target platform. On OS X Interface Builder is such an integral part of the tool chain that it's difficult to avoid it. In Java (awt or swing) the reverse is really true. There is no toolchain support for this. Really the way you can tell is the way the tools produce their outputs. Interface Builder produces .nib format files which are specific to the way Cocoa puts controls on the screen. It understands what is essentially an interface markup format. Java has no such similar concept. Everything is a compiled class and therefor its much more difficult to get convenient results. GTK+ when combined with glade seems to strike a reasonable balance between the two.  I do it by hand it's a lot easier to shuffle things around and re-use panels inside the application (some panels can appear in several places). Using a designer works when you're in a team the artists are supposed to do the GUI. Finding the right element in big panel can be difficult. ?? I've never seen that. @JimmyJ Indenting GUI building code to reflect the layout seems like a really good idea. I'll see if I get into the habit of doing that. Say you got a panel with 50+ elements put into several layers of layout managers sub widgets tabs etc. And you need to move an element from one layout manager to another. You never had problems finding the right layout manager? Oh and you didn't code this panel. Somebody else did. I@m not saying it's impossible just unusual (in my experience). Maybe it's because I indent my GUI code to reflect the layout sometimes the simple things help the most. @Adam It just sounds like bad code to me.  Nothing prevents from mixing the two approaches. I often make the main layout of a form in a GUI designer (because it's quick and you see what you're doing) and put there one or more panels which are then populated with code. This is especially useful when the GUI must adapt to specific situations - for instance if the GUI must change according to what hardware is connected. In any case the most important thing is indeed to keep GUI and application logic separate."
285,A,"How can I modify the shortcut/hotkey ""description"" in a swing JMenu item? Our swing application uses the ""spacebar"" key as a shortcut key. In other words if you press the spacebar anywhere within the application window it will perform a certain behaviour. What's more this same behaviour can also be performed by using a JMenuItem in the window's menu bar. The normal way to implement this is to simply set ""spacebar"" as the ""ACCELERATOR_KEY"" for the corresponding JMenuItem and just let swing take care of the rest. Unfortunately we can't do this because if we set ""spacebar"" as the ACCELERATOR_KEY the shortcut fires every time the user hits spacebar even at bad times like when the user is typing regular text in a textfield inside the application window. To get around that problem we've implemented the spacebar as a window-level pseudo shortcut key WITHOUT properly installing it in the corresponding JMenuItem as an ACCELERATOR-KEY. It's working fine except of course the JMenuItem does not have any shortcut key ""hint"" on it. That is the menu item should say ""spacebar"" in little grey letters right on the menu item so that our users can ""discover"" the shortcut key without reading the user manual. But the text is missing since it only gets added to the menu item when you install the shortcut as an ACCELERATOR-KEY. So my question is: How can I modify that shortcut key hint text on our JMenuItem so that I can add the appropriate ""hint"" myself? It would be nice if I could do this without having to mess around at the Look-and-Feel level since our application is multiplatform and uses several different LAFS. For what its worth this is a bad idea. Using a common key for a shortcut ""sometimes"" is bad UI design. There is a reason shortcuts use meta-keys (ctrl alt shift). It keeps a user from unintentionally firing the shortcut. Using the spacebar as the shortcut but only under certain circumstances will be confusing for your users. My 2-cents. @Nemi: I agree with you in general principle but in this case we are an exception. Our software assists with a very repetitive task and it requires the user to activate a certain behaviour at irregular but very frequent intervals. The hotkey gets uses so frequently that having to press a modifier key in addition to the hotkey actually is an undesirable extra burden. We even chose the spacebar for this key because it is extra big and easy to hit with either hand! iTunes does it and people don't seem to mind that much. I think this is often a legitimate practice as long as the action is almost instantaneous and easily reversible. I've seen single key shortcuts used in 3D animation packages like Blender to great effect. It's unfortunate that it's not supported more directly in swing. Does setting the accelerator interfere with the way you've currently implemented it all? If not you could just set the accelerator to the space bar... I am going to go ahead and assume you can't do that. The other thing you could do is override the getAccelerator() on your JMenuItem so you don't have to copy most of the code from JMenuItem (not that there is much there). JMenuItem clickSpace = new JMenuItem(""Item With Accelerator Hint -->"") { @Override public KeyStroke getAccelerator() { return KeyStroke.getKeyStroke(KeyEvent.VK_SPACE 0); } }  Taking into consideration your requirement not to touch the L&F code which is where the accelerator text is laid out... Looking at the code for JMenuItem it seems that you could create a subclass of JMenutItem for your ""spacebar"" item which would override the setAccelerator method to assign the accelerator keyStroke but not go through the configuration of the action. This should allow for the UI code to do its job of laying out the menu as you like it without the pesky action being triggered when your users are actually trying to put spaces between their words (do they really need to do that anyway?). I think the menu item should work with the mouse in the above 'solution.' It is only the keyStroke accelerator that you are mucking around with. Hmmm this sounds promising thank you for the reply. I suppose the only problem with this would be that the JMenuItem itself would stop working properly...i.e. if the user clicked on it with the mouse instead of using the shortcut key the action would still not be properly attached. There might be a way to work around that in there too though...this is a good starting point. :)  Thanks for the suggestions guys. This discussion has led me to a couple of different solutions that work. First to solve the problem of displaying shortcut ""hint"" text without actually having a working shortcut key. Just add the shortcut key to the Action/JMenuItem as normal (this will give you your hint text) and then simply unbind the shortcut key right after it has been added. An easy (but not the only) way to do this is to create a subclass of JMenuItem and override a single method:  @Override public void setAccelerator( KeyStroke keyStroke ) { super.setAccelerator( keyStroke ); getInputMap( WHEN_IN_FOCUSED_WINDOW ).put( keyStroke ""none"" ); } Voila! A non-functional shortcut key with the hint text on the menu item still intact. A better solution to my original problem however is to change the behaviour of all shortcut keys so that they do not fire when the keyboard focus is inside a text component. As far as I can tell that is really the only situation where an (unmodified) shortcut key like SPACE would collide with the behaviour of an existing window component. This second solution is a bit more effort but it's betteron because it allows me to remove all my other custom code for handling the shortcut key without installing it in the JMenuBar. Instead I can just use the regular shortcut key architecture in swing (i.e. install it in the JMenuBar or Action object) with only a single minor modification: This part is in a custom subclass of JMenuItem again:  /** {@inheritDoc} */ @Override public void setAccelerator( KeyStroke keyStroke ) { super.setAccelerator( keyStroke ); if ( doClickAction_ == null ) { doClickAction_ = new DoClickAction( getActionMap().get( ""doClick"" ) ); getActionMap().put(""doClick"" doClickAction_); } } And this is a new private inner class in my JMenuItem subclass:  /** * This action wraps the original ""doClick"" action for this menu item * altering it so that it only fires if the keyboard focus is not in any * kind of text area or text field. *  * This allows accelerator keys to be added to {@link IMenuItem}s * but the user can still type those keys into text components without * triggering the accelerator key behaviour. */ private static class DoClickAction extends AbstractAction { // the original action i.e. that we are wrapping private final Action doClickAction_; DoClickAction( Action doClickAction ) { if ( doClickAction == null ) { throw new IllegalArgumentException(); } doClickAction_ = doClickAction; } @Override public void actionPerformed( ActionEvent e ) { final KeyboardFocusManager kfm = KeyboardFocusManager.getCurrentKeyboardFocusManager(); if ( kfm.getFocusOwner() instanceof JTextComponent == false ) { doClickAction_.actionPerformed( e ); } } }  I don't know if text components are the only component that causes a problem. If so then maybe you can just customize the Action to use the KeyboardFocusManager to determine which component currently has focus. If it is a text component then you don't invoke your Action. Yes this is basically what I did though I customized the JMenuItem instead because I'm reusing my new JMenuItem in other places."
286,A,"JPopUpMenu problem with adding menu items I'm creating JPopUpMenu with following code: JPopupMenu popup1 = new JPopupMenu(); JPopupMenu popup2 = new JPopupMenu(); JMenuItem freeze = new JMenuItem(""freeze""); freeze.addActionListener(new FreezActionListener(this)); JMenuItem unfreeze = new JMenuItem(""unfreeze""); unfreeze.addActionListener(new UnFreezActionListener(this)); JMenuItem sortU = new JMenuItem(""sort""); JMenuItem sortD = new JMenuItem(""sort""); popup1.add(freeze); popup1.add(unfreeze); popup1.add(sortU); popup2.add(freeze); popup2.add(unfreeze); popup2.add(sortD); After executing this code popup2 menu works fine but popup1 has only sortU item. If I add menu items first to popup2 and then to popup1 then popup1 works fine and popup2 doesn't. Is it normal behavior or did I miss something ? I've searched about this but can't find anything A JMenuItem belongs to one and only one JPopupMenu (or any other menu). You cannot add a Swing component to more than one container; if you do then the component will automatically be removed from the previous container. So when you add freeze and unfreeze to popup2 they are being automatically removed from popup1. What you need to do to make this work properly is to create a total of six JMenuItems three for each menu. The fact that two pairs of menu items do the same thing is only reflected in that the ActionListener does the same thing for each. So.... JPopupMenu popup1 = new JPopupMenu(); JPopupMenu popup2 = new JPopupMenu(); FreezActionListener freezer = new FreezActionListener(this); JMenuItem freeze1 = new JMenuItem(""freeze""); freeze1.addActionListener(freezer); JMenuItem freeze2 = new JMenuItem(""freeze""); freeze2.addActionListener(freezer); UnFreezActionListener unfreezer = new UnFreezActionListener(this); JMenuItem unfreeze1 = new JMenuItem(""unfreeze""); unfreeze1.addActionListener(unfreezer); JMenuItem unfreeze2 = new JMenuItem(""unfreeze""); unfreeze2.addActionListener(unfreezer); JMenuItem sortU = new JMenuItem(""sort""); JMenuItem sortD = new JMenuItem(""sort""); popup1.add(freeze1); popup1.add(unfreeze1); popup1.add(sortU); popup2.add(freeze2); popup2.add(unfreeze2); popup2.add(sortD); That's what happens when I hastily copy and paste code...thanks for the comment. I will fix that. There is no need to create multiple listeners. Listeners unlike components can be shared.  Actually the better solution is to create Actions. Actions can be shared and added to multiple components (JMenuItems JButtons etc). You can even enable/disable the Action which will enable/disable all the components at the same time. You can read the section from the Swing tutorial on How to Use Actions for more information. I know it's years after this was posted but I stumbled upon it trying to satisfy my curiosity and wanted to say that while your answer was lacking on details and an example of implementation I think it *could* be a ""more correct"" answer although the accepted answer works as well."
287,A,"Can there be more than one AWT event queue? I've got a thread dump of an applet running on JVM 1.6.0_12 in Opera 9.64 Build 10487 - and it shows three event queues! As far as I know the Java Swing event handling is single threaded - did this change in any recent update? My problem is that multiple event queues will tend to cause deadlocks since I've got some more locks than only the GUI TreeLock. Yes. Typically there will be only one Toolkit for Toolkit.getDefaultToolkit but multiple EventQueues from Toolkit.getSystemEventQueue (which from 1.2.2 you typically get permissions to call successfully). There is magic based on ThreadGroup and ClassLoaders on the stack to determine which EventQueue to return. Applets are partitioned dependent upon their origin and configuration. Exactly how this is done is implementation dependent. Now what you are probably seeing is an event queue for your applet and the secure context. The secure context handles the dialog boxes from the plugin itself. Accepting certificates and things like that. The secure context keeps these away from user code in your applet context.  In addition Swing creates a new EventQueue (and thread IIRC) when you show a modal dialog this event queue is active (the previous one is ""on hold"") until the modal dialog is closed. However I'm not sure what happens when having several levels of modal dialogs (1 main queue + 1 queue per dialog or 1 main queue + 1 queue for all dialogs).  ""Swing creates a new EventQueue (and thread IIRC) when you show a modal dialog"" Actually it is wrong. I discussed this some time ago with Swing guy and Swing only adds new filter on existing event queue to filter out events comming from different source (window/component). So no new thread/EQ is created for modal dialog. You can verify this by opening modal dialog and getting thread dump before and after modal dialog is opened and compare AWT thread call stack. At least it is how it is with standard Java app. I did not check applet case yet.  There can be more than one and it depends on the browser. EventQueue documentation says: Some browsers partition applets in different code bases into separate contexts and establish walls between these contexts. In such a scenario there will be one EventQueue per context. Other browsers place all applets into the same context implying that there will be only a single global EventQueue for all applets. This behavior is implementation-dependent. Ok that would be an explanation. But I've got only one applet so it's only one codebase. Maybe opera starts one thread per frame - as it does for java script..."
288,A,"how do i open a frame from my menu bar i've made a menu bar with netbeans. in the menubar i've got file >exit Help >Help F1 >about the problem is i don't know how to link up either help or about to another frame that has everything i want the user to see. can someone please tell me how to go to a new frame once eiher help or about is clicked? thanks btw how did you do that thing where file help etc are formatted differntly? For About you would typically use a modal dialog i.e. a JOptionPane - using those is pretty straightforward. For Help you don't want a modal dialog but a new separate JFrame. But you don't have to ""go to"" it - just create it and call show() - that's all you need to do. Like modern GUIs in general Swing does not have an explicit control flow through or between masks. The GUI is shown and only when the user interacts with it is your code in the various event handlers called. This answer is basically correct but I would encourage you to use the NetBeans platform classes instead of raw swing. One concrete example of that would be to use a NotifyDescriptor (http://bits.netbeans.org/dev/javadoc/org-openide-dialogs/org/openide/NotifyDescriptor.html) like NotifyDescriptor.Message instead of JOptionPane. If the NB platform switches to a different technology base (unlikely) you would not be required to change your code to use that new technology. What kind of ""different technology"" could NB possibly switch to that would not support Swing which is part of the Java standard API? Unless you're writing a Netbeans plugin I would avoid tying myself needlessly to it. thanks. here is what i have achieved for help. in main main.java help helpForm - new help(); helpForm.setVisible(true); in calc.java private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) { new help().setVisible(true); when i run the application it says compiled with errors. do you know what i could be? it doesn't say anything else just sys 1 or more projects were compiled with errors Netbeans should underline compiler errors in your source code even while you type and additionally display them in the Tasks view. You have to fix those before it makes sense to try and run the application. They won't just magically go away when you ignore them. fixed it lol. i put - instead of =. dam fat fingers. lol. thanks for your help."
289,A,"How to debug a swing UI in Eclipse? I am trying to figure out where in some Swing code a UI window is created. It is ~1 million lines of code (no joke) and I have done a reasonable amount of searching and debugging. I am looking for a tool where I can click on a window in the UI and it will show me something about its Java code (name of an object etc). I am using Eclipse 3.5 and it would be convenient if the tool worked in Eclipse as I already have the project set up. Two packages I've seen advertised to do this: UI debugger in Jdeveloper. (The download is nearly 1G. Are they serious?! 1G?) Swing explorer. Suggestions? Swing explorer met my needs. Maybe I should close this question. That link is now broken No just ""accept"" your own answer. Someone else may find this useful."
290,A,"What are good Java date-chooser Swing GUI widgets? What are good Java Swing date-chooser components? So far I've only really found these 2: JCalendar - this one is pretty good as it uses the underlying look and feel. JXMonthView in the swingx project - not so good as it uses its own look and feel Both of these look a bit clunky when compared with some I've seen on web-pages. For example it might be nice to see multiple months at the same time. Does anyone know of any other good widgets out there? jDateChooser which comes with jCalendar is the best component for date: Following is the way to get date from date picker: //dat is name given to datepicker component int day=dat.getJCalendar().getDayChooser().getDay(); int month=dat.getJCalendar().getMonthChooser().getMonth(); int year=dat.getJCalendar().getYearChooser().getYear(); String dateNow=year+""/""+month+""/""+day; System.out.println(dateNow); //*************************************************** //For setting date of date picker: dat.setDateFormatString(""dd-MM-yyyy""); Calendar currentDate = Calendar.getInstance(); dat.setDate(currentDate.getTime()); jDateChooser which comes with jCalendar I thought it to be easiest way for entering date in all other date pickers which exactly do you mean? There are several very different variants out there :-) BTW: please format your code (there's a help button available which comes up with a how-to)  I'm often late but the best i've seen is : JDatePicker (What has surprised me : week start with Sunday - like many Calendar and by the way Sunday is day 0 in Java - but you can edit the source and recompile to get it start with Monday instead ;-) ) Well originally Sunday was always the first day of the week. SkyDan not everywhere. In Russia first day of week was and still is monday. The ppint is JDatePicker is not well localized. Hello Isma Can we Resize the PoPUP Calender of the Date picker? plz help me.  There is also NachoCalendar.  You can get a now free date picker and calendar control here. 80 dollars? Bargain! Please read the faq about to write right answers. Put more info examples of use etc. not only a link.  Recently I found and use the Microba DatePicker (http://microba.sourceforge.net/) for a personal project involving Swing GUIs and I actually I really liked the way this control is implemented. Besides the license is BSD so you will be able to customize the control and use it for commercial purposes if you need to do so. If one is concerned about performance one should know that this is one of the slowest date pickers to initialize. I have tried heaps of BSD licensed date pickers but we can not make limit means restriction into the selecting date into this particular Control I've tried 5 different swing DatePicker components and this is the first to work correctly with the Synthetica look and feel. +1"
291,A,What's wrong with this colored JTree? (custom renderer problem) I want write custom TreeCellRenderer to have Root nodes and leafs in different color. This is my code: tree.setCellRenderer(new DefaultTreeCellRenderer() { @Override public Component getTreeCellRendererComponent(JTree tree Object value boolean sel boolean expanded boolean leaf int row boolean hasFocus) { { DefaultMutableTreeNode node = (DefaultMutableTreeNode) value; if (node.isRoot()) { super.setBackground(Color.red); } else if (node.getChildCount() > 0) { super.setBackground(Color.yellow); } else if (leaf) { super.setBackground(Color.green); } return super.getTreeCellRendererComponent(tree value sel expanded leaf row hasFocus); } } }); Unfortunately only selected node changes color. What am I doing wrong? TIA for help. //update: I correlated my code but it didn't help. Perhaps you mean setBackgroundColor() and not setBackgroundSelectionColor() which as its name suggests only sets the color for the selected state. Your use of super is superfluous [credit for this witty remark goes to Carl Smotricz]. It's superfluous even :) Ha ha ha ha ha ha Oops... I must drink more cofee and use notepad instead NetBeans. Thank You. It doesn't work still :(. OK it's setBackgroundNonSelectionColor().  Why do you call super.getTreeCellRendererComponent before you set the colors (and eventually return this) ? Try setting colors first and returning what super.getTreeCellRendererComponent returns
292,A,"Maven2 & Swing projects: Build & run swing application I tried to find info on how to use maven to build and run a swing application but couldn't find anything useful (maven documentation is a mess). Can someone point me to relevant documentation? Is anyone using maven in swing development ? I'm guessing that you want to run your app from a maven command. You can use the exec plugin like this: <build> <plugins> <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>exec-maven-plugin</artifactId> <version>1.1-beta-1</version> <executions> <execution> <goals> <goal>java</goal> </goals> </execution> </executions> <configuration> <mainClass>com.package.MainClass</mainClass> <arguments> <argument>arg1</argument> <argument>arg2</argument> </arguments> </configuration> </plugin> </plugins> </build> You may need this in your pom as well. <repositories> <repository> <id>Maven Snapshots</id> <url>http://snapshots.maven.codehaus.org/maven2/</url> <snapshots> <enabled>true</enabled> </snapshots> <releases> <enabled>false</enabled> </releases> </repository> </repositories> <pluginRepositories> <pluginRepository> <id>Maven Snapshots</id> <url>http://snapshots.maven.codehaus.org/maven2/</url> <snapshots> <enabled>true</enabled> </snapshots> <releases> <enabled>true</enabled> </releases> </pluginRepository> </pluginRepositories> The actual configuration may vary depending on which version of the exec plugin you actually end up using - I've had success with some versions but no success with others so it's kind of trial and error to figure out the right version of the jar for your project. It's also kind of a pain if you have multiple developers as arguments for one dev may not be correct for another so it may be better just writing a batch/shell script to start the app. Just for completeness here's some sample code to make an executable jar file to go with the link in romaintaz's answer. <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-jar-plugin</artifactId> <configuration> <archive> <manifest> <mainClass>com.package.MainClass</mainClass> </manifest> </archive> </configuration> </plugin> </plugins> </build> Thanksthe exec plugin did the trick. Awesome answer.  What exactly do you want to achieve? A Swing application is a ""normal"" Java application so without specific needs regarding the Maven configuration. You can have a look here to know how to create a runnable JAR file with Maven. You can also have a look here in order to create a JAR file that contains all dependencies."
293,A,Embedding web browser window in Java Does anyone know a way to open up an instance of the platform's (Windows/Linux/Mac) browser within a Swing window that is integrated into a Java application. No other actions would be preformed other than opening a given URL. Currently we open a new browser window because the Java embedded browsers have been insufficient. However from a user interaction standpoint this is less than desirable. I'm curious if a solution for this was part of the 1.6 Java release. So far my google-foo has not turned up anything of note. Are there any closed-source libraries that do this? Anything? JDIC Downloaded from here: http://www.java2s.com/Code/Jar/j/Downloadjdic092jar.htm Documentation was here: 1) http://www.aswinanand.com/2006/03/two-minute-web-browser-in-java/ Your link is broken. Although I am using Chrome so if it isn't it's only my problem.  use JEditorPane A text component to edit various kinds of content. By default the following types of content are known: text/plain text/html and text/rtf or Lobo Lobo is an open source web browser that is written completely in Java. The OP asked about opening the platform browser.  We use JDIC as well and it works for us in Windows; however configuring it to work in *nix/OS X can be a pain as it simply utilizes a platform-native browser (supports IE and Mozilla) while on Linux/Mac you may have neither - that's the problem.  WebRenderer is a commercial product that does this and does it well. However the last time I checked it was also pretty expensive (they wanted a $2 per-client fee for a large number of client and a several $1000 support contract).  MozSwing it is free or JxBrowser or JExplorer ($500)
294,A,"Java Swing: Displaying images from within a Jar When running a Java app from eclipse my ImageIcon shows up just fine. But after creating a jar the path to the image obviously gets screwed up. Is there a way to extract an image from the jar at runtime so I can then open it up? Or is there a better way to do this? I'd like to distribute a single jar file if possible. The ""Tom Hawtin - tackline"" answer is much better it just showed up a little late. Please consider changing your selected answer. You can try something like: InputStream stream = this.getClass().getClassLoader().getResourceAsStream(""/images/image.jpg""); In your JAR file you might have a directory structure of: MyJAR.jar - com (class files in here) - images ----image.jpg  To create an ImageIcon from an image file within the same jars your code is loaded: new javax.swing.ImageIcon(getClass().getResource(""myimage.jpeg"")) Class.getResource returns a URL of a resource (or null!). ImageIcon has a constructors that load from a URL. To construct a URL for a resource in a jar not on your ""classpath"" see the documentation for java.net.JarURLConnection.  This is working for me to load and set the content pane background image: jar (or build path) contains:  - com - img ---- bg.png java contains: JFrame f = new JFrame(""Testing load resource from jar""); try { BufferedImage bg = ImageIO.read(getClass().getResource(""/img/bg.png"")); f.setContentPane(new ImagePanel(bg)); } catch (IOException e) { e.printStackTrace(); } Tested and working in both jar and unjarred (is that the technical term) execution. BTW getClass().getClassLoader().getResourceAsStream(""/img/bg.png"") - which I tried first - returned me a null InputStream."
295,A,What Java Swing event can be used to know when application has finished starting? I'm looking for a place to hook some code to programmatically create size and position a JPanel after the application has finished loading. I'm just starting with Java. I'm using NetBeans 6.5.1 with jdk1.6.0_13. I've used the new project wizard to create a basic Java/Swing desktop application. This is a SingleFrameApplication that uses a FrameView with a central main JPanel where all the UI elements are placed. I first tried my code in the FrameView constructor but when I try to arrange my JPanel based on the bounding rectangle of one of the design time controls I added to the UI that control has not yet finished being positioned and sized so I'm getting all zeros for the coordinates. I've verified my code works as expected by calling it from a click event after the application has loaded so my problem is finding a way to know when everything is finished being sized and arranged. I also tried the componentShown event from the main JPanel but I later read that is only fired if setVisible is explicitly called which apparently doesn't happen during normal application startup. Can anyone provide some pointers? Thanks. Update: In addition to what I mention in my answer below I also read about the Application.ready() method. This would also be a point in time of interest for knowing when the UI part of an application is finished doing everything it needs to do. Communicating to my view from the application seemed a bit messy though. I think you want WindowActivated. Have a look at this part of the tutorial. windowActivated seems to be a method of a frame or Dialog. I have access to a SingleFrameApplication a FrameView and the main JPanel. None of those are a frame or Dialog. +1: I was able to eventually figure out how to get at the windowActivated event. Thanks.  The solution I went with was actually a combination of the answers from Charles Marin and JRL (I upvoted both of your answers for credit thanks). I had my FrameView class implement WindowListener. ... public class MyView extends FrameView implements WindowListener ... and in my FrameView constructor I added a listener to the application's main frame. ... getFrame().addWindowListener((WindowListener) this); ... Then in my implementation of windowActivated I could call the code I had to arrange and size a control on the main JPanel based on the location and size of other controls. public void windowActivated(WindowEvent e) { // The application should now be finished doing its startup stuff. // Position and size a control based on other UI controls here } +1 for detailed answer  I assume this is the WYSIWYG editor thing. I'm looking at NetBeans 6.1 so your experiences may vary. The traditional way to layout Swing components is by using a LayoutManager (or LayoutManager2). According to the NetBeans help the visual editor supports these so long as they don't require support for constraints. The procedure goes something like this: Create a new JavaBean and have it implement LayoutManager (a BeanInfo is required too for palette support - you can create one by right-clicking the bean class) Build the project Right-click the bean and choose Tools > Add to Palette... and add it Right-click the panel for which you want to set the layout and select Set Layout > Your Bean Name You may find the design-time experience somewhat lacking. A sample layout implementation: public class StepLayoutBean extends Object implements Serializable LayoutManager { public void addLayoutComponent(String name Component component) { } public void layoutContainer(Container container) { Dimension space = container.getSize(); int xoffset = 0; int yoffset = 0; for (Component kid : container.getComponents()) { Dimension prefSize = kid.getPreferredSize(); if (prefSize.width + xoffset > space.width) { xoffset = 0; } Rectangle bounds = new Rectangle(xoffset yoffset prefSize.width prefSize.height); kid.setBounds(bounds); xoffset += prefSize.width; yoffset += prefSize.height; } } public Dimension minimumLayoutSize(Container container) { Dimension size = new Dimension(); for (Component kid : container.getComponents()) { Dimension minSize = kid.getMinimumSize(); size.width = minSize.width > size.width ? minSize.width : size.width; size.height += minSize.height; } return size; } public Dimension preferredLayoutSize(Container container) { Dimension size = new Dimension(); for (Component kid : container.getComponents()) { Dimension prefSize = kid.getPreferredSize(); size.width += prefSize.width; size.height += prefSize.height; } return size; } public void removeLayoutComponent(Component component) { } } If a custom layout doesn't fit the bill have a look at the event bindings under the component's properties panel - though resizing that way might be a recipe for some kind of recursive event storm. +1: I'm certain in the end this is the way to go. I was really interested in understanding the life cycle of the application framework too. Thanks.  I'd try using getFrame().isValid() That sounds good but if I knew where to call it from to have it return true I'd know where to put my code :) You could have a separate task that runs the method until it returns true and then do your resizing. You can start the task from within your FrameView constructor. +1: getFame() was the key to getting at the JFrame I needed in order to hook into the windowActivated event thanks.
296,A,"java swing graphics color blending I have a bunch of shapes that I'm rendering with different graphics objects. I'd like it so when the shapes overlap they use some alpha blending to combine the colors. However I only want them to blend with the other shapes not with anything else rendered. Is this possible? thanks Jeff Are you using Java's 2D graphics APIs for drawing using a java.awt.Graphics2D object? You can set the compositing mode on the Graphics2D object by calling setComposite() on it passing it a Composite object. Use an instance of class java.awt.AlphaComposite to select blending modes. Have a look at the API documentation of java.awt.AlphaComposite - it explains in detail how to use different compositing modes. See The Java Tutorials: 2D Graphics especially the Compositing Graphics part for a tutorial. I don't understand exactly what you mean by ""I only want them to blend with the other shapes not with anything else rendered"". You can choose yourself what you want to blend with what by setting the compositing mode and drawing in the order that you specify."
297,A,"Java Swing: Approach for dynamically appending text in text area have scrollbar update What is the general approach with Java swing to update a textarea with lines of text (say from a Thread) and then have the text caret flow to the bottom of the textarea as text is being added. Also update the scrollbar so that it is at the bottom. I was thinking that I would have a stringbuffer and append text to that and then set the string in the textarea and position the scrollbar at the bottom. The append() method doesn't do what you want? And although you didn't ask: when you're generating something in a background thread be sure to use SwingUtilities.invokeLater() to update your components.  If you are updating from a Thread dont forget to use SwingWorker or some other AWT Thread-safe approach.  You can update the scrollbar without reading doc.length with: scrollbar.setValue(scrollbar.getMaximum()); Update (wrapped into Invoke later code from Tom Hawtin) java.awt.EventQueue.invokeLater(new Runnable() { public void run() { try { textArea.append(msg); } catch (BadLocationException exc) { // Odd APIs forces us to deal with this nonsense. IndexOutOfBoundsException wrapExc = new IndexOutOfBoundsException(); wrapExc.initCause(exc); throw wrapExc; } JScrollBar bar = scrollPane.getVerticalScrollBar(); bar.setValue(bar.getMaximum()); }}); and wrapped into invokeLater please update your answer I'm not really into this thread-safety thing but I hope this is what u wanted.  From another thread you should use java.awt.EventQueue.invokeLater to get on the EDT and then everything works. So: java.awt.EventQueue.invokeLater(new Runnable() { public void run() { Document doc = text.getDocument(); int origLen = doc.getLength() try { doc.insertString(origLen msg null); } catch (BadLocationException exc) { // Odd APIs forces us to deal with this nonsense. IndexOutOfBoundsException wrapExc = new IndexOutOfBoundsException(); wrapExc.initCause(exc); throw wrapExc; } // IIRC Position is a bit odd and if (origLen == 0) { text.setCaretPosition(doc.getLength()); } }}); Should anyone read the API docs for JTextArea.append it claims to be thread-safe. JDK7 removes that unlikely claim (reminder: threading is hard). As a rule in Swing I tend to always go straight for the model/Document. I believe if the caret is at the end it should get moved on after an append. The only exception is if there is no text because of the strange API. If it has been moved then we probably don't want to update it after the append. Note: If multiple threads are doing this you don't necessarily know which will get there first.  Use append() to add the text then setCaretPosition() to make sure you scroll with it. myTextPane.append(textFromSomewhere); myTextPane.setCaretPosition(myTextPane.getDocument().getLength()); +1 for remembering to move the cursor @Tom - as long as you do it on the event thread should be no problem (and although append() is thread-safe I'd still run on EDT as good practice). Not necessarily the most efficient going to the document is better in that regard. I'm surprised that there's not a setting somewhere for ""cursor follows appended text"". Copying the entire text area to a String just to get the length? This is not going to be thread-safe. Yeah standard Swing threading procedures apply. (I didn't realize that getText() involved copying things; I'll change that to getDocument().)"
298,A,How to make C++ code draw on Java components We are designing physics app and we would like to have it written in Java and also we want to use root (root is writen in C++). Root has some nice graphical features -- it is able to draw very nice 3D charts and I'm thinking whether it's possible to embedd those charts in Java app. Is there any way to make C++ code draw on for example JPanel? Is there a way to pass back mouse/keyboard events? - we would like to have some interactivity like rotating a 3d chart. I asked similar question about embedding a lot of C++ code (that is not related to drawing anything) in Java app (also about root) it's here. I'll leave this as a comment but your C++ code could always produce an image buffer or something and then you could simply blt that to your JPanel. Thats the first thing I thought about. But: i think that it mat look ugly (if there will be any scaling) and we will not get any interactivity. Maybe if you look at the java native api (jni) you can find something usefull. Yeah it's not the best solution. Since SWT is built to be a fairly thin wrapper around native widgets it may be easier to work with than Swing/AWT for your particular task. I realize this particular link is a bit old but it does show how to quickly wrap a native widget.  The JNI comment on the question itself seems to be the best way forward - I don't think you want to draw with root as-is; you'll want to write some interface code in between which is called from Java via JNI which asks 'root' to redraw its image at a given size (the appropriate size for the image being something only the java component would know). Pass it back to the java component from the JNI call as just 32-bit image data for instance. I would not assume you can draw into a java component even in AWT; as it's basically java wrappers around native components - where the drawing is usually done in the native component itself (by the operating system not by the java code).
299,A,"Can I change the root directory of the session storage? Currently the session storage saves all session files in a system dependand folder suited for session state files. But in one of my applications I want the session files be saved in a special directory. Can I change the root directory of the session storage? Yes it's easy. From the ApplicationContext: ApplicationContext.getLocalStorage().setDirectory(new File(""/mydirectory"")); I often used it during GUI tests so that I could pre-setup the geometry required by my tests (rather than forcing move and resize at every test launch)."
300,A,"After calling JTabbedPane.removeAll() the JTabbedPane still has x number of tabs? In my JTabbedPane I am removing tabs in 2 different ways: tabbedPane.remove(index) and tabbedPane.removeAll() Both work fine in terms of closing the tabs. However I have a change listener on my TabbedPane that calls back to another module to report on tab changes. This is where the problem is. When adding and removing tabs using remove(index) the source TabbedPane in the stateChanged() method contains the correct number of tabs when checking tabbedPane.getTabCount(). However when calling tabbedPane.getTabCount() after tabbedPane.removeAll() the count is still the count that was present immediately before the removeAll(). Does anyone have any suggestions? Looking a the JTabbedPane code (version 6) both codes go through removeTabAt which should decrease the count. It probably will fire off an event for each tab however meaning that the first event should have the getTabCount() one less then the count before the removeAll(). Are you certain about the getTabCount() call? What happens if you remove all tabs (from the end) manually?  Try to call validate or revalidate That doesn't help. The tab count is not determined by laying out the component. makes no difference in my test; I tried each of them after every add() and remove().  Here's a test case that helps to expose the problem. import javax.swing.JPanel; import javax.swing.JTabbedPane; import javax.swing.event.ChangeEvent; import javax.swing.event.ChangeListener; import junit.framework.TestCase; public class JTabbedPaneTest extends TestCase { private JTabbedPane pane; private int count = 0; protected void setUp() throws Exception { pane = new JTabbedPane(); ChangeListener listener = new ChangeListener() { public void stateChanged(ChangeEvent e) { JTabbedPane pane = (JTabbedPane)e.getSource(); int before = count; count = pane.getTabCount(); System.out.println(String.format(""%s --> %s"" before count)); } }; pane.addChangeListener(listener); JPanel panel1 = new JPanel(); JPanel panel2 = new JPanel(); pane.add(panel1); pane.add(panel2); } public void testOne() throws Exception { assertEquals(1 count); // I actually expect 2 assertEquals(2 pane.getTabCount()); pane.remove(0); pane.remove(0); assertEquals(0 count); assertEquals(0 pane.getTabCount()); } public void testMany() throws Exception { assertEquals(1 count); // I actually expect 2 assertEquals(2 pane.getTabCount()); pane.removeAll(); assertEquals(2 count); // I actually expect 0 assertEquals(0 pane.getTabCount()); } } I think there is a synchronization issue going on; the output is: 0 --> 1 1 --> 1 1 --> 0 0 --> 1 1 --> 2 It looks as if some change events are being lost. Update: leaving this in place for posterity but it's wrong; as mmyers points out the events only fire when the selection changes. the change events are being called when the selection is changed not when the tabs are removed. removeAll() starts its implementation with changing the selection to -1 I'm keeping count: you're now #15 to misspell my name on SO. Onto the list you go! ;) Sorry! Fixed. My deepest apologies.  Here you go; use ContainerListener instead: import java.awt.event.ContainerEvent; import java.awt.event.ContainerListener; import javax.swing.JPanel; import javax.swing.JTabbedPane; import junit.framework.TestCase; public class JTabbedPaneTest extends TestCase { private JTabbedPane pane; private int count = 0; protected void setUp() throws Exception { pane = new JTabbedPane(); ContainerListener containerListener = new ContainerListener() { public void componentAdded(ContainerEvent e) { count++; } public void componentRemoved(ContainerEvent e) { count--; } }; pane.addContainerListener(containerListener); JPanel panel1 = new JPanel(); JPanel panel2 = new JPanel(); pane.add(panel1); pane.add(panel2); } public void testOne() throws Exception { assertEquals(2 count); assertEquals(2 pane.getTabCount()); pane.remove(0); pane.remove(0); assertEquals(0 count); assertEquals(0 pane.getTabCount()); } public void testMany() throws Exception { assertEquals(2 count); assertEquals(2 pane.getTabCount()); pane.removeAll(); assertEquals(0 count); assertEquals(0 pane.getTabCount()); } } That might be better than mine although it's a little hard to read in the middle of all that test code. This also makes sense. I guess since my question did mention ChangeListener I should keep that one as the selected answer but still vote this one up? Or can there be multiple answers? Either way thank you.  After looking at the source code I see what's happening. JTabbedPane fires ChangeEvents when the selected tab is changed. But to remove all tabs it first sets the selected tab to -1 and then removes all the tabs. So when the ChangeListener catches the event all the tabs are still there. If you want to know the number of tabs at all times I'm afraid you'll have to iterate through the tabs yourself and remove them one by one. while (myTabbedPane.getTabCount() > 0) myTabbedPane.remove(0); Ah I see now. Thank you for the answer. Much appreciated."
301,A,"Why is a JLabel in a JPopupMenu not respecting its Look and Feel? I have a Java application with a custom defined Look and Feel in which the user can switch between a light and a dark mode. One of the things we have is a right click popup menu that inherits from the JPopupMenu class. The first thing we add to the menu is a JLabel: add( new JLabel( ""<html><i> "" + field.desc + ""</i><br/>field = "" + field.getName() + ""</html>"" ) ); Now we have altered the L&F for JLabels and they appear in quite a few places in the app styles correctly. We have modified: Label.background Label.foreground Additionally the L&F for the MenuItems has also been modified via: PopupMenu.border PopupMenu.foreground PopupMenu.background For what it's worth we've also modified similar properties on MenuItems. The problem is that that label that occurs inside the popup menu doesn't seem to be respecting the background color. The foreground color changes when switching between light and dark mode but the background color does not. I did a screen grab and eyedropped the color that the background color was set to and couldn't find a match anywhere in our L&F settings which would seem to suggest that it was just using the default L&F (Windows probably) on it. Is this perhaps a bug? Or am I not setting some L&F property I should be? I couldn't seem to find anybody in the Google-sphere with the same problem so any help would be appreciated. I should have known that this would be the answer: the JLabel was set to transparent so it's background wasn't being respected. Altering the code like this fixed the problem real nice: JLabel fieldInfo = new JLabel( ""<html><i> "" + field.desc + ""</i><br/>field = "" + field.getName() + ""</html>"" ); fieldInfo.setOpaque( true );"
302,A,Is it possible to include JButton in a JTable? I have a JTable that stores the results of a database query so far so good. What I want is for the last column in each table to have a clickible JButton that will open the edit screen for the object represented in that row and that means the button will need to know the details of the first column in the table from its own row (the ID from the database). Any advice? I already tried just adding JButtons but they turned into Text when I tried to run it. There is a nice tutorial on how to do just that here. I think it's overkill to implement a TableModel for JButtons they're nothing to do with the data model they just perform an action. The simple example for the ColorRenderer in the Sun tutorial does this much more simply in my opinion Totally agree with you. I've worked with that sample code from the tutorial and it doesn't seem to work exactly right. The first button I click works but subsequent actions require a triple-click to fire. First click makes button disappear second click it comes back finally on the third click it fires.  Contrary to the tutorial above there is a way to do this without a complicated positioning math custom mouse listeners and custom table models. Instead it can be done with a single simple custom class following the pattern described here: http://web.archive.org/web/20100623105810/http://ivolo.mit.edu/post/A-Simple-Pattern-for-Embedding-Components-into-a-Swing-JTable.aspx this is excellent and very helpful. The link is dead is it still possible to find that solution anywhere? The Way Back Machine has a copy... But this solution does appear to use a custom (albeit anonymous) table model so I'm not sure at first glance what makes this tutorial better than any other...  You may also find my tutorial on a similar subject (in this case using a JPanel) helpful as well: Custom JPanel cell with JButtons in JTable  Take a look at Sun's introduction to the JTable component specifically the section about Editors and Renderers. It discusses the use of alternative CellRenderers and CellEditors. What you'd need to do is create (or borrow) a ButtonCellRenderer and a ButtonCellEditor and then apply them to the column in question in your JTable. The examples found in the linked articles should give you all the information you need. The renderer doesn't accept events. That's the editor's job. Have a look at my tutorial in the answer I gave. it's easy except getting mouse clicks to forward to a ButtonCellRenderer's buttons.
303,A,Has anyone got an example of aerith style swing mixed with GUI maintainability of SWT editing? My boss loves VB (we work in a Java shop) because he thinks it's easy to learn and maintain. We want to replace some of the VB with java equivalents using the Eclipse SWT editor because we think it is almost as easy to maintain. To sell this we'd like to use an aerith style L&F. Can anyone provide an example of an SWT application still being able to edit the GUI in eclipse but having the Aerith L&F? Like Heath Borders said SWT doesn't support L&Fs so you have to use Swing for that. Aerith however does not base on a look and feel but on custom painting on the components with a lot of gradients. If you are looking for a Swing GUI Editor that is (nearly) as easy to use as VB try the Matisse GUI Builder in NetBeans. There is also a version for Eclipse but it is shipped with the commercial MyEclipse. If you want to learn more about writing apps with cool a cool GUI have a look at the Filthy Rich Clients book by Chet Haase and Romain Guy. If this does not convince your boss try to resize the VB GUI and then resize the Swing GUI. ;-) And I would say a VB is really not very good to maintain in the long run...  SWT doesn't support look & feels. You can get different L&F's by altering your OS native L&F. The only exception is to using the eclipse forms toolkit. It still has the OS native feel but strives for a web-browser-like look. It does this mostly by setting everything to SWT.FLAT and using white backgrounds on everything. Occassionally they have to manually draw outlines around controls that don't natively support it. If you're looking for custom L&F's that will appear across platforms you really want Swing.
304,A,Resize a JPanel in line with a JDialog I've got a JDialog which contains a series of JPanels in a CardLayout. Some of these panels contain JTables which I would like to be resized in line with any resizing of the JDialog. I am not sure how to achieve this and any help would be greatly appreciated. At present the tables simply remain their current size and do not scale. I'm sure its something simple but I'm having trouble locating the exact approach needed. Many thanks in advance. I will provide any more information if required. edit: The JDialog is used as a wizard so only one of the panels is being displayed at any one time hence the use of CardLayout. I would ideally like to keep this is layout manager although if it is the source of the problems then obviously I would rethink! You can keep the CardLayout but you need to do the following: 1. set the layout of your JDialog to BorderLayout and add a new JPanel (contentPanel) to the JDialog 2. now set this contentPanel layout to be CardLayout 3. add your other panels to the cardlayout as required. 4. Also make sure off the layouts you use on each of the panels you're adding to the CardLayout. By default JPanel uses FlowLayout I think and this is not ideal for a JTable. So you might need to play around with the layout of the panel containing the table as well; try out BoxLayout or BorderLayout for that as well.
305,A,"Swing: Can't get JButton to update - repaint() not working I'm using Swing for the first time to create a simple GUI. It consists of a JFrame upon which I have placed a single JButton which when clicked calls some other code which takes approx. 3 seconds to return. Just before the call to this code in actionPerformed() I want to update the text on the button to inform the user that processing is occuring. My problem is that the text on the button does not update until after the 3-second call has returned. I want the updated text to be present during the call then I'll change it back afterwards. Calling repaint() on the JButton doesn't do anything and calling it on the JFrame results in ""Exception in thread ""AWT-EventQueue-0"" java.lang.NullPointerException"" being thrown when I click the button. What's happening is that the 3-second code is executing in the GUI thread so the button doesn't have a chance to update until it's done. To solve this start a SwingWorker to do the long-running operation; then you'll still be free to do things in the GUI while you're waiting for it. Here are a couple of tutorials on the subject and the SwingWorker Javadocs referenced above have some code also. Sample code public void actionPerformed(ActionEvent e) { SwingWorker<Void Void> worker = new SwingWorker<Void Void>() { @Override public Void doInBackground() { // Call complicated code here return null; // If you want to return something other than null change // the generic type to something other than Void. // This method's return value will be available via get() once the // operation has completed. } @Override protected void done() { // get() would be available here if you want to use it myButton.setText(""Done working""); } }; myButton.setText(""Working...""); worker.execute(); } ""worker"" needs a semi-colon at the end of the line and I had to add ""return null;"" in ""doInBackground()"" to get it to properly compile. @Zach: I knew the return statement was necessary but somehow I'd never noticed the missing semicolon. Thanks for pointing it out. Cheers to posting the same answer! We tend to do that a lot. (a couple of times) Added sample code because otherwise your 54-second advantage is insurmountable. :P My sample code is a link away. You have to travel to the other answer I posted. P.S. It is usually not my way to upvote a 'competing' answer but I feel you have posted a better answer. But my sample code is actually tailored to this specific question! That makes it better in ways that I can't quite think of! (I'm upvoting your answer too but it looks like you've maxed out for the day anyway.) Noooooooooooooooooooo!!!!!!!!!!! How can you tell how much rep I've gotten in a day? I know I can check my 'envelope' Okay *now* I can think of the ways it's better. :P (I'm now at +205 for the day so you can have the rest of the Swing questions if you want.) Ha I'm no where close to catching you in the swing votes total and I'm at 200 for the day. Looks like there will be some swing questions up for grabs. I saw you get three upvotes without your rep changing. Or maybe I hacked into your account. Whichever you prefer. You've got a higher average in Swing questions than I do though. (And here's a -1 and +1 to compensate for the downvote you just got elsewhere.) Hey no fair. Somebody took away a vote and then re-added it for a net of -5 points. :( That was my bad... I was trying to see if adding and removing votes affected the total count at all. (it doesn't)  The problem here is that your long running task is blocking the thread that would normally paint the GUI. The usual way around this is to throw the longer running task off into another thread. This can be done fairly easily using a SwingWorker. This question may provide some helpful information as well."
306,A,Swing JTable Layout: how to make table occupy complete viewport - like in eclipse IDE In the application I am building I will be making a few tables display different data. And I want my table to look like the tables in Eclipse IDE like in the Problems View or the Tasks View (ignore the tree structure of the Problems View) What I am mainly interested in is the last column in the above views indicated in the picture below. This column completely disappears when the table's width is more than or equal to that of the viewport. I have tried adding a dummy column with a blank header but I can never make it disappear completely. Also even though the table is empty it shows rows and cells. How do I get this effect? Thanks in advance! Check out this blog post which describes exactly what you seek. PERFECT - Exactly what I was looking for!! Thank You  Use JTable's method setAutoResizeMode with one of the constants AUTO_RESIZE_ALL_COLUMNS AUTO_RESIZE_LAST_COLUMN AUTO_RESIZE_NEXT_COLUMN AUTO_RESIZE_OFF AUTO_RESIZE_SUBSEQUENT_COLUMNS
307,A,"Sun Java Tutorials for earlier versions of Java? I'd like to read the Sun Java Swing tutorials for Java version 5. It's easy to find Sun's tutorials for SDK 6. My searches of Sun's site and using Google didn't turn up any links (yet) to the older tutorial. Even the tutorial link on the SDK 5 page pointed to the current tutorials. Are the older tutorials still available? If so where? Thanks in advance for any assistance. P.S. For the curious among you the handling of drag and drop changes between SDK 5 and SDK 6. I'd like to read the tutorial that pertains to the JVM I'm actually using. You can easily find the every version of API documentation. So you really think that you can't survive with those documents? ;) Hey Chathuranga Sure I can survive. I'd rather run than walk though... ;). Thanks for your response.  Sun provides ""Archives"" with earlier snapshots of the tutorials. The following link should have an option for the JDK 5 tutorial: http://java.sun.com/products/archive/tutorials/download.html It does thank you very much!"
308,A,"Tabbing over a JTable component I have a panel containing a number of components one of which is a JTable. When the JTable has focus and the TAB key is pressed the default behaviour is to move focus from cell to cell within the table. I need to change this to focus on the next component instead i.e. leave the JTable completely. Ctrl-TAB achieves the desired results but is not acceptable to the user. I can add a key listener to the table and change the focus when TAB is pressed but it feels as though there might be a better way to do this. Any ideas? Thanks... I think the correct solution is posted here: http://stackoverflow.com/a/12157344/140278 Well you probably don't want to just get rid of the Tab Action because it has other responsibilities. For example when you are editing a cell the Tab Action stops cell editing before moving to the next cell. So you probably want to retain this behaviour while adding extra behavour to change focus to the next component. I refer to this as ""wrapping an action"" and you can find an example of this by checking out the Table Tabbing action. You should be able to easily customize the code to use the KeyboardFocusManager to transfer focus.  You would typically do this by adding an Action to the components action map and then binding a keystroke with it in the component's input map (example code below). However this will not work for tab as this event is consumed by the focus subsystem unless you add the following line to remove tab as a focus traversal key: tp.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS Collections.<AWTKeyStroke>emptySet()); Here's the full example code: public static void main(String[] args) { final JTabbedPane tp = new JTabbedPane(); // Remove Tab as the focus traversal key - Could always add another key stroke here instead. tp.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS Collections.<AWTKeyStroke>emptySet()); KeyStroke ks = KeyStroke.getKeyStroke(KeyEvent.VK_TAB 0); Action nextTab = new AbstractAction(""NextTab"") { public void actionPerformed(ActionEvent evt) { int i = tp.getSelectedIndex(); tp.setSelectedIndex(i == tp.getTabCount() - 1 ? 0 : i + 1); } }; // Register action. tp.getActionMap().put(""NextTab"" nextTab); tp.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(ks ""NextTab""); tp.addTab(""Foo"" new JPanel()); tp.addTab(""Bar"" new JPanel()); tp.addTab(""Baz"" new JPanel()); tp.addTab(""Qux"" new JPanel()); JFrame frm = new JFrame(); frm.setLayout(new BorderLayout()); frm.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); frm.add(new JButton(nextTab) BorderLayout.NORTH); frm.add(tp BorderLayout.CENTER); frm.setBounds(5050400300); frm.setVisible(true); } That was the tip I needed. Couldn't figure out why TAB was not working but had an idea it was because of the FocusPolicy."
309,A,How to make JTextField expand with a BorderLayout (Java) I have a Java program in which I'm using a JTextField but if i don't specify a default size it'll have the width 0. I'm inserting it in a BorderLayout so how do I make it expand to fill the whole container? In the above example the text field will work fine. However if you insert into EAST or WEST it will not work. import java.awt.BorderLayout; import javax.swing.JFrame; import javax.swing.JTextField; public class TextFieldTest { public static void main(String[] args) { JFrame f = new JFrame(); f.setLayout(new BorderLayout()); JTextField tf = new JTextField(); f.getContentPane().add(BorderLayout.EAST tf); f.pack(); f.setVisible(true); } } My question back to you is: Does this need to be a BorderLayout or can you use other Layout Managers? If you can you should check out GridBagLayout that you can have an element auto expand (using a weight) to fit the entire container. here have an upboat I got the accepted answer without any votes? Niiiice!  Fill the whole container? With BorderLayout? container.add( jTextField BorderLayout.CENTER ); Simple as that.  It will automatically fill to the width of the container example shown:  import java.awt.BorderLayout; import javax.swing.JFrame; import javax.swing.JTextField; public class TextFieldTest { public static void main(String[] args) { JFrame f = new JFrame(); f.setLayout(new BorderLayout()); JTextField tf = new JTextField(); f.add(tf BorderLayout.SOUTH); f.pack(); f.setVisible(true); } } Don't use Swing components off the EDT!  When programming with Swing the key thing is to use a good layout manager. For me the perfect layout manager is MigLayout. This is simply the best one-stop solution to all layout needs. Their site provides excellent documentation and examples.
310,A,"How to add multi-line label on a Java GUI? I have made a java swing GUI. Now I want to display a static message on that but the message is multi-line and the JLabel is single line. How can I display that message? Is there any property of JLabel which we can set to display the multiple line message? Will I have to use several JLabels for multiple lines? Is there any other way I can display that message? same as http://stackoverflow.com/questions/1090098/newline-in-jlabel You can do JLabel l = new JLabel(""<html><p>Hello World! blah blah blah</p></html>""); and it will automatically wrap it where appropriate.  How to Use HTML in Swing Components Displaying Multi Line Text"
311,A,"All keys to a list for example VK_A..Z for user to select I am making a program that allows user to custom keyboard shortcuts for this i need the available keys to be displayed what is the best way to achieve this in java swing?  KeyEvent.class.getDeclaredFields() I am intrested in dynamic example of below keysLST.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ""CTRL"" ""ALT"" ""SHIFT"" })); one way i know is to get all from the keyevent class but i am not sure how to integrate it to the list. any help would be appreciated. Thanks Instead of picking from a list add a KeyListener to any component (a JTextField works) and record the key code as the user presses the key. You can also record modifiers (ctrlaltshift) this way. public void keyPressed(KeyEvent e) { int keyTheUserJustPressed = e.getKeyCode(); // then use for ctrl/alt/shift e.getModifiersEx(); // or use e.isAltDown(); e.isShiftDown(); } Hi basszero  i want to keep these choice as they will be used later by a robot the robot will sending the keys it reads from the list box or from default is none is selected. then save the e.getKeyCode() into some structure outside of the listener On further investigation i believe your orignal idea was good one it is easier for the user to click the keys than to go through a huge list. thanks for the help!"
312,A,"In Java Swing how do you get a Win32 window handle (hwnd) reference to a window? In Java 1.4 you could use ((SunToolkit) Toolkit.getDefaultToolkit()).getNativeWindowHandleFromComponent() but that was removed. It looks like you have to use JNI to do this now. Do you have the JNI code and sample Java code to do this? I need this to call the Win32 GetWindowLong and SetWindowLong API calls which can be done via the Jawin library. I would like something very precise so I can pass a reference to the JDialog or JFrame and get the window handle. Swing transparency using JNI may be related. I found this: http://jna.java.net/javadoc/com/sun/jna/Native.html#getWindowID(java.awt.Window) JNA lets you call native libraries without having to write jni native code. Turns out the library itself has a method that takes a Window and produces an int presumably a handle (or pointer?) that hopefully works on all platforms. Actually getWindowPointer() is for Windows. According to their docs the method getWindowID() is for X11.  Both of the above methods work just fine but both return a HWND as a java int (32bits). this is fine for a 32 bit platform but it will be unlikely that your application will be functional on a 64bit platform. I would change the return types to longs (64bits) as this will behave correctly on both 64 and 32bit systems (you'll only need to recompile the DLL) Thank you very much.  In JNA library we see that using Native AWT in Java 5 and 6 UnsatisfiedLinkError when run headless so use dynamic linking. See the method Java_com_sun_jna_Native_getWindowHandle0 in https://github.com/twall/jna/blob/master/native/dispatch.c.  The following code lets you pass a Component to get the window handle (HWND) for it. To make sure that a Component has a corresponding window handle call isLightWeight() on the Component and verify that it equals false. If it doesn't try it's parent by calling Component.getParent(). Java code: package win32; public class Win32 { public static native int getWindowHandle(Component c); } Header file main.h: /* DO NOT EDIT THIS FILE - it is machine generated */ #include <jni.h> /* Header for class win32_Win32 */ #ifndef _Included_win32_Win32 #define _Included_win32_Win32 #ifdef __cplusplus extern ""C"" { #endif /* * Class: win32_Win32 * Method: getWindowHandle * Signature: (Ljava/awt/Component;Ljava/lang/String;)I */ JNIEXPORT jint JNICALL Java_win32_Win32_getWindowHandle (JNIEnv * jclass jobject); #ifdef __cplusplus } #endif #endif The C source main.c: #include<windows.h> #include <jni.h> #include <jawt.h> #include <jawt_md.h> HMODULE _hAWT = 0; JNIEXPORT jint JNICALL Java_win32_Win32_getWindowHandle (JNIEnv * env jclass cls jobject comp) { HWND hWnd = 0; typedef jboolean (JNICALL *PJAWT_GETAWT)(JNIEnv* JAWT*); JAWT awt; JAWT_DrawingSurface* ds; JAWT_DrawingSurfaceInfo* dsi; JAWT_Win32DrawingSurfaceInfo* dsi_win; jboolean result; jint lock; //Load AWT Library if(!_hAWT) //for Java 1.4 _hAWT = LoadLibrary(""jawt.dll""); if(!_hAWT) //for Java 1.3 _hAWT = LoadLibrary(""awt.dll""); if(_hAWT) { PJAWT_GETAWT JAWT_GetAWT = (PJAWT_GETAWT)GetProcAddress(_hAWT ""_JAWT_GetAWT@8""); if(JAWT_GetAWT) { awt.version = JAWT_VERSION_1_4; // Init here with JAWT_VERSION_1_3 or JAWT_VERSION_1_4 //Get AWT API Interface result = JAWT_GetAWT(env &awt); if(result != JNI_FALSE) { ds = awt.GetDrawingSurface(env comp); if(ds != NULL) { lock = ds->Lock(ds); if((lock & JAWT_LOCK_ERROR) == 0) { dsi = ds->GetDrawingSurfaceInfo(ds); if(dsi) { dsi_win = (JAWT_Win32DrawingSurfaceInfo*)dsi->platformInfo; if(dsi_win) { hWnd = dsi_win->hwnd; } else { hWnd = (HWND) -1; } ds->FreeDrawingSurfaceInfo(dsi); } else { hWnd = (HWND) -2; } ds->Unlock(ds); } else { hWnd = (HWND) -3; } awt.FreeDrawingSurface(ds); } else { hWnd = (HWND) -4; } } else { hWnd = (HWND) -5; } } else { hWnd = (HWND) -6; } } else { hWnd = (HWND) -7; } return (jint)hWnd; } Sorry to bump a very old topic here but I keep getting an `EXCEPTION_ACCESS_VIOLATION` in `jvm.dll` whenever I try to get the drawing surface (`GetDrawingSurface`) of a component (in my case a `java.awt.Cavas`). I made sure it is _not_ lightweight and it is already visible on the screen. Has anything changed in Java 1.6 or is there anything else you need to do before you can get the drawing surface? No idea. Try asking a new question to get more eyes on the issue. pdinklag were you able to deal with that issue calling GetDrawingSurface? I experience the same problem now and jvm crashes in DSGetDrawingSurface. Tried with several jvms (1.6 and 1.7) - still crashes.  This is the same as Jared MacD's answer but it uses reflection so that the code can compile and load on a non-Windows computer. Of course it will fail if you try to call it. import java.awt.Frame; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class WindowHandleGetter { private static final Logger log = LoggerFactory.getLogger(WindowHandleGetter.class); private final Frame rootFrame; protected WindowHandleGetter(Frame rootFrame) { this.rootFrame = rootFrame; } protected long getWindowId() { try { Frame frame = rootFrame; // The reflection code below does the same as this // long handle = frame.getPeer() != null ? ((WComponentPeer) frame.getPeer()).getHWnd() : 0; Object wComponentPeer = invokeMethod(frame ""getPeer""); Long hwnd = (Long) invokeMethod(wComponentPeer ""getHWnd""); return hwnd; } catch (Exception ex) { log.error(""Error getting window handle""); } return 0; } protected Object invokeMethod(Object o String methodName) throws IllegalAccessException IllegalArgumentException InvocationTargetException { Class c = o.getClass(); for (Method m : c.getMethods()) { if (m.getName().equals(methodName)) { Object ret = m.invoke(o); return ret; } } throw new RuntimeException(""Could not find method named '""+methodName+""' on class "" + c); } }  You don't have write any C/JNI code. From Java: import sun.awt.windows.WComponentPeer; public static long getHWnd(Frame f) { return f.getPeer() != null ? ((WComponentPeer) f.getPeer()).getHWnd() : 0; } Caveats: This uses a sun.* package. Obviously this is not public API. But it is unlikely to change (and I think less likely to break than the solutions above). This will compile and run on Windows only. You would need to turn this into reflection code for this to be portable. mike rodent asked "" Thanks this looks really good... but with WComponentPeer I'm getting: ""Access restriction on required library rt.jar"" - rt.jar is part of my OpenOffice API imports. Given that sun.awt.windows classes aren't public how do you use them like this?"" @mike: reflection might help: http://comments.gmane.org/gmane.comp.video.mplayer.user/58067 @Jared you might be able to compile it in windows just then never run that particular code in other OS's and it might work.  This little JNI method accepts a window title and returns the corresponding window handle. JNIEXPORT jint JNICALL Java_JavaHowTo_getHwnd (JNIEnv *env jclass obj jstring title){ HWND hwnd = NULL; const char *str = NULL; str = (*env)->GetStringUTFChars(env title 0); hwnd = FindWindow(NULLstr); (*env)->ReleaseStringUTFChars(env title str); return (jint) hwnd; } UPDATE: With JNA it's a little bit easier. I made a small example which find the handle and use it to bring the program to front. Small example is awesome This is not precise enough. I'd rather not hope that the window title is not in use by another window. just be sure to set the window title to something really really unique before the call (so you don't accidentally pick up the hwnd for another window with the same title - the FindWindow call is not process specific) You can replace the ""NULL"" with a class name to make the search more precise. You determine the window class name with a special tool like SPY++ or WinID."
313,A,How to make swing components not resizable I'm trying to make some components inside a JSrollPane unresizable because content inside can grow dynamically and I must prevent it from growing over a predefined size. My approach so far is this one: scrollPane(constraints:BL.CENTER size:[500200] maximumSize:[500200]){ panel(background:Color.WHITE border:BF.createTitledBorder('Results')) { gridBagLayout() f0 = label(constraints:gbc(gridx:0 gridy:0)) fk = label(constraints:gbc(gridx:0 gridy:1)) } } (this is Groovy but objects are the same as Swing (eg label = JLabel panel = JPanel..) And it works but when inserting into the label a text that is long for example 2000px the first call to repaint in the frame that contains this scrollpane makes the whole scrollpane resize (until the scrollbar actually disappears). I need to force to remain to the size I want! Am I missing something? Or is it a bug of groovy? (it seems strange because this should just maps calls to normal swing components) Why don't you just wrap the text? Anyway Swing components have setMaximumSize(Dimension) method because they are equations and wrapping them wouldn't be nice.. then I allowed also to show an image instead of text in labels so it wouldn't work. I already used maximumSize for the scrollpane :( Cropping them would not be nice either. Anyway what if you set maximumSize of the label? Try setting scroll pane's preferredSize by the way. See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4916048 setMaximumSize() is not always respected by the layouts. Like recommended check rather the preferred size. preferredSize was the way! I always used it while programming in plain Java but now I switched to Groovy too and forgot about that using just setSize and setMaximumSize.
314,A,"JTextArea with strange behaviour when resizing the JFrame I'm using some JTextArea in my Swing application. The surrounded JScrollPane is added to a JPanel using the GridBagLayout manager. // Pseudo Code ---- JTextArea area = new JTextArea(); area.setRows(3); JScrollPane sp = new JScrollPane(area); JPanel p = new JPanel(new GridBagLayout()); p.add(sp new GridBagConstraints( 0 0 1 1 1 0 WEST HORIZONTAL new Insets(4 4 4 4) 0 0)); // ---------------- Everything works fine. No problem at all until I will resize the JFrame. Then both JTextArea will collapse to one row. However there is enough place for at least one of them. Why the element collapse to one row? Does anyone know a solution? Has anyone an idea? both? I can only find one in your code... Yes. I just put an example to this post. It is not my real code. It may irrelevant and I should remove it. I believe this is because you have your weighty set to 0 (6th argument to the GridBagConstraints constructor). You'll need to increase this if you want your component to grow vertically.  If I use a BorderLayout around my elements it works. Pete MrWiggles Thank you for your help!!  Also make sure you are setting the 'preferred size' property on your scrollpane's. I've had strange behavior (panes/fields collapsing/disappearing) when frames and panels get resized when this property is not set.  I had a similar problem recently where I had two JTextAreas with different GridBagConstraint.weighty values and both were set to GridBagConstraint.fill = BOTH. When I would change the text in the JTextAreas they would change sizes (which I would expect not to happen if weights and fill values are set). Oddly enough all I had to do was set a preferred size to the JScrollPanes that surrounded the JTexAreas. The preferred size dimension could be anything as the ""fill = BOTH"" caused the preferred size to be ignored but it did something magical to fix my problem."
315,A,"Using an ActionListener in one class to start a timer in another class I have a class (simulation) which creates an instance of another class (GUI). Inside the class GUI there is a button (start) which has an actionlistener attached to it. I need this actionlistener to start a timer in simulation but I can't figure out how to do it. Code in Class Simulation: public class Simulation{ private static JFrame frame; private static GUI control; public static Integer xcontrol = 100 ycontrol = 100; public Timer timer; public int steps; public static void main(String[] args) { Simulation sim = new Simulation (); } public Simulation() { frame = new JFrame(""Action Listener Test""); frame.setLayout(new BorderLayout(10)); control = new GUI (xcontrol ycontrol); frame.getContentPane().add(control  BorderLayout.CENTER); frame.setResizable(false); frame.pack(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } public void StartTimer() { timer.start(); System.out.println(""It worked!""); } Code in Class GUI:  panel1.add(button1a); button1a.addActionListener(new ActionListener() { public void actionPerformed (ActionEvent event) { Simulation.StartTimer(); } } ); The error Eclipse tells me there is is that for ""Simulation.timer.start();"" : Cannot make a static reference to the non-static method StartTimer() from the type Simulation. However the method StartTimer() cannot be static as this seems to break the timer... Any help would be very appreciated. How the actionPerformed gets sim? Sorry I accidentally posted part f the code incorrectly the actionPerformed now reads: Simulation.StartTimer(); Pass this as an argument to the GUI constructor. In general it is best to avoid such cyclic references. Both the GUI and Simulator become dependent upon one another. The essence of the solution is to separate out the GUI from the interesting domain-specific behaviour. (BTW: I would strongly avoid using static variables for anything other than constants. Also avoid non-private instance variables. But point for not extending JFrame!) There is some hideous boilerplate that you should add to prevent multithreading. public static void main(final String[] args) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { Simulation sim = new Simulation(); }}); } I apologise I made a mistake in the code I posted. The ""main constructor"" was actually a ""Simulation"" instructor. As such sim is itself a ""Simulation"" object so it couldn't be an argument for the GUI constructor I don't think...  What I would do is have your GUI class expose the button via a getButton() method then after creating the GUI object your Simulation class can add its own ActionListener to the button e.g. control.getButton().addActionListener(new ActionListener()... etc."
316,A,Is it possible to place the header row of a JViewport at the bottom? I'm using a JViewport for viewing some data and I'd like the header row to be placed at the bottom of the JViewport rather than the top. The viewport never scrolls horizontally so the issue of where the scroll bar would go isn't a problem. I suspect I'm going to have to make my own JViewport-like class which has the header row at the bottom; but before I go off and write that I thought I'd ask. You can use a panel with a BorderLayout. Add the table to the scrollpane then add the scrollpane to the center of the panel. Then get the header and add it to the south. Then get the vertical scrollbar and add it to the east.
317,A,"Java developer moving into Java Desktop development I've been writing Java web (JSF Struts JSR168) apps for a number of years. With the recent departure of a colleague it looks like I'm going to be building more client applications. I've used Eclipse since the beginning and I'm really comfortable with it. It feels as though SWT is waning (just an opinion based on literature I can find) and Swing is surging. My question: Is there value in learning Swing through writing apps by hand in Eclipse (as opposed to using Matisse in Netbeans)? Yes it is very valuable to learn coding Swing apps by hand. One reason for this is that no GUI-Designer I know always does the things you want them to do. The other - and in my opinion more important reason - is that most GUI builders (especially NetBeans') generate all and everything into one single class. This can be very annoying because the maintainability is reduced a lot (separation of concerns). Also many GUI builders have blocked regions i.e. you cannot modify the generated code by hand. Or if you do the GUI builder will overwrite it the next time you use it. However that standard LayoutManagers coming with Swing are very complicated. This is why I suggest that you give MigLayout or JGoodies FormLayout a try. On the JGoodies site you also find other libs for alternative Look&Feels Binding and Validation which can be very useful. I would also suggest that you have a look at the Presentation Model pattern (Martin Fowler) which helps a lot if you want to unit-test your GUI-behaviour. If you then are motivated to improve the design and add some very cool effects to your application check out the book Filthy Rich Clients. Hope it helps. I know but it is rather complicated imo. Does it support syntax highlighting / auto-completion? NetBeans' Matisse generates all into one single class only if you do it that way. I think it's better to make separate panels and then build the whole view from them. And the blocked regions - try to right click and select ""customize code"". You can write whatever into the blocked regions. Matisse is quite flexible you just have to use it in the right way :-)  Yes definitely - even if you plan on using Matisse most of the time you will benefit from having at least a reasonable understanding of the Swing code under the hood.  It sure will help. Maybe you'll reach the end of what Matisse can do and want to tweak some of the code by hand. At this point it will be better to know what happens under the hood.  Note that using Matisse and writing Swing by hand are not mutually exclusive at all. Matisse just produces Swing code and you can customize it. You can make part of your GUI with Matisse and the part next to it by hand for instance. Get the best of both worlds - that's how I do it at least. Fast way to learn how to do something in Swing is to do it in Matisse and then see the code it produced.  You definitively need to know how Swing works since you will most likely have to adapt and change things which the GUI prgram expects you to know how works and what it is called. The Java Tutorial has a good Swing trail: http://java.sun.com/docs/books/tutorial/uiswing/"
318,A,"In Java is there a way to obtain the component where an event is being handled? Suppose I have 4 squares colored blue white red and green (myComponent) associated with the mouse press event. At one point the mouse is pressed over one of them - say the yellow one - and the event is activated. Now the control flux is inside the event handling function. How do I get the MyComponent - the yellow square - that caused this from here? EDIT I have another question. Is there a way to tell the position of the component? My problem is a bit more complicated than what I said. Basically I have a grid full of squares. When I click one of the squares I have to know which one it is so I can update my matrix. The thing is if I calculate it myself it only works on a given resolution. I have a GridBagLayout and inside it are the myComponents. I have to know which one of the components exactly - like component[2][2] - caused the interruption. I mean I can tell which one of the components did it but not where in the matrix it is located. By adding a MouseListener (or alternatively a MouseAdapter if you don't need to override all the MouseListener' methods) to each of your colored boxes when an event such as a mouse click occurs the MouseListener will be called with a [MouseEvent`][3] which can be used to obtain the component that was clicked. For example: final MyBoxComponent blueBox = // ... Initialize blue box final MyBoxComponent whiteBox = // ... Initialize white box final MyBoxComponent redBox = // ... Initialize red box final MyBoxComponent greenBox = // ... Initialize green box MouseListener myListener = new MouseAdapter() { public void mouseClicked(MouseEvent e) { // Obtain the Object which caused the event. Object source = e.getSource(); if (source == blueBox) { System.out.println(""Blue box clicked""); } else if (source == whiteBox) { System.out.println(""White box clicked""); } // ... and so on. } }; blueBox.addMouseListener(myListener); whiteBox.addMouseListener(myListener); redBox.addMouseListener(myListener); greenBox.addMouseListener(myListener);  MouseEvent.getSource() returns the object on which the event initially occurred. I have a GridBagLayout and inside it are the myComponents. I have to know which one of the components exactly - like component[2][2] - caused the interruption. You could store the indices e.g. (22) inside each myComponent when you add them to the matrix. That way given the component you can always identify its position in the matrix. class MyComponent extends JButton { final int i; // matrix row final int j; // matrix col // constructor MyComponent(String text int i int j) { super(text); this.i = i; this.j = j; } ... }"
319,A,How to make a Swing application touchable? We developed a Swing GUI system running on PC and the boss wants it to run on a special tablet PC too. Does anyone know what else we can do to achieve it? How to make a Swing GUI support touch operation? The touch-support driver of the tablet PC is necessary of course. Most touch screens convert touches to mouse events. If yours does so as well you can simply use java.awt.event.MouseListener. Got it! Thank you !
320,A,"large virtual lists in Swing using AbstractListModel -- limit at 119000000 items? I've got my ""virtual list"" in swing working well but it seems to fail when I exceed some particular number of items. By ""fail"" I mean that the scroll bar magically vanishes when the number of items is > Nmax and it comes back when the number of items is <= Nmax; Nmax seems to be somewhere around 119304000 on my system. What am I running up against?!?! (Here's a test program: on my computer if I type in 119304 it works ok but I click the up arrow and the scroll bar disappears) package com.example.test; import java.awt.BorderLayout; import java.awt.Dimension; import javax.swing.AbstractListModel; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JList; import javax.swing.JPanel; import javax.swing.JScrollPane; import javax.swing.JSpinner; import javax.swing.SpinnerModel; import javax.swing.SpinnerNumberModel; import javax.swing.event.ChangeEvent; import javax.swing.event.ChangeListener; // based on: // http://www.java2s.com/Tutorial/Java/0240__Swing/extendsAbstractListModel.htm // http://www.java2s.com/Tutorial/Java/0240__Swing/SpinnerNumberModel.htm // http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/SpinnerNumberModel.html // http://www.java2s.com/Tutorial/Java/0240__Swing/ListeningforJSpinnerEventswithaChangeListener.htm // http://java.sun.com/products/jfc/tsc/tech_topics/jlist_1/jlist.html public class BigVirtualList extends JFrame { public static void main(String[] args) { new BigVirtualList(); } static final int initialLength = 1; final private JList list1 = new JList(); final private BVLData bvldata = new BVLData(initialLength*1000); public BigVirtualList() { this.setTitle(""Big virtual list""); this.getContentPane().setLayout(new BorderLayout()); this.setSize(new Dimension(400 300)); list1.setModel(bvldata); list1.setPrototypeCellValue(list1.getModel().getElementAt(0)); SpinnerModel model1 = new SpinnerNumberModel(initialLength110000001); final JSpinner spinner1 = new JSpinner(model1); this.getContentPane().add(new JScrollPane(list1) BorderLayout.CENTER); JLabel label1 = new JLabel(""Length (1000s of items):""); JPanel panel1 = new JPanel(new BorderLayout()); panel1.add(label1 BorderLayout.WEST); panel1.add(spinner1 BorderLayout.CENTER); this.getContentPane().add(panel1 BorderLayout.SOUTH); ChangeListener listener = new ChangeListener() { public void stateChanged(ChangeEvent e) { Integer newLength = (Integer)spinner1.getValue(); bvldata.setLength(newLength*1000); } }; spinner1.addChangeListener(listener); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setVisible(true); } } class BVLData extends AbstractListModel { public BVLData(int length) { this.length = length; } private int length; public int getLength() { return length; } public void setLength(int length) { int oldLength = getLength(); this.length = length; int newLength = getLength(); if (newLength > oldLength) fireIntervalAdded(this oldLength+1 newLength); else if (newLength < oldLength) fireIntervalRemoved(this newLength+1 oldLength); } @Override public Object getElementAt(int index) { return ""Item ""+index+"" mod 107 = ""+(index%107); } @Override public int getSize() { return getLength(); } } Out of curiosity why would you need a 119000000-item list? It's a virtual list the items aren't necessarily all actually stored. Or it could be a sparse list (e.g. with ""blank"" elements at most items but real items at elements 1-1000 and 12000000-12100000 and 207300000-207400000). I'm messing around w/ visualizing streams of data. Anyway the exact # isn't so much the point as I want to know what drives this limit -- maybe on some systems it's much lower say at 3000000. FYI my system also fails at the 119304/119305 barrier. Why do you prepend all method calls with ""this""? @James Van Huis: That's because the maximum size of Java ints on your system is also 2147483647. Which it had better be. @Steve Kuo: I adapted this program from an example the example used ""this"" in the way you're talking about. I can't really think of a reason to do so; member variables it makes sense to disambiguate. Well I don't see the purpose but anyway ... I guess you break the integer max value somewhere in the scroll pane: System.out.println(""CellHeight:""+list1.getFixedCellHeight()); System.out.println(""CellHeight*119304000:""+NumberFormat.getNumberInstance().format(list1.getFixedCellHeight()*119304000.0)); System.out.println(""MAXINT:""+Integer.MAX_VALUE); Gives you the numbers:  CellHeight:18 CellHeight*119304000:2.147.472.000 MAXINT:2.147.483.647 As you can see adding another 18000 pixel in height will go beyond MAXINT ... this gets you in trouble. +1: I was coming to the same conclusion. 2^31 / 18 ~= 119304647. Ah! That makes sense. So the list actually tries to render items as if it were a very large canvas each item in their proper place? +1: I just added the line ""list1.setFixedCellHeight(10);"" and now it goes to 214748. Most probably the list does not render all items on a virtual canvas. I guess the scroll bar bounds will be set to 0...maxheight. If the height exceeds the positive integer max value it overflows to the negative and the scroll bar is ""no longer needed"" So if I implemented a scrollbar that used long rather than int it would work? (I'm looking at ways to navigate among large datasets & knowing these limits is sortof important... the scrollbar doesn't work too well to move accurately. reminds me of struggling w/ microfiche viewers.) Well I think reimplementing a scroll bar using long might be possible (or do the scroll management yourself use a scrollbar and a factor). I would try to think of other possibilities to navigate since its not really usable with a scrollbar anyway yeah maybe a pair of scrollbars (coarse+fine ""zoom"") and a spinner for random-access."
321,A,"Which Swing component methods are thread safe? According to Swing tutorial: Some Swing component methods are labelled ""thread safe"" in the API specification; these can be safely invoked from any thread. All other Swing component methods must be invoked from the event dispatch thread. Programs that ignore this rule may function correctly most of the time but are subject to unpredictable errors that are difficult to reproduce. But what are these Swing component methods that are labelled ""thread safe""? Are there actually any? Update / bounty: Is there a complete list of thread-safe swing methods? (The thread-safe Swing methods seems to be quite rare so such list can't be too long...) absolutely agree it is a very interesting question! I just wouldn't want anyone to come away with the impression that this is the best approach :-) The question suggests to me that you are trying to do manipulate a Swing GUI from more than one thread? If so you might want to rethink your design as it should always be possible to ensure that all the Swing interactions only happen from one thread as long as you handle offloading of work to other threads correctly e.g. with some form of work queue. If you do this you won't need to worry about Swing thread safety.... @mikera: Thread confinement is of course used with Swing normally. But there indeed are a few thread safe exceptions so it's interesting to be aware of them. For a list of classes with the comment in the javadocs & src files ""is thread safe"" returns the following JEditorPane JTextArea AbstractDocument DefaultCaret DefaultStyledDocument JTextComponent PlainDocument StyleContext HTMLDocument UndoManager This is not saying that there are others documented or undocumented within the src that are thread safe. It strikes me as a rather strange question but I would treat most components as not being threadsafe and since Swing is a single threaded model and all updates need to happen on the event dispatcher thread this is pretty easy to do.  Google taught me that at least those are threadsafe. Here's an overview for the case that the link get broken again: JTextPane replaceSelection() insertComponent() insertIcon() setLogicalStyle() setCharacterAttributes() setParagraphAttributes() JTextArea insert() append() replaceRange() JTextComponent replaceSelection() setText() print() getPrintable() UndoManager All methods. DefaultStyledDocument insert() setLogicalStyle() setCharacterAttributes() setParagraphAttributes() StyleContext addAttribute() addAttributes() removeAttribute() removeAttributes() reclaim() AbstractDocument render() remove() insertString() createPosition() PlainDocument insertString() HTMLDocument setParagraphAttributes() -1: Link returns no results for me. Should point to http://www.google.com/search?q=%22is+thread+safe%22+site%3Ahttp%3A%2F%2Fjava.sun.com%2Fjavase%2F6%2Fdocs%2Fapi%2Fjavax%2Fswing#sclient=psy&hl=en&q=%22is+thread+safe%22+site:http%3A%2F%2Fdownload.oracle.com%2Fjavase%2F6%2Fdocs%2Fapi%2Fjavax%2Fswing&aq=f&aqi=&aql=&oq=&gs_rfai=&pbx=1&fp=e64ee6e4e8056c32 instead. @Gili: I fixed the link. Just substitute the old `java.sun.com` URL by the about half-year old `download.oracle.com`. Instead of downvoting you could also just edit the answer. The bad link was namely completely unintentional. Oh setText is thread safe on JTextComponent stuff. That's interesting :) Means that in a lot of cases I don't have to use the EDT anymore. I wonder however if you use an unofficial LAF does it remain thread-safe? Some of the info is outdated. `JTextArea.append` is no longer thread safe in java 7. @Jarekczek: I've added a Java 7 update [here](http://stackoverflow.com/a/15979112/230513). Thanks I should learn to construct better non-trivial (?) Google queries :-) You're welcome. Here's an useful link anyway: http://www.googleguide.com/using_advanced_operators.html  But what are these Swing component methods that are labelled ""thread safe""? Most Swing components' methods are NOT thread safe. But some are. To find out which ones you have no option but to peruse the javadocs for your target components. A carefully constructed google search might quicken the process. Are there actually any? Yes there are indeed. Generally speaking if you are working with Swing components it is likely that you are going to have to invoke both thread-safe and non-thread-safe methods. Since most methods are non-thread-safe I prefer to err on the side of caution and perform all actions on them in a thread-safe manner anyway. HTH Not exhaustive list. DefaultStyledDocument: protected void insert(int offset DefaultStyledDocument.ElementSpec[] data) throws BadLocationException public void setLogicalStyle(int pos Style s) public void setCharacterAttributes(int offset int length AttributeSet s boolean replace) public void setParagraphAttributes(int offset int length AttributeSet s boolean replace) javax.swing.text.AbstractDocument: public void render(Runnable r) public void remove(int offs int len) throws BadLocationException public void insertString(int offs String str AttributeSet a) throws BadLocationException public Position createPosition(int offs) throws BadLocationException javax.swing.undo.UndoManager: Class is threadsafe Wew. nice everyone! that's a great info for me. since now i'm trying to do work in SWING. :D You stole my link. @BalusC Did not! Consider the fact that it takes a couple of minutes to type an answer before you jump to conclusions.  But you already have the answer: only those methods which are specifically documented as being thread-safe in the method JavaDoc are threadsafe! this is from JTextComponent.setText  * This method is thread safe although most Swing methods * are not. Please see * <A HREF=""http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html"">How * to Use Threads</A> for more information. If the method documentation doesn't say it's safe then it isn't safe: access to the JavaDoc is therefore critical when coding against Swing There are also methods which are not documented to be thread safe but which can be called from other threads. At least that's what I think. E.g. the `dispose()` method in the java.awt.Window class can be called by any thread because the method itself creates a runnable which is sent to the EDT. Sure you might argue that `dispose()` is a AWT method and not a Swing method but it's used often enough in Swing to be worth mentioning. Yes it's the implicit answer but it still isn't a list of thread safe methods. You asked ""are there any"" and I provided an example. Um.  In Java 7 previously thread safe methods of the view components rooted in JTextComponent are no longer thread safe. A typical workaround using EventQueue.invokeLater() is shown here. The remaining model-related methods listed here remain thread safe. JTextComponent replaceSelection() setText() print() getPrintable() JTextPane replaceSelection() insertComponent() insertIcon() setLogicalStyle() setCharacterAttributes() setParagraphAttributes() JTextArea insert() append() replaceRange() @kleopatra: I can't disagree—it's confusing! I was looking for a common thread (no pun intended:-) and it appears to be the view components that were affected. Rather than pre-empt the [original answer](http://stackoverflow.com/a/1796687/230513) I chose to focus in the list of potential upward migration headaches as the ones needing review. hmm ... why? Just looked at methods of JTextComponent the first two don't guarantee being thread safe and the printing related methods are blocking the calling thread. Afair (didn't re-check) nowadays nothing is thread-safe except repaint and revalidate (which guarantee to post the request onto the EDT if necessary) ohh ... maybe I misread your intention: it's kind of the old list minus the methods listed here? If so it might be less confusing (to me at least :) to list the methods that are still documented to be thread safe."
322,A,"Is there a tool or framework to Generate a CRUD UI in Swing? I am looking for a tool/framework to (automatically) generate a Swing user interface to perform CRUD operations on an underlying database. I would also like to configure the database fields that should be exposed. Something like django (via modelforms) or ruby on rails features but in a Java desktop environment. Have a look at tools like: MetaWidget http://www.metawidget.org/ ISIS http://incubator.apache.org/isis/index.html (previously Naked Objects) They generate UI's ""on-the-fly"" but allow you to customise the UI when necessary. Much better than code generation.  I'm using Netbeans (latest). I guess it's far from Django (haven't tried it but as far as I understand it is kind of rails/symfony-like) but it does reverse engineer the database and give you a basic application including a master/detail view.  NetBeans does seem like an obvious answer. These guys make a NetBeans plugin that does just that: http://www.morelisland.com/java_services/netbeans_tutorial/midbmetadata_se.htm I've heard jgoodies does something similar: http://www.jgoodies.com/products/index.html And more specifically their sub-project Binding: https://binding.dev.java.net/ I know less about the SwingLabs databinding project but it looks worth looking into: https://databinding.dev.java.net/ Thank you lets see if other people send alternative approaches before setting your answer as accepted."
323,A,"Changing default JLabel font How would I go about setting the default font for all JLabel instances. Instead of setting the font for each JLabel independently. Is this what you are looking for? import java.awt.FlowLayout; import java.awt.Font; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.UIManager; public class LabelFont { public static void main(String[] args) { Font oldLabelFont = UIManager.getFont(""Label.font""); UIManager.put(""Label.font"" oldLabelFont.deriveFont(Font.PLAIN)); JFrame f = new JFrame(""LabelFont Test""); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.getContentPane().setLayout(new FlowLayout()); JLabel df = new JLabel(""Default JLabel font""); f.getContentPane().add(df); JLabel ef = new JLabel(""Font explicitly set""); ef.setFont(oldLabelFont); f.getContentPane().add(ef); f.pack(); f.setVisible(true); } }  Use UIManager to define JLabel's default font: import java.awt.FlowLayout; import java.awt.Font; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.UIManager; public class LabelFont { public static void main(String[] args) { Font oldLabelFont = UIManager.getFont(""Label.font""); UIManager.put(""Label.font"" oldLabelFont.deriveFont(Font.PLAIN)); JFrame f = new JFrame(""LabelFont Test""); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.getContentPane().setLayout(new FlowLayout()); JLabel df = new JLabel(""Default JLabel font""); f.getContentPane().add(df); JLabel ef = new JLabel(""Font explicitly set""); ef.setFont(oldLabelFont); f.getContentPane().add(ef); f.pack(); f.setVisible(true); } } Via: http://coding.derkeiler.com/Archive/Java/comp.lang.java.help/2005-04/msg00395.html i'm confused a bit. I tried to follow the same procedure as you all gusy doing. Using UIManager and then putting new JLabel.font properties with another Font type but it seems uneffected on my pc. Is there something wrong with this UIManager? :) Thanks a bunch."
324,A,Image panel not repainted unless on system events A friend of mine asked me to help him with Swing and I reached a point where I can't solve an issue. So first I have an ImagePanel public class ImagePanel extends JPanel { private Image img; public void setImage(String img) { setImage(new ImageIcon(img).getImage()); } public void setImage(Image img) { int width = this.getWidth(); int height = (int) (((double) img.getHeight(null) / img.getWidth(null)) * width); this.img = img.getScaledInstance(width height Image.SCALE_SMOOTH); } @Override public void paintComponent(Graphics g) { g.drawImage(img 0 0 null); } } And a FileChooser which should open the selected image into the ImagePanel. It simply calls setImage of the ImagePanel. But the image is not painted. No combinations of repatint validate and invalidate help. However the image is painted when the JFrame is resized (using the mouse). So the question is - what method is called on resizing (using the mouse) which makes the ImagePanel to be repainted successfully. do you set up a JFrame at all? And if you do can you post the code for that? The JFrame is generated by NetBeans so I found it odd to paste generated code. The ImagePanel is added to the JFrame of course. Calling the repaint method (documentation link) will cause the panel to be repainted. This leads to an underlying call to paint which is what is also causing the JPanel to paint when you resize it. and when I manually call repaint to either or both the JFrame and the Image panel nothing happens. Are you repeatedly calling setImage along with the resize or is setImage only called once and then the window is resized? Maybe you could post some more of your code.  Setting the image and painting it as you are in your code doesn't change the actual size of the component. Depending on the layout and setup of the containing frame a few different things may be happening - your ImagePanel may be initially of size 0x0 and so doesn't display until you enlarge the frame and more space is allocated to the ImagePanel; or the ImagePanel is manually sized to a large size that doesn't fit within the starting size of the JFrame in this case the ImagePanel may not be displayed until enough size is available after resizing. Thanks. There was initially the resizing code but I removed it in my attempts. Now combined with Davon's answer it works. I wish I had two green ticks :)  IconImage is using MediaTracker to load the image asynchronously. At the point where you're calling repaint invalidate etc the image has not finished loading. In your paintComponent replace  g.drawImage(img 0 0 null); with  g.drawImage(img 0 0 this); The Component class has an implementation of ImageObserver that will call repaint when the image has finished loading.
325,A,"How to change background color of the selected item in JList dynamically How can I change the background color of the item which is selected in JList dynamically? Something like the following should help as a starting point: public class SelectedListCellRenderer extends DefaultListCellRenderer { @Override public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { Component c = super.getListCellRendererComponent(list value index isSelected cellHasFocus); if (isSelected) { c.setBackground(Color.RED); } return c; } } // During the JList initialisation... jlist1.setCellRenderer(new SelectedListCellRenderer());  If I am clearly understanding you look into javax.swing.ListCellRenderer. You need to reimplement it or extend javax.swing.DefaultListCellRenderer and customize the getListCellRendererComponent method.  An easier way would be to go to design mode in Eclipse and in the properties of your JList click on the button that has two small arrows with a big yellow arrow inbetween to open up ""show advanced properties."" then scroll down and change the color where it says ""selectionBackground"" and change the color there (it will probably be gray but it will still change). Now when you run your program whatever you select the background will be that color."
326,A,"Can findComponentAt() work before a JComponent is painted? I am working on a GUI where the JComponents are ""stamped"" on the screen. In other words the actual components aren't displayed but images of the components. This is a graph where the nodes of the graph are custom Swing components - or rather stamped images of Swing components. Now I want to display tooltips for specific components within my nodes. To do this I create a JComponent that is identical to the one displayed and using the mouse x and y values I ask findComponentAt() for the proper component. This doesn't work very well. If I reuse JComponents for the nodes it gets confused if I try to get a tooltip for a node that is a different size than the last one painted. If I create a new JComponent for each node and a new one when calculating the tooltip the initial size of the new one is 00. I can set the size using the getPreferredSize() calculation but that still doesn't work. The root JComponent (a JPanel) has the right size but none of it's children have any size yet. A sample of the tooltip calculation code: // Get a component that matches the stamped component JComponent nodeComponent = getNodeComponent(); // These next two lines get the size right nodeComponent.setSize(nodeComponent.getPreferredSize()); nodeComponent.revalidate(); Component componentTop = nodeComponent.findComponentAt(relativeX relativeY); componentTop comes back as the root JComponent no matter what x and y values it is passed. So is it possible to get Swing to properly calculate the size and locations of the JComponents without actually painting them? You have images of your components in the graph they have to have their sizes to be able to paint correctly. To find your ""stamp"" you should walk backwards (in z-order) in your graph and find the first image your mouse position fall into. Preferred sizes will not work you should rely on size of ""stamps"" i think. The problem isn't with finding the correct node. I have that. The problem is getting the child component within the node. I want different tooltips in the same node depending on whether the mouse is over a label or image.  I found the answer myself. The key problem is that Swing doesn't want to layout a component unless that component has a proper parent. So I changed my code to this:  parentComponent.add(nodeComponent); // Set the node's size and validate it so it's laid out properly nodeComponent.setBounds((int)realizer.getX() (int)realizer.getY() (int)realizer.getWidth() (int)realizer.getHeight()); nodeComponent.validate(); // Now we can properly find the child component under our mouse Component componentTop = nodeComponent.findComponentAt(relativeX relativeY); // Now remove it from the view parentComponent.remove(nodeComponent); And that works like a charm. You should be able to use a similar process to find child components in JLists or JTables (which also use this Renderer pattern)."
327,A,"JTable Won't Show On JPanel Hi I have created a Jtable and can get it to show on my frame yet not on the JPanel I have ontop of my JFrame. I can't seem to change import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.io.*; import java.util.ArrayList; import java.util.Comparator; import javax.swing.*; import javax.swing.table.*; public class Main { DefaultTableModel table_model; String[][] addressData = new String[10][5]; JPanel panel; JFrame frame; JButton loadData; int countindexrow =0; String thisLine; ArrayList People = new ArrayList(); public Main() { //Creating JFrame and setting properties frame = new JFrame(); frame.setResizable(false); frame.setTitle(""Address Book""); frame.setSize(800600); frame.setDefaultCloseOperation(frame.EXIT_ON_CLOSE); //Creating JPanel and setting properties panel = new JPanel(); panel.setLayout(null); panel.setBackground(new Color(778184)); //Setting the table and Scroll Bars this.table_model = new DefaultTableModel(addressData new String[]{""First Name"" ""Surname"" ""Home Number"" ""Mobile Number"" ""Address"" ""Postcode""}); JTable table = new JTable(this.table_model); table.setBounds(130 40 200 200); panel.add(new JScrollPane(table JScrollPane.VERTICAL_SCROLLBAR_ALWAYS JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS)); //Load Data button reading file in and adding data to ArrayList then Array of Arrays loadData = new JButton(""Load File""); loadData.setBounds(10 10 100 20); loadData.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { BufferedReader reader = new BufferedReader(new FileReader(""file/address.buab"")); while ((thisLine = reader.readLine()) !=null) { if (row >= 4) { index++; row = 0; People.add(thisLine); addressData[index][row] = People.get(count); count++; row++; } else { People.add(thisLine); addressData[index][row] = People.get(count); count++; row++; } } reader.close(); } catch (IOException ex) { System.err.println(""Input Exception Check address.buab File""); } } }); panel.add(loadData); //Auto sort on table fields TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(this.table_model); sorter.setComparator(1 new Comparator<Integer>() { public int compare(Integer o1 Integer o2) { return o1.compareTo(o2); } public boolean equals(Object obj) { return obj.equals(this); } }); table.setRowSorter(sorter); frame.getContentPane().add(panel); frame.setVisible(true); } public static void main(String[] args) { new Main(); } } Any ideas on how I might go about setting the table visible ontop of my JPanel A wild guess:  panel.setLayout(null); Try this instead:  panel.setLayout(new BorderLayout()); And later:  panel.add(loadData BorderLayout.SOUTH) // e.g. for the button // e.g. for the table panel.add(new JScrollPane(table .....)) BorderLayout.CENTER)  You need to create your JPanel with a specific layout manager and then add components (the JTable and JButton) with appropriate constraints to cause them to appear in the correct area of the panel. Currently you are setting the panel's layout manager to null which is almost certainly incorrect. You may want to check out the Using Layout Managers tutorial. One simple layout manager to consider is BorderLayout. For example: // Create JPanel with BorderLayout layout manager. JPanel panel = new JPanel(new BorderLayout()); // Add JTable to panel center. This component will expand // to take up available space. panel.add(myTableScrollPane BorderLayout.CENTER); // Add button to the bottom of the panel. panel.add(myButton BorderLayout.SOUTH);"
328,A,"What is the most useful type of java.awt.image.BufferedImage for off-screen rendering? I am creating a buffered image that is going to be a snapshot of a JComponent (via paint()) and rendered inside an ImageIcon. There are a large amount of types in the BufferedImage(int width int height int imageType) constructor but which one should I use? I am sure that any of them would work but which ones are better than the others? How should I pick one? And Why? I think the question as it stands now is perfectly constructive. Heck the answer answered the question I came here with! I reworked it to better fit the best answer which points to an API that you should use. See GraphicsConfiguration.createCompatibleImage(int int) for a helper to create a BufferedImage of a ""good"" type among the many available types. How to get your hands on a GraphicsConfiguration instance to make this call? It depends on where your code is executing. See the many methods for getting your hands on a GraphicsConfiguration via methods like getGraphicsConfiguration() or getDeviceConfiguration(). This is the easiest way `GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration().createCompatibleImage(width height);` If you only had a code snippet instead of a javadoc link you would so get the answer. and don't forget to fromat it properly by putting in four spaces in the front. be careful iterating over graphics configurations. depending on your hardware some of those methods take several seconds the first time. yes what is X? No check mark with such unsure code snippets. I will have to live forever without the sweet sweet feeling of this particular check mark. Oh what might have been..."
329,A,"JTable + TableModel cache fetch event for lazy instantiation? Scenario: you are using a JTable with a custom TableModel to view the contents of some collection located in a database or on the network or whatever. The brute force way to make this work is to load the whole collection at once. Let's say that isn't practical because of the resources needed. The simple way around that problem is to fetch rows on demand one row at a time as the JTable renders each row and calls TableModel.getValueAt(); cache as necessary. This causes a lot of hits to the database though. Is there a way to listen to scroll/viewport events for a JTable to figure out what rows it is going to display before it renders each cell? If so I would like to intercept and cause my custom TableModel to prefetch one page at a time. edit: just to clarify the point here is to be able to fetch the contents of a group of visible table rows in one batch rather than having to fetch the contents of each row by itself. In order to keep the model-view as 1-n relation i think it is best to not query the viewport but just rely on the actual requests performed on the model. it will be no faster to check the viewport yourself. returning 'null' for the not-filled cells is no problem since when your actual bulk of data comes in from the back-end you can just generate tableRow events. and the jtable will refresh again. You could reset a timer at every model.getValue() request. and as soon as the timer fires(say 10ms) retrieve records which were queried in one bulk request. In effect that is exactly what JTable allows. afaik if the getRowCount() method reflects exactly how many records there are then when the cells are painted only the visible part is queried. I don't think prefetching by listening on the viewport would be any faster. you could wait for all getvalue requests. record those return ""null"" or the already cached value. then after a getvalue isn't called for say 20 ms do the actual request for all the recorded cells. and fire rowUpdated events on the model so JTable repaints again. [edit]You could maintain a list of the last records queried on the model. your list doesn't need to be any longer than the amount of rows visible on the screen. after getValue() isn't queried for a few ms you could perform this async bulk request to the back-end The only catch here is the sorting/filtering algorithm. When you query the viewport and let the data depend on that then there is a 1-1 relation between your data and the view. Something which JTable itself doesn't have. But i guess there is no way around that. I would enable the IDE debugger to dig through sun code. and then see how their rendering implementation finds out which rows to repaint. i don't know by heart.  Take a look at http://www.javaworld.com/javaworld/javatips/jw-javatip137.html article. In this article there is a custom TableModel that is able to retrieve ""chunks"" of rows from the database Another solution to the scenario although is not exactly what you are looking for would be lazy load each row instead of prefetch. See my own post (search google for ""JTable bound to a database with lazy loading"") on how to do it. The idea is that when the tablemodel is asked for a row that is not cached/loaded it will return ""wait..retrieving"" string for each column (assuming that all columns are strings). and at the same time it will schedule a task in another thread (using an ExecutorService). Then the task will retrieve the data from the database and update the datamodel. In my post I actually used Beans bindings so instead of a custom tablemodel y used a custom list. But I'm sure you can extrapolate the idea."
330,A,"scala override methods in child object of class New to scala and can't seem to find a reference on this situation. I'm trying to override some methods on scala.swing.TabbedPane.pages: The definition of this class is: class TabbedPane extends Component with Publisher { object pages extends BufferWrapper[Page] { def += } } I can't figure out the syntax for overriding any method in the internal pages object. Is this possible with scala? Thanks. EDIT: To make this question clearer. class CloseableTabbedPane extends TabbedPane{ } val pane = new CloseableTabbedPane; pane.pages += new CloseablePage; I need to override the method pane.pages += to accept a CloseablePage with an icon. Yes - this is just the kind of thing I was thinking about the Swing implementation - it's incomplete; you'd have to patch the existing class to allow `Page` to have a defined icon and just use that. Did you try putting the override keyword in front of the def in object pages? In the normal case of overriding a method in a class: scala> class Foo { def foo : String = ""Foo"" } defined class Foo scala> class Bar extends Foo { override def foo : String = ""Bar"" } defined class Bar scala> val b = new Bar b: Bar = Bar@1d2bb9f scala> b.foo res0: String = Bar However you've asked as to whether it is possible to override an object: scala> class FooBar { | object prop extends Foo { | def foo2 : String = ""foo2"" | } | } defined class FooBar scala> val fb = new FooBar fb: FooBar = FooBar@183d59c scala> fb.prop.foo res1: String = Foo Now for the override: scala> fb.prop.foo2 res2: String = foo2 scala> class FooBaz extends FooBar { | override object prop extends Bar { | def foo2 : String = ""bar2"" | } | } <console>:8: error: overriding object prop in class FooBar of type object FooBaz.this.prop; object prop cannot be used here - classes and objects cannot be overridden override object prop extends Bar { ^ It doesn't really make sense as how could you ensure that the overridden value also extended Foo? overriding a normal class method isn't what the question is sorry if I didn't make it clearer. It's overriding a method that exists inside the object ""pages"" that exists inside the class TabbedPane. Changed answer now Well I'd agree that it doesn't make sense but I'm wondering why would anyone make an API like this since it's so difficult to override functionality. Perhaps there is an easier way to do what I'm trying to accomplish?"
331,A,"How to securely trigger a Swing-Action in a restricted applet? I simply want to call a swing action from my own popup menu. But since there is a security manager I need a solution to invoke this action without calling it directly. For instance the paste action of a text component will fail because sun.swing.SwingUtilities2 cannot be loaded if there is any of my classes in the call stack. Is there any way to enqueue an event to the event thread? JComponent.dispatchEvent doesn't do the job because it processes the event itself. Short answer: you can't without signing the applet. Long answer: If you could without permissions you could queue all kind of interesting messages. Your example paste or in long form: have access to something the client has copied before is an action the client needs to know about and authorize. Think about a rouge applet monitoring the clipboard ""pasting"" everything and sending it over the wire to a remote server. Your PIN for example. The solution is to sign your applet thereby telling the client ""It is in (your name here) responsibility that this applet is not evil."" and asking the user if he/she believes you. If yes the security manager will no longer block you. If not - well the user distrusts you why should the JVM do otherwise? See http://java.sun.com/developer/onlineTraining/Programming/JDCBook/signed.html"
332,A,"How to get rid of the flicker that appears during my animation? I'm learning Java by making a small game in a JApplet. I got a little problem with my sprite's animation. Here is the code : this.sprite.setBounds(002017); this.sprite.setIcon(this.rangerDown); for(int i = 0; i< 16;i++) { this.sprite.setBounds(this.sprite.getX() this.sprite.getY()+1 20 17); this.sprite.update(this.sprite.getGraphics()); try{ Thread.currentThread().sleep(100); }catch(InterruptedException e){ } } It left some flicker during the animation. Once the animation end the flicker disappears but it's kind of ugly... I guess there is some step I missed. I use this method because it gives the better result for now but I would like to stay without AWT if possible using Swing instead. Any ideas how to get rid of the flicker? Thanks for reading. Screenshoot (Can't post images sorry). The problem is double buffering. In Applets: Double buffering is done almost automatically. Call repaint() instead of paint in your method. In Swing there are many ways to do it. I usually go for the BufferStrategy route. When you're initializing your frame do this: JFrame frame; ... code to init frame here frame.createBufferStrategy(2); Then in your draw methods: Graphics g = getBufferStrategy().getDrawGraphics(); ..code to do drawing here... g.dispose(); getBufferStrategy().show(); If I change ""this.sprite.update(this.sprite.getGraphics());"" to ""this.sprite.repaint()"" there is no animation : only the last position's sprite is visible. I believe the repaint() method is only truly used when the program got nothing else to do. However I did see that solution elsewhere so I probably don't use the repaint() method correctly. It is in a JApplet I never used JFrame (isn't getContentPane() the JFrame's remplacement in JApplets ?). Well I use update() because it gives the best result but I would like to stay with Swing as much as possible.  This is not a shadow. Its the border of your sprite. It just happens to be black and appears as a shadow. If you change the amount you shift your sprite (lets say by 50 pixels not just 1) you will see what i mean. To fix it what you need to do is to draw the background as well each time you update the location of your sprite. Although this will probably produce flickering. The correct way to do it is to change the way you draw your objects. You need to override the paintComponent method of your panel and then simply call repaint each time you have updated the locations of your sprites. EDIT: See this code sample for basic usage. NOTE: This is NOT how you should write animation using Threads. I wrote that to show you what goes in the paintComponent method and wrote the animation Thread to show you that the ""shadow"" you mentioned is gone. NEVER have a non ending run loop in a thread :) import java.awt.Color; import java.awt.Graphics; import java.awt.Graphics2D; import javax.swing.JFrame; import javax.swing.JPanel; public class Test { public static void main(String[] args) { JFrame f = new JFrame(""Test""); MyPanel c = new MyPanel(); f.getContentPane().add(c); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.setSize(350 100); f.setVisible(true); } } class MyPanel extends JPanel { int x = 0; boolean toTheRight = true; public MyPanel() { new Thread(new Runnable() { @Override public void run() { while (true) { x = (toTheRight)?x+5:x-5; if (x>300) toTheRight = false; if (x<0) toTheRight = true; repaint(); try { Thread.sleep(50); } catch (InterruptedException e) { e.printStackTrace(); } } } }).start(); } @Override protected void paintComponent(Graphics g) { Graphics2D g2 = (Graphics2D)g.create(); g2.setPaint(Color.white); g2.fillRect(0 0 getWidth() getHeight()); g2.setPaint(Color.red); g2.fillOval(x-2 50 4 4); } } hehe true. :) forgot about that... Thanks for the answer. Is there a way to do it with Swing ? It seems quite a complex method for a simple thing. This is the default way to draw custom things on panels with swing. You override paintComponent which provides you with a Graphics object which you can safely cast to a Graphics2D object and do your thing. This method ensures also that your drawing will be double buffered so you wont have to worry about flickering. Ok the word 'flickering' let me find infos on Google. I'll continue to search for a simple solution. Thanks again. you might also want to show you appreciation by upvoting the answer along accepting it :P :P :P I can't : 15 rep' needed. Sorry."
333,A,"JInternalFrame and Keybinding How do I bind a function key say(F11 etc) to a JInternalFrame so it can activate a particular action. I tried with the following  this.getInputMap().put(KeyStroke.getKeyStroke(""F11"") new AbstractAction() { public void actionPerformed(ActionEvent e) { System.out.println(""Called""); } }); but it never gets called? Or please suggest how to activate a button inside a JInternalFrame using function key. Thanks Azlam Well focus is never on the internal frame itself focus is on a component on the internal frame. So you should probably be adding the binding by using internalFrame.getRootPane().... You may also need to use ""WHEN_ANCESTOR_OF_FOCUSED_COMPONENT"" input map. The blog entry on Key Bindings explains this in more detail."
334,A,"Find composite location on screen I am implementing a on screen keyboard in Java for SWT and AWT. One important thing is to move the keyboard to a position where the selected text field can show and is not lying behind the on screen keyboard. For AWT i can detect the position of the current selected component with Component owner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner(); if (owner == null) { return; } Point ownerLocation = owner.getLocationOnScreen(); Dimension ownerSize = owner.getSize(); How can i implement the same logic in SWT? I get the current selected widget by adding a focuslistener to the SWT event queue. But when i call Point location = new Point(mTextWidget.getLocation().x mTextWidget.getLocation().y); Dimension dimension = new Dimension(mTextWidget.getSize().x mTextWidget.getSize().y); I will get the position relativ to the parent composite. How can i get the location of a special widget relativ to the complete screen? I believe the method Control.toDisplay() should be able to translate your coordinates into ones relative to the screen. This snippet may illustrate what you are after: package org.eclipse.jface.snippets; import org.eclipse.swt.SWT; import org.eclipse.swt.events.SelectionAdapter; import org.eclipse.swt.events.SelectionEvent; import org.eclipse.swt.graphics.Rectangle; import org.eclipse.swt.widgets.Button; import org.eclipse.swt.widgets.Display; import org.eclipse.swt.widgets.Shell; import org.eclipse.swt.widgets.Text; public class Bla { public static void main(String[] args) { Display display = new Display(); Shell shell = new Shell(display); final Text t = new Text(shellSWT.BORDER); t.setBounds(new Rectangle(101020030)); System.err.println(t.toDisplay(1 1)); Button b = new Button(shellSWT.PUSH); b.setText(""Show size""); b.setBounds(new Rectangle(2201010020)); b.addSelectionListener(new SelectionAdapter() { public void widgetSelected(SelectionEvent e) { System.err.println(t.toDisplay(1 1)); } }); shell.open(); while (!shell.isDisposed()) { if (!display.readAndDispatch()) display.sleep(); } display.dispose(); } } @VonC: omg didn't realise that;) well sadly SWT/RCP still lives on through RAP. I'm longing for JavaFX as a desktop/web client crossover framework though... works perfectly thanks for bringing up toDisplay()! It will also accept a Point which is handy when translating component locations. I used it to translate event coordinates during a Drag&Drop session: composite.toDisplay(composite.getLocation()) @Gregor Nice to know this answer is still helpful... more than 5 years later. Perfect this is what im looking for. thanks @Mario: You are welcome. Glad I could help. Thank you buddy! Your answer brought an end to a morning of pain."
335,A,"Fire mouse event on underlying components I'm looking for a way to pass mouse events to components covered by other components. To illustrate what I mean here's a sample code. It contains two JLabels one is twice smaller and entirely covered with a bigger label. If you mouse over the labels only the bigger one fires mouseEntered event however. import java.awt.Color; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.WindowConstants; import javax.swing.border.LineBorder; public class MouseEvtTest extends JFrame { public MouseEvtTest() { setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); setLayout(null); setSize(250 250); MouseAdapter listener = new MouseAdapter() { @Override public void mouseEntered(MouseEvent e) { System.out.printf(""Mouse entered %s label%n"" e.getComponent().getName()); } }; LineBorder border = new LineBorder(Color.BLACK); JLabel smallLabel = new JLabel(); smallLabel.setName(""small""); smallLabel.setSize(100 100); smallLabel.setBorder(border); smallLabel.addMouseListener(listener); add(smallLabel); JLabel bigLabel = new JLabel(); bigLabel.setName(""big""); bigLabel.setBorder(border); bigLabel.setSize(200 200); bigLabel.addMouseListener(listener); add(bigLabel 0); //Add to the front } public static void main(String[] args) { new MouseEvtTest().setVisible(true); } } What would be the best way to fire mouse entered event on the smaller label when cursor is moved to the coordinates above it? How would it work in case where there would be multiple components stacked on top of each other? What about the remaining mouse events like mouseClicked mousePressed mouseReleased etc.? This is just a sample code. The real deal has an invisible panel over a collection of other components. The panel at the top performs various tasks based on different conditions. For example if shift is held then you can grab and move the whole component with the components beneath. Since it would be difficult (and irrelevant) to explain all the details of the real life scenario I figured this illustrates the problem rather well. In addition this might not be the best way to do it but I don't have the possibility to rewrite the component (mainly because of the time). I'm sorry but I just have to ask - why would you want to do this? It does not seem like a very intuitive thing to do and that usually means a maintenance problem. Take a look at Alexander Potochkin's blog entry on A Well-Behaved GlassPane The article proposes very nice solution. Thanks this helped me with a cursor problem I had with validation overlays using the JLayeredPane!  In your listener: bigLabel.dispatchEvent(mouseEvent); Of course you will have to define bigLabel as final Thanks! By far the better answer!  Well to understand whats happening you need to understand how Z-Ordering works. As a quick overview the component that was added last is painted first. So in your case you want to add the small component before the big component. // add(bigLabel 0); //Add to the front add(bigLabel); // add to the end so it is painted first The OverlayLayout might help explain this better and give you another option. It may seem silly in the example code to do it like that but it replicates my real scenario quite closely. I added the big label to the top on purpose so to cover the small label entirely. Then you would be responsible for writing hit detection code your self which means that when a mouse event is received on your big label you will need to loop through all the other Components in the panel and use the contains(...) method to see if the mouse point is in the bounds of the component. If so then you would need to create a new MouseEvent and dispatch it to that component as described above."
336,A,"Capturing the close tab event of a JTabbedPanel in Java Swing Is it possible to capture the close tab event for a JTabbedPanel in Java Swing. I want to check for some conditions and if they are not met then I have to prevent the user from closing it. Thanks! Update: I created a custom event based on this code and it solved my problem. I created a custom event based on this code and it solved my problem.  Sun's tutorial on Tabbed Panes has an example with close buttons on each tab. If you look a the source of the example you can see it reacting to the close clicked. Edit: ButtonTabComponent. It has an inner class that extends JButton. Based on your comment do you already have something in place that closes Tabs? What are you doing to achieve this? I checked out this tutorial. But I couldn't find the place whether it captures the close event. See edit for direct link to the source and an additional question for clarification. There is not ""close event"". The code to close the tab is in the ActionListener that was added to the close button on the tab If you don't want to close the tab when the close icon is clicked then add your code to the ActionListener."
337,A,how can install swing/matisse on eclipse? i tried this link: http://downloads.myeclipseide.com/downloads/products/eworkbench/discovery-6.0/ but i'm fail how is this? The link is broken. http://www.eclipse.org/vep/downloads/ is this better than swing/matisse As mentioned in downloads.myeclipseide.com Direct access to the MyEclipse download area is not permitted. Please go through the MyEclipse portal's download area to download MyEclipse Enterprise Workbench. So you can load a full myeclipse distro but not one plugin into a vanilla eclipse. Aside from that the revived Eclipse VE (Visual Editor) (archived since June 2011 now archive as a sourceforge project) might be a good alternative You can install it with Eclipse 3.5 Does VE work with the Helios release of Eclipse ? Thanks. I will try it on my Helios Eclipse. @Abhinav: I haven't tested the VE plugin in an Helios Eclipse yet but the [update page](http://wiki.eclipse.org/VE/Update) has been edited 2 days ago without mentioning any incompatibility so there is hope. @amphibient no I don't. This could be a question in itself. apparently not: http://stackoverflow.com/questions/260574/matisse-in-eclipse @VonC do you know if it is possible to get Matisse for regular Eclipse not MyEclipse?
338,A,"Default font for Swing text Does the text in Swing components have a default font? In particular what about tab labels on JTabbedPanes? I'm working on a mock-up of a GUI made with Swing and want it to blend it with a screen image I grabbed of a Swing app. It depends on the Look and Feel. If it's an application you've written get the values from UIManager.getDefaults().getFont(""TabbedPane.font"") How do you determine the appropriate keys for other swing components? Yes thanks that worked although you forgot a pair of parentheses: UIManager.getDefaults().getFont(""TabbedPane.font"") It turned out to be Arial Bold as I thought (for what it's worth).  Based on the answer of Reverend Gonzo this piece of code lets you know what keys are in the UIDefaults. As the keys are self-explanatory you know what key you can use. I had to know the key for the JTextField font for example and could only find it this way. Set<Object> keys = UIManager.getDefaults().keySet(); for (Object key : keys) { if (key instanceof String && ((String) key).contains(""font"")) { System.out.println(key + ""="" + UIManager.getDefaults().get(key)); } } If you're looking for a font in your case just cast the key to a String and check whether it contains the word ""font"". This way you narrow the set of keys you have potential interest for. I got a list Menu.font=... TextField.font=... RadioButtonMenuItem.font=... ToolTip.font=... TitledBorder.font=... ... TabbedPane.font=... ... And thus you would need to pick TabbedPane.font.  The Java GUI default font is ""Helvetica"" bold size 9 color gray. that's wrong in its absoluteness: as others already correcty answered fonts depend on LAFs and/or OS setting  It may depend on the 'Look and Feel' you are using but for me Swing's default font is DejaVu Sans - Plain For most components the font size defaults to around 12 or 13  It looks like it's Arial. That's what Identifont tells me and it looks right.  The UIManager Defaults shows what the values are for all properties for all components (including ""TabbedPane.font"")."
339,A,"Making a JOptionPane with 4 options I need to make a custom dialog with 4 options but as far as I can tell you can only have one with three options. Here is how I would make an option pane with 3 options:  Frame refFrame = DialogUtils.getReferenceFrame(); ///TODO: /// - Use DialogUtils int option = JOptionPane.showOptionDialog(refFrame msg rsc.str(""918"") JOptionPane.YES_NO_CANCEL_OPTION JOptionPane.INFORMATION_MESSAGE DialogUtils.INFO_ICON options options[0]); But I could not find some sort of open ended substitution for YES_NO_CANCEL_OPTION. Is there a way to make the JOptionPane allow four choices? You can use any of the JOptionPane's option constants you just need to supply a options array of size 4: public static void main(String[] args) { String[] options = new String[] {""Yes"" ""No"" ""Maybe"" ""Cancel""}; int response = JOptionPane.showOptionDialog(null ""Message"" ""Title"" JOptionPane.DEFAULT_OPTION JOptionPane.PLAIN_MESSAGE null options options[0]); // Where response == 0 for Yes 1 for No 2 for Maybe and -1 or 3 for Escape/Cancel. }  Simply use an options array of size 4 instead of 3...  How about reading the JOptionPane API where you will find a link to the Swing tutorial with a working example?"
340,A,Is there a way to set the delay time of tooltips being displayed on a particular component in java swing? I'm trying to set tooltips on a JEditorPane. The problem is that the method which I use to determine what tooltip text to show is fairly CPU intensive - and so I would like to only show it after the mouse has stopped for a short amount of time - say 1 second. I know I can use :- ToolTipManager.sharedInstance().setInitialDelay() however this will set the delay time for tooltips on all swing components at once and I don't want this. Does anyone have an idea how you could do this? Thanks What do you do present in the tooltip which cannot be computed in a background thread? Some sample code may be helpful. I could perhaps give an example of what I'm talking about. I want to change the content of the tooltip depending on what word the user is hovering over. The task of populating the contents of the tooltip is quite expensive so I only want to perform that computation if the user has stalled over a word. Right now I'm using the MouseMotionListener and I'm changing the tooltip contents in the mouseMoved() handler. I suppose what you are suggesting is that I fire off a thread to work out the tooltip contents and then display that when its ready Added some more info based on your input in my answer. Glad to help ! Well I would recommend doing the CPU intensive task on another thread so it doesn't interrupt normal GUI tasks. That would be a better solution. (instead of trying to circumvent the problem) *Edit* You could possibly calculate the tootips for every word in the JEditorPane and store them in a Map. Then all you would have to do is access the tootip out of the Map if it changes. Ideally people won't be moving the mouse and typing at the same time. So you can calculate the tootlips when the text changes and just pull them from the Map on mouseMoved(). Your edit is a very good suggestion. I'm not sure if it will work because it is actually a debugger I am working on and so the values that are put in the map are subject to change - it's a great idea though. I think your suggestion of computing the value in a thread is good too. Yes I agree - some form of caching the answer as the mouse moves and retrieving it when the user stops could solve my problem. I will give it a try tomorrow - I'll set your answer to accepted. Thanks for your help.  If what you want is to make the tooltip dismiss delay much longer for a specific component then this is a nice hack: (kudos to tech at http://tech.chitgoks.com/2010/05/31/disable-tooltip-delay-in-java-swing/) private int defaultDismissTimeout = ToolTipManager.sharedInstance().getDismissDelay(); addMouseListener(new MouseAdapter() { public void mouseEntered(MouseEvent me) { ToolTipManager.sharedInstance().setDismissDelay(60000); } public void mouseExited(MouseEvent me) { ToolTipManager.sharedInstance().setDismissDelay(defaultDismissTimeout); } }); +1 but I made a change. I took getting the default timeout outside of `mouseEntered()` because it has the potential to screw things up if you're setting defaultDismissTimeout multiple times (what if the user has multiple components side by side where they've changed the timeout? They could lose the default timeout entirely by moving from one to another.) Ideally it seems the defaultDismissTimeout should go someplace global to ensure it's set just once at the initialization of the entire application. @ArtOfWarfare In the linked blog defaultDismissTimeout was marked as final which I suppose is how they got around the multiple setting. @BuhBuh - I edited the answer here to take the defaultDismissTimeout outside of the listener but in the actual code I wrote based on this answer I decided to make it a static final variable for my component. If you'd like to see the actual values that are default take a look at lines 85-91 here: http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/javax/swing/ToolTipManager.java  You can show the popup yourself. Listen for mouseMoved() events start/stop the timer and then show popup with the following code: First you need PopupFactory Popup and ToolTip: private PopupFactory popupFactory = PopupFactory.getSharedInstance(); private Popup popup; private JToolTip toolTip = jEditorPane.createToolTip(); then to show or hide the toolTip: private void showToolTip(MouseEvent e) { toolTip.setTipText(...); int x = e.getXOnScreen(); int y = e.getYOnScreen(); popup = popupFactory.getPopup(jEditorPane toolTip x y); popup.show(); } private void hideToolTip() { if (popup != null) popup.hide(); } This will give you adjustable delay and a lot of troubles :) I haven't looked at this thread for a long time but I like your suggestion. I never got a chance to finish this project so I will be trying this again soon. I will give your idea a shot :) In my case if you hover above an icon at the start of the status bar a tooltip pops up with the past 'n' messages. As long as you keep the mouse within the tooltip bounds it stays. But I wanted to control all timing aspects without changing the global tooltip timings. In my opinion your solution seems like a much better alternative than the accepted answer but hey its only my two cents? Thanks for this solution Piligrim I'll be trying it very shortly!
341,A,"Access a new frames methods This method shows a new window in my application: public void ShowNewCustomerView() { if (NewCustomer == null) NewCustomer = new NewCustomerView(this); NewCustomer.setVisible(true); } The class NewCustomerView has this method: public void ClearFields() { txtAddress.setText(""""); txtCity.setText(""""); txtCompanyName.setText(""""); txtCustomerNumber.setText(""""); txtOrganisationNumber.setText(""""); txtPhoneNumber1.setText(""""); txtPhoneNumber2.setText(""""); txtPostalCode.setText(""""); txtReferenceName.setText(""""); } How can I run that method before the line: NewCustomer.setVisible(true); Adding this: NewCustomer.ClearFields(); ...does not work... why is that? This is what error I get: Cannot find symbol (method ClearFields()) Class: javax.Swing.JFrame But I created a new instance of NewCustomerView which extends JFrame?? Right? How is it not working? Is there text content in those fields? Updated post see why above... Sorry for racing with edits thought to make one small edit at the same time as you - SO apparently doesn't check concurrent edits... From your comments I think you declare NewCustomer like this: JFrame NewCustomer; If so try declaring: NewCustomerView NewCustomer; or public void ShowNewCustomerView() { if (NewCustomer == null) NewCustomer = new NewCustomerView(this); ((NewCustomerView)NewCustomer).ClearFields(); NewCustomer.setVisible(true); } That worked I had declared it as a JFrame thank you!  It sounds like your defining your new Frame as: JFrame frame = new NewCustomerView(); Instead you should be doing: NewCustomerView frame = NewCustomerView();  The following error message is a hint as to what is going on: Cannot find symbol (method ClearFields()) Class: javax.Swing.JFrame What the message is saying is that there is a call to the ClearFields method on a JFrame object. This makes sense as there is no ClearFields method on the JFrame object. What this seems to indicate is that the NewCustomerView object is being declared as a JFrame rather than a NewCustomerView. I'm going to guess the line which declares the NewCustomer object is written like this: JFrame NewCustomer = new NewCustomerView(); What that is doing is to handle the new NewCustomerView object as a JFrame -- therefore when trying to call the ClearFields method one is trying to call the JFrame.ClearFields method which doesn't exist. Try the following instead so the object that is being declared is handled as a NewCustomerView object: NewCustomerView NewCustomer = new NewCustomerView(); Also as a note in Java variable names are written with a lower-case letter followed by uppercase letter for each word boundary for example in the above example NewCustomer would be written newCustomer."
342,A,"HTML JTextPane newline support I'm using a JTextPane to edit HTML. When I enter newlines in the GUI component and call getText() on the JTextPane I get a string with newline characters. If I then create a new JTextPane and pass that same text in the newlines are ignored. Why doesn't JTextPane insert a <br> tag when a newline is entered? Is there a good workaround for this?  JTextPane test = new JTextPane(); test.setPreferredSize(new Dimension(300 300)); test.setContentType(""text/html""); test.setText(""Try entering some newline characters.""); JOptionPane.showMessageDialog(null test); String testText = test.getText(); System.out.println(""Got text: "" + testText); // try again test.setText(testText); JOptionPane.showMessageDialog(null test); testText = test.getText(); System.out.println(""Got text: "" + testText); Sample output: <html> <head> </head> <body> Try entering some newline characters. What gives? </body> </html> I realize I could convert newlines to HTML line breaks before calling setText but that would convert the newlines after the HTML and BODY tags as well and seems dumb. It looks like the HTMLWriter class eats the new line and doesn't read it or translate it to HTML (see line 483 in HTMLWriter). I don't see an easy way around this since it appears to be hard coded to be checking for '\n.' You might be able to set the DefaultEditorKit.EndOfLineStringProperty property of the JTextPane's document (via getDocument().putProperty) to <br> and then override setText to replace ""\n"" with <br>. Though that will do what you suggested and add breaks between html head and body tags as well so you might want to do the replacement only in the body tags. It doesn't appear there is a very straight forward way to do this.  I've resolved this the problem was the plain text I was passing in in setText. If I take out the call to setText the result of JTextPane.getText() is nicely formatted HTML with line breaks correctly encoded. I believe when I call JTextPane.setText(""Try entering some newline characters"") it sets the HTMLDocument.documentProperties.__EndOfLine__ to ""\n"". This document property constant is defined here. The solution is to make sure you wrap your text in <p> tags when passing it to the JTextPane.setText() method (note the style attribute is used for any subsequent paragraphs): textPane1.setText(""<p style=\""margin-top: 0\"">Try entering some newline characters</p>""); Or after you pass in plain text replace the EndOfLineStringProperty (this is more of a hack I wouldn't recommend it): textPane1.getDocument().putProperty(DefaultEditorKit.EndOfLineStringProperty ""<br/>\n"")  I struggled with this one for half a day. This is still broken in Java 7. The problem is keeping the new line entered by the user into the JEditorPane (for HTML content type). I was only able to retain the new line in HTML when I added a marker key ""\r"" at the user's entered ""\n"" (still need ""\n"" to display new line in editor) and then replaced that with a ""\n<br/>"" when I pulled the whole content out and placed in a different JEditorPane or whatever as desired HTML. I only tested this on Windows. ((AbstractDocument) jEditorPane.getDocument()).setDocumentFilter(new HtmlLineBreakDocumentFilter()); // appears to only affect user keystrokes - not getText() and setText() as claimed public class HtmlLineBreakDocumentFilter extends DocumentFilter { public void insertString(DocumentFilter.FilterBypass fb int offs String str AttributeSet a) throws BadLocationException { super.insertString(fb offs str.replaceAll(""\n"" ""\n\r"") a); // works } public void replace(FilterBypass fb int offs int length String str AttributeSet a) throws BadLocationException { super.replace(fb offs length str.replaceAll(""\n"" ""\n\r"") a); // works } } String str = jEditorPane.getText().replaceAll(""\r"" ""<br/>""); // works jEditorPane2.setText(str); What's your desired output from getText()? What are you getting?"
343,A,"Changing Font Size and leaving space between button in a JOptionPane The text in my JOptionPanes are way to small I was wondering how I could change the font of the text inside the pane. Also I would like to be set a space between two buttons. Something like  |Canecl| |DoneSave| |Save| I guess you mean the fonts on your JButtons inside the JOptionPane are too small. For that I suggest using Swing Utils by Darryl Burke. Now you can easily do e.g. for (JButton button : SwingUtils.getDescendantsOfType(JButton.class pane)) { button.setFont(new Font(""Verdana"" Font.BOLD 32)); } to set the fonts on all JButtons inside of JOptionPane pane. If you want to set the font of the JOptionPane message itself use e.g. UIManager.put( ""OptionPane.messageFont"" new FontUIResource(new Font(""Verdana"" Font.BOLD 32)) ); In regard to the ""spacing of buttons"" question: I don't know if that can be done without extending & make a customized JOptionPane yourself. Thank You very much!"
344,A,Java Swing: change background color on mouse over I've implemented a simple mouse listener where the background color changes whenever the mouse enters the component (a JPanel) and it reverts back whenever the mouse leaves. This has some problems: Sometimes the mouse moves so quick that the mouseExit event is not fired If my component has childs when the mouse moves to the childs it triggers the mouseExit If I move the mouse over to the childs quickly the mouseEnter event is not fired I'm guessing this is an easy one for Swing veterans. Any suggestions on how to fix this? I'd love not to use timers and such... After trying various approaches on a container without success I ended up using a Timer. It didn't help that my container contained elements that already needed mouse listeners on them. The timer approach also meant that I could delay the change for a short time. (In my case I show additional buttons in a tree node (a container) as well as changing the background.) On a mouseEntered() on the container a Timer is created (if not there already) which repeats every 260 milliseconds. On each call of the Timer it determines whether the mouse is inside the container. If so on the first time it signals mouse-over. If not it signals non-mouse-over and stops the timer. In Scala this is as follows where the method call to entryExit() encodes whether the mouse is over or not (where multiple calls with the same value have no affect): abstract class MouseInterpreter(component: JComponent) extends MouseAdapter { ... private var mouseOverAction: () => Unit = () => {} private var mouseOverTimer: Option[Timer] = None ... def entryExit(entered: Boolean) // this is an abstract method override def mouseEntered(e: MouseEvent) { if (mouseOverTimer.isEmpty) { val aTimer = new Timer(260 new ActionListener { def actionPerformed(e: ActionEvent) { mouseOverAction() } }) mouseOverTimer = Some(aTimer) mouseOverAction = () => { mouseOverAction = () => { val point = MouseInfo.getPointerInfo.getLocation SwingUtilities.convertPointFromScreen(point component) if (component.getVisibleRect.contains(point)) entryExit(entered = true) else { entryExit(entered = false) aTimer.stop() mouseOverTimer = None mouseOverAction = () => {} } } } aTimer.setRepeats(true) aTimer.start() } } ... }  I can't reproduce this behavior. Please edit your question to provide a short code sample that demonstrates the problem. When I create a JPanel and put something in it the JPanel does not get mouseExit when the mouse moves over a child component of the JPanel. I'm guessing that you've added MouseListeners to the children. Yes you are right. I tried adding mouse listeners to the children.  If I move the mouse over to the childs quickly the mouseEnter event is not fired I've never seen this to happen but if it is an issue then you can handle mouseMoved instead to reset the background. If my component has childs when the mouse moves to the childs it triggers the mouseExit Use the following test and the code will only be executed when you leave the components bounds: public void mouseExited(MouseEvent e) { if (! getVisibleRect().contains(e.getPoint()) ) { setBackground(...); } } If you move the pointer from outside to a contained child (with a mouse listener) then a mouse listener on the parent container will not get fired. Move it slowly over a border region and it will. I've used a mix of your technique and Tom Hawtin's. Unfortunately only one of you can get the right answer. Thanks all.  There are a number of solutions: Add mouse listeners to the child components. Also container listeners to add and remove listeners as components are added and removed. Unfortunately adding mouse listeners upset bubbling up of mouse events (hideous design). Add a glass pane over the top. This is mighty ugly and forwarding of events always causes problems. Add an AWTEventListener to the default Toolkit and filter through for the events you are interested in. This unfortunately requires a security permission. Push a custom EventQueue and filter events. This requires a security permission put applets and WebStart/JNLP applications get that permission anyway. I've tried the glass pane with no avail. Can I apply glass panes to simple JPanels? I thought you could only apply that to JFrames. Since I have multiple JPanels I really need to apply the glass pane to each one of them.
345,A,"Reset/remove a border in Swing Here's a very specific coding question: I've recently been asked to maintain some old-ish Java Swing GUI code at work and ran into this problem: I've attached my own subclass of InputVerifier called MyFilenameVerifier to a JTextField (but it may as well be any JComponent for these purposes). I've overridden the verify() method such that it calls super.verify(input) (where input is the JComponent parameter to verify()). If super.verify(input) comes back false I do: input.setBorder(BorderFactory.createLineBorder(Color.RED)); This is a convention used throughout the UI of this application that started long before me so I don't have a lot of choice as far as using other ways to get the users attention (wish I did). This is just the way it works. Problem is once the user goes back and types something valid into the text field I need a way to set it back to default border (instead of just saying set it to Color.GRAY or whatever which is a different color from its original border). I need a way to say ""remove the extra decoration and go back to normal"" or just set the border to its default in other words. Not sure how your system is build but I think you can store the original border before changing it. So you can change it back later // assuming the Border was not null before if (!super.verify(input)) { original = input.getBorder(); input.setBorder(...); } else { if (original != null) { input.setBorder(original); original = null; // not needed } }  input.getBorder() Wouldn't it be awesome if no one ever saw this and I got away free without the ass-beating I deserve for asking this question?  Another possibility if there are only a few input widgets you need this for is to subclass e.g. JTextField add setBorderOverride() and modify getBorder() to return ""overriddingBorder"" if it is not null. Then you just use setBorderOverride(redBorder) to make it red and setBorderOverride(null) to clear it. This of course depends on the painting to use getBorder() which it may or may not do and which may be implementation specific.  Incidentally you only need a single static reference to the border-- it's the selfsame border instance used by all JTextFields.  Or without caching anything you could tell the JComponent to update its UI back to the look and feel's defaults via component.updateUI. That should make the component reset its colors borders fonts etc to match the original settings. Just so anyone that would like to use this approach knows - it works only you have to call `component.setBorder(null)` before calling `component.updateUI()` interesting. maybe it also requires invalidate/validate/paint? that's what it looks like SwingUtilities.updateComponentTreeUI(c) does. I like this approach better but it didn't work for me. This code sets it to red border fine but then leaves it there even after calling updateUI(). if(super.verify(input)) input.updateUI(); else input.setBorder(redBorder); Going with the less graceful caching option for this one I guess  You need to preserve the existing border when you change it. One way to do this is to use the methods putClientProperty() and getClientProperty() which you'll find documented in the API.  Couldn't you just call input.getBorder() and cache it somewhere before setting the border to red? Yes I could which I almost immediately realized after asking the question. For reason I did not see getBorder() in the API spec even though it's clearly there. I need a break. Why save something you can compute though? Make the Look and Feel do the work for you."
346,A,"Override JComponent.getBaselineResizeBehavior() but keep Java5 compatibility For my Swing project I need to support both Java 5 and Java 6. I have defined a custom JComponent (call it Picture) and after embedding it in a JScrollPane I put it in a JPanel that uses DesignGridLayout manager. DesignGridLayout supports baseline alignment thanks to swing-layout open source library (implements baseline support for Java 5 and provides compatibility with the new Java 6 baseline support). My Picture class overrides public int getBaseline(int width int height) so that I can define a correct baseline for it. Note that ""override"" is not completely correct: it overrides the method on Java6 but defines it in Java5. When I run my sample app on Java5 everything is fine: the Picture baseline I have defined is correctly used. However when I use Java6 my Picture#getBaseline() method does not get called! And of course the baseline alignment of my picture is terrible (centered). After checking in Java6 source I have seen that in BasicScrollPaneUI getBaseline() calls first getBaselineResizeBehavior() on the viewport component (my Picture instance). And it will call getBaseline() only if getBaselineResizeBehavior() returns Component.BaselineResizeBehavior.CONSTANT_ASCENT. Now my problem is that getBaselineResizeBehavior() is a Java6 method of JComponent that I cannot implement in Java5 because it returns an enum Component.BaselineResizeBehavior which does not exist in Java5. So my question (finally) is: how can I implement (or simulate?) getBaselineResizeBehavior() so that my class can still compile and run in a Java5 environment? Actually what would be nice to have in javac is ""conditional compilation"" (like in C/C++). Conditional compilation is not great - you then need two distributions. Reflection works much better for this (I have done it many times) - see my answer. Conditional compilation would be great if it was part of the language but that is another debate... Maybe AOP could help on that one (but I would like to avoid a heavy solution with heavy dependencies just for this ""little"" problem. I think that the return type is not treated as part of the a method signature in resolving virtual functions and overloads; it might be that you can define your ""overriding"" method to return Object and reflect out the return Enum per my first answer. Since you're compiling in J5 it won't be a compile time conflict but the JVM should still choose your method to override... It might or it might throw a runtime exception. Still it's worth a try. For example: public Object getBaselineResizeBehavior() { Object ret; // reflect out the return value return ret; } Any error handling can be System.out purely for debugging since this will not be invoked unless you are J6 so the reflection correctly coded should always work if invoked. And I would of course comment this method to make it very clear what's going on. Ah well - that's too bad. No better idea has occurred to me sorry this wasn't any help. Thanks a lot I'll give it a try tonight and report back here Unfortunately this approach does not work it compiles fine (with Java5) but when run under Java6 my method never gets called: it looks it is not recognized as overriding Component#getBaselineResizeBehavior(); the JVM probably checks the return type and thus calls the super-class method.  I would make a subclass of Picture perhaps called PictureJava6 which implemented the getBaselineResizeBehaviour() and when creating instances of Picture do: public Component pictureFactory() { if(javaVersion > ""1.6"") { return new PictureJava6(); } else { return new Picture(); } } Well the PictureJava6-class will obviously not compile without the java-6 library present. And it is reasonable (maybe not required?) that you need target=1.5 to be backward compatible so I don't think you can get around this in any other way than making two separate versions compiled separately. Well although I don't like this method much this is probably the only way to get what I want although it requires me to compile with JDK6 (and target=1.5). I have just checked it it works. Thanks!  how can I implement (or simulate?) getBaselineResizeBehavior() so that my class can still compile and run in a Java5 environment? You cannot compile this method declaration with the Java 5 library because the type Component.BaselineResizeBehaviour does not exist: public Component.BaselineResizeBehavior getBaselineResizeBehavior() You must compile using Java 6. Your classes can still run on Java 5 if you compile to a 1.5 target but you must take care that they handle absent types/methods gracefully. Add tests for these cases as you encounter them. Ensure developers attempt to run their code on Java 5 prior to check-in. For example this class... public class MyPanel extends javax.swing.JPanel { public java.awt.Component.BaselineResizeBehavior getBaselineResizeBehavior() { return java.awt.Component.BaselineResizeBehavior.OTHER; } public static void main(String[] args) { new MyPanel(); System.out.println(""OK""); } } ...can be compiled and run as follows using the javac JDK compiler: X:\fallback>javac -version javac 1.6.0_05 X:\fallback>javac -target 1.5 MyPanel.java X:\fallback>""C:\Program Files\Java\jre1.5.0_10\bin\java.exe"" -cp . MyPanel OK All the popular IDEs offer options for generating older class versions. You can use reflection to test for the existence of methods/types at runtime when you need to make decisions about code paths. Failure to set the target will result in errors like this: Exception in thread ""main"" java.lang.UnsupportedClassVersionError: Bad version n umber in .class file at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(Unknown Source) at java.security.SecureClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.access$100(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClassInternal(Unknown Source) Unfortunate - combining this compile target approach with a Factory producer is probably the right way to go; unless you want to get into plugin mechanisms. Interesting but it only partly answers the problem: I cannot compile it with Java5 I need Java6 with target 1.5. Actually it doesn't work when using swing-layout.jar library: swing-layout uses reflection to find getBaseline() method but to do so it loops through all methods of the class by calling Class.getMethods() which throws a NoClassDefFoundException due to the getBaselineResizeBehavior() method!  You can use reflection to try to get the CONSTANT_ASCENT return value by name. If it can't be reflected you are J5 otherwise J6. This side-steps the explicit dependency and allows compilation to J5. Foll. is an example of doing this for dialog modality: try { Field fld=Class.forName(""java.awt.Dialog$ModalExclusionType"").getField(""TOOLKIT_EXCLUDE""); Method mth=getClass().getMethod(""setModalExclusionType""new Class[]{fld.getType()}); mth.invoke(thisnew Object[]{fld.get(null)}); } catch(Throwable thr) { log.errorln(""Unable to configure window to be unaffected by modal dialogs - dialogs may need to be closed to operate help.""); log.errorln(""Use Java 6 or later to avoid modal dialogs conflicting with the help system.""); log.errorln(""Exception: ""+thr); } UPDATE: I originally posted code with the J5 code commented out; I've changed that because I realized it confuses the issue by implying that the J5 code would not work in J6 - it does."
347,A,"Merging cells in JTable Is it possible to merge some cells of a JTable object? If it's not possible through JTable what is the best approach. Thanks. You could implement a JTable using a TableModel merging two columns of the original TableModel. class Model2 extends AbstractTableModel { private TableModel delegate; public Model2(TableModel delegate) { this.delegate= delegate; } public int getRowCount() { return this.delegate.getRowCount();} public int getColumnCount() { return this.delegate.getColumnCount()-1;} public Object getValueAt(int row int col) { if(col==0) return """"+delegate.getValueAt(rowcol)+delegate.getValueAt(rowcol+1); return delegate.getValueAt(col+1); } (...) } I said merging 'cells' not columns.  Not out-of-the-box. Here is an example that supports merging arbitrarty cells. This page has several examples of tables with spanning cells. Of course it's old and you get what you pay for. If paid software is an option JIDE Grids has some really nice Swing table support including custom cell spans. 3 out of 4 of those URLs are 404. :("
348,A,"Problems running Swing application with IDEA 8M1 Is anyone else having trouble running Swing applications from IntelliJ IDEA 8 Milestone 1? Even the simplest application of showing an empty JFrame seems to crash the JVM. I don't get a stack trace or anything it looks like the JVM itself crashes and Windows shows me a pop-up that says the usual ""This process is no longer responding"" message. Console applications work fine and my Swing code works fine when launching from Netbeans or from the command line. I'm running Windows Vista x64 with the JDK 1.6 Update 10 beta which may be a configuration the Jetbrains guys haven't run into yet. Ask your question directly on the IDEA website. They always react fast and the problem you have is probably either fixed or documented.  I have actually experienced problems from using the JDK 6u10 beta myself and had to downgrade to JDK 6u7 for the time being. This solved some of my problems with among other things swing. Also i have been running IJ8M1 since the 'release' and I am very satisfied with it especially if you regard the ""beta"" tag. It feels snappier and also supports multiple cores which makes my development machine rejoice. ;p Anyway i use WinXP32 and IJ8M1 with JDK 6u7 and that is afaik very stable indeed. By the way JDK 6u10 became stable today i will check it out and so should you! ;)  IDEA 8 Milestone 1 is a beta(ish) ""based on a new platform"". This may have changed the way that swing is handled. Also you are running a beta JDK. You will probably get more help/submit a bug at the Jetbrain forums unless they are on SO also. Here is the bug tracker link"
349,A,"Do any Java GUI builders exist that do not require external JAR's? I am looking for a Java GUI building tool that generates the Java Swing code for me. I'm planning on using it to get all of the Frame/Panel code created quickly and then customize everything by hand after that. It would be nice to be able to choose between different layout managers but it's not necessarily required. The most important part the tool can't require any .jar files to be placed in my project (this isn't allowed for the project I'm working on.) I agree with Carl Netbeans. By default when Netbeans creates a Java Desktop Application (swing) it wants to include some other jars. (At least it does for me) appframework-x.x.x.jar swing-worker-x.x.jar Just start from a generic Java Application then add the GUI classes manually. This will result in a project with no dependencies. +1 thanks for the info If you can get away with this it's your best bet. Just make sure this meets the spirit of the ""no jars"" requirement though. Often this is a corporate/government paranoia about licensing in which case just lifting the classes and/or source code would still be a no-no.  Way back when I used JVider to lay out my screens. It's not nearly as complete or complex as NetBeans but it does allow you to quickly and comfortably lay out screens using GridBagLayout. What I like about it is that it generates source code and has no runtime requirements. There is a runtime option that will allow you to load your UI from XML files it generates rather than generating classes but you don't have to use it. My process back then was to have JVider generate source classes. Then I would create a subclass and add all the event logic data binding etc. to that subclass. This would allow me to tweak the UI files and regenerate without losing any of my logic. Nowadays I'd typically use NetBeans but if I had a ""no external jars/classes allowed"" requirement JVider might be my first choice again. Good luck!  NetBeans will build pure Swing apps for you as will a number of other tools. In fact as far as I know that's the rule rather than the exception. Just ask for a Swing app and you'll have pure Java (in most cases). cool thanks. I'm trying NetBeans right now. @Steve ok I'll try that. You can convert your comment into an answer if you want and I'll upvote it."
350,A,"What is the use of AccessibleContext in Java Swing? I've seen a lot of examples which use getAccessibleContext().setAccessibleDescription(...) to set some ""magic"" description. What is the use of this description? Where can it be seen and how should it support accessibility? Why setDescription(...) is not used? Additionally what is your opinion / experience with Java accessibility stuff? I haven't actually used Swing's accessibility facilities in my applications (and I probably should) but I presume that it will aid in the use of screen readers and other technologies which to improve the accessibility of an application. From the Accessibility and the Swing Set article: If an application fully supports the Java Accessibility API it can be compatible with and friendly toward screen readers screen magnifiers and other kinds of assistive technologies. The linked article goes in to some depth about the accessibility features of Swing and the Accessibily API. Thank you I haven's thought of screen readers and further third-party apps.  As pointed out the accessible information is used to expose information to assistive technologies such as screen readers (in short as a blind computer user I use a screen reader to gather useful information about what control has focus and other useful things happening in a application and then for it to speak it out to me. Examples of screen readers are NVDA www.nvda-project.org for windows Orca http://live.gnome.org/Orca for the gnome desktop on unix platforms and voiceover included by default in MacOSX). For a number of standard controls which contain text you may be able to get away without having to explicitly set accessible information (eg. if you have a button with the text word ""OK"" then this probably will be spoken fine by a screen reader. The importance of setting accessible information comes in when you have no text showing (eg. a button with a graphic label) or when you are developing a custom control (from memory without going back through some of the Java swing docs I think the accessible name is to identify the control and accessible description is to provide extra information may be a clue as how to use it if its a custom control). Now if you wish to see how this works NVDA and Orca are opensource projects and voiceover is included in MacOSX 10.4 (I think) and higher so you can try one of these at no cost (unlike some of the commercial offerings which can be very expensive)."
351,A,"managing parent frame from child frame on java swing I have a jframe (parent) which creates an input frame (child) where I get some parameter. In the ""child"" frame I have ""ok"" and ""cancel"" buttons. When ""ok"" button is pressed the parent frame needs to be updated with new data. What is the best way to do that?? You could have the JFrame implement ActionListener and add it to the button using addActionListener.  I like to put a 'launch()' method on all my frames / dialogs. With the right modality it can return a result. Example of return value from dialog: private static class MyDialog extends JDialog { String result; private JButton btnOk = new JButton(""OK""); public MyDialog() { setDefaultCloseOperation(DISPOSE_ON_CLOSE); setModalityType(ModalityType.APPLICATION_MODAL); add(btnOk); btnOk.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { result = ""Ok""; setVisible(false); } }); } public String launch() { result = ""Cancel""; pack(); setVisible(true); return result; } }  Pass in a reference to the parent frame when you create (or display) the child frame. This will require an overloaded constructor or display method. Once the child has the reference it can of course call any method that the parent exposes as public like UpdateDate() Thank you so much.Solved my issue :) this I the solution I'm using there is no cleanest way?  As of Java 1.3 public class MyPanel extends JPanel { public MyPanel() { .... JButton cancelButton = new JButton(""Cancel""); cancelButton.addActionListener( new ActionListener() { public void actionPerformed(ActionEvent e) { // <<<< HERE'S THE INTERESTING BIT >>>> javax.swing.SwingUtilities.getWindowAncestor(MyPanel.this).dispose(); } } ); add(cancelButton); ..... } }"
352,A,"Automated tests for Java Swing GUIs What options are there for building automated tests for GUIs written in Java Swing? I'd like to test some GUIs which have been written using the NetBeans Swing GUI Builder so something that works without requiring special tampering of the code under test would be ideal. related question: http://stackoverflow.com/questions/79891/what-is-the-best-testing-tool-for-swing-based-applications Sikuli: a GUI-tester using screenshots http://sikuli.org/  You can try to use Cucumber and Swinger for writing functional acceptance tests in plain english for Swing GUI applications. Swinger uses Netbeans' Jemmy library under the hood to drive the app. Cucumber allows you to write tests like this:  Scenario: Dialog manipulation Given the frame ""SwingSet"" is visible And the frame ""SwingSet"" is the container When I click the menu ""File/About"" Then I should see the dialog ""About Swing!"" Given the dialog ""About Swing!"" is the container When I click the button ""OK"" Then I should not see the dialog ""About Swing!"" Take a look at this Swinger video demo to see it in action. Videolink is broken.  I haven't used it personally but SwingUnit looks quite good. You can use it with jUnit and it isn't based on ""location of components"" (i.e. x and y co-ordinates). The only thing you may have to do with the NetBeans GUI Builder is set unique names for your components.  I'm currently using FEST. It works with JUnit and will also take screenshots of failed tests. It has default component hunting methods which look for the name of the component being tested (which need to be set manually) but you can also generate the testers for a given component by passing it the component. It moves in GitHub from [this post](http://fest.easytesting.org/archives/167). Fest swing is not being developed any more. It does not support java 7 either. Seems like the swing part of fest is totally dead!  I use java.awt.Robot. Is not nice is not easy but works every time. Pros: You are in control Very fast Build your own FWK Portable No external dependencies Cons: No nice GUI to build test You have to leave the GUI alone while you test Build your own FWK Difficult to change test code and create your first harness Now if you have the budget I would go for LoadRunner. Best in class. (Disclosure: relationship to the company that owns LR but I worked with LR before the relationship) Framework my guess. You say ""build your own FWK"". What is a FWK?  We're using QF-Test and are quite satisfied.  UISpec4J is pretty simple unbloated and extensible. It fits my purposes better than FEST.  We are considering jemmy to automate some of the GUI testing. Looks promising. Jemmy is a very solid framework and we are using it since more than 5 years very successfully.  You can use Marathon : ""Marathon Integrated Testing Environment MarathonITE is an affordable easy-to-use and cross-platform Java/Swing™ GUI Test automation framework. You can use MarathonITE‘s inbuilt script recorder to create clean readable test scripts either in Python or Ruby. Advanced features like extract-method refactoring create-datadriven-tests and objectmap editing allows you to create maintainable resilient test suites."""
353,A,JavaFX Swing or Flex for Java Desktop Applications Most of the desktop application development I do is in Swing and I'm curious to hear people's thoughts on using JavaFX and/or Adobe Flex for building desktop applications. Have you had success building desktop apps with these? Or would you stick with Swing for now and use tools to help make Swing development more productive? What do you mean by that? Adobe Flex... Adobe Flex is written in ActionScript / MXML and compiles to a Flash component. It *can* talk to a Java backend - but it can talk to a backend written in any language as long as it can talk to it over AMF REST or web services interfaces. Right ... oops I misread your comment and thought you said Flex isn't a technology not a Java technology. I know it's not java specific but certainly can be used with Java as you pointed out and I'm curious if it's really gaining traction with Java. Um Flex isn't a Java technology. Please read the about this write extremely lightweight swing applications and with the same code base move it to web. demos runtime Please add the relevant information from these links. Links have a habit of.being moved or deleted if this happens then your answer becomes useless.  Swing can look good with Substance L&F. However if you are developing alone (as opposed to with a team) trying JavaFX might be a good idea.  I would say that JavaFX can be seen as a kind of extension of Swing with a new way of developing a Java GUI by using a declarative programming language: the JavaFX Script. JavaFX Script code looks exactly like a JSON script unlike Adobe Flex or Microsoft Silverlight which uses an XML syntax. JavaFX Script can interface with Java and therefore can call Swing components easily. It's really a new generation of GUI API like Swing was for AWT: nice graphical components new easy ways to manage layouts really nice features to build dynamic interfaces: bindings timers (to build animations) etc. Have a look here: http://www.javafx.com/samples/ and to the tutorials and see how fast you can build a kind of Google Picasa application... The API even contains some tools to use easily web services: you can find plenty of samples of GUI built in JavaFX connected to some public web services (like a Weather Forecast tool). And the best... is the deployment part. You can embed your application within an html page like an applet and the user can drag and drop the application to her/his desktop to use it whenever she/he wants (without returning to its browser)! Really I think JavaFX at its early stage though (v1.2) is a really good tool and represents the first step for Java toward the next generation of applications: the Rich Internet Applications (RIA).  I had evaluated these for desktop application and finally desided to go for JavaFx . This have very good media library and hardware accelerated graphics and media capabilities . With Jdk 7 update 6 onwards contains JavaFx totally I integrated no separate installation is required . Java swing is very good technology and will be continued but I see JavaFx is the future for GUI and Internet application to some extent. Biggest advantage for me was that JavaFx app could be converted to exe files with native packaging Also try scenebuilder for drag and drop component designer  I feel that I do not have enough information to answer this question. There are many applications in which an AIR approach is a better choice other applications use other technologies better. I am primarily an AS3/Flex developer but I know there are many instances where one of the Java platforms is a better choice. Now that Flex is no longer an Adobe product but rather a Apache product it will either improve the product as the users will create the roadmap or kill it off completely.  You should try them all and see which one fits best with your requirements. If you want to see what you can do with Flex and how to do it then check out Tour de Flex. Some of the advantages of Flex are that it is mature (over 5 years old now) and a significant area of investment for Adobe. You can also find numerous examples of AIR apps built with Flex in the Adobe AIR Marketplace.  Java Swing is an established and mature technology for desktop development. You'll be able to find lots of information online and plenty of sample programs. With that said however you might want to consider Adobe AIR. AIR is basically a runtime that lets you run your Flex apps on the desktop and gives them access to local resources such as the file system. I've written Java Swing apps for 10 years and I am amazed at how much more productive I am using Flex/Adobe AIR. One nice aspect of Flex is that you can create your GUIs declaritively much like how you use HTML to declare the layout of a webpage. It's a much more concise way to specify a GUI and much faster and easier to maintain than the reams of Java Swing code you need to do the same thing. I wouldn't recommend JavaFX since it is so late to the party and hasn't really gotten with mainstream developers.  If you're making desktop apps I'd stick to Swing. JavaFX/Flex/Silverlight would be more appropriate for RIA - rich internet apps. Although I'd argue that none of them would be a choice for the long term - looks to me like HTML5/CSS3/Ajax are winning the day but thats a pretty subjective area. But for desktop apps - I'm a big fan of Swing (also Java Web Start is a very underrated technology) +1Nice answer and I agree with most of it except that he should stick to Swing. Swing isn't very advanced in comparison to .NET for example. I'd try JavaFX.
354,A,"Java Nimbus LAF with transparent text fields I have an application that uses disabled JTextFields in several places which are intended to be transparent - allowing the background to show through instead of the text field's normal background. When running the new Nimbus LAF these fields are opaque (despite setting setOpaque(false)) and my UI is broken. It's as if the LAF is ignoring the opaque property. Setting a background color explicitly is both difficult in several places and less than optimal due to background images actually doesn't work - it still paints it's LAF default background over the top leaving a border-like appearance (the splash screen below has the background explicitly set to match the image). Any ideas on how I can get Nimbus to not paint the background for a JTextField? Note: I need a JTextField rather than a JLabel because I need the thread-safe setText() and wrapping capability. Note: My fallback position is to continue using the system LAF but Nimbus does look substantially better. See example images below. Conclusions The surprise at this behavior is due to a misinterpretation of what setOpaque() is meant to do - from the Nimbus bug report: This is a problem the the orginal design of Swing and how it has been confusing for years. The issue is setOpaque(false) has had a side effect in exiting LAFs which is that of hiding the background which is not really what it is ment for. It is ment to say that the component my have transparent parts and swing should paint the parent component behind it. It's unfortunate that the Nimbus components also appear not to honor setBackground(null) which would otherwise be the recommended way to stop the background painting. Setting a fully transparent background seems unintuitive to me. In my opinion setOpaque()/isOpaque() is a faulty public API choice which should have been only: public boolean isFullyOpaque(); I say this because isOpaque()==true is a contract with Swing that the component subclass will take responsibility for painting it's entire background - which means the parent can skip painting that region if it wants (which is an important performance enhancement). Something external cannot directly change this contract (legitimately) whose fulfillment may be coded into the component. So the opacity of the component should not have been settable using setOpaque(). Instead something like setBackground(null) should cause many components to ""no long have a background"" and therefore become not fully opaque. By way of example in an ideal world most components should have an isOpaque() that looks like this: public boolean isOpaque() { return (background!=null); } Have you skim over this package already? src.zip!\com\sun\java\swing\plaf\nimbus I ran into this same issue last week using JTextPane. The setOpaque() method works as expected when using any look and feel other than nimbus. Apparently the nimbus look and feel changes the behaviour we have come to expect with setOpaque() for many Components. Depending on how you look at it it can be considered a bug. Check the comments on this sun bugid: nimbus opaque bug The workaround that worked for me was: myPane.setOpaque(false); // added by OP myPane.setBorder(BorderFactory.createEmptyBorder()); myPane.setBackground(new Color(0000)); Note from OP: I also had to ensure setOpaque(false) for JTextField so that the parent background was painted - just wanted to mention this for others who follow in case they had experimented with setOpaque(true) as I had. @juggler555: Thanks that works provided the component is *not* opaque (when I left it opaque text updates ""scribbled"" over the top of the previous). This looks promising; will try it tonight in my app. Thanks. Yup its not perfect but it worked for me.  I think the question is how to interpret ""opaque"" and ""background"". For a JTextfield there is the question: ""what visible parts are the background?"". I'd define ""background"" as the parts of the bounding rectangle that are not drawn by the component. For a ""round"" button e.g. this will be the corners outside the circle. Therefor I'd say a JTextfield has no visible background! It has a rectangular shape and what you are the taking as background is not the field's background but the field's canvas. Rebuttal from OP This is an interesting enough idea to be worth responding to in the answer for future viewers (as opposed to in comments). I have to disagree. I would argue that the part of the component outside the border is not part of the component - it's outside the component. A field with rounded corners is of necessity non-opaque in that it cannot be responsible for painting it's entire rectangular region - this is a side-effect of all components being rectangular in dimensions. I think this consideration makes the argument for the existing (and misunderstood) meaning of isOpaque(). It also makes my argument that setOpaque() should not exist and that setBackground(null) should cause the component to not paint a background. I would put forth that the background of a text field is indeed the color of the region inside it's borders and I don't think you will find very many people to dispute that as an intuitive conclusion - therefore having background apply to that region obeys the rule of least surprise for the API user. The bug refered to above seems to tell the same story. @ordnungswidrig: Your answer is hard to decipher but I am hesitant to edit it and risk putting words in your mouth - do you want to make a second pass at it for others who come along? @Ordnungswidrig: Interesting thought - I added a rebuttal to your answer since I thought this was an important idea.  Hey there Software Monkey. mmhh what about installing UI's subclasses replacement that actually respect the setOpaque behavior. I think it is something like setUI or something like that. You could grab the source code of the nimbus and see what's broken there ( if it is there )  subclass it and install the ""fixed"" one. Yours sound quite intersting do you have any screenshot we can see? If the only choice was this I think I would stick with the system LAF. At least then I am less likely to have surprises when running in Linux OSX and others.  From the javadoc public void setBackground(Color bg) Sets the background color of this component. The background color is used only if the component is opaque and only by subclasses of JComponent or ComponentUI implementations. Direct subclasses of JComponent must override paintComponent to honor this property. It is up to the look and feel to honor this property some may choose to ignore it. But its worse. The doc says that it's only honored when setOpaque is true. And as I said it's a shame Nimbus has chosen to ignore it."
355,A,Is it possible to display Swing components in a JSP? I was wondering if I could pop up JOptionPanes or other Swing components from within a browser using JSP. You may also want to consider GWT which enables you to develop a web interface in Java code (the Java code is converted to HTML & JavaScript by the GWT compiler). Although you don't program to the Swing API directly when writing GWT applications the GWT API is very similar in style to Swing programming.  Assuming you're familiar with Swing you may want to introduce yourself to Apache Wicket which is very similar to the way you build web pages as Swing is to building GUI:s. That is in Wicket you add new instancef of Label Button DataTable etc. etc. to page and link those to bean property data which is then ultimately transformed to fully functioning web page. As for the actual question you really can't do it as-is. If choosing a new/different/another web framework to help you isn't possible the only proper way I can think of is doing what sblundy suggested.  If you embed an applet. But I don't think that's what you want. Swing is for desktop apps. JSP web pages. If you want components try looking into JSF or some of the many AJAX Javascript frameworks like prototype.
356,A,"Equivalent of Swing's pack in C# I am developing a quick app in C#. One thing that I want to do is the equivalent of Swing's (java) pack(). This is a call that allows me to say to a form (Frame in Java) resize yourself to the size of the sum of the components within yourself. I have searched and searched (the components change dynamically so I cannot simply hardcode the form to the right size) but I cannot find the equivalent method in C#. Does anyone know what it is called? Also in xaml: <Window SizeToContent=""WidthAndHeight"" />  You don't even need write code in order to 'pack' the form. In the forms designer set the form's AutoSize property to true and set the AutoSizeMode property to GrowAndShrink repeat this for any controls on the form which may also change size. And voila! At runtime (only) the form will dynamically resize itself to accommodate all the controls. If you want it to keep a little distance from the controls so that the controls won't 'stick' to the edges you can set the Padding property (I'd recommend at least a value of 12121212). When setting AutoSize on controls such as labels you will probably want to set the `MaximumWidth` property to force the text to wrap preventing any long lines from making your form wider than the screen."
357,A,"Java JTable object with multiple fields I have an object that has X number of fields. Each row in my JTable corresponds to one item. Each column in the row represents a field for that item. I also need to maintain a reference to the item (the item has a unique ID field as well) so I can determine the item in the selected cell. Would the preferred approach to this be putting the actual object in each cell in the table and using various renderers to display the item or to simply put the field values in each of the cells and have a hidden column that has the item ID that I can reference when I need to know the item ID? thanks Jeff This isn't a question. It might not be formatted as a question but actually it does ask for a preferred approach. I added the question mark. You might be able to use the Bean Table Model. If not then the JButtonTableModel examples shows how you might implement the getValueAt/setValueAt() methods and take advantage of the functionality provided by the RowTableModel so you don't need to create the TableModel from scratch. Thanks. Unfortunately they are not necessarily getXXX methods. They are getProperty(XXX) since the properties are determined at runtime but this is a good one to know about. Which is why I suggested the JButtonTableModel example might be better since it is easily customizable by overriding a couple of methods and you still have all the functionality you need. It supports methods for retrieving the row Object so you can get the ID even though its not visble in the table. It also supports dynamic add/remove of rows.  My preferred approach is to have a table model which returns a value from the field for each column. To be able to get a reference to the object I add a method to the model which could be called getObjectFromRow and as its name suggests it returns the object corresponding to the row index. This way you can have the actual displayed data in the cell and you don't need a hidden column to get a reference to the row object. Of course this requires a custom table model but I think it's well worth the trouble. Of course using renderers for displaying data from the correct field is also possible but in my experience this has several problems including the trouble of writing all the renderers for different data types and also the fact that copy & paste from the table does not work properly out of the box.  I'd write a custom table model (as opposed to trying to shoehorn your design into the default table model implementation). This model then holds your actual objects and in its method implementations (such as getValueAt) it'd consider each of the fields as a column. Simple example (not tested but should illustrate the idea nicely): import java.util.List; import java.util.ArrayList; import javax.swing.table.AbstractTableModel; /** * Simple table model for displaying properties common to all objects. * Note that all methods must run inside the event dispatch thread. */ public class ObjectPropertyTableModel extends AbstractTableModel { private final List<Object> objects = new ArrayList<Object>(); public void addObject(Object obj) { addObject(obj objects.size()); } public void addObject(Object obj int index) { objects.add(index obj); fireTableRowsInserted(index index); } public void removeObject(Object obj) { int index = objects.indexOf(obj); objects.remove(index); fireTableRowsDeleted(index index); } public Object getObject(int rowIndex) { return objects.get(rowIndex); } @Override public int getRowCount() { return objects.size(); } @Override public int getColumnCount() { return 3; } @Override public String getColumnName(int columnIndex) { switch (columnIndex) { case 0: return ""toString""; case 1: return ""hashCode""; case 2: return ""class""; default: throw new IndexOutOfBoundsException(); } } @Override public Class<?> getColumnClass(int columnIndex) { switch (columnIndex) { case 0: return String.class; case 1: return Integer.class; case 2: return Class.class; default: throw new IndexOutOfBoundsException(); } } @Override public Object getValueAt(int rowIndex int columnIndex) { Object obj = objects.get(rowIndex); switch (columnIndex) { case 0: return obj.toString(); case 1: return obj.hashCode(); case 2: return obj.getClass(); default: throw new IndexOutOfBoundsException(); } } } That would mean that each cell in a row would have a reference to the same object correct? Not quite. The cells are ""virtual"" in the case of a custom table model. When the table wants to display a cell it calls your `getValueAt` method. At that point access your object's relevant field. (Yes. Do work in the model. Keep renderers simple.) Yes my fault. I was thinking if I extended DefaultTableModel not implementing a TableModel. Oops...thanks. Note that this solution does not provide means for retrieving the reference to a object on a row. Simple method should be added for retrieving it."
358,A,"How to close a Java Swing application from the code What is the proper way to terminate a Swing application from the code and what are the pitfalls? I'd tried to close my application automatically after a timer fires. But just calling dispose() on the JFrame didn't do the trick - the window vanished but the application did not terminate. However when closing the window with the close button the application does terminate. What should I do? Please post up a code snippet of your timer. I think the idea is here the WindowListener - you can add any code there that you'd like to run before the thing shuts down  Try: System.exit(0); Crude but effective. System.exit(0) isn't just crude it's evil. Check all frames call dispose. If that fails run a debugger and see what non-daemon threads are still alive. Unfortunately this is too crude for me. I want the window closing events to be processed for some cleanup actions. OK I could do a System.exit with a SwingUtils.invokeLater but I'd rather do the proper thing. There's been plenty of bugs even within the JDK that leave the process about. So +1 to exit() but you might want to disable it in debug builds.  May be the safe way is something like:  private JButton btnExit; ... btnExit = new JButton(""Quit""); btnExit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e){ Container frame = btnExit.getParent(); do frame = frame.getParent(); while (!(frame instanceof JFrame)); ((JFrame) frame).dispose(); } }); Pretty bad style to name a variable `Frame` with a capital letter exactly like the name of a class…  I guess a EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); before System.exit(0) is better since you can write a Window Listener to make some cleaning operations before actually leaving the app. That window listener allows you to defined: public void windowClosing(WindowEvent e) { displayMessage(""WindowListener method called: windowClosing.""); //A pause so user can see the message before //the window actually closes. ActionListener task = new ActionListener() { boolean alreadyDisposed = false; public void actionPerformed(ActionEvent e) { if (frame.isDisplayable()) { alreadyDisposed = true; frame.dispose(); } } }; Timer timer = new Timer(500 task); //fire every half second timer.setInitialDelay(2000); //first delay 2 seconds timer.setRepeats(false); timer.start(); } public void windowClosed(WindowEvent e) { //This will only be seen on standard output. displayMessage(""WindowListener method called: windowClosed.""); }  The following program includes code that will terminate a program lacking extraneous threads without explicitly calling System.exit(). In order to apply this example to applications using threads/listeners/timers/etc one need only insert cleanup code requesting (and if applicable awaiting) their termination before the WindowEvent is manually initiated within actionPerformed(). For those who wish to copy/paste code capable of running exactly as shown a slightly-ugly but otherwise irrelevant main method is included at the end. public class CloseExample extends JFrame implements ActionListener { private JButton turnOffButton; private void addStuff() { setDefaultCloseOperation(DISPOSE_ON_CLOSE); turnOffButton = new JButton(""Exit""); turnOffButton.addActionListener(this); this.add(turnOffButton); } public void actionPerformed(ActionEvent quitEvent) { /* Iterate through and close all timers threads etc here */ this.processWindowEvent( new WindowEvent( this WindowEvent.WINDOW_CLOSING)); } public CloseExample() { super(""Close Me!""); addStuff(); } public static void main(String[] args) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { CloseExample cTW = new CloseExample(); cTW.setSize(200 100); cTW.setLocation(300300); cTW.setVisible(true); } }); } }  Take a look at the Oracle Documentation. Starting from JDK 1.4 an Application terminates if: There are no displayable AWT or Swing components. There are no native events in the native event queue. There are no AWT events in java EventQueues. Cornercases: The document states that some packages create displayable components without releasing them.A program which calls Toolkit.getDefaultToolkit() won't terminate. is among others given as an example. Also other Processes can keep AWT alive when they for what ever reason are sending events into the native event queue. Also I noticed that on some Systems it takes a coupple of seconds before the Application actually terminates.  If I understand you correctly you want to close the application even if the user did not click on the close button. You will need to register WindowEvents maybe with addWindowListener() or enableEvents() whichever suits your needs better. You can then invoke the event with a call to processWindowEvent(). Here is a sample code that will create a JFrame wait 5 seconds and close the JFrame without user interaction. import javax.swing.*; import java.awt.*; import java.awt.event.*; public class ClosingFrame extends JFrame implements WindowListener{ public ClosingFrame(){ super(""A Frame""); setSize(400 400); //in case the user closes the window setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setVisible(true); //enables Window Events on this Component this.addWindowListener(this); //start a timer Thread t = new Timer(); t.start(); } public void windowOpened(WindowEvent e){} public void windowClosing(WindowEvent e){} //the event that we are interested in public void windowClosed(WindowEvent e){ System.exit(0); } public void windowIconified(WindowEvent e){} public void windowDeiconified(WindowEvent e){} public void windowActivated(WindowEvent e){} public void windowDeactivated(WindowEvent e){} //a simple timer class Timer extends Thread{ int time = 10; public void run(){ while(time-- > 0){ System.out.println(""Still Waiting:"" + time); try{ sleep(500); }catch(InterruptedException e){} } System.out.println(""About to close""); //close the frame ClosingFrame.this.processWindowEvent( new WindowEvent( ClosingFrame.this WindowEvent.WINDOW_CLOSED)); } } //instantiate the Frame public static void main(String args[]){ new ClosingFrame(); } } As you can see the processWindowEvent() method causes the WindowClosed event to be fired where you have an oportunity to do some clean up code if you require before closing the application. windowClosed should call dispose() not System.exit(0).  Your JFrame default close action can be set to ""DISPOSE_ON_CLOSE"" instead of EXIT_ON_CLOSE (why people keep using EXIT_ON_CLOSE is beyond me). If you have any undisposed windows or non-daemon threads your application will not terminate. This should be considered a error (and solving it with System.exit is a very bad idea). The most common culprits are java.util.Timer and a custom Thread you've created. Both should be set to daemon or must be explicitly killed. If you want to check for all active frames you can use Frame.getFrames(). If all Windows/Frames are disposed of then use a debugger to check for any non-daemon threads that are still running. Note that you may have to call dispose on each frame and typically that is ""enough"" (though setting the default close action to EXIT_ON_CLOSE is probably not a bad idea either). First window should add itself to as a listener to the second window and take appropriate action. What if you have one window opening another but not disposing itself so that you can use it for a `back` window? If the second window is then closed and you use `DISPOSE_ON_CLOSE` the programme doesn't terminate because the first window is still ""undisposed""... is there a way to solve that _without_ using `DISPOSE_ON_CLOSE`? This response suggests the exact opposite of Bizorke's answer. Which one is correct? (when I test with a simple application both seem to work ...) Using EXIT_ON_CLOSE will forcibly terminate the application. If you need to take action before the program exits (such as saving working data) then you have to tap into the JVM event handlers instead of just using the normal swing event handlers. Both will ""work"" but the EXIT_ON_CLOSE will cause problems for more complex apps. An example in support of graceful shutdown: I needed to ensure my finally block was executed so network connections were closed gracefully. This would not happen with a System.exit call (EXIT_ON_CLOSE). In my case I discovered with the debugger that I had a Swingworker still active. I called its cancel(true) method in the WindowClose Eventlistener and the program terminates now. Thanks!  In response to other comments DISPOSE_ON_CLOSE does not seem to properly exit the application - it only destroys the window but the application will continue running. If you want to terminate the application use EXIT_ON_CLOSE. Can't remember how I tested this now. This response suggests the exact opposite of James Schek's answer. Which one is correct? (when I test with a simple application both seem to work ...)"
359,A,What are good docking frameworks for Java/Swing? I'm looking for a good lightweight Java docking framework. I know that Netbeans and Eclipse can be used as RCP but I'm looking for something a little bit more lightweight. I've just released another docking framework. It's really lightweight and available under the Apache 2.0 license. Raven Docking: http://raven.java.net/ravenDocking/index.html  JIDE has quite a few components including a docking framework. The core of JIDE is open source but they also have several commercial libraries. The docking framework is commercial. http://www.jidesoft.com/products/component.htm  See a comprehensive list (with links) of over 10 docking frameworks here. Raven Docking Apache 2; 0.2 MB MyDoggy LGPL; only JARs: 0.7 MB; Dec 2010 VLDocking LGPL; 0.4 MB NetBeans CDDL/GPL; 4.6 MB (platform.zip) Eclipse CPL or EPL ? only swt (?) InfoNode GPL or Commercial Sanaware GPL or Commercial full zip 0.3MB Docking Frames LGPL; 3 MB Jide commercial; <3MB FlexDock MIT; 0.4 MB; Nov 2011 Inactive projects SwingDocking seems to me fully functional and fast; Apache license 2; Oct 2007 XUI will be further developed here?; MPL; 1.6 MB (XUI-jdk15.zip); Feb 2008 JDocking CDDL; 1.3 MB (v0.8.zip) the docking part of netbeans JRichClient GPL; derivation of flexdock; Nov 2007 [Infonode](http://www.infonode.net/index.html?idw); GPL or Commercial Flexdock 1.1 is actually 433 KB 1.6 MB is for the demo package (see the [download page](http://java.net/projects/flexdock/downloads)) Docking Frames is actually 3 MB these days only the oldest versions are anywhere near 0.7 MB.  I have successfully used FlexDock in the past but it seems not well supported and it is quite hard to start with (this is a quite complex framework for docking). FlexDock is open source. Besides more recently I have enjoyed using MyDoggy which is well supported and quite easy to use (very well documented with enough examples and tutorials). Its main drawback (for me) is the difficulty to adapt its look when using 3rd-party LAFs (like Substance for instance). But in general I really like it. If I remember correctly it is quite a lightweight library. I would recommend it for any use (it is open source and free to use) for its good API.  I once evaluated several docking frameworks (including the already mentioned flexdock and mydoggy and jdocking. Finaly I came to Docking Frames which I can really recommend. It is easy to use but still feature rich + good documentation and quick support from developer via forum. +1 docking frames is quite nice and its still supported updated just a few weeks ago After reviewing the list above and testing a few of the frameworks I decided to give Docking Frames a shot mainly because it seems like the most active project.  See the infonode docking windows. They have a gpl version and a commercial version but the licenses are not that expensive. Robust and good looking if you select the right skin (we use the ShapedGradientDockingTheme which looks a little like eclipse). Not expensive? A commercial Infonode docking license costs $6000! $6000 is for a site license single user is $300. Do you know if it is actively developed? The last release is from over a year now... Well the company is still there so I think they are. I haven't seen increases in version numbers for a while though.  We use VLDocking from vlsolutions (http://vldocking.com) quite successfully in 3 of our products. They have some open-source license compatible with GPL.
360,A,Java TreeNode: How to prevent getChildCount from doing expensive operation? I'm writing a Java Tree in which tree nodes could have children that take a long time to compute (in this case it's a file system where there may be network timeouts that prevent getting a list of files from an attached drive). The problem I'm finding is this: getChildCount() is called before the user specifically requests opening a particular branch of the tree. I believe this is done so the JTree knows whether to show a + icon next to the node. An accurate count of children from getChildCount() would need to perform the potentially expensive operation If I fake the value of getChildCount() the tree only allocates space for that many child nodes before asking for an enumeration of the children. (If I return '1' I'll only see 1 child listed despite that there are more) The enumeration of the children can be expensive and time-consuming I'm okay with that. But I'm not okay with getChildCount() needing to know the exact number of children. Any way I can work around this? Added: The other problem is that if one of the nodes represents a floppy drive (how archaic!) the drive will be polled before the user asks for its files; if there's no disk in the drive this results in a system error. Update: Unfortunately implementing the TreeWillExpand listener isn't the solution. That can allow you to veto an expansion but the number of nodes shown is still restricted by the value returned by TreeNode.getChildCount(). I'm not sure if it's entirely applicable but I recently worked around problems with a slow tree by pre-computing the answers to methods that would normally require going through the list of children. I only recompute them when children are added or removed or updated. In my case some of the methods would have had to go recursively down the tree to figure out things like 'how many bytes are stored' for each node.  http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html#data scroll a little down there is the exact tutorial on how to create lazy loading nodes for the jtree complete with examples and documentation  If you need a lot of access to a particular feature of your data structure that is expensive to compute it may make sense to pre-compute it. In the case of TreeNodes this means that your TreeNodes would have to store their Child count. To explain it a bit more in detail: when you create a node n0 this node has a childcount (cc) of 0. When you add a node n1 as a child of this one you n1.cc + cc++. The tricky bit is the remove operation. You have to keep backlinks to parents and go up the hierarchy to subtract the cc of your current node. In case you just want to have the a hasChildren feature for your nodes or override getChildCount a boolean might be enough and would not force you to go up the whole hierarchy in case of removal. Or you could remove the backlinks and just say that you lose precision on remove operations. The TreeNode interface actually doesn't force you to provide a remove operation but you probably want one anyway. Well that's the deal. In order to come up with precomputed precise values you will have to keep backlinks of some sorts. If you don't you'd better call your method hasHadChildren or the more amusing isVirgin.  There are a few parts to the solution: Like Lorenzo Boccaccia said use the TreeWillExpandListener Also need to call nodesWereInserted on the tree so the proper number of nodes will be displayed. See this code I have determined that if you don't know the child count TreeNode.getChildCount() needs to return at least 1 (it can't return 0)
361,A,"How can I get the length of a JTextField's contents as the user types? JTextField has a keyTyped event but it seems that at the time it fires the contents of the cell have not yet changed. Because of that .length() is always wrong if read here. There must be a simple way of getting the length as it appears to the user after a key stroke? KeyEvents are low-level events that are not appropriate here [that sounds familiar]. How does the JTextField system know that a character has been typed? Through a key typed event (IIRC done through the PL&F). Does the event get dispatched to the system listener before your listener? It might or might not do. In this case you probably want to go to the Document and add a higher-level listener. With Swing it's a good idea to go for the model early - the 'J' class interfaces are incoherent. If you are intercepting input data then you probably want a custom model (or in the case of Document a DocumentFilter).  Use this code: public void jTextField6KeyReleased(java.awt.event.KeyEvent evt) { System.out.println(jTextField6.getText().length()); } Consider expanding your answer to explain to the asker why this achieves the desired result possibly linking to documentation. As is this is only marginally useful.  This is probably not the optimal way (and it's been a while) but in the past I have added a DocumentListener to the JTextField and on any of the events (insert update remove) I: evt.getDocument().getLength() Which returns the total length of text field's contents.  This may be related to this ""bug"" (or rather ""feature"") The listeners are notified of the key events prior to processing them to allow the listeners to ""steal"" the events by consuming them. This gives compatibility with the older awt notion of consuming events. The ""typed"" event does not mean text was entered into the component. This is NOT a bug it is intended behavior. A possible solution is to listen to an associated Document // Listen for changes in the text myTextField.getDocument().addDocumentListener(new DocumentListener() { public void changedUpdate(DocumentEvent e) { // text was changed } public void removeUpdate(DocumentEvent e) { // text was deleted } public void insertUpdate(DocumentEvent e) { // text was inserted } }); Note this works no matter how the text gets changed; via a clipboard cut/paste progamatic ""setText()"" on the TextField or the user typing into the field on the UI."
362,A,"Setting up application wide Key Listeners How do i setup application wide key listeners (keyboard shortcuts) so that when a key combination (e.g. Ctrl + Shift + T) is pressed a certain action is invoked in a Java application. I know keyboard shortcuts can be set JMenuBar menu items but in my case the application does not have a menu bar. Check out the How To Use Key Bindings section of the Java tutorial. You need to create and register an Action with your component's ActionMap and the register a (KeyStroke Action Name) pair in one of your application's component's InputMaps. Given that you don't have a JMenuBar you could simply register the key bindings with a top-level JPanel in your application. For example: Action action = new AbstractAction(""Do It"") { ... }; // This is the component we will register the keyboard shortcut with. JPanel pnl = new JPanel(); // Create KeyStroke that will be used to invoke the action. KeyStroke keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_T InputEvent.CTRL_DOWN_MASK | InputEvent.SHIFT_DOWN_MASK); // Register Action in component's ActionMap. pnl.getActionMap().put(""Do It"" action); // Now register KeyStroke used to fire the action. I am registering this with the // InputMap used when the component's parent window has focus. pnl.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(keyStroke ""Do It""); it works! thanks. No problem - You can accept my solution if you like! (I need the points!)."
363,A,"Designing simple cell renderer for Nimbus look and feel I have a simple-ish cell renderer which is composed of a few JLabels (the renderer itself extends JPanel) and I'm trying to get it to render sensibly in the Nimbus look and feel. Basically what is happening is that in the lighter rows (as Nimbus has alternate row coloring) my specific cell renderer is using the table background color (which is much darker than both lighter and the darker row colors). In my renderer I do: if (isSelected) { setBackground(table.getSelectionBackground); } else { setBackground(table.getBackground); } If I comment this whole block of code out then then all my rows are in the darker row color (not the table background but not in alternate colors either). I'm not sure I even understand what can be going on! How is the above snippet of code producing cells with different background colors at all? Is the table.getBackground color changing between invocations of my method? I've tried using this snippet of code: Color alternateColor = sun.swing.DefaultLookup.getColor( peer peer.getUI ""Table.alternateRowColor""); if (alternateColor != null && row % 2 == 0) setBackground(alternateColor); Which is in the DefaultTableCellRenderer class. And it doesn't seem to have any affect at all. Has anyone got custom cell renderers working with Nimbus? EDIT: If anyone is interested this turned out to be a problem with Scala table cell renderers as I was actually using Scala not Java. The accepted answer below works just fine in a Java program. Separate question filed here. Your first piece of code if fine.I think you have to use UIManager.getColor(""Table.alternateRowColor"") for alternate rows and table.getBackground() otherwise. For selected row use table.getSelectionBackground(). So your code might look like if (isSelected) { setBackground(table.getSelectionBackground()); } else { if ( row % 2 == 0 ) { setBackground(UIManager.getColor(""Table.alternateRowColor"")); } else { setBackground(table.getBackground()); } } Don't forget to make sure that your panel is opaque and the labels are transparent. Here is a good link to Nimbus UI defaults: http://www.duncanjauncey.com/java/ui/uimanager/UIDefaults_Java1.6.0_11_Windows_2000_5.0_Nimbus.html depends what row you consider to be the alternate ;) It's acutally `if ( row % 2 == 1 ) {`. Yes - this is *exactly* what I tried and it didn't work. However I'm actually using Scala not Java so I decided to knock up a quick test case in Java and it worked. So thanks. Unfortunately I have no idea why it doesn't work in Scala! Even though I don't know much about Scala I don't see a reason why it should not work. Swing is Swing even in Scala."
364,A,How to generate a Jlist with alternating colors In Java how do I get a JList with alternating colors? Any sample code? To customize the look of a JList cells you need to write your own implementation of a ListCellRenderer. A sample implementation of the class may look like this: (rough sketch not tested) public class MyListCellThing extends JLabel implements ListCellRenderer { public MyListCellThing() { setOpaque(true); } public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { // Assumes the stuff in the list has a pretty toString setText(value.toString()); // based on the index you set the color. This produces the every other effect. if (index % 2 == 0) setBackground(Color.RED); else setBackground(Color.BLUE); return this; } } To use this renderer in your JList's constructor put this code: setCellRenderer(new MyListCellThing()); To change the behavior of the cell based on selected and has focus use the provided boolean values. @DuncanJones do you know what you gain by doing that? I would strongly recommend you extend `DefaultListCellRenderer` rather than implementing the interface directly. See http://stackoverflow.com/questions/3270023/java-list-set-background-of-list-item. I've found that it avoids the issue of having to hand-code the correct behavior when the item is selected. The default class will automatically do what's correct for the current look and feel. +1 for the setCellRenderer() tip. I was extending JList and trying to use my new class instead of JList. All I needed to do was set the renderer to a custom one. Thanks. Careful you need to handle the case where the row is selected (color changes then) yeah I mentioned that in the bottom of the post. Minor nitpick: should be setBackground rather than setBackgroundColor.
365,A,"Application wide keyboard shortcut - Java Swing I would like to create an application wide keyboard shortcut for a Java Swing application. Looping over all components and adding the shortcut on each has focus related side effects and seems like a brute force solution. Anyone has a cleaner solution? For each window use JComponent.registerKeyboardAction with a condition of WHEN_IN_FOCUSED_WINDOW. Alternatively use: JComponent.getInputMap(WHEN_IN_FOCUSED_WINDOW).put(keyStroke command); JComponent.getActionMap().put(commandaction); as described in the registerKeyboardAction API docs. +1 The best easiest answer I have found. I will upvote this x1000 x1001 would be better that way he'd at least get an upvote. @Epaga Or 999 times  Install a custom KeyEventDispatcher. The KeyboardFocusManager class is also a good place for this functionality. KeyEventDispatcher  When you have a menu you can add global keyboard shortcuts to menu items:  JMenuItem item = new JMenuItem(action); KeyStroke key = KeyStroke.getKeyStroke( KeyEvent.VK_R KeyEvent.CTRL_DOWN_MASK); item.setAccelerator(key); menu.add(item);  For people wondering (like me) how to use KeyEventDispatcher here is an example that I put together. It uses a HashMap for storing all global actions because I don't like large if (key == ..) then .. else if (key == ..) then .. else if (key ==..) .. constructs. /** map containing all global actions */ private HashMap<KeyStroke Action> actionMap = new HashMap<KeyStroke Action>(); /** call this somewhere in your GUI construction */ private void setup() { KeyStroke key1 = KeyStroke.getKeyStroke(KeyEvent.VK_A KeyEvent.CTRL_DOWN_MASK); actionMap.put(key1 new AbstractAction(""action1"") { @Override public void actionPerformed(ActionEvent e) { System.out.println(""Ctrl-A pressed: "" + e); } }); // add more actions.. KeyboardFocusManager kfm = KeyboardFocusManager.getCurrentKeyboardFocusManager(); kfm.addKeyEventDispatcher( new KeyEventDispatcher() { @Override public boolean dispatchKeyEvent(KeyEvent e) { KeyStroke keyStroke = KeyStroke.getKeyStrokeForEvent(e); if ( actionMap.containsKey(keyStroke) ) { final Action a = actionMap.get(keyStroke); final ActionEvent ae = new ActionEvent(e.getSource() e.getID() null ); SwingUtilities.invokeLater( new Runnable() { @Override public void run() { a.actionPerformed(ae); } } ); return true; } return false; } }); } The use of SwingUtils.invokeLater() is maybe not necessary but it is probably a good idea not to block the global event loop. Not the simplest solution but definitely the most elegant and reliable one.  Use the following piece of code ActionListener a=new ActionListener(){ public void actionPerformed(ActionEvent ae) { // your code } }; getRootPane().registerKeyboardAction(aKeyStroke.getKeyStroke(""ctrl D"")JComponent.WHEN_IN_FOCUSED_WINDOW); Replace ""ctrl D"" with the shortcut you want. @kleopatra Hmm. Thanks for the comment. I want to know the reason. I didn't find it! don't quite understand - reason for what? Why is registerKeyboardAction() obselete that's a question for the swing team 10+ years ago :-) There used to be an article (old swingconnection?) introducing keyBindings that also argued the why .. don't have a reference though sorry. no that's outdated api (superceded by actionMap/inputMap since jdk 1.2 or 1.3 - way back in stone age) Please see the javadoc (JComponent.registerKeyboardAction(java.awt.event.ActionListener java.lang.String javax.swing.KeyStroke int)): This method is now obsolete please use a combination of getActionMap() and getInputMap() for similiar behavior."
366,A,"Is there a way to make a JComboBox act like an HTML Select? What I am trying to do mimic an HTML Select tag. I want to display text as an option but when selected I would use its value. For example I would have a list of country names. However when a user selects Japan I want to get the Locale Code for that country. So the user sees that they selected Japan but my code will get ""ja_JP"" or something. I am trying to avoid storing the Country Name and Locale Code in a HashMap or something. Create a Country object which contains the display name and the country code. You could do the quick and dirty and override toString to show the display name and then just retrieve the code when you need it when the user selects something. public class Country { String display; String code; @Override public String toString() { return display; } public String getCode() { return code; } } Left out the constructor as I am lazy. If you are not happy with overriding toString you could also create your own renderer that deals with Country objects and use the display instead through a new getter.  EDIT: I need to type faster. I usually create a custom object to hold the ""value"" and override toString() to return what the JComboBox should show. Alternately you could write your own cell renderer. No one out-types me! :)"
367,A,Java: Syntax highlighting component keyevents I just met the lib BeanShell. And now I'm making a Java Editor with a run-button who runs the code without compiling. For the texteditor-component I use the open-source jEdit Syntax Package. Here is a link with a demo: link. Now I wrote code that adds every time the user pressed enter automaticly added the same number of tabs like the previous line starts with. I tested that code in a simple JTextArea and works correctly. But it seems the keyevents are not working with the JEditTextArea I put this JComponent in a JPanel. The JEditTextArea is the editor-component in the lib. (Extends JComponent) The JEditTextArea doesn't behave like a normal swing JTextComponent. See the overridden processKeyEvent code in JEditTextArea - it specifically avoids the KeyListener stuff for performance. The way I've added key handling logic to JEditTextArea is to subclass the DefaultInputHandler and override addDefaultKeyBindings calling addKeyBinding() with your desired bindings and logic. It is nicd you found it. But I used another lib a mutch better. `jsyntaxpane-0.9.5-b27.jar` is the name.
368,A,"Scala Popup Menu How do I cause a popup to get shown in Scala? I have a ""backdoor"" but it seems pretty ugly to me: val item = new MenuItem(new Action(""Say Hello"") { def apply = println(""Hello World""); }) //SO FAR SO GOOD NOW FOR THE UGLY BIT! val popup = new javax.swing.JPopupMenu popup.add(item.peer) popup.setVisible(true) What you are doing is fine but if you'd like to hide the peer call you could create your own class: class PopupMenu extends Component { override lazy val peer : JPopupMenu = new JPopupMenu def add(item:MenuItem) : Unit = { peer.add(item.peer) } def setVisible(visible:Boolean) : Unit = { peer.setVisible(visible) } /* Create any other peer methods here */ } Then you can use it like this: val item = new MenuItem(new Action(""Say Hello"") { def apply = println(""Hello World""); }) val popup = new PopupMenu popup.add(item) popup.setVisible(true) As an alternative you could try SQUIB (Scala's Quirky User Interface Builder). With SQUIB the above code becomes: popup( contents( menuitem( 'text -> ""Say Hello"" actionPerformed( println(""Hello World!"") ) ) ) ).setVisible(true) oxbow yes people actually do use scala-swing. The lack of documentation is not terribly surprising. The cost/benefit just doesn't pan out since most of the methods in scala-swing are simple straightforward mappings to Java Swing methods. I wouldn't consider JPopupMenu a ""basic construct"" and while it is a bit of a glaring oversight please take into consideration the amount of effort involved in wrapping every possible Swing component. There are well over 100 classes in scala.swing and scala.swing.event packages. I know this answer is two years old but the `PopupMenu.setVisible` method is not needed. As you inherit method `Component.visible_=` you can already say `popup.visible = true`. Why is this (popup menu) not part of the standard scala swing toolkit? I must say that I've been a bit alarmed by the lack of documentation together with some pretty basic constructs. Makes me wonder whether anyone actually uses the toolkit.  I know the question is two years old but I think it's worth updating with another answer. Here's my solution: import javax.swing.JPopupMenu import scala.swing.{ Component MenuItem } import scala.swing.SequentialContainer.Wrapper object PopupMenu { private[PopupMenu] trait JPopupMenuMixin { def popupMenuWrapper: PopupMenu } } class PopupMenu extends Component with Wrapper { override lazy val peer: JPopupMenu = new JPopupMenu with PopupMenu.JPopupMenuMixin with SuperMixin { def popupMenuWrapper = PopupMenu.this } def show(invoker: Component x: Int y: Int): Unit = peer.show(invoker.peer x y) /* Create any other peer methods here */ } Here is some sample usage code: val popupMenu = new PopupMenu { contents += new Menu(""menu 1"") { contents += new RadioMenuItem(""radio 1.1"") contents += new RadioMenuItem(""radio 1.2"") } contents += new Menu(""menu 2"") { contents += new RadioMenuItem(""radio 2.1"") contents += new RadioMenuItem(""radio 2.2"") } } val button = new Button(""Show Popup Menu"") reactions += { case e: ButtonClicked => popupMenu.show(button 0 button.bounds.height) } listenTo(button) Some things to note: Use of SuperMixin class as recommended in scala-swing-design.pdf in section ""Guidelines for Writing Wrappers"" subsection ""Use the wrapper cache"". Mixin scala.swing.SequentialContainer.Wrapper so that I can use the contents += construct so my Popup Menu code looks like other scala-swing Menu construction code. While the question uses JPopupMenu.setVisible I think you are going to want to wrap and use the method JPopupMenu.show so you can control the location of the Popup Menu. (Just setting it to be visible puts it in the top left-hand corner of the screen for me.)"
369,A,"java & fullscreen over multiple monitors A snippet from my Java application:  JFrame f = new JFrame(); GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice gd = ge.getDefaultScreenDevice(); gd.setFullScreenWindow(f); So what it does is make it self fullscreen. Now the odd thing is that the program is fullscreen but only on one monitor! E.g. I have a windows vista system with two screens that are combined in one desktop. What to do automatically let it go fullscreen over all monitors? Ok I tried that: import java.awt.image.ColorModel; import java.awt.GraphicsConfiguration; import java.awt.GraphicsDevice; import java.awt.GraphicsEnvironment; import java.awt.Rectangle; class grdevs { public static void main(String [] args) { GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] gs = ge.getScreenDevices(); for(GraphicsDevice curGs : gs) { GraphicsConfiguration[] gc = curGs.getConfigurations(); for(GraphicsConfiguration curGc : gc) { Rectangle bounds = curGc.getBounds(); ColorModel cm = curGc.getColorModel(); System.out.println("""" + bounds.getX() + """" + bounds.getY() + "" "" + bounds.getWidth() + ""x"" + bounds.getHeight() + "" "" + cm); } } } } but it gives: 0.00.0 1024.0x768.0 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 0.00.0 1024.0x768.0 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 0.00.0 1024.0x768.0 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 0.00.0 1024.0x768.0 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 0.00.0 1024.0x768.0 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 0.00.0 1024.0x768.0 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 1024.00.0 1024.0x768.0 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 1024.00.0 1024.0x768.0 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 1024.00.0 1024.0x768.0 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 1024.00.0 1024.0x768.0 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 1024.00.0 1024.0x768.0 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 1024.00.0 1024.0x768.0 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 E.g I would expect a device capable of 2048x768 as they are combined in one (I clicked on ""extend desktop""). This is not what ""setFullScreenWindow"" is for. It's really for applications that want more direct access to the framebuffer (better performance) - like a 3D game does in DirectX for instance. This kind of implies ONE monitor. See this other answer I did: http://stackoverflow.com/questions/1722922/jdialog-not-displaying-when-in-fullscreen-mode/1723425#1723425  That is the normal behavior when you maximize a window in Windows when you have two monitors. In order two get the full resolution size you will need to look at GraphicsConfiguration to check each GraphicsDevice.  A more general solution to Ash's code is to union the bounds of all the graphics configurations Rectangle2D result = new Rectangle2D.Double(); GraphicsEnvironment localGE = GraphicsEnvironment.getLocalGraphicsEnvironment(); for (GraphicsDevice gd : localGE.getScreenDevices()) { for (GraphicsConfiguration graphicsConfiguration : gd.getConfigurations()) { result.union(result graphicsConfiguration.getBounds() result); } } f.setSize(result.getWidth() result.getHeight()); This will work for vertically aligned monitors as well as horizontal.  Using java.awt.Toolkit you can get the full screen size (all monitors):  Toolkit tk = Toolkit.getDefaultToolkit(); Dimension dim = tk.getScreenSize(); From my experience that is not all true. If by all monitors you mean the entire desktop dimension that is. I get the dimensions on one of the monitors with this more specifically my main display.  You could try: int width = 0; int height = 0; GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] gs = ge.getScreenDevices(); for (GraphicsDevice curGs : gs) { DisplayMode mode = curGs.getDisplayMode(); width += mode.getWidth(); height = mode.getHeight(); } This should calculate the total width of multiple screens. Obviously it only supports horizontally aligned screens in the form above - you'd have to analyse the bounds of the graphics configurations to handle other monitor alignments (depends how bulletproof you want to make it). Edit: And then set the size of your frame: f.setSize(width height); I agree. Normal behaviour is maximizing/fullscreen in one monitor. If you have an extended desktop monitor can cover only ""partial"" rectangles inside the big desktop rectangle. Even they could not cover all the desktop area (two monitors in diagonal by example) so you have to find the big desktop rectangle and set the size manually."
370,A,Java Slider - how to make custom ticks? I have an audio track with an image slideshow - e.g. there's image 1 at 0:00 image 2 at 0:45 image 3 at 1:03 etc. I'm currently using a JSlider to change position in the track. I'd like to have ticks on the slider in the points where images change - but the spacing between ticks is not uniform so setPaintTicks is not an option. Is there a way to do this with javax.swing.JSlider or could you recommend a different slider control? I had this problem and didn't find a way to customise the tick spacing in JSlider. You can use custom tick labels as a work-around using JSlider.setLabelTable(). This allows you to label only certain ticks. That looks like a promising work-around thanks.
371,A,"Call repaint from another class in Java? I'm probably doing this wrong so please be nice. I'm developing a Java game and I'm at the stage of testing character movement / animation. The ""person"" can move up down left and right on a grid. The class the grid is drawn in is the gamePanel class. The buttons are in the gameControlPanel class. I have a button which spawns a person on the grid. I then have a button to move the person up down left and right. When the move up button is pressed it calls the move up method from the person class. (At the moment I'm only testing one ""person"" at a time.) In that method is the following code... int move = 10; while(move!=0) { setTopLeftPoint(new Point((int)getTopLeftPoint().getX() (int)getTopLeftPoint().getY() - 3)); try { Thread.sleep(300); } catch (InterruptedException e) { // TODO Auto-generated catch block e.printStackTrace(); } move-=1; } The problem is that I can't seem to call the repaint method for the gamePanel class from within the Person class. To get around this I created a timer in the gamePanel class which repaints every 20ms. When I press the up button after the person is spawned the button remains pressed down until the cycles of the while loop have been completed and then the circle representation of the person is displayed in the grid square above. I will try to answer any questions regarding this. repaint() does not immediately repaint the GUI. Rather it posts a message to the AWT thread telling it to paint at the next convenient opportunity. When it gets the chance it will repaint your app. However if you do this in an event handler then the AWT thread is already busy and you need to exit the handler to give control back to the AWT handler. As a general rule of thumb you don't want to do any long-running calculations on the AWT thread (including in event handlers) since these will stop the app from responding to other events until your calculations are done. This will often appear to the user as stuck buttons like you described. To get around this use a SwingWorker which can do the calculations on a separate thread. Finally something to be aware (but not necessarily to change) is that timers and sleeps do not guarantee when they will awaken. Rather they guarantee that they will not waken before the amount of time elapses but can theoretically sleep indefinitely. Also not all machines have 1 ms timer resolution. In particular on many windows machines the timers only have 55 ms resolution so a 20 ms timer may give weird results. Thanks for this useful information. I'm still at very basic testing stages of the game so who knows. I had a brief look at swingworker but it looks really confusing to me :S The SwingWorker is definitely what you want here. Like a lot of Java it's got a steep learning curve but once you figure it out you probably won't need that timer any more.  If you want to repaint at a certain interval javax.swing.Timer is probably the class for you. In the specific case of repaint you can call it from a non-EDT thread but you may get yourself into difficulty as you are now dealing with multiple threads. I believe multiple threads are too complicated for me. I have another question which people should look at as a sort of answer to this issue. I decided on doing logic-repaint-sleep on each tick of a 100ms timer.  I don't have much experience making games but having a loop to control all animation is a fundamental aspect of game programming. Most simple 2d games only have 1 loop to render most of its animation. In my experience a good way to render a whole bunch of stuff is to have a collection of all the entities in your game in one place and just loop over this collection passing the Graphics object to each entity. This will allow each entity to draw itself onto the graphics object. Although this is just one way to do it. synchronized ( entities ) { for ( Entity e : entities ) { e.draw( g ); e.doAction(); } } yes i do indeed do this however when the up button i clicked it is supposed to change the position by -3 upwards using a while loop. The painting doesn't change. I just think i may be doing it slightly wrong. I think I see. It seems to me you are doing the movement of your person in the same thread that the game loop is in. Therefore yes your person does move but during the movement (in the while loop) your main loop is not repainting because it's waiting for the person to move and sleep and move etc. It isn't good practice but you might want to spawn a new thread to do the movement of your person. ok I may be able to do this. If this isn't good practice how should I be doing this? Like I mention in my original post. You should have a loop that calls a method like doAction on your objects that require moving. So on each frame a method will be called on each object and that method will do the work of modifying the X and Y values of itself. Keep doing what you are doing though you need to make mistakes before you can do things correctly. :) ok thanks :) I think i understand but my issue is i dont see how i can implement this into my project. where would i put that loop? also how would the draw work? at current i just have a really big paint method which i know cant be the best way to do this.  Is the button press handled by the event-dispatch thread of your GUI? If this is a case then the repaint method on the GUI will not fire until the event dispatch thread ends (i.e. when the button is released and it breaks out of the loop). I had this problem recently and the best solution I can suggest is to make the class with the movement algorithm threadable and fire off a thread when the keypress is detected. This allows the event-dispatch thread to finish and therefore allows the gui to repaint. For more information on threading see Starting a thread. I'm not sure I understand what you mean in your question. I have not dealt with threading as far as I'm aware. I'm still rather new to java. The previous answer has left some comments which seem helpful I think me using SwingWorker or another thread may be me over complicating things a bit. I am just about to ask a further question in relation to this matter. Thanks for your help I only asked to be sure unless you've done something very esoteric the answer is almost certainly ""yes"". Creating your own threading is an alternative to the SwingWorker suggested above."
372,A,Are there any frameworks for handling database requests in swing applications? I believe any programmer who has been dealing with database requests in a gui application has run into some or all of the following problems: Your GUI freezes because you call database layer from within the event dispatch thread When you have multiple windows/panels/jframes where user can start a db request your performance degrades because you don't have any control about the threads your user creates User may be able to lock down the application and even the database because he calls any action many times before the first action has been finished What I'd like to know about: are there any frameworks that handle the requirements of handling an ordered set of long running actions (including but not limited to database calls i.e. calculations) outside the event dispatch thread? Note: I know of SwingWorker ;-) Such a thing should be found in Netbeans for example. See RequestProcessor. But in simpler cases this is not required. Last time I need something like thread scheduling and control I simply used new concurrency packages included in J5 (I used J6). With its ExecutorFactory-ies you can simply achieve basic control over tasks. You can also use some queues. This PDF can help. The PDF is written in Slovak language but the Single/Multiple task workers are there written in Java ;)  Naked Objects facilitate a clean domain model and they also have a GUI 2 DB mapping layer -- http://www.nakedobjects.org/home/index.shtml  I doubt you will find something specific for database requests. You can try to reuse existing generic task scheduling libraries. An example is the Eclipse jobs API. This does not depend on the IDE. See http://www.eclipse.org/articles/Article-Concurrency/jobs-api.html That has been my impression at the time too. We've developed a kind of queue where you could add SwingWorker instances that would execute in scheduled order.
373,A,"Custom JSpinner I have created the following class that extends JSpinner to iterate over dd/mm/yyy values.  public class DateSpinner extends JSpinner{ Calendar calendar = new GregorianCalendar(); public DateSpinner(){ super(); calendar.add(Calendar.DAY_OF_YEAR 1); Date now = calendar.getTime(); calendar.add(Calendar.DAY_OF_YEAR -2); Date startDate = calendar.getTime(); calendar.add(Calendar.YEAR 100); Date endDate = calendar.getTime(); SpinnerDateModel dateModel = new SpinnerDateModel ( now  startDate  endDate  Calendar.DAY_OF_MONTH ); setModel(dateModel); JFormattedTextField tf = ((JSpinner.DefaultEditor)getEditor()).getTextField(); DefaultFormatterFactory factory = (DefaultFormatterFactory)tf.getFormatterFactory(); DateFormatter formatter = (DateFormatter)factory.getDefaultFormatter(); // Change the date format to only show the hours formatter.setFormat(new SimpleDateFormat(""dd/MM/yyyy"")); } } My problem is when i set its value using  Date today = new Date(); spinner.setValue(today); I get the date including the time and day of the week. if i touch the spinner it formats it according to the format i set. How can i initially get the format i want to be shown. Use built-in editors such as following spinner.setEditor(new JSpinner.DateEditor(spinner ""dd/MM/yyyy""));  Also as a side note - whenever you work with calendars dates and times I would consider using Joda Time."
374,A,"Traversing tree made from DefaultMutableTreeNode We have a tree structure implemented using the DefaultMutableTreeNode specified in Java. Is there any way of traversing it that is inbuilt? If not please suggest other techniques. What do you mean by parsing it? Typically you would parse an expression to build an internal representation (like the tree structure you already have). Do you simply want to traverse the tree? Sorry for that.Yes I meant traversing it. You have in theory four ways to walk the tree from a node (DefaultMutableTreeNode): breadthFirstEnumeration depthFirstEnumeration preorderEnumeration postorderEnumeration but actually depth first is implemented as postorder. The JavaDoc is a bit terse on the differences on these methods. I came here looking for an answer but I ended by doing the test myself with a code looking like:  TreeModel model = tree.getModel(); DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) model.getRoot(); // Just changing enumeration kind here Enumeration<DefaultMutableTreeNode> en = rootNode.preorderEnumeration(); while (en.hasMoreElements()) { DefaultMutableTreeNode node = en.nextElement(); TreeNode[] path = node.getPath(); System.out.println((node.isLeaf() ? "" - "" : ""+ "") + path[path.length - 1]); } I could have refined with indentation proportional to level but it was just a quick hack. So what are the differences? preorderEnumeration = from top of tree to bottom as if you were using the down arrow to walk it postorderEnumeration = depthFirstEnumeration = first list the deepest leafs of the first path then their parent then the deepest leafs of the second path etc. breadthFirstEnumeration = list the elements at the first level then the elements at the second level and so on To be more concrete: + Root + Folder 1 - Leaf F1 - Leaf F1 + Folder 2 + Sub-folder 1 - Leaf SF1 - Leaf SF1 + Sub-folder 2 - Leaf SF2 - Leaf SF2 ♦ Preorder: as shown above ♦ DepthFirst/Postorder: Leaf F1 Leaf F1 Folder 1 Leaf SF1 Leaf SF1 Sub-folder 1 Leaf SF 2 Leaf SF2 Sub-folder 2 Folder 2 Root ♦ BreathFirst: Root Folder 1 Folder 2 Leaf F1 Leaf F1 Sub-folder 1 Sub-folder 2 Leaf SF 1 Leaf SF 1 Leaf SF 2 Leaf SF 2  Correct breadtFirst is inorder. Preorder (First root then children) is supported as well (preorderEnumeration)  Here's another description of the 3 enumeration Methods that may be easier to understand. en = root.breadthFirstEnumeration(); //Enumeration lists all nodes at depth 0 (aka root) //Then all nodes at depth 1 (aka root's children top to bottom ordering) //Then all nodes at depth 2 and so on till max depth reached en = root.preorderEnumeration(); //Imagine your JTree is fully expanded (where each node = a row) //Enumeration will list nodes from top to bottom (regardless of leaf or not) en = root.postorderEnumeration(); //Equivalent to root.depthFirstEnumeration(); //Imagine a fully expanded copy of your JTree (where each node = a row) //This will allow you to visualize what Enumeration List will look like while(treecopy.hasNodes() ) { list 1st leaf sighted going from top to bottom then remove that leaf } //as the leafs are removed branches then become leafs and root is last enumerated. Originally I didn't say what I meant I meant it as a visualization assist but I accidentally said it literally. I've changed it now hopefully it's more clear thanks for the feedback.  If you mean you want to traverse the tree you can call breadthFirstEnumeration() or depthFirstEnumeration() in order to iterate over all nodes in the tree. Example: DefaultMutableTreeNode root = ... Enumeration en = root.depthFirstEnumeration(); while (en.hasMoreElements()) { // Unfortunately the enumeration isn't genericised so we need to downcast // when calling nextElement(): DefaultMutableTreeNode node = (DefaultMutableTreeNode) en.nextElement(); } How do I get access to each node that returned by the search algorithm? Can you point me to a good resource please. I've just added some example code."
375,A,"Accessing a JTextArea in a JScrollPane I have a JTextArea in (multiple) JScrollPane in a JTabbedPane. I need to access the JTextArea. If I didn't have the JScrollPane I could do: JTextArea c = (JTextArea)jTabbedPane1.getComponentAt(i); How would I get it when in a JScrollPane? Cheers Gazler. This line looks complex but I THINK this would do it. JTextArea c = (JTextArea) (((JViewportView) (((JScrollPane) jTabbedPane1.getComponentAt(i)).getViewport()))).getView(); But I think it would be more interesting to store your TextArea's in an ArrayList. So you can do this: List<JTextArea> listAreas = new ArrayList<JTextArea>(); ... JTextArea c = listAreas.get(i); Create a new one is something like this: JTextArea c = new JTextArea(); jTabbedPane1.addTab(""Title"" new JScrollPane(c)); listAreas.add(c); Hope this helps.  I prefer the AppMediator approach but you could also do scrollPane.getViewport().getView()  Sounds like you'll get into a mess of references over there ( at least that's what have happened to me in the past ) . I would suggest you to have a middle object in charge of those dependencies for you and to move the ""business"" methods there. So instead of adding components and losing the references ( or worst duplicating the references all over the place ) you can use this object which will have the reference: class AppMediator { private JTextArea area; private JTabbetPane pane; // etc. public void doSomethingWithText() { this.area.getText(); // etc } } See the Mediator design pattern. The focus is to move all the ""view"" objects from where they are ( usually as references in subclasses ) to a common intermediate object."
376,A,"Visual swing in Eclipse Is there any way I can use a visual editor to make swing applications in Eclipse? I'm using Ganymede. Your options are: WindowBuilder Pro (eclipse.org): ""WindowBuilder is a powerful and easy to use bi-directional Java GUI designer"" see also WindowBuilder Pro on code.google.com. Visual Swing for Eclipse - an editor that works directly with the .java source files. Notes: The update url on the front page is wrong (issue 115) should instead be: http://visualswing4eclipse.googlecode.com/svn/trunk/vs4e/ You have to untick ""Group items by category"" to be able to see the install. The original announcement of visual swing for eclipse. Crashed for me when opening a netbeans-generated swing file. Visual Editor from ehecht.com - someone's own version last updated 2010-08-29: ""prelininary [sic] eclipse 3.6 (helios) version"" (direct download: ve_eclipse_36_win32_201008292115.zip) ""These files are non official builds. So you use it on [sic] your own risk."" Use NetBeans instead Built-in GUI editor Uses an xml file as the source for gui design performing a one-way conversion Adds its own libraries to your project to support GUI creation. Jigloo SWT/Swing GUI Builder for Eclipse and WebSphere - Note: Jigloo is free for non-commercial use but purchase of a Professional License is required for commercial use (after successfully evaluating Jigloo). Options no longer viable / available: Official ""Visual Editor"" archived by eclipse: (Archived: June 2011) the matching install instructions at http://wiki.eclipse.org/VE/Update and the outdated article / tutorial at http://www.eclipse.org/articles/Article-VE-Custom-Widget/customwidget.html see also Is eclipse visual editor dead? This is a summary of all the other answers to this question as it took me a while to make sense of them.  I use Jigloo a fair bit and it is quite good. Can generate GUIs for both Swing and SWT. Free for non-commercial use and pretty affordable at $US85 per developer for commercial use. Works fine with 3.4 (Ganymede). Good link. I will give it a try. +1  this is something better than VE Visual Swing for Eclipse  You could try to install echech's version of VE (Visual Editor). You have here another setup procedure to follow if the first does not work It should work with with eclipse3.4 (Ganymede). Or you could download the original version and install it in a eclipse3.2 setup. It is the only Visual Editor I know knew of which is was free and support Swing. Note: it is an archived Eclipse project since June 2011. tehvan mentions a commercial editor: SwingDesigner (now only WBPro for Smalltalk remains) ""tehvan mentions a commercial editor: SwingDesigner"" <- dead link @TimAbell: true that product is no longer available and I have updated the answer to reflect that.  You may want to give a try at this free Swing visual editor for eclipse. I had not time to give it a run already but that's on my todo list (this editor looks interesting and it is open source)."
377,A,"Java Compilation - Is there a way to tell the compiler to ignore parts of my code? I maintain a Java Swing application. For backwards compatibility with java 5 (for Apple machines) we maintain two codebases 1 using features from Java 6 another without those features. The code is largely the same except for 3-4 classes that uses Java 6 features. I wish to just maintain 1 codebase. Is there a way during compilation to get the Java 5 compiler to 'ignore' some parts of my code? I do not wish to simply comment/uncomment parts of my code depending on the version of my java compiler. I think the best approach here is probably to use build scripts. You can have all your code in one location and by choosing which files to include and which not to include you can choose what version of your code to compile. Note that this may not help if you need finer-grained control than per file.  You can do all of your compiling exclusively on Java6 and then use System.getProperty(""java.version"") to conditionally run either the Java5 or the Java6 code path. You can have Java6-only code in a class and the class will run fine on Java5 as long as the Java6-only code path is not executed. This is a trick that is used to write applets that will run on the ancient MSJVM all the way up to brand-new Java Plug-in JVMs.  You can probably refactor your code so that conditional compile really isn't needed just conditional classloading. Something like this: public interface Opener{ public void open(File f); public static class Util{ public Opener getOpener(){ if(System.getProperty(""java.version"").beginsWith(""1.5"")){ return new Java5Opener(); } try{ return new Java6Opener(); }catch(Throwable t){ return new Java5Opener(); } } } } This could be a lot of effort depending on how many version-specific pieces of code you have.  You can use reflection API. put all your 1.5 code in one class and 1.6 api in another. In your ant script create two targets one for 1.5 that won't compile the 1.6 class and one for 1.6 that won't compile the class for 1.5. in your code check your java version and load the appropriate class using reflection that way javac won't complain about missing functions. This is how i can compile my MRJ(Mac Runtime for Java) applications on windows.  A simple solution could be: Place the divergent classes outside of your normal classpath. Write a simple custom classloader and install it in main as your default. For all classes apart from the 5/6 ones the cassloader can defer to its parent (the normal system classloader) For the 5/6 ones (which should be the only ones that cannot be found by the parent) it can decide which to use via the 'os.name' property or one of your own.  Keep one ""master"" source root that builds under JDK 5. Add a second parallel source root that has to build under JDK 6 or higher. (There should be no overlap i.e. no classes present in both.) Use an interface to define the entry point between the two and a tiny bit of reflection. For example: ---%<--- main/RandomClass.java // ... if (...is JDK 6+...) { try { JDK6Interface i = (JDK6Interface) Class.forName(""JDK6Impl"").newInstance(); i.browseDesktop(...); } catch (Exception x) { // fall back... } } ---%<--- main/JDK6Interface.java public interface JDK6Interface { void browseDesktop(URI uri); } ---%<--- jdk6/JDK6Impl.java public class JDK6Impl implements JDK6Interface { public void browseDesktop(URI uri) { java.awt.Desktop.getDesktop().browse(uri); } } ---%<--- You could configure these as separate projects in an IDE using different JDKs etc. The point is that the main root can be compiled independently and it is very clear what you can use in which root whereas if you try to compile different parts of a single root separately it is too easy to accidentally ""leak"" usage of JDK 6 into the wrong files. Rather than using Class.forName like this you can also use some kind of service registration system - java.util.ServiceLoader (if main could use JDK 6 and you wanted optional support for JDK 7!) NetBeans Lookup Spring etc. etc. The same technique can be used to create support for an optional library rather than a newer JDK.  There is no pre-compiler in Java. Thus no way to do a #ifdef like in C. Build scripts would be the best way. He's suggesting to use s C compiler to run the actual C pre-processor which would output modified source files then run the Java compiler on those. Most if not all C compilers have a switch to run the pre-processor only.  It depends on what Java 6 features you want to use. For a simple thing like adding row sorters to JTables you can actually test at runtime: private static final double javaVersion = Double.parseDouble(System.getProperty(""java.version"").substring(0 3)); private static final boolean supportsRowSorter = (javaVersion >= 1.6); //... if (supportsRowSorter) { myTable.setAutoCreateRowSorter(true); } else { // not supported } This code must be compiled with Java 6 but can be run with any version (no new classes are referenced). EDIT: to be more correct it will work with any version since 1.3 (according to this page).  This will make all the Java purists cringe (which is fun heh heh) but i would use the C preprocessor put #ifdefs in my source. A makefile rakefile or whatever controls your build would have to run cpp to make a temporary files to feed the compiler. I have no idea if ant could be made to do this. While stackoverflow looks like it'll be the place for all answers you could wehn no one's looking mosey on over to http://www.javaranch.com for Java wisdom. I imagine this question has been dealt with there prolly a long time ago.  Not really but there are workarounds. See http://forums.sun.com/thread.jspa?threadID=154106&messageID=447625 That said you should stick with at least having one file version for Java 5 and one for Java 6 and include them via a build or make as appropriate. Sticking it all in one big file and trying to get the compiler for 5 to ignore stuff it doesn't understand isn't a good solution. HTH -- nikki --  The public static final solution mentioned above has one additional benefit the author didn't mention--as I understand it the compiler will recognize it at compile time and compile out any code that is within an if statement that refers to that final variable. So I think that's the exact solution you were looking for.  Assuming that the classes have similar functionality with 1.5 vs. 6.0 differences in implementation you could merge them into one class. Then without editing the source to comment/uncomment you can rely on the optimization that the compiler always do. If an if expression is always false the code in the if statement will not be included in the compilation. You can make a static variable in one of your classes to determine which version you want to run: public static final boolean COMPILED_IN_JAVA_6 = false; And then have the affected classes check that static variable and put the different sections of code in a simple if statement if (VersionUtil.COMPILED_IN_JAVA_6) { // Java 6 stuff goes here } else { // Java 1.5 stuff goes here } Then when you want to compile the other version you just have to change that one variable and recompile. It might make the java file larger but it will consolidate your code and eliminate any code duplication that you have. Your editor may complain about unreachable code or whatever but the compiler should blissfully ignore it. This answer *is* incorrect. The Java 5 compiler will fail to compile the ""Java 6 stuff goes here"" block so you haven't fixed the problem. A better solution would be to have two implementations of an interface one for Java 5 and one for Java 6. Your build tool can then include the right implementation at compile time. Ant could do this easily by using a build property. Is that a documented behaviour of Java compilers? This answer seems incorrect. I did a quick Java app that used java.io.Console and the above approach. The compiler failed in 1.5 with an error like the following: Test.java:8: cannot find symbol: method console() location: class java.lang.System I could see how you could compile in 1.6 and exclude certain runtime features when running in a 1.5 JVM. Of course you would also need to re-compile into 1.5 JVM bytecode format to avoid the ""invalid minor version 49.0"" error. For that approach this solution could work.  You can get conditional compile but not very nicely - javac will ignore unreachable code. Thus if you structured your code properly you can get the compiler to ignore parts of your code. To use this properly you would also need to pass the correct arguments to javac so it doesn't report unreachable code as errors and refuse to compile :-)  The suggestions about using custom class loaders and dynamically commented code are a bit incredulous when it comes to maintenance and the preservation of the sanity of whichever poor soul picks up the project after you shuffle to pastures new. The solution is easy. Pull the affected classes out into two separate independent projects - make sure the package names are the same and just compile into jars that you can then consume in your main project. If you keep the package names the same and the method signatures the same no problems - just drop whichever version of the jar you need into your deployment script. I would assume you run separate build scripts or have separate targets in the same script - ant and maven can both easily handle conditionally grabbing files and copying them. Independent projects are overkill separate source folders and a custom build script will do just fine. Use source folders for src/main with the common codebase and say src/java5 and src/java6 for features dependent on each version."
378,A,How do I fire an action when the user leaves a JTextBox? I've got a JTextField and I'd like the system to do some processing on what the user typed whenever the user leaves the text field. The ActionListener that you can add to just the JTextField only fires when the user presses enter however. I'd like the processing routine to run whenever the user leaves the text box by any means - tabs clicks out of it presses enter etc. (The processing in question is to save the text the user typed to the appropriate data object nothing fancy.) My google-fu has failed on this one: I'm confident that it's possible I just can't see how. If you want to edit the text as it is typed then you should use an DocumentFilter. If you want to validate the text as a complete entity then you can use an InputVerifier.  Add a FocusListener. It's worth noting that this is a relatively low-level listener. On JComboBox it wont work unless you find the text field (and perhaps button) that the particular PL&F inserts. Swing is a bit odd that way (amongst many other ways). Although for my money non-cosmetic changes that happen when focus leaves a field give poor user experience. Much better to do any relevant changes on every change with a listener on the text field's document. For the record the focus listener did exactly what I need it to do. Thanks! Aha! FocusListener is what I was vaguely remembering. The action in question is to save the text the user typed - is that better to do via a listener on the document do you think? Yes but sensibly. You probably want to make sure that you aren't saving the entire document every keystroke. Small rest period between saves (and don't overlap). If the document is large (unlikely with a `JTextField`) then just append to a log most of the time. Having said that moving fields may be a good time to be a bit more urgent about saving.
379,A,how to center image when Jpanel resized How can i center image when i resize jpanel in swing ? my initial state of the Jpanel that its fits the size of the image ( with pack() ) but now when i resize the Jpanel with my mouse i will like to maintain the image in the center of the Jpanel relative to the Jpanel size. Either: Easiest way is probably to use a border layout manager and add a Label with an image to the center. The layout manager will take care of changes. If you wish to draw the image manually (eg on paint()) you need to add a component listener and call repaint() on any component size change. why do i need Label here and border ? can't i just recalculate the size of the image and the Jlable on the resize listener ? Yes you can that's the way described in the second paragraph. I'll edit to make it clear it's two different options. +1 for letting a JLabel handle it for you. Someone's already done all the hard work.
380,A,"Making a JPanel manually resizable I have a JFrame with BorderLayout as the layout manager. In the south border I have a JPanel I want this JPanel's size to be adjustable by the user i.e. the user can click on the edge of the border and drag it up to make it larger. Is there any way you know that I can do this? In order to make panels in a frame individually resizable you need to add them onto a JSplitPane. Instead of putting it in the South portion of the Frame put the JSplitPane in the Center. The split pane will make the bottom panel in the split seem like it is in the South and the top panel in the split will be in the Center of the frame. Make sure you set the orientation of the two panels with setOrientation(JSplitPane.VERTICAL_SPLIT ). Then you can resize the panels that are in the pane.  I think you meant to say JPanel. You can add a custom mouseListener and handle mouse clicks drags and mouse releases and then resize the panel programmaticaly. This will demonstrate this. Note that the jframe does NOT resize automatically with the JPanel. To make the effect more visible i painted the panel red and added a beveled border : import java.awt.BorderLayout; import java.awt.Color; import java.awt.Dimension; import java.awt.Graphics; import java.awt.Point; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import java.awt.event.MouseMotionAdapter; import javax.swing.BorderFactory; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.BevelBorder; @SuppressWarnings(""serial"") public class ResizablePanel extends JPanel { private boolean drag = false; private Point dragLocation = new Point(); public ResizablePanel() { setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED)); setPreferredSize(new Dimension(500 500)); final JFrame f = new JFrame(""Test""); addMouseListener(new MouseAdapter() { @Override public void mousePressed(MouseEvent e) { drag = true; dragLocation = e.getPoint(); } @Override public void mouseReleased(MouseEvent e) { drag = false; } }); addMouseMotionListener(new MouseMotionAdapter() { @Override public void mouseDragged(MouseEvent e) { if (drag) { if (dragLocation.getX()> getWidth()-10 && dragLocation.getY()>getHeight()-10) { System.err.println(""in""); setSize((int)(getWidth()+(e.getPoint().getX()-dragLocation.getX())) (int)(getHeight()+(e.getPoint().getY()-dragLocation.getY()))); dragLocation = e.getPoint(); } } } }); f.getContentPane().setLayout(new BorderLayout()); f.getContentPane().add(thisBorderLayout.CENTER); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); f.setVisible(true); } public static void main(String[] args) { new ResizablePanel(); } public void paintComponent(Graphics g) { g.setColor(Color.red); g.fillRect(0 0 getWidth() getHeight()); } } It's a brilliant solution great if you want to get rid of JSplitPane defaults (e.g. border size of the delimiter). That is way over the top! A simple `JSplitPane` will get the job done. i know. i just answered his question. It is an interesting solution though. the problem is that the jframe does not automatically resize with the panel. i tried pack() in every call (expensive i know) but didn't work. Maybe a different layout manager will do the trick?  You might have to specify JFrame.setResizeable = true; on both the Parent JFrame(the one with the border layout) and the child JFrame. You also might want to use a JPanel in the south border. He needs to resize the panel not the frame"
381,A,Java Swing Combobox with Autocomplete and Context Menu I have auto complete for a JCombobox working by following this article: http://today.java.net/pub/a/today/2007/07/19/adding-auto-completion-to-swing-comboboxes.html I am using the SwingX library. Now I would like to add persistence support to the items in the combo box. Basically when you right click an item a context menu comes up and you can remove the item. The same thing with the delete key. To add an item the user just types a new entry which in not in the list yet. I haven’t found a way to hook up a context menu yet. You can add key listener on combo box to look for delete key. As for the popup you'll have to implement it by yourself.
382,A,"Changing the background color of a paragraph in JTextPane (Java Swing) Is it possible to change the background color of a paragraph in Java Swing? I tried to set it using the setParagraphAttributes method (code below) but doesn't seem to work.  StyledDocument doc = textPanel.getStyledDocument(); Style style = textPanel.addStyle(""Hightlight background"" null); StyleConstants.setBackground(style Color.red); Style logicalStyle = textPanel.getLogicalStyle(); doc.setParagraphAttributes(textPanel.getSelectionStart() 1 textPanel.getStyle(""Hightlight background"") true); textPanel.setLogicalStyle(logicalStyle); UPDATE: I just found out about a class called Highlighter.I dont think you should be using the setbackground style. Use the DefaultHighlighter class instead. Highlighter h = textPanel.getHighlighter(); h.addHighlight(1 10 new DefaultHighlighter.DefaultHighlightPainter( Color.red)); The first two parameters of the addHighlight method are nothing but the starting index and ending index of the text you want to highlight. You can call this method multiple timesto highlight discontinuous lines of text. OLD ANSWER: I have no idea why the setParagraphAttributes method doesnt seem to work. But doing this seems to work.  doc.insertString(0 ""Hello World"" textPanel.getStyle(""Hightlight background"")); Maybe you can work a hack around this for now... Thanks for the reply. The above code works but it changes the background color only if the text is present. I want the background color to be changed even if the text is not present. (Like the background color property in CSS) You specify the tag you are altering the background color of in css. What would you do in a jtextpane? The question is  you have to figure of what demarcates a paragraph for you and set the color no? You can either specify the characters(or predesignated pixel areas if you want) or the whole pane. Or use JEditorPane I think CSS works in JEditorPane... BTW just tried css and even in css you cant have bgcolor without any text in the para. Dunno what exactly you mean... I tried this ` This is a paragraph. The below para doesnt contain any text so its not highlighted... `  I use: SimpleAttributeSet background = new SimpleAttributeSet(); StyleConstants.setBackground(background Color.RED); Then you can change existing attributes using: doc.setParagraphAttributes(0 doc.getLength() background false); Or add attributes with text: doc.insertString(doc.getLength() ""\nEnd of text"" background ); I don't want the entire text pane to be colored. I want only one paragraph to be colored. I tried your approach and it doesn't seem to work. Sure it does. All you need to do is change the start length values. That is read the API to understand how the parameters for each method work."
383,A,"How do you get the screen width in java? Does anyone know how you would get the screen width in java? I read something about some toolkit method but I'm not quite sure what that is. Thanks Andrew You also MUST account for screen insets (see my answer); many people like to move the task bar to one or other side of the screen. Note extra care must be taken when having multiple monitors. Toolkit.getScreenSize(). Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();  Toolkit has a number of classes that would help: getScreenSize - raw screen size getScreenInsets - gets size of toolbar dock getScreenResolution - dpi We end up using 1 and 2 to compute usable maximum window size. To get the relevant GraphicsConfiguration we use GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()[0].getDefaultConfiguration(); but there may be smarter multiple-monitor solutions. Do you mean `GraphicsEnvironment.getDefaultScreenDevice()` ? is the first item in the array `getScreenDevices` **guaranteed** to be the primary monitor? Not specified in the API--better to go with getDefaultScreenDevice? http://download.oracle.com/javase/6/docs/api/java/awt/GraphicsEnvironment.html#getDefaultScreenDevice()  The OP probably wanted something like this: Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();  If you need the resolution of the screen that a certain component is currently assigned to (something like most part of the root window is visible on that screen) you can use this answer.  A good way of detecting whether or not something is within visual bounds is using Screen.getScreensForRectangle(x y width height).isEmpty();  The following code should do it (haven't tried it): GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice gd = ge.getDefaultScreenDevice(); gd.getDefaultConfiguration().getBounds().getWidth(); edit: For multiple monitors you should use the following code (taken from the javadoc of java.awt.GraphicsConfiguration:  Rectangle virtualBounds = new Rectangle(); GraphicsEnvironment ge = GraphicsEnvironment. getLocalGraphicsEnvironment(); GraphicsDevice[] gs = ge.getScreenDevices(); for (int j = 0; j < gs.length; j++) { GraphicsDevice gd = gs[j]; GraphicsConfiguration[] gc = gd.getConfigurations(); for (int i=0; i < gc.length; i++) { virtualBounds = virtualBounds.union(gc[i].getBounds()); } } Nice grab. Been looking for this for days just couldn't find the right search criteria on SO.  You can get it by using the AWT Toolkit.  Toolkit.getDefaultToolkit().getScreenSize().getWidth()  The working area is the desktop area of the display excluding taskbars docked windows and docked tool bars. If what you want is the ""working area"" of the screen use this: public static int GetScreenWorkingWidth() { return java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().width; } public static int GetScreenWorkingHeight() { return java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().height; } this does not work for multi monitor situations  java.awt.Toolkit.getDefaultToolkit().getScreenSize() McCan: returns? @Hydroid http://stackoverflow.com/a/8101318/632951  Here are the two methods I use which account for multiple monitors and task-bar insets. If you don't need the two methods separately you can of course avoid getting the graphics config twice. static public Rectangle getScreenBounds(Window wnd) { Rectangle sb; Insets si=getScreenInsets(wnd); if(wnd==null) { sb=GraphicsEnvironment .getLocalGraphicsEnvironment() .getDefaultScreenDevice() .getDefaultConfiguration() .getBounds(); } else { sb=wnd .getGraphicsConfiguration() .getBounds(); } sb.x +=si.left; sb.y +=si.top; sb.width -=si.left+si.right; sb.height-=si.top+si.bottom; return sb; } static public Insets getScreenInsets(Window wnd) { Insets si; if(wnd==null) { si=Toolkit.getDefaultToolkit().getScreenInsets(GraphicsEnvironment .getLocalGraphicsEnvironment() .getDefaultScreenDevice() .getDefaultConfiguration()); } else { si=wnd.getToolkit().getScreenInsets(wnd.getGraphicsConfiguration()); } return si; } @SoftwareMonkey is there anyway to get the graphicsConfiguration without having to create a new Frame ? @Jan: Not sure what happened here but the original code came directly from compilable working code I had in use in real apps. Anyway it is now updated to use GraphicsEnvironment to get the default (primary) display bounds and insets if the supplied window is null - this eliminates the need for a dummy `Frame`. And again this code is working and in production for Java 4+ (and still currently works in Java 7). @Jan: The only thing I can think is that I made a copy/paste error (my original code *was* wrapped in some try/catch handling in case it was run on an earlier JVM that didn't have the APIs something which used to happen quite often way back). -1: there is no `Toolkit.getDefaultToolkit().getGraphicsConfiguration()` thanks for the correction removed the -1 +1 for showing how to grab the insets. They can be important especially on OS X if you want to have a full size window without overlapping the dock."
384,A,"Java compiler error. Cannot find symbol Why am I getting this error when the SystemController class is in the same directory? sgs$ javac Main.java Main.java:27: cannot find symbol symbol : class SystemController location: class sgs.Main SystemController sc = new SystemController(); ^ Main.java:27: cannot find symbol symbol : class SystemController location: class sgs.Main SystemController sc = new SystemController(); ^ 2 errors package sgs; import javax.swing.JFrame; public class Main { /** * @param args the command line arguments */ public static void main(String[] args) { // TODO code application logic here boolean loginSuccess = false; //Login login = new Login(); //login.setVisible(true); //login.loadAccounts(""files/accounts.txt""); SystemController sc = new SystemController(); sc.setVisible(true); sc.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } } please show an `ls` in the same directory and the `SystemController` class. I suppose a mis-spelling. About.java EditComponent.java Messages.java Account.java FileRead.java NuclearSource.java AddComponent.form FileWrite.java PasswordRecovery.form AddComponent.java Graph.java PasswordRecovery.java BufferedImageBuilder.java Help.java ProduceReport.form Bundle.properties Hub.java ProduceReport.java City.java HydroSource.java SolarSource.java CoalSource.java ImagePanel.java Sound.java Console.java Login.form Source.java DeleteComponent.form SystemController.form DeleteComponent.java SystemController.java Edge.java Login.java Vertex.java Main.java WindSource.java not sure what it was but I create another class called Main2 which the main file in it and now it works fine if I compile that class. Weird I know.... the code is exactly the same. main method I mean not main file My guess is that you didn't compile SystemController on which Main depends. So either compile manually SystemController before to compile Main (but that will be painful on the long term if the number of classes grows) or compile everything together and let the compiler calculates the compilation order (better IMO). Something like this:  $ pwd /path/to/sgs $ cd .. $ javac sgs/*.java $ java -cp . sgs.Main EDIT: From the error you posted as comment I can see that you are using GNU GCJ which doesn't fully support Swing. Please switch to Sun JDK or OpenJDK. Both should be available as package just make sure to make it the default Java after install (see https://help.ubuntu.com/community/Java for Ubuntu or a Debian based distro find out how to do this for another distro). I'm using netbeans.... it compiles fine from the IDE java sgs.Main Exception in thread ""main"" java.lang.NoClassDefFoundError: sgs.SystemController at java.lang.Class.initializeClass(libgcj.so.10) at sgs.Main.main(Main.java:27) Caused by: java.lang.ClassNotFoundException: javax.swing.GroupLayout not found in gnu.gcj.runtime.SystemClassLoader{urls=[file:./] parent=gnu.gcj.runtime.ExtensionClassLoader{urls=[] parent=null}} at java.net.URLClassLoader.findClass(libgcj.so.10) at gnu.gcj.runtime.SystemClassLoader.findClass(libgcj.so.10) at java.lang.ClassLoader.loadClass(libgcj.so.10) at java.lang.ClassLoader.loadClass(libgcj.so.10) I think that Netbeans uses its own JDK which is not the same that you are using on the command line (you are using `gcj`). Typing `java -version` in a console would confirm this. I've edited my answer to provide more guidance. OK so I updated my java version. java version ""1.6.0_16"" Java(TM) SE Runtime Environment (build 1.6.0_16-b01) Java HotSpot(TM) Server VM (build 14.2-b01 mixed mode) However when I compile all java files get a .class file but the SystemController.java file gets 13 different class files. Because it's a Swing class created by a designer and it contains many inner classes which is very common in Swing code. But... so what? :)  Have you compiled SystemController ? try javac *.java Also remember to specify your classpath where the Swing classes are. javac -cp classpath *.java javac *.java Note: Login.java uses or overrides a deprecated API. Note: Recompile with -Xlint:deprecation for details. Although that compiled everything but it still get the same error stated in my original post"
385,A,Detecting drops from the same process Is it possible for a class implementing DropTargetListener to detect whether the stuff being dragged comes from the same process of from elsewere? In general no. Marker DataFlavor is possible. In general in DnD there is no need to know if I'm in or out. If I can convert data into way I can handle then it is OK. Else I'm not interested.  If you check the DataFlavor of the drop event you can look to see if it contains a DataFlavor of javaJVMLocalObjectMimeType. As long as your app always provides that DataFlavor then you'll know the source of the event was your app. If that doesn't work for you you could create a marker mime type and DataFlavor that your app can attach to any of it's drag sources.
386,A,How to avoid flickering effect while jumping from one jdialog to another jdialog Hi I have created two jdialog box. from first jdialog box i call to second jdialog box. I have arranged my component at the center. But when i click on next button my program calls the second jdialog but within that period (for a fraction of second i found some flickering effect means some jdialog is displayed at the left top of my screen. its for fraction of second. I think it may be flickering effect. so how to avoid this problem. Thanks Sunil KUmar Sahoo [-1] - it might have been an interesting question but the way it is edited makes it impossible to read. Please have some respect for people you expect help from... i have posted the complete code but i donot know how it display like above You probably display the second dialog before you set its location. So instead of doing : dialog.setVisible(true); dialog.setLocationRelativeTo(null); do this : dialog.setLocationRelativeTo(null); dialog.setVisible(true);  If one dialog opens another it might make more sense to use something like a Wizard instead. Then you avoid flickering altogether as you would change the contents on the component of the one and only dialog that you show on the screen. The downside is that of course it will be a little bit harder to implement but not much. The following link contains the information about creating a wizard: http://java.sun.com/developer/technicalArticles/GUI/swing/wizard/
387,A,? \n? a line break in java I have three JLabels and three JTextAreas. I have them in borderlayout center but I want each of them in a different line that's not happening and the top ten search results in Google for line break java don't solve the problem. How can I do a simple line break? can you show how you are adding your components to your JPanel? mainPanel.add(aLabel); mainPanel.add(aScroller); mainPanel.add(bLabel); mainPanel.add(bScroller); mainPanel.add(cLabel); mainPanel.add(cScroller); It worked like this: mainPanel.setLayout(new BoxLayout(mainPanel BoxLayout.PAGE_AXIS)); You can use layout managers like GridLayout or GridBagLayout. Even though the latter one is only recommended for code generated by GUI generators I prefer it because it gives me the most flexibility. JPanel panel = new JPanel(); GridBagLayout layout = new GridBagLayout(); panel.setLayout(layout); layout.add(label1 new GridBagConstraints(0 0 1 1 1 1 GridBagConstraints.CENTER GridBagConstraints.BOTH new Insets(0 0 0 0) 0 0)); layout.add(area1 new GridBagConstraints(1 0 1 1 1 1 GridBagConstraints.CENTER GridBagConstraints.BOTH new Insets(0 0 0 0) 0 0)); layout.add(label2 new GridBagConstraints(0 1 1 1 1 1 GridBagConstraints.CENTER GridBagConstraints.BOTH new Insets(0 0 0 0) 0 0)); layout.add(area2 new GridBagConstraints(1 1 1 1 1 1 GridBagConstraints.CENTER GridBagConstraints.BOTH new Insets(0 0 0 0) 0 0)); layout.add(label3 new GridBagConstraints(0 2 1 1 1 1 GridBagConstraints.CENTER GridBagConstraints.BOTH new Insets(0 0 0 0) 0 0)); layout.add(area3 new GridBagConstraints(1 2 1 1 1 1 GridBagConstraints.CENTER GridBagConstraints.BOTH new Insets(0 0 0 0) 0 0)); panel.add(label1); panel.add(label2); panel.add(label3); panel.add(area1); panel.add(area2); panel.add(area3); Of course this looks butt-ugly but should get you started. You can also abuse a BorderLayout: JPanel panel = new JPanel(new BorderLayout()); JPanel topRow = new JPanel(); panel.add(topRow BorderLayout.PAGE_START); topRow.add(label1); topRow.add(area1); JPanel middleRowBox = new JPanel(new BorderLayout()); panel.add(middleRowBox BorderLayout.CENTER); JPanel middleRow = new JPanel(); middleRowBox.add(middleRow BorderLayout.PAGE_START); middleRow.add(label2); middleRow.add(area2); JPanel bottomRowBox = new JPanel(); middleRowBox.add(bottomRowBox BorderLayout.CENTER); JPanel bottomRow = new JPanel(); bottomRowBox.add(bottomRow BorderLayout.PAGE_START); bottomRow.add(label3); bottomRow.add(area3); bottomRowBix.add(new JPanel() BorderLayout.CENTER); After building a LOT of UI components I only use GridBagLayout anymore - yes it is a little more work but you can be guaranteed if you do things right that your view will scale appropriately. After building a LOT of UI components we don't use GridBagLayout anymore - yes it gives you some nice cell scaling and alignment options but there's nothing you can't do with some panels with simpler LayoutManagers and refactoring can be a pain. And if you do things wrong you can spend an hour finding a singular false setting.  Line break won't help with placing Swing objects; you need to place a layout on a center JPanel. That is the center of your border layout should be a single Swing object a JPanel and you should set that to a style which allows you to stack each widget. GridLayout(61) may do it.  If this is a Swing application you should use a layout manager to position your fields in the container.  Try using a GridLayout for starters: panel.setLayout(new GridLayout(02)); // the order of added components is important panel.add(labelA); panel.add(textAreaA); panel.add(labelB); panel.add(textAreaB); ... Doesn't look too pretty but it gets you started. If you don't set a LayoutManager to a new panel it will use a FlowLayout which behaves somewhat like HTML layout. But there is no such thing as an intended line break in a FlowLayout. It will just put component after component until it reaches the end of the available space and then start a new row. If you want control over your layouts - don't use FlowLayout. Layout managers you might want to get to know are: BorderLayout - very good if you want resizeable content GridLayout - simple equals width and height grid null - allows you to use setBounds on each component to get absolute positions There are more but these three should allow you to layout 95% of your panels.
388,A,"Java Menu issue I have a menu with a few JCheckBoxMnuItems. How do I ensure that the Menu stays open until I have done all my selections (i.e. checked the menuitems) and does not close on just clicking one of them? I agree that it is better to do this with standard UI. However if do you want to add checkboxes that do not close the menu it is surprisingly easy: JCheckBox checkBox = new JCheckBox(""Text""); checkBox.setOpaque(false); checkBox.setRequestFocusEnabled(false); menu.add(checkBox); This may not work on every look and feel and the check boxes will not line up with menu items in the same manner as JMenuItems but it seems to be a reasonable place to start.  I'd rather not try to change the normal menu behavior for an application or for a part of the menu tree. A User expects that the menu closes automatically after a menu item is clicked. And if you kept the menu expanded what kind of action would you invent to close it manually after you've done your last selection? If there's a requirement to change more then one setting within one use case then you should consider to provide a small dialog where the use can apply the changes and confirm them at once. I believe that's more consistent with typical behaviors of UIs. And it declutters the menu bar you'll have just one 'setup' menu item instead of a dozen (?) check box actions :) Thanks for retranslating my posting to make points more clearly. What would I do without your help? ;) Ah com'on I just didn't read you answer carefully. After the post I realized that it was exactly your advise but I didn't want to delete it. +1 from me for your answer :) After reading *your* post more carefully I just realized one must be more explanatory when answering questions.  I guess menu's aren't supposed to allow multi-selection. But you may offer keyboard shortcuts to set the menuitems without using the menu at all. If the set-operation of your flags is a central aspect in your application I would tend to use a dialog here. These are all suggestions which do not require to change the internal implementation of the existing controls even though I know that it would be possible in swing."
389,A,How to implement JSplitPane in the BorderLayout? HI how can i use the JSplitPane so that they show up in the borders of a BorderLayout??? So that i can resize each sise (NORTH EAST WEST SOUTH CENTER). Thanks Well for that you don't really need BorderLayout. You can add the split panes together for that effect. Because JSplitPane only supports splitting of 2 components you need 2 JSplitPane vertically and 2 JSplitPane inside the second vertical JSplitPane. JSplitPane horizontal1 = new JSplitPane( JSplitPane.HORIZONTAL_SPLIT yourCenterPanel yourEastPanel); JSplitPane horizontal2 = new JSplitPane( JSplitPane.HORIZONTAL_SPLIT yourWestPanel horizontal1); JSplitPane vertical1 = new JSplitPane( JSplitPane.VERTICAL_SPLIT horizontal2 yourSouthPanel); JSplitPane vertical2 = new JSplitPane( JSplitPane.VERTICAL_SPLIT yourNorthPanel vertical1); whateverPlaceYouWant.add(vertical2);
390,A,Eclipse Java project error: cannot resolve declaration in swing I get the following error in Eclipse: DISPOSE_ON_CLOSE cannot be resolved something.java javadir/src/ line xxxx Java Problem DISPOSE_ON_CLOSE is in javax.swing but even when I add import javax.swing.*; it doesn't work. Any ideas? DISPOSE_ON_CLOSE is not directly in javax.swing.* but in WindowConstants interface so you need to use WindowConstants.DISPOSE_ON_CLOSE.  Start with a fully qualified reference: javax.swing.WindowConstants.DISPOSE_ON_CLOSE then when you have time read this section on static import
391,A,"Create a ImageIcon that is the mirror of another one I'll like to know if there is a way to create a ImageIcon that is the mirror of another ImageIcon. Searching on Google I found how to do it by using many AWT libraries. Is there a way to do it with Swing ? If not I'm still having troubles with the AWT method : The ImageIcon I want to mirror is a animated gif (with contain a transparent color) and the AWT method returns a non-transparent (the transparent color is changed to opaque black) and non-animated gif. Any ideas how to keep the animation and the transparent color? Here is the AWT code I found (rangerStand being the original ImageIcon) :  Image reversed = rangerStand.getImage(); BufferedImage bufferedImage = new BufferedImage(reversed.getWidth(null) reversed.getHeight(null) BufferedImage.TYPE_INT_RGB); Graphics gb = bufferedImage.getGraphics(); gb.drawImage(reversed 0 0 null); gb.dispose(); AffineTransform tx = AffineTransform.getScaleInstance(-1 1); tx.translate(-reversed.getWidth(null) 0); AffineTransformOp op = new AffineTransformOp(tx AffineTransformOp.TYPE_NEAREST_NEIGHBOR); bufferedImage = op.filter(bufferedImage null); ImageIcon lol = new ImageIcon(bufferedImage); this.sprite.setIcon(lol); Thanks for reading. No idea on how to solve the problem with native Swing or AWT - although Java supports GIF89a with transparency and animation. I guess you have to unpack the GIF89a mirror the animation images one-by-one and repack. There's at least one library that you could give a try: gif4j light  First of all the image support in Swing is based on AWT so ""doing it with Swing"" does not make much sense. Except for that you have two problems: Keeping the transparency and keeping the animation. The first issue is simple to solve. With BufferedImage.TYPE_INT_RGB you are creating a new BufferedImage without an alpha channel (transparency information). If you change the type to BufferedImage.TYPE_INT_ARGB that issue should be fixed. The animation bit is quite a bit harder. An Image or a BufferedImage does not really support animation but using an animated GIF as a source and displaying the Image in a GUI component causes a kind of non-disclosed interaction between the image and the GUI component causing the animation to be shown. The way you copy the original image to a BufferedImage will probably cause the single frame which is currently displayed to be copied into the BufferedImage. It's more than two lines of code but you can use the ImageReader in javax.imageio to read each single frame of the animated GIF and ImageWriter to create a new animated GIF from the mirrored images.  You might want to try and subclassing the ImageIcon class and paint the image reversed. Try this piece of code it might do the trick (i haven't tried with animated transparent gif but it should work): EDIT: I slightly changed the code and tested it with an animated gif. It works! import java.awt.Component; import java.awt.Graphics; import java.awt.Graphics2D; import javax.swing.ImageIcon; import javax.swing.JFrame; import javax.swing.JLabel; /** * @author Savvas Dalkitsis */ public class Test { public static void main(String[] args) { JFrame f = new JFrame(""Test""); JLabel l = new JLabel(); ImageIcon io = new MirrorImageIcon(""test.gif""); l.setIcon(io); f.getContentPane().add(l); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); f.setVisible(true); } } @SuppressWarnings(""serial"") class MirrorImageIcon extends ImageIcon { public MirrorImageIcon(String filename) { super(filename); } @Override public synchronized void paintIcon(Component c Graphics g int x int y) { Graphics2D g2 = (Graphics2D)g.create(); g2.translate(getIconWidth() 0); g2.scale(-1 1); super.paintIcon(c g2 x y); } } Nice. Didn't think this was applicable to animated gifs. +1 for the original way to solve this problem 'ImageIcon lolimg = new MirrorImageIcon(""Images/Sprites/Ranger/stand.gif""); JLabel lolabel = new JLabel(lolimg); lolabel.setBounds(160 16 16); panel.add(lolabel);' panel = getContentPane() of my JApplet. The JLabel is empty. What am I doing wrong ? hm... i don't really know... try without setting the bounds manually and using a layout manager. Maybe that will work. Did you try my code as-is? Try it using the image ""Images/Sprites/Ranger/stand.gif"" and if that doesn't work as well something else is wrong... when you say ""panel = getContentPane() "" are you assigning the content pane of your panel to your reference ""panel""? Because you should be doing it the other way around. try setContentPane(panel) I just added the class MirrorImageIcon. I can use the image with the normal ImageIcon method. The image doesn't appear with a layout manager either. No sorry my mistake : panel is a JLayeredPane() added to the getContentPane() and I add every of my components to it. and did my code work on it's own? try copy - paste my code on it's own file and compile it. see if it works. Ok got it to work : I was using a Java.net.URL instead of a String for the filename. >.< Thank you very much for your solution. Btw you can override all the default ImageIcon constructors and simply delegate to them from MirrorImageIcon so you can use the URL as well..."
392,A,Stop a jframe requesting focus I have a small application that updates the contents of a JFrame very quickly (many times per second) and on each update (I remove a component and then add a new one then set visibility true again) the JFrame flashes on the Taskbar (WinXp) to request focus. It's very annoying and I'm sure it can be disabled. I just cant find out where. Any ideas? Am I understanding you correctly You do something like frame.remove(cold); frame.add(cnew); frame.setVisible(false); frame.setVisible(true); Instead of doing this try using frame.remove(cold); frame.add(cnew); frame.validate() My swing is rusty but shouldn't that be invalidate() ? Care to explain why? Only subcomponents of the JFrame have changed. Why should I mark the JFrame itself and all of its parents as invalid?  I remove a component and then add a new one The better solution would be to simply update the existing component. Swing components are designed to repaint themselfs when there properties and data are changed.
393,A,Swing application problem I'm developing Swing application and everything works fine usually. But I have an GUI issue. When I run the application and for example minimize some other window my application is still working but the central part of JFrame is invisible or hidden. After finishing some part of program logic the GUI repaints and is visible again. This will continue until the program finishes running. Is there any API for preventing this behavior or some class for forcing the GUI visible or maybe to add some progress bar? If someone need this information I'm testing this on Windows Vista with java 1.6. It sounds to me like you are doing some sort of slow IO or calculations that are causing your GUI to become unresponsive. What you need to do is do the long running processes in another thread. The standard way of doing that is with a SwingWorker class. The Java tutorials have some great resources and tutorials on how to properly use the SwingWorker. Here and here is a link to another question that I believe may be similar. This behavior you are seeing is a result of your long running process blocking the thread that the GUI uses to repaint itself. Thus while your task is performing the GUI is unable to repaint your JFrame and it becomes unresponsive. Yes I make some slow IO calculations thanks for respond. There are some cases where Swing forgets to repaint itself when the window area becomes dirty under Windows. Have a Swing Timer run in every couple of seconds and issue a repaint() to the window. When a window becomes reactivated (regains focus) it will repaint itself by default. Adding a timer may help but the GUI can't repaint itself if the thread is blocked. My case did not involve any EDT blocking operation. I guess it was related to some 'properties' of the underlying d3d pipeline.  Just like jinguy says you are most likely doing a task that takes a long time to complete and needs to be put in a background thread. Have a look at the Java Sun Concurrency in Swing Tutorial for more information on how to do this correctly.  It seems you need to perform your long running business operations in a separate thread. I suggest you use a SwingWorker. Check this simple example.
394,A,Canvas3D not appearing in Swing window I am attempting to insert a Canvas3D object inside a Swing JPanel but the code doesn't seem to be working (i.e. nothing happens):  Canvas3D canvas = new Canvas3D(SimpleUniverse.getPreferredConfiguration()); SimpleUniverse universe = new SimpleUniverse(canvas); BranchGroup root = new BranchGroup(); root.addChild(new ColorCube()); universe.addBranchGraph(root); universe.getViewingPlatform().setNominalViewingTransform(); canvasPanel.add(canvas); What am I missing? The JPanel was created using NetBean's Visual Editor. Canvas3D needs a size passed to it; setting the preferred configuration from SimpleUniverse is not enough. In my case that meant this code:  // 3D canvas initialization Canvas3D canvas = new Canvas3D(SimpleUniverse.getPreferredConfiguration()); SimpleUniverse universe = new SimpleUniverse(canvas); BranchGroup root = new BranchGroup(); root.addChild(new ColorCube()); universe.addBranchGraph(root); universe.getViewingPlatform().setNominalViewingTransform(); canvas.setSize(100 100); canvasPanel.add(canvas);  Probably you have to set a layout manager on the panel which automatically expands the child components to the full area. A JPanel has a FlowLayout by default which does not expand the child components. You could try a BorderLayout instead by calling: canvasPanel.setLayout(new BorderLayout()); Ah that worked perfectly. Thank you!
395,A,"Java: Getting resolutions of one/all available monitors (instead of the whole desktop)? I have two different-sized monitors connected together using (I believe) TwinView. I tried System.out.println(Toolkit.getDefaultToolkit().getScreenSize()); and get java.awt.Dimension[width=2960height=1050] which is true if you count both monitors together. Instead of this I would like to be able achieving one of the following: getting resolution of the current monitor getting resolution of the main monitor you'll want to use the GraphicsEnvironment. In particular getScreenDevices() returns an array of GraphicsDevice objects from which you can read the width/height of the display mode. Example: GraphicsEnvironment g = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] devices = g.getScreenDevices(); for (int i = 0; i < devices.length; i++) { System.out.println(""Width:"" + devices[i].getDisplayMode().getWidth()); System.out.println(""Height:"" + devices[i].getDisplayMode().getHeight()); } thank you very much!"
396,A,Add an SWT widget to a swing JPanel I understand that this may be impossible but I would sure like to know if somebody has accomplished this or have a work-around. I have an SWT Button and am wanting to overwrite an existing JPanel's contents with just the Button being present. My current strategy is to have the SWT Button as an initial null field and then set it through a method which will refresh the JPanel with the SWT Button. Button ibutton = null; The following is taken from my constructor (class extends JPanel): ibutton.addListener(SWT.Selection new Listener() { public void handleEvent(Event e) { switch (e.type) { case SWT.Selection: } } }); add(ibutton); //add is the usual swing assignment function // and thus does not work. If there is another means to acheive this I would be more than grateful to hear what you have. I have since found this class that can possibly help my cause: http://mobius.inria.fr/eclipse-doc/org/eclipse/swt/awt/SWT_AWT.html I am still fairly unsure on how to implement it however. I would appreciate some guidance. You have to do something like this: Canvas canv = new Canvas(); add(canv);//add to ur parent container Shell shell = SWT_AWT.new_Shell(display canv); shell.add(ibutton); There are following points to be noted since you seem to be new to the SWT_AWT bridge: The parent should have been displayed(peer should be created) by the time the above code is called. A parallel thread should be reading and dispatching events from the display. Please can you elaborate 1 and 2 cause I'm having exception on this?
397,A,Setting Scroll Bar on a JScrollPane I have this JTextPane (wrapped in a JScrollPane) that is backed by a HTMLEditorKit. The contents of the JTextPane is simple HTML with some images (local files) embedded using img tags. The problem is that when you load the the JTextPane it takes a split second to load and then it comes up with the scroll bar at the bottom of the page. If I do: JTextPane text = new JTextPane(); JScrollPane scroll = new JScrollPane(text); // do some set up... scroll.getVerticalScrollBar().setValue(0); it sets the scroll bar momentarily and then another thead (presumably that is in charge of loading the images) comes and knocks the scroll bar back to the bottom. I tried adding: ((AbstractDocument)text.getDocument()).setAsynchronousLoadPriority(-1); but that did not fix it. Is there any way to get an event from either text.getDocument() or text that will notify me when the pane is finished loading so that I can set the scroll bar then? The alternative is that I set up another thread to wait a second or so and then set the scroll bar but this is a bad hack. Your suggestions? Have you tried using invokeLater? final JScrollPane scroll = new JScrollPane(text); javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { scroll.getVerticalScrollBar().setValue(0); } }); If that doesn't work digging into the image views is pretty tough so my next step would be to track down why the scrollbar is changing: scroll.setVerticalScrollbar(new JScrollBar() { public void setValue(int value) { new Exception().printStackTrace(); super.setValue(value); } }); You could also use a debugger in the setValue() method instead of just printing the stack trace. First solution works thanks. Why on Earth isn't there a method to set this without having to call SwingUtilities? No idea. I think the way it's designed is you have to create the JScrollPane add it to the screen and _then_ set the value. Makes no sense to me.  Is your app single threaded by any chance? If it is you can request a list of running threads and get notified when they finish and then set the scrollbar value. Is that an option? Or you can provide an ImageObserver to every image loaded and set the position of the scrollbar when all images are reported loaded? Swing applications rely on a thread called the Event Dispatch Thread to control all GUI actions. You can get around this if you need to but all the work I am doing right now is on the Event Dispatch Thread. This could be considered an option but is probably just as bad a hack as what I proposed in my question. I will keep it in mind though. the ImageObserver might work then...
398,A,"Making a component less sensitive to Dragging in Swing A JComponent of mine is firing a mouseDragged event too vigorously. When the user is trying to click it interprets is as a drag even if the mouse has only moved 1 pixel. How would I add a rule for a particular component that amounted to: Do not consider it a drag event unless the mouse has moved 10 pixels from the point at which is was pressed down. Note: I know it's not a system setting in my OS since only events on that component suffer from this over sensitivity. Thank you. If I read your question correctly you're tracking both click and mousedrag events. Can you track the coordinates upon mousedown followed by a short computation in mousedrag to see if the mouse has moved your desired minimum numbers of pixels? Of course you then also want to cancel/reset on mouseup or when the mouse is dragged outside the bounds of your JComponent. Caveat: I haven't done this myself but I think it's where I'd start if it were me.  Previous answers combined together with proper event type: public class DragInsensitiveMouseClickListener implements MouseInputListener { protected static final int MAX_CLICK_DISTANCE = 15; private final MouseInputListener target; public MouseEvent pressed; public DragInsensitiveMouseClickListener(MouseInputListener target) { this.target = target; } @Override public final void mousePressed(MouseEvent e) { pressed = e; target.mousePressed(e); } private int getDragDistance(MouseEvent e) { int distance = 0; distance += Math.abs(pressed.getXOnScreen() - e.getXOnScreen()); distance += Math.abs(pressed.getYOnScreen() - e.getYOnScreen()); return distance; } @Override public final void mouseReleased(MouseEvent e) { target.mouseReleased(e); if (pressed != null) { if (getDragDistance(e) < MAX_CLICK_DISTANCE) { MouseEvent clickEvent = new MouseEvent((Component) pressed.getSource() MouseEvent.MOUSE_CLICKED e.getWhen() pressed.getModifiers() pressed.getX() pressed.getY() pressed.getXOnScreen() pressed.getYOnScreen() pressed.getClickCount() pressed.isPopupTrigger() pressed.getButton()); target.mouseClicked(clickEvent); } pressed = null; } } @Override public void mouseClicked(MouseEvent e) { //do nothing handled by pressed/released handlers } @Override public void mouseEntered(MouseEvent e) { target.mouseEntered(e); } @Override public void mouseExited(MouseEvent e) { target.mouseExited(e); } @Override public void mouseDragged(MouseEvent e) { if (pressed != null) { if (getDragDistance(e) < MAX_CLICK_DISTANCE) return; //do not trigger drag yet (distance is in ""click"" perimeter pressed = null; } target.mouseDragged(e); } @Override public void mouseMoved(MouseEvent e) { target.mouseMoved(e); } }  Software Monkey's code seemed to be missing some code so I wrote this solution: navigationTree.addMouseListener(new DragInsensitiveMouseClickListener(10) { @Override public void mouseClicked(MouseEvent e) { TreePath treePath = navigationTree.getPathForLocation(e.getX() e.getY()); if(treePath != null) { processChoice(); } } }); This will still fire the mouseClicked() event when the user produces at most 10 pixels of ""drag travel"". The code for the click listener: import java.awt.Point; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; public class DragInsensitiveMouseClickListener extends MouseAdapter { private final int allowedTravel; public Point mouseDownPoint; public DragInsensitiveMouseClickListener(int allowedTravel) { this.allowedTravel = allowedTravel; } @Override public void mousePressed(MouseEvent e) { mouseDownPoint = e.getPoint(); } @Override public void mouseReleased(MouseEvent e) { double horizontalTravel = Math.abs(mouseDownPoint.getX() - e.getX()); double verticalTravel = Math.abs(mouseDownPoint.getY() - e.getY()); if (horizontalTravel < allowedTravel && verticalTravel < allowedTravel) { mouseClicked(e); } } }  I've had to do exactly this before. Here's my mouse event processing code cut down to just the bits relating to making drag require a few pixels before being treated as a drag. public void mousePressed(int mod Point loc) { pressLocation=copyLocation(locpressLocation); dragLocation=null; } public void mouseReleased(int mod Point loc) { if(pressLocation!=null && dragLocation!=null) { // Mouse drag reverted to mouse click - not dragged far enough // action for click pressLocation=null; } else if(dragLocation!=null) { // action for drag completed } else { // do nothing } pressLocation=null; dragLocation=null; } public void mouseDragged(int mod Point loc) { if(pressLocation!=null) { // initial drag actions following mouse press dragLocation=pressLocation; // consider dragging to be from start point if(Math.abs(loc.x-pressLocation.x)<dragMinimum && Math.abs(loc.y-pressLocation.y)<dragMinimum) { return; // not dragged far enough to count as drag (yet) } // action drag from press location pressLocation=null; } else { // action drag from last drag location dragLocation=copyLocation(locdragLocation); } } And note I also had problems with Java some JVM's generating click events after dragging which I had to detect and suppress."
399,A,"Changing the Contents of the JComboBox I would like to change the contents of the list of a JComboBox (like adding another list in place of and older one). Is there any way I might be able to do that? Thanks in advance! i need this answer also. Eventough I used JCombobox(newData); again and again previously. But it seems overwhelming. Thanks @AndreiC. :D Of course you can. There are several methods for manipulating JComboBoxes using the default list model. Have a look at the remove* methods and add* methods: http://java.sun.com/javase/6/docs/api/javax/swing/JComboBox.html  You can also replace the model in its entirety with setModel(). But after writing more and more user interfaces I find it more useful to write a custom ComboBoxModel to wrap the data structure the ComboBox is presenting. This is more unit testable and cleaner IMHO. Unfortunately not everything copes seemless with the model changing.  The Glazed Lists library is mighty helpful when you want to wire any sort of mutable list to a GUI control. It's a large-ish library which may not be appropriate for your project but take a look at their screencasts and judge for yourself. It supports a lot of related stuff like filtering and auto-completion and can save you a lot of manual work.  I found this thread and came up with a quick (and probably dirty) solution: oldComboBox.setModel(new JComboBox<>(new_items).getModel()); dirty indeed - longest distance away from the straightforward solution I have ever seen (and I _have_ seen quite a lot creativity in doing things wrong is huge :-) plus there already was an accepted solution to this question. any reason why you think that wasn't reasonable and why the OP/ community would benefit from this (3 years after the solution was accepted) ? I didn't read the answers thoroughly - lesson learnt. It's a rubbish solution for replacing the model - which was already suggested and can be done more gracefully Why do you say this is a bad answer? Unlike the others I think this is a quite clever answer! Thank you @pal. @pal upsetting two beauty queens is not that good :D @Mehran I thank pal for posting this solution because it should work. However the other comments are right to point out that it is a ""dirty"" fix and not a straightforward one. Resetting the entire model for a JComboBox is close to asking the GUI to completely remake that JComboBox. It would be better for the program to use the MutableComboBoxModel mentioned in the accepted answer which allows the program to edit the existing JComboBox instead of doing this which is the equivalent of scratching out most of the JComboBox's data and re-creating it.  If you want to be able to add and remove items from an existing combo box at runtime the underlying data model for the combo box needs to be a MutableComboBoxModel Google for that class for interface information and for examples of how to use it. Note that if you want the user to type in new values you also need to make the box editable. You can find some links to examples here."
400,A,"Creating Dynamic JTrees (Controlling Root Node Visibility) I have a question about how to dynamically generate JTrees. Is there a way to set the Root Node invisible without making its children invisible too? I have tried to do the following but it shows all nodes as invisible. Keep in mind that I want to add and remove children of the Root Node at any point in time. I've added comments so you can follow what I intend to do. Let me know if they are doing something I dont need as I am new to JTrees and don't know the conventions. I would also like to be able to select multiple children for the listener.  DefaultMutableTreeNode rootNode; rootNode = new DefaultMutableTreeNode(); //I want this invisible. DefaultTreeModel treeModel = new DefaultTreeModel(rootNode); JTree tree = new JTree(treeModel); treeModel.addTreeModelListener(this); tree.setRootVisible(false); // Sets everything invisible tree.setEditable(true); //makes tree dynamic tree.setShowsRootHandles(true); //supposedly allows you to see the children of the nodes. tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION); //I would like the line above to be multi-select; however this doesn't seem to be an option. DefaultMutableTreeNode table = new DefaultMutableTreeNode( ""table1""); rootNode.add(book); DefaultMutableTreeNode value = new DefaultMutableTreeNode( ""value""); table.add(value); In the above example. Nothing is shown and when I remove the ""tree.setRootVisible(false)"" everything is visible including the node. If you make the root invisible it's (visually) not there any more. So what are the child nodes going to hang off? The concept doesn't make sense to me. I would like to have multiple ""root nodes"". The problem is that if no tables are loaded I don't want anything to be showing. And if a table is loaded I only want to see that table and its contents. If multiple tables are open I only want to see them. I don't want a ""Root Table"" with zero functionality to be constanty visible. A very late answer but I have just had the same problem. Ensure to expand your root node so that its children become visible : yourTree.expandPath(new TreePath(root.getPath()))  I'd say the difference between the code in the question and in the TreeDemo is that the tree demo creates and adds all its nodes before creating the actual tree. If the nodes are to be added dynamically (after the tree is created) it should be done through the TreeModel. Otherwise no events saying the tree has changed will be generated. At least that is what the tutorial seems to say about editing the node's ""content"" might be the same issue: Note that although DefaultMutableTreeNode has methods for changing a node's content changes should go through the DefaultTreeModel cover methods. Otherwise the tree model events would not be generated and listeners such as the tree would not know about the updates. Someone's solution  Works fine for me. I based my tests on the TreeDemo from the Swing tutorial on How to Use Trees. Compare your code with the tutorial code to see what the difference is. When I run the demo I see ""The Java Serires"" and its two childen. When I add tree.setRootVisible(false) I only see the two children. I don't understand the comment because that is what happens as I explained above when you use the setRootVisible(...) method? I guess something in my code was missing you're right it works fine in the tutorial. I'll have to see what I'm doing differently in my code :)"
401,A,"JFileChooser.showSaveDialog(...) - how to set suggested file name The bloated JFileChooser seems to be missing one feature: a way to suggest the file name when saving a file (the thing that usually gets selected so that it would get replaced when user starts typing). Is there a way around this? If that doesn't work here is a workaround: dialog.getUI().setFileName( name ) But you should check whether the selection mode is FILES_ONLY or FILES_AND_DIRECTORIES. If it's DIRECTORIES_ONLY then setSelectedFile() will strip the file name. I would copy the method. How would you access the dialog though? It's private created on the spot in `showSaveDialog()` and disposed immediately after it was shown still inside that function.  setSelectedFile doesn't work with directories as mentioned above a solution is  try { FileChooserUI fcUi = fileChooser.getUI(); fcUi.setSelectedFile(defaultDir); Class<? extends FileChooserUI> fcClass = fcUi.getClass(); Method setFileName = fcClass.getMethod(""setFileName"" String.class); setFileName.invoke(fcUi defaultDir.getName()); } catch (Exception e) { e.printStackTrace(); } Unfortunately the setFileName is not included in the UI interface thus the need to call it dynamically. Only tested on mac. Work for me in a Mac 10.3.4 / Java 1.4.2  Great! Works perfectly in Windows too with Java 1.6.35. Only a little change in my case: FileChooserUI fcUi = jFileChooser.getUI(); Class<? extends FileChooserUI> fcClass = fcUi.getClass(); Method setFileName = fcClass.getMethod(""setFileName"" String.class); setFileName.invoke(fcUi defaultDirectoryName);  If I understand you correctly you need to use the setSelectedFile method. JFileChooser jFileChooser = new JFileChooser(); jFileChooser.setSelectedFile(new File(""fileToSave.txt"")); jFileChooser.showSaveDialog(parent); The file doesn't need to exist. EDIT: If you pass a File with an absolute path JFileChooser will try to position itself in that directory (if it exists)."
402,A,"Render html in Swing application I have a swing application that sends commands to server and receives result in XML format. I need to transform this into HTML via XSLT and then display result HTML on the panel. The problem is that the only Swing component which is able to display HTML - JEditorPane - takes either URL or javax.swing.text.StyledDocument as a source. Option with URL doesn't work for me because I have to save my html as a file on the file system first and I'd like to avoid this. So I have a gap between in-memory result of XSL transformation and javax.swing.text.StyledDocument which can be rendered by JEditorPane or JTextPane. How to transform one to another? Or are there any other Swing solutions to display HTML from some in-memory source(DOM or String or whatever)? Thank you in advance for help. What about JeditorPane.setText() ?  Try Flying Saucer it renders pretty well HTML. LGPL is commercial friendly why it isn't good? LGPL license doesn't work for me but still thanks. Will consider this in future  see this : How to Use HTML in Swing Components and Swing HTML Preview Note: the linked page refers to the built-in HTML support in components like JLabel. This support is very basic and misses even more things than JEditorPane does... and it's not great. I've already thought about that. I need as full as possible support for HTML  Is there a reason that JEditorPane.setText() does not work for you? I use JEditorPane all the time and I've never pulled the displayed data from a file or URL. So it is possible. Just need to figure out why it's not working for you. To be specific: editor.setContentType( ""text/html"" ); editor.setText( ""<html><body>Hello world</body></html>"" ); `setContentType`... that's what I was missing. Thanks @PSpeed Yes I saw them but again LGPL doesn't work for me Thanks a lot. I've just missed this option. Probably while looking through the methods list I subconciously decided that it can deal only with plain text and haven't examined javadoc in detail. Thanks again These classes are overly complicated I think. JEditorPane is pretty poor beyond a certain point. Unfortunately the free options for HTML rendering tend to be LGPL. In case that restriction is ever less important than the rendering quality there is Lobo Browser's Cobra component: http://lobobrowser.org/cobra.jsp And by far the best the DJ Native Project: http://djproject.sourceforge.net/ns/ It bridges Swing and SWT to access the operating system's native browser component."
403,A,Is it possible to have 2 JPanels in a Border layout at the same location? I'm writing a game which uses a border layout with a JPanel using BorderLayout.CENTER. What I'd like to be able to do is sometimes hide this panel and replace it with another panel with different information. I added both to the container and set visibility of one of them to false. Then later I try: panel1.setVisible(false); panel2.setVisible(true); but this doesn't display the new panel. I just see gray. Any ideas? TIA Use a nested JPanel with a CardLayout for that. Thank you! I'm a Swing noob. Does it show?
404,A,FlexGantt TimelineObject color change I'm using the FlexGantt Javax Swing package (http://www.dlsc.com/) to display some Gantt charts. The trouble I'm having is that I can't figure out how to change the color of a DefaultTimelineObject that I've extended into my own class. Actually about the only colors I seem able to change are the ones that are for the background colors of the Gantt rows. You should post this question in the FlexGantt newsgroup at http://groups.google.com/group/flexgantt Regards Dirk (FlexGantt author)  So I did manage to figure this out. It's kind of complicated or at least it was to me as I didn't really (and still don't quite) understand the Model-View-Controller pattern used by FlexGantt. So here's where we go. We need a TimelineObjectRenderer class that extends the DefaultTimelineObjectRenderer. That renderer has a method that returns a Component called getTimelineObjectRendererComponent. In that method I needed to call the methods setActivityFillColor1 and setActivityFillColor2 which are the two colors used to create the vertical blend on an item. The important code is here: public class myTimelineObjectRenderer extends DefaultTimelineObjectRenderer { public Component getTimelineObjectRendererComponent( setActivityFillColor1(new Color(rgb)); setActivityFillColor2(new Color(rgb)); } } //there is other code in this class not mentioned here That's the first part. The next part is where we connect that Renderer with the GanttChart object itself and tell the Chart where to find the Renderer needed for each item. The two lines I used for that are as follows: GanttChart gc = new GanttChart(); gc.getLayerContainer().setTimelineObjectRenderer( new myTimelineObject().getClass()new myTimelineObjectRenderer()); So I got there eventually made it work and am very impressed with the flexibility of the FlexGantt package.
405,A,"Adding JTextField to a JPanel and showing them I'm building a little app using Java and Swing in NetBeans. Using NetBeans design window I created a JFrame with a JPanel inside. Now I want to dynamically add some jTextFields to the JPanel. I wrote something like that: Vector textFieldsVector = new Vector(); JTextField tf; int i = 0; while (i < 3) { tf = new JTextField(); textFieldVector.add(tf); myPanel.add(tf); //myPanel is the JPanel where I want to put the JTextFields i++; } myPanel.validate(); myPanel.repaint(); But nothing happens: when I run the app the JFrame shows with the JPanel inside but the JTextFields don't. I'm a total newbie in writing graphical Java apps so I'm surely missing something very simple but I can't see what. It's been a while since I've done some Swing but I think you'll need to recall pack() to tell the frame to relayout its components EDIT: Yep I knew it had been too long since I did Swing. I've knocked up the following code which works as expected though and adds the textfields...  JFrame frame = new JFrame(""My Frame""); frame.setSize(640 480); JPanel panel = new JPanel(); panel.add(new JLabel(""Hello"")); frame.add(panel); frame.setLayout(new GridLayout()); frame.pack(); frame.setVisible(true); Vector textFieldVector = new Vector(); JTextField tf; int i = 0; while (i < 3) { tf = new JTextField(); textFieldVector.add(tf); panel.add(tf); //myPanel is the JPanel where I want to put the JTextFields i++; } panel.validate(); panel.repaint(); validate will do the same as pack. The validate does that (but without the resize).  Just use the .setVisible() method of JTextField: JTextField tf = new JTextField() ; tf.setVisible(true) ; panel.add(tf) ; wrong - the visible property is true by default no need to set it ...  Don't use GroupLayout with new (dynamically added) component. It won't show up.  The usual way to use GroupLayout is to add a component to a Group. GroupLayout keeps a reference to the Container it is responsible for (which makes sense). You shouldn't be adding the component to the panel without constraints.  Your while loop is wrong. i never gets incremented so your window creation is in an endless loop and your CPU consumption should be at 100% until you abort the program. Also the GUI should be completely non-responsive when you run your program. In the actual code the loop is correct i'm editing the question to avoid confusion :) Compilable code would be useful...  In the Netbeans GUI set the layout manager to something like GridLayout or FlowLayout (just for testing). You can do this by going to the GUI editor clicking on your panel and then right-clicking and selecting a layout. Once you've changed to a different layout go to the properties and alter the layout properties. For the GridLayout you want to make sure you have 3 grid cells. Instead of myPanel.validate() try myPanel.revalidate(). The more canonical way to do this is to create a custom JPanel (without using the GUI editor) that sets its own layout manager populates itself with components etc. Then in the Netbeans GUI editor drag-and-drop that custom JPanel into the gui editor. Matisse is certainly capable of handling the runtime-modification of Swing components but that's not the normal way to use it. I discarded all the classes generated from NetBeans and I wrote my own custom JPanels and now everything is working like I meant. Thanks for pointing me to the right direction :)"
406,A,"Organizing Actions in a Swing Application? My current application has a JFrame with about 15 actions stored as fields within the JFrame. Each of the actions is an anonymous class and some of them are pretty long. Is it common to break actions into their own classes possibly within a sub-package called actions? If not how's this complexity usually tamed? Thanks That's typically how I do it. Each action gets it's own class which has a reference to the ""app"" object so it can get to resources it needs. I usually have an action manager that holds all the actions so there's one place to access them as well as one place to update their enablement and stuff. Eventually this also becomes unmanageable at which point you should start thinking about using an app framework like Eclipse RCP the NetBeans framework JIDE etc. This is especially true if you want to support user-defined keymaps and stuff like that.  What I do is create a package (package tree actually) for action classes then instantiate each class according to context. Almost all of my action classes are abstract with abstract methods to get the context (ala Spring). public abstract class CalcAndShowAction extends AbstractAction { //initialization code - setup icons label key shortcuts but not context. public void actionPerformed(ActionEvent e) { //abstract method since it needs ui context String data = getDataToCalc(); //the actual action - implemented in this class // along with any user interaction inherent to this action String result = calc(data); //abstract method since it needs ui context putResultInUI(result); } //abstract methods static helpers etc... } //actual usage //... button.setAction(new CalcAndShowAction() { String getDataToCalc() { return textField.getText(); } void putResultInUI(String result) { textField.setText(result); } }); //... (sorry for any mistakes I've written it by hand in this text box not in an IDE).  If it is possible that your actions could be reusable (e.g. from keyboard shortcuts other menus other dialogs etc.) and especially if they can work directly on the underlying model (rather than on the UI) then it is generally better not to have them as anonymous classes. Rather create a separate package and create classes for each. Often it also makes sense to not instantiate these directly but rather have some sort of a manager that defines constants and initializes and returns sets of actions so that you could for example offer different action sets at different versions or set certain actions only for internal releases. Finally check whether your actions can be refactored into a class hierarchy. They often can which saves code replication and also helps you add robustness (e.g. check for certain conditions before letting the action execute). I think maybe as an alternative or in addition to the ActionManager actions are good candidates to be injected in a view using for example Spring."
407,A,Java Swing: JInternalFrame: need a dialog popup I have a JInternalFrame window that needs to popup a modal dialog box when a JButton is pressed. At first I tried using JDialog but I found that JDialog constructor needs: JFrame boolean modal I tried passing JInternalFrame to it but the type didn't match. Should I use JDialog with JInternalFrame? What if I dont specify the owner (i.e. passing a null)? Is there anything wrong with that? SwingUtilities.getAncestorOfClass(Window.class myButton) The abvove method will return the Window that contains your button. Once you have it you can pass it to the constructor of the dialog :) EDIT1: I misread the question I guess. How can you have a JinternalFrame as the topmost window?? EDIT2: Also if you pass null to Jdialog constrcutor then by default it uses a shared owner i.e SwingUtilities.getSharedOwnerFrame() ok I'm going to try it now. As a sidenote this also means that it's perfectly normal to use JDialog with JInternalFrame correct? Sorry I'm not being clear. I have a JFrame as my topmost window who contains a bunch of JInternalFrames. The button belongs to JInternalFrame however. Okay..I just tried it; I think it works fine. (I haven't connected the JDialog's button to any actionPerformed yet but i can at least popup a dialog box when I press my JInternalFrame's button!) Thanks! @shachris23..no dear you can't pass a internalframe to jdialog. jdialog only supports windowframe and diaolg in its constructor. but ofcourse you can use both internalframe and a dialog together in your app..:) @shachris23...also please check EDIT2 in the above answer:)
408,A,java swing : custom everything - subclass jcomponent or jpanel or ...? Hiya - quick one - is there any harm / value in subclassing JComponent as compared to JPanel ? To me they pretty much look to be the same thing if I'm doing my own drawing & the object won't have any children however there seems to be a pref for subclassing JPanel over JComponent - just looking for opinions on why this might be ... Thx :-) If you are drawing the whole component yourself then use JComponent. JPanel is just a simple concrete instance of JComponent (which is abstract) and is not really meant to have its methods overridden. JPanel is sometimes subclassed so that the subclass constructor can add various controls/layout rather than having to do it via some method call. Many people thing JPanel adds setOpaque(false) but that actually depends upon which look and feel is being used.
409,A,Create a Mac OS X Style Dock Bar in Swing I want to create a Mac OS X style Dock Bar to be placed at the bottom of a JFrame. Does anyone know how I can do this? Are there any third-party APIs? I am mainly interested in the mouse-over animations and bouncy icons. This is a pretty open question. You need to clarify a few things. 1. Are you looking for a 3rd party API to do this for you? 2. Are you doing it from scratch? 3. What specific features of the Dock Bar interest you: drag & drop mouse-over animations expanding folders bouncy icons? 4. What do you know? Are you starting with 0 knowledge? What don't you know what is giving you trouble? Animations and bouncy icons can be achieved with animation frameworks. Check out https://timingframework.dev.java.net/ and http://www.pushing-pixels.org/?p=1090 Take a look at second part of this presentation http://developers.sun.com/learning/javaoneonline/2008/pdf/TS-4982.pdf?cid=925395 Know where I can get the full source code from (including icons)? Get on Elie's blog (URL is on the last page of presentation) and leave him a message
410,A,hyperlinks in JEditorPane in a JTable I swear... i hope this is the last question I have to ask like this but I'm about to go crazy. I've got a JTable using a custom TableCellRenderer which uses a JEditorPane to display html in the individual cells of the JTable. How do I process clicking on the links displayed in the JEditorPane? I know about HyperlinkListener but no mouse events get through the JTable to the EditorPane for any HyperlinkEvents to be processed. How do I process Hyperlinks in a JEditorPane within a JTable? Have you created a MouseListener and attached it to the JTable? If you register a MouseListener on the JTable you could easily get the text at the mouse click point. This would be done by generating a Point object from the MouseEvent using event.getX() and event.getY(). You then pass that Point into JTable's rowAtPoint(pt) and columnAtPoint(pt). From there you can get the text via JTable.getValueAt(row column). Now you have the value of your cell so you can determine whether it is a link or not and do what you'd like with the result. this will not work as there will be links mixed with text... and possibly multiple links in one cell.  The EditorPane isn't receiving any events because the component returned from the TableCellRenderer is only allowed to display and not intercept events making it pretty much the same as an image with no behaviour allowed on it. Hence even when listeners are registered the returned component is never 'aware' of any events. The work-around for this is to register a MouseListener on the JTable and intercept all relevant events from there. Here's some classes I created in the past for allowing JButton roll-over to work in a JTable but you should be able to re-use most of this for your problem too. I had a separate JButton for every cell requiring it. With that this ActiveJComponentTableMouseListener works out in which cell the mouse event occurs in and dispatches an event to the corresponding component. It's the job of the ActiveJComponentTableCellRenderer to keep track of the components via a Map. It's smart enough to know when it's already fired events so you don't get a backlog of redundant events. Implementing this for hypertext shouldn't be that different and you may still want roll-over too. Here are the classes public class ActiveJComponentTableMouseListener extends MouseAdapter implements MouseMotionListener { private JTable table; private JComponent oldComponent = null; private TableCell oldTableCell = new TableCell(); public ActiveJComponentTableMouseListener(JTable table) { this.table = table; } @Override public void mouseMoved(MouseEvent e) { TableCell cell = new TableCell(getRow(e) getColumn(e)); if (alreadyVisited(cell)) { return; } save(cell); if (oldComponent != null) { dispatchEvent(createMouseEvent(e MouseEvent.MOUSE_EXITED) oldComponent); oldComponent = null; } JComponent component = getComponent(cell); if (component == null) { return; } dispatchEvent(createMouseEvent(e MouseEvent.MOUSE_ENTERED) component); saveComponent(component); save(cell); } @Override public void mouseExited(MouseEvent e) { TableCell cell = new TableCell(getRow(e) getColumn(e)); if (alreadyVisited(cell)) { return; } if (oldComponent != null) { dispatchEvent(createMouseEvent(e MouseEvent.MOUSE_EXITED) oldComponent); oldComponent = null; } } @Override public void mouseEntered(MouseEvent e) { forwardEventToComponent(e); } private void forwardEventToComponent(MouseEvent e) { TableCell cell = new TableCell(getRow(e) getColumn(e)); save(cell); JComponent component = getComponent(cell); if (component == null) { return; } dispatchEvent(e component); saveComponent(component); } private void dispatchEvent(MouseEvent componentEvent JComponent component) { MouseEvent convertedEvent = (MouseEvent) SwingUtilities.convertMouseEvent(table componentEvent component); component.dispatchEvent(convertedEvent); // This is necessary so that when a button is pressed and released // it gets rendered properly. Otherwise the button may still appear // pressed down when it has been released. table.repaint(); } private JComponent getComponent(TableCell cell) { if (rowOrColumnInvalid(cell)) { return null; } TableCellRenderer renderer = table.getCellRenderer(cell.row cell.column); if (!(renderer instanceof ActiveJComponentTableCellRenderer)) { return null; } ActiveJComponentTableCellRenderer activeComponentRenderer = (ActiveJComponentTableCellRenderer) renderer; return activeComponentRenderer.getComponent(cell); } private int getColumn(MouseEvent e) { TableColumnModel columnModel = table.getColumnModel(); int column = columnModel.getColumnIndexAtX(e.getX()); return column; } private int getRow(MouseEvent e) { int row = e.getY() / table.getRowHeight(); return row; } private boolean rowInvalid(int row) { return row >= table.getRowCount() || row < 0; } private boolean rowOrColumnInvalid(TableCell cell) { return rowInvalid(cell.row) || columnInvalid(cell.column); } private boolean alreadyVisited(TableCell cell) { return oldTableCell.equals(cell); } private boolean columnInvalid(int column) { return column >= table.getColumnCount() || column < 0; } private MouseEvent createMouseEvent(MouseEvent e int eventID) { return new MouseEvent((Component) e.getSource() eventID e.getWhen() e.getModifiers() e.getX() e.getY() e.getClickCount() e.isPopupTrigger() e.getButton()); } private void save(TableCell cell) { oldTableCell = cell; } private void saveComponent(JComponent component) { oldComponent = component; }} public class TableCell { public int row; public int column; public TableCell() { } public TableCell(int row int column) { this.row = row; this.column = column; } @Override public boolean equals(Object obj) { if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; } final TableCell other = (TableCell) obj; if (this.row != other.row) { return false; } if (this.column != other.column) { return false; } return true; } @Override public int hashCode() { int hash = 7; hash = 67 * hash + this.row; hash = 67 * hash + this.column; return hash; }} public class ActiveJComponentTableCellRenderer<T extends JComponent> extends AbstractCellEditor implements TableCellEditor TableCellRenderer { private Map<TableCell T> components; private JComponentFactory<T> factory; public ActiveJComponentTableCellRenderer() { this.components = new HashMap<TableCell T>(); } public ActiveJComponentTableCellRenderer(JComponentFactory<T> factory) { this(); this.factory = factory; } public T getComponent(TableCell key) { T component = components.get(key); if (component == null && factory != null) { // lazy-load component component = factory.build(); initialiseComponent(component); components.put(key component); } return component; } /** * Override this method to provide custom component initialisation code * @param component passed in component from getComponent(cell) */ protected void initialiseComponent(T component) { } @Override public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { return getComponent(new TableCell(row column)); } @Override public Object getCellEditorValue() { return null; } @Override public Component getTableCellEditorComponent(JTable table Object value boolean isSelected int row int column) { return getComponent(new TableCell(row column)); } public void setComponentFactory(JComponentFactory factory) { this.factory = factory; }} public interface JComponentFactory<T extends JComponent> { T build(); } To use it you want to register the listener to as mouse and motion listener on the table and register the renderer on the appropriate cells. If you want to intercept actionPerformed type events override ActiveJComponentTableCellRenderer.initialiseComponent() like so: protected void initialiseComponent(T component) { component.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { stopCellEditing(); } }); } wow THANKS! this looks like it could work. however in my case my row heights are different depending on the contents of the cells. is there any reason in getRow(MouseEvent e) that you're not using table.rowAtPoint(e.getPoint())? I think rowAtPoint(...) could work and avoids the assumption of fixed row heights. I think I made that assumption unintentionally when I was just trying to get it working (I also spent ages trying to figure out how to make JTable cells emit events to underlying components & was getting a bit frustrated by the end!). Let me know if you get it to work using rowAtPoint. indeed this method passes the mouse events on... but it's still not activating hyperlink update events. That's because ActiveJComponentTableMouseListener doesn't intercept mouse clicks leaving it to the JTableCellEditor. Make sure you've registered the ActiveJComponentTableCellRenderer as both the renderer AND editor and it should pass on mouseClick events for you. The other gotcha is that you need to implement initialiseComponent on a subclass of the renderer (see above) and force JTable to stopEditing. Without this it doesn't pass all click events through. Good luck!
411,A,"Is there a convenient way to use a spinner as an editor in a Swing JTable? I deal with numeric data that is often edited up or down by 0.01*Value_of_variable so a spinner looks like a good choice compared to a usual text cell. I've looked at DefaultCellEditor but it will only take text fields combo boxes or check boxes. Is there a convenient way to use a spinner? Thanks folks. I figured that I could create a custom component I just (wrongly) assumed there might be a different way. Here's an example that addresses the issue I commented on camickr's answer. This is a complete and compilable example. Take what you need and ditch what you don't. import java.awt.*; import java.awt.event.*; import java.util.*; import javax.swing.*; import javax.swing.table.*; public class JSpinnerInTables { static String[] columnNames = { ""Name""""Value"" }; static Object[][] data = { {""one""1.0} {""two""2.0} }; public static void main( String[] args ) { JFrame frame = new JFrame(); JTable table = new JTable(datacolumnNames); //table.setSurrendersFocusOnKeystroke(true); TableColumnModel tcm = table.getColumnModel(); TableColumn tc = tcm.getColumn(1); tc.setCellEditor(new SpinnerEditor()); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.add(table); frame.pack(); frame.setVisible(true); } public static class SpinnerEditor extends DefaultCellEditor { JSpinner spinner; JSpinner.DefaultEditor editor; JTextField textField; boolean valueSet; // Initializes the spinner. public SpinnerEditor() { super(new JTextField()); spinner = new JSpinner(); editor = ((JSpinner.DefaultEditor)spinner.getEditor()); textField = editor.getTextField(); textField.addFocusListener( new FocusListener() { public void focusGained( FocusEvent fe ) { System.err.println(""Got focus""); //textField.setSelectionStart(0); //textField.setSelectionEnd(1); SwingUtilities.invokeLater( new Runnable() { public void run() { if ( valueSet ) { textField.setCaretPosition(1); } } }); } public void focusLost( FocusEvent fe ) { } }); textField.addActionListener( new ActionListener() { public void actionPerformed( ActionEvent ae ) { stopCellEditing(); } }); } // Prepares the spinner component and returns it. public Component getTableCellEditorComponent( JTable table Object value boolean isSelected int row int column ) { if ( !valueSet ) { spinner.setValue(value); } SwingUtilities.invokeLater( new Runnable() { public void run() { textField.requestFocus(); } }); return spinner; } public boolean isCellEditable( EventObject eo ) { System.err.println(""isCellEditable""); if ( eo instanceof KeyEvent ) { KeyEvent ke = (KeyEvent)eo; System.err.println(""key event: ""+ke.getKeyChar()); textField.setText(String.valueOf(ke.getKeyChar())); //textField.select(11); //textField.setCaretPosition(1); //textField.moveCaretPosition(1); valueSet = true; } else { valueSet = false; } return true; } // Returns the spinners current value. public Object getCellEditorValue() { return spinner.getValue(); } public boolean stopCellEditing() { System.err.println(""Stopping edit""); try { editor.commitEdit(); spinner.commitEdit(); } catch ( java.text.ParseException e ) { JOptionPane.showMessageDialog(null ""Invalid value discarding.""); } return super.stopCellEditing(); } } }  Jason's answer is perfect. To help others that might be looking for a Time and Date version I've edited Jason's code to suit. Hope it helps someone as Jason's has helped me. import java.awt.*; import java.awt.event.*; import java.util.*; import javax.swing.*; import javax.swing.table.*; public class SpinnerInJTable { static String[] columnNames = { ""Name""""Time & Date"" }; static Object[][] data = { {""Date One""new Date(Long.decode(""1397091313404""))} {""Date Two"" new Date(Long.decode(""1397001313404""))} }; public static void main( String[] args ) { JFrame frame = new JFrame(); JTable table = new JTable(datacolumnNames); //table.setSurrendersFocusOnKeystroke(true); TableColumnModel tcm = table.getColumnModel(); TableColumn tc = tcm.getColumn(1); tc.setCellEditor(new SpinnerEditor()); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.add(table); frame.pack(); frame.setVisible(true); } public static class SpinnerEditor extends DefaultCellEditor { JSpinner spinner; JSpinner.DefaultEditor editor; JTextField textField; boolean valueSet; // Initializes the spinner. public SpinnerEditor() { super(new JTextField()); spinner = new JSpinner(new SpinnerDateModel()); editor = ((JSpinner.DateEditor)spinner.getEditor()); textField = editor.getTextField(); textField.addFocusListener( new FocusListener() { public void focusGained( FocusEvent fe ) { System.err.println(""Got focus""); //textField.setSelectionStart(0); //textField.setSelectionEnd(1); SwingUtilities.invokeLater( new Runnable() { public void run() { if ( valueSet ) { textField.setCaretPosition(1); } } }); } public void focusLost( FocusEvent fe ) { } }); textField.addActionListener( new ActionListener() { public void actionPerformed( ActionEvent ae ) { stopCellEditing(); } }); } // Prepares the spinner component and returns it. public Component getTableCellEditorComponent( JTable table Object value boolean isSelected int row int column ) { if ( !valueSet ) { spinner.setValue(value); } SwingUtilities.invokeLater( new Runnable() { public void run() { textField.requestFocus(); } }); return spinner; } public boolean isCellEditable( EventObject eo ) { System.err.println(""isCellEditable""); if ( eo instanceof KeyEvent ) { KeyEvent ke = (KeyEvent)eo; System.err.println(""key event: ""+ke.getKeyChar()); textField.setText(String.valueOf(ke.getKeyChar())); //textField.select(11); //textField.setCaretPosition(1); //textField.moveCaretPosition(1); valueSet = true; } else { valueSet = false; } return true; } // Returns the spinners current value. public Object getCellEditorValue() { return spinner.getValue(); } public boolean stopCellEditing() { System.err.println(""Stopping edit""); try { editor.commitEdit(); spinner.commitEdit(); } catch ( java.text.ParseException e ) { JOptionPane.showMessageDialog(null ""Invalid value discarding.""); } return super.stopCellEditing(); } } }  ... and overwrite the getCellEditorValue() method: class SpinnerEditor extends DefaultCellEditor { private JSpinner spinner; public SpinnerEditor() { super( new JTextField() ); spinner = new JSpinner(new SpinnerNumberModel(0 0 100 5)); spinner.setBorder( null ); } public Component getTableCellEditorComponent( JTable table Object value boolean isSelected int row int column) { spinner.setValue( value ); return spinner; } public Object getCellEditorValue() { return spinner.getValue(); } } -1 invalid cellEditor implementation because it doesn't comply to its notification contract This solution has some behaviors that may not be desirable for many users. When a user types a number before the editor starts editing the JTable will focus the JSpinner not the editor in the JSpinner. This means the text the user just typed goes no where. Contrast this to the way the DefaultCellEditor behaves: the newly typed key is inserted into the cell after the current value.  Simply extend DefaultCellEditor and overwrite the getTableCellEditorComponent() method to return a JSpinner. +1 @Uri - Also see the ""Using Other Editors"" http://java.sun.com/docs/books/tutorial/uiswing/components/table.html#editrender"
412,A,Combo Box and Search Component in Java My goal is to create some kind of swing component that can do two things: Function as a combo box (select from a list of values) Allow a user to type into the component and only display the relevant items from the original list (like some AJAX search boxes online) I would really like to do this by customizing an existing swing component so I don't have to write it from scratch but so far I have not found anything that can do this. I have considered the massive amounts of hacks that it would take to possibly get a JComboBox to do this but I don't really think that will work. Any recommendations on what the best way to do this would be? Bonus points for solutions that aren't 100% custom code. What you are looking for can be found be using autocomplete in your search strings. Comboboxes which support what you want for sure exist in several libraries just one example: Glazed Lists The following site contains a few samples (for glazedlists too) and further links to other libraries. It's a bit dated but I guess the information is still ok. Adding Auto-Completion Support to Swing Comboboxes glazed lists turned out to be very helpful. i did however have to add some custom code to make them do exactly what i wanted. i ran into the ugly beast that is java's gui thread model and this article turned out to be very informative: http://www.javaworld.com/javaworld/jw-08-2007/jw-08-swingthreading.html
413,A,"Property list GUI component in Swing How do you make a ""property list"" component in Swing? I mean the kind as in this or this image. Is it just a customized JTable component or a custom component altogether? It is definately a table based component but creation of it is not trivial. I suggest you use already existing one. Here is a link to a free and very good one: http://www.l2fprod.com/common/ Thanks this one is great!  if you don't want to code it yourself JideSoft has a component called PropertyPane. It's part of their Jide Grids package that costs $299.99. I have't used that specific component but I can say from experience that their components are very well polished and executed. A webstart demo of all their components hth Koen  Here is a basic example you might be able to further customize for your use: import java.awt.*; import java.util.*; import javax.swing.*; import javax.swing.event.*; import javax.swing.table.*; public class TablePropertyEditor extends JFrame { public TablePropertyEditor() { String[] columnNames = {""Type"" ""Value""}; Object[][] data = { {""String"" ""I'm a string""} {""Date"" new Date()} {""Integer"" new Integer(123)} {""Double"" new Double(123.45)} {""Boolean"" Boolean.TRUE} }; JTable table = new JTable(data columnNames) { private Class editingClass; public TableCellRenderer getCellRenderer(int row int column) { editingClass = null; int modelColumn = convertColumnIndexToModel(column); if (modelColumn == 1) { Class rowClass = getModel().getValueAt(row modelColumn).getClass(); return getDefaultRenderer( rowClass ); } else return super.getCellRenderer(row column); } public TableCellEditor getCellEditor(int row int column) { editingClass = null; int modelColumn = convertColumnIndexToModel(column); if (modelColumn == 1) { editingClass = getModel().getValueAt(row modelColumn).getClass(); return getDefaultEditor( editingClass ); } else return super.getCellEditor(row column); } // This method is also invoked by the editor when the value in the editor // component is saved in the TableModel. The class was saved when the // editor was invoked so the proper class can be created. public Class getColumnClass(int column) { return editingClass != null ? editingClass : super.getColumnClass(column); } }; table.setPreferredScrollableViewportSize(table.getPreferredSize()); JScrollPane scrollPane = new JScrollPane( table ); getContentPane().add( scrollPane ); } public static void main(String[] args) { TablePropertyEditor frame = new TablePropertyEditor(); frame.setDefaultCloseOperation( EXIT_ON_CLOSE ); frame.pack(); frame.setLocationRelativeTo( null ); frame.setVisible(true); } }"
414,A,"Changing JList row color at runtime I am trying to change JList rows dynamically. I need change nth row colour highlight it(n is unknown during compilation). I saw a lot of examples with custom ListCellRenderer but all were ""static"". In other words I have JList with x rows. During runtime my ""business logic"" detects nth row is important. So I want make its background green wait one second and then make it white again. One more thing don't wan change row selection. What is the best way to do so? Ok Thank You. I updated my version. msawicki note that the previous version of my answer would block the whole event dispatch thread. which means while the row is highlighted you can't do anything else in the gui. and I say it again is is just a quick dirty sample Your custom ListCellRenderer which implements the method getListCellRendererComponent will have access to both the JList and the value that it is redering. This gives you a couple options for how to determine when to paint the nth row green: You could subclass JList and have the renderer ask it which color to use for the bg. The JList subclass could trigger a repaint when the business logic determines that it is time for the nth row to be green and then start an Swing Timer to trigger a repaint returning the bg back to normal When the business logic determines when you should show the row as green you also have the option of setting state on the backing object of the row and test it for that state within getListCellRendererComponent setting the bg green if the state is correct. Again you have the option of setting an Swing Timer to revert the state on the backing object.  Simple set a custom ListCellRenderer to your JList using: list.setCellRenderer(myListCellrenderer); Now inside the overridden method getListCellRendererComponent() do something like this: public Component getListCellRendererComponent(.....) { Component c = super.getListCellRendererComponent(); c.setBackGround(Color.blue) return c; } The above example assumed that your custom renderer overrid DefaultListCellRenderer  Based on ListDemo sample from SUN. If you enter some text in the textfield which isn't in the list and you hit highlight it gets added. If the text is in the list and you hit highlight the entry in the list gets temporarily highlighted blue. Note the solution here with the match field is just for demo. For more correct implementation consider the other ideas proposed and consider using javax.swing.Timer import java.awt.*; import java.awt.event.*; import javax.swing.*; import javax.swing.event.*; public class ListDemo extends JPanel { private JList list; private DefaultListModel listModel; public String match = null; private static final String hireString = ""Highlight""; private JTextField employeeName; public ListDemo() { super(new BorderLayout()); listModel = new DefaultListModel(); listModel.addElement(""Test1""); listModel.addElement(""Test2""); listModel.addElement(""Test3""); list = new JList(listModel); list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); list.setSelectedIndex(0); list.setVisibleRowCount(5); list.setCellRenderer(new MyListCellRenderer()); JScrollPane listScrollPane = new JScrollPane(list); JButton hireButton = new JButton(hireString); HireListener hireListener = new HireListener(hireButton); hireButton.setActionCommand(hireString); hireButton.addActionListener(hireListener); hireButton.setEnabled(false); employeeName = new JTextField(10); employeeName.addActionListener(hireListener); employeeName.getDocument().addDocumentListener(hireListener); listModel.getElementAt(list.getSelectedIndex()).toString(); JPanel buttonPane = new JPanel(); buttonPane.setLayout(new BoxLayout(buttonPane BoxLayout.LINE_AXIS)); buttonPane.add(Box.createHorizontalStrut(5)); buttonPane.add(employeeName); buttonPane.add(hireButton); buttonPane.setBorder(BorderFactory.createEmptyBorder(5555)); add(listScrollPane BorderLayout.CENTER); add(buttonPane BorderLayout.PAGE_END); } class MyListCellRenderer extends JLabel implements ListCellRenderer { public MyListCellRenderer() { setOpaque(true); } public Component getListCellRendererComponent(JList paramlist Object value int index boolean isSelected boolean cellHasFocus) { setText(value.toString()); if (value.toString().equals(match)) { setBackground(Color.BLUE); SwingWorker worker = new SwingWorker() { @Override public Object doInBackground() { try { Thread.sleep(5000); } catch (InterruptedException e) { /*Who cares*/ } return null; } @Override public void done() { match = null; list.repaint(); } }; worker.execute(); } else setBackground(Color.RED); return this; } } class HireListener implements ActionListener DocumentListener { private boolean alreadyEnabled = false; private JButton button; public HireListener(JButton button) { this.button = button; } public void actionPerformed(ActionEvent e) { String name = employeeName.getText(); if (listModel.contains(name)) { match = name; list.repaint(); employeeName.requestFocusInWindow(); employeeName.selectAll(); return; } if (name.equals("""")) { Toolkit.getDefaultToolkit().beep(); employeeName.requestFocusInWindow(); employeeName.selectAll(); return; } int index = list.getSelectedIndex(); if (index == -1) index = 0; else index++; listModel.insertElementAt(employeeName.getText() index); employeeName.requestFocusInWindow(); employeeName.setText(""""); list.setSelectedIndex(index); list.ensureIndexIsVisible(index); } public void insertUpdate(DocumentEvent e) { enableButton(); } public void removeUpdate(DocumentEvent e) { handleEmptyTextField(e); } public void changedUpdate(DocumentEvent e) { if (!handleEmptyTextField(e)) enableButton(); } private void enableButton() { if (!alreadyEnabled) button.setEnabled(true); } private boolean handleEmptyTextField(DocumentEvent e) { if (e.getDocument().getLength() <= 0) { button.setEnabled(false); alreadyEnabled = false; return true; } return false; } } private static void createAndShowGUI() { JFrame frame = new JFrame(""ListDemo""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JComponent newContentPane = new ListDemo(); newContentPane.setOpaque(true); frame.setContentPane(newContentPane); frame.pack(); frame.setVisible(true); } public static void main(String[] args) { javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { createAndShowGUI(); } }); } } wouldn't this pause the EDT for a second? Thank You. It works perfectly. you are right of course. replaced with swingworker implementation"
415,A,How to show scrollbar in Swing's JOptionPane.showOptionDialog? In our Swing application we show error messages using JOptionPane.showOptionDialog. However some of the messages are long and we would like to limit the height of the dialog and show a scrollbar. We thought of using HTML and CSS in the dialog text to limit the height and show scrollbar but it seems Swing's HTML & CSS is quite limited. Can anyone thing of a way to do it other then developing our own dialog to show error messages? Thanks splintor The message parameter to the showOptionDialog method is of Object type. The API documentation specifies different behaviours depending on what type is passed there. What should be helpfull in your case is the possibility of passing Component object. This way you can pass any component including JScrollPane which will handle scrollbars if necessary. So if your message is in String msg instead of passing it directly you should construct something like this: new JScrollPane(new JLabel(msg)).  What you show on the JOptionPane is an Object. While you usually use a String nothing stops you from displaying a non-editable JTextArea (which has scrollbar behavior built in I believe) or a JScrollPane containing a large JLabel (or anything like that). You'll want to set the PreferredSize on the JScrollPane and perhaps also setHorizontalScrollBarPolicy and setVerticalScrollBarPolicy.
416,A,"How do I paint Swing Components to a PDF file with iText? I would like to print my Swing JComponent via iText to pdf. JComponent com = new JPanel(); com.add( new JLabel(""hello"") ); PdfWriter writer = PdfWriter.getInstance( document new FileOutputStream( dFile ) ); document.open( ); PdfContentByte cb = writer.getDirectContent( ); PdfTemplate tp = cb.createTemplate( pageImageableWidth pageImageableHeight ); Graphics2D g2d = tp.createGraphics( pageImageableWidth pageImageableHeight new DefaultFontMapper( ) ); g2d.translate( pf.getImageableX( ) pf.getImageableY( ) ); g2d.scale( 0.4d 0.4d ); com.paint( g2d ); cb.addTemplate( tp 25 200 ); g2d.dispose( ); Unfortunately nothing is shown in the PDF file. Do you know how to solve this problem? I don't know that much about iText but... you did close the PdfWriter at some point right? yes writer is closed!  I needed to call com.addNotify() com.setSize() com.validate()  I have figured it out adding addNotify and validate helps.  com.addNotify( ); com.validate( ); Yes. JavaDoc of addNotify() says it ""should not be called directly by programs"" but in practice it is necessary in headless context (exporting without a GUI). Otherwise the children of the component are not laid out and keep a size of zero."
417,A,"Declarative validation of forms in Java/Swing I use Java for client-side development with Swing. I love Swing; I believe it is one of the better GUI frameworks there. What I miss however is the support for declarative validation. Like this snippet from XForms. Do you know any library which allows validating data entry in forms in a declarative way not by writing ugly validation document listeners for every component there? I wouldn't say client-side Swing is outdated. It's probably what a significant portion of developers work on. @mmyers: Is nice people still have manners. I think it's cultural some places this is still strong. I would rever your edit except that... I can't anymore. :P @Oscar: This has been discussed many times and Jeff Atwood is in favor of removing salutations and signatures if you're already editing for some reason: http://blog.stackoverflow.com/2009/03/the-great-edit-wars/#comment-15830. @mmyers: I thought the removals were made by you but now I see it was Rich B. I saw the thread you mention when it was published but didn't feel like reading it. I think this is a subform of trolling. Anyway it's the price to pay for the rules we have. You could try one of the implementations of JSR 303 Bean Validation. I don't think it is finalized yet but there are a few implementations around like Hibernate Validator and Agimatec Validation. I haven't tried either but reading through some examples of how Bean Validation will be used makes it look promising. Here is an interview with the spec lead. What I like most about the proposal is that the validation rules can be reused in different layers and with different frameworks. You can choose between annotations and xml for doing the 'declaring'. Lastly you might want to check out Swing Java Builders which provides a declarative way for defining GUIs and doing validation and data binding with Swing. Maybe together with something like Beans Binding or JGoodies Binding I don't know if I'm getting IE bugs or what but the first link keeps running into the second link (so everything between ""JSR 303"" and ""around like"" is part of the link). With Joel Coehoorn's edits the first link wasn't a link at all--it looked like ""http://jcp.org/en/jsr/detail?id=303>JSR 303""...  You only have to write ugly validating models once. You can them use them in a ""declarative way"". Actual useful Swing libraries is a more difficult question. It is reinventing the wheel. Why do you need to write email address validator? This things should be already implemented. What does the number of forms have to do with it? I know. But I am facing a project with LOTS of forms (and validation rules) so I would prefer not to reinvent the wheel.  You may look at my attempt to build a Swing GUI builder that uses JSR303 validation with Hibernate Validator: http://code.google.com/p/swing-formbuilder/"
418,A,"How do I restrict JFileChooser to a directory? I want to limit my users to a directory and its sub directories but the ""Parent Directory"" button allows them to browse to an arbitraty directory. How should I go about doing that? Incase anyone else needs this in the future: class DirectoryRestrictedFileSystemView extends FileSystemView { private final File[] rootDirectories; DirectoryRestrictedFileSystemView(File rootDirectory) { this.rootDirectories = new File[] {rootDirectory}; } DirectoryRestrictedFileSystemView(File[] rootDirectories) { this.rootDirectories = rootDirectories; } @Override public File createNewFolder(File containingDir) throws IOException { throw new UnsupportedOperationException(""Unable to create directory""); } @Override public File[] getRoots() { return rootDirectories; } @Override public boolean isRoot(File file) { for (File root : rootDirectories) { if (root.equals(file)) { return true; } } return false; } } You'll obviously need to make a better ""createNewFolder"" method but this does restrict the user to one of more directories. And use it like this: FileSystemView fsv = new DirectoryRestrictedFileSystemView(new File(""X:\\"")); JFileChooser fileChooser = new JFileChooser(fsv); or like this: FileSystemView fsv = new DirectoryRestrictedFileSystemView( new File[] { new File(""X:\\"") new File(""Y:\\"") }); JFileChooser fileChooser = new JFileChooser(fsv); Doesn't work @Allain  No need to be that complicated. You can easily set selection mode of a JFileChooser like this JFileChooser fc = new JFileChooser(); fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); fc.setMultiSelectionEnabled(false); You can read more reference here How to Use File Choosers This limits them to directories in general but not to a specific directory which is the OP's question.  The solution of Allain is almost complete. Three problems are open to solve: Clicking the ""Home""-Button kicks the user out of restrictions DirectoryRestrictedFileSystemView is not accessible outside the package Starting point is not Root Append @Override to DirectoryRestrictedFileSystemView public TFile getHomeDirectory() { return rootDirectories[0]; } set class and constructor public Change JFileChooser fileChooser = new JFileChooser(fsv); into JFileChooser fileChooser = new JFileChooser(fsv.getHomeDirectory()fsv); I use it for restricting users to stay in a zip-file via TrueZips TFileChooser and with slight modifications to the above code this works perfectly. Thanks a lot.  You can probably do this by setting your own FileSystemView. Just if someone could need it here is an exact example of what OP wanted: http://tips4java.wordpress.com/2009/01/28/single-root-file-chooser/ how do you get the default filesystemview (e.g. to delegate to it)? @Jason S - probably via static method `getFileSystemView()`"
419,A,"Doc templates to PDF files in java (looking for tools/libs) I tried to read the related questions and didn't find any new tool. Here is my problem : i generate some PDF files for an insurance from the data in my app. Stuff like contracts certificates bills etc. The insurance guy gives me the templates files as .docs with fields in them and I have to fill in the fields with my data and generate the PDF. Quite a simple problem. I don't have word I'm in java swing. I don't feel like re-creating he word doc in a report system (like BIRT or iReport) because it's long painful and they often can't even do the same layout as word does. I tried converting the .doc in .odt (OpenOffice) changing the field in form field generating the PDF as a PDF form (non-decorated disabled fields to look like normal text) and filing them with iText but I get cheap results (I can't choose the font in the fields width is fixed I can't properly line up the baseline in the field and in the surrounding text etc.) Do you have ideas/tools I can use for filling those fields without re-creating the doc file in a template editor ? This question is quite open I'm looking for ideas more than you doing my homework. I've created an entire application (actually it was ported 3 times) to solve just this case and one of the versions was using OpenOffice which has .Doc templates (with bookmakrs) the application then acted like a ""server"" which had its own built in folder watcher it would process requirest via XML and render out PDF documents using the .doc/.dot templates. Sadly this was run in a server environment (and caused issues I never managed to get the headless mode to work) But at least in theory it works. Start at looking at the Open Office APIs you should be able to change font/style/size etc also why are you using fields when you could use bookmarks instead? this allows you to jump to a predefined cursor (named) and then insert anything (eg tables pictures text etc) The excellent part is that in terms of styling and modifying the templates all you need its words/OpenOffice. Dont know if that helps I don't know how bookmarks works I will investigate that thanks. Does the text re-layout (wrapping hyphenation page jumps) when I insert text in a bookmark ? Right now I'm investigating the API/live talking to OOo solution but I'm not really confident I can do a robust stuff with that.  You can convert the doc file into a rtf file : theses files use explicit ""marks"" to define the style (like HTML) : ""{\b bold test}{\i italic test}"" for example. So the file is quite ""understandable"" by a human. In this file you can put ""tags"" delimited by characters of your choice : ""%%first_name%%"" for example. In java you can dynamically replace theses tags by your information. To finish you just have to convert this rtf file into a pdf file (API virtual printer...). With this method you can replace the rtf format by any ""mark"" format easily understable. I tried this way in the beginning because I prefer handling text formats that binary ones for obvious reasons but my document's layout is too complex for RTF. Thanks.  There are free applications for creating pdf forms would it be possible to teach the insurance guys to use this and provide a pdf form template to your application instead of a word template? I've been involved in an application that used this approach successfully. The workflow for the user became: Create document using any application (word photoshop other...) Export or print as pdf Use pdf form editor to add fields in correct places. Use placeholders for contents. Upload to server The placeholders (like ${context.person.firstname} ) were then replaced on the server the pdf ""flattened"" (converts form fields to text) and the filled out pdf returned. We used a defined set of placeholders that the user could choose from and added more when there was a need for it. This was a good tradeoff between the users wanting to use their applications of choise for layout and we wanting to avoid a multitude of formats (and Office) If I recall correctly we used Scribus as pdf form editor That's almost what I do. But that ""flattening"" idea is new to me I will investigate it thanks. Yeah looks like it's not a complex code : http://1t3xt.info/api/com/lowagie/text/pdf/PdfStamper.html#setFormFlattening(boolean)  Take a look here: http://www.dancrintea.ro/doc-to-pdf/  A bit late but in case others are looking - try Docmosis. It uses documents as templates (doc or odt) and can populate and control the document from Java. It can spit out pdfdocodf etc. It's a productised version of Darknights solution (above) - and it's free!  If you can extract the data (maybe POI?) you could then use IText to create the PDFs. Thaks. I'm wondering the width of the ""seam"" I would have to sew between the doc format and iText I can't find any example on google. But the general idea is cool : having the layout engine inside java is a good thing I think."
420,A,"How to stop editing with DefaultCellEditor when a separate JBtton is pressed I got a table with a custom TableCellEditor (extending DefaultCellEditor) with a JFormattedTextField as the editor component. Now I got problem: when I press a separate button while editing. When the button is pressed the editor remains ""open and active"" while I'd want it to stop editing so that the changes made would be available for the operations caused by the button. So how to cause the editing to be stopped when a distinct button is pressed. I tried setFocusLostBehavior(JFormattedTextField.COMMIT) for the JFormattedTextField but it didn't seem to have effect. Hope somebody has some good ideas =) You may try jtable.putClientProperty(""terminateEditOnFocusLost"" Boolean.TRUE); Where is this documented? I don't know. I'm afraid it's quite undocumented. :(  Had also more issues with these things see the question Java Swing : changing JTree selection while editingstopCellEditing() : how to get stopCellEditing() called before TreeListeners:valueChanged?  Thanks asalamon74 that works quite nicely. There's debate over the thing at Sun Bug Database : Bug 4724980: JTable: Add API to control what happens to edits when table loses focus. (also other bug entries are found). The terminateEditOnFocusLost turns on ""commit-or-cancel"" behaviour that can be seen at the Java sources at the class JTable$CellEditorRemover And yes it's somewhat strange that it isn't documented at the APIs etc... The debate's submit date is 01-AUG-2002. So it's a long issue and still not really documented."
421,A,Java Swing: how do I set the maximum width of a JTextField? I'm writing a custom file selection component. In my UI first the user clicks a button which pops a JFileChooser; when it is closed the absolute path of the selected file is written to a JTextField. The problem is absolute paths are usually long which causes the text field to enlarge making its container too wide. I've tried this but it didn't do anything the text field is still too wide: fileNameTextField.setMaximumSize(new java.awt.Dimension(450 2147483647)); Currently when it is empty it is already 400px long because of GridBagConstraints attached to it. I'd like it to be like text fields in HTML pages which have a fixed size and do not enlarge when the input is too long. So how do I set the max size for a JTextField ? It may depend on the layout manager your text field is in. Some layout managers expand and some do not. Some expand only in some cases others always. I'm assuming you're doing filedNameTextField = new JTextField(80); // 80 == columns If so for most reasonable layouts the field should not change size (at least it shouldn't grow). Often layout managers behave badly when put into JScrollPanes. In my experience trying to control the sizes via setMaximumSize and setPreferredWidth and so on are precarious at best. Swing decided on its own with the layout manager and there's little you can do about it. All that being said I have no had the problem you are experiencing which leads me to believe that some judicious use of a layout manager will solve the problem.  Don't set any of the sizes on the text field. Instead set the column size to a non-zero value via setColumns or using the constructor with the column argument. What is happening is that the preferred size reported by the JTextComponent when columns is zero is the entire amount of space needed to render the text. When columns is set to a non-zero value the preferred size is the needed size to show that many standard column widths. (for a variable pitch font it is usually close to the size of the lower case 'm'). With columns set to zero the text field is requesting as much space as it can get and stretching out the whole container. Since you already have it in a GridBagLayout with a fill you could probably just set the columns to 1 and let the fill stretch it out based on the other components or some other suitably low number. I recommend this approach when using `FlowLayout`.  I solved this by setting the maximum width on the container of the text field using setMaximumSize. According to davetron's answer this is a fragile solution because the layout manager might disregard that property. In my case the container is the top-most and in a first test it worked. Yeah that is unfortunately how it goes with Swing. It's a nice toolkit in many ways but the unpredictability of the components in different layout managers is really annoying.
422,A,"Understand Command Pattern in Swing I can see how Swing uses Decorator and Observer pattern. Observer: Every component(eg. JButton) is a subject which can add observers(ActionListeners). When someone pushes a button it notifies all its ActionListeners by calling their actionPerformed(ActionEvent e). But how about Command Pattern? When I am making classes that implements ActionListener (eg: MyActionListener) the actionPerformed(ActionEvent e) is now the execute command? It confuses me that actionPerformed(ActionEvent e) is used both as a execute() and a update() method. Am I right here? Here is an article that will help. Basically it is saying you can create concrete command classes that interact with a target object by deriving the ActionListener. Then you can expand what an action event invoker will do by registering these decoupled commands to it. link is down.... Thx. Was very helpfull :)  Interesting take on it and you might be right but I see it as something that's performed period. The reason for the action being performed can be a state change or a mouse click but it's still a Command in the Command Pattern sense.  Here is my take on it : http://blue-walrus.com/2011/10/swing-and-design-patterns-%E2%80%93-part-3-command-pattern/ The key is that your action is an interchangebale unit. You can have this action behind many buttons or menus. Eg. a Save action can hang behind the 'save' menu option and also hang behind the 'save' icon.  Yes so basically making an object that encapsulates the behavior and other information that is needed when an action takes place can be seen as using the command pattern. The Wikipedia article linked above uses the Action interface as an example of the command pattern in Swing. The Action interface is a subinterface of ActionListener so a class that implements Action will have to implement the actionPerformed method. Therefore a class implementing Action will be encapsulating some operations which will be performed when an action occurs. And that class itself can be seen to follow the command pattern. When it comes to the implementation in general an AbstractAction can be easier to use than implementing Action as it has several methods that needs to be overridden. An example using AbstractAction can be: class MySpecialAction extends AbstractAction { @Override public void actionPerformed(ActionEvent e) { // Perform operations. } } The MySpecialAction is a command pattern object -- it has the behavior it must exhibit when an action takes place. When instantiating the above class one could try the following: MySpecialAction action = new MySpecialAction(""Special Action"" mySpecialIcon); Then the action can be registered to multiple components such as JButtons JMenuItems and such. In each case the same MySpecialAction object will be called: JMenuItem specialMenuItem = new JMenuItem(action); /* ... */ JButton b = new JButton(action); In both cases the action that is associated with each component the button and the menu item refer to the same MySpecialAction action object or command. As we can see the MySpecialAction object is functioning as a object following the command pattern as it encapsulates some action to be performed at a the time when an action takes place. Thank you very much. I get it :) But let’s say I wanted to be able to undo. If i make a interface UndoableAction that extends the interface Action with undo() method. Then JButton b = new JButton(new MyUndoableAction()); would still not have undo functionality. Ehm by that I mean Swing can't possible know that there is a undo method. actionPerfomed() gets called automaticly when a button is pressed. @bobjink: Yes the JButton is expecting an Action rather than an MyUndoableAction so it doesn't know how to ""undo"" and it will never call the undo() method. The objects to which the MyUndoableAction is handed off to needs to know how to implement the undo. I can't point to a good resource but I suspect there are quite a few how-to's for implementing an undo. (continued...) @bobjink: The text component features page has a way to implement an undo/redo for text components. Maybe that can be a hint as to a way to implement a undo/redo. --> http://java.sun.com/docs/books/tutorial/uiswing/components/generaltext.html#undo @bobjink: If you created an abstract class that had undo-able functionailty (and implements the ActionListener) and registers itself to some kind of undo-able list when an action is performed then derive your concrete commands from this abstract class...it wouldn't be too hard to get undo-able commands. If that doesn't make sense post a question about undo-able commands and you might get more detail."
423,A,How can I draw rulers in a JPanel? I have a JPanel that contains an image. I want to draw rulers on the JPanel's borders. How can it be done or where should I look for some hints? Scroll panes can only use their own custom decorations. There's information on the official site maybe you can use this? did you found this example source on the sun site ? Here http://java.sun.com/docs/books/tutorial/uiswing/examples/components/index.html#ScrollDemo
424,A,"Putting JComboBox into JTable I want to put individual JComboBoxes into each cells of a JTable. ie. The JComboBox content is not identical for each cell. I basically would like to be able to just call the following code to add a row of JComboBox into the JTable. Anyone has any idea? Thanks JComboBox cb1 = new JComboBox(...); JComboBox cb2 = new JComboBox(...); model.addRow(new Object[] {""Row name"" cb1 cb2} ); JComboBox cb3 = new JComboBox(...); JComboBox cb4 = new JComboBox(...); model.addRow(new Object[] {""Row name 2"" cb3 cb4} ); This is the resultant view if I do the above. http://www.freeimagehosting.net/uploads/a6292e08ee.png The closest example code I can find is as follows. But it is for where JComboBox content is identical for the individual column. Not the solution I need. TableColumn col = table.getColumnModel().getColumn(vColIndex); col.setCellEditor(new MyComboBoxEditor(values)); where public class MyComboBoxEditor extends DefaultCellEditor { public MyComboBoxEditor(String[] items) { super(new JComboBox(items)); } } There is a tutorial on a pattern of embedding components into JTables here: http://ivolo.mit.edu/post/A-Simple-Pattern-for-Embedding-Components-into-a-Swing-JTable.aspx  You need to create a subclass of JTable to override the method TableCellEditor getCellEditor(int row int column). This enables you to set arbitrary cell editors for any row and column combination. The default way is to set the cell editor for an entire column. (You can also set individual cell renderers by overriding getCellRenderer.)  The easiest way is to implement your own TableModel public class MyModel extends AbstractTableModel { List rows; public int getRowCount() { return rows.size(); } public int getColumnCount() { return 4; } public Object getValueAt(int row int column) { return rows.get(row).getCol(col); //assuming your row ""Object"" has a getCol() } public Class<?> getColumnClass(int col) { return Boolean.class; } public void setValueAt(Object aValue int rowIndex int columnIndex) { rows.get(rowIndex).getCol(columnIndex).setValue(aValue); } } Load this into you JTable. If you haven't replaced the default cell renderer for Boolean's all you cells will be rendered as check boxes thanks to you implementation of getColumnClass(). All user input to these check boxes is collected with our setValueAt(). Err he asked about a JComboBox not JCheckBox. How did this answer even get accepted? @SarelBotha Because OP was last seen at Jan 31 '09 and the correct answer is from Jun 3 '09. Apparently no one thinks this is a problem. See [meta](http://meta.stackexchange.com/questions/161946/rethinking-sort-order-of-answers).  The JComboBox content is render identical for each row selection because the JTable does not offer the capability to have more than one editor per column. You have to extend the JTable class to support an additional selection for rows. This article explains it very well: http://www.javaworld.com/javaworld/javatips/jw-javatip102.html  This page might help you although it seems you are restricted to having the same combobox in all the cells in a column.  You need to override: Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) ...in TableCellEditor. The value passed in to this method is what you can put in your JComboBox. That means that the 'value' for that particular cell needs to be something that can be translated into a collection. It could potentially just be a List of objects or it could be a POJO with fields that could be made into a JComboBox. So just edit MyComboBoxEditor to override that method and change your model to allow for an Object that actually represents several other objects.  Extend JTable with this code: @Override public TableCellEditor getCellEditor(int row int column) { Object value = super.getValueAt(row column); if(value != null) { if(value instanceof JComboBox) { return new DefaultCellEditor((JComboBox)value); } return getDefaultEditor(value.getClass()); } return super.getCellEditor(row column); } This will create a unique JComboBox cell editor for each combo box you get the a value for. +1 -- one should also should set a custom `TableCellRenderer` on the `TableColumnModel` of the corresponding column in order to ensure that the selected value is drawn instead of a string `javax.swing.JCombobox[...]` while the cell is not being edited. This `TableCellRenderer` should implement `getTableCellRendererComponent(..)` and could return a `JLabel` with the value of `JComboBox.getSelectedItem().toString()` (after checking for null pointers).  @Override public TableCellEditor getCellEditor(int row int column) { Object value = super.getValueAt(row column); if(value != null) { if(value instanceof JComboBox) { return new DefaultCellEditor((JComboBox)value); } return getDefaultEditor(value.getClass()); } return super.getCellEditor(row column); } And then override the toString method from JComboBox. This actually repeats [another answer](http://stackoverflow.com/a/946949/572834) yet it adds one point: use a customized `JComboBox` so that its `toString()` method returns the selected value. In this case you could use the default `TableCellRenderer` implementation.  In addition to cellEditor it is necessary to do the cellRenderer to paint the combobox in the cell look at this:  public void example(){ TableColumn tmpColum =table.getColumnModel().getColumn(1); String[] DATA = { ""Data 1"" ""Data 2"" ""Data 3"" ""Data 4"" }; JComboBox comboBox = new JComboBox(DATA); DefaultCellEditor defaultCellEditor=new DefaultCellEditor(comboBox); tmpColum.setCellEditor(defaultCellEditor); tmpColum.setCellRenderer(new CheckBoxCellRenderer(comboBox)); table.repaint(); } /** Custom class for adding elements in the JComboBox. */ class CheckBoxCellRenderer implements TableCellRenderer { JComboBox combo; public CheckBoxCellRenderer(JComboBox comboBox) { this.combo = new JComboBox(); for (int i=0; i<comboBox.getItemCount(); i++){ combo.addItem(comboBox.getItemAt(i)); } } public Component getTableCellRendererComponent(JTable jtable Object value boolean isSelected boolean hasFocus int row int column) { combo.setSelectedItem(value); return combo; } }  I am sure this will solve your problem. Mention in which column you need to set the combo box in .getColumn(int column) private void addComboToTable(JComboBox combo) { TableColumn gradeColumn = YourTable.getColumnModel().getColumn(0); JComboBox comboBox = combo; comboBox.removeAllItems(); try { comboBox.addItem(""Item 1""); comboBox.addItem(""Item 2""); comboBox.addItem(""Item 3""); } catch (NullPointerException e) { } catch (Exception e) { e.printStackTrace(); } gradeColumn.setCellEditor(new DefaultCellEditor(comboBox)); }"
425,A,Swing: Positioning a popup from within a JScrollPane I have a JTable inside of a JScrollPane. I am creating a custom cell editor for one of the columns of the table and I want this editor to pop up a scrolling JList. I've done this by using a Popup to show a new JScrollPane containing the JList. Everything is working except for the position of the Popup. My custom component for the editor looks basically like this: public class CustomPanel extends JPanel { JTextField text = new JTextField(); JList list = new JList(); JScrollPane scroll = new JScrollPane(list); Component owner = null; public CustomPanel(Component owner) { this.owner = owner; add(text); } public void showPopup() { Popup p = PopupFactory.getPopup(owner scroll getX() getY()+getHeight()); p.show(); } } What is happening is that getX() and getY() are returning the position of the table cell relative to the JScrollPane holding it and Popup is wanting absolute screen position. Even if I pass in owner the JScrollPane that they are relative to it doesn't work. I get the same problem if I use text.getX() / text.getY(). How can I position my Popup directly below the TextBox? Just a bit more background: The end goal is a multiple-select combobox that displays all of the selected items as a comma-separated list. If something else like this already exists please don't hesitate to point me to it. Edit: owner.getLocationOnScreen().y + getY() doesn't work when the scroll pane is anywhere but scrolled all the way up. However just plain getLocationOnScreen().y DOES work. Problem solved thank you. You can query the absolute screen position with Component.getLocationOnScreen(). Is that what you're looking for?
426,A,"How to make Swing scroll with ""ensureIndexIsVisible""? When I run this code the selected item is not visible. I've already tried to run it in a separate thread with no luck. import javax.swing.JFrame; import java.awt.Container; import javax.swing.JList; import javax.swing.ListSelectionModel; import javax.swing.JScrollPane; import java.awt.Dimension; public class ScrollList extends JFrame { int defaultValue; ScrollList() { Container cp = getContentPane(); JList list = createList(); defaultValue = 20; cp.add(createScrollPane(list)); pack(); setVisible(true); list.ensureIndexIsVisible(defaultValue); } JList createList() { Integer[] model = new Integer[73]; JList list = new JList(model); for (int i = 1; i < model.length; i++) model[i] = i; list.setSelectedIndex(defaultValue); return list; } JScrollPane createScrollPane(JList list) { JScrollPane s = new JScrollPane(createList()); s.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); s.setPreferredSize(new Dimension(100 200)); return s; } public static void main(String[] args) { new ScrollList(); } } I figured it out!! This is the code: import javax.swing.JFrame; import java.awt.Container; import javax.swing.JList; import javax.swing.ListSelectionModel; import javax.swing.JScrollPane; import java.awt.Dimension; public class ScrollList extends JFrame { final int defaultValue = 20; ScrollList() { setDefaultCloseOperation(DISPOSE_ON_CLOSE); Container cp = getContentPane(); JList list = createList(); cp.add(createScrollPane(list)); pack(); list.ensureIndexIsVisible(list.getSelectedIndex()); setVisible(true); } JList createList() { Integer[] model = new Integer[73]; JList list = new JList(model); for (int i = 1; i < model.length; i++) model[i] = i; list.setSelectedIndex(defaultValue); return list; } JScrollPane createScrollPane(JList list) { JScrollPane s = new JScrollPane(list); // MAJOR FIX HERE! s.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); s.setPreferredSize(new Dimension(100 200)); return s; } public static void main(String[] args) { new ScrollList(); } } Instead of using the list that you passed into the createScrollPane() method you create a new one. :) Now I ask myself why this error? Too many hours of hacking. Thanks! Ha it took me a bit to find. Until I decided to carefully debug the code in Eclipse."
427,A,"Java Swing ActionMap keys I'm coming up the learning curve for Swing and am reading about InputMap and ActionMap. The O'Reilly book on Swing says the keys for ActionMap can be any Object but by convention are Strings. Is there any reason to use an object other than a String? (e.g. an enum) I would think it's bad practice to use String literals as they can be mistyped without producing any compile errors. So I'm guessing it's good practice to store the ActionMap key as an immutable static final class variable defined once (e.g. MyAction.NAME). edit: Just to clarify the thought that came to mind when I was reading the docs was to use an enum rather than a String. Is there a reason I should use a String? Actually what you propose is what Swing itself does (sometimes) so you are right. Check the javax.swing.DefaultEditorKit class. All these static final strings are used by Swing to create the ActionMap. However if you check their initialization for some of the look and feels such as WindowsLookAndFeel they also have hardcoded string literals in the source code.  I'm not sure why you wouldn't use an enum directly (haven't looked at the O'Reilly book) but in cases like this I'd probably rather use an Enum.toString() method as in MyActions.NAME.toString() This saves the overhead of defining so many static variables let's you extend the functionality of the MyActions enum if you wish to store further information about the state and it guarantees a unique string per enum. All with compile-time errors on typos. Edit: Swing predates Enum. Can that just be our convenient catch-all answer? Look at the api for card layout. If there was ever a design that begged for enums it's a card layout (allows cycling through a list of components to be displayed in the same place). I suppose there are use-cases where strings might be preferred (user added material for example) but come on: most of the time I'm going to be using this with some sort of predefined state pattern. ""I'm not sure why you wouldn't use an enum directly"": Exactly! That was my first thought."
428,A,"ExecutorService vs Swing Timer I've been reading Filthy Rich Clients lately and noticed that although the version of Java is 6 there is no mention of the Concurrent Framework. So they talk about java.util.Timer and javax.swing.Timer but not about the ExecutorService. I read about the advantages of ExecutorService in the question ""Java Timer vs ExecutorService"" and decided to use the latter over the former. But the book talks about javax.swing.Timer and it's advantages of being specific for Swing development. So does this mean that for Swing development (animating buttons etc.) javax.swing.Timer is still a better choice or is there a relevant class in the new Concurrent Framework that replaces it? Just a suggestion elaborating on what bruno advised one pattern for taking advantage of the excellent Java 1.5+ concurrency utilities without breaking Swing is to have your ExecutorService do all the heavy lifting (as bruno said) but once that is done the ExecutorService thread should hand off the interaction with the actual UI components to the AWT Thread in a Runnable using one of: javax.swing.SwingUtilities.invokeAndWait(Runnable doRun) javax.swing.SwingUtilities.invokeLater(Runnable doRun) Those methods pass the runnable to be executed by the AWT thread. I would avoid invokeAndWait - it's use is likely to lead to deadlocks.  I would say that for simple swing related stuff the better choice is the javax.swing.Timer because of the advantages mentioned here. Note that the Swing timer's task is performed in the event dispatch thread. This means that the task can safely manipulate components but it also means that the task should execute quickly. On the other side if you need to perform non-swing related or more complex/lengthy processing operations the ExecutorService is very robust and is definitely the way to go.  Well the Swing Timer at least runs on the EDT so you do not have to wrap everything with calls to invokeLater. It also ties nicely in with Swing as it uses Actions ActionListeners and other Swing related classes. I'd stick with Swing Timer for Swing related tasks and use the new concurrent package for things that does not involve updating the GUI. Have a look at Using Timers in Swing Applications as it might contain more information to swing (sorry) the decision. You need to use the Swing Timer to read or update a visualized Swing component. Even reading the current state or a value from a component should be done on the EDT for deterministic results."
429,A,"How do I create a custom JPanel extension and use it from the NetBeans palette? I have a JPanel extension that I've written and would like to be able to use it in the NetBeans designer. The component is simply adds some custom painting and continues to function as a container to be customised on each use. I have properties to expose in addition to the standard JPanel ones and have a custom paintComponent() method that I'd like to be able to see in use when building up GUIs. Ideally I'd like to associate an icon with the component as well so that its easily recognisable for my colleagues to work with. What's the best way of achieving this? You can add your custom component to the matisse GUI palatte. Build your project so the class file you want to use is part of the jar file Open a java class that has a form and switch to design mode. 3 Right click in the palatte and choose ""palatte manager"". Choose the ""add from jar"" button to select your jar. Choose the class you made and add it to your palatte. Now your panel is known to netbeans and you can drag it into new panels.  http://www.netbeans.org search for Matisse.  I made JPanel component in NetBeans with overridden paint method: @Override public void paint(Graphics g) { super.paint(g); Graphics2D g2 = (Graphics2D) g; ... //draw elements ... } It has some custom properties accessible through NetBeans properties window. public int getResolutionX() { return resolutionX; } public void setResolutionX(int resolutionX) { this.resolutionX = resolutionX; } public int getResolutionY() { return resolutionY; } public void setResolutionY(int resolutionY) { this.resolutionY = resolutionY; } I put it in my palette using: Tools->Palette->Swing/AWT Components. It even has the same look I painted in my overridden paint method while I am doing drag/drop in another container. I didn't associate icon to it though. Hope this helps."
430,A,"Using Java's Graphics or Graphics2D classes how do I paint a String? I have a String and I want to paint it onto an image. I am able to paint points and draw lines however even after reading the Text part of the 2D Graphics tutorial I can't figure out how I can take a String and paint it onto my drawing. Unless I'm looking at the wrong tutorial (but it's the one I get whenever I search for anything about Java and painting Strings using Graphics or Graphics2D) I'm still stumped. Check out the following method. g.drawString(); The drawString() method will do what you need. An example use: protected void paintComponent(Graphics g){ g.setColor(Color.BLACK); g.drawString(5 40 ""Hello World!""); } Just remember the coordinates are regarding the bottom left of the String you are drawing. Thanks. Why was there no mention of this in the tutorial that I read? I learned a lot about fonts and stuff though... No idea. It is a pretty basic thing to do in Swing. that's a strange tutorial that seems to contain nothing :D here 1.4's javadoc for Graphics2D it's a much better tutorial than the one you were looking at :D http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Graphics2D.html That wasn't supposed to be a tutorial. It is just a link to the Javadocs for Graphics which has `drawString()` in it.  if you want to play with the shape of your string (eg: fill:red and stroke:blue): Graphics2D yourGraphicsContext=(...); Font f= new Font(""Dialog""Font.PLAIN14); FontRenderContext frc = yourGraphicsContext.getFontRenderContext(); TextLayout tl = new TextLayout(e.getTextContent() f frc); Shape shape= tl.getOutline(null); //here you can move your shape with AffineTransform (...) yourGraphicsContext.setColor(Color.RED); yourGraphicsContext.fill(shape); yourGraphicsContext.setColor(Color.BLUE); yourGraphicsContext.draw(shape);"
431,A,"Java Paint Method Doesn't Paint? I'm working on a simple little swing component and I'm tearing out my hair trying to figure out why my paint method isn't working. The idea behind this component is that it's a small JPanel with a label. The background (behind the label) is supposed to be white with a colored rectangle on the left-hand side indicating the ratio of two measurements: ""actual"" and ""expected"". If you had a bunch of these components aligned vertically they'd form a bar chart composed of horizontal bars. This kind of thing should be super-simple. Anyhow here's the code: package com.mycompany.view; import java.awt.Color; import java.awt.Graphics; import java.awt.Rectangle; import javax.swing.JLabel; import javax.swing.JPanel; public class BarGraphPanel extends JPanel { private static final Color BACKGROUND = Color.WHITE; private static final Color FOREGROUND = Color.BLACK; private static final Color BORDER_COLOR = new Color(229 172 0); private static final Color BAR_GRAPH_COLOR = new Color(255 255 165); private int actual = 0; private int expected = 1; private JLabel label; public BarGraphPanel() { super(); label = new JLabel(); label.setOpaque(false); label.setForeground(FOREGROUND); super.add(label); super.setOpaque(true); } public void setActualAndExpected(int actual int expected) { this.actual = actual; this.expected = expected; } @Override public void paint(Graphics g) { double proportion = (expected == 0) ? 0 : ((double) actual) / expected; Rectangle bounds = super.getBounds(); g.setColor(BACKGROUND); g.fillRect(bounds.x bounds.y bounds.width bounds.height); g.setColor(BAR_GRAPH_COLOR); g.fillRect(bounds.x bounds.y (int) (bounds.width * proportion) bounds.height); g.setColor(BORDER_COLOR); g.drawRect(bounds.x bounds.y bounds.width bounds.height); label.setText(String.format(""%s of %s (%.1f%%)"" actual expected proportion * 100)); super.paint(g); g.dispose(); } } And here's the simple test harness: package com.mycompany.view; import java.awt.Dimension; import java.awt.GridLayout; import javax.swing.JFrame; import javax.swing.UIManager; public class MyFrame extends JFrame { public MyFrame() { super(); super.setLayout(new GridLayout(3 1)); super.setPreferredSize(new Dimension(300 200)); BarGraphPanel a = new BarGraphPanel(); BarGraphPanel b = new BarGraphPanel(); BarGraphPanel c = new BarGraphPanel(); a.setActualAndExpected(75 100); b.setActualAndExpected(85 200); c.setActualAndExpected(20 300); super.add(a); super.add(b); super.add(c); } public static void main(String[] args) { javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { createAndShowGUI(); } }); } public static void createAndShowGUI() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); } catch (Throwable t) { } MyFrame frame = new MyFrame(); frame.pack(); frame.setVisible(true); } } The test harness creates a simple frame and then adds three of these controls. The labels are all rendered correctly which indicates to me that the paint() method is actually being called but the rectangles aren't being drawn to the Graphics object. What am I doing wrong? And why does Swing programming suck so much? Here's my final code. Thanks everyone for your help! public void paintComponent(Graphics g) { double proportion = (expected == 0) ? 0 : ((double) actual) / expected; Rectangle bounds = super.getBounds(); g.setColor(BACKGROUND); g.fillRect(0 0 bounds.width bounds.height); g.setColor(BAR_GRAPH_COLOR); g.fillRect(0 0 (int) (bounds.width * proportion) bounds.height); g.setColor(BORDER_COLOR); g.drawRect(0 0 bounds.width - 1 bounds.height - 1); FontMetrics metrics = g.getFontMetrics(); String label = String.format(""%s of %s (%.1f%%)"" actual expected proportion * 100); Rectangle2D textBounds = metrics.getStringBounds(label g); g.setColor(FOREGROUND); g.drawString(label 5 (int) ((bounds.height + textBounds.getHeight()) / 2)); } Try removing ""super.paint(g)"" and ""g.dispose()"" and see what happens. Interesting. If I remove ""super.paint(g)"" and ""g.dispose()"" then I get the correct background rectangles but I lose the rendering of the label in the foreground. Hmm... how about putting a ""super.paint(g)"" before you paint the bars? Alternatively you could use ""g.drawString()"" to render text. If anything I think you should be calling super.paint(g); at the TOP of your method not at the very bottom. It's possible the superclass is drawing on top of your stuff. I've tried calling it at the top and at the bottom and it didn't make any difference. But that could have been because of one of the other errors.  I think you've almost answered your own question in the comments along with David's answer. Change paint(Graphics g) to paintComponent(Graphics g) and remove the last two lines of the method and you should be fine. EDIT: Oddly this only works for the first bar of the three. More testing in progress... By the way you have an off-by-one error in the border-painting code. It should be: g.setColor(BORDER_COLOR); g.drawRect(bounds.x bounds.y bounds.width - 1 bounds.height - 1); EDIT2: OK got it. Your full paintComponent method should be as follows: @Override public void paintComponent(Graphics g) { double proportion = (expected == 0) ? 0 : ((double) actual) / expected; Rectangle bounds = super.getBounds(); g.setColor(BACKGROUND); g.fillRect(0 0 bounds.width bounds.height); g.setColor(BAR_GRAPH_COLOR); g.fillRect(0 0 (int) (bounds.width * proportion) bounds.height); g.setColor(BORDER_COLOR); g.drawRect(0 0 bounds.width-1 bounds.height-1); label.setText(String.format(""%s of %s (%.1f%%)"" actual expected proportion * 100)); } Note that the coordinates given to g.fillRect() and g.drawRect() are relative to the component so they must start at (00). And no I can't help you with your last question though I feel your pain. :)  Not sure if this is the source of your problem but in Swing you're supposed to override paintComponent(Graphics2D) instead... Yeah in various versions of this code I've been using paint() and paintComponent(). It doesn't make any difference. If you override paintComponent() you don't have to worry about painting children. In addition you don't have to worry about painting the border. paint delegates to paintComponent paintBorder and paintChildren.  In your JPanel you called super.setOpaque(true). The JPanel is going to completely fill in the background when you call super.paint() and overwrite your retangles."
432,A,"Switching on a string/implementing button actions Full disclaimer: I'm a CS student and this question is related to a recently assigned Java program for Object-Oriented Programming. Although we've done some console stuff this is the first time we've worked with a GUI and Swing or Awt. We were given some code that created a window with some text and a button that rotated through different colors for the text. We were then asked to modify the program to create radio buttons for the colors instead—this was also intended to give us practice researching an API. I've already handed in my assignment and received permission from my instructor to post my code here. What's the best way to implement button actions in Java? After some fiddling around I created the buttons like this: class HelloComponent3 extends JComponent implements MouseMotionListener ActionListener { int messageX = 75 messageY= 175; String theMessage; String redString = ""red"" blueString = ""blue"" greenString = ""green""; String magentaString = ""magenta"" blackString = ""black"" resetString = ""reset""; JButton resetButton; JRadioButton redButton blueButton greenButton magentaButton blackButton; ButtonGroup colorButtons; public HelloComponent3(String message) { theMessage = message; //intialize the reset button resetButton = new JButton(""Reset""); resetButton.setActionCommand(resetString); resetButton.addActionListener(this); //intialize our radio buttons with actions and labels redButton = new JRadioButton(""Red""); redButton.setActionCommand(redString); ... And added action listeners... redButton.addActionListener(this); blueButton.addActionListener(this); ... A stub was already created for the actionPerformed method to give us an idea on how to use it but since there was only a single button in the template it wasn't clear how to implement multiple buttons. I tried switching on a String but quickly realized that since a String isn't a primitive type I couldn't use it for a switch statement. I could have improvised with an if-else chain but this is what I came up with instead. It seems far from elegant and there must be a better way. If there is what is it? Is there a way to switch on a string? Or choose an action in a more scaleable fashion? public void actionPerformed(ActionEvent e){ if (e.getActionCommand().equals(resetString)) { messageX = 75; messageY = 175; setForeground(Color.black); blackButton.setSelected(true); repaint(); return; } if ( e.getActionCommand().equals(redString) ) { setForeground(Color.red); repaint(); return; } if ( e.getActionCommand().equals(blueString) ) { setForeground(Color.blue); repaint(); return; } if ( e.getActionCommand().equals(greenString) ) { setForeground(Color.green); repaint(); return; } if ( e.getActionCommand().equals(magentaString) ) { setForeground(Color.magenta); repaint(); return; } if ( e.getActionCommand().equals(blackString) ) { setForeground(Color.black); repaint(); return; } } As suggested already you can use anonymous inner classes to implement the ActionListener interface. As an alternative you don't have to use anonymous inner classes but you can use a simple nested class instead: resetButton = new JButton(new ResetAction()); redButton = new JButton(new ColorAction(""Red"" Color.red)); and then... private class ResetAction extends AbstractAction { public ResetAction() { super(""Reset""); } public void actionPerformed(ActionEvent e) { messageX = 75; messageY = 175; setForeground(Color.black); blackButton.setSelected(true); repaint(); } } private class ResetAction extends AbstractAction { private Color color; public ColorAction(String title Color color) { super(title); this.color = color; } public void actionPerformed(ActionEvent e) { setForeground(color); repaint(); } } For why this approach - or any approach involving inner classes - is better than implementing ActionListener in the outer class see ""Design Patterns"": ""Favor 'object composition' over 'class inheritance'."" (Gang of Four 1995:20) Choosing between anonymous inner classes and these named inner classes is a largely a matter of style but I think this version is easier to understand and clearer when there are lots of actions.  Two alternate approaches: Create a new class that implements the Action interface and has a Color field and an actionPerformed method that sets the color Mantain a HashMap from command names to Color instances and look up the command name in the map  Instead of writing this: resetButton.addActionListener(this); You could also write this: resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent evt) { resetButtonActionPerformed(evt); } }); And instead of writing one big actionPerformed() for all actions you can (and then have to) write this: public void resetButtonActionPerformed(ActionEvent evt) { messageX = 75; messageY = 175; setForeground(Color.black); blackButton.setSelected(true); repaint(); } I don't know if this is the most elegant solution but at least you no longer have that big if construct. as plinth rightfully noted this might be somewhat (a lot) beyond your current level of education. However I'm sure you'll become your instructors most favorite student (of the day) if you can figure out what the **** is actually happening here. :-) I think I understand the concept here but I'm so unfamiliar with how all these methods and classes are related that it's a little daunting. I'll try it out and see if I can at least make it work. But...is actionPerformed a method that's an argument to addActionListener? Or of ActionListener?  Ergh. Don't implement masses of unrelated interfaces in one mega class. Instead use anoymous inner classes. They are a bit verbose but are what you want. Use one for each event then you wont need big if-else chain. I suggest keeping enough code within the inner class to decode the event and call methods that make sense to the target objects. Further you can parameterise your inner classes. You will probably find you don't need to keep references to the actual widgets around. In your example you seem to be using a JComponent as a JPanel. There's not much difference but use JPanel for collecting a block of widgets. Further there is unlikely any need to subclass it so don't. So for instance:  addColorButton(""Green""  Color.GREEN ); addColorButton(""Red""  Color.RED ); addColorButton(""Yellow"" Color.YELLOW); addColorButton(""Blue""  Color.BLUE ); ... private void addColorButton(String label Color color) { JRadioButton button = new JRadioButton(label); button.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent event) { target.setForeground(color); target.repaint(); } }); colorGroup.add(button); panel.add(button); } Yes implement all the unrelated interfaces in one mega class. Just don't make this your Swing class. Model-View-Controller. Your JComponent is your View. The Controller class would implement all of the listener interfaces.  One decent enough approach is to declare an enum whose elements match your strings and switch on valueOf(str) (the linked example shows how to do this with a fair amount of safety). The reason to avoid anonymous inner classes is probably because the class hasn't had that construct (yet) even though that might be the best solution."
433,A,"How to programatically know when a JButton's text is truncated? I need to know when the text for a JButton is truncated by the layout. So in order to find out I am overriding the following method in our custom ButtonUI delegate: protected void paintText(Graphics g JComponent c Rectangle textRect String text) { //the text argument will show an ellipse (...) when truncated } Inside the method I check to see if the text argument ends with an ellipse. Is there a better way for me to check if the text is truncated? What about the ellipse? Is that the universal symbol for truncated text or do I need to look for localized symbols that will demarcate truncated text? I noticed that OSX will use a single character representing the ellipse and Windows will use three periods. I assume this is based on the font being used but it got me thinking of other things that may sneak up on me. Thanks. Wouldn't it work if you compare the text passed to your paintText method with the text returned from ((AbstractButton)c).getText()? If it is different the text has been truncated. Eventually the truncation itself is done in SwingUtilities.layoutCompoundLabel and it's possible for you to call that method yourself but it doesn't seem particularly easy to calculate all arguments you need for using that method directly. I like this solution. I can stop looking for an ellipse and just show the tooltip anytime the text differs.  I would guess that the ellispse will shown when getPrefferredSize().width > getSize().width  I have put together a small app to demonstrate how you can figure it out. The meat is in the overriden getToolTipText() method in my JButton. It tests the size of the button accounting for the right and left insets against the size of the text using 'FontMetrics'. If you run the demo you can resize the window and hover over to attempt to get the tool tip. I should only show if there is an ellipsis. Here is the code: public class GUITest { JFrame frame; public static void main(String[] args){ new GUITest(); } public GUITest() { frame = new JFrame(""test""); frame.setSize(300300); addStuffToFrame(); SwingUtilities.invokeLater(new Runnable(){ public void run() { frame.setVisible(true); } }); } private void addStuffToFrame() { JPanel panel = new JPanel(); JButton b = new JButton(""will this cause an elipsis?"") { public String getToolTipText() { FontMetrics fm = getFontMetrics(getFont()); String text = getText(); int textWidth = fm.stringWidth(text); return (textWidth > (getSize().width - getInsets().left - getInsets().right) ? text : null); } }; ToolTipManager toolTipManager = ToolTipManager.sharedInstance(); toolTipManager.registerComponent(b); frame.setContentPane(b); } } This approach is too naive at least for generic functionality. It does not consider the button's insets (internal border around the text) if the button displays an icon and the gap between the icon and the text. It will also fail if the text contains HTML markup."
434,A,"How to layout a components in vertical only scrollpane? I have a complex question I cant find an answer anywhere. here is a example : public static void main(final String[] args) { final JFrame frame = new JFrame(""test""); final JPanel bigPane = new JPanel(new GridLayout(0 1)); frame.setContentPane(new JScrollPane(bigPane ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER)); bigPane.add(new JTextField(""reterterter ertertrert erterter ert"")); bigPane.add(new JTextField("" ertertrert erterter ert"")); bigPane.add(new JTextField(""reterterter ertertrert ert"")); bigPane.add(new JTextField(""reterterter ertertrert erterter "")); frame.pack(); frame.setSize(frame.getSize().width/2 frame.getSize().height); frame.setVisible(true); } Here clearly the textfields are cut. More precisely bigPane is cut. But I would like the textfields to be resized instead of cut so we can still use them. Since the horizontal scrollbar is forbidden to appear I would like the layout to forget the view's (bigPane) preferred width and always force the view's width to match the viewport's width. Like there would be no virtual viewport for the horizontal direction only in the vertical. I can't find a solution to that and not even a hack thaks if you can help. Nico. PS: looks like the code for ViewportLayout doesn't contain any code for that PS2 : here is a cap of the result of the above code http://www.nraynaud.com/kilombo/testLayout.png see the right side. *""in the exact precise case of my example they work. But it's hardly a solution""* - hmmm. If you are going to encourage people to help down-voting working solutions isn't a great idea! yeah that's why I upvoted in the end. But I'm not sure rewarding this kind of answer is the way to go either. The real problem for me more that karma-whoring is that I don't have a good solution to my problem. But now I have a better understanding of what I want maybe one day I will find the courage to tweak ScrollPaneLayout#layoutContainer() to my taste but right now digging in a 300+ lines spagetti function is over my forces. What do you mean by ""I would like the text inside the textfields to be cut""? Do you want to limit length of the text? here is what I want : http://www.nraynaud.com/kilombo/textcut.png (I did that by removing the scrollpane) here is what I get and don't want : http://www.nraynaud.com/kilombo/textfieldcut.png wich render the textfield unusable. I don't understand the down votes on either of these answers. They both do what you want. not really because they are narrow hacks in real life I have other components in my columns I want to be able to use the preferred size in some circumstances etc. I converted the points in upvotes because in the exact precise case of my example they work. But it's hardly a solution. Use the JTextField constructor which takes an int as a parameter. This is the number of visible characters in the text field. You can then use setText to initialize the contents of the field (if required). Alternatively set the maximum and preferred sizes (setMaximumSize setMinimumSize) of the text fields appropriately. look at the right side of the pictures. Maybe you'll see the difference. It's complicated to show you the behaviour with a picture. Ah yes now I see it. What you mean is that you cannot see the full extent of the fields. I must say I wouldn't normally use a scroll pane for anything other than displaying tables/lists. Do you *have* to use a scroll pane in this case? none of those solutions address my problem I think. I want the current behaviour unaltered for the vertical part so this rules out touching any size by hand. Setting the column number doesn't at all change the layout behaviour it just indirectly changes the preferredSize. I can't say that I understand what you want then. What exactly is the problem and what do you mean by ""cut""? Is the frame appearing too wide? Not wide enough? What is the issue? when resizing down the frame the fields are cut instead of resized. here is what I get : http://www.nraynaud.com/kilombo/textfieldcut.png here is what I want : http://www.nraynaud.com/kilombo/textcut.png I'm sorry to say I'm still not sure what you mean! What is the difference between a ""cut"" field and a resized one? The only difference I can see between your 2 pictures is the vertical size of your text fields... Perhaps you are saying you want the whole fields to be smaller (including font-size etc)? If that's the case you'll need to um change the font-size. This is not typical behaviour - if I make my browser smaller I don't end up with a miniature thumbnail of the web page!  From the JavaDoc: Parameters: text - the text to be displayed or null columns - the number of columns to use to calculate the preferred width; if columns is set to zero the preferred width will be whatever naturally results from the component implementation Since you're calling the 0 constructor you're getting the ""whatever naturally results"" implementation which takes the lengths of your too-long strings. Simply calling the columns constructor with a non-zero will fix this for you. Try these lines: bigPane.add(new JTextField(""reterterter ertertrert erterter ert""3)); bigPane.add(new JTextField("" ertertrert erterter ert""3)); bigPane.add(new JTextField(""reterterter ertertrert ert""3)); bigPane.add(new JTextField(""reterterter ertertrert erterter ""3)); Here is a screenshot of the resulting pane: I think I already answered that. This will destroy the preferred size purpose and as an example destroy the JFrame.pack() intent. I don't want to change the preferred size (by hand) I would like the preferred width to be ignored in the computation of the view width in this particular case.  I think the ""correct"" way to do this is to use the Scrollable interface: public class ScrollPaneWidthTrackingPanel extends JPanel implements Scrollable { private static final long serialVersionUID = 1L; public ScrollPaneWidthTrackingPanel(LayoutManager layoutManager) { super(layoutManager); } public Dimension getPreferredScrollableViewportSize() { return getPreferredSize(); } public int getScrollableBlockIncrement(Rectangle visibleRect int orientation int direction) { return Math.max(visibleRect.height * 9 / 10 1); } public boolean getScrollableTracksViewportHeight() { return false; } public boolean getScrollableTracksViewportWidth() { return true; } public int getScrollableUnitIncrement(Rectangle visibleRect int orientation int direction) { return Math.max(visibleRect.height / 10 1); } } Two lines of your code then have to change to: final ScrollPaneWidthTrackingPanel bigPane = new ScrollPaneWidthTrackingPanel(new GridLayout(0 1)); frame.setContentPane(new JScrollPane(bigPane)); And the components should always fill the entire width of the JScrollPane whatever the size of the frame. This change has a side effect that the components will now not fill the height of the JScrollPane. To solve that add the following code to the top of the getScrollableTracksViewportHeight method: if (getParent() instanceof JViewport) { JViewport viewport = (JViewport) getParent(); return component.getPreferredSize().height < viewport.getHeight(); } I really read the Scrollable javadoc too fast. Clearly what I want is in public boolean getScrollableTracksViewportWidth() { return true; } Thank you very much. Technically I have swingx already used in my project I will use a JXPanel and call panel.setScrollableTracksViewportHeight(false); on it. That will avoid the rest of the custom code."
435,A,"Sectioned List in Java/Swing? I have a list of items in a JList for the user to select. Since it's a lot of items (say cities in states) I want to divide the list into sections. The section headings should not be selectable though. So for my cities/states example this might look like this: State 1 City 1 City 2 City 3 State 2 City 4 City 5 City 6 It wouldn't be so difficult to write this myself by embedding JLists in a custom ListCellRenderer but I'm wondering if there already is a class like that out there. The JIDE classes suggested by banjollity are great but if somebody could suggest a pure open source component I'd be interested in that too (I forgot to say that this is for use in an open source project). Also thanks Tom for correcting the class name to `ListCellRenderer`. Maybe by using JTree ? What you describe is a Tree with two levels. A tree would be over-complicating the UI. There are far too many trees out there. Tom is right a tree would perhaps work but it's the wrong metaphor. My illustration in the question wasn't very good but banjolity's screenshot shows what I mean.  You could use what Apple calls a SourceList. You see them in action in iTunes and in Mac OS X's Finder. It is an elegant solution to the problem you describe. A cross-platform open source Java Swing component for doing this is here: http://explodingpixels.wordpress.com/2008/09/08/mac-widgets-for-java/ That's not really what I was looking for with my question here - but I have been looking for this kind of thing in Java for a while. Great stuff thank you!  There's a component available with JIDE that let's you do exactly this. It's called GroupList: That's exactly it! Thanks! I had hoped for something open source (I forgot to say that this is for use in an open source project) but it looks like they have a good policy towards use in open source projects. If somebody can suggest an open source version I would still appreciate that though.  I see this question is already answered but I noticed that Robert commented that he was hoping for an open source solution. I'd recommend using Glazed Lists' Separator list the API for which you can be found here: http://publicobject.com/glazedlists/glazedlists-1.8.0/api/ca/odell/glazedlists/SeparatorList.html Here's some sample code that will produce a list of items grouped by their first letter: public class SeparatorListTest { private static Comparator<String> createComparator() { return new Comparator<String>() { public int compare(String stringOne String stringTwo) { return stringOne.substring(01).compareTo(stringTwo.substring(01)); } }; } private static ListCellRenderer createListCellRenderer() { return new DefaultListCellRenderer() { @Override public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { JLabel label = (JLabel) super.getListCellRendererComponent(list value index isSelected cellHasFocus); if (value instanceof SeparatorList.Separator) { SeparatorList.Separator separator = (SeparatorList.Separator) value; label.setText(separator.getGroup().get(0).toString().substring(01)); label.setFont(label.getFont().deriveFont(Font.BOLD)); label.setBorder(BorderFactory.createEmptyBorder(0500)); } else { label.setFont(label.getFont().deriveFont(Font.PLAIN)); label.setBorder(BorderFactory.createEmptyBorder(01500)); } return label; } }; } public static void main(String[] args) { EventList<String> rawList = GlazedLists.eventListOf( ""apple"" ""appricot"" ""acorn"" ""blueberry"" ""coconut"" ""chesnut"" ""grape""); SeparatorList<String> separatorList = new SeparatorList<String>(rawList createComparator() 1 1000); JList list = new JList(new EventListModel<String>(separatorList)); list.setCellRenderer(createListCellRenderer()); JScrollPane scrollPane = new JScrollPane(list); scrollPane.setBorder(null); JFrame frame = new JFrame(); frame.add(scrollPane BorderLayout.CENTER); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(200200); frame.setLocationRelativeTo(null); frame.setVisible(true); } } Thanks that looks really interesting. I ended up hacking up my own sectioned list in the end because I didn't feel like including a large library just to get this one component. It works but it's not perfect. GlazedLists looks like it might fit the bill really well."
436,A,Removing the CENTER element from a JPanel using BorderLayout Is there any way of removing the Component added to the CENTER of a JPanel with a BorderLayout without having to reference the Component itself? Something like this? BorderLayout layout = panel.getLayout(); panel.remove(layout.getLayoutComponent(BorderLayout.CENTER)); Cool. Had to modify it a bit but it worked. Used it in this fashion: myPanel.remove(layout.getLayoutComponent(BorderLayout.CENTER); nice one I've updated my answer to reflect that change You're both missing the closing parenthesis for the remove function ;) Ensure you you call Container.validate() after you change the components to signal layout manager to recalculate the positions of the components being displayed. In your example it would be panel.validate();
437,A,Java Timing Framework - triggering event at the end of an Animator animation I'm using the Animator class from the Timing Framework to perform a simple animation (moving a JPanel) roughly based on examples in Filthy Rich Clients I've overridden timingEvent() as follows public void timingEvent(float arg0) { float fraction = this.animator.getTimingFraction(); fraction = Math.min(1.0f fraction); if (fraction >= 1.0f) { this.mainGUI.initiateSwitchToMainScreenTransition(); } else if (fraction < 0.5f) { this.translateY = (int) (MAX_Y * (2 * fraction)); repaint(); } } I've overriden paint() to use the value in translateY to move the panel down. The animation itself works perfectly. My problem is the call to initiateSwitchToMainScreenTransition() which I want to be performed when the animation is complete. Whilst this works there is a sizeable delay between the animation ending and the call firing (debugging has confirmed that the problem isn't the length of the time taken by initiateSwitchToMainScreenTransition() - the delay occurs before the call). Is there a better way to achieve this i.e. without the delay? If you are implementing org.jdesktop.animation.timing.TimingTarget then there is an end() method that should be called when your animation is complete - that seems to work for me when I have used it. I do not think you can guarantee that timingEvent will get called after the fraction has reached 1.0. Your implementation does not seem to do anything for the second half of the timer (when fraction is between 0.5 and 1.0). If you want the animation to continue for the entire duration of the timer you could rearrange your code like this: @Override public void timingEvent(float fraction) { translateY = (int) (MAX_Y * fraction); repaint(); } @Override public void end() { mainGUI.initiateSwitchToMainScreenTransition(); } Thanks for that. I actually noticed the end() method last night and switched to using it. However it hasn't got rid of the delay unfortunately. I've set my animation to take 1800ms but it seems that it pretty much completes in 1000ms resulting in an 800ms delay before my code is fired.
438,A,Convert Java resultset to String array I am writing a program that will query an MS access database return the query as a result set and then I want to ultimately convert that result set into a String array so that I can pass it into the constructor of a Swing JComboBox - so the ComboBox will list the items returned by the query. I have been able to store the rows of the result set into an ArrayList and then convert that ArrayList into an object array and the combobox will list the correct items but as objects. I simply cannot ever cast that ArrayList to a String array. Does anyone know if this is possible? Here is some of my code... // Convert the Resultset into an array list public ArrayList<ArrayList<Object>> Results2Array(ResultSet rs) throws SQLException { ResultSetMetaData metaData = rs.getMetaData(); int columns = metaData.getColumnCount(); ArrayList<ArrayList<Object>> al = new ArrayList<ArrayList<Object>>(); while (rs.next()) { ArrayList<Object> record = new ArrayList<Object>(); for (int i = 1; i <= columns; i++) { Object value = rs.getObject(i); record.add(value); } al.add(record); } return al; } // Convert ArrayList to Object Array and pass into GUI ArrayList<String> Locations = new ArrayList<String>(); ArrayList<String> Months = new ArrayList<String>(); ArrayList<String> Years = new ArrayList<String>(); try { DB.loadDriver(); DB.makeConnection(); DB.buildStatement(); Locations = DB.getLocations(); Months = DB.getMonths(); Years = DB.getYears(); Object[] arrLocations = Locations.toArray(); Object[] arrMonths = Months.toArray(); Object[] arrYears = Years.toArray(); dbGUI ui = new dbGUI(arrLocations arrMonths arrYears); ui.setVisible(true); Can anyone offer any suggestions? Thanks! UPDATE: Here is the stack trace that I am receiving: java.lang.ArrayStoreException at java.lang.System.arraycopy(Native Method) at java.util.Arrays.copyOf(Unknown Source) at java.util.ArrayList.toArray(Unknown Source) at kidsfirstdb.Main.main(Main.java:23)  String[] arrLocations = locations.toArray(new String[0]); Is the correct answer. The reason for your exception is that all the objects are in fact not strings. You need to change this:  Object value = rs.getObject(i); to this:  String value = rs.getString(i); or this:  String value = rs.getObject(i).toString(); That last one will need a null check if you can be returning null columns. Note that the toString() representation may not be exactly what you are looking for in all cases but it will get you started. Edit: If you are filling a combo box you are going to need one column per row no? If not you need to represent the whole row as a string in some fashion. Then you put that in the value and put the value directly in the final array list so your loop needs to look like this:  ArrayList<String> al = new ArrayList<String>(); while (rs.next()) { ArrayList<String> record = new ArrayList<String>(); for (int i = 1; i <= columns; i++) { String value = rs.String(i); record.add(value); } String value = methodWhichConvertsArrayListToStringTheWayYouNeedItFormatted(record); al.add(value); } return al; Thanks for your help. I tried what you suggested and I still seem to be getting those exceptions on String[] arrLocations = locations.toArray(new String[0]); Now if you don't mind please share the stack trace. I added the stack trace to the original post thanks. Its because your returned ArrayList is not the list of String but of ArrayList and that ArrayList is having strings finally. I have modified my post to include some code which might help you. Cheers.  String[] arrLocations = locations.toArray(new String[0]); The code above will convert List of Strings to String array. Now in your case you are creating List of Objects so you can't directly convert it to the String array. Generally you have 2 choices: Initially define your List as List of Strings and when populating the List convert your values to Strings (ether by doing Object#toString or extracting/generating meningful String value) and store that into your List e.g. in your code do this String value = rs.getObject(i).toString(); If you don't do it in step 1 then you will have to allocate a String array loop through your List convert current value into String and stick it into array. I would go with option 1. Just as a side note - methods in Java should start with lowercase letter I tried that before and it was giving me a: java.lang.ArrayStoreException at java.lang.System.arraycopy(Native Method) at java.util.Arrays.copyOf(Unknown Source) at java.util.ArrayList.toArray(Unknown Source) at kidsfirstdb.Main.main(Main.java:23) See my extended post Good work DroidIn. But the fact is that that the returned List is a List of List. Even if we use toString() or rs.getString(). It wouldn't work for the List returned by the method. I cent percent agree. But one must know apples and oranges. And it seems he was not aware of that therefore he got exception and he couldn't find out the cause. It's conceptual. The idea is - if you need oranges don't start with apples  Why not use rs.getString(). I will not recommend to do that though. But it would solve your problem. I mean just deal with String from the start. Example // Not a good idea to pass a active resultset as a parameter. // Use disconnected implementation instead for example rowset. public ArrayList<ArrayList<Object>> results2Array(ResultSet rs) throws SQLException { ResultSetMetaData metaData = rs.getMetaData(); int columns = metaData.getColumnCount(); ArrayList<String[]> list = new ArrayList<String[]>(); while (rs.next()) { String[] record = new String[columns]; for (int i = 1; i <= columns; i++) { // Not a good idea to get everything as a string. This way you will // get a default string representation of objects. Suppose you // want to format dates and doubles as per some requirement. record[i-1] = rs.getString(i); } list.add(record); } return list; } Now you need to get it like below. String[][] arrLocations = locations.toArray(new String[locations.size()][0]); Better still check the type and get the values appropriately using meta-data you are having. This will help you format data namely dates and doubles.
439,A,"Swing app global modal Simple question: Can a swing frame be completely modal ( block all others windows ) ? I tried the following but I can still click on other apps windows ( like this browser ) JDialog myDialog = .... myDialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL); Plase paste some code if this is possible. Thanks in advance. UPDATE Thanks for the advice Daniel I'll take it into account when I ask ""Is it good idea to block the whole desktop with my app?"" Now since that is NOT my question do you have an answer for what I've asked? By the way your comment is very useful indeed. Update2 Take a look at this app: strange criminal amusing? Maybe... :) http://www.blockwriter.com/ JFrame is not designed to be modal. Use JDialog for it but you will loose some JFrame functionality doing so. If you can't live with the loss you have to block the EventQueue and replace it with your own to only accept events from the blocking one. See Creating Modal Internal Frames for an explanation using internal frames that should be applicable to JFrame also. Edit: Oups my answer seems a bit off since your code example shows you are already using a Dialog subclass for this. My mistake. I didnt put the initialization code. Yeap I started with JFrame then google a while and switch to JDialog. The thing here is not to block the appliation windows but the whole OS windows.  I don't know about global modal but here's an idea. Take the screenshot of the desktop. Go full screen. Pop up your dialog. Since the desktop is fake screenshot you can ignore any attempt to click into it. Full screen sample: private void toggleFullScreenWindow() { GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice graphicsDevice = graphicsEnvironment.getDefaultScreenDevice(); if(graphicsDevice.getFullScreenWindow()==null) { dialog.dispose(); //destroy the native resources dialog.setUndecorated(true); dialog.setVisible(true); //rebuilding the native resources graphicsDevice.setFullScreenWindow(dialog); }else{ graphicsDevice.setFullScreenWindow(null); dialog.dispose(); dialog.setUndecorated(false); dialog.setVisible(true); dialog.repaint(); } requestFocusInWindow(); } FYI: Full-Screen Exclusive Mode API. Doesn't work on Mac. mhhh... could be.. could be.. I'll give it a try and see if there is a blink. Thanks. Why would you deceive your users like that?  Dialogs are not meant to be globally modal. Every modern OS strongly discourages global modality in its HIG and they may even have deprecated the functionality (as indicated by the fact that you can't get it to work). Your app should never steal events from the entire system; that's not only bad design it's near-criminal in my book. Ignoring the fact that most people like to multi-task between several apps what about the scenario where you open a globally modal dialog and then your application freezes? Ctrl+Alt+Del should work on Windows to kill the app but I'm not sure about Cmd+Opt+Escape on Mac with a globally modal dialog (does Cocoa even have global modality?). None of the Linux platforms have any nice way of killing apps which have taken over complete control of the UI as you are suggesting (you would have to kill X11 completely and start a new instance from scratch). My answer: find another way. I don't care what your client is asking for they don't want this."
440,A,"How to add a JLabel on the DRAG_LAYER under the mouseDragged event I am currently working on a drag n drop application and I would really like to know what's happening inside the JLayeredPane and I get a particular program behaviour... Here's the deal: I have a chessboard placed on the DEFAULT_LAYER. I also have a chessPiece which I'd like to be added to the DRAG_LAYER when I move it. But I have a fetish... I want to use this line layeredPane.add(chessPiece JLayeredPane.DRAG_LAYER); only under the mouseDragged event. So when I do this my chessPiece disappears while moving my mouse and gets hidden behind the chessboard (?!?) When I change the above line into this: layeredPane.add(chessPiece JLayeredPane.DRAG_LAYER0); everything becomes normal again. Why is that happening? I have also used the above diagnostic and here's what happens: int number = layeredPane.getLayer(chessPiece); int number3 = layeredPane.getComponentCountInLayer(JLayeredPane.DRAG_LAYER); While dragging the first one always returns the number 400 which is the notation for the drag layer. BUT the other one returns a 1 at first but then it all become zeros as we drag... This means that at least for an instance of time the chesspiece actually GOT into the drag layer and then fell off. But that's what happens if you ask the pane... Does this help at all? Also would you mind giving me a link of the jlayeredpane source code? I'm looking for JLayeredPane.java but had no luck till now... Thanx in advance...  I use layeredPane.moveToFront(component) instead of relying on the index parameter. Note that the add(Component comp Object constraints int index) is implemented by java.awt.Container not javax.swing.JLayeredPane. ah. but moveToFront/moveToBack and setLayer is the recommended approach if you read the docs: ""This sequence (defined by java.awt.Container) is the reverse of the layer numbering sequence. Usually though you will use moveToFront moveToBack and setLayer."" Note: add(...) invokes addImpl(...) which is implemented by JLayeredPane.  The question is what is the difference between the two methods? Well if you read the API you will find the difference. In the first case the component is added at the ""end"" of the container. In the second case the component is added at the ""specified position"" in the container. Since there is only one component added to the DragLayer theorectically it shouldn't make a difference which add method is used. However because you also have a component on the DefaultLayer it may may a difference. The only way to know for sure is to look at the source code. However as has already been suggested in your other posting. This code should not be done in the mouseDragged() event. As multiple drag events are generated it does not make sense to continually ""add"" the chess piece to the drag layout. All you need to do is change the location of the chess piece as the mouse is moved. That is why the mousePressed() event is used to add the chess piece to the drag layer. I am aware of the difference between the two methods. As you correctly stated in the first case the component is added at the end of the container and in the second case at the specified position in the container. But the problem is that there's nothing else on the drag layer except from the chesspiece. That's exactly the problem. Therefore it shouldn't matter which method I choose to use. And moreover how do you explain the fact that sometimes (while dragging) the chesspiece seems to appear behind the chessboard? Here's a link to the code: http://nopaste.com/p/akZeOG7Bb  You must use GlassPane. Before you start to translate the label you must use GlassPane.Add(label) and label.setLocation(xy) inside the MouseDragged event. The listener must be MouseMotionListener and not the plain MouseListener."
441,A,Is XML or XUL the future of Java GUI building? After spending a lot of time and code on programming in Swing I thought this can't be state-of-the-art Java GUI building. After not finding a user-friendly visual gui bilder for eclipse I stumbled upon declarative GUI building with XML UI toolkits... and I thought: This must be it! I think it's the right way to go easy and also close to web-programming. But after looking around in the web and on SO I got the impression that it is not very common! Although there are many implementations and APIs it seems like most of them are kind of dead and had no updates in the last 5 years.. So I wonder: Is my feeling right that XML is not very widespread for java GUIs? And if so - what are the reasons? Maybe it couldn't become accepted or it has some major drawbacks or people are doing everything in the web instead with fatclients or there are better alternatives maybe javafx? I just need to know if it is worth spending time in that area or better look for alternate ways. As I dont read developer magazines I just don't know what the trends in gui building are and which technologies are believed to have a future. But I can't imagine that people still spend so much time on writing nasty swing (or swt) apps. You should consider using NetBeans for your GUI building. It has always worked really well for me even switching between IDEs is not that bad. There new fresh and interesting approach - it uses YAML. Check it out at http://code.google.com/p/javabuilders/  I'd second Thilos suggestion with javaFX. Additionally the trend is pointing to webapps so I think that in the long run javaFX and web based UIs will catch up to swing+swt GUIs.  If you use Eclipse you can now use WindowBuilder to help you in creating Swing apps in a user-friendly visual GUI builder. It's now available as a free download and Google has donated the Swing GUI builder framework to the Eclipse Foundation.  I came to the same conclusions as you about the declarative frameworks out there. It is not worth learning a new GUI syntax unless it's widely supported. XUL as an interface language is widespread but there is no java rendering framework for it. I'd say HTML+CSS+Javascript and a Servlet container is the best Java platform for GUIs today but sadly I haven't found a platform independent way to display web pages like a desktop application.  Sun's answer to that seems to be JavaFX. It has a declarative language for specifying the GUI and there will be builder apps as well. I was investigating JavaFX 2.0 and was rather happy with the product until I saw that they only support Windows. http://javafx.com/faq/#5 JavaFX is a bog standard imperative language not actually a declarative language. What it does have is syntactical support for setting a load of properties at initialisation time (plus binds). I just took a deeper look into JavaFX and it gives a good impression. basic controls are implemented with much lesser code. bindings are convenient and together with css-styling and charts and the coming authoring tools its something I will definitly spend more time on!  I do all my swing stuff by hand and none of my application is nasty. If you do not know how to create usable and good looking UI there is no technology to help you. cool it! maybe I didn't express myself very well. my apps aren't nasty at all (they are the most beautiful...) but the process of building a complex gui with swing is clearly nasty at least for me :)  The answer is surely not going to be XML. What problem are you trying to solve? You want to have reusable building blocks and a compact way of describing them. I don't see XML helping you there. [edit] Creating a java code equivalent of XUL would be an immense improvement on XUL. XML makes it really really hard to do good separation of concerns and once and only once. It is however perfect for the mongolian horde approach. You need a layer on top of swing it only provides the building blocks. it's just that i think swing coding is nasty. i like the structured hierarchical design of xml documents and the clear separation of functionality structure and design. personally i think it's better to read. and judging from what i saw about xul it needed much less code than swing.  There is some prototype work going on for e4 (Eclipse 4) which would allow building a GUI by editing an Ecore model and customizing it via CSS. See this blog post for some details and instructions to try it out yourself.  Five to ten years ago XML was very popular. Although fine to provide some kind of standardisation for transferring data between heterogeneous systems it's not suitable for programming. It always starts with the easy stuff and lets declare everything. But any real system requires code. XML then falls down. There is also the problem that XML is a bad syntax for humans and even languages like Java are easier to read. On the other hand there is clearly a need for the rails of GUIs. Naked Objects is the closest reasonable attempt I have seen. You should learn more about XUL. It's never used alone obviously; it's scripted with JavaScript (or in the case of Miro Python). Try it. It's really awesome.
442,A,"Jpanel Printing on PersonaC30 card printer I am using PersonaC30 card printer to print my Jpanel data on card. My print method is working fine with paper printer but when i print with card printer it's not printing my data. It's printing well externally but its not working with my application. Here is my code: private void printCard(){ PrinterJob printjob = PrinterJob.getPrinterJob(); printjob.setJobName("" TESSCO CUSTOMER CARD ""); printjob.setPrintable (new Printable() { public int print(Graphics pg PageFormat pf int pageNum){ Paper card = pf.getPaper(); // card.setImageableArea(0 0 153 243); card.setSize(243 154); pf.setPaper(card); pf.setOrientation(PageFormat.LANDSCAPE); if (pageNum > 0){ return Printable.NO_SUCH_PAGE; } Graphics2D g2 = (Graphics2D) pg; g2.translate(pf.getImageableX() pf.getImageableY()); g2.translate( 0f 0f ); jLayeredPane2.paint(g2); return Printable.PAGE_EXISTS; } }); if (printjob.printDialog() == false) return; try { printjob.print(); } catch (PrinterException ex) { System.out.println(""NO PAGE FOUND.""+ex); } } Try this. I added some code to resize the image of the panel. private void printCard() { PrinterJob printjob = PrinterJob.getPrinterJob(); printjob.setJobName("" TESSCO CUSTOMER CARD ""); Printable printable = new Printable() { public int print(Graphics pg PageFormat pf int pageNum) { if (pageNum > 0) { return Printable.NO_SUCH_PAGE; } Dimension size = jLayeredPane2.getSize(); BufferedImage bufferedImage = new BufferedImage(size.width size.height BufferedImage.TYPE_INT_RGB); jLayeredPane2.print(bufferedImage.getGraphics()); Graphics2D g2 = (Graphics2D) pg; g2.translate(pf.getImageableX() pf.getImageableY()); g2.drawImage(bufferedImage 0 0 (int) pf.getWidth() (int) pf.getHeight() null); return Printable.PAGE_EXISTS; } }; Paper paper = new Paper(); paper.setImageableArea(0 0 153 243); paper.setSize(243 154); PageFormat format = new PageFormat(); format.setPaper(paper); format.setOrientation(PageFormat.LANDSCAPE); printjob.setPrintable(printable format); if (printjob.printDialog() == false) return; try { printjob.print(); } catch (PrinterException ex) { System.out.println(""NO PAGE FOUND."" + ex); } } Thank you so much its absolutely work fine. Thank for your help Emre."
443,A,Component in a JScrollPane stops receiving KeyEvents I am putting a component ( derivative on JPanel ) inside a JScrollPane. scrollPane = new JScrollPane(component); since the component occasionally changes size I have to occasionally do :  SwingUtilities.invokeLater(new Runnable(){ public void run() { scrollPane.getViewport().setView(component); component.repaint(); } }); Also the component can receive KeyEvents  component.addKeyListener(this); SwingUtilities.invokeLater(new Runnable() { public void run() { component.setFocusable(true); component.requestFocusInWindow(); } }); However the component never receives any Key Events. Even the code in keyTyped() does not execute ( I put a System.out.println() there). What is more baffling is in debug mode I can pause the main thread when the AWT event thread would accept key events. But during normal execution it does not work. Can anyone suggest what I am doing wrong ? Can you elaborate why you must set the view again? Doesn't the component handle the size changes correctly? Have you considered implementing java.swing.Scrollable? Kindly tell me how can the component handle size changes correctly ? Like ... what are the steps ? Replacing scrollPane.getViewport().setView(component); with component.revalidate() along with Scrollable solved my problem. Thanks! Making my component java.swing.Scrollable and replacing scrollPane.getViewport().setView(component); with component.revalidate solved my prioblem. Thanks ordnungswidrig!
444,A,"""cannot find symbol method drawImage(java.awt.image.BufferedImageintint)"" Okay now I've been using drawImage in java for a while and this has never happened before. Why can't it find ""drawImage(java.awt.image.BufferedImage<nulltype>intint)"" in my code?  import java.awt.*; import javax.swing.*; import javax.swing.JPanel; import java.awt.event.*; import java.awt.image.*; import java.io.*; import java.util.Arrays; import javax.imageio.ImageIO; public class imgtest extends JFrame{ BufferedImage img; Graphics g2d; /** * Creates a new instance of imgtest. */ public imgtest() { File file = new File(""test.png""); img = ImageIO.read(file); } /** * @param args the command line arguments */ public void paint(Graphics g) { g2d = (Graphics2D)g; g2d.drawImage(img null 0 0); } public static void main(String[] args) { imgtest i = new imgtest(); i.setSize(640480); i.setVisible(true); i.repaint(); // TODO code application logic here } } Along with what other have said about needing to decalre it is a Graphics2D take it out of the instance variables and make it a local variable. There is no point in having an instance variable that is used in only one method and always has the value overwitten each time that method is called. Instance variables are used to persist state between method calls... you are not doing that here. public void paint(Graphics g) { final Graphics2D g2d; g2d = (Graphics2D)g; g2d.drawImage(img null 0 0); } he could be doing more than what is shown in the code snippet ;) In my experience more often than not that isn't the case unfortunately.  You've declared g2d as a Graphics object and Graphics doesn't have the drawImage(BufferedImage BufferedImageOp int int) method. Fix: replace the line Graphics g2d; with Graphics2D g2d; When Java is looking for attributes of an object that's stored in a variable like this it always uses the declared type of the variable namely Graphics. The fact that you casted g to a Graphics2D doesn't make a difference unless you actually store it in a variable of type Graphics2D.  You have declared g2d as Graphics and not a Grahphcs2d object Consider either changing the method call from  g2d.drawImage(img null 0 0); to  (Graphics2d) g2d.drawImage(img null 0 0); or change your definition of Graphics as in David's post"
445,A,"How to hide cursor in a Swing application? Is there anyway to hide cursor other than using transparent gif image? Can you elaborate further? Cursor on a java app? yes..I wanted to hide the cursor when the user point the mouse outside JPanel in JFrame. frame.setCursor(frame.getToolkit().createCustomCursor( new BufferedImage(3 3 BufferedImage.TYPE_INT_ARGB) new Point(0 0) ""null""));  I solve this problem much easier: final Timer cursorTimer = new Timer(2000 new ActionListener() { @Override public void actionPerformed(ActionEvent e) { getContentPane().setCursor(null); } }); cursorTimer.start(); addMouseMotionListener(new MouseMotionAdapter() { @Override public void mouseMoved(MouseEvent e) { getGlassPane().setCursor(Cursor.getDefaultCursor()); cursorTimer.restart(); } }); Strange but yesterday it work but now it's not working. I need to test it more time.  In the documentation it says that if the image is invalid then it will be transparent by default so therefore passing an empty image will result in a transparent cursor. But Passing null into the method for the image will result in an exception. Toolkit tk= getToolkit(); Cursor transparent = tk.createCustomCursor(tk.getImage("""") new Point() ""trans"");  When using the LWJGL under Mac OS you need to do this: System.setProperty(""apple.awt.fullscreenhidecursor""""true"");  It appears that the Cursor class does not have a ""blank"" cursor to begin with so one could define a new ""blank"" cursor using the Toolkit.createCustomCursor method. Here's one way I've tried which seems to work: // Transparent 16 x 16 pixel cursor image. BufferedImage cursorImg = new BufferedImage(16 16 BufferedImage.TYPE_INT_ARGB); // Create a new blank cursor. Cursor blankCursor = Toolkit.getDefaultToolkit().createCustomCursor( cursorImg new Point(0 0) ""blank cursor""); // Set the blank cursor to the JFrame. mainJFrame.getContentPane().setCursor(blankCursor); Edit Regarding the comment about everything inside the JFrame ending up without a cursor it seems that the Components which are contained in the JFrame will end up inheriting the cursor of the container (the JFrame) so if it is a requirement to have a certain Component have the cursor appear one would have to manually set the desired cursor. For example if there is a JPanel contained in the JFrame then one could set the cursor of that JPanel to the system's default using the Cursor.getDefaultCursor method: JPanel p = ... // Sets the JPanel's cursor to the system default. p.setCursor(Cursor.getDefaultCursor()); Thanks coobird. Custom cross-hair cursor in 5 mins! hi I am trying to draw mouse cursor in paint method ...but i am getting Exception in thread ""AWT-EventQueue-0"" java.lang.IndexOutOfBoundsException: invalid hotSpot ? any one have about this is happening? Thank you very much for the answer Coobird. But I have another problem. I created JFrame which contains JPanel which size is smaller than the JFrame. I only want the cursor disappears when the mouse pointed outside the JPanel.Is that means that when I set the cursor in the main JFrame as invisible the cursor will disappear completely on the screen? Hi Jessy I've added the part about how to set the JPanel to the system default in my answer. Thank you very much CooBird...It works!! :-) you made my day... You're welcome :)  As per javadoc for ""createCustomCursor""  Creates a new custom cursor object. If the image to display is invalid the cursor will be hidden (made completely transparent) and the hotspot will be set to (0 0). So in theory w.setCursor( w.getToolkit().createCustomCursor( null null null ) ); would do the trick. however in Java 6 and in all early releases of Java 7 (at least until may 2012) there's a bug related to this case NOT handled by the code http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7150089 (this particular is for MacOS but by browsing the source you may easily find that there's no checking for Image (1st param) validity; there's tracker.isErrorAny() checking which doesn't do it's job in this case) so passing null or invalid Image simply throws a NPEx. Oracle probably WILL deliver; still the simplest answer is as of now  w.setCursor( w.getToolkit().createCustomCursor( new BufferedImage( 1 1 BufferedImage.TYPE_INT_ARGB ) new Point() null ) ); until Oracle bugfixers prove they are actually worth their price in dung."
446,A,"How to reliably get row index in JTable from MouseEvent? How can I find out which row in a JTable the user just clicked? Try this: aJTable.rowAtPoint(evt.getPoint());  If you only ever care about listening to selections on the JTable: jTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() { public void valueChanged(ListSelectionEvent e) { int sel = jTable.getSelectedRow(); } }); It should but it also allows to more more with in reaction to the click. The ""answer"" will need some kind of listener so you know when to read the value. Does this still work if it's in column or cell selection mode?"
447,A,"Session management using Hibernate in a Swing application How do you do your Hibernate session management in a Java Desktop Swing application? Do you use a single session? Multiple sessions? Here are a few references on the subject: http://www.hibernate.org/333.html http://blog.schauderhaft.de/2008/09/28/hibernate-sessions-in-two-tier-rich-client-applications/ http://in.relation.to/Bloggers/HibernateAndSwingDemoApp Problem with ""''session per thread''"" is good Swing applications do the database access outside the EDT usually in newly created SwingWorker threads. This way ""''session per thread''"" quickly becomes ""''session per click''"".  Use one session per thread (doc) and a version or timestamp column to allow optimistic concurrency and thereby avoiding session-to-instance conflicts. Attach instances to session when needed unless you need long running transactions or a restrictive isolation level. In a swing application basically everything happens in one thread. So this comes down to single session for the application with the document drawbacks.  Single session. Start transaction when you need to do a set of operations (like update data after dialog box OK button) commit the tx at the end. The connection though is constantly open (since it's the same session) and thus all opportunities for caching can be used by both Hib and RDBMS. It may also be a good idea to implement a transparent session re-open in case the connection went dead -- users tend to leave applications open for extended periods of time and it should continue to work Monday even if DB server was rebooted on weekend. Update Jens Schauder provided a reason to use multiple sessions: partial (unwanted) updates to the session. Well that comes down to the way you use Hibernate. Suppose we have two dialogs open (as in Jens' blog example). If user clicks a radiobox and we immediately update a Hibernate entity associated with this radiobox then when user clicks Cancel we're in trouble -- session is already updated. The right way as I see it is to update dialog variables (non-Hibernate objects) only. Then when user clicks OK we begin a transaction merge updated objects commit the transaction. No garbage gets ever saved into session. MyHibernateUtils.begin(); Settings settings = DaoSettings.load(); // update setttings here DaoSettings.save(settings); MyHibernateUtils.commit(); If we implement such a clean separation of concerns we can later switch to multiple sessions with a simple change of MyHibernateUtils.begin() implementation. As for possible memory leak well... Transaction.commit() calls Session.flush() which AFAIK cleans the cache too. Also one may manually control the caching policy by calling Session.setCacheMode().  Don't use a single session. For everything but the smallest applications it will grow collecting autdated data and become slower and slower since the dirty check needs to check every entity in the session. If you don't need/want lazy loading and tracking of changes by hibernat you can use short lived sessions. But if you want to benefit from the power of hibernate use the aproach I described in my blog: http://blog.schauderhaft.de/2008/09/28/hibernate-sessions-in-two-tier-rich-client-applications/ or in the german version: http://blog.schauderhaft.de/2007/12/17/hibernate-sessions-in-fat-client-anwendungen/ AFAIK it is really the same aproach described in the http://in.relation.to/Bloggers/HibernateAndSwingDemoApp but with a recommendation how to actually scope your session: On Session per Frame with the exception of modal Frames which use the session of the parent Frame. Just make sure never to combine objects from different sessions. It will cause lots of trouble. In reply to Vladimirs update: The cancel actually works extremly nice with my aproach: throw away the session. session.flush does not fix the problem of the evergrowing session when you work with a single session for application. Of course with the aproach you describe you can work with short lived sessions wich should work ok. BUT you lose a lot: lazy loading only works with attached objects automatic detection of dirty objects. If you work with detached objects (or objects that aren't entities at all) you have to do this yourself. Good points Jens!"
448,A,"JTable TableModel problem in Java I can show my data in a JTable without a problem but when I want to filter while my app is running the JTable is not showing me data changes. I searched for it and found a class named TableModel but I can't write my AbstractTableModel. Can anyone show me how I can do this? Personelz.Java package deneme.persistence; import java.beans.PropertyChangeListener; import java.beans.PropertyChangeSupport; import java.io.Serializable; import javax.persistence.Basic; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.NamedQueries; import javax.persistence.NamedQuery; import javax.persistence.Table; import javax.persistence.Transient; /** * * @author İbrahim AKGÜN */ @Entity @Table(name = ""PERSONELZ"" catalog = ""tksDB"" schema = ""dbo"") @NamedQueries({@NamedQuery(name = ""Personelz.findAll"" query = ""SELECT p FROM Personelz p"") @NamedQuery(name = ""Personelz.findByPersonelıd"" query = ""SELECT p FROM Personelz p WHERE p.personelıd = :personelıd"") @NamedQuery(name = ""Personelz.findByAd"" query = ""SELECT p FROM Personelz p WHERE p.ad = :ad"") @NamedQuery(name = ""Personelz.findBySoyad"" query = ""SELECT p FROM Personelz p WHERE p.soyad = :soyad"")}) public class Personelz implements Serializable { @Transient private PropertyChangeSupport changeSupport = new PropertyChangeSupport(this); private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy=GenerationType.AUTO) @Basic(optional = false) @Column(name = ""PERSONELID"" nullable = false ) private Integer personelıd; @Column(name = ""AD"" length = 50) private String ad; @Column(name = ""SOYAD"" length = 50) private String soyad; @Column(name = ""YAS"") private Integer yas; public Personelz() { } public Personelz(Integer personelıd) { this.personelıd = personelıd; } public Integer getPersonelıd() { return personelıd; } public void setPersonelıd(Integer personelıd) { this.personelıd = personelıd; } public String getAd() { return ad; } public void setAd(String ad) { String oldAd = this.ad; this.ad = ad; changeSupport.firePropertyChange(""ad"" oldAd ad); } public String getSoyad() { return soyad; } public void setSoyad(String soyad) { String oldSoyad = this.soyad; this.soyad = soyad; changeSupport.firePropertyChange(""soyad"" oldSoyad soyad); } public Integer getYas() { return yas; } public void setYas(Integer yas){ this.yas = yas; } TABLEMODEL  public class TableModel extends AbstractTableModel { String[] headers; List<Personelz> personel; int row; int column; Object[][] per; /** Creates a new instance of TableModel */ @SuppressWarnings(""empty-statement"") public TableModel(List<Personelz> p) { this.personel = p; column=2; row=this.personel.size(); headers=new String[column]; headers[0]=""AD""; headers[1]=""SOYAD""; per={p.toArray()p.toArray()}; } public int getColumnCount() { return column; } public int getRowCount() { return row; } public Object getValueAt(int rowIndex int kolonindex) { return per[rowIndex][kolonindex]; } public String getColumnName(int i) { return headers[i]; } You should utilize the TableModelListener interface which your JTable implements. Once you add your table to your TableModel call the appropriate fireTableChanged()-type event that AbstractTableModel implements. This should force your JTable to update. You will still need to implement a method to reset your data in your model when your filter operation returns. it should be in this method that you call your fireTableChanged() event. you also should ensure that you are in the AWT thread when you fire the table changed event.  There is a very good library called GlazedLists that makes it a lot simpler to work with lists and tables including column sorting and row filtering. Its definitely worth taking a look. http://publicobject.com/glazedlists/ HTH  I suggest reading this How to Use Tables (from the Java Tutorials Using Swing Components) Basically the TableModel has to notify the Table of changed data by firing the appropriate Events. See here jitter is correct. The JTable listens to the TableModel. The TableModel fires TableModelEvent to its listener when its state has changed. You can extend AbstractTableModel or use DefaultTableModel which has some support for managing the listeners and firing the events."
449,A,"Can a layout manager spawn several JPanels? I have to build a rather large form with many controls. The controls are divided in basic controls/settings and extended controls/settings. The user can decide if he wants to see only the basic or both basic and extended controls. I've dropped all extended controls onto their own JPanel so that I can easily switch between the two views by showing or hiding this panel. Currently I'm using GroupLayout and what happens is that the controls on different panels are not aligned: Label aaa: Text field Label a: Text field Label aaaaaa: Text field ---------------------------- Label b: Text field Label bbb: Text field Label bb: Text field Unfortunatly I found now way to ""synchronize"" the layouts of the two panels (except using AbsoluteLayout and fixed control coordinates) Is there any way to achive this? Is my whole design flawed? EDIT: If it is possible I would like to keep the GroupLayout manager. As far as I know no Swing LayoutManager (from JRE or open source) can span several panels. I am currently working on such a feature (which I called ""layouts synchronization"") for my DesignGridLayout project but it is not something easy to implements (I have started about 2 weeks ago and I still don't see exactly if and when I will get to something interesting but I still have high hope for it;-)) One option you could check would be to add all components to the same panel (with just one GroupLayout then) and hide/show them based on user's selection. Hopefully GroupLayout will adapt the size to the situation (after calling pack()). If GroupLayout behaves well then it would just be a matter of calling pack() each time after user changes his selection to show/hide extended fields. Else you would have to manually set the size of your panel every time the user changes his selection.  If you want to keep them in separate panels with separate layouts: Iterate over all of the labels that you add and find the maximum preferred width of each. Iterate a second time and set the preferred size to that each label's preferred height but the maximum width.  I think there is no way to do it with the standard layout managers. You'll probably have to write your own layout manager but it shouldn't be too hard if you subclass GroupLayout.  You could use GridLayout instead of GroupLayout which will give you uniform spacing between the columns  Probably the easiest (good) way to do it is to add all the components to the main panel. Set the subpanels to non-opaque and add the also to the main panel. The main panel the needs optimised drawing to be switched off. Another technique is to add a spacer component. To the bottom panel add a component in the same column as the labels which dynamically takes the width component of its various size methods from the top labels. Do the same in reverse to the top panel.  This is the explanation of th GridLayout. This will set every component to the size you expect it. With the GridData object you can specify how the components are ordere. Examples"
450,A,"Java layout manager vertical center I have panel that is using group layout to organize some label. I want to keep this panel center of the screen when re sized. If i put the panel inside a another panel using flow layout i can keep the labels centered horizontally but not vertically. Which layout manager will allow me to keep the panel centered in the middle of the screen? I also tried border layout and placed it in the center but it resizes to the window size. First I should mention read my article on layouts: http://web.archive.org/web/20120420154931/http://java.sun.com/developer/onlineTraining/GUI/AWTLayoutMgr/. It's old but very helpful (unfortunately that article pre-dates BoxLayout. I have some slides when I gave that talk at JavaOne which includes BoxLayout at http://javadude.com/articles/javaone) Try BoxLayout: Box verticalBox = Box.createVerticalBox(); verticalBox.add(Box.createVerticalGlue()); verticalBox.add(stuffToCenterVertically); verticalBox.add(Box.createVerticalGlue()); and if you want to center that stuff use a HorizontalBox as the stuffToCenterVertically: Box horizontalBox = Box.createHorizontalBox(); horizontalBox.add(Box.createHorizontalGlue()); horizontalBox.add(stuffToCenter); horizontalBox.add(Box.createHorizontalGlue()); Way easier to ""see"" in the code than gridbag Link to article no longer works... Rassafrassa Oracle... I updated the link to point to the wayback machine. I'll make a copy of the article at some point. I agree that you'll have more luck with a BoxLayout. They are much easier to use than GridBag. And no matter what you choose reading the docs a little (at least the Swing Layout sample doc which is pretty short) is always a good idea. I agree that GridBagLayout is generally more complex but for centering a single panel it's only two lines. The problem is that you cannot ""see"" that when reading the code... (I've edited my answer to state ""see"" rather than ""easier""...) I ""see""... But on the other hand ""createVerticalGlue()"" means nothing to me either without reading the docs. fair... but gives a little more hint than an empty GridBagConstraints ;)  You can build you own LayoutManager to center a single component(both axis or just one). Here is the one which does it on both axis you can easily change it to have vertical or horizontal centering. The current implementation layouts first visible child you can change that too... public class CentreLayout implements LayoutManager java.io.Serializable { public void addLayoutComponent(String name Component comp) { } public void removeLayoutComponent(Component comp) { } public Dimension preferredLayoutSize(Container target) { return target.getPreferredSize(); } public Dimension minimumLayoutSize(Container target) { return target.getMinimumSize(); } public void layoutContainer(Container target) { synchronized (target.getTreeLock()) { Insets insets = target.getInsets(); Dimension size = target.getSize(); int w = size.width - (insets.left + insets.right); int h = size.height - (insets.top + insets.bottom); int count = target.getComponentCount(); for (int i = 0; i < count; i++) { Component m = target.getComponent(i); if (m.isVisible()) { Dimension d = m.getPreferredSize(); m.setBounds((w - d.width) / 2 (h - d.height) / 2 d.width d.height); break; } } } } } unfortunately this doesn't work for me. I get a stack overflow (haha) in the method `preferredLayoutSize`.  GroupLayout on the panel itself with GroupLayout.Alignment.CENTER for both vertical and horizontal and setPreferredSize(new Dimension(yourChosenWidthyourChosenHeight)) to set the panel to not resize. You might also do setMinimumSize and setMaximum size on the panel just to be safe. If you're feeling snazzy you can just use one single GroupLayout for the whole thing by carefully choosing parallel/sequential groups and grouping the labels appropriately.  Try using a GridBagLayout and adding the panel with an empty GridBagConstrants object. For example: public static void main(String[] args) { JFrame frame = new JFrame(); frame.setLayout(new GridBagLayout()); JPanel panel = new JPanel(); panel.add(new JLabel(""This is a label"")); panel.setBorder(new LineBorder(Color.BLACK)); // make it easy to see frame.add(panel new GridBagConstraints()); frame.setSize(400 400); frame.setLocationRelativeTo(null); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } I have always wondered how to do this in the end I gave up and used MigLayout instead. This is what I think of gridbag: http://madbean.com/anim/totallygridbag/ :)"
451,A,"How can I make a swing JButton repeat its action when it is held down? I am creating an touch screen application using Swing and have a request to change one of buttons so that it will behave like a keyboard when the button is held down. (First of all I am not sure that the touch screen will allow the user to ""hold down"" the button but pretend that they can for now) I was going to go down the path of starting a loop when mousePressed was called and then ending the loop when mouseReleased was called. This will involve starting a thread and having to deal with synchronization as well as invokeLater() to get events back on the EventQueue. Is there a very simple way to do what I want? I hope I am just not seeing the API to do it. There is no simple way. I think what you outlined with a thread doing timed sleeps and polling the button is the only way. I would do it like this: Listen to mousePressed and schedule a java.util.Timer to be launched at a later time. The Timer does the action and set itself to schedule again. Listen to mouseReleased to cancel the Timer.  javax.swing.Timer is your friend. And here's an article with some more info. @Christopher updated thanks That article link is stale.  I went with the java.swing.Timer since it will automatically post back to the Swing EventQueue and that is what I am looking for. Thanks for the help."
452,A,"How to force a tooltip to update on a TableCellRenderer when the text is identical? In a Java program I am using a custom renderer for cells in a JTable. On this renderer I set a tooltip for which the content depends on the current cell. When the values are different the tooltip is updated and will appear next to the mouse pointer over the cell. However when the text for this tooltip is identical when changing cell (it happens that a few cells have the same text for tooltip) the TooltipManager considers that the tooltip hasn't changed and it leaves the previous one on the previous position. Does someone knows how to make it so that the tooltip would be updated on each cell even with identical values? Would be interesting if the downvoter from today would explain his gesture to know what I can do to improve my question. I think your best bet is to override getToolTipLocation(MouseEvent) in your component and have it track the location of the mouse. If either the text or the location of a tooltip have changed then the tooltip will update. Indeed that would be a good solution. Checking the sources it appears that the JTable doesn't extend this method letting Swing decide where to put the tooltip. Thanks to that only the text determines if a tooltip should be changed or not. To apply this method I would have to extend the JTable though (and refactor a few things) so that it would delegate this call to the renderer (or simply return the current position all the time).  Add or remove a zero-width non-breaking space?</hack> A bit hacky indeed and this would need to add a different number of such spaces depending on the cell. Though I guess that with a ""odd/even on row+column"" rule it would work (making a checkers grid). I will check into that if nothing else."
453,A,"NetBeans (Java Swing): Set window size This is driving me crazy. When I set an appropriate size for my window in design-mode it just ignores this size and uses something else when I compile and run. Even tough I set the minimumSize and preferredSize it just ignores this... Why? How can I set my own size? Are you doing this by dragging with the mouse or are you setting a property? Even if you've set the size with minimumSize and preferredSize you might have forgotten to call Window.pack() in which Swing will resize the components (and all of it's subcomponents) according to the sizes set. You call it in your window (or whatever is building your window) after all the preferred sizes are set. Alternatively you can use the Component.setSize() method but it comes with some caveats. Sure `pack()` should be called after all your layout (setting layouts sizes and positions) of your UI component is done. It depends on where your code for layouting is (usually in the constructor). Could you please explain where this call to pack() must bo done ?  I've found myself in a similar situation while using netbeans ide. I had a read of the following thread that helped: http://forums.netbeans.org/ptopic28011.html Seems as though the swing application framework is saving the app's window size in a subfolder within your home dir (for Windows the ""Application Data"" folder for Linux in your ""~/"" home folder). For example for my application 'CrapApp' swing had saved some last-window-size info into the sub-folder ""~/.CrapApp/"" into a file called ""mainFrame.session.xml"". So no matter how I re-sized the window within the designer upon running it seemed to have ignored it and instead loaded the window size from the preferences within this sub-folder. So my solution was to delete this preserved-settings sub-folder eg in my case ""rm -rf ~/.CrapApp/"" Then the problem went away and I could re-size within the designer and run the app with this re-sized window now visible. This made me want to learn what triggered this issue. I noticed that simply running the app within the netbeans ide and closing it didn't generate the sub-folder. After a bit of tinkering with my app I noticed the following action triggered the generation of this ""~/.CrapApp/"" sub-folder. Going to my app's ""Help >> About"" Click the ""Close"" button in the about dialog that appears Exit the app And now the ""~/.CrapApp/"" sub-folder re-appears. This help/about dialog was auto-generated by netbeans ide so I didn't really tinker with it but this seems to have been the culprit in my case. Perhaps it may be a bug in the netbeans ide I'm using a somewhat old version (v6.8) which seems roughly from the era of your original post too.  Have you checked if you really set the size of the JFrame or of a contained JPanel? Have you tried setSize?"
454,A,What are usable databinding libraries for Swing? Something that can do two-way bean synchronization with components and also more fancy (advanced) stuff? There is also the JGoodies Binding project. The author has a fairly detailed presentation on it. It works using PropertyChangeListeners if I recall correctly. I haven't used it myself but other developers in my workplace have experimented with it and had fairly positive impressions. Looks like project is abandoned? It has no downloads now Try http://www.jgoodies.com/downloads/libraries.html - latest bindings release was Dec 2010 so it looks like it's still alive - maybe the java.net project side is dead. A looked in to this stuff a couple of years ago and all the options jgoodies was the most complete. It does require PropertyChangeListene's to be supported on your beans but then all the others did too.  You need to get Hitch..... http://hitch.silvermindsoftware.com/ Site dead it seems  Well there's the Beans Binding project for starters. There's an example on java.net. If you use NetBeans there's support built in.
455,A,How can I display a BufferedImage in a JFrame? I want to display variations of the same image in the same JFrame for example display an image in JFrame then replace it with gray scale of the same image. You will have to repaint the JFrame whenever you update the image. Here is what a simple google on the topic brings up: (I use those tutorials for all my Java coding) Java Tutorial: Drawing an Image  I'm not really sure what you question is but if you have a BufferedImage then you simply create an ImageIcon using the image then you add the icon to a JLabel and add the label to the GUI like any other component. If you question is about how to create a gray scale the I suggest you search the web using those terms as the search keywords I'm sure you will find examples out there.  To build on camickr's solution (for the lazy like me who want quick code to copy/paste) here's a code illustration: JFrame frame = new JFrame(); frame.getContentPane().setLayout(new FlowLayout()); frame.getContentPane().add(new JLabel(new ImageIcon(img))); frame.getContentPane().add(new JLabel(new ImageIcon(img2))); frame.getContentPane().add(new JLabel(new ImageIcon(img3))); frame.pack(); frame.setVisible(true); Oh my god :DDD That helped me so much !!!
456,A,"Displaying entity-attribute-value data in JTable? How can I use a JTable to display & edit attribute properties for entities retrieved from an entityattributevalue (EAV) store (a relational DBMS)? I know this is a question with a lot of possible answers so PLEASE look at the requirements I have below before answering. I promise to vote up answers that show you've read & understand the whole thing (as long as they aren't totally silly). The user needs to be able to: Filter/Search entities by their attributes Choose which attributes to show (as columns) Sort entities by chosen attributes Edit attribute values Do operations on selected entities (Optional) Ability to save view for later use. System Requirements: Number of entities: needs to scale up to 100K+ unique entities Attributes: user can add and define new attributes system should be able to handle this Underlying Storage: H2 Database (already designed) communicating by JDBC Memory: not everything will fit so somehow needs to pull from DBMS queries Performance: should minimize number of queries needed to DBMS (one query per attribute OK and I have a form with 1 query per table view but it sucks). Queries: ONE query should be required to generate list of entities matching a search/filter. Otherwise massive performance suck. Reusing data: shouldn't have to re-query or re-sort the entire list when column is added. Things I've looked at: Glazed Lists library Pros: Flexible about column handling Easy to implement sort/filter of entities Flexible about column display format & editing Cons: One object per entity (if objects are complex memory overhead becomes a serious memory problem!) Object responsible for all functionality... but objects should be simple for memory reasons How do I support user-selectable columns without a HashMap for EVERY entity object? Extending AbstractTableModel to map data from a JDBC ResultSet to rowscolumns Pros: Paging of results avoids memory problem Searching/Filtering is directly in SQL Memory-friendly doesn't have to make an object per-row Cons: Implementing custom columns & sorting is a pain (table header renderer managing sort columns and order etc)! Probably have to write custom JTableColumnModel too and this gets messy! Has to manipulate SQL a lot so if DB schema changes have to rewrite multiple pieces of code! Hard to maintain entity ID info ORM Pros: Designed to map DB rows to objects Provides object management Cons: WORST POSSIBLE solution for entity-attribute-value model Have to learn & write ORM code in addition to DBMS & Java code! Entities can have any number of attributes ORM is only good with static limited object attributes Lose flexibility/speed of custom SQL Is there a better option that I missed or some clever way to make Glazed Lists or custom Table Model easier? I've totally discarded ORM as an option already because of how badly matched it is to EAV storage. boy do I feel your pain. clearly you understand the problem of trying to link a JTable as a ""viewer""/""editor"" of an underlying database that should not exist all at once in memory. The worst part: I think all entity identifier keys (longs or ints) *could* fit in memory so it should be simpler. Except I'm pretty sure that the DefaultRowSorter implementation bundles them in like 1 billion layers of wrappers so what should take a couple MB of RAM will actually be >1 GB. It's like those babies you see where the mom has put so many layers of protection wrapped around that they can hardly breathe. I think your best option is to go with 'Extending AbstractTableModel with form map data from a JDBC ResultSet' because Java 6 JTable has built in sorting support so you don't really need to implement that. If you design your model carefully you could survive some schema changes. Code clearly to allow yourself to make changes easier if you need. You'll have to write back changes anyway. Use a 'Save' button and batch update might even help your performance. You can override TableCellEditor to supply combobox instead of the default text editor. Don't try to do all edit in one table. Have separated means for entry creation etc. You can add/remove columns to JTable at runtime. Just fireTableModelChanged() and the new column becomes visible Edit: One crazy thing I would do to create a custom component and do all rendering myself and perform the edit operations with well placed JTextField and JComboBox. Edit2: Based on your comment. Save the position of the selected item before you do the fire...() call. Btw I don't think the call resets the sorting or the selection - had no problem with that. If you add a column you could just fetch the key field and the values for the new column only. Display them in the column. Then do a hidden complete reload in the background and swap the model to that when it is finished. This is practically working from multiple ResultSets at the same time in one table. Removing is easy as you don't show the values for that column. Edit3: DefaultRowSorter isn't that deep. It maintains a reindexing table for your records. So when JTable asks for the 10th row the rowsorter checks its 10th entry of the index table and retrieves that indexth element from your actual model. Also if you have lots of identical strings in your model use a simple Map of String to String cache when you query the data from the database. This way the tons of redundant String objects can be GC-d right away. Edit4: I would query the new field into a Map of key to value and have my primary model contain a list of map of key to value. Then I would use a getValue() implementation which returns the value from either the primary data source of from these additional maps on demand. I would lookup the row's key from the primary model and use that to retrieve the actual value from the additional maps. (Btw. Reputation gained from accepted answers are not subject to the daily limit.) Heh fixed the typo there. Not a bad answer but the tricky part is how I then do column addition/removal. fireTableModelChanged() will totally reset selected items sorting and require the whole dataset to be re-fetched (IIRC). The issue I have is... how do I then do column show/hide? Make a new query and re-do everything from scratch in the model? Call ""fireColumnedAdded"" on the TableColumnModel? I really like the edit 2 answer but would like a little more detail to see if I follow. Could I get a little pseudo-code and additional detail (like how do I manage the mapping of rowcolumn to the additional ResultSet -- hidden hashmap between model column index and (ResultSetresultset column index)? If you post response as a new answer it may make things simpler and I can give you another up vote for being responsive. I would use some hash maps behind the scenes as you inferred. I can give you only some conceptional hints and approaches in my answers as your case is fairly complex to create reasonable code snipplets. Unfortunately I'm already at the daily 200 reputation limit but thanks. Glad that DefaultRowSorter isn't *terrible* like I thought and a cache was already planned in 1st set of memory optimizations. Could you explain a little more how (in your idea) I should handle column index to resultset & resultset column mappings? Are we talking one ResultSet per column here with entityIDattributeValue(s) columns for each resultset or a some sort of hashmap from column index to resultset & resultset column? In that case I will wait until tomorrow to accept the answer (unless someone posts a better one which I seriously doubt) so you get the full credit."
457,A,"Looking for recommendations on open-source Java instrument visualization components I am putting together an Java application that needs to display some basic lab instrument components. For example I'd like to display: a strip chart oscilloscope-style trace and a panel meter (galvanometer needle). Rendering requirements are open (as long as the engine is free and generally available). Any suggestions? Take a look at JFreeChart. We've implemented a couple of strip chart applications with it. Offhand I'm not sure about an oscilloscope type trace you'd have to look into it. It does look like there is a meter-like capability. Cool. I had looked at JFreeChart before but didn't see anything anything like ""Strip Chart"" or ""Chart Recorder"" in the API. I see now that it is a ""Dynamic Chart"". I also see the meter-like charts. I'm thinking I might be able to hammer something into an oscilloscope trace with JFreeChart. Thx  I've never used this myself so I cannot say how good it is but I came across these tools some time ago. DART Visualization tools. They use an open source license. Maybe there is something in there to help you."
458,A,What's the easiest way to show a Windows Explorer-type file structure in Java Swing? I thought I'd ask in case someone else has run into this before. How would you go about showing the user's file directory structure in a Java applet something like Windows Explorer? Would I have to create a JTree and manipulate that or is there an easier way? I think JTree would be the easiest way. but if you just want it to view files before you load them then use a file chooser. your JTree link http://www.java2s.com/Code/Java/Swing-JFC/FileTree.htm no more alive. Could you post anything new?  The easiest way is to use a FileChooser. Your applet needs to be a signed applet so it could access the client file system here a small article regarding this
459,A,Delay between drawing of two icons in Java I have a piece of code in Java which draws 2 icons to the screen. I want to enforce a delay between them and am unsure of the best way. At the moment I have; cell.setIcon(image1); Thread.sleep(500); // Ignored try() for brevity cell2.setIcon(image2); But this seems to cause the delay before either are drawn. Why is this and how can I fix it? what is `cell`? cell is a JLabel Assuming you're using Swing you need to cause the sleep to be performed on a worker thread like so: new SwingWorker<VoidVoid>() { @Override protected Void doInBackground() throws Exception { Thread.sleep(500); return null; } @Override protected void done() { cell2.setIcon(image2); } }.execute();  Devon has the best answer for the how. As for the why the basic problem is that the setIcon function doesn't contain the code that repaints your component. The flow looks like this: 1) You click something on the GUI 2) An event is generated Swing calls all the listeners 3) Your code is triggered and run setIcon is called 4) Your code finishes running and control returns to Swing 5) Swing paints any new/changed components etc. All of this happens on one thread. You want your delay to occur after step 3 but you don't want to block the current thread because then step 5 won't execute until after the delay. Devon's solution uses a SwingWorker to put the delay on a different thread so it won't block step 5.  Maybe this thread can help you...  I would use a Swing Timer. When you display the first Icon you start the Timer. When the Timer fires you display the second Icon. Read the section from the Swing tutorial on How to Use Timers for more information.
460,A,"suggestions for declarative GUI programming in Java I wonder if there are any suggestions for declarative GUI programming in Java. (I abhor visual-based GUI creator/editor software but am getting a little tired of manually instantiating JPanels and Boxes and JLabels and JLists etc.) That's my overall question but I have two specific questions for approaches I'm thinking of taking: JavaFX: is there an example somewhere of a realistic GUI display (e.g. not circles and rectangles but listboxes and buttons and labels and the like) in JavaFX which can interface with a Java sourcefile that accesses and updates various elements? Plain Old Swing with something to parse XUL-ish XML: has anyone invented a declarative syntax (like XUL) for XML for use with Java Swing? I suppose it wouldn't be hard to do to create some code based on STaX which reads an XML file instantiates a hierarchy of Swing elements and makes the hierarchy accessible through some kind of object model. But I'd rather use something that's well-known and documented and tested than to try to invent such a thing myself. JGoodies Forms -- not exactly declarative but kinda close & I've had good luck with JGoodies Binding. But their syntax for Form Layout seems kinda cryptic. edit: lots of great answers here! (& I added #3 above) I'd be especially grateful for hearing any experiences any of you have had with using one of these frameworks for real-world applications. p.s. I did try a few google searches (""java gui declarative"") just didn't quite know what to look for. LOL - Not a single answer regarding JavaFX yeah I noticed. Doesn't exactly give me the warm-n-fuzzy feeling. Though I did try out some of their sample code and it was pretty neat. I did wonder about the lack of JavaFX comment myself. Anyway for all of the following and JavaFX (and dare we include the XAML XUL and wxWidgets...) -- All these things need a facility like Ant that lets you extend the tooling in the (widget) class. Some meta-widget information and 'tool support' A 2nd thing and surprised how I forgot it. Layout should be separated from 'design' and content. If you're willing to step slightly outside plain Java Groovy's ""builder"" concept works pretty well with GUIs. Of course you can interop between Groovy and Java fairly easily. See the Swing Builder page for more information.  As often it's always a good idea to perform a search when you're looking for something. This is the first link in google while looking for ""java xml gui"" good point. You have to know what to search for though. I googled ""java declarative gui"" dunno why I didn't think about using ""xml"" as a search term. @Jason S: +1 I think indicating google searches that didn't seem to work for you is a good idea for what information to add when asking a question.  something new...XWT will be included in eclipse e4  Although it is not declarative and is limited exclusively to layouts you might want to take a look at DesignGridLayout which allows to programmatically define Swing layouts in a very concise manner (it's open source). Main advantages: easy to learn (you can start using it for real forms after just one hour) concise code (1 line of code per row of components in a form) that also enable easy maintenance compile-time checking (which declarative UI can't have) respect of platform look & feel (baseline alignment gaps between components...) without any hard-coded length value  You might have a look at javabuilders; it uses YAML to build Swing UIs. A simple example from the manual [PDF]: JFrame: name: myFrame title: My Frame content: - JLabel: name: myLabel2 text: My First Label - JLabel: name: myLabel2 text: My Second Label Alternatively: JFrame: name: myFrame title: My Frame content: - JLabel: {name: myLabel2 text: My First Label} - JLabel: {name: myLabel2 text: My Second Label} Or even: JFrame(name=myFrametitle=My Frame): - JLabel(name=myLabel2 text=My First Label) - JLabel(name=myLabel2 text=My Second Label) I'll probably go with javabuilders it seems to score well under my some of my implicit criteria: decent documentation/tutorial full-featured (w/ bindings layout manager hooks etc).  As the author of CookSwing a tool that does what you need I've given this subject a long hard look before doing the actual implementation. I made a living writing Java Swing GUI applications. IMO if you are going to use any kind of imperative programming languages to describe Java Swing component you might as well just use Java. Groovy etc only adds complications without much simplification. Declarative languages are much better because even non-programmers can make sense out of it especially when you need to delegate the task of fine tuning of specific layouts to artists. XML is perfect for declarative languages (over other choices) because of simplicity readability and plenty of editors/transformation tools etc available. Here are the problems faced in declarative GUI programming not in any particular order. These issues have been addressed in CookSwing. Readability and simplicity. (JavaFX is not any simpler than XML. Closing tags of XML helps reading quite a bit and doesn't add extra typing much since XML editors usually do it for you) Extensibility. Very important because custom Swing components will come up for any non-trivial projects. GUI layouts. Also very important. Being able to handle BorderLayout GridBagLayout JGoodies FormsLayout etc are practically a must. Simplicity of copy/paste. In the course of the designing the layout it is necessary to try out different ones. So one need to be able to copy / paste and moving things around. XML is better because the hierarchy of components and layouts are easy to see. JavaFX is somewhat problematic due to multi-line attributes and indentation issues. Having a good editor is a must and there are plenty of good XML editors. Templates (i.e. being able to include another layout file) is very useful for consistent look. For example one might want to have a consistent look of dialogs button panels etc. Interactions with Java code. This is crucial. Some GUI components can only be created with Java code (for whatever the reason). It is thus necessary to be able load these objects. It is also necessarily being able to directly hook up listeners and other Java objects/components within the XML code. Using ids to hook them up later WILL not work well as it is very tedious. Internationalization (i18n). Being able to load text / string from a resource bundle rather than hard coded text. This feature can be crucial for some applications. Localization (l10n). The advantage of declarative programming (particularly with XML) is that you can just switch to a different GUI form for a specific locale and that's it. If you code with Java or any other imperative languages it is not so easy. Error check / tolerance. Initial designs often will contain errors here and there. Sometimes the error might be because the corresponding Java code hasn't been designed yet. Or an icon resource is missing. Dealing with errors with imperative coding is extremely tedious. Thus it is desirable to be able to locate the errors yet at the same time being error tolerant so the preview of the GUI layout can be made as early as possible. GUI component replacement. That is replace textfield which used to have JTextField with some fancier version of components. Replace the meaning of dialog with some fancy UI dialogs (such as JIDE's) instead of JDialog. This feature can save significant amount of efforts. XML itself is also useful due to XSLT and other transformation tools. Beyond Swing. Because sooner or later you will find many component configurations use object types such as arrays icons images vectors etc. ""I have a tool that can do this and here are the things I had to think about"" is much more useful than ""I have a tool that can do this you should use it because it's great."" +1 +1 for experiences. is it hosted exclusively on SourceForge? there's no Maven repository? interesting....  If conciseness is important you might want to consider the double brace idiom: new JFrame(""My Frame"") {{ setName(""myFrame""); add(new JLabel(""My First Label"") {{ setName(""myLabel2""); }}; add(new JLabel(""My Second Label"") {{ setName(""myLabel2""); }}; }} You then don't lose any of the power of a well known general purpose programming language (you know you are going to need it and JellyTags suck). All you need is the one little extra idiom. It's not used very much because actually people pissing around with XML weren't solving real pain points. In general you can use builder layers to abstract repeated code. GUI code doesn't have to be badly written it's just that almost all of it is (including in text books). It looks nice but do you have any info about the possible performance impact of defining a new class everywhere you use this? @Bart van Heukelom It adds about 2K (0.000002 GB) per class file. That will affect start up time to some extent but isn't significant to subsequent run time. @Tom [at]formatter:off [at]formatter:on Yes it requires more setup but hey--for people reading this its a good bypass for times when that formatting doesn't help anyone. huh - that's actually pretty slick. Nice. There's a fine line between slick and nasty. :) Eclipse reformats this into something which requires a LOT of lines :( @Thorbjørn Don't let it reformat your code then. @Tom we have Format Source as a default save action in Eclipse so source code is normalized at all times. This is to give best possible conditions to maintainers needing to look back in the repository history.  SDL/Swing does exactly what you need. Its a tiny (283k) unobtrusive easy to learn declarative Swing framework. menus { ""File"" { ""Open"" do=""open"" // calls ""open()"" in the controller ""---"" ""Exit"" do=""exit"" } } SDL/Swing is open source but enjoys commercial support. We (Ikayzo.com) developed it over a period of years and have deployed it in production systems for many customers ranging from life science companies to banks.  WindowBuilder it a very nice plugin which included GWTXWTSWTSwing etc  I recently come across SDL / Swing.  I've tried many solutions such as SWIXML Javabuilders MigLayout Cookswing. I finally found the javaFX and javaFX-Scenebuilder the best an fastest solution XML-based GUI tool. you'd like the way scenebuilder creates GUI (with drag & drop items!). plus it uses CSS (Cascading Style Sheets) for the GUI theme. Jsut trust the Oracle it's the best GUI tool for java applications. take a tour for creating javaFX apps with scenebuilder here: http://docs.oracle.com/javafx/scenebuilder/1/get_started/prepare-for-tutorial.htm#CEGJBHHA  I can find the following examples of what you're asking for: SWIXML SwiXAT The Swing-XML Authoring Tool (based on SWIXML) CookSwing: XML to Swing GUI JFCML - JFC/Swing XML Markup Language possibly JEasy I'm not sure great! Now I just need to figure out which of these is the most ""mainstream""...  give Swiby a try: http://swiby.codehaus.org/ ""Swiby is a blend of Swing and Ruby for truly rich distributed applications."" In other words Swiby is a domain specific language mixing swing and ruby.  I strongly recommend MiG Layout - it takes a few days to get used to the syntax but once you've got it it works wonders. I used JGoodies Forms for quite awhile and Karsten's builder concept works well but it is a bit cryptic... MiG is easier to pick up and results in wonderfully concise code. A colleague cannot stop praising MIG Layout. thanks -- mmyers's recommendation for Javabuilders also led me to MiG Layout. I just dropped using GUI builders (VisualBuilder) because of MigLayout :) looks very neat and someone's even written a clojure module to wrap it. thanks for the pointer."
461,A,"Can I batch some Swing component updates so that repaints are all done at once? I have a bunch of buttons in my JToolBar and I set some of them to be disabled or enabled depending on the state of my application. I find when I am updating a number of buttons at once that they are not all repainted at the same time. I want to ensure that when I set a number of buttons to be disabled/enabled that they all change state at the same time. Below is a small test that demonstrates the problem. (It needs a file a.png in the current directory to use as a button icon.) When you run it a toolbar with 10 buttons is shown. Pressing Enter at the terminal will toggle the disabled state of all of the buttons. On my machine at least each time I do this the buttons are repainted in a seemingly random order and not all at once. It seems like double buffering might solve the problem although the first thing I tried (setting double buffering on the JToolBar) didn't seem to affect anything. Thanks Cameron import java.awt.*; import javax.swing.*; import java.io.*; import java.util.*; public class Test { public static void main(String[] args) throws IOException { final JButton[] bs = new JButton[10]; EventQueue.invokeLater(new Runnable() { public void run() { JFrame f = new JFrame(""test""); JToolBar t = new JToolBar(); f.getContentPane().add(t); for (int i = 0; i < bs.length; i++) { bs[i] = new JButton(new ImageIcon(""a.png"")); t.add(bs[i]); } f.pack(); f.setVisible(true); } }); BufferedReader r = new BufferedReader(new InputStreamReader(System.in)); for (;;) { r.readLine(); EventQueue.invokeLater(new Runnable() { public void run() { for (JButton b : bs) { b.setEnabled(!b.isEnabled()); } } }); } } } @camickr I'm on JDK6 on Windows 7. I kicked off the changes with EventQueue.invokeLater() because in my application what causes the toolbar buttons to need to update state happens in another thread so I use EventQueue.invokeLater() there. I tried doing everything from the EDT (i.e. doing the setEnabled() calls from an ActionListener on one of the buttons) but I still had the same strange repainting. @iny Right it just looks bad. I did actually think that because all the state changes happen within one EventQueue Runnable that all the painting would happen at once after it ended but I guess not. Your suggestion of calling repaint() on the JToolBar did coalesce all the painting for the buttons thanks! (Once my unregistered account (which I can't seem to get back to) and my recently registered account are merged I'll accept your answer.)  Works fine for me using JDK6 on XP. I don't see any problem with your code. I've enabled/disable more components than that at one time without a problem. Is the problem because you are accepting input from the terminal? Try adding a separate button to your frame such that clicking on it will cause the state of the buttons to change.  As long as the enable state changes happen in one event thread run they happen so that nothing can't go there between in invalid state. So I guess this is just a painting problem? It just looks bad? One possible way to change the behavior is to add a repaint call for the container (the toolbar for example) so that bigger area is repainted at once instead of repainting each button separately."
462,A,Removing a JComponent from a CardLayout How do I remove a JPanel (or any other JComponent) from a CardLayout? I do not have direct access to the Component I want to remove but I have the index (the one used to show the Panel when we call cardLayout.show(parentComponent index);). When you say index you mean the name (String) of the component when it was inserted right? I don't know any elegant way to do this but you can try to get all the components in this container (parentComponent) and try to find the one that has the same name as index. For example: Component[] components = parentComponent.getComponents(); for(int i = 0; i < components.length; i++) { if(components.getName().equals(index)) { cardLayout.removeLayoutComponent(components[i]); } } Shouldn't that be `if (components[i].getName()...`? Looks like the `[i]` is missing from the original code... Yes by index I mean the string used when adding the component to the cardlayout. Thanks for your solution I tried it out and it worked.
463,A,"java swing close window without exiting app I have a little frame where I ask user & password. This frame will be opened clicking over a button in a main window. Then I have two buttons: ok and cancel. When I click on ""cancel"" button I need to close this frame without exiting the app. How can I do that? You can do it in many ways but these two ways are most usable one 1. write this.setVisible(false) in inside implemented ActionListener Or 2. write this.dispose() inside implemented ActionListener. Hope this will help you. This is exactly what the accepted answer says. There's no reason to add an answer just to repeat what's already accepted.  Make sure you do not: frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); this is not my problem buddy :)  Make a function in outer class where you are implementing the JFrame (you need to close on pressing cancel button). Write this.setVisible(false); in the implementation of that function. Finally call this function in the ActionListener implementation when you want to close it.  setVisible method does not release memory resources and should be used only when the form is to be used again. The dispose method Releases all of the native screen resources used by this Window its subcomponents and all of its owned children. That is the resources for these Components will be destroyed any memory they consume will be returned to the OS and they will be marked as undisplayable.  Use this.dispose(); in the action listener method when the username/password succeeds. eg: public void actionPerformed(ActionEvent ae) { if(ae.getSource()==""button you press to confirm username/password""){ if(userNameTf.getText().equals(username)&&isPassword(passwordTf.getPassword())){ new ""window to be opened upon success"" this.dispose(); // calls dispose on this object ie. // the login window } else{ userNameTf.setText(""""); passwordTf.setText(""""); JOptionPane.showMessageDialog(this ""Username and/or password is incorrect!"" ""Attention!"" JOptionPane.WARNING_MESSAGE); } } } If you are using inner classes to handle the events just replace 'this.dispose()' with Super_Class_Name.this.dispose();  Maybe a cleaner way is just change the setDefaultCloseOperation from EXIT_ON_CLOSE to DISPOSE_ON_CLOSE : setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  You can call setVisible(false) on the frame. You might also want to call setDefaultCloseOperation on the frame passing in HIDE_ON_CLOSE (info here: http://java.sun.com/javase/6/docs/api/javax/swing/JFrame.html#setDefaultCloseOperation%28int%29). That will prevent the app from going away if they user hits the ""X"" on the JFrame to close it.  You can use either Frame.hide() or Frame.dispose(). I would also recommend to look into JDialog or JOptionPane Correction: hide() is deprecated. SetVisible(false) should be used instead ok and what if my click handler is into a different class extarnal to the frame? you have to pass a reference to the frame to the click handler (in the constructor)"
464,A,"How to avoid that pressing the ALT key takes away the focus from my GUI I'm developing a java app with swing in Windows. The problem is: after pressing (and releasing) the ALT key the next key press has no effect (there won't be a keyPressed event fired). Only the releasing the next key will be recognized. Pressing and releasing CTRL or SHIFT after ALT has no effect at all. The you first have to press another key or click into the component to receive key events from CTRL or SHIFT again. Probably Windows takes the focus away from my GUI component to the title/menu of the frame. I need ALT+MouseWheel to move a graphic in my app if I afterwards wants to zoom the graphic with CTRL+MouseWheel this won't be working. So howe to stop ALT from taking away the focus (but still be able to access a menuItem with e.g. ALT+F)? I already tried Component.requestFocus() - but actually my component doesn't lose the focus really. A simple example which shows the behaviour: import java.awt.event.KeyEvent; import java.awt.event.KeyListener; import javax.swing.JFrame; import javax.swing.JTextField; class MyKeyListener implements KeyListener { public void keyTyped(KeyEvent arg0) {} public void keyPressed(KeyEvent arg0) { System.out.println(""Key perssed: "" + arg0.getKeyCode()); } public void keyReleased(KeyEvent arg0) { System.out.println(""Key released: "" + arg0.getKeyCode()); } } public class KeyListenerDemo { public static void main(String[] a) { JFrame frame = new JFrame(""Keytest""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setFocusTraversalKeysEnabled(true); JTextField textField = new JTextField(); textField.addKeyListener(new MyKeyListener()); frame.add(textField); frame.setSize(300 200); frame.setVisible(true); } } kind of solved: Scott you were right. in my case consume() actually did work. I can use ALT together with the mouse wheel for my functionality but still access the menu with e.g. ALT+F Could you consume() the KeyEvents for the ALT key? I suppose the problem with this would be that it would break the normal functionality of the ALT key in Windows. no I want to keep Windows functionally - to access the menubar. So actually the question is not how to avoid the focus switch - but how to regain the focus. @räph why don't you add an actual answer which shows how you solved the problem for the benefit of others it might get lost down here in the comments... In my case the following worked: KeyEvent.consume() Consumes this event so that it will not be processed in the default manner by the source which originated it. This stops Windows from stealing my focus but I'm still able to access my menuitems with the keyboard mnemonics with ALT. Thanks to Scott W for his comment!!  I don't think it is possible at least not in swing. Every single swing application that I ever used had the same problem. It is one of the main reasons I gave up using Netbeans IDE although the IDE is generaly very nice. SWT applications don't have that problem. Not that I know of. I was already afraid to get that answer ;( but isn't there some workaround to gain the key-focus again?"
465,A,"Make header text bold when its column is selected in JTable is possible to turn header text bold when I select a cell of its column? How to do it? Thanks Leandro Set custom renderer into table header. If current column is selected column set font to bold. JTable table = new JTable() table.getTableHeader().setDefaultRenderer(new MyRenderer()); class MyRenderer implements TableCellRenderer { //todo implement } I don't know why but it is not respected by my look and feel. I can change the foreground but it's impossible to change the text decorate. It is a CELL renderer. There is no real TableHeader renderer. See my comment below. Table header uses sun.swing.table.DefaultTableCellHeaderRenderer to render each column in header row. Unfortunately sun.** is private SUN package. You will need to make more painting as usual to meet LaF.  It is partially possible. What you have to do is write your model is such way that on table's cell selection your model executes fireTableStructureChanges method( assuming you use AbstractTableModel as a base). This will repaint the whole table including column header. All you have to do is keep the state of which column is selected. In the beginning I said ""partially"" possible. That is because calling fireTableStructureChanges will revalidate the whole table and you will lose your current column model state - column widths and sequence. To make your text bold you can use HTML - something like <html><b>your text</b></html> but it has to change dynamically based on your model's internal state UPDATE: Also column table header text can be set directly but model change or tableStructureChanged event will make the table to reread from the model. This isn't correct solution. You are mixing Model and UI together. Not necessarily. Since column names are returned from the model - they are part of the model. Model just needs to react on selection change somehow. BTW your solution brakes look and feel because you're using cell renderer to renderer header. And as far as I know it is now possible to truly replicate default header renderer"
466,A,"JSeparator with Title Do somebody knows a (free) horizontal JSeparator with a title label? Something like that: --- Title XYZ -------------------- Thank you in advance! Best Regards Thomas Hmm… without any testing and completely from the top of my head: JPanel panel = new JPanel(); panel.setBorder(new TitledBorder(""Title"")); menu.add(panel); Most Swing containers eat anything so that might even work. Another approach would be to create a custom component (maybe with a horizontal BoxLayout) and add a JSeparator a JLabel and another JSeparator to it then add it to the menu.  I found a solution: SwingX JXTitledSeparator. We already use SwingX in our project. I didn't know that SwingX provides a titled separator. @Bombe Thank you for your help."
467,A,"In swing GUI how to show a JPanel as maximized when the user clicks a button? I want to maximize a JPanel inside a JFrame when the user clicks a button.What is the best way to achieve this.The view and the data model should be in sync in both the panelsthat is the panel which in the JFrame and the maximized one.Please suggest me some solution. my requirement is: i have a JFrame with 4 JPanels named as JPanelAJPanelBJPanelCJPanelD Here the JPanelD contains a JList and a button below it say ""MAXIMIZE PANEL"" button . JList has a JTree with in it . Sometimes the JList may have huge set of data and it is not visible to the user clearly. So he need to maximize this JPanelD alone to see the contents of the JList clearly.For that he clicks ""MAXIMIZE PANEL"" button.After the click action the JPanelD in the JFrame remains therealso a new JPanel with the same JList data(ie.the replica of the JPanelD say JPanelDMaximized)should be popped up.This is what i want to do .. This is an easy answer. But you took credit for a solution I gave you 5 hours before you apparently solved it by yourself. Not only that you cross posted that particular question in 2 other forums. You have yet to respond to those other forums (even though you promised to) to state an answer has been found. Your credibility is nill and you are on your own. This is a very unclear question. You want the JPanel in the JFrame but not in the JFrame? This depends on the layout manager you use. If you add a JPanel to a JFrame using the default layout manager and the JFrame only contains the JPanel and nothing else you'll achieve what you describe. Here's an example. The JPanel is green; notice how it resizes as you resize the JFrame. import javax.swing.*; import java.awt.*; public class ScratchSpace { public static void main(String[] args) { JFrame frame = new JFrame(""Stretchy panel demo""); final JPanel panel = new JPanel(); panel.setOpaque(true); panel.setBackground(Color.GREEN); panel.setPreferredSize(new Dimension(600 400)); final JComponent contentPane = (JComponent) frame.getContentPane(); contentPane.setBorder(BorderFactory.createEmptyBorder(10 10 10 10)); frame.getContentPane().add(panel); frame.pack(); frame.setLocationRelativeTo(null); frame.setVisible(true); } } Hi Steve McLeod ..i edited my requirement clearly in my question now ..please see there .. Hi Steve McLeod  this is not my requirement .. i need to have the JPanel in the frame and also its should be displayed infront of the JFrame when i press ""maximize this panel"" button ..  Of course you could do this yourself but you should really look at JInternalFrame and consider using that for your panel. It will save a bunch of headache. Edit: Sun's tutorial should get you what you need. hi Yishai can you give me code snippet to do this?  Follow-up to your clarification of the problem: Take my code and remove: maximizedFrame.setUndecorated( true ); and size the frame bigger before you make it visible. That should satisfy the maximize-like behaviour you need. Your other problem is that you cannot add JPanelD to the two JFrames. The pop-up frame must have its own unique JPanel object (let's call it JPanelE). So you need to: Initialize and lay out JPanelE like you do JPanelD. That means giving JPanelE its own JList (and JTree and so on). Share the ListModel from JPanelD's JList with JPanelE's JList and so on. The feasibility and details of executing this successfully depends on the specifics of your implementation and is beyond the scope of your original problem. s Noel now i can think of that ..i need to invoke a JWindow with the shared List  Create a JWindow (or an undecorated JFrame) with a JPanel. Leave the JWindow invisible initially. (The wiring of this new JPanel to the same data model used by the original JPanel is left as an exercise.) When your maximize-panel button's ActionListener executes it must: 2.1. Update the (invisible) JWindow's location and size to match the (visible) JFrame's. 2.2. Make your JFrame invisible. 2.3. Make your JWindow visible. When your unmaximize-panel button's ActionListener executes it must: 3.1. Update the (invisible) JFrame's location and size to match the (visible) JWindow's. 3.2. Make your JWindow invisible. 3.3. Make your JFrame visible Example: package stackoverflow; import java.awt.BorderLayout; import java.awt.Color; import java.awt.Container; import java.awt.HeadlessException; import java.awt.event.ActionEvent; import javax.swing.AbstractAction; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JPanel; public class MaximizingPanelApp extends JFrame { private JPanel framePanel; private JPanel windowPanel; private JFrame maximizedFrame; public static void main(String[] args) { JFrame appFrame = new MaximizingPanelApp(); appFrame.setVisible( true ); } public MaximizingPanelApp() throws HeadlessException { super( ""Application"" ); setDefaultCloseOperation( JFrame.DISPOSE_ON_CLOSE ); initialize(); } private void initialize() { // JFrame { Container container = getContentPane(); container.setLayout( new BorderLayout() ); framePanel = new JPanel(); framePanel.setBackground( Color.ORANGE ); container.add( framePanel BorderLayout.CENTER ); JButton button = new JButton( new MaximizeAction() ); container.add( button BorderLayout.SOUTH ); setSize( 400 300 ); } // JWindow { maximizedFrame = new JFrame(); Container container = maximizedFrame.getContentPane(); container.setLayout( new BorderLayout() ); windowPanel = new JPanel(); windowPanel.setBackground( Color.ORANGE ); container.add( windowPanel BorderLayout.CENTER ); JButton button = new JButton( new UnMaximizeAction() ); container.add( button BorderLayout.SOUTH ); maximizedFrame.setSize( getSize() ); maximizedFrame.setUndecorated( true ); } } private class MaximizeAction extends AbstractAction { private MaximizeAction() { super( ""Maximize"" ); } public void actionPerformed(ActionEvent e) { maximizedFrame.setSize( getSize() ); maximizedFrame.setLocation( getLocation() ); setVisible( false ); maximizedFrame.setVisible( true ); } } private class UnMaximizeAction extends AbstractAction { private UnMaximizeAction() { super( ""Un-Maximize"" ); } public void actionPerformed(ActionEvent e) { setLocation( maximizedFrame.getLocation() ); setSize( maximizedFrame.getSize() ); maximizedFrame.setVisible( false ); maximizedFrame.dispose(); setVisible( true ); } } } If by ""maximize"" you meant stretch the panel to the bounds of the desktop/display-device not of its JFrame then prior to displaying the JWindow resize it instead to the display device's dimensions. Hi Noel  thanks a lot for your very neat and clear coding .. Here i want some changes .. edited the question itself ..please see there .."
468,A,Repeated values when inserting rows into JTable I have problems on inserting rows into a JTable and I don't know what the problem is. I do exactly like this: ((DefaultTableModel)myJTable.getModel()).insertRow(0webSiteDownloader.getWebSites().toArray()); The webSiteDownloader is one object that have an ArrayList. I can get that array calling the method getWebSites. The problem is that when I insert one row adding the second one the JTable only shows the first one but repeated twice. Was I clear enough? Thks :D I'll take a shot into the dark and guess that you want to accomplish something like this: DefaultTableModel dtm = (DefaultTableModel)myJTable.getModel(); for (MyRowObject row : webSiteDownloader.getWebSites()) { dtm.insertRow(0 row.toArray()); } Is there a special reason that you're using insertRow instead of addRow? Also I'd really like to recommend that you roll your own special purpose TableModel by extending AbstractTableModel. Basic untested example: public class MyTableModel extends AbstractTableModel { protected List<MyObject> rows; public MyTableModel() { rows = new ArrayList<MyObject>(); } public void add(MyObject obj) { rows.add(obj); } @Override public int getRowCount() { return rows.size(); } @Override public int getColumnCount() { // This value will be constant but generally you'd also // want to override getColumnName to return column names // from an array and in that case you can return the length // of the array with column names instead return 2; } @Override public Object getValueAt(int row int column) { MyObject obj = rows.get(row); // Change this to match your columns switch(column) { case 0: return obj.getId(); case 1: return obj.getName(); } return null; } } Icky code. Non-standard formatting. Protected. Missing final. Initialisation in a constructor when it could be done on the declaration line. Some return some unhandled in a switch. Returning a random (`null`) value instead of throwing an exception. Missing @Override. Thanks for the feedback. I'll keep that in mind. :) Your TableModel can't work if you don't call the inherited fireXxxxEvent() methods from AbstractTableModel! Any call to add() won't refresh the JTable! Also true. I'm sorry for all the silly misstakes here. It was only meant as a basic example to illustrate the principle and as a basic help to get started so I wasn't a thorough as I should have been.
469,A,"What's the definitive Java Swing starter guide and reference? Obviously the Java API reference but what else is there that you all use? I've been doing web development my entire career. Lately I've been messing around a lot with Groovy and I've decided to do a small application in Griffon just to experiment more with Groovy and also break some ground in desktop development. The only thing is I'm totally green when it comes to desktop apps. So world where's a good place to start? When it comes to developing java desktop applications I would highly recommend using the IDE environment Netbeans. Especially when it comes to the development of Swing based applications.  I recommend you to play around with netbeans. It will allow you to build complete GUIs using only your mouse. Once you get familiar with Swing components start using the Java API. Thats how I started.  The Swing Tutorial is very good. Apart from that the Swing API is obviously the reference however it's also a treasure trove of fairly good source code! Add the API source to your IDE and you can jump directly to the implementation to all the Swing classes. This is a great way to explore the functionality see how various Swing components work and learn a good Swing ""style"". Furthermore it's great to be able to step through the API classes if things don't seem to work and you have no idea why! Adding the API source to the IDE has the additional benefit that you get all the JavaDocs along with it although all modern IDEs can also pull them from the net -- you do not want to program desktop Java without the documentation available from within the IDE! NetBeans and other IDEs do make the creation of IDEs very easy but be aware that there is a lot more to Swing than just containers and layout managers. In fact containers and layout managers are among the easier things and I'd recommend learning to use them by hand too. There is nothing at all wrong with using a GUI builder but in some cases it's overkill and then it's nicer to just quickly whip up a GUI from source. In other cases you need to be able to create a GUI dynamically and then GUI builders are no use at all! For creating very complex layouts from source I recommend FormLayout which has its own set of quirks but which does scale (in terms of programming effort) to very big frames and layouts. If you've only done Groovy so far you'll be surprised how well documented Swing and the rest of the Java API is and how well everything is integrated. It might also take some getting used to a different style of programming using the debugger more often and println-debugging less etc. There might also be some ""boiler-plate"" code that will be very annoying. ;) Enjoy. I've actually been doing a lot of Java development but all with a web front end (mostly Struts) so I'm very familiar with debugging and the usefulness of IDEs. I guess I'm looking for more of a refcard type resource that I can use to help until I become more familiar with the components and widets  The Sun Java tutorials are pretty good. I cannot vouch specifically for the Swing one as it has been ages since I've done any Swing development and I have not read it myself. Creating a GUI with JFC/Swing  The O'Reilly Swing Book is a pretty good reference it has a good overview of general Swing concepts and covers each of the major classes. I used it recently when I had to refresh my memory on Swing."
470,A,Updating cell renderer after a DefaultCellEditor derived instance does its job I use a JTable which has its own cell renderer and cell editor. Say this table contains 2 columns and x rows: The first column contains a boolean value its own cell rendering and cell editor (a radiobutton) The second column contains a string value its own cell renderer: it makes it bold when the first column of the current row is set to true (radiobutton checked) All the values are correctly updated by the editor but the 2nd row does not become bold when the radio button is set to true... I have to check a radio button from a different row to see the changes Where can I fire thoses changes ? Cheers and thanks for your help RadiobuttonTableCellEditor.java public class RadiobuttonTableCellEditor extends DefaultCellEditor implements ItemListener { JRadioButton rb = new JRadioButton(); public RadiobuttonTableCellEditor(JCheckBox pCheckBox) { super(pCheckBox); } public Component getTableCellEditorComponent(JTable table Object value boolean isSelected int row int column) { if (value == null) return null; rb.addItemListener(this); rb.setSelected((Boolean)value); return rb; } public void itemStateChanged(ItemEvent e) { super.fireEditingStopped(); } public Object getCellEditorValue() { rb.removeItemListener(this); return rb.isSelected(); } } In your table model whenever your value changes you have to fire appropriate event. If your model is inherited from AbstractTableModel you can use several fireXXX methods. My guess is you should call them from setValueAt method. If you know exact column and row - you can call fireTableCellUpdated otherwise you can you probably have to use fireTableChanged since you have to update different column. And of course you renderer should properly render new value. Thanks for your help I added a member declaration of the JTable that I reference when I call getTableCellEditorComponent. Then well getCellEditorValue is called I state: if (table != null) { ((AbstractTableModel) table.getModel()).fireTableDataChanged(); } Even though it probably works your approach is not correct. you should call fireXXX methods IN the table model in response to changing DATA. In no case you should do it in the renderer or editor. The idea is simple. your editor will save new value into the model using model.setValueAt method. Then model should let all interested parties know that data changed. Your renderers and editors will react to change automatically.  It doesn't seem to make any sense to extend DeafultCellEditor there. Implementing a listener interface like that is also not a great idea. Renderers work best as a thin layer. If another cell should change then that needs to be reflected in the table model which should fire a relevant update event. So would you please tell me how to properly code such a thing ?  I guess it could help people with a similar problem make a true radiobutton unique in a row you'll have to extend the DefaultTableModel to modify its behaviour especially the setValueAt method Cheers /** * When <code>column</code> is the column that contains the Boolean (in fact the radio button): * If aValue == false and that it had a previous value set to true we don't do anything * If aValue == true and that it had a previous value set to false we set all the other booleans to false and this one to true */ @Override public void setValueAt(Object aValue int row int column) { if (column == colonneBoutonradio) { if (((Boolean)aValue && !(Boolean)super.getValueAt(row column))) for (int i = 0; i < this.getRowCount(); i++) // i==row permet de vérifier si la ligne courante est celle à modifier (et donc celle à mettre à true) super.setValueAt(i==row i colonneBoutonradio); } else super.setValueAt(aValue row column); }
471,A,Java Swing - JList custom cell rendering - capturing actions Any time I make a custom cell renderer for a JList any elements I add to it don't ever respond to actions. For instance If I have the cell renderer return a JPanel with elements on it one of which has an ActionListener it doesn't respond at all. Why is this? Very good question. I thought it might have something to do with ItemListeners but now I don't think so... I tried finding sample code but wasn't successful. Hi I facing the same problem are you able to solve the problem? The item you return as a list cell renderer is intended for exactly that: rendering. Register listeners with the JList (generally you'll want a ListSelectionListener).  The renderer may look like a factory for returning components for the cells but in fact it follows the flyweight rendering approach and uses the same component for rendering all the cells (each call to getListCellRendererComponent() is supposed to reconfigure the same component instance for a specific cell and return it so that cell can be rendered). That way you can have JList (as well as JTable and JTree) display massive amount of cells without having to instanciate components for each cell. As a side effect the render component cannot respond to events as it is only used during the render loop but doesn't appear in the component tree. Just as Neil Coffey said you can add your listeners to the JList (JTable JTree) instead and use the helper methods (locationToIndex(...) getCellBounds(...)) to dispatch which cell was affected and thus deal with cell specific logic. Think of the rendered component as a rubber stamp. +1 for a decent explanation
472,A,"How to disable the default painting behaviour of wheel scroll event on JScrollPane I recently purchased the book Filthy Rich Clients and i found it really useful and fun. Building on one example from the book i tried implementing a custom ScrollPane that displays a ""shadow"" on the bottom of its view over the component to be displayed. I ended up with the code below. It works but not perfectly. Specifically when i scroll the pane by dragging the scroll bar everything works ok and the painting is really smooth. But when i scroll with the mouse scroll the shadow flickers and i have no idea why. Can anyone help me? EDIT: Same thing happens for any component in the scroll pane. Edited the code to display two frames to see the problem. EDIT 2 : I have isolated the issue to the way the scroll pane handles the mouse wheel event. When scrolling the scroll pane copies the contents of the view port slightly up or down depending on the orientation of the scroll and then draws the region that comes into view. My code makes the whole component ""dirty"" but that is after the component has shifted the contents. So momentarily you see the ""shadow"" gradient out of place until a repaint is issued. Any ideas on how to disable this functionality? import java.awt.AlphaComposite; import java.awt.Color; import java.awt.Container; import java.awt.GradientPaint; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.Rectangle; import java.awt.image.BufferedImage; import javax.swing.JComponent; import javax.swing.JFrame; import javax.swing.JScrollPane; import javax.swing.JTable; import javax.swing.JTextArea; import javax.swing.RepaintManager; public class Test { public static void main(String[] args) { JFrame f = new JFrame(""Table""); JFrame f1 = new JFrame(""Text Area""); Object[] names = new Object[] { ""Title"" ""Artist"" ""Album"" }; String[][] data = new String[][] { { ""Los Angeles"" ""Sugarcult"" ""Lights Out"" } { ""Do It Alone"" ""Sugarcult"" ""Lights Out"" } { ""Made a Mistake"" ""Sugarcult"" ""Lights Out"" } { ""Kiss You Better"" ""Maximo Park"" ""A Certain Trigger"" } { ""All Over the Shop"" ""Maximo Park"" ""A Certain Trigger"" } { ""Los Angeles"" ""Sugarcult"" ""Lights Out"" } { ""Do It Alone"" ""Sugarcult"" ""Lights Out"" } { ""Made a Mistake"" ""Sugarcult"" ""Lights Out"" } { ""Kiss You Better"" ""Maximo Park"" ""A Certain Trigger"" } { ""All Over the Shop"" ""Maximo Park"" ""A Certain Trigger"" } { ""Los Angeles"" ""Sugarcult"" ""Lights Out"" } { ""Do It Alone"" ""Sugarcult"" ""Lights Out"" } { ""Made a Mistake"" ""Sugarcult"" ""Lights Out"" } { ""Kiss You Better"" ""Maximo Park"" ""A Certain Trigger"" } { ""All Over the Shop"" ""Maximo Park"" ""A Certain Trigger"" } { ""Los Angeles"" ""Sugarcult"" ""Lights Out"" } { ""Do It Alone"" ""Sugarcult"" ""Lights Out"" } { ""Made a Mistake"" ""Sugarcult"" ""Lights Out"" } { ""Kiss You Better"" ""Maximo Park"" ""A Certain Trigger"" } { ""All Over the Shop"" ""Maximo Park"" ""A Certain Trigger"" } { ""Los Angeles"" ""Sugarcult"" ""Lights Out"" } { ""Do It Alone"" ""Sugarcult"" ""Lights Out"" } { ""Made a Mistake"" ""Sugarcult"" ""Lights Out"" } { ""Kiss You Better"" ""Maximo Park"" ""A Certain Trigger"" } { ""All Over the Shop"" ""Maximo Park"" ""A Certain Trigger"" } { ""Going Missing"" ""Maximo Park"" ""A Certain Trigger"" } }; JTable table = new JTable(data names); f.getContentPane().add(new ShadowScrollPane(table)); f1.getContentPane().add(new ShadowScrollPane(new JTextArea(20 50))); RepaintManager.setCurrentManager(new RepaintManager(){ @Override public void addDirtyRegion(JComponent c int x int y int w int h) { Container con = c.getParent(); while (con instanceof JComponent) { if (!con.isVisible()) { return; } if (con instanceof ShadowScrollPane ) { c = (JComponent)con; x = 0; y = 0; w = con.getWidth(); h = con.getHeight(); } con = con.getParent(); } super.addDirtyRegion(c x y w h); } }); f.pack(); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.setVisible(true); f1.pack(); f1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f1.setVisible(true); } } @SuppressWarnings(""serial"") class ShadowScrollPane extends JScrollPane { private final int h = 50; private BufferedImage img = null; private BufferedImage shadow = new BufferedImage(1 h BufferedImage.TYPE_INT_ARGB); public ShadowScrollPane(JComponent com) { super(com); Graphics2D g2 = shadow.createGraphics(); g2.setPaint(new Color(50 50 50)); g2.fillRect(0 0 1 h); g2.setComposite(AlphaComposite.DstIn); g2.setPaint(new GradientPaint(0 0 new Color(0 0 0 0f) 0 h new Color(1 1 1 0.6f))); g2.fillRect(0 0 1 h); g2.dispose(); } @Override public void paint(Graphics g) { if (img == null || img.getWidth()!=getWidth() || img.getHeight() != getHeight()) { img = new BufferedImage(getWidth() getHeight() BufferedImage.TYPE_INT_ARGB); } Graphics2D g2 = img.createGraphics(); super.paint(g2); Rectangle bounds = getViewport().getVisibleRect(); g2.scale(bounds.getWidth() -1); int y = (getColumnHeader()==null)?0:getColumnHeader().getHeight(); g2.drawImage(shadow bounds.x -bounds.y - y-h null); g2.scale(1-1); g2.drawImage(shadow bounds.x bounds.y + bounds.height-h+y null); g2.dispose(); g.drawImage(img 0 0 null); } } please see my post http://stackoverflow.com/questions/8197261/jtable-how-to-change-background-color thanks for great question +1 Have you tried calling setWheelScrollingEnabled(false) on the ScrollPane object? From the javadoc: Enables/disables scrolling in response to movement of the mouse wheel. Wheel scrolling is enabled by default. Update following the comment by Savvas below. Perhaps the ""setScrollMode(int)"" method on the viewport can help you. This method will determine how swing scrolls the viewport. You can get the viewport directly from the ScrollPane with the getViewPort() method. You have the following options: BLIT_SCROLL_MODE BACKINGSTORE_SCROLL_MODE SIMPLE_SCROLL_MODE According to the javadoc BLIT_SCROLL_MODE will use Graphics.copyArea so perhaps try one of the others. i want to keep the scrolling behavior. What i don't want is to keep the way the scroll pane draws it self when scrolling. It is not using the repaint method apparently but uses the Graphics.copyArea(x y width height dx dy) method. After that the repaint is called to paint the newly introduced area and because i have marked the entire component as dirty my paint method kicks in. But after the copyArea so there is flashing Thanx. That worked like a charm. Both JViewport.BACKINGSTORE_SCROLL_MODE and JViewport.SIMPLE_SCROLL_MODE work like i want."
473,A,"Scala and Swing GUI applications From reading parts of the Programming in Scala book I realize that Scala can work with the Java Swing components to create GUI applications. My question is if there are any projects or released applications (that are more than just simple examples) that use Scala and Swing? Is this because you wish to see some actual Scala Swing code or are you just interested as to whether Scala Swing is ""production-ready""? If it is the latter Scala Swing is pretty good: I've started using it for all GUI code. Compare: JButton b = new JButton(); b.setText(""OK""); b.setFont(f); b.setPreferredSize(new Dimension(20 20)); b.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { //reacction here } }); with: val b = new Button { text = ""OK"" font = f preferredSize = (20 20) } listenTo(b) reactions += { case ButtonClicked(`b`) => //reaction here } As Scala Swing is really just a lightweight layer on top of Java Swing you can integrate any Java Swing component easily and be sure that it all works OK. That said the documentation as of Scala 2.7 is pretty poor. I understand that Scala Swing is being upgraded in the 2.8 release and that this will include improved documentation. A bit of both I suppose. As usual Scala reads much more easily than its Java equivalent. Thanks.  House of Mirrors I have written this game in Scala. It's open-source and uses Swing via both the Java and Scala library interfaces. The Scala API is great to work with as oxbox_lakes illustrated. I had to use the Java interface only for specific low level control such as custom alpha composition. Before the Scala-swing library had become stable the game was based on Scala-Squib but that project has paused AFAIK.  There is Scalide at Google code and then Scala itself has Swing library Thanks for the example. You are welcome. Scala is fascinating - isn't it?  I attended a talk recently on Scala and one of the products demo-ed was a Scala-Swing Twitter client. It is open-source and the project is TalkingPuffin. The UI looked pretty slick for a Swing project and I believe the project is looking for contributors. That looks like a great example of Scala Swing code. It's a shame the app is now unusable as it hasn't been committed to since some months before the ""OAuthocalypse"". As of today the commits seem pretty active"
474,A,"Panel with line wrapping and line breaking in Java Swing How to implement a panel that would support line wrapping and line breaking? I would only add textual labels and line breaks to this panel. The labels should flow from left to right wrapping to the next ""line"" if needed. The line breaks would cause a jump to the next line. I would also like to make the panel vertically scrollable. The solution should work in Java 5. SwingX can be used. Clarification: The textual labels are actually JXHyperlinks (from SwingX) i.e. the panel contains clickable labels. This is the reason I cannot just use JTextArea. Although it may not be a solution you're in search of but from the requirements you have it seems like a custom LayoutManager may be able to achieve what you are after. By designing and assigning a custom Layout Manager which allows line breaks to a Container (such as Panel) it should be possible to have a Panel which allows line breaks. The Laying Out Components Within a Container article from The Java Tutorials will provide general information on how Layout Managers work in Java and in particular the Creating a Custom Layout Manager will provide information on how to make a custom Layout Manager to apply to an Container. The behavior of the FlowLayout (the default Layout Manager for Panel) seems fairly close to the behavior you may be after. Adding functionality to line break seems like the missing piece. Suggestion: Perhaps the custom Layout Manager can have the ability to add a line break by having a Component that represents a line break which can be added to a Container by using the add() method. For example have a class constant Component in the custom Layout Manager such as (a hypothetical) LineBreakLayout.LINE_BREAK and adding that to the Container can tell the custom layout manager to move to the next line. Perhaps an implementation can be like: Panel p = new Panel(new LineBreakLayout()); p.add(new Label(""First Line"")); p.add(LineBreakLayout.LINE_BREAK); p.add(new Label(""Second Line"")); The above hypothetical LineBreakLayout will then render the first Label in one line and the second Label in the second line.  UPDATE: I missed the request for hyperlink support. Don't know how to do that w/o using the EditorPane. JTextArea does exactly what you've described. JTextArea textArea = new JTextArea(); JScrollPanel sPane = new JScrollPane(textArea); I want to make the labels clickable so that they could behave like hyperlinks. Could I do it with TextArea? (I don't want to use the JEditorPane with HTML.) Any reason against the JEditorPane (I'm just curious)? Seemed to be slow and an overkill. Also I couldn't figure out how to store a Java object with each hyperlink on the page so that clicking on the link would do some action based on the object. The Hyperlink event listener calls back with the Element and URL from anchor tag which caused the hyperlink. You could probably create some sort of mapping from URL->Object to take actions Right I currently have something like that. I'm just wondering if there is a better solution without such a mapping table. ahhh good deal. Now you've got me interested in the solution ;) Do you really don't know how to store an object for the hiperlink? In java there is a data structure named: ""Map"" with various subclasses. You can have map.put( aLink anObject ); and get the object when some link is used. It seems to me very straight forward.  This sample is not from a panel that is a container but from a JLabel that is intended to show content. You could use HTML in your content and use a <br> on each break. You should programmatically calculate the breaks according with your rules on component resize. Here's the code: import javax.swing.*; import java.awt.*; public class Wrap { public static void main( String [] args ) { JFrame frame = new JFrame(""Wrap test""); String text = ""<html>This<br>is<br>a<br>multiline<br>label</html>""; frame.add( new JLabel( text ) ); frame.pack(); frame.setVisible( true ); } } Yes I don't feel like implementing a map that would map strings to objects. I can use JXHyperlink (from SwingX) to store an object ""into the link"" and have an action performed on the object when the link is clicked. The problem is only how to layout the links so that they wrap in a scrollable pane. As per the hyperlinks you can have the by using a mouse listener. You can get where the object has been clicked and use a map to execute the action. But as reading your comments on basszero answer I think you just don't feel like program it.  I found JTextPane which I had overlooked before for some reason. This class does what I need. Thanks for your help though. :)"
475,A,"Constructing a DataFlavor for drag and drop of an array of java objects I want to implement drag and drop between two components within the same JVM. I'm passing an array of objects which are not serializable so I'm trying to find the correct incantation of javaJVMLocalObjectMimeType to pass in. However I keep getting an illegal argument exception. As an example if i have ExampleClass Appending class parameters works:  new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType+"";class=""+ExampleClass.class.getName()); But fails with an array type:  new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType+"";class=""+ExampleClass[].class.getName()); which throws: java.lang.IllegalArgumentException: failed to parse:application/x-java-jvm-local-objectref;class=[LExampleClass Aargh! Drag&Drop in swing is such a complete mess! What's the difference between the two code samples? My apologies that was a copy and paste error. the second example should refer to an array very of ExampleClass. Fixed now... Didn't the c&p error got into your code? Can you provide the rest of the ""failed to parse..."" message? No it didnt.... new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType+"";class=""+ExampleClass[].class.getName()); throws java.lang.IllegalArgumentException: failed to parse:application/x-java-jvm-local-objectref;class=[LExampleClass; Try this: new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType + "";class=\""""+ExampleClass.class.getName() + ""\""""); Since the name of an array (e.g. ""[Ljava.lang.Object;"") has special characters you have to quote the ""class"" parameter. That was it! Thanks..."
476,A,"Undecorate JInternalFrame on MacOS I am trying to undecorate a JInternalFrame i.e. remove the default titlebar using the following code; BasicInternalFrameUI ui = (BasicInternalFrameUI)internalFrame.getUI(); ui.getNorthPane().setPrefrredSize(new Dimension(00)); I works on windows but the second line throws a NullPointerException on MacOS Any ideas why and how to get round it? On Mac the JInternalFrame doesn't have a north pane. Only execute the code on none Mac OS platforms; // only remove the northpanel for none Mac OS if(!(System.getProperty(""os.name"").startsWith(""Mac OS""))){ BasicInternalFrameUI ui = (BasicInternalFrameUI) getUI(); ui.getNorthPane().setPrefrredSize(new Dimension(00)); } So much about cross platform :-(  I don't use a Mac so I don't know what is causing the problem. A JInternalFrame without the title bar loses its ability to be dragged. You should be able to accomplish the same goal by just adding a JPanel to the desktop. You would need to set the bounds of the panel. You might also want to use one of the internal frame custom borders on the panel: UIManager.getBorder(""InternalFrame.paletteBorder""); UIManager.getBorder(""InternalFrame.optionDialogBorder""); Or maybe another option is to use: internalFrame.putClientProperty(""JInternalFrame.isPalette"" Boolean.TRUE); This will replace the title bar with a small palette that can be used to drag the internal frame without the buttons or title. ""A JInternalFrame without the title bar loses its ability to be dragged"" -- but it still can be resized ;) @ivan I have custom code to handle the resizing and window dragging."
477,A,"Are the names of default actions in Swing component's ActionMap standardized? Say I have a standard Swing component like JSlider but I want to slightly adjust the input map. Default input maps and action map are installed by look and feel and I want to reuse some of the actions already available in ActionMap. To do that I need to put ActionMap entry's key into the value of an InputMap's entry. I can easily look up ActionMap keys (always a String) at runtime with debugger and reuse it. It will work - guaranteed on my version of JDK and L&F. So the question is are the keys for default Swing component actions documented anywhere can they ""legally"" change over time (that is from JDK version to JDK version or from L&F to L&F) and have you seen such a change in practice? Thanks. I've been looking for the answer for this question. Way tougher than it looks! +1 because I can't give more Ok it took me a while to search this up. In short they don't seem to be standarized (much) and they don't see to be documented (much). The class LookAndFeel is the key. This is the hierarchy: LookAndFeel BasicLookAndFeel MetalLookAndFeel MotifLookAndFeel WindowsLookAndFeel MultiLookAndFeel In the BasicLookAndFeel class you can find the default mappings for actions and key bindings which would be inherited by all other classes. So you could consider this class to be the standard. You can see that in the creation of the object ""defaults"" around like 498 for Java 1.4.2_17. Additional key bindings and overwrites can be found on the implementors such as WindowsLookAndFeel. Some of the Standarized names can be found on the DefaultEditorKit class as static fields. Those seem to be safe to use and remap. Their usage can be seen in the WindowsLookAndFeel and MotifLookAndFeel classes. I would feel safe assuming that those actions will stay constant. So in short the Actions defined in DefaultEditorKit are unlikely to change. However the key bindings change completely between L&F implementations. Retrieve the action from the map using DefaultEditorKit.something and it should work across versions. Example from DefaultEditorAction that you could possibly use with JSlider: /** * Name of the Action for extending the selection * by moving the caret logically forward one position. * @see #getActions */ public static final String selectionForwardAction = ""selection-forward"";  ActionMap and InputMap have getParent() and setParent() so the solution is: Create a new map with the few changes you want to make. Query your component for it's map Set that map as the parent of your new map Install your new map in the component This way your modifications overwrite and extend the existing mappings. [EDIT] I'm not aware that there is a list of all keys anywhere. But things like maxScroll should be ""stable"" i.e. they should exist in future versions (not that Swing has changed much in the past 10 years ...) So if you need to replace a certain mapping use the approach above. This way you keep all the existing mappings of the L&F (keeping the component usable even if you make a mistake). If you depend on overwriting a certain key then I suggest to check whether the key exists and throw an error should it suddenly disappear. This way your code will work (probably for many years) and if it breaks it will actively tell you about the change. this is not what i ask about I have no problems extending input and action maps and I don't want to copy all the keys. Sorry if this is not clear from my question's wording. My question is whether the keys for actions used in those maps are documented anywhere (in other words how reliable is the code that assumes there's a key say ""maxScroll"" for the action that moves slider to the end of the scale) Aaron sorry I rated your answer -1 without realizing I probably didn't state the question clear enough. stackoverflow will allow me to undo the negative vote if you make any change to your answer The same works with the InputMap so i wonder why you can't simply extend the existing maps? Why do you want to copy all the keys to new maps? See my edits. As for the -1 just click the ""down arrow"" again to undo it."
478,A,"Java: Altering UI fonts (Nimbus) doesn't work! I'm referring to this Nimbus reference. I tried to set global Font to be slightly larger: UIManager.put(""defaultFont"" new Font(Font.SANS_SERIF 0 16)); ...works only for the menu but nothing else (buttons labels). I tried to change labels and buttons fonts with UIManager.put(""Button.font"" new Font(Font.SANS_SERIF 0 16)); UIManager.put(""Label.font"" new Font(Font.SANS_SERIF 0 16)); but the font remains. The only thing that worked for me was deriving a font: someButton.setFont(someButton.getFont().deriveFont(16f)); But this is not an option since this must be done for each element manually. Note that deriving a font for UIManager doesn't work either: UIManager.put(""Label.font"" UIManager.getFont(""Label.font"").deriveFont(16f)); I tested everything under Linux and Windows: same behavior. I just can't understand how an API can be so messy. If a method is called setFont(..) then I expect it to set the font. If this method fails to set the font in any thinkable circumstances then it should be deprecated. EDIT: The problem not only applies to Nimbus but also to the default LAF. Did you try to call ``SwingUtilities.updateComponentTreeUI(frame);`` after updating UI defaults? That code won't even compile; there's no Font constructor that takes a float as the third parameter. That code was example code which doesn't event need to compile ;) In real code I had usages of static variables and as I removed them to do this example I was looking at deriveFont(..) which takes float. SwingUtilities.updateComponentTreeUI(frame) doesn't help either Actually Nimbus has the ""Label.font"" property but it is not working when the user defines a custom value. This can be one more of Nimbus/Synth bugs. I had problems like these before that's why I choose Metal/Basic has base for a custom LAF. Java LAF API is a little bit clumsy but there is nothing better than check the source code to get your answers. Note that MetalLookAndFeel and Nimbus are different implementations and the properties for each one doesn't have to be the same. The following examples use the MetalLookAndFeel. package com.stackoverflow.laf.font; import java.awt.Font; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.SwingUtilities; import javax.swing.UIManager; public class SetFontExample { public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { UIManager.put(""Label.font"" new Font(Font.SANS_SERIF 0 20)); try { UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName()); } catch (Exception e) { e.printStackTrace(); } JFrame frame = new JFrame(""Set font example""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.add(new JLabel(""Font test"")); frame.pack(); frame.setVisible(true); } }); } } This works because the property ""Label.font"" exists on Metal and it uses that property correctly. You you can check it this way: package com.stackoverflow.laf; import javax.swing.SwingUtilities; import javax.swing.UIDefaults; import javax.swing.UIManager; public class ListLAFUIDefaults { public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { try { // Choose LAF UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName()); } catch (Exception e) { e.printStackTrace(); } UIDefaults defaults = UIManager.getLookAndFeel().getDefaults(); System.out.println(defaults); // Check a property String propertyKey = ""defaultFont""; System.out.println(UIManager.getLookAndFeel().getName() + (defaults.containsKey(propertyKey) ? "" contains "" : "" doesn't contain "") + ""property "" + propertyKey); } }); } } Note: since I'm reading the property before I write it by doing UIManager.put(""Label.font"" UIManager.getFont(""Label.font"").deriveFont(16f)); there MUST be such property ""Label.font"". In deed your example works! But only as long as I don't use Nimbus UI instead of cross platform LAF. That's a Nimbus bug. Please check http://www.jasperpotts.com/blog/2008/08/nimbus-uimanager-uidefaults/#comment-1351  One thing that amazes me to this day is that the LaF setters [setFont setBackground etc] do not actually set real properties. The spec says that LaFs are allowed to ignore user set fonts colors etc. This is why GTKLaF is completely broken. It uses the system gtk theme settings not the programmer's settings. IIRC Nimbus has a separate package private class that contains defaults (NimbusDefaults?) and can't be easily accessed. I suggest never using GTK or Nimbus LAF if you plan on customizing the look in any way. A quick google search turns up this for GTK A discussion about these problems in nimbus can be found here. Well setting those properties actually WORK for me! I quote my question: The only thing that worked for me was deriving a font: someButton.setFont(someButton.getFont().deriveFont(16f)); But doing someComponent.setFont(..) is not an option since this way I had to do it for each and every component! == copy&paste-code.  The nimbus defaults are lazy created so setting 'defaultFont' before the screen is painted will add the font to the parent defaults and not to the nimbus defaults. Workaround: force nimbus to initialize the defaults and set then the defaults: NimbusLookAndFeel laf = new NimbusLookAndFeel(); UIManager.setLookAndFeel(laf); laf.getDefaults().put(""defaultFont"" new Font(""Monospaced"" Font.BOLD 12)); Note: this code is more efficient then overriding getDefaults() as suggested above.  The answer in a single line of code (assuming you have already set Nimbus LaF): UIManager.getLookAndFeelDefaults().put(""defaultFont"" new Font(Font.SANS_SERIF 0 20)); Of course you need to call this before you create any GUI components i.e. right in your main just after setting Nimbus LaF.  This works with JDK6 and JDK7. Copy+paste and have fun ;) Note: for JDK6 change javax.swing.plaf.nimbus to com.​sun.​java.​swing.​plaf.​nimbus. Code import java.awt.*; import java.lang.reflect.*; import javax.swing.*; import javax.swing.plaf.nimbus.*; public class Main { public static void main(String[] args) throws InterruptedException InvocationTargetException { SwingUtilities.invokeAndWait(new Runnable() { @Override public void run() { try { UIManager.setLookAndFeel(new NimbusLookAndFeel() { @Override public UIDefaults getDefaults() { UIDefaults ret = super.getDefaults(); ret.put(""defaultFont"" new Font(Font.MONOSPACED Font.BOLD 16)); // supersize me return ret; } }); new JFrame(""Hello"") { { setDefaultCloseOperation(EXIT_ON_CLOSE); setLayout(new FlowLayout(FlowLayout.LEFT)); setSize(500 500); setLocationRelativeTo(null); add(new JLabel(""someLabel 1"")); add(new JButton(""someButton 1"")); add(new JLabel(""someLabel 2"")); add(new JButton(""someButton 2"")); setVisible(true); } }; } catch (Exception ex) { throw new Error(ex); } } }); } } Thanks of all the hints I found this was the only one that worked around the Nimbus bugs.  Wrap your Font with FontUIResource. I had the exact same problem with UIManager colors and ColorUIResource fixed everything. Without digging through the JDK I think there are some places where components expect (read: check via instanceof) for UIResources (maybe someone can confirm this) Tried this before didn't work also :( meh it was worth a shot. Keep it in mind if you want to change colors. Changing colors works perfectly using UIManager.put(""nimbusBase"" new Color(someColor));"
479,A,"Find ""real"" height/width of Swing/AWT object Because Canvas3D doesn't have the ability to resize dynamically with the parent frame I would like to be able to track when a user resizes a window and then resize it manually myself. (If this ends up crashing Canvas3D as some docs suggest I will simply destroy and recreate it when the user resizes their window). Part of this procedure involves being able to accurately tell how big the container panel is to begin with. The two methods I've tried: panel.getHeight(); panel.getPreferredSize().height; Don't seem to accurately report things: getHeight() is invariably zero and getPreferredSize() returns numbers that don't actually have anything to do with the actual size of the panel. Any ideas? Edit: So I took a debugger to the panel object and manually inspected the non-object properties and I didn't see anything that resembled width/height. Granted there are sub-objects that I didn't look at. Also maybe the window has to be visible (it isn't at the point I'm interfacing the object) when I query for height/object? Edit 2: So Swing classes are subclasses of AWT classes so I imagine if you're able to find the height/width of those the approach would generalize. I've amended the title accordingly. I found out that if you extend by JFrame this code can be used also to save time effort and space. int windowWidth = getWidth(); int windowHeight = getHeight(); I know you already got an answer but if you ever need an alternative here it is.  To determine the size of a component you have to either: have set it manually at some point run the layout manager responsible for layouting the component Generally you get the exact size of a component via the getSize() method which returns a Dimension object containing width and height but getWidth/Height() should work too. But this can only work if one of the two preconditions are met. If a window has never been made visible has no layout manager or the component (you want to know the size of) has been added after the window/container has been made visible the size usually is zero. So to get the correct size you have to make the container/frame visible (after you have added the component) or call validate() or doLayout() on the container to recalculate the layout if you added the component after the last layout was done. Another thing to keep in mind is setting and probably configuring a layout manager on the container. If no layout manager ist set (null) even making a container visible oder calling validate() does not set a size on its children. The minimumSize/preferredSize/maximumSize properties are hints to the layout manager how the component should be sized but it does not have to obey them (most layout managers don't). Edit 2: After I read your other question about the same subject I think you should read Using Layout Managers from The Java Tutorials Edit: I don't know if you already figured that out but to react to the resizing of the window you can do something like this: public class WindowResizeTest extends JFrame { public static void main(String[] args) { new WindowResizeTest(); } public WindowResizeTest() { this.setSize(640 480); JPanel panel = new JPanel(); panel.setBackground(Color.RED); this.add(panel); this.addComponentListener(new ComponentListener() { public void componentResized(ComponentEvent e) { System.out.println(e.getComponent().getSize()); } public void componentHidden(ComponentEvent e) {} public void componentMoved(ComponentEvent e) {} public void componentShown(ComponentEvent e) {} }); this.setVisible(true); } } Thanks for the response. Saved my life! Thanks nice work! Thank you so much for the well thought out answer. I will try it out promptly!"
480,A,"How to programatically deselect the currently selected row in a JTable (swing)? I want to programatically deselect the currently selected row (or rows) in a JTable. Basically I want the oposite of this: JTable table = ...; table.setRowSelectionInterval(xx); I tried (with little hope) using: table.setRowSelectionInterval(-1-1) or table.setRowSelectionInterval(10) but it doesn't work. Any ideas? I believe you can use this: table.getSelectionModel().clearSelection(). The SelectionModel is what actually handles the selection. JTable just has a few shortcuts.  There is a method on JTable called clearSelection. This in turn calls clearSelection on the ListSelectionModel of the table and the column model. Duh! For some reason I assumed the method would be a setter so I only searched for methods starting with ""set"". Thanks!"
481,A,Auto adjust the height of rows in a JTable In a JTable how can I make some rows automatically increase height to show the complete multiline text inside? This is how it is displayed at the moment: I do not want to set the height for all rows but only for the ones which have multiline text. The only way to know the row height for sure is to render each cell to determine the rendered height. After your table is populated with data you can do: private void updateRowHeights() { try { for (int row = 0; row < table.getRowCount(); row++) { int rowHeight = table.getRowHeight(); for (int column = 0; column < table.getColumnCount(); column++) { Component comp = table.prepareRenderer(table.getCellRenderer(row column) row column); rowHeight = Math.max(rowHeight comp.getPreferredSize().height); } table.setRowHeight(row rowHeight); } } catch(ClassCastException e) {} } If only the first column can contain multiple line you can optimize the above code for that column only. Do i need a table model for this?  You must iterate over each row get the bounding box for each element and adjust the height accordingly. There is no code support for this in the standard JTable (see this article for a solution for Java ... 1.3.1 =8*O).
482,A,"Java Swing: positioning dialog on top of existing window Can someone show simple Java Swing code/web resource that will position the popup dialog center-aligned on top of an existing JFrame window when the JFrame's button clicked? What kind of popup dialog are you talking about? If you're using a JOptionPane or something similar set its parent component to the JFrame and it will automatically center on top of the JFrame window. JOptionPane.showMessageDialog(frame ""Hello World!""); If you are creating your own JDialog you can get the JFrame's position using JFrame.getLocation() and its size using JFrame.getSize(). The math is pretty straightforward from there; just compute the center of the JFrame and subtract half the width/height of the JDialog to get your dialog's upper left corner. If your JDialog has not been rendered yet JFrame.getSize() might give you a zero size. In that case you can use JDialog.getPreferredSize() to find out how big it will be once it's rendered on-screen.  Oh..it's pretty simple: Say you have a JFrame that contains a JDialog and you want the JDialog (when opened) to be right on top of JFrame. So in JDialog constructor you should have something like: public class MyDialog extends JDialog public MyDialog(JFrame parent) { super.setLocationRelativeTo(parent); // this will do the job } In other words pass JFrame pointer to your dialog and call setLocationRelativeTo(...); method. Wow this really helped me out! Small detail though... it should be called only AFTER setting your dialog size or the dialog will appear with its top left corner centered on the parent window. I didn't realize that method existed; pretty handy!  I usually call the following method: dialog.setLocationRelativeTo(parent); Link to Javadocs"
483,A,"Printing headers and footers in color? I am trying to create colored headers and footers when printing a JTable. Specifically I am looking at getPrintable() in javax.swing.JTable but MessageFormat does not give me the option to specify the color of the header or footer. How can I do it? clarification I am interested in setting the header/footers while printing. For example notepad appends the filename as a header to what you print. update Seems like there is no standard way of doing this can someone give me some workarounds? The only answer posted so far has nothing to do with printing(as in send to a printer not displaying to screen) header/footers. Copied from my comment: I am interested in the printing header/footer. For example when you are printing a document from notepad it appends the filename as a header (or perhaps its the footer I do not remember exactly) One solution I can think of is to use your own printable: public class CustomTablePrintable implements Printable { Printable tablePrintable; public void setTablePrintable(Printable printable) { tablePrintable = printable; } public int print(Graphics graphics PageFormat pageFormat int pageIndex) throws PrinterException { if (pageIndex > 0) { return NO_SUCH_PAGE; } tablePrintable.print(graphics pageFormat pageIndex); Graphics2D g2d = (Graphics2D)graphics; g2d.translate(pageFormat.getImageableX() pageFormat.getImageableY()); // Draw header/footer here graphics.drawString(header posx posy); return PAGE_EXISTS; } } When you call getPrintable from your JTable inject it to a new instance to the custom printable and then use this with the PrinterJob. You can now draw the header and footer as you wish but you also lose some stuff: You can't use MessageFormat to format the messages. I believe that you could easily add this functionality to your printable. Header and footer aren't automatically positioned. You could have rough estimates for these though. EDIT: I've looked at the Java Sources and there is the private class TablePrintable that does all the job. You can peak at the source code to see how the header and footer are printed. Then you can move this functionality to your Printable class. looks good I'll give this a try  It's easy: JTable table = new JTable(); ((DefaultTableCellRenderer)table.getTableHeader().getColumnModel().getColumn(4).getHeaderRenderer()).setForeground(Color.ORANGE); downvoted: a) unrelated to the question b) unsafe type-cast c) unguarded against null column header renderer d) ...  This code is mainly from www.java2s.com with changes to show how to change the color. It is not the prettiest solution but hopefully will help you. import java.awt.BorderLayout; import java.awt.Color; import java.awt.Component; import javax.swing.JComponent; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JScrollPane; import javax.swing.JTable; import javax.swing.UIManager; import javax.swing.border.Border; import javax.swing.table.TableCellRenderer; import javax.swing.table.TableColumn; import javax.swing.table.TableColumnModel; public class MainClass { public static void main(String args[]) { String rows[][] = { { ""A"" ""a"" } { ""B"" ""b"" } { ""E"" ""e"" } }; String headers[] = { ""Upper"" ""Lower"" }; JFrame frame = new JFrame(""Label Header""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JTable table = new JTable(rows headers); JScrollPane scrollPane = new JScrollPane(table); Border headerBorder = UIManager.getBorder(""TableHeader.cellBorder""); JLabel headerLabel1 = new JLabel(headers[0] JLabel.CENTER); headerLabel1.setBorder(headerBorder); // Here is where the color is changed. headerLabel1.setBackground(new Color(255 0 0)); headerLabel1.setForeground(new Color(0 0 255)); // End of color change. JLabel headerLabel2 = new JLabel(headers[1] JLabel.CENTER); headerLabel2.setBorder(headerBorder); TableCellRenderer renderer = new JComponentTableCellRenderer(); TableColumnModel columnModel = table.getColumnModel(); TableColumn column0 = columnModel.getColumn(0); TableColumn column1 = columnModel.getColumn(1); column0.setHeaderRenderer(renderer); column0.setHeaderValue(headerLabel1); column1.setHeaderRenderer(renderer); column1.setHeaderValue(headerLabel2); frame.add(scrollPane BorderLayout.CENTER); frame.setSize(300 150); frame.setVisible(true); } } class JComponentTableCellRenderer implements TableCellRenderer { public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { return (JComponent)value; } } The most important bit is:  // Here is where the color is changed. headerLabel1.setBackground(new Color(255 0 0)); headerLabel1.setForeground(new Color(0 0 255)); // End of color change. HTH let me know how you got on with it :) If I'm not mistaken you are setting table header/footers here. I am interested in the printing header/footer. For example when you are printing a document from notepad it appends the filename as a header (or perhaps its the footer I do not remember exactly)  This is a little out of left-field but you could use a library like iText to create a PDF document and then send that to the printer. You'll get a much greater level of control over the appearance and presentation of the document including the ability to manage how the rows of your table break over page boundaries and you'll be able to set the page header and footer very readily. You can print a PDF in Java following these instructions: http://www.juixe.com/techknow/index.php/2008/01/17/print-a-pdf-document-in-java/"
484,A,"Drawing graphics in java (netbeans ide) I created a new JApplet form in netbeans: public class UI extends javax.swing.JApplet { //generated code... } And a jpanel in design mode named panou: // Variables declaration - do not modify private javax.swing.JPanel panou; How do I get to draw a line on ""panou""? I've been searching for this for 5 hours now so a code snippet and where to place it would be great. (using Graphics2D preferably) Edit: its getting really frustrating I tried this (big chunk of code) Edit2: thanks to Martijn I made it work:) To do custom painting in a JPanel one would need to make a subclass of a JPanel and then overload the paintComponent method: class MyPanel extends JPanel { public void paintComponent(Graphics g) { // Perform custom painting here. } } In the example above the MyPanel class is a subclass of JPanel which will perform whatever custom painting is written in the paintComponent method. For more information on how to do custom painting in Swing components Lesson: Performing Custom Painting from The Java Tutorials have some examples. If one wants to do painting with Java2D (i.e. using Graphics2D) then one could do some painting on a BufferedImage first then draw the contents of the BufferedImage onto the JPanel: class MyPanel extends JPanel { BufferedImage image; public MyPanel() { Graphics2D g = image.createGraphics(); // Do Java2D painting onto the BufferedImage. } public void paintComponent(Graphics g) { // Draw the contents of the BufferedImage onto the panel. g.drawImage(image 0 0 null); } } Further reading: Painting in AWT and Swing Trail: 2D Graphics  Go to design mode Right Click on the panel ""panou"" Click ""Costumize code"" In the dialog select in the first combobox ""costum creation"" add after = new javax.swing.JPanel() this so you see this:   panou = new javax.swing.JPanel(){ @Override public void paintComponent(Graphics g) { super.paintComponent(g); // Do the original draw g.drawLine(10 10 60 60); // Write here your coordinates } }; Make sure you import java.awt.Graphics. The line that you will see is always one pixel thick. You can make it more ""line"" by doing the following: Create this method: public static final void setAntiAliasing(Graphics g boolean yesno) { Object obj = yesno ? RenderingHints.VALUE_ANTIALIAS_ON : RenderingHints.VALUE_ANTIALIAS_OFF; ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING obj); } And add after super.paintComponent(g); (in your costum creation) this: setAntiAlias(g true); Edit What you are doing wrong is: you paint the line once (by creating the frame). When you paint the line the frame is also invisible. The first draw is happening when the frame becomes visible. The frame will be REpainted so everything from the previous paint will disapear. Always you resize the frame everything will be repainted. So you have to make sure each time the panel is painted the line also is painted. Martijn thank you very much  I just want to know whether this method can work with netbean IDE ?? yes it works see Martijn's answer."
485,A,Why EventDispatchThread in first place? This is the design decision I don't understand. Both Android and JME follow the policy that the thread that started an app is the UI thread and you take care to offload resource-consuming stuff to another threads. In Swing on the other hand you use EventQueue.invokeLater(Runnable) for UI and SwingWorker for background processing. Now what's the main thread for? The java launcher is not Swing (or AWT) specific. main is a general purpose entry point. AWT will start the Event Dispatch Thread on demand after main has been called so can't use the main thread. It can even exit the EDT and start a new one. What's stranger is that applet lifecycle methods are not called on the AWT EDT. The main thread is just a thread created to execute the main method.  As mentioned in this Sun article about thread you can do whatever you want in the main thread including building a GUI even though it is risky. Swing methods are not thread-safe but as long as no components (Swing or otherwise) have been realized (meaning that the component's paint() method has been or might be called) it was OK until 2004. Since 2004 as reminded in this SO question it is mandatory to create the GUI in the EDT. Back to the question: Swing has not been implemented with the main thread solely related to GUI because that would force a pure multi-thread approach and: Component developers do not have to have an in-depth understanding of threads programming: Toolkits in which all components must fully support multithreaded access can be difficult to extend particularly for developers who are not expert at threads programming. Events are dispatched in a predictable order: The runnable objects enqueued by invokeLater() are dispatched from the same event queue as mouse and keyboard events timer events and paint requests. In toolkits where components support multithreaded access component changes are interleaved with event processing at the whim of the thread scheduler. This makes comprehensive testing difficult or impossible. Less overhead: Toolkits that attempt to carefully lock critical sections can spend a substantial amount of time and space managing locks. Whenever the toolkit calls a method that might be implemented in client code (for example any public or protected method in a public class) the toolkit must save its state and release all locks so that the client code can grab locks if necessary. When control returns from the method the toolkit must regrab its locks and restore its state. All applications bear the cost of this even though most applications do not require concurrent access to the GUI. So the main thread can be used for initialization (of data and GUI provided they do not take too much time) while most post-initialization GUI steps naturally occurs in the event-dispatching thread. Once the GUI is visible most programs are driven by events such as button actions or mouse clicks which are always handled in the event-dispatching thread.. It turns out that it is not okay to build Swing components off the EDT. @Tom: true since 2004. I have updated my answer.
486,A,"StackOverflowError when serializing an object in Java I am writing an application in Java using Swing. I am trying to implement functionality to save and load simulation states for at simulation i am running. The entire simulation is kept as an object disconnected from Swing. I am trying to serialize my Simulation class with this code: public void saveSimulationState(String simulationFile) { try { Serializable object = this.sm; ObjectOutputStream objstream = new ObjectOutputStream(new FileOutputStream(simulationFile)); objstream.writeObject(object); objstream.close(); } catch (IOException e) { System.out.println(e.getMessage()); } } But i get the following error (it is huge). Exception in thread ""AWT-EventQueue-0"" java.lang.StackOverflowError at java.io.ObjectStreamClass.processQueue(ObjectStreamClass.java:2234) at java.io.ObjectStreamClass.lookup(ObjectStreamClass.java:266) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1106) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) Can anybody tell me what is causing this exception? Oh and all my code can be found here: http://code.google.com/p/sensor-protocol-simulation/ The example code was taken from GraphPanel.java in the view part. You should create a container class for the objects you want to store. I would not store the complete this object with all the logic inside. Store first field by field to find the element which is to big to store it that way. Than put a breakpoint in the methode and take a look at the field element. Does the element contains links which link to each other?  Run java with bigger stacks  You should consider reimplementing the writeObject / readObject methods of your Simulation class in order to serialize only the relevant data (and not the entire contained object structure by default) or tagging transient your not to be serialized objects. You can also use the Externalizable interface if needed. BTW you may want to read this interesting article to begin with.  And after you done all that just use XStream instead if you only want to save to a file.  This code should serve as a model as it addresses the problem of stackoverflow on serialization. It uses memory inplace of recursion. Although not fit to be concidered universal as a serializer it serializes and deserializes the classes it was tested with. import java.io.*; import java.util.*; import java.lang.reflect.*; import android.util.*; public class SequentialObjectInputStream extends DataInputStream implements ObjectInput { interface FieldPutAction { void put(Object obj Field field) throws IllegalAccessException IOException; } interface ArrayPutAction { void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException; } public HashMap<Class FieldPutAction> Primatives; public HashMap<Class ArrayPutAction> ArrayPrimatives; public SequentialObjectInputStream(InputStream stream) { super(stream); Primatives = new HashMap<Class FieldPutAction>(); try { Primatives.put(boolean.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { boolean x = readBoolean(); field.setBoolean(obj x); } }); Primatives.put(byte.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { byte x = readByte(); field.setByte(obj x); } }); Primatives.put(short.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { short x = readShort(); field.setShort(obj x); } }); Primatives.put(int.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { int x = readInt(); field.setInt(obj x); } }); Primatives.put(long.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { long x = readLong(); field.setLong(obj x); } }); Primatives.put(char.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { char x = readChar(); field.setChar(obj x); } }); Primatives.put(float.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { float x = readFloat(); field.setFloat(obj x); } }); Primatives.put(double.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { double x = readDouble(); field.setDouble(obj x); } }); Primatives.put(String.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { String x = readUTF(); field.set(obj x); } }); } catch(Exception e) { Log.e(""SOb"" Log.getStackTraceString(e)); } ArrayPrimatives = new HashMap<Class ArrayPutAction>(); try { ArrayPrimatives.put(boolean.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { boolean x = readBoolean(); Array.setBoolean(obj index x); } }); ArrayPrimatives.put(byte.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { byte x = readByte(); Array.setByte(obj index x); } }); ArrayPrimatives.put(short.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { short x = readShort(); Array.setShort(obj index x); } }); ArrayPrimatives.put(int.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { int x = readInt(); Array.setInt(obj index x); } }); ArrayPrimatives.put(long.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { long x = readLong(); Array.setLong(obj index x); } }); ArrayPrimatives.put(char.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { char x = readChar(); Array.setChar(obj index x); } }); ArrayPrimatives.put(float.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { float x = readFloat(); Array.setFloat(obj index x); } }); ArrayPrimatives.put(double.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { double x = readDouble(); Array.setDouble(obj index x); } }); ArrayPrimatives.put(String.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { String x = readUTF(); Array.set(obj index x); } }); } catch(Exception e) { Log.e(""SOb"" Log.getStackTraceString(e)); } } @Override public Object readObject() throws ClassNotFoundException IOException { long Total = readLong(); Log.i(""SOb"" ""readObject : "" + Long.toString(Total) + "" objects in graph""); HashMap<Long Object> References = new HashMap<Long Object>(); long currentId = 1; HashMap<Object HashMap<Field Long>> refCache = new HashMap<Object HashMap<Field Long>>(); final HashMap<Object HashMap<Integer Long>> arefCache = new HashMap<Object HashMap<IntegerLong>>(); for (int I=0; I < Total; I++) { String Name = readUTF(); Class C = Class.forName(Name); Log.i(""SOb"" ""Object of ""+C.getCanonicalName() +"" on graph""); int adim = 0; Object O = null; if (C.isArray()) { Class ComponentType = C.getComponentType(); int Size = readInt(); Log.i(""SOb"" ""array of ""+ComponentType.getCanonicalName() + "" "" + Long.toString(Size) + "" elements""); O = Array.newInstance(ComponentType Size); References.put(currentId O); currentId++; ArrayPutAction action = null; if (ArrayPrimatives.keySet().contains(ComponentType)) { action = ArrayPrimatives.get(ComponentType); } else { arefCache.put(O new HashMap<Integer Long>()); action = new ArrayPutAction() { public void put(Object O int Index) throws ArrayIndexOutOfBoundsException  IOException { long Ref = readLong(); arefCache.get(O).put(Index Ref); } }; } for (int index=0; index< Size; index++) { action.put(Oindex); } } else { try { O = C.getConstructor(new Class[0]).newInstance(new Object[0]); } catch(InstantiationException e) { Log.e(""SOb"" Log.getStackTraceString(e)); } catch(NoSuchMethodException e) { Log.e(""SOb"" Log.getStackTraceString(e)); } catch(IllegalAccessException e) { Log.e(""SOb"" Log.getStackTraceString(e)); } catch(InvocationTargetException e) { Log.e(""SOb"" Log.getStackTraceString(e)); } References.put(currentId O); currentId++; refCache.put(O new HashMap<Field Long>()); for (Field F : C.getFields()) { if (F.isAccessible()) { Class T = F.getType(); if (Primatives.containsKey(T)) { try { Primatives.get(T).put(O F); } catch (IllegalAccessException e) { } } else { refCache.get(O).put(F readLong()); } } } } } for (long I=0; I < Total; I++) { Object O = References.get(I+1); Class C = O.getClass(); //Log.i(""SOb"" ""get reference ""+Long.toString(I)+"" ""+C.getCanonicalName()); if (C.isArray()) { HashMap<IntegerLong> aref_table = arefCache.get(O); if (ArrayPrimatives.containsKey(C.getComponentType()) == false) { int len = Array.getLength(O); for (int index=0; index<len; index++) { long r = aref_table.get(index); Object ref = r == 0 ? null : References.get(r); Array.set(O index ref); } } } else { HashMap<Field Long> ref_table = refCache.get(O); for (Field F : C.getFields()) { if (F.isAccessible()) { Class T = F.getType(); if (Primatives.containsKey(T) == false) { try { long r = ref_table.get(F); Object ref = r == 0 ? null : References.get(r); F.set(O ref); } catch (IllegalAccessException e) { Log.e(""SOb"" Log.getStackTraceString(e)); } } } } } } return References.get((Long) (long) 1); } } import java.io.*; import java.util.*; import java.lang.reflect.*; import android.util.*; public class SequentialObjectOutputStream extends DataOutputStream implements ObjectOutput { interface FieldGetAction { void get(Object obj Field field) throws IllegalAccessException IOException; } interface ArrayGetAction { void get(Object array int Index) throws ArrayIndexOutOfBoundsException IOException; } public HashMap<Class FieldGetAction> Primatives; public HashMap<Class ArrayGetAction> ArrayPrimatives; public SequentialObjectOutputStream(OutputStream stream) { super(stream); Primatives = new HashMap<Class FieldGetAction>(); try { Primatives.put(boolean.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { boolean x = field.getBoolean(obj); writeBoolean(x); } }); Primatives.put(byte.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { byte x = field.getByte(obj); writeByte(x); } }); Primatives.put(short.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { short x = field.getShort(obj); writeShort(x); } }); Primatives.put(int.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { int x = field.getInt(obj); writeInt(x); } }); Primatives.put(long.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { long x = field.getLong(obj); writeLong(x); } }); Primatives.put(char.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { char x = field.getChar(obj); writeChar(x); } }); Primatives.put(float.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { float x = field.getFloat(obj); writeFloat(x); } }); Primatives.put(double.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { double x = field.getDouble(obj); writeDouble(x); } }); Primatives.put(String.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { String x = (String) field.get(obj); writeUTF(x); } }); } catch(Exception e) { Log.e(""SOb"" Log.getStackTraceString(e)); } ArrayPrimatives = new HashMap<Class ArrayGetAction>(); try { ArrayPrimatives.put(boolean.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { boolean x = Array.getBoolean(obj index); writeBoolean(x); } }); ArrayPrimatives.put(byte.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { byte x = Array.getByte(obj index); writeByte(x); } }); ArrayPrimatives.put(short.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { short x = Array.getShort(obj index); writeShort(x); } }); ArrayPrimatives.put(int.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { int x = Array.getInt(obj index); writeInt(x); } }); ArrayPrimatives.put(long.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { long x = Array.getLong(obj index); writeLong(x); } }); ArrayPrimatives.put(char.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { char x = Array.getChar(obj index); writeChar(x); } }); ArrayPrimatives.put(float.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { float x = Array.getFloat(obj index); writeFloat(x); } }); ArrayPrimatives.put(double.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { double x = Array.getDouble(obj index); writeDouble(x); } }); ArrayPrimatives.put(String.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { String x = (String) Array.get(obj index); writeUTF(x); } }); } catch(Exception e) { Log.e(""SOb"" Log.getStackTraceString(e)); } } class State { public ArrayList<Object> OStack = new ArrayList<Object>(); public long currentId = 1; public HashMap<Object Long> References = new HashMap<Object Long>(); } public void writeObject(Object A) throws IOException NotSerializableException { final State state = new State(); state.OStack.add(0 A); LinkedList<Object> ForStack = new LinkedList<Object>(); while (!(state.OStack.size() == 0)) { Object Current = state.OStack.get(0); state.OStack.remove(0); if (((Serializable) Current) == null) { throw new NotSerializableException(); } //Type C = Current.getClass(); Class C = Current.getClass(); Log.i(""SOb"" ""placing #""+Long.toString(state.currentId)+"" of ""+C.getCanonicalName()+"" on graph""); state.References.put(Current state.currentId); state.currentId++; ForStack.add(Current); if (C.isArray()) { //Array array = (Array) Current; Class Ctype = C.getComponentType(); if (ArrayPrimatives.keySet().contains(Ctype) == false) { for (int I=0; I<Array.getLength(Current); I++) { Object o = Array.get(Current I); if ((o != null) && (state.References.keySet().contains(o) == false)) { if (state.OStack.contains(o) == false) state.OStack.add(state.OStack.size() o); } } } } else { for (Class Cur = C; Cur != null; Cur = Cur.getSuperclass()) { Field[] fields = Cur.getDeclaredFields(); for (Field f : fields) { if (Modifier.isStatic(f.getModifiers())) { continue; } f.setAccessible(true); if (f.isAccessible() == false) { // Log.i(""SOb"" "" isAccessible = false""); continue; } Class type = f.getType(); //Log.i(""SOb"" "" field \""""+f.getName()+""\"" of ""+type.getCanonicalName()); if (Primatives.keySet().contains(type) == false) { try { Object o = f.get(Current); if ((o != null) && (state.References.keySet().contains(o) == false)) { if (state.OStack.contains(o) == false) state.OStack.add(state.OStack.size() o); } } catch (IllegalAccessException e) { Log.e(""SOb"" Log.getStackTraceString(e)); } } } } } } writeLong(state.References.size()); for (Object O : ForStack ) { Serializable s = (Serializable) O; // if (s != null) { Class cl = O.getClass(); String name = cl.getName(); writeUTF(name); if (cl.isArray()) { Class components = cl.getComponentType(); ArrayGetAction action; //Array array = (Array) O; if (ArrayPrimatives.keySet().contains(components)) { action = ArrayPrimatives.get(components); } else { action = new ArrayGetAction() { public void get(Object array int index) throws ArrayIndexOutOfBoundsException IOException { Object O = Array.get(array index); if (O==null) writeLong(0); else writeLong(state.References.get(O)); } }; } int length = Array.getLength(O); writeInt(length); for (int I=0; I<length; I++) { action.get(O I); } } else { for (Class Cur = cl; Cur != null; Cur = Cur.getSuperclass()) { Field[] fields = Cur.getDeclaredFields(); for (Field F : fields) { Class FieldType = F.getType(); F.setAccessible(true); if (F.isAccessible() && (Modifier.isStatic(FieldType.getModifiers()))) { FieldGetAction action; //Array array = (Array) O; if (Primatives.keySet().contains(FieldType)) { action = Primatives.get(FieldType); } else { action = new FieldGetAction() { public void get(Object obj Field index) throws IllegalAccessException IOException { Object O = index.get(obj); if (O==null) writeLong(0); else writeLong(state.References.get(O)); } }; } try { action.get(O F); } catch (IllegalAccessException e) { Log.e(""SOb"" Log.getStackTraceString(e)); } } } } } } } } } That's a lot of code with no explanation as to how it answers the question. Could you add a little description of what it's doing? While serializing 2 passes are used. The first adds every unique object to an object list and creates an index for each object. The second pass. serializes a flat view of the object with the index used in place of the value of a field or array value. This way by the time the object list is processed there is a flat mapping of the serialized object and its references without using a recursive writeObject.  You've got some deeply nested ArrayLists. I think maybe it's just going depth first and that means it's going for the bottom Sensor which is too deep. Maybe you could create a custom structure with Sensors starting with the bottom Sensor? Or maybe you'll have to provide your own serialisation to handle it? http://java.sun.com/developer/technicalArticles/Programming/serialization/  Interesting post from Chen: When debugging a stack overflow you want to focus on the repeating recursive part In your case:  at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) If you go hunting through your defect tracking database trying to see whether this is a known issue or not a search for the top functions on the stack is unlikely to find anything interesting. That's because stack overflows tend to happen at a random point in the recursion; each stack overflow looks superficially different from every other one even if they are the same stack overflow. Once you get past the initial turmoil the stack trace settles down into a nice repeating pattern consisting of the same x functions over and over again. Identifying the start of the repeating pattern isn't important because the starting point will be different for each crash in the same way that the precise note which exceeds your singing range varies from crash to crash. Once you've identified the repeating part pick a function from it that is somewhat unusual and search for it in your defect database. For example an default ArrayList serialization. Here your GrahPanel refers a Simulation which refers to Graph with potentially long ArrayList of Sensor and Edge... Java serialization keeps a record of every object written to a stream. If the same object is encountered a second time only a reference to it is written to the stream and not a second copy of the object; so circular references aren't the problem here. But serialization is vulnerable to stack overflow for certain kinds of structures; for example a long linked list with no special writeObject() methods will be serialized by recursively writing each link. If you've got a 100000 links you're going to try to use 100000 stack frames and quite likely fail with a StackOverflowError. It's possible to define a writeObject() method for such a list class that when the first link is serialized simply walks the list and serializes each link iteratively; this will prevent the default recursive mechanism from being used."
487,A,"Swing question / JTree / custom tree model I'm having a problem and hope someone knows what's going wrong and why and is able to give me the explanation of what I'm missing out right now to make that thing work as suggested. I have a JTree which is build upon a custom TreeModel (""WRTreeModel"" see below). The data structure this model shall be used for is build of an root object which contains some fields and furthermore a list which is backed by the ""ArrayListModel"" shown below. The tree looks fine when I build it using the WRTreeModel. I'm able to expand and collapse the nodes which represent the lists and fields contained in the objects. I can expand and collapse these lists and see their contents as well and so on. Now I want to remove a child of one of the lists and - as I already know - do it by removing it from the model calling the remove method of the ArrayListModel. To make the WRTreeModel aware of that remove the first thing is to call its fireIntervalRemoved method is called so far so good. In the WRTreeModels inner class ArrayModelListener the intervalRemoved method prepares the call of fireTreeNodesRemoved which then builds a TreeEvent which is forwarded to all registered TreeModelListeners (and therefore the JTree which registers itself automaticall when it's connected to the model). Now I would expect that the tree reflects the change and updates it's internal and visual representation to show the new state. Unfortunately this doesn't seem to work that way. Something happens. But when I click on the node I just have changed some EventHandler-Exceptions are thrown. Obviously something got really confused. I know it's not easy to answer such a question on the fly but I would really appreciate a fast answer. It would also be of help if someone knew websites explaining the use of custom tree models (not on DefaultMutableTreeNode or any given implementation based class) and how the event handling and updating of the JTree works. With best regards Thomas Arts public class ArrayListModel<E> extends ArrayList<E> implements ListModel { ... public E remove(int index) { fireIntervalRemoved(index index); E removedElement = super.remove(index); return removedElement; } ... } public class WRTreeModel extends LogAndMark implements TreeModel { class ArrayModelListener implements ListDataListener { ... @Override public void intervalRemoved(ListDataEvent e) { int[] indices = new int[e.getIndex1() - e.getIndex0() + 1]; for (int i = e.getIndex0(); i < e.getIndex1(); i++) indices[i - e.getIndex0()] = i; fireTreeNodesRemoved(e.getSource() getPathToRoot(e.getSource()) indices ((ArrayListModel<?>)e.getSource()).subList(e.getIndex0() e.getIndex1()+1).toArray()); } ... } public Object[] getPathToRoot(Object child) { ArrayList<Object> ret = new ArrayList<Object>(); if (child == null) return ret.toArray(); ret.add(root); if (child == root) return ret.toArray(); int childType = 0; if (child instanceof List<?> && ((List) child).get(0) instanceof Einleitungsstelle) { childType = 1; } if (child instanceof Einleitungsstelle) { childType = 2; } if (child instanceof List<?> && ((List) child).get(0) instanceof Messstelle) { childType = 3; } if (child instanceof Messstelle) { childType = 4; } if (child instanceof List<?> && ((List) child).get(0) instanceof Ueberwachungswert) { childType = 5; } if (child instanceof Ueberwachungswert) { childType = 6; } if (child instanceof List<?> && ((List) child).get(0) instanceof Selbstueberwachungswert) { childType = 7; } if (child instanceof Selbstueberwachungswert) { childType = 8; } switch (childType) { // List of ESTs case 1: { ret.add(child); break; } // EST case 2: { List<Einleitungsstelle> listOfEST = ((Wasserrecht) (root)).getListOfEST(); ret.add(listOfEST); ret.add(child); break; } // List of MSTs case 3: { List<Einleitungsstelle> listOfEST = ((Wasserrecht) (root)).getListOfEST(); ret.add(listOfEST); // Find the EST containing the List of MSTs the child referes to for (Einleitungsstelle einleitungsstelle : listOfEST) { if (child == einleitungsstelle.getListOfMST()) { ret.add(einleitungsstelle); break; } } ret.add(child); break; } // MST case 4: { List<Einleitungsstelle> listOfEST = ((Wasserrecht) (root)).getListOfEST(); ret.add(listOfEST); // Find the EST containing the List of MSTs the child referes to for (Einleitungsstelle einleitungsstelle : listOfEST) { if (child == einleitungsstelle.getListOfMST()) { ret.add(einleitungsstelle.getListOfMST()); break; } } ret.add(child); break; } // List of UEWs case 5: { List<Einleitungsstelle> listOfEST = ((Wasserrecht) (root)).getListOfEST(); ret.add(listOfEST); // Find the EST containing the List of MSTs the child referes to for (Einleitungsstelle einleitungsstelle : listOfEST) { ArrayListModel<Messstelle> listOfMST = einleitungsstelle.getListOfMST(); if (child == listOfMST) { ret.add(listOfMST); for (Messstelle messstelle : listOfMST) { if (child == messstelle.getListOfUEW()) { ret.add(messstelle.getListOfUEW()); break; } } break; } } break; } // UEW case 6: { List<Einleitungsstelle> listOfEST = ((Wasserrecht) (root)).getListOfEST(); ret.add(listOfEST); // Find the EST containing the List of MSTs the child referes to for (Einleitungsstelle einleitungsstelle : listOfEST) { ArrayListModel<Messstelle> listOfMST = einleitungsstelle.getListOfMST(); if (child == listOfMST) { ret.add(listOfMST); for (Messstelle messstelle : listOfMST) { if (child == messstelle.getListOfUEW()) { ret.add(messstelle.getListOfUEW()); break; } } break; } } ret.add(child); break; } // List of SUEWs case 7: { List<Einleitungsstelle> listOfEST = ((Wasserrecht) (root)).getListOfEST(); ret.add(listOfEST); // Find the EST containing the List of MSTs the child referes to for (Einleitungsstelle einleitungsstelle : listOfEST) { ArrayListModel<Messstelle> listOfMST = einleitungsstelle.getListOfMST(); if (child == listOfMST) { ret.add(listOfMST); for (Messstelle messstelle : listOfMST) { if (child == messstelle.getListOfSUEW()) { ret.add(messstelle.getListOfSUEW()); break; } } break; } } break; } // SUEW case 8: { List<Einleitungsstelle> listOfEST = ((Wasserrecht) (root)).getListOfEST(); ret.add(listOfEST); // Find the EST containing the List of MSTs the child referes to for (Einleitungsstelle einleitungsstelle : listOfEST) { ArrayListModel<Messstelle> listOfMST = einleitungsstelle.getListOfMST(); if (child == listOfMST) { ret.add(listOfMST); for (Messstelle messstelle : listOfMST) { if (child == messstelle.getListOfSUEW()) { ret.add(messstelle.getListOfSUEW()); break; } } break; } } ret.add(child); break; } default: ret = null; } return ret.toArray(); } } ... protected void fireTreeNodesRemoved(Object changed Object path[] int childIndecies[] Object children[]) { TreeModelEvent event = new TreeModelEvent(this path childIndecies children); synchronized (listeners) { for (Enumeration e = listeners.elements(); e.hasMoreElements();) { TreeModelListener tml = (TreeModelListener) e.nextElement(); tml.treeNodesRemoved(event); } } } ... } Don't know if it's of further help but when I try to collapse and then expand the parent node of the removed node I get the following exception: Exception in thread ""AWT-EventQueue-0"" java.lang.NullPointerException at javax.swing.plaf.basic.BasicTreeUI.ensureRowsAreVisible(BasicTreeUI.java:1881) at javax.swing.plaf.basic.BasicTreeUI.toggleExpandState(BasicTreeUI.java:2208) at javax.swing.plaf.basic.BasicTreeUI.handleExpandControlClick(BasicTreeUI.java:2191) at javax.swing.plaf.basic.BasicTreeUI.checkForClickInExpandControl(BasicTreeUI.java:2149) at ... and so on All problems are urgent by definition :-) I would not mention ""time pressure"" in a question. And your question is meant to stay and help others when you have long forgotten about it. Makes it more canonical. The method name is fireIntervalRemoved so try calling it after removing: public E remove(int index) { E removedElement = super.remove(index); fireIntervalRemoved(index index); return removedElement; } It's the way I've done and always worked (maybe added some checking). (sorry if I missed something did'nt get time to analise/test your code...) Don't I need to know the removed element for building my TreeEvent? If I call fireIntervalRemoved(indexindex) after removing the element then I can't get it anymore. That's why I moved the call up before the real remove from the list. not sure haven't checked all the code and can't find `fireIntervalRemoved`. The TreeModelEvent does not need the element as I know... I think if you fire the event and the GUI get's updated (fast enough) before you remove the element the tree will NOT reflect the remove (since it has not yet happened). Maybe you may construct the event before removing the element and fire the event after removing... ((*Gruss aus Stuttgart*))  Looks like you have an off-by-one bug in intervalRemoved. You aren't initializing the last value in indices array. It will autoinitialized to 0. @Override public void intervalRemoved(ListDataEvent e) { int[] indices = new int[e.getIndex1() - e.getIndex0() + 1]; for (int i = e.getIndex0(); i < e.getIndex1(); i++) indices[i - e.getIndex0()] = i; fireTreeNodesRemoved(e.getSource() getPathToRoot(e.getSource()) indices ((ArrayListModel<?>)e.getSource()).subList(e.getIndex0() e.getIndex1()+1).toArray()); } Try instead ""i <= e.getIndex1()"": for (int i = e.getIndex0(); i <= e.getIndex1(); i++) { indices[i - e.getIndex0()] = i; } You're absolutely right with that. Same is stated in the at the method description. I fixed that though it had no influence on my problem since the list element I try to remove is the first and therefore index 0 is fine.  Because we're in a hurry I haven't looked at your code yet. Your description sounds as if you're doing everything correctly and have thought of what's needed. My guess at something you may not have considered: Is this tree model change happening in the Event Dispatch Thread (alias Swing worker thread)? If the change comes from another thread then chances are it won't be properly processed. Just a stab in the dark of course. I think it is happening in the right thread. When I debug having a breakpoint in the fireTreeNodesRemoved method it halts in in the AWT-EventQueue thread. which seems to be right. You're right. See above answer which suggested to that too and in fact it works like a charm :-) Excellent! I'm sorry I was in a hurry too (had to bail for a meeting) and didn't have a chance to recommend the fix.  You need to perform the node delete and the subsequent TreeModelListener.treeNodesRemoved event firing on the Event Dispatch Thread. To do this use: SwingUtilities.invokeLater( new Runnable() { public void run() { //Delete and event firing logic goes here. ... } } ); Doing this prevents Swing using the EDT to update the tree in the middle of your delete and the event firing tells the JTree control (which has added listeners) that the model has changed. @Carl: thanks :-) That and in addition a Tree.updateUI() with a following expandToPath(path) with the path to the removed elements parent does exactly the job I wanted. Thanks a lot for that hint! BTW: Seems using SwingUtilities.invokeLater is so common that no one ever thinks others forget to put their event and UI stuff inside. +1 for fleshing my idea out."
488,A,"Is there a JToolBar replacement that offers more functionality? I'm creating a simple Swing application then I realized that JToolBar doesn't provide much functionality. For example I want to add multiple dragable toolbars onto one JFrame but but I can only have one floatable JToolBar per JFrame if I use JToolbar. I know that NetBeans is built with Swing and the toolbars on NetBeans have more functionality then JToolBars. I haven't spent my time to take a peak at NetBeans source yet but I""m wondering whether there's any other existing replacement for JToolBar out int the world. JIDE have a component called CommandBar part of their Action set. I'm not sure if it meets your needs but (like all JIDE's stuff) it's worth checking out. http://www.jidesoft.com/products/action.htm  I believe that a JToolBar can contain some other JToolBar components. You could have a panel at the north side which would contain couple of JToolBars too. Another solution would be to implement your own component or look for commercial alternatives(or dual licensed GPL/Commercial).  You could try Kirill's Flamingo (Swing version of Microsoft's Ribbon style toolbar): Project: https://flamingo.dev.java.net/"
489,A,"How to add icon near arrow icon for JComboBox I would like to create JComboBox control similar with the URL textbox of Firefox. Does anyone know how to customize the textfield of the JComboBox. I want to add some icons on the ALIGN.HORIZONTAL_RIGHT near the arrow button of the JComboBox Thanks for your very detail explanation. Actually i will combine DefaultListCellRenderer and add the icon to the combo box like following code import java.awt.Dimension; import java.awt.Insets; import javax.swing.JButton; import javax.swing.JComboBox; import javax.swing.JFrame; import javax.swing.SwingUtilities; public class Main extends JFrame { public Main() { // Create icon ""C"" JButton jb = new JButton(""C""); jb.setMargin(new Insets(0 0 0 0)); jb.setBounds(245 2 18 18); // Create combo box String[] languages = new String[]{""Java"" ""C#"" ""PHP""}; JComboBox jc = new JComboBox(languages); // jc.setEditable(true); jc.add(jb); getContentPane().add(jc); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setSize(new Dimension(300 58)); } /** * @param args the command line arguments */ public static void main(String[] args) { final Main main = new Main(); SwingUtilities.invokeLater(new Runnable() { public void run() { main.setVisible(true); } }); } } But when i put jc.setEditable(true); the combo editor hided my icon. I'm thinking another way to simulate Firefox awesome bar. Do you have any idea for this? To change how a component renders you generally work with what are called Renderers. For combobox look at how to create a custom combobox renderer. Just a quick glance but for your case a simple configuration of DefaultListCellRenderer may be enough since you can set the JLabel properties to position the text to the image. If not just extend from it. Remember also that you have to set a model that includes the icon so that the combobox renderer can get it - might want to do a custom ComboBoxModel too depending on your data object. it seems that @minh wants an editable combo box. the renderer will only solve the common case of displaying the uneditable list data. the problem still exists for the text editor. that is where my custom editor suggestion is coming from. Ah right I missed that. Minh in the Sun's tutorial link I provided just one section above it explains about editable comboboxes. Doing setEditable(true) just might also achieve what you want if you want it to be simply editable. Hi aberrant80 Thanks for your quick answer. I checked out the DefaultListCellRenderer that will help me to customize the list item like Firefox. But the other one to add the icon in the JComboBox textbox i will use custom painting to draw an icon that should be on the right of the control. http://java.sun.com/docs/books/tutorial/uiswing/painting/index.html Thanks Minh @minh for the text box you should see what you can do by creating a custom editor. there is some mention in the tutorial @aberrant80 posted. DefaultListCellRenderer is essentially a JLabel. JLabel supports an icon in addition to the normal text. My guess is that it should simply retrieving the renderer and then setting the appropriate icon-to-text positioning/alignment andit might work.  Here is completed example that demonstrate it: package com.demo.combo.icon; import java.awt.BorderLayout; import java.awt.Component; import java.awt.Dimension; import java.awt.event.WindowAdapter; import java.awt.event.WindowEvent; import java.util.HashMap; import java.util.Map; import javax.swing.DefaultListCellRenderer; import javax.swing.Icon; import javax.swing.ImageIcon; import javax.swing.JComboBox; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JList; import javax.swing.JPanel; import javax.swing.UIManager; import javax.swing.UnsupportedLookAndFeelException; public class ShowConboWithIcons extends JFrame { private static final long serialVersionUID = 1L; private static final ImageIcon INFO_ICON = new ImageIcon(""info.png""); private static final ImageIcon NONE_ICON = new ImageIcon(""none.png""); public final String NONE_STR = ""None""; private final String INFO_STR = ""Info""; private JComboBox comboBox; private JPanel topPanel; private String[] str_arr = null; public ShowConboWithIcons(String[] str_arr) { this.str_arr = str_arr; } public void createGUI(){ setMinimumSize(new Dimension(100100)); setTitle(""Demo""); setLocation(200 200); topPanel = new JPanel(); getContentPane().add(topPanel BorderLayout.CENTER); Map<Object Icon> icons = new HashMap<Object Icon>(); icons.put(NONE_STR NONE_ICON); icons.put(INFO_STR INFO_ICON); comboBox = new JComboBox(); comboBox.setRenderer(new IconListRenderer(icons)); comboBox.addItem(""None""); for(String val : str_arr){ comboBox.addItem(val); } topPanel.add(comboBox); super.addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent e) { dispose(); } }); } public static void main(String[] args) throws ClassNotFoundException InstantiationException IllegalAccessException UnsupportedLookAndFeelException { UIManager.setLookAndFeel( ""com.sun.java.swing.plaf.windows.WindowsLookAndFeel"" ); String[] str_arr = {""A"" ""B"" ""C"" ""D"" ""E""}; ShowConboWithIcons T = new ShowConboWithIcons(str_arr); T.createGUI(); T.setVisible(true); } class IconListRenderer extends DefaultListCellRenderer{ private static final long serialVersionUID = 1L; private Map<Object Icon> icons = null; public IconListRenderer(Map<Object Icon> icons){ this.icons = icons; } @Override public Component getListCellRendererComponent(JList list Object value int indexboolean isSelected boolean cellHasFocus) { JLabel label = (JLabel) super.getListCellRendererComponent(list value index isSelected cellHasFocus); // Get icon to use for the list item value Icon icon = icons.get(value); if(!value.toString().equals(NONE_STR)){ icon = icons.get(INFO_STR); } // Set icon to display for value label.setIcon(icon); return label; } } } Preview:"
490,A,"resize problem with JList? i am having resizing problem with JList ... Below is my code ...my requirement is to add a JList with some fixed size into a Panel and when i maximize/minimize the Frame the JList should increase/decrease accordingly .please help me ..how to achieve this? Following is the design: Hi Carl  It works in simple cases but not in the above case. So i am explaning the above code now .. i have a frame called ""TestListControl"" with GB layout. Add selectDevicesPanel with GB layout. In selectDevicesPanel : Add selectNamesInnerPanel with GB layout In selectNamesInnerPanel : Add selectNameAddPanel with GB layout Add selectTeamPanel with Flow layout In selectNameAddPanel: chooseDeviceScrollPane clickToAddDeletePanel selectedNameScrollPane In selectTeamPanel : selectTeamLabel selectTeamComboBox public class TestListControl extends javax.swing.JFrame { public TestListControl() { initComponents(); } private void initComponents() { java.awt.GridBagConstraints gridBagConstraints; selectDevicesPanel = new javax.swing.JPanel(); selectNamesInnerPanel = new javax.swing.JPanel(); selectNameAddPanel = new javax.swing.JPanel(); chooseDeviceScrollPane = new javax.swing.JScrollPane(); chooseNamesList = new javax.swing.JList(); clickToAddDeletePanel = new javax.swing.JPanel(); clickToAddButton = new javax.swing.JButton(); clickToRemoveButton = new javax.swing.JButton(); selectedNameScrollPane = new javax.swing.JScrollPane(); selectedNamesList = new javax.swing.JList(); selectNameLabel = new javax.swing.JLabel(); selectTeamPanel = new javax.swing.JPanel(); selectTeamLabel = new javax.swing.JLabel(); selectTeamComboBox = new javax.swing.JComboBox(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); selectDevicesPanel.setBorder(javax.swing.BorderFactory .createTitledBorder(""Member Selection"")); selectDevicesPanel.setLayout(new java.awt.GridBagLayout()); selectNamesInnerPanel.setLayout(new java.awt.GridBagLayout()); selectNameAddPanel.setLayout(new java.awt.GridBagLayout()); chooseNamesList.setModel(new javax.swing.AbstractListModel() { String[] strings = { ""XXXX"" ""YYYY"" ""ZZZZ"" }; public int getSize() { return strings.length; } public Object getElementAt(int i) { return strings[i]; } }); chooseNamesList.setMaximumSize(new java.awt.Dimension(46 88)); chooseNamesList.setMinimumSize(new java.awt.Dimension(94 98)); chooseDeviceScrollPane.setViewportView(chooseNamesList); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.gridx = 0; gridBagConstraints.gridy = 2; gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH; gridBagConstraints.weightx = 1.0; gridBagConstraints.weighty = 1.0; gridBagConstraints.insets = new java.awt.Insets(0 12 7 0); selectNameAddPanel.add(chooseDeviceScrollPane gridBagConstraints); clickToAddDeletePanel.setLayout(new java.awt.GridBagLayout()); clickToAddButton.setText("">>""); clickToAddDeletePanel.add(clickToAddButton new java.awt.GridBagConstraints()); clickToRemoveButton.setText(""<<""); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.gridx = 0; gridBagConstraints.gridy = 2; clickToAddDeletePanel.add(clickToRemoveButton gridBagConstraints); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.gridx = 1; gridBagConstraints.gridy = 2; gridBagConstraints.insets = new java.awt.Insets(0 5 0 5); selectNameAddPanel.add(clickToAddDeletePanel gridBagConstraints); selectedNamesList.setModel(new javax.swing.AbstractListModel() { String[] strings = { ""XXXX"" ""YYYY"" }; public int getSize() { return strings.length; } public Object getElementAt(int i) { return strings[i]; } }); selectedNamesList.setMinimumSize(new java.awt.Dimension(94 98)); selectedNameScrollPane.setViewportView(selectedNamesList); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.gridx = 2; gridBagConstraints.gridy = 2; gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH; gridBagConstraints.weightx = 1.0; gridBagConstraints.weighty = 1.0; gridBagConstraints.insets = new java.awt.Insets(0 0 6 0); selectNameAddPanel.add(selectedNameScrollPane gridBagConstraints); selectNameLabel.setText(""Select Name""); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.gridx = 0; gridBagConstraints.gridy = 1; gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST; gridBagConstraints.insets = new java.awt.Insets(0 0 8 0); selectNameAddPanel.add(selectNameLabel gridBagConstraints); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.gridx = 0; gridBagConstraints.gridy = 2; gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL; gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST; gridBagConstraints.weightx = 1.0; gridBagConstraints.weighty = 1.0; selectNamesInnerPanel.add(selectNameAddPanel gridBagConstraints); selectTeamLabel.setText(""Select Team""); selectTeamPanel.add(selectTeamLabel); selectTeamComboBox.setModel(new javax.swing.DefaultComboBoxModel( new String[] { ""TEAM X"" ""TEAM Y"" ""TEAM Z"" })); selectTeamComboBox .addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { selectTeamComboBoxActionPerformed(evt); } }); selectTeamPanel.add(selectTeamComboBox); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST; selectNamesInnerPanel.add(selectTeamPanel gridBagConstraints); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST; selectDevicesPanel.add(selectNamesInnerPanel gridBagConstraints); org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout( getContentPane()); getContentPane().setLayout(layout); layout.setHorizontalGroup(layout.createParallelGroup( org.jdesktop.layout.GroupLayout.LEADING).add(0 400 Short.MAX_VALUE).add( layout.createParallelGroup( org.jdesktop.layout.GroupLayout.LEADING).add( layout.createSequentialGroup().add(0 107 Short.MAX_VALUE).add(selectDevicesPanel org.jdesktop.layout.GroupLayout.PREFERRED_SIZE 185 org.jdesktop.layout.GroupLayout.PREFERRED_SIZE) .add(0 108 Short.MAX_VALUE)))); layout.setVerticalGroup(layout.createParallelGroup( org.jdesktop.layout.GroupLayout.LEADING).add(0 300 Short.MAX_VALUE).add( layout.createParallelGroup( org.jdesktop.layout.GroupLayout.LEADING).add( layout.createSequentialGroup().add(0 39 Short.MAX_VALUE).add(selectDevicesPanel org.jdesktop.layout.GroupLayout.PREFERRED_SIZE 221 org.jdesktop.layout.GroupLayout.PREFERRED_SIZE) .add(0 40 Short.MAX_VALUE)))); pack(); } private void selectTeamComboBoxActionPerformed( java.awt.event.ActionEvent evt) { // TODO add your handling code here: } public static void main(String args[]) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new TestListControl().setVisible(true); } }); } private javax.swing.JScrollPane chooseDeviceScrollPane; private javax.swing.JList chooseNamesList; private javax.swing.JButton clickToAddButton; private javax.swing.JPanel clickToAddDeletePanel; private javax.swing.JButton clickToRemoveButton; private javax.swing.JPanel selectDevicesPanel; private javax.swing.JPanel selectNameAddPanel; private javax.swing.JLabel selectNameLabel; private javax.swing.JPanel selectNamesInnerPanel; private javax.swing.JComboBox selectTeamComboBox; private javax.swing.JLabel selectTeamLabel; private javax.swing.JPanel selectTeamPanel; private javax.swing.JScrollPane selectedNameScrollPane; private javax.swing.JList selectedNamesList; } Which list? chooseNamesList or selectedNamesList? both the list box should be maximized/minimized when i maxi/minimize the frame This GroupLayout thing doesn't make it easy to reproduce your problem. It would be considerate to reduce your test program to the small handful of components actually needed to look at the problem. Why don't you read anwers in your other postings first. Maybe you will learn something there that you can apply here Hi camickr ..in the previous post also i didn't get the correct clue ..still that's pending things . i stuck with both the issues ..Camickr help me .. But i accept both the issues are somewhat related ... please anyone have solution for the above problem .. If you set a prototype cell value the JList will not resize when the data is changed. See The JList Javadoc page for the setPrototypeCellValue(Object) method.  Your list won't get much bigger if you do this: chooseNamesList.setMaximumSize(new java.awt.Dimension(46 88)); i set chooseNamesList.setMaximumSize(new java.awt.Dimension(146 188)); .but still i am getting this issue Hi Carl .. do u have the solution for this problem? As I mentioned I had a problem duplicating your program thanks to the exotic GroupLayout classes. As it is I'm happy you managed to find a solution on your own.  guys i solved this problem myself .. thnks for ur co-ordination ..actually i did the mistake of giving weightx and weighty to the parent panel which is holding the both the Jlist and for the JEditor pane ... briefly we need to set weight parameters for all the parent containers which contains any component which you want to resize.. Care to say how ? Gnoupi .see above briefly we need to set weight parameters for all the parent containers which contains any component which you want to resize...... Which was exactly the suggeston I gave you 4 hours before you apparently solved the problem on your own."
491,A,"Swing UI not updating after using invokeLater I have a Java Swing UI that isn't updating/repainting as I thought it should. The app sends an XMPP message and receives a response on a different thread. That response is processed and the UI is updated to reflect information contained in the message. When the response is received I update a JPanel component using javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { /* execute logic to update panel */ } }); It's been quite sometime since I've developed in Java but based on my research online invokeLater queues the runnable up for execution on the GUI thread. However my GUI doesn't update until I do something else in the app that causes a repaint - such as resizing the window. What am I missing? After the logic for updating the panel I've tried various combinations of invalidate() and repaint() but the result is still the same - the GUI does not update until I say resize the window. EDIT: When I say updating the panel I am specifically doing a removeAll() and then adding a handful of JLabels. If you mean by ""update the panel"" that you are adding or removing components then you better use invalidate() or revalidate() so that the layout manager catches the changes. See here for a similar problem.  After adding/removing components from a panel you should use: panel.revalidate(); // this works 99% of the time panel.repaint(); // sometimes needed. Other stuff like validate() invalidate() etc. is left over from AWT days I believe and revalidate() does a better job and was added specifically for Swing.  If you are adding or removing components from a panel during the GUI event handling (such as action listeners) calling doLayout() should hopefully fix your problem. I've found when the GUI doesn't update calling validate() doLayout() and repaint() tends to fix things. Thanks thanks thanks! If it wasn't for this answer I would now be reading my custom layout manager's code line by line!! @Stroboskop I was just calling revalidate() and repaint() from my ActionListener but the container only got updated when I resized the window even when I spammed revalidate() and repaint() calls to every possible container of that container... From now on when I encounter problems like this I'm going to call invalidate()doLayout()validate()revalidate()repaint() in that order. Right. Since all this happens in the EventQueue there's a good chance that the revalidate flag will not be looked at until you're done. But i would have guessed a call to repaint() would trigger both painting and layout later on... actually you are not supposed to call doLayout() directly and should call revalidate() instead. @Stroboskop though you're not supposed to the documentation says ""This is usually called when the component is validated."" and my experiences suggest that when adding and removing components from a container during event handling this method isn't called by revalidate()."
492,A,"Swing: How could I get JInternalFrame treated equally to other components inside a container? Background information: I am implementing a visual diagram editor which consists of different complex elements (re-sizable with title bar sub-elements) and different simple elements (not re-sizable no title bar no sub-elements). All elements are draggable. I am using JInternalFrame (for complex elements) along with JPanel (for simple elements) to represent elements of a schematic diagram. There is a container (either a JDesktopPane or a JLayeredPane) which contain all these elements. I have several problems with this concept: Case 1 - The container is a JDesktopPane: JInternalFrames are always above other elements. Clicking other elements don't ""deactivate"" previously active JInternalFrame Case 2 - The container is a JLayeredPane: After clicking some elements inside a JInternalFrame it stays ""activated"" forever. Case 3 - JInternalFrame used for everything but without decoration for simple elements: My custom border (which is needed when I manually remove JInternalFrame's title bar) is every time replaced by current LAF border after activating/deactivating the JInternalFrame. I don't get the whole concepts behind activating JInternalFrames anyway. If I could make a JInternalFrame not activable at all I could choose Case 2 any would be happy. Please advice me what would be an simple and straightforward solution to given problems. NOTE: Selection of components and activation of JInternalFrame seem to be different things. give this a try when you initialize your JInternalFrame=  new JInternalFrame(<your args>) { protected void fireInternalFrameEvent(int id){ if (id != InternalFrameEvent.INTERNAL_FRAME_ACTIVATED) { super.fireInternalFrameEvent(id); } } }; note that looking at the code in JInternalFrame.setSelected(boolean) setSelected and 'actvation' are tied together in process in that setSelected fires not only property changes for Selection but also calls fireInternalFrameEvent(InternalFrameEvent.INTERNAL_FRAME_ACTIVATED) as well.  I might misunderstand your problem. Have you tried to look at the setSelected() method of JIF? It seems there are support for method override and vetoable activation events. Edit: Maybe we have some terminological misunderstanding as the javadoc states: /** * Selects or deselects the internal frame * if it's showing. * A <code>JInternalFrame</code> normally draws its title bar * differently if it is * the selected frame which indicates to the user that this * internal frame has the focus. * When this method changes the state of the internal frame * from deselected to selected it fires an * <code>InternalFrameEvent.INTERNAL_FRAME_ACTIVATED</code> event. * If the change is from selected to deselected * an <code>InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED</code> event * is fired. * * @param selected a boolean where <code>true</code> means this internal frame * should become selected (currently active) * and <code>false</code> means it should become deselected * @exception PropertyVetoException when the attempt to set the * property is vetoed by the <code>JInternalFrame</code> * * @see #isShowing * @see InternalFrameEvent#INTERNAL_FRAME_ACTIVATED * @see InternalFrameEvent#INTERNAL_FRAME_DEACTIVATED * * @beaninfo * constrained: true * bound: true * description: Indicates whether this internal frame is currently * the active frame. */ Edit 2: Now I re-read your 2nd case. I would say each JIF has its own separated focus/selection environment. You could create a method which traverses all your JIFs and deselects anything in it unless its the component you wanted to be selected. Yes but it doesn't help. Selection doesn't have to do with JInternalFrame's activation. You see even in the Javadoc it is confusing. They talk about selecting but the property is named ""activated"". Note: there is also a property ""selected"" (which does not apply to my problem). Hmmm I'm confused... I don't get it. Now I've added InternalFrameListener and FocusListener to all JIFs but non of these listeners receive any events! Beats me. Try out some breakpoints and watch. InternalFrameListener works now my mistake. But I think I'll make the whole thing somehow different. But thank you anyway!"
493,A,Swing: Passing a value back to the UI from a scheduled thread I have a system tray UI in Java that requires a schedule database poll. What is the best method for spawning a new thread and notifying the UI? I'm new to Swing and it's threading model. SwingWorker is the exact thing designed to do this. It allows you to run a task that won't block the GUI and then return a value and update the GUI when it is done. Java has a great tutorial on how to use SwingWorker. Basically do the database pull in the doInBackground() method. And in the done() method update your GUI.  As jjnguy mentioned SwingWorker helps abstract away the complexity here but basically you do the work in a new thread and when the method comes back you need to update the GUI in the swing thread. If you aren't using SwingWorker the underlying method is SwingUtilities (or EventQueue) .invokeLater(Runnable). Do not update anything Swing related (including models) outside of the swing queue unpredictable things will happen. And don't attempt to hold a reference to the queue and use that as queues are suspended and replaced (if for example you open a model dialog box).  As jinguy mentioned SwingWorker should be the first place you look at. Wikipedia of all places has some interesting examples that may be good to look at before you tackle the JavaDocs. I never know that Wikipedia had such a great article on `SwingWorker`. I'd upvote you but I don't wanna lose my place on top of the sort order...(sorry) There ya go. `+1`! Grr but if you keep getting upvotes I'm never going to pass you in the 'Questions tagged Java' `:P`
494,A,How do I add components to a JPanel at runtime Hej I have a JPanel that I want to add some components. in particular JButtons to at runtime based on the content of a user supplied file. I can add compontents to panel if I call it from the constructor of the JFrame derived form class even after everything else have been constructed but If I read the file first and then add components to the panel the call succeds but the added components are never shown. Does anybody know how I force Java to do as I want? Call the method validate() on the JPanel after you have added the JButtons to it. I believe revalidate() should be used for Swing although 99% of the time either will work. revalidate is used to cause all the parents of the component on which it is called to layout their children. For simple use like this one validate will work just fine.
495,A,Change displayable labels for a JSlider? I have a JSlider with a min of 0 and a max of 10000. I have the major tick marks set at 1000. If I were to paint the labels now they would show up as 0 1000 2000 3000 4000 etc. What I would like to be shown would be 0 1 2 3 4 5 etc. What would be a good way to accomplish this task? using JSlider.setLabelTable(Dictionary) EDIT Alternatively you can rely on predefined label UI and just change the label text:  Enumeration e = jSlider.getLabelTable().keys(); while (e.hasMoreElements()) { Integer i = (Integer) e.nextElement(); JLabel label = (JLabel) jSlider.getLabelTable().get(i); label.setText(String.valueOf(i / 1000)); }  You could use JSlider.setLabelTable(Dictionary) to set specific labels for the values you wish to render differently; e.g. JSlider slider = ... Dictionary dict = new Hashtable(); for (int i=0; i<=10000; i += 1000) { dict.put(i new JLabel(Integer.toString(i / 1000))); } slider.setLabelTable(dict); (Edited based on previous comments.) Dictionary is an abstract class so you might want to use Hashtable instead. You also need to get the number 10 in there. your for loop doesnt allow for that. Dictionary is abstract and cannot be instantied Both good points! - I'll edit my code. rebuilding the label from scratch maybe a bad idea (using Java6 on windows the labels are broken) How are they broken? I'm using Alloy L&F on Windows and JLabels seem ok. What would be the alternative to rebuilding the JLabel from scratch? check my answer (I'm on windows 7 with jdk 1.6u14)
496,A,"How do I create a right click context menu in Java Swing? I'm working on a school project and we want to implement a right click pop-up menu in the gui. Currently we are doing something like creating a JMenu on right click and setting its location to that of the mouse's position... This seems really ugly and is very buggy is there any better way of doing this? I'm sure there must be. There's a section on Bringing Up a Popup Menu in the How to Use Menus article of The Java Tutorials which explains how to use the JPopupMenu class. The example code in the tutorial shows how to add MouseListeners to the components which should display a pop-up menu and displays the menu accordingly. (The method you describe is fairly similar to the way the tutorial presents the way to show a pop-up menu on a component.)  This question is a bit old - as are the answers (and the tutorial as well) The current api for setting a popupMenu in Swing is myComponent.setComponentPopupMenu(myPopupMenu); This way it will be shown automagically both for mouse and keyboard triggers (the latter depends on LAF). Plus it supports re-using the same popup across a container's children. To enable that feature: myChild.setInheritsPopupMenu(true); can you please provide a tutorial with the updated api? @user681159 don't know any - and it's not needed IMO simply read the api doc :-) an answer better than the accepted one IMO - and a lean/mean one that is. @downvoter - care to explain? How would you use this with a `JTable` so it pops on the selected row or on the row where you right click? Or in this scenario the old method is the one to be chosen? @Burfee either that or enhance JTable via subclassing: override getPopupLocation(..) and store the location for later usage [see a recent QA](http://stackoverflow.com/a/17316876/203657) which is implemented in all SwingX collection components  You are probably manually calling setVisible(true) on the menu. That can cause some nasty buggy behavior in the menu. The show(Component int x int x) method handles all of the things you need to happen (Highlighting things on mouseover and closing the popup when necessary) where using setVisible(true) just shows the menu without adding any additional behavior. To make a right click popup menu simply create a JPopupMenu. class PopUpDemo extends JPopupMenu { JMenuItem anItem; public PopUpDemo(){ anItem = new JMenuItem(""Click Me!""); add(anItem); } } Then all you need to do is add a custom MouseListener to the components you would like the menu to popup for. class PopClickListener extends MouseAdapter { public void mousePressed(MouseEvent e){ if (e.isPopupTrigger()) doPop(e); } public void mouseReleased(MouseEvent e){ if (e.isPopupTrigger()) doPop(e); } private void doPop(MouseEvent e){ PopUpDemo menu = new PopUpDemo(); menu.show(e.getComponent() e.getX() e.getY()); } } // Then on your component(s) component.addMouseListener(new PopClickListener()); Of course the tutorials have a slightly more in-depth explanation. Note: If you notice that the popup menu is appearing way off from where the user clicked try using the e.getXOnScreen() and e.getYOnScreen() methods for the x and y coordinates. After using the above code I get the error saying that ""The method addMouseListener(MouseListener) in the type Figure is not applicable for the arguments (PopClickListener)"" Regards Vinay @user1035905 Did you make sure that the `PopClickListener` extends `MouseAdapter`? Thanks 4all... the logic is quite nice! :D How do you get it to work with the context menu key on the keyboard? the only case in which this solution is better than kleopatra's is when you need some custom logic to happen (e.g. different popup menus under different conditions); still you have to add keyboard listener to work with context menu key @PavelRyzhov not on the JPopupMenu class. http://docs.oracle.com/javase/7/docs/api/javax/swing/JPopupMenu.html#show(java.awt.Component int int) `show` method is depricated since JDK version 1.1 :( yep that's right"
497,A,"Why is JFormattedTextField evil? In this question Is there any way to accept only numeric values in a JTextField? one of the answers suggested that JFormattedTextField had issues. I've not yet used it but could somebody please expand (or disagree) on the issues with this class? I'm struggling with JFormattetTextField for the moment. I'm trying to use NumberFormat.getPercentInstance() for formatting my percent-value. The worst thing is that .getValue() doesn't return the same value as the user is seeing. In example if I type 255% in the formatted textfield then it rounds it to 26% but .getValue() returns 0.255. That is Evil. Related question: http://stackoverflow.com/questions/2206371/how-to-get-the-same-value-as-the-user-is-seeing-from-a-jformattedtextfield  JFormattedTextField is evil because of poor usability. For instance if a text field should only be able to accept an integer value JFormattedTextField will allow any old rubbish and then complain when focus is lost. To make matters worse it has a range of configurable behaviours when focus is lost (a clear sign that none of them is the correct choice). It also has ""k3wl"" formatter selection. It also seems to have poor interaction with the document (it tries to install a DocumentFilter but that is not part of the Document interface).  I'll admit JFormattedTextField is not the easiest class to use and yes it does have issues but like most components it does a reasonable job at some things and a bad job at others. It does in fact allow you to edit for Integer values as the data is typed when you use a MaskFormatter. So for simple tasks it can be effective. Editing of data is a complex task. Sometimes you need to edit the data as it is entered (in the case of checking for Integer values). Sometimes you need to edit the data after it is entered (in the case of validating a date). Then of course you need to decide how to handle invalid data. There can be a certain amount of configuring the parameters when doing non-trivial tasks. They may not always work the way you want them to or the way you expect them to so you do need to experiment to find out when you can/should use this component. The main problem with JFormattedTextField is that it is optimised for a rare use case instead of a common one while a component for the common task is missing. AWT is bad enough but Swing again has been designed by people who had no clue about the state of the art in GUI programming and making the same mistakes twice it really bad! If the designers of Java and Swing had just looked at what Delphi or NeXt's Interface Builder were able to do since early in the 1990's and how they did it both the language and Swing would be much easier to use!"
498,A,"How to build a Google-chrome tabs and menubar interface in Java Swing? Does someone know an open source project or code snippets which demonstrate how to create a google-chrome like interface with similar tabs and toolbar in Swing? I know that I can use JTabbedPane but I'm thinking of an interface which looks and feels very similar to the google chrome ""tabbed browsing"". Sounds like a neat project! Look at this question (and its answers) too: JTabbedPane: Components before and after the tabs themselves.  I think you should opt to Substance LAF and make a Chrome-lookalike skin for it (Substance is a skinnable LAF which sort of extends Swing's functionality on the graphical side) and use that won't be the easiest way to do it but if you have the time and willpower you'll get exactly what you want.  I have just created my own open-source library for this called Jhrome. Check it out! It's available on github: https://github.com/jedwards1211/Jhrome Documentation is sparse right now but it's pretty solid except for AWT/Swing memory leaks I haven't figured out yet. If enough people are interested in it I'll polish it up.  You can probably pull it off with an undecorated JFrame (setUndecorated(true)) to get rid of the title bar. You'd then create a layout with a tabbed pane filling the window and then overlay the min/max/close buttons on the top right. If tabbed pane is too inflexible you will need to put a button bar across the top with toggle buttons controlling multiple content panels and do the tab look yourself; as each button becomes active it hides the current panel and unhides the panel that belongs to it."
499,A,"Replicate Eclipse's ""display tab"" in my Java/Swing application? So I've got a Swing GUI that for testing purposes (the other applications that my task will interact with aren't all developed yet) I'd like to be able to give a ""debug console"" to. The idea being that I could use this console to explicitly set values in my model and verify that the appropriate GUI elements get updated. The Eclipse debugger's ""display tab"" is basically exactly what I want - once you hit a breakpoint you can type in Java code that's applicable to the current method's context and execute it as if that code was part of the source at the current breakpoint. But I want this as part of my application - without having to run a separate application (Eclipse) set a breakpoint hit the breakpoint etc. (That's what I'm doing now - it works but it's slightly annoying.) Is there any existing library that includes something like that? I think I said this in the original question - but I want to have this built in to my app instead of having to run my app + an external debugger and switch back and forth between the two at runtime. Why do you want this duplicate debug feature? One interesting technique here is to use a text pane in conjunction with JavaScript (the Rhino engine is built into the JRE now). The script will have access to your application objects and vice-versa. Here's info on calling Java from JavaScript and here's info on executing the script from the Java side - the code examples there pretty much build of what you are wanting to do (just take the text in the textpane and execute it using the scripting engine). We use this sort of thing for advanced configuration dialogs where we are introducing features but don't have a solid GUI built around them yet. It's cool b/c you can implement an interface in JavaScript then use the resultant object elsewhere in the Java app. That's pretty nice thanks! (Now I just need to go learn JavaScript...) hah - it's not hard for what you are probably trying to do - set a variable inspect a variable. I'll leave it up to you to decide if you should mark my response as the accepted answer :-) Yep definitely sufficient for my needs at the moment - much appreciated."
500,A,Multiple Swing event-dispatch threads I would like to create a new event-dispatch thread in Swing and I'm having trouble finding any references online for how to do this. I have done this in .NET by creating a new thread and calling Application.run(...). Has anyone done this? Is it possible in Swing? FYI the reason I am trying to do this is because I am writing an Eclipse plug-in and I would like to pop up dialogs that are not modal to the IDE but that are modal (blocking) to my UI logic. I could accomplish this using non-modal dialogs and callbacks but that requires the overhead of making my code multi-threaded. I'll revert to that if the former is not possible. FYI my Swing dialogs DO block the IDE I'd still be interested to know if this is possible in Swing or SWT. For now I can live with the window being modal. If it gets to be too much of an issue I'll bite the bullet and rewrite it using modalless dialogs. Does SWT use the Swing EDT? @mmyers: To my knowledge no. I'm going to junk my last answer and start anew. In SWT you can create Shells (windows) or custom Dialogs that are modal just to the parent by passing the SWT.PRIMARY_MODAL style flag during creation. Note that Dialog is an abstract class so you'd have to create your own. It's probably just easier to use Shell. Edit: Why SWT? Because that's what Eclipse uses. See: Eclipse Platform Plug-in Developer Guide (zipped PDF) for more details. The most recent version is available in Eclipse's Help system (Help > Help Contents > Plug-in Development Environment Guide.) Thanks for the suggestion. It didn't do what I need however. I would need a modality type that is essentially modalless even to the direct parent while still blocking on the call to open().  Yes it's possible. I've have done such multiple EDT dispatch threads logic in Swing. However net result was that it didn't work reliably. (a) All JVMs don't work nicely with multiple EDT threads (synchronization problems in graphics rendering logic in native code and such IBM JVM failed with multiple EDT threads Sun JVM & Apple JVM did work) (b) Swing rendering logic has few bugs causing that random rendering errors will occur (for example http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6727829). Anyway doing this requires basically establishing two AppContexts which each have their own EDT thread.  I'm a little confused by your question because you mention Swing but then say you are writing an Eclipse plugin. Since the question is tagged Swing I'll give a Swing answer (but posted as CW). There is one event dispatch thread. There is always one event dispatch thread unless there is none at all. You cannot create another one. You can however change the ModalityType of your dialogs or change the ModalExclusionType of a window. In this case if you were writing this all yourself you would set your top-level window's ModalExclusionType to APPLICATION_EXCLUDE. But again I don't see how this could help you since Eclipse uses SWT instead of Swing. I have to admit I actually didn't realize that Eclipse is written in SWT though that makes sense. I'm relatively new to Java with my background being primarily .NET. I do know however that I can in fact create and show Swing dialogs from my Eclipse plug-in. I don't have a whole lot of Swing code so I could potentially convert to SWT. However I don't think that would help because I don't think I can set the IDE to exclude modality nor would that likely be a good idea. It seems that SWT uses a similar modality system so this could end up putting you on the right track. But I'm not familiar enough with it to explain in detail. Actually the PlugIn and WebStart have multiple EDTs. However the API is not public and you can't mix components together.
501,A,How to find out the instance when component resize is complete In my application I fetch data if component is resized. I want to delay the fetch till user completes resize operation. ComponentListner event componentResized fires every time the window is resized. This isn't possible via conventional means I'm afraid. componentResized() will be called for every intermediate sizing change and there is no way to determine if the current call will be the last. Strictly speaking what you are attempting isn't a conventional thing to do. Data loads can be expensive IO operations and are usually best performed when the user is expecting them after a more direct UI operation such as a button press when appropriate feedback can be displayed as a result of their action. The size of a component can change for innocent reasons such as the frame being maximised or arranged as a result of an operation elsewhere such as the new Aero operations in Windows 7. Some applications do perform IO as a result of sizing. Google Reader for instance can load older posts from RSS feeds as a result of moving the scrollbar on the browser window. This is a nice feature and does away with the need for an explicit load button but it is directly driven by the user seeking the older posts; a conscious action not an unconscious one. I guess my point is that you need to be very careful about how you make this work. Punishing a user with a slow IO operation that makes them wait simply because they dared resize the window is not a user-friendly approach! You give precious little information in your question about what your UI looks like or what the component is or how it gets resized - even where you are loading data from so it's kind of difficult to answer. Here are a couple of suggestions: I hope they help. 1. Load the data into memory beforehand and just display it If the data model isn't too big you could just load it into memory and redraw it quickly with every resize event. The Event-Dispatch-Thread will combine resize events together so your listener is not overwhelmed by requests. This might be a non-starter for you but it's worth mentioning. 2. Be eager to load Load more data than you need on the first resize event and then either reject or cache the data you don't use. If you're populating the rows of a table or a list this might be the better approach; tabular data is usually straight-forward to load and parse. 3. Allow a reasonable time to pass for resizing to stop The first resize event starts a Timer with a 1 second countdown. Any subsequent resize events reset the 1 second countdown. At some point there will be a final resize event after which no subsequent resize events reset the countdown so it is allowed to expire. At this point the Timer does your load for you. Three is the safest most accurate approach in my opinion. You can make your application feel responsive by visibly indicating that data is loading on the first resize event and adjust the countdown of the timer to get the feel of your application right.  This is not possible. But you can use SingleWorkerThread to minimalize the number of events processed.  I'd say you are propably writing a mapping application of some kind? :-) You can use the swing Timer class to wait until a specified amount of time passed without any events. Here's the code : /** Time to wait */ private final int DELAY = 1000; /** Waiting timer */ private javax.swing.Timer waitingTimer; /** * Handle resize event. */ public void componentResized(ComponentEvent e) { if (this.waitingTimer==null) { /* Start waiting for DELAY to elapse. */ this.waitingTimer = new Timer(DELAYthis); this.waitingTimer.start(); } else { /* Event came too soon swallow it by resetting the timer.. */ this.waitingTimer.restart(); } } /** * Actual resize method */ public void applyResize() { //... } /** * Handle waitingTimer event */ public void actionPerformed(ActionEvent ae) { /* Timer finished? */ if (ae.getSource()==this.waitingTimer) { /* Stop timer */ this.waitingTimer.stop(); this.waitingTimer = null; /* Resize */ this.applyResize(); } } Thanks for spending your time to write detailed example; this solution seems to fit my requirement.
502,A,"How to trigger a hyperlink using a keystroke in a Swing JEditorPane I'm trying to fire hyperlinks in a JEditorPane using the ""Enter"" keystroke. So that the hyperlink (if any) under the caret will fire rather than having to click with the mouse. Any help would be appreciated. What have you tried so far? I haven't really even got close on this one. Have scoured the swing docs to see if I can get a list of links from the editor so maybe I could go through each link and see if it is under the caret but I can't find such a list. First of all the HyperlinkEvent is only fired on a non-editable JEditorPane so it will be difficult for the users to know when the caret is over a link. But if you do want to do this then you should be using Key Bindings (not a KeyListener) to bind an Action to the ENTER KeyStroke. One way to do this is to simulate a mouseClick by dispatching a MouseEvent to the editor pane when the Enter key is pressed. Something like this: class HyperlinkAction extends TextAction { public HyperlinkAction() { super(""Hyperlink""); } public void actionPerformed(ActionEvent ae) { JTextComponent component = getFocusedComponent(); HTMLDocument doc = (HTMLDocument)component.getDocument(); int position = component.getCaretPosition(); Element e = doc.getCharacterElement( position ); AttributeSet as = e.getAttributes(); AttributeSet anchor = (AttributeSet)as.getAttribute(HTML.Tag.A); if (anchor != null) { try { Rectangle r = component.modelToView(position); MouseEvent me = new MouseEvent( component MouseEvent.MOUSE_CLICKED System.currentTimeMillis() InputEvent.BUTTON1_MASK r.x r.y 1 false); component.dispatchEvent(me); } catch(BadLocationException ble) {} } } } Just what I was after thanks."
503,A,"Planning view component in Swing I need to build a Swing GUI like this where there are typically 40 tour columns. In each column there are typically up to 20 orders per tour. Orders may be grouped together within a tour. It should be possible to horizontally enlarge to columns to D&D orders within a tour and to other tours. Later the representation might change including e.g. images. I once did something similar using JTable but for this task I think a JTable is not the right solution. And because of the grouping of orders there are no real rows. Thought #1: I thought of using a JPanel a LayoutManager (or NullLayout) and JComponents for this but I am not sure if this is the way to go. Thought #2: Another possibility is to use a JPanel (in a scrollpanel) set it's size to correct value override paintComponent and paint everything myself (maybe by using an approach like TableCellRenderer for not needing to paint everything myself -- i.e. using one renderer per type to render set it's values use Graphics.translate and then component.paint...) In both approaches I need to implement the D&D code myself #1 would make it possible to use the JComponents D&D implementation but this wouldn't be that hard in #2 either. Inserting and removing of orders in #2 seems easier since in #1 some LayoutManager (or in case of NullLayout all elements below) are involved otherwise only a repaint is necessary. #1 might be a memory problem when that many JComponents are created and the initial add(component) seems to be somewhat costly in my first tests. What do you think? How would you implement this? Or maybe is there some library for swing to create such a panel? What do you mean by D&D? With D&D i mean Drag and Drop Somehow I think a use of the Infonode library (Docking Windows) could help it includes D&D you could move panels easily. The only problem with it would be to ""force"" it for example using one RootWindow (the base component per Tour i'm not sure. Infonode is a GPL library for commercial use there is a commercial license too depending on your need. For information i'm not related to them but I use this framework and I like it and it could be a solution maybe http://www.infonode.net/index.html?idwdemo (check demo) +1 for the hint on docking frameworks. I will evaluate if using a docking framework (not necessary infonode but it looks nice) for this task.  The approach #1 should work. I did it several times. But if you want to make your drag and drop simpler I would suggest using JLists(without scroll panes) for your orders. You will be able to implement D&D within lists as well as between them if needed. To customize how order looks you can use renderers. On top of lists you can use panels or labels as tour headers. So I would create specialized TourView component with header on top and JList on the bottom. Then add many of TourViews to panel as you thought in case #1. In all cases except when using JTable you have to implement column enlarging yourself. +1 for the idea of using a JList. This seems to be a nice idea and I will definitely try it.  both approaches are feasable though i would probably rule out #2 on account of it being difficult to implement. if i went route 1 I'd probably try something like FlowlLayout with some JPanels but in the past I've never really gotten decent results from trying to get things to the size I really want them usually layout managers like to size everything for you.  to expand on Thought #1: you could do this with a succession of JPanels. Your parent JPanel would layout a set of Tour panels in fixed width columns. the Tour classes could be panels that contain a TourHeader panel and a set of ItineraryItem panels. This might be heavier weight but potentially easier for others to follow. you could also reconsider the JTable option. take a look at some of the JTable examples on this ancient site for some ideas for cells spanning rows."
504,A,How to locate JLabels to an absolute position on Java GUI I have many JLabels (which includes ImageIcons) in a JPanel. And this JPanel is only a panel on the GUI; there are lots of other panels. I want to place labels to the exact pixel coordinates on their JPanel container. How can I do that without using GroupLayout? See Doing Without a Layout Manager (Absolute Positioning) in the Java tutorials. Creating a container without a layout manager involves the following steps. Set the container's layout manager to null by calling setLayout(null). Call the Component class's setbounds method for each of the container's children. Call the Component class's repaint method.  Either set a custom LayoutManager (Container.setLayout) on the panel that sets the exact positions you want or set a null layout manager (myPanel.setLayout(null);) and set component positions externally (Component.setBounds).  Take a look at MigLayout which allows you to do absolute positioning it's not part of the JDK a seperate download from here: http://www.miglayout.com/ It's very good as far as layout managers go and does absolute positioning plus a whole load of other things.
505,A,"virtual listbox in Swing I'm trying to figure out how to make a virtual listbox (or tree or outline) in Swing -- this would be one where the listbox can show a ""view"" within a large result set from a database without getting the entire result set's contents; all it needs to give me is a heads up that Items N1 - N2 are going to need to be displayed soon so I can fetch them and ask for the contents of item N. I know how to do it in Win32 (ListView + LVS_OWNERDATA) and in XUL (custom treeview) and I found something for SWT but not Swing. Any suggestions? update: aha I didn't understand what to look for in search engines & the tutorials don't seem to call it a ""virtual listbox"" or use the idea. I found a good tutorial that I can start from and one of the Sun tutorials seems ok also. Here's my example program which works the way I expect... except it seems like the listbox queries my AbstractListModel for all rows not just the rows that are visible. For a million-row virtual table this isn't practical. How can I fix this? (edit: it seems like setPrototypeCellValue fixes this. But I don't understand why...) package com.example.test; import java.awt.BorderLayout; import java.awt.Dimension; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.AbstractListModel; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JList; import javax.swing.JPanel; import javax.swing.JScrollPane; import javax.swing.JSpinner; import javax.swing.SpinnerModel; import javax.swing.SpinnerNumberModel; import javax.swing.event.ChangeEvent; import javax.swing.event.ChangeListener; // based on: // http://www.java2s.com/Tutorial/Java/0240__Swing/extendsAbstractListModel.htm // http://www.java2s.com/Tutorial/Java/0240__Swing/SpinnerNumberModel.htm // http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/SpinnerNumberModel.html // http://www.java2s.com/Tutorial/Java/0240__Swing/ListeningforJSpinnerEventswithaChangeListener.htm public class HanoiMoves extends JFrame { public static void main(String[] args) { HanoiMoves hm = new HanoiMoves(); } static final int initialLevel = 6; final private JList list1 = new JList(); final private HanoiData hdata = new HanoiData(initialLevel); public HanoiMoves() { this.setTitle(""Solution to Towers of Hanoi""); this.getContentPane().setLayout(new BorderLayout()); this.setSize(new Dimension(400 300)); list1.setModel(hdata); SpinnerModel model1 = new SpinnerNumberModel(initialLevel1311); final JSpinner spinner1 = new JSpinner(model1); this.getContentPane().add(new JScrollPane(list1) BorderLayout.CENTER); JLabel label1 = new JLabel(""Number of disks:""); JPanel panel1 = new JPanel(new BorderLayout()); panel1.add(label1 BorderLayout.WEST); panel1.add(spinner1 BorderLayout.CENTER); this.getContentPane().add(panel1 BorderLayout.SOUTH); ChangeListener listener = new ChangeListener() { public void stateChanged(ChangeEvent e) { Integer newLevel = (Integer)spinner1.getValue(); hdata.setLevel(newLevel); } }; spinner1.addChangeListener(listener); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setVisible(true); } } class HanoiData extends AbstractListModel { public HanoiData(int level) { this.level = level; } private int level; public int getLevel() { return level; } public void setLevel(int level) { int oldSize = getSize(); this.level = level; int newSize = getSize(); if (newSize > oldSize) fireIntervalAdded(this oldSize+1 newSize); else if (newSize < oldSize) fireIntervalRemoved(this newSize+1 oldSize); } public int getSize() { return (1 << level); } // the ruler function (http://mathworld.wolfram.com/RulerFunction.html) // = position of rightmost 1 // see bit-twiddling hacks page: // http://www-graphics.stanford.edu/~seander/bithacks.html#ZerosOnRightMultLookup public int rulerFunction(int i) { long r1 = (i & (-i)) & 0xffffffff; r1 *= 0x077CB531; return MultiplyDeBruijnBitPosition[(int)((r1 >> 27) & 0x1f)]; } final private static int[] MultiplyDeBruijnBitPosition = { 0 1 28 2 29 14 24 3 30 22 20 15 25 17 4 8 31 27 13 23 21 19 16 7 26 12 18 6 11 5 10 9 }; public Object getElementAt(int index) { int move = index+1; if (move >= getSize()) return ""Done!""; int disk = rulerFunction(move)+1; int x = move >> (disk-1); // guaranteed to be an odd # x = (x - 1) / 2; int K = 1 << (disk&1); // alternate directions for even/odd # disks x = x * K; int post_before = (x % 3) + 1; int post_after = ((x+K) % 3) + 1; return String.format(""%d. move disk %d from post %d to post %d"" move disk post_before post_after); } } update: per jfpoilpret's suggestion I put a breakpoint in the getElementData() function. if ((index & 0x3ff) == 0) { System.out.println(""getElementAt(""+index+"")""); } I looked at the stacktrace for the thread in question. It's not really that helpful (posted below). From some other tweaking however it looks like the culprits are the fireIntervalAdded()/fireIntervalRemoved() and the change in the result of getSize(). The fireIntervalxxxx seems to clue Swing into checking the getSize() function and if the size changes it goes and refetches ALL of the row contents immediately (or at least it puts requests into the event queue to do so). There must be some way to tell it Don't Do That!!!! but I don't know what. com.example.test.HanoiMoves at localhost:3333 Thread [main] (Suspended (breakpoint at line 137 in HanoiData)) HanoiData.getElementAt(int) line: 137 BasicListUI.updateLayoutState() line: not available BasicListUI.maybeUpdateLayoutState() line: not available BasicListUI.getPreferredSize(JComponent) line: not available JList(JComponent).getPreferredSize() line: not available ScrollPaneLayout$UIResource(ScrollPaneLayout).layoutContainer(Container) line: not available JScrollPane(Container).layout() line: not available JScrollPane(Container).doLayout() line: not available JScrollPane(Container).validateTree() line: not available JPanel(Container).validateTree() line: not available JLayeredPane(Container).validateTree() line: not available JRootPane(Container).validateTree() line: not available HanoiMoves(Container).validateTree() line: not available HanoiMoves(Container).validate() line: not available HanoiMoves(Window).show() line: not available HanoiMoves(Component).show(boolean) line: not available HanoiMoves(Component).setVisible(boolean) line: not available HanoiMoves(Window).setVisible(boolean) line: not available HanoiMoves.<init>() line: 69 HanoiMoves.main(String[]) line: 37 Thread [AWT-Shutdown] (Running) Daemon Thread [AWT-Windows] (Running) Thread [AWT-EventQueue-0] (Running) Update: I tried using some of the FastRenderer.java code from the Advanced JList Programming article and that fixed it. But it turns out it's not the renderer at all! One line of code fixed my problem and I don't understand why: list1.setPrototypeCellValue(list1.getModel().getElementAt(0)); Yes the stack trace is useful: do you see the getPreferredSize() in it this matches my original remark; the JList computes its preferred size but for that it needs to check ALL items of the list! With setPrototypeCellValue() you tell the list that this value should be used to compute the size! That's why it solved your problem. so it's not the list size it's the cell size for each item in the list. Yes but JList will automatically take the max of pref widths for all cells so this is to calculate the list size;-) Aha: the rendering is the problem but I don't really understand why. I used the TextCellRenderer mentioned in the FastRenderer.java program from the article Advanced JList Programming. But I don't really understand why that works and what the caveats are about doing this.... :/  I suspect the reason for accessing the whole model might be related to list size computation. What you could try is to add some breakpoint in your model getElementAt() method. I suggest you do it this way: if (index == 100) { System.out.println(""Something"");//Put the breakpoint on this line } The 100 constant is a value < getSize() but bigger than the initial visible number of rows (that way you won't have a break for all visible rows). When you enter this breakpoint take a look at where your model was called from this may give you some hints. You could post the stack trace here for us to try and help you further. good idea but it doesn't seem to be of any major help.... (see my edits)  Extend AbstractListModel which you can pass into the JList constructor. In your implementation make your list size as big as you need (with the value returned from getSize). If the data for that item in the list isn't available return a blank line (via getElementAt). When the data is available call fireContentsChanged for the updated rows. seems to work but it tries to construct all the rows even the ones that aren't visible.  The problem is that even using intelligent pre-fetch you cannot guarantee that all visible rows were prefetched when they are needed. I'll sketch a solution which I used once in a project and which worked extremely well. My solution was to make a ListModel will return a stub for missing rows that tell the user that the item is loading. (You can enhance the visual experience with a custom ListCellRenderer which renders the stub specially). Additionally make the ListModel enqueue a request to fetch the missing row. The ListModel will have to spawn a thread which reads the queue and fetches the missing rows. After a row was fetched invoke fireContentsChanges to the fetched row. You can also use a Executor in you listmodel: private Map<IntegerObject> cache = new HashMap<IntegerObject>(); private Executor executor = new ThreadPoolExecutor(...); ... public Object getElementAt(final int index) { if(cache.containsKey(index)) return cache.get(index); executor.execute(new Runnable() { Object row = fetchRowByIndex(index); cache.put(index row); fireContentsChanged(this index index); } } You can improve this sketched solution in the following ways: No only fetch the requested item but also some items ""around"" it. The user likely will scroll up and down. In case of really big lists make the ListModel forget those rows which are far away from the ones fetched last. Use a LRU-cache If desired prefetch all items in the background thread. Make the ListModel a Decorator for a eager implementation of ListModel (this is what I did) If you have multiple ""big"" ListModels for Lists visible at the same time use a central request queue to fetch the missing items. +1 for pointing out subtleties I should be aware of  Take a look at the jgoodies bindings. I am not sure they will do what you want (I haven't used them... I am just aware of the project). +1 for the jgoodies ref i hadn't heard of them before. looks useful."
506,A,"Best way to implement tooltips for JTree? since JTree & TreeModel don't provide tooltips straight out-of-the-box what do you think what would be the best way to have item-specific tooltips for JTree? Edit: (Answering my own question afterwards.) @Zarkonnen: Thanks for the getTooltipText idea. I found out another (maybe still a bit nicer) way with overriding DefaultTreeCellRenderer and thought to share it: public class JTreeWithToolTips { private static class OwnRenderer extends DefaultTreeCellRenderer { @Override public Component getTreeCellRendererComponent(JTree tree Object value boolean sel boolean expanded boolean leaf int row boolean hasFocus) { setToolTipText(""foobar"" + row); return super.getTreeCellRendererComponent(tree value sel expanded leaf row hasFocus); } } public static void main(String[] args) { JTree tree = new JTree(new Object[] { ""foo"" ""bar"" ""foobar"" }); tree.setCellRenderer(new OwnRenderer()); ToolTipManager.sharedInstance().registerComponent(tree); JFrame frame = new JFrame(); frame.getContentPane().add(tree); frame.pack(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } } Your answer should be in an answer so people can vote on it. DefaultTreeCellRenderer#getTreeCellRendererComponent is called a lot and making this too heavyweight can make stuff not work as expected. Like tooltips that should show up but don't. Overriding JTree#getToolTipText(MouseEvent e) is only called when needed and as such is a much better solution! See getTooltipText on JTree. This should allow you to show tooltips depending on what in the tree is being hovered over. (Do read the docs though you need to register the JTree with the ToolTipManager.)  Yeah you can use onMouseMoved and then use a method (I don't remember the name) that tells you in which node you are over. If you get null obviously then you are not over a node. Since it's not mentioned elsewhere: the methods linking mouse position to tree node are `getPathForLocation(int int)` and `getRowForLocation(int int)`. As suggested by other answers implementing custom renderer or overriding `getToolTipText(MouseEvent)` is cleaner than adding a `MouseListener`."
507,A,"Idiomatic table cell renderers in Scala I had been using the traditional Java TableCellRenderer approach for providing the renderers in a scala.swing.Table where I declare my renderers on the table's TableColumnModel. The code for this looked like: val myTable = new Table { lazy val tcm = initColumnModel peer.setColumnModel(tcm) override protected def rendererComponent(sel: Boolean foc: Boolean row: Int col: Int) = { //GET THE VALUE FROM THE TableModel val value = model.getValueAt( peer.convertRowIndexToModel(row) peer.convertColumnIndexToModel(col)) //GET THE RENDERER FROM THE ColumnModel val renderer = tcm.getColumn(col).getCellRenderer //WRAP IN A COMPONENT Component.wrap(renderer.getTableCellRendererComponent( peer value sel foc row col).asInstanceOf[JComponent]) } } Unfortunately this appears to have a memory leak - presumably because I am creating a new Component instance for every cell in the table (for ~30k rows). Certainly when I replace my scala table with a JTable (using exactly the same column and data models) my memory leak goes away. My question is therefore what sort of code do people use when overriding the rendererComponent method assuming one has ones own cell renderers? Thanks a ton for your example oxbow_lakes! IMHO this scala-thing has become as ugly as table-rendering can possibly get. Trying to hide it as much as possible... class TableRenderer[A](comp: TableRendererComp[A]) extends Table.AbstractRenderer[ATableRendererComp[A]](comp) { def configure(t: Table sel: Boolean foc: Boolean a: A row: Int col: Int): Unit = component.render(a sel foc) } trait TableRendererComp[A] extends Component { def render(a: A sel: Boolean foc: Boolean): Unit } Using like (at least the ""configure"" is gone...) val tcr = new TableRenderer[MyObj](new MyRenderer) class MyRenderer extends Label with TableRendererComp[MyObj] { def render(o: MyObj sel: Boolean foc: Boolean) { text = o.toString //or whatever } }  The idiomatic way of using Scala table cell renderers is to use Table.AbstractRenderer (if implementing your own) or one of its subclasses: val tcr = new Table.AbstractRenderer[MyObj MyRenderer](new MyRenderer) { def configure(t: Table sel: Boolean foc: Boolean o: MyObj row: Int col: Int) = { //component variable is bound to your renderer component.prepare(o) } } In this case prepare is a method you would define on your own renderer class: class MyRenderer extends Label { def prepare(o: MyObj) { text = o.toString //or whatever } } Then this is used by overriding the rendererComponent method on Table: val t = new Table { override def rendererComponent(sel: Boolean foc: Boolean row: Int col: Int) = { //FIND VALUE val v = model.getValueAt( peer.convertRowIndexToModel(row) peer.convertColumnIndexToModel(row)) col match { case 0 => tcr.componentFor(this sel foc v row col) } } } Scala comes with its own implementations of AbstractRenderer namely LabelRenderer which takes a function as an argument converting an instance of MyObj to a Tuple2 consisting of a String and an Icon for that label to display: val ltcr = new LabelRenderer[MyObj] ( (o: MyObj) => (null o.toString) ) I think you want `peer.convertColumnIndexToModel(col)` instead of `peer.convertColumnIndexToModel(row)` You can also use `scala.swing.Table.viewToModelColumn(Int): Int`. Note sure why there isn't an equivalent wrapper method for rows.."
508,A,"Calling this from inside a nested Java ActionListener Suppose I have this: class external { JFrame myFrame; ... class internal implements ActionListener { public void actionPerformed(ActionEvent e) { ... myFrame.setContentPane(this.createContentPane()); } } ... } createContentPane returns a Container. Now if I was doing this code outside of the ActionListener it would work because I'd have access to this. But inside it I don't. I have access to myFrame which is what is going to be updated with the contents of the method but that isn't enough to do what I want unless I can get a this out of it. I also need information from other instance variables to use createContentPane() so I'm not sure I can make it static. Not sure exactly what you're getting at but an inner class has access to all of the members of its enclosing class. To access the ""this"" pointer of the enclosing class (e.g. to pass to other methods) use: someMethod(External.this); In your example you're actually complicating it by using ""this"". Here are two options that will work: myFrame.setContentPane(createContentPane()); or: myFrame.setContentPane(External.this.createContentPane()); Note that you're already accessing myFrame in the same manner. argh beat me by 8 seconds ;-) +1 them's the breaks :) thanks.  First you have to extend JFrame in your outer class like this class External extends JFrame { ..... ..... }  external.this will give you access to the instance of the enclosing class if that's what you want...  You can either : myFrame.setContentPane(createContentPane()); or myFrame.setContentPane(external.this.createContentPane()); By the way in Java classes first letter is usually uppercase. Your code will still compile and run if you don't name it like that but by following coding conventions you'll be able to read others code and much more important other will be able to read your code. So this would be a better style: class External { JFrame myFrame; ... class Internal implements ActionListener { public void actionPerformed(ActionEvent e) { ... myFrame.setContentPane(createContentPane()); //Or myFrame.setContentPane(External.this.createContentPane()); } } ... } Java Code conventions Glad I found this just what I needed (for the 400th time). I'm kind of tempted to adjust the question and this answer to not mention the upper-case letter as it's just confusing and irrelevant... but I won't. Thanks +1"
509,A,"Updating JTree nodes background color at runtime I need to change tree nodes color when business logic updates model wait 1 second and then change its color back. Basically I would like to create similar thing like here http://stackoverflow.com/questions/1664924/changing-jlist-row-color-at-runtime but for JTree. So I could use a similar techniquebut I also wont to change ancestor nodes color so user could see notification even if not is not expanded. How can I do it? sorry :( I was trying to check spelling and make ctr+c + ctr+v on wrong line in google treanslate... :) What does ""Mógłbym użyć podobnej techniki"" mean? Check this Highlight a node's descendants in JTree You could easily modify it to instead highlight the parent and now you only need to plug in a solution for the timed highlighting like the solution I provided on the other thread. Highlight timer unset highlight. Using SwingWorker plus maybe an Executor if the updates to the model are frequent and you want some control over the execution of the highlighting threads  First when the business model is updated make sure you fire the appropriate tree updated event in your tree model so the JTree will know to update. Then you'll need to define a TreeCellRenderer that sets the color. When the business model is updated tell your renderer which nodes to highlight. However the trick here is turning the color off. You can define a Thread or better yet an Executor to sleep for 1000 millis then tells the renderer to no longer highlight the nodes then fire the tree update events again so the JTree will repaint appropriately. You should not define an arbitrary thread or Executor to fire the tree update event as this should be fired on the Event Dispatch Thread. True. Instead use SwingWorker or SwingWorker + Executor That could work or use SwingUtilities.invokeLater() to put the tree update in the UI thread."
510,A,"Is there a way to change the owner of a JDialog? I have a very specific problem and I wanted to know if there is a way to change the owner of a JDialog (it can be set using the constructor). I suppose there is no ""official"" possibility (other than a hack) but I wanted to make sure I didn't miss something. Any ideas or hints on the topic would be helpful thanks already... Why on earth would you even want to do that? If your question is about how to reuse dialogs during your application lifecycle then a better way is to: define all your dialog contents as JPanel subclasses and instantiate a new JDialog with the existing JPanel subclass instance For point 2 you can of course use lazy evaluation of the panels (instantiate upon first use only then reuse). You will also need to have your panels implement some interface (of your own) that allows you to re-initialize them for reuse in a new JDialog (reinit typically means erasing all fields contents or setting these fields back to their default values).  Only thing I can think of falls under unsafe hack (use reflection and alter the owner but that could possibly change under different version of the JVM (even from the same vensor on the same platform)). Perhaps a better question for you to ask is ""this is what I am trying to do... do I really need to change the owner of the dialog or is there a better way""? I am trying to think of reasons to want to change the owner and I cannot come up with any...  j: I have had a similar need for a single ""global"" dialog in my application to serve a ""notes"" dialog when the text in a table cell is too long to display. In this case the user can hover or right-click the cell and get a dialog that displays the whole text. However I wanted the dialog to display quickly especially when hovering so I wanted to simply show and hide it. I decided to create and store this dialog in the main class with the application frame as the owner. Then whenever any view whose owner was the frame needed the notes dialog the view could get it from the main class. In those instances where a dialog needed the notes dialog the parent dialog could create a new instance of the notes dialog with the appropriate owner. Since these parent dialogs (in my app at least) are disposed when closed the extra notes dialog instance would be out of scope and garbage collected. Hope that helps."
511,A,"Is there a multiple input JOptionPane in Java? I was wondering if there is a JOptionPane where you can get multiple inputs from a user instead of just one? If not how could i accomplish this using some type of prompt. I am creating Battleship and wanted to prompt the user to specify locations to place each ship. Thanks Tomek The object that you pass in as the message to the JOptionPane can be graphical components so something like this should work: JPanel panel = new JPanel(); // Populate your panel components here. int ret = JOptionPane.showConfirmDialog(parent panel ""Title"" JOptionPane.YES_NO_OPTION); if ( ret == JOptionPane.YES_OPTION ) { // Read component values. }"
512,A,How to avoid negative values with JFreeChart fixed auto range I have a JFreeChart line plot that is updated dynamically with one data point for every iteration of my algorithm. Because the number of data points can quickly become very large I have used the setFixedAutoRange(double) method on the domain axis. This restricts the graph to displaying the n most recent iterations (200 in my case). This works well except during the first 200 iterations. The problem is that until there have been 200 iterations the axis includes negative values (for example after 50 iterations the range is from -150 to 50). Negative iterations make no sense. I would like the axis to start at zero rather than a negative value. How can I achieve this? I don't mind whether the axis goes from 0 to 200 initially (with the right hand part of the chart left blank until the plot fills it up) or whether it starts at 0 to 1 and grows (so that the plot is always stretched across the full width of the chart). Either would acceptable though I have a slight preference for the former. Things I have tried: Calling setLowerBound doesn't play nicely with setFixedAutoRange. Calling setRangeType(RangeType.POSITIVE) doesn't seem to make any difference. Any ideas? It looks like you're looking for a solution that involves configuring JFreeChart to do it for you rather than manually setting the range. I can't help with that....but here are some other ugly solutions :P .... You could do something like this (sorry for the pseudo-code): while(producingData) { this.produceData(); if(!allDataButton.isSelected()) { domainAxis.setRange((count < 200) ? 0 : count-200) count); } else { domainAxis.setRange(0 count); } } If I were a perl-coder I'd write it like this just to make it a smidget harder to read :P while(producingData) { this.produceData(); domainAxis.setRange( (((count < 200) || allDataButton.isSelected()) ? 0 : count-200) count); } Thanks. This looks a bit simpler than my solution because it does it all in terms of the setRange method. I've since discovered that JFreeChart's auto-range performs poorly. Each time you add a data point it searches the whole data set for the min and max in order to adjust the range. Your solution (avoiding setAutoRange and setFixedAutoRange) doesn't suffer from that problem.  Things I have tried: Calling setLowerBound doesn't play nicely with setFixedAutoRange. Calling setRangeType(RangeType.POSITIVE) doesn't seem to make any difference. Any ideas? Did you try axis.setRange(0 200);  I now have a working solution although I'm still interested in better approaches Initially I set the range of the domain axis to a fixed range of 0 to 200: domainAxis.setRange(0 200); In the code that adds the data to the plot I check to see whether it is the 200th value that is being added and if it is I switch the range to a fixed auto range of 200. This works though it's a little bit clunky (especially as I also have to check whether the user has selected the option to disable the fixed window entirely and have it display all values). if (!allDataButton.isSelected() && count == 200) { domainAxis.setAutoRange(true); domainAxis.setFixedAutoRange(200); }  I encountered the same problem which I solved with: axis.setAutoRangeMinimumSize(100); // Ensures graph always shows at least 0-100. axis.setRangeType(RangeType.POSITIVE); I'm using JFreeChart v1.0.14. Perhaps they've fixed a bug with setAutoRangeType since the question was originally posted? One downside of this approach is that zero values are not visible.
513,A,"java swing - layout oddness when using different layout managers Bit of oddness seen if I do the following: import javax.swing.*; public class FunkyButtonLayout { public static void main(String[] args) { JFrame frame = new JFrame(""""); JPanel j0 = new JPanel(); // j0 gets added to the root pane j0.setLayout(null); JPanel j1 = new JPanel(); // j1 gets added to j0 j1.setLayout(null); JButton b1 = new JButton(""""); // b1 gets added to j1 j1.add(b1); b1.setBounds(0 0 40 32); // b1 is big j0.add(j1); j1.setBounds(0 0 32 32); // j1 is not so big - b1 gets 'trimmed' frame.getContentPane().setLayout(null); // <- seems to be needed :-( frame.getContentPane().add(j0); j0.setBounds(10 10 32 32); // end result: a 32x32 button with frame.setSize(125 125); // a trimmed right border frame.setVisible(true); // in the top-left corner } } I get pretty much what I'm looking for apart from the ability to position j0 in the root pane with a layout manager. If I change the  frame.getContentPane().setLayout(null); line to  frame.getContentPane().setLayout(new java.awt.FlowLayout()); I see j0 draw as a 1x1 pixel @ the middle of the screen :-( Any ideas why? Note that this isn't just a FlowLayout thing - pretty much every layout manager messes this up. I really want to have the net effect of the 'border trimmed on one side' button - it allows me to do the toolbar-button-cluster thing (the kind of thing that cage fighter tries to get rid of) with native-looking button controls - I cannot see another way of doing this thanks to OS-level skins. So any ideas appreciated :-) If you set the layout manager to null you have to explicitly set the container's preferred size (that's why it's showing up so small). If you are using setBounds on a component you are over-riding the work that the layout manager for the parent container does. I would remove all calls to setBounds and all calls to setLayout(null) and try to achieve the effect you are after using just layout managers. You da man! Well almost ;-) ""using the layout managers the way they were intended to be used"" doesn't buy me the hack I'm looking for. However adding j0.setPreferredSize(new java.awt.Dimension(32 32)); after the j0.setBounds line resolves the issue. Thanks!!!!!  For a really good explanation of how layout managers work check out an old article I wrote at Sun http://developer.java.sun.com/developer/onlineTraining/GUI/AWTLayoutMgr/ It's old but talks about preferredSize and layout nesting pretty well. Enjoy -- Scott  Hiya - thanks everyone for your assistance. Dan > it was your comment about preferred layout that got me to get this working - adding j0.setPreferredSize(new java.awt.Dimension(32 32)); was all that was needed to get this to work. Oscar > Unfortunately this stops working once you UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());  and this was also core to my needs (I'm looking to make this look as native as possible). For example here's what mine looks like with 3 buttons on XP: ... and here's what yours looks like with the XP look: ... which unfortunately isn't the same thing - sorry for not being clearer in my requirements :-( FWIW here's the code (images are transparent icons the same size as the buttons with the vertical lines as part of the icon): import java.awt.*; import javax.swing.*; public class FunkyButtonLayout { public static void main(String[] args) { try { UIManager.setLookAndFeel( UIManager.getSystemLookAndFeelClassName()); } catch (Exception e) { } JFrame frame = new JFrame(""x""); Container y = frame.getContentPane(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); y.setLayout(new FlowLayout()); JPanel uberButton = new JPanel(); uberButton.setLayout(null); uberButton.setSize(98 32); uberButton.setPreferredSize(new Dimension(98 32)); JButton record = new JButton(new ImageIcon(""img/record.png"")); record.setBounds(0 0 40 32); record.setEnabled(true); record.setFocusPainted(false); JPanel _record = new JPanel(); _record.setLayout(null); _record.setBounds(0 0 33 32); JButton pause = new JButton(new ImageIcon(""img/pause.png"")); pause.setBounds(-4 0 44 32); pause.setEnabled(true); pause.setFocusPainted(false); JPanel _pause = new JPanel(); _pause.setLayout(null); _pause.setBounds(33 0 33 32); JButton stop = new JButton(new ImageIcon(""img/stop.png"")); stop.setBounds(-4 0 36 32); stop.setEnabled(true); stop.setFocusPainted(false); JPanel _stop = new JPanel(); _stop.setLayout(null); _stop.setBounds(66 0 32 32); _record.add(record); _pause.add(pause); _stop.add(stop); uberButton.add(_record); uberButton.add(_pause); uberButton.add(_stop); y.add(uberButton); frame.pack(); frame.setVisible(true); } } Scott> I have been schooled :-) thanks  ...any ideas why ? Yes. That happens because when you remove the layout manager ( by setting it to null ) you're saying to the computer ""I'll to all the laying work""; while using any other LayoutManager will attempt to ... well layout your components according to your needs ( based on the properties of the objects to be lay-ed ) So I think it would be much better to instead try to create a Border instance and set it into the JButton instead of trying to tweak all the objects around it. I'll see if I can came up with something quickly. EDIT: Oops it wasn't any quick but here it is ( I messed up with a 1px line that was annoying me ) As I said before setting the layout to null is not the best approach. Better is to create a custom border and set it to the button ( or set null border ). Here's the code: import javax.swing.*; import java.awt.*; import javax.swing.border.*; import java.awt.geom.*; /** * Sample usage of swing borders. * @author <a href=""http://stackoverflow.com/users/20654"">Oscar Reyes</a> */ public class ButtonBorderSample { public static void main( String [] args ) { // Pretty standard swing code JFrame frame = new JFrame(); frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); JPanel panel = new JPanel( new FlowLayout( FlowLayout.CENTER 0 5 ) ); panel.add( createButton( ""F I R S T"" ) ); panel.add( createButton( ""S E C O N D"" ) ); panel.add( createButton( ""T H I R D "" ) ); frame.add( panel  BorderLayout.NORTH ); frame.pack(); frame.setVisible( true ); } /** * Utility method to create a button. * Creates the button make it square and add our custom border. */ private static JButton createButton( String s ) { JButton b = new JButton( s ); b.setPreferredSize( new Dimension( 100 100 ) ); b.setBorder( new NoGapBorder() ); return b; } } /** * This border implementation. It doesn't have insets and draws only a * few parts of the border * @author <a href=""http://stackoverflow.com/users/20654"">Oscar Reyes</a> */ class NoGapBorder implements Border { private final Insets insets = new Insets( -1 -1  -1 -1 ); /** * Defines in Border interface. * @return The default insets instace that specifies no gap at all. */ public Insets getBorderInsets(Component c ) { return insets; } /** * Defines in Border interface. * @return false always it is not relevant. */ public boolean isBorderOpaque() { return false; } /** * Paint the border for the button. * This creates the difference between setting the border to null * and using this class. * It only draws a line in the top a line in the bottom and a * darker line * in the left to create the desired effect. * A much more complicated strtegy could be used here. */ public void paintBorder(Component c Graphics g int x int y int width int height) { Color oldColor = g.getColor(); int h = height; int w = width; g.translate(x y); // Color for top and bottom g.setColor( c.getBackground().brighter() ); // draw top line g.drawLine(1 0 w-2 0); // draw bottom line g.drawLine(0 h-1 w-1 h-1); // change the color to make it look as a division g.setColor( c.getBackground().darker() ); // draw the left line g.drawLine(0 0 0 h-2); // set the graphics back to its original state. g.translate(-x -y); g.setColor(oldColor); } } EDIT Dave Carpeneto wrote: Oscar>Unfortunately this stops working once you UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());  and this was also core to my needs (I'm looking to make this look as native as possible). Well I was not trying to make your work but to answer to your question you thought your problems had to do with LayoutManagers and I said that was not the problem. Perhaps I should've stopped there but my ""programmer"" itch make me continue with the sample. : ) I'm glad you've solve your problem at the end ;) Perhaps I should've stopped there Reely reely glad you didn't - I learned quite a lot from the code you presented - thanks :-)"
514,A,"JTree with checkboxes I need to add checkboxes to a JTree. A custom TreeCellRenderer/TreeCellEditor seems like the right approach. So far I used the CheckBoxNodeRenderer approach in this webpage. It works OK except for two things: there's additional whitespace above + below the checkbox; I'd like to keep it the same as a regular JTree. I would like to distinguish between clicking on the checkbox itself (which should attempt to toggle the checkbox) and clicking on the text associated with the checkbox (which should allow an event listener to interpret this as clicking on the corresponding tree node and take whatever action is appropriate) is there a way to do these things? I looked around for JTrees with checkboxes can't find much. JIDE looks good but I need to use free open-source software (GPL is not ok LGPL is ok) in this case. (or create my own checkbox tree) I know this question has been answered already but i just want to clear some points: 1) JIDE Common Layer is dual-licensed (GPL with classpath exception and free commercial license). This means that you can use the Common Layer Project without any licensing issues. Please check the following link to confirm: http://www.jidesoft.com/products/oss.htm. The Common Layer includes an implementation of a checkable JTree (com.jidesoft.swing.CheckBoxTree). 2) There's a blog dated from 2005 from the Master himself Santhosh Kumar where he explains how to implement a JTree with checkboxes with the requirements you mentioned: http://www.jroller.com/santhosh/entry/jtree_with_checkboxes. It's worth reading it in my opinion. +1 for the license hint JIDE Common Layer brokes all your collor scheme because it installs its own UI didn't find up how to fix if someone know how please share it.  I have released a standalone Swing Checkbox Tree project available from Maven Central as org.scijava:swing-checkbox-tree. The package is based on John Zukowski's CheckBox Node Tree Sample code. It is BSD-2-licensed with no dependencies. It allows mixing and matching of DefaultMutableTreeNode and CheckBoxNodeData node types. It also allows check box nodes as non-leaf nodes. Regarding the question's issue #1: I did not test on all platforms but on my OS X systems the CheckBoxNodeData nodes are exactly the same height in pixels as the DefaultMutableTreeNode nodes. Regarding the question's issue #2: it uses a JCheckBox + JLabel in a JPanel (as aperkins suggests) to differentiate between clicking on a check box (to check/uncheck a node) versus a label (to select a node). Example usages: Simple: CheckBoxTreeSample Complex: WatchEventsFrame The latter example also has code for recursively toggling subtrees in response to boxes being checked or unchecked (see the treeNodesChanged method).  per @aperkins suggestion this is what I ended up doing in the TableCellRenderer it seems to work well: final private JPanel nodeRenderer = new JPanel(); final private JLabel label = new JLabel(); final private JCheckBox check = new JCheckBox(); ... // in constructor: final Insets inset0=new Insets(0000); this.check.setMargin(inset0); this.nodeRenderer.setLayout(new BorderLayout()); this.nodeRenderer.add(this.check BorderLayout.WEST); this.nodeRenderer.add(this.label BorderLayout.CENTER); The keys for getting rid of unwanted space in the margins seems to be (a) calling JCheckBox.setMargin() to reduce the checkbox margin and (b) using a BorderLayout for JPanel.  As for #2 you could make a panel be the editor/renderer and add a label along with the checkbox - the label would be the text and the check box would not have the text added to it. oh that's a good idea I hadn't thought of that. Just be aware that if you just copy the DefaultTreeCellRenderer code and replace the extension of JLabel with a JPanel you'll also have to remove a lot of the ""overridden for performance"" methods or you'll have a blank JTree."
515,A,"How can I resize the background of a JLabel or apply top and bottom borders only? I've got sort of weird issue that I can't seem to figure out. I have something that looks like this: As you can see ""Blambo"" is a JLabel with an opaque red background. The label sits on top of a little grey bar that has a single pixel blackish border all the way around it. I'd like my red warning to match the bar it's sitting on more nicely i.e. I either need to make it two pixels shorter and move it down a pixel or I need to apply the same single pixel border to the top and bottom only. Of those two the first is probably preferable as this piece of code is shared with other labels. Thanks in advance for the help. Edit: The code in question. bgColor = Color.red; textColor = Color.white; setBackground(bgColor); setOpaque(true); // This line merely adds some padding on the left setBorder(Global.border_left_margin); setForeground(textColor); setFont(font); super.paint(g); That border is defined thusly: public static Border border_left_margin = new EmptyBorder(0600); if you can add a little of existing code then we can try to figure out where the problem is!! I really don't think the code is all that interesting as it pretty much does EXACTLY what I described but I will. You can create a new border for the label like this : EDIT: after seeing your comment in another answer i created a compound border which gives you what you want. import java.awt.Color; import javax.swing.BorderFactory; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.border.Border; /** * @author Savvas Dalkitsis */ public class Test1 { public static void main(String[] args) { JFrame f = new JFrame(""Test""); JLabel c = new JLabel(""Hello""); Border b = BorderFactory.createCompoundBorder( BorderFactory.createMatteBorder(2 0 2 0 Color.black) BorderFactory.createEmptyBorder(0 100 0 0)); c.setBorder(b); f.getContentPane().add(c); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); f.setVisible(true); } } That is spot on exactly what I was looking for. Thanks!  Without seeing your code it's hard to know what you already know or have tried. You explicitly set the border of a component like so: myLabel.setBorder(BorderFactory.createMatteBorder(1 0 1 0 Color.BLACK)); Now JLabels are rather complicated beasts with a lot of code for measuring its (optional) icon and planning its layout around lots of general cases. You might be better off subclassing JComponent to write your own very simple label. That's actually pretty close. Is there anyway to have that border and preserve my left side padding? You need a compound border. See my answer for details."
516,A,"JTable Sort I know that Jtable can sort by a single column. But is it possible to allow for multiple column sort or do i need to write the code myself? Thanks in advance ETable from the netbeans collection. It is part of org-netbeans-swing-outline.jar A google search aught to turn it up. The ETable is primarily a foundation for Outline (a TreeTable) but it has multi-column ordering built in as well as many other nice features  Look into JXTable. JXTable is an extension of JTable that supports multi-column sorting as well as other functions that JTable doesn't provide. It's freely available from JDNC / SwingLabs. Are you sure there? Actually the JXTable API states: ""Sorting support is single column only."" Ok but it works with filters. you just have to put shuttlesorters into a filterpipeline  ""I know that Jtable can sort by a single column. But is it possible to allow for multiple column sort or do i need to write the code myself? "" Table sorting and filtering is managed by a sorter object. The easiest way to provide a sorter object is to set autoCreateRowSorter bound property to true; JTable table = new JTable(); table.setAutoCreateRowSorter(true); This action defines a row sorter that is an instance of javax.swing.table.TableRowSorter. _no_ is wrong - a JTable definitely supports multi-column sorts (see setSortKeys as mentioned in another answer) only the visual clue is showing on the primary sort column only  You should be able to set the TableRowSorter and the Comparator associated with it. Example: TableModel myModel = createMyTableModel(); JTable table = new JTable(myModel); TableRowSorter t = new TableRowSorter(myModel); t.setComparator(column that the comparator works against Comparator<?> comparator); table.setRowSorter(new TableRowSorter(myModel)); unrelated to multi-column sorts  You can sort by multiple columns by specifying more than one sort key when calling setSortKeys in the RowSorter you're using. a pity this isn't available in java5"
517,A,"Swing UIManager.getColor() keys is there a list somewhere of the UIManager.getColor() keys for Swing? I can't seem to find it online just occasional references to strings like ""Panel.background"" and ""Table.selectionBackground"". I found a handy Java Web Start App that should help: http://tips4java.wordpress.com/2008/10/09/uimanager-defaults/ I was looking for the same thing and found this page as well as an excellent overview of all these properties on http://nadeausoftware.com/node/85. New Link: http://www.devdaily.com/java/java-uimanager-color-keys-list +1 thanks!.... Looks like nadeausoftware.com is down.  @mmyers got me inspired. Here's a short program to list the UIManager defaults in a sortable table. package com.example.test.gui; import java.awt.Color; import java.awt.Component; import java.util.Map; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JScrollPane; import javax.swing.JTable; import javax.swing.UIManager; import javax.swing.table.DefaultTableCellRenderer; import ca.odell.glazedlists.BasicEventList; import ca.odell.glazedlists.EventList; import ca.odell.glazedlists.GlazedLists; import ca.odell.glazedlists.SortedList; import ca.odell.glazedlists.gui.AbstractTableComparatorChooser; import ca.odell.glazedlists.gui.TableFormat; import ca.odell.glazedlists.swing.EventTableModel; import ca.odell.glazedlists.swing.TableComparatorChooser; public class UIManagerDefaultsViewer { public static class UIEntry { final private String key; final private Object value; UIEntry(Map.Entry<ObjectObject> e) { this.key = e.getKey().toString(); this.value = e.getValue(); } public String getKey() { return key; } public Object getValue() { return value; } public Class getValueClass() { if (value == null) return null; // ?!?!?! return value.getClass(); } public String getClassName() { // doesn't handle arrays properly if (value == null) return """"; return value.getClass().getName(); } } public static class UIEntryRenderer extends DefaultTableCellRenderer { Color[] defaults = new Color[4]; public UIEntryRenderer() { super(); defaults[0] = UIManager.getColor(""Table.background""); defaults[1] = UIManager.getColor(""Table.selectionBackground""); defaults[2] = UIManager.getColor(""Table.foreground""); defaults[3] = UIManager.getColor(""Table.selectionForeground""); } public void setDefaultColors(Component cell boolean isSelected) { cell.setBackground(defaults[isSelected ? 1 : 0]); cell.setForeground(defaults[isSelected ? 3 : 2]); } @Override public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { Component cell = super.getTableCellRendererComponent(table value isSelected hasFocus row column); if (table.convertColumnIndexToModel(column) == 1) // the value column { final EventTableModel<UIEntry> tableModel = (EventTableModel<UIEntry>) table.getModel(); UIEntry e = tableModel.getElementAt(row); JLabel l = (JLabel)cell; if (value instanceof Color) { Color c = (Color)value; cell.setBackground(c); cell.setForeground( c.getRed()+c.getGreen()+c.getBlue() >= 128*3 ? Color.black : Color.white); // choose either black or white depending on brightness l.setText(String.format(""Color 0x%08x (%d%d%d alpha=%d)"" c.getRGB() c.getRed() c.getGreen() c.getBlue() c.getAlpha())); return cell; } else if (e.getKey().endsWith(""ont"")) // possible font not always "".font"" { // fonts are weird for some reason the value returned // in the entry set of UIManager.getDefaults() // is not the same type as the value ""v"" below Object v = UIManager.get(e.getKey()); if (v instanceof javax.swing.plaf.FontUIResource) { javax.swing.plaf.FontUIResource font = (javax.swing.plaf.FontUIResource)v; l.setText(""Font ""+font.getFontName()+"" ""+font.getSize()); } } } setDefaultColors(cell isSelected); return cell; } } public static void main(String[] args) { final EventList<UIEntry> uiEntryList = GlazedLists.threadSafeList(new BasicEventList<UIEntry>()); for (Map.Entry<ObjectObject> key : UIManager.getDefaults().entrySet()) { uiEntryList.add(new UIEntry(key)); } final SortedList<UIEntry> sortedUIEntryList = new SortedList<UIEntry>(uiEntryList null); // build a JTable String[] propertyNames = new String[] {""key""""value""""className""}; String[] columnLabels = new String[] {""Key"" ""Value"" ""Class""}; TableFormat<UIEntry> tf = GlazedLists.tableFormat(UIEntry.class propertyNames columnLabels); EventTableModel<UIEntry> etm = new EventTableModel<UIEntry>(sortedUIEntryList tf); JTable t = new JTable(etm); TableComparatorChooser<UIEntry> tcc = TableComparatorChooser.install(t sortedUIEntryList AbstractTableComparatorChooser.SINGLE_COLUMN tf); sortedUIEntryList.setComparator(tcc.getComparatorsForColumn(0).get(0)); // default to sort by the key t.setDefaultRenderer(Object.class new UIEntryRenderer()); JFrame f = new JFrame(""UI Manager Defaults Viewer""); // show the frame f.add(new JScrollPane(t)); f.pack(); f.setLocationRelativeTo(null); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.setVisible(true); } } In the NetBeans GUI builder when you edit a color you can pick from a JList with all of these listed (without the actual color values). That's actually where I got the idea that it might be possible to list them. A table is much nicer though.  They are kind of Look and Feel implementation dependent. Look in BasicLookAndFeel.java for the basic keys. Don't expect all PL&F to behave the same or even remain the same between versions.  I don't think there is a defined standard set of keys. But you could try this bit of code to list the ones currently available in alphabetical order: List<String> colors = new ArrayList<String>(); for (Map.Entry<Object Object> entry : UIManager.getDefaults().entrySet()) { if (entry.getValue() instanceof Color) { colors.add((String) entry.getKey()); // all the keys are strings } } Collections.sort(colors); for (String name : colors) System.out.println(name); This produces a list too long to reproduce here. Simple and elegant! Thanks!  This program is the best I've seen for visualizing the UIManager values (e.g. Fonts Colors Borders): http://tips4java.wordpress.com/2008/10/09/uimanager-defaults/ It lacks search but it can filter by component or value type which is pretty great."
518,A,"I need to represent allocation of 100% of some resource between 3 owners in GUI - any recommendations? For 2 owners the answer is easy - use a slider with one owner on the left the other on the right and slide to control the percentage of each. How do I do it with 3 or more owners? Specifically I'm talking about Java Swing-based GUI but am mainly looking for the design idea. Thanks! How about you have three sliders each from 0% to 100%. Increasing any one slider by X% decreases the other two by X/2%. You could have a radio button for each slider as well of which only zero or one can be selected at a time. If the radio button for a given slider is selected that slider is locked and increasing one of the other sliders by X% reduces the remaining slider by X%. Kinda clumsy. You could also have a pie chart with three slices and you can just drag the divider lines around. this was my initial thinking but it sounds complex as a GUI component mainly the fact that you either get the other two moving or that you need a complex mix of radio and sliders did you see this used anywhere? Nope... nowhere.  It sounds as though you need to create a new Component to effectively enable this functionality. One possible solution would be sub-classing JSlider and allowing multiple ""thumbs"" (I think that's the correct term) that you can't slide past each other. In this simple diagram the ""-"" represents units of the track and the ""|"" represents a thumb on the slider: --------|--------|-------- Here each of the three user's has an equal allocation of the resource. Rather than have a thumb represent the value for a user it would represent the upper or lower limit of that user's allocation and the distance between two thumbs (or one thumb and the end of the track) would be representational of the user's allocation. You can support any number of users by simply adding additional thumbs.  How about a pie chart where you have one segment per owner and the user can directly manipulate (drag with the mouse) the boundaries between segments or select a segment and type its percentage. Alternatively you could extend the slider to have more nobs on it so for splitting between 3 people it'd look like this: |-------O-----O-----------| aah man you beat me to the slider...  To separate the display and input what about spin controls that update say a pie chart? Each spin control movement up or down is 2 the other two controls then go down or up 1. This would work but as a user I don't like using spinners because they are a slow way of changing a value. I'd like to be able to adjust the chart directly too.  Create a triangle control where you can move a single point around. If it's in one of the corners it means 100% to that corner. If it's in the middle it means 33% to each.  Perhaps the easiest to implement would be this: 3 sliders one for each owner. Each owner gets assigned their_slider_value / total_of_all_slider_values. Some examples: If A is set to 0 B is set to 1/2 and C is set to full A gets 0% B gets 33.3% and C gets 66.6%  A = A_slider / (A_slider + B_slider + C_slider) = 0 / (0 + 1/2 + 1) = 0 = 0.0% B = B_slider / (A_slider + B_slider + C_slider) = (1/2) / (0 + 1/2 + 1) = 1/3 = 33.3% C = C_slider / (A_slider + B_slider + C_slider) = (1) / (0 + 1/2 + 1) = 2/3 = 66.6% If A B and C are all set at max value (or to the min value) they each get 1/3 Advantages: It should be intuitive (the relative values are the same; if A_slider is twice as full as B_slider it gets twice an many resources) You can use existing controls (i.e. it doesn't invent new controls) It's easy to represent 0% (you don't have to worry about sliders overlapping) It is easy to extend to 4 or 5 or an many owners as you need. Disadvantages: There are many ways to represent the same allocation If you wanted to put in a little more effort you could accompany the sliders with text (percentages) or a graphical representation (not something the user could manipulate) of the actual allocations that the sliders represented (either a bar filled in with the allocations or a pie chart etc)"
519,A,"Automatically size JPanel inside JFrame I have a JPanel subclass on which I add buutons labels tables etc. To show on screen it I use JFrame: MainPanel mainPanel = new MainPanel(); //JPanel subclass JFrame mainFrame = new JFrame(); mainFrame.setTitle(""main window title""); mainFrame.getContentPane().add(mainPanel); mainFrame.setLocation(100 100); mainFrame.pack(); mainFrame.setVisible(true); mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); But when I size the window size of panel don't change. How to make size of panel to be the same as the size of window even if it was resized? You need to set a layout manager for the JFrame to use - This deals with how components are positioned. A useful one is the BorderLayout manager. Simply adding the following line of code should fix your problems: mainFrame.setLayout(new BorderLayout()); (Do this before adding components to the JFrame) Further reading . The important thing in this case is that a JFrame's default layout manager is FlowLayout.  As other posters have said you need to change the LayoutManager being used. I always preferred using a GridLayout so your code would become: MainPanel mainPanel = new MainPanel(); JFrame mainFrame = new JFrame(); mainFrame.setLayout(new GridLayout()); mainFrame.pack(); mainFrame.setVisible(true); GridLayout seems more conceptually correct to me when you want your panel to take up the entire screen. What about BorderLayout.CENTER?.I think it can used mainly for these kind of cases.  From my experience I used GridLayout.  thePanel.setLayout(new GridLayout(abcd)); a = row number b = column number c = horizontal gap d = vertical gap. For example if I want to create panel with: unlimited row (set a = 0) 1 column (set b = 1) vertical gap= 3 (set d = 3) The code is below:  thePanel.setLayout(new GridLayout(0103)); This method is useful when you want to add JScrollPane to your JPanel. Size of the JPanel inside JScrollPane will automatically changes when you add some components on it so the JScrollPane will automatically reset the scroll bar.  You can set a layout manager like BorderLayout and then define more specifically where your panel should go: MainPanel mainPanel = new MainPanel(); JFrame mainFrame = new JFrame(); mainFrame.setLayout(new BorderLayout()); mainFrame.add(mainPanel BorderLayout.CENTER); mainFrame.pack(); mainFrame.setVisible(true); This puts the panel into the center area of the frame and lets it grow automatically when resizing the frame.  If the BorderLayout option provided by our friends doesnot work try adding ComponentListerner to the JFrame and implement the componentResized(event) method. When the JFrame object will be resized this method will be called. So if you write the the code to set the size of the JPanel in this method you will achieve the intended result. Ya I know this 'solution' is not good but use it as a safety net. ;)"
520,A,"Swing buttons don't react immediately! How can I change that? I've built a form with Netbeans's visual editor. When I press one of the buttons it should do the following : set it to disabled perform a task that takes some time when the task finishes the button will be enabled again However the following happens: the button remains in a pressed state until the task finishes when the task finishes the enabling/disabling of buttons will be very fast (they will happen but you won't notice them) This behaviour is not something I want. I tried using repaint on the JButton on the JFrame and even on the JPanel containing the button but I can't seem to get it to do what I want. Some hints? The Concurrency in Swing tutorial from Sun is well worth a read. Excellent explanation and background reading including the event dispatching thread using worker threads etc  You need to do the task that takes some time in a different thread. The reason the button is blocking is because the work is being done in the same thread that draws the button. Once the work is done the button can do the rest of what you tell it to. If you use a different thread the thread will go do the task while the drawing code can continue drawing the form.  When you do work in a button callback you are stalling the GUI painting thread until it completes. What you need to do is spawn a thread to do the long running task and then have that thread use SwingUtilities.invokeLater() to update the UI when it completes. Not using invokeLater is not thread safe and is generally bad mojo. A basic example is: button.setEnabled(false); new Thread(new Runnable() { public void run() { // Do heavy lifting here SwingUtilies.invokeLater(new Runnable() { public void run() { button.setEnabled(true); } }); } }).start(); The part with ""button.setEnabled(true)"" is taking place in the thread that does the work ? Should I pass the button to the thread ( in case I don't want to use anonymous classes ) ? It's taking place in the GUI Thread. See http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/SwingUtilities.html#invokeLater(java.lang.Runnable) As for how much you dislike anonymous classes that's up to you. You might want to put a try-finally in there too. Also it's more robust to calculate the new button state (in the EDT) rather than firing delayed messages with old state about the place. I forgot the run methods. Thanks Tom. Goes to show you how dependent I am of my IDE :) Sothe answer's yes? :) This answer is lacking in explanation - feel free to copy some of the explanation from my answer. Done. Thanks Paul. Made it community while I was at it. You might as well consider using SwingWorker (part of Java6 but exists as Open Source library for Java5) which will make the source code ligher (threading and EDT issues are handled by SwingWorker itself).  When you do things in a button callback you are essentially stalling the gui painting thread - not just for the button but for ANY gui painting. (Try covering the interface with another window and then exposing it again - it won't repaint until the task is finished!) What you need to do is spawn a thread to do the long running task and then have that thread use SwingUtilities.invokeLater() to do the enabling of the button. invokeLater forces the button enable to happen in the gui painting thread. You may want to set a busy cursor or otherwise lock the interface while the long-running thread is operating. Too bad we can't merge answers. @Allain the important thing is making sure the accepted answer is as good as we can make it."
521,A,"'Loading circle' or 'busy label' for Swing? I've used this 'LoadingCircle' project in .net applications. Is there an equivalent component that provides a loading circle for Swing? Are there any other loading indicators available for Swing. An implementation of an infinite (circular) progress bar in Swing is available here: http://www.jroller.com/gfx/date/20050215 Swing provides standard rectangular progress bars as well: http://java.sun.com/docs/books/tutorial/uiswing/components/progress.html Update: on the same page a few lines down the author states ""Only the AnimatedPanel.java and InfiniteProgressPanel.java files can be used freely without any restriction. Contact me for the other files."" The first link is what I was after but it doesn't seem to have any license information. :-( Although I'm pretty sure that the author provided the code for free as a public service you can contact the author at: romain.guy@mac.com  Although this post is old just in case anyone stubbles on this post Java7 now has support for an animating spinner by using JLayer class: http://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html#animating  There is also: A LGPL ""loading cicle"" here (from Daniel Schneller's answer). Another LGPL ""jbusycomponent"" here (from willcodejavaforfood answer).  SwingLabs has a JXBusyLabel - and there's a WebStart demo available. The swinglabs.org website is currently 404. Does this code exist somewhere else @Nate? @james.garriss I found the JXBusyLabel code in SwingLabs repo at https://java.net/projects/swingx/sources/svn/content/trunk/swingx-core/src/main/java/org/jdesktop/swingx/JXBusyLabel.java?rev=4316 It appears tons of links/documentation/etc. are broken on SwingLabs java.net site but it looks like the WebStart demo may be here - https://swingx.java.net/"
522,A,Swing: listeners execution order on custom component My custom component is composed of three JTrees inside a JPanel. Only one JTree should be selected at a time so I've added a TreeSelectionListener to each of them that calls clearSelection on the previously selected JTree. I'd like to add other TreeSelectionListeners to the JTrees being sure that the selection- handling listeners always get executed first. I'd prefer not to put everything in one single TreeSelectionListener. What should I do? Thanks in advance! Probably you could chain them by adding the new listener to the existing one in such a way the next time your listener gets invoked it in turn will forward the event to its listeners. // This is your current listener implementation class CustomTreeSelectionListener implements TreeSelectionListener { // listeners to which the even will be forwarded private List<TreeSelectionListener> ownLIsteners; public void addListener( TreeSelectionListener newListener ) { ownListeners.add( newListener ); } // add also removeListener( .... ) // TreeSelectionListener interface implementation... public void valueChanged( TreeSelectionEvent e ) { process( e ); // do what you do now // Forward the message. for( TreeSelectionListener listener : ownListeners ) { listener.valueChanged( e ); } } } Thanks that's a great solution! I wonder how I didn't get it before :) BTW I've got a new problem :/ (http://stackoverflow.com/questions/1466042/swing-how-can-i-ignore-deselection-events) I'm glad it was helpful. Maybe because sometimes we are too concentrated in one view of the problem that we don't see the other options. That happens to me quite often. Sometimes we just need a different point of view.  Not a very good solution but you can wrap code in a SwingUtilities.invokeLater(...). This will add the code to the end of the EDT which means it will ultimately execute after the other listener code has executed.
523,A,"How to get a ""ribbon"" UI component like in Office 2007 in a Java program? I want to create a ribbon-based GUI. I am pretty much a newbie when it comes to Java interfaces I have used the basic Swing toolkit but that's it. Can anyone point me in the right direction regarding what to do to get more flexibility with my UI and in particular being able to create a ""ribbon""? How IN THE WORLD is this off topic???? Someone was simply asking a qustion. Get off your high horse SO censors! Use Flamingo for the Ribbon and Substance for the Office 2007 look. Here's a small preview from Pushing Pixels: PS: Not directly related to your question but if you are new to Java UI programming make sure you don't miss out on MigLayout. Update 2013-11-05: Unfortunately Substantial and its successors are not actively maintained at the moment although in my experience they are complete and production ready. The current code can be found at Github at Insubstantial/insubstantial. (Where ""Flamingo"" has been integrated into the ""Insubstantial"" package) Also there seems to be a relatively up-to-date version available as a Maven artefact. (See http://mvnrepository.com/artifact/com.github.insubstantial) Great kick start thnx for the links! Insubstantial (http://shemnon.com/speling/2011/04/insubstantial-62-release.html) is better than Substance now Substance was discontinued :) @ChrisDennett I'm having trouble getting a copy of that to run. Is it anywhere else? Is it more up to date now? @Pureferret: Added links to Github and Maven. +1 was about to point to that direction myself"
524,A,Scrollable flow panel I need to create a panel where I can put some rectangles and it automatically reorder just inserting a scrollbar and growing up vertically. Also this panel can be resizable and again the rectangles must to be reordered to correctly be displayed inside the panel. If I understand the question you want components to wrap to the next line so that the panel grows vertically while the width remains fixed. If so then check out the WrapLayout  Use a JScrollPane. If you never want a horizontal scroll bar you can add the following: scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER); (By default the scroll pane will add horizontal and vertical scroll bars when required.) The scroll pane itself will only be resizeable if you add it to a Container with the appropriate layout manager; e.g. JFrame frm = new JFrame(); frm.setLayout(new BorderLayout()); JScrollPane sp = new JScrollPane(); frm.add(sp BorderLayout.CENTER); // Adding a component to the CENTER will cause the component to grow as the frame is resized.
525,A,"How to prevent multiple dialogs to appear at the same time? How can I avoid that a dialog is shown when there already is one on the screen? Details: In my application many Timers are running. If a fatal error occurs all the affected threads are going to show a JDialog (by swingx.JXErrorPane.showDialog()) which is not desired. Even if I cancel all the running Timers still some Dialogs will appear at the same time. How can I achieve that there will only appear one dialog? I tried to make the method which calls showDialog() synchronized which results in my whole GUI being blocked. Usage of a flag didn't work either. Turn the dialog into an observer and publish the error events to this new observer (see the Observer Design Pattern). When an event happens the dialog should show itself (with the main frame as the parent). Display the recent errors in a table in the dialog. Add new errors to the bottom of that table. Another option is to display the errors in a table in the main frame. Put the table into a JSplitPane so users can minimize it.  Yet another option would be to turn the dialog into a singleton: Give the dialog a private constructor. Create a ""private static MyDialog instance;"" - attribute in the dialog class. Create a ""public static MyDialog getInstance() { ... }; - method to return the instance and first instantiate it if it is null. Where MyDialog should be the name of the dialog window's class. Then each time you need to show the dialog you simply refer to the singleton: MyDialog.getInstance().showDialog(); Where showDialog just makes the dialog window visible."
526,A,"How can I catch AWT thread exceptions in Java? We'd like a trace in our application logs of these exceptions - by default Java just outputs them to the console. A little addition to shemnons anwer: The first time an uncaught RuntimeException (or Error) occurs in the EDT it is looking for the property ""sun.awt.exception.handler"" and tries to load the class associated with the property. EDT needs the Handler class to have a default constructor otherwise the EDT will not use it. If you need to bring a bit more dynamics into the handling story you are forced to do this with static operations because the class is instantiated by the EDT and therefore has no chance to access other resources other than static. Here is the exception handler code from our Swing framework we are using. It was written for Java 1.4 and it worked quite fine there: public class AwtExceptionHandler { private static final Logger LOGGER = LoggerFactory.getLogger(AwtExceptionHandler.class); private static List exceptionHandlerList = new LinkedList(); /** * WARNING: Don't change the signature of this method! */ public void handle(Throwable throwable) { if (exceptionHandlerList.isEmpty()) { LOGGER.error(""Uncatched Throwable detected"" throwable); } else { delegate(new ExceptionEvent(throwable)); } } private void delegate(ExceptionEvent event) { for (Iterator handlerIterator = exceptionHandlerList.iterator(); handlerIterator.hasNext();) { IExceptionHandler handler = (IExceptionHandler) handlerIterator.next(); try { handler.handleException(event); if (event.isConsumed()) { break; } } catch (Throwable e) { LOGGER.error(""Error while running exception handler: "" + handler e); } } } public static void addErrorHandler(IExceptionHandler exceptionHandler) { exceptionHandlerList.add(exceptionHandler); } public static void removeErrorHandler(IExceptionHandler exceptionHandler) { exceptionHandlerList.remove(exceptionHandler); } } Hope it helps.  There are two ways: /* Install a Thread.UncaughtExceptionHandler on the EDT */ Set a system property: System.setProperty(""sun.awt.exception.handler""MyExceptionHandler.class.getName()); I don't know if the latter works on non-SUN jvms. -- Indeed the first is not correct it's only a mechanism for detecting a crashed thread. Using Thread.UncaufhtExceptionHandler won't catch EDT exceptions. The EDT class catches all throwables and prints them out rather than letting them unwind the whole thread. You are also missing details about what is needed in the second option the MyExceptionHandler class must have a handle(Throwable) instance method accessable and a no-args constructor accessable.  There is a distinction between uncaught exceptions in the EDT and outside the EDT. Another question has a solution for both but if you want just the EDT portion chewed up... class AWTExceptionHandler { public void handle(Throwable t) { try { // insert your exception handling code here // or do nothing to make it go away } catch (Throwable t) { // don't let the exception get thrown out will cause infinite looping! } } public static void registerExceptionHandler() { System.setProperty('sun.awt.exception.handler' AWTExceptionHandler.class.getName()) } } Three years old but still a very useful answer. Thanks! No need to catch throwable. There will be no infinite looping. java.awt.EventDispatchThread.handleException is catching any exceptions for you. There saids `classs AWTExceptionHandler`"
527,A,"How do I detect if a display is in High Contrast mode? I'm testing my company's established Swing application for accessibility issues. With high contrast mode enabled on my PC certain parts of this application are rendered properly (white-on-black) and some incorrectly (black-on-white). The bits that are correct are the native components (JButton JLabel and whatnot) and third party components from the likes of JIDE. The incorrect bits are custom components and renderers developed in-house without consideration for high-contrast mode. Clearly it's possible to detect when high-contrast mode is enabled. How do I do this? Turns out the win.highContrast.on property was added in Java 1.4.1 for this purpose. public static void main(String[] args) { Toolkit toolkit = Toolkit.getDefaultToolkit(); Boolean highContrast = (Boolean)toolkit.getDesktopProperty( ""win.highContrast.on"" ); } This only works on Windows (hence the win. prefix). On linux and Mac highContrast will be null. It'll be safest to do a platform check first or a nullcheck on highContrast. Surely the fact that this property starts with ""win."" means that you don't have to do a platform check..? What are the odds that another platform will have this property set?  Extract from this link : http://www.section508.gov/IRSCourse/mod02/printJava.html ""Windows software can check for the high contrast setting by calling the SystemParametersInfo function with the SPI_GETHIGHCONTRAST value. Applications should query and support this value during initialization and when processing WM_COLORCHANGE messages."" This is to access via the Win32 API : http://msdn.microsoft.com/en-us/library/ms724947(VS.85).aspx (Not fully sure how though not really good in that field hope someone can complete) Googling for SPI_GETHIGHCONTRAST led me to find my answer so thanks.  Did you try Toolkit.getDefaultToolkit().getColorModel()"
528,A,"How to make industry standard desktop Java applications? I know how to create the basic controls in Swing but coming to industry standard application development I lack the skills to do them. I am designing a small Java Swing application. Instead of creating a JFrame for each purpose I would like to create controls display them hide them (whenever necessary) everything in just one window. How can I do it? I am a beginner. Please point me to nice web resources on the conventional ways of doing desktop Java applications using Swing. This [SO question](http://stackoverflow.com/questions/458817/java-swing-libraries-tools-layout-managers) might be helpful. Im not sure where i read this (old article) but since i read it i use it in all commercial desktop applications i make. First thing get Netbeans its the perfect IDE for Java UI design. The other Eclipse plugins are not as helpful nor powerful. Here is how i do it. In Netbeans create a new Java project lets call it MyComponents in this project create all your components you want. The base of any component should be a JFrame or a JPanel For this example will choose JPanel and call it mjPanel Next in the Design view drag and drop all the Swing components you want. Then from the Source view make all the actions and logic. Next the most important step right click your Java file from Tools choose Add to Palette then in the dialog choose where you want to put it like say Swing Components Palette. To finalize your component from Build menu choose Clean and Build this will create you a Jar file in the project folder/dist. From now on in each project you want to use this component just include the Jar file in your project classpath. Open the Swing Components Palette and you will see your new component. Like this: Hope this helps  Spring RCP is one although risky solution. It has some nice features and in my opinion it works pretty well for the most part. However the documentation is close to non-existing and the future of the project is uncertain. There are some users (including me) committed to RCP though so it will probably not die completely.  The Java Look and Feel Design Guide offers a detailed reference about the standards in user interface design with Swing and metal look and feel. If you are planning to use this cross platform l&f I definitely recommend you the reading.  I suggest you use NetBeans and create a project using the ""Swing Desktop Application"" pre-existing template. It will create the basic infrastructure for your app including a main window with a menu and status bar with a progress bar about box event handlers etc all pre-wired. What's nice about it for example is that the progress bar is already configured to listen to any action task that you create so by simply creating a new action task you get a working progress bar that will run when the task executes without having to code it. For more info see here. So that will make a normal Swing app right not a Netbeans-based app? @yar: it'll make a standard Swing Application Framework desktop application. By default to use the NetBeans GUI drag and drop the IDE will create resource files for you but you don't have to use them and you can configure the IDE to not use them. But then you lose the RAD GUI development. Very cool and interesting stuff. Should I ever head back to Java (now doing some UI in Mono Winforms) I'll be sure to check out Netbeans. I use Netbeans for all of my paid gigs right now (Ruby on Rails and PHP).  Run through the tutorial suggested by yar. I'd also recommend the excellent book ""Filthy Rich Clients"" by Romain Guy and Chet Haase (two big names in the Swing world). It'll teach you to make apps that look great.  Read a good book on the topic such as Core Java or Professional Java User Interfaces.  JDock offers a docking framework allowing you to present your application in a single frame divided into separate dockable areas. I confess I've never tried it though.  This is the most-read tutorial on Swing without a doubt. Run through the tutorial from beginning to end if you have time to learn the Swing way of doing things. At the same time try to locate a copy of JBuilder to see the template code that it creates for Swing apps. You will code by hand using Eclipse or whatever but JBuilder can show you some standard ways of doing things. If you can't get a copy check out some of the Swing plugins for Eclipse. In all cases try to keep in touch with the code yourself: most UI editors are only helpful in the suggestions they give you.  I haven't worked with it much but the Griffon project is attempting to standardize the MVC pattern for Swing applications. However it's written in the Groovy scripting language which then runs on the JVM. Griffon is actually mostly written in Java but it's true that it provides a nice Groovy based DSL for writing Views. However it's also true that you can write a Griffon application using a combination of Groovy Java Clojure Scala Mirah and/or Jython."
529,A,"What is the difference between the ways a Swing window can be initialized? I am curious as to the differences between the following approaches to creating a Swing window: Using java.awt.EventQueue.invokeLater() in main(); Using SwingUtilities.invokeLater() in main(); not bothering with threads at all simply instantiating the JFrame subclass and calling setVisible(true) from main without wrapping it inside a Runnable; this seems to work anyway. Thanks. SwingUtilities.invokeLater just calls EventQueue.invokeLater. The latter was introduced in Java 1.2. Before that Swing had a hack where it repainted a window to get onto the EDT. I would suggest that java.awt.EventQueue is the logical place for this method and the sensible one to call. However the relationship between Swing and AWT is seriously messed up. There is very little need to subclass JFrame and it is generally bad practice. But bad practice is the standard for Swing. Running multithreaded like that you can potentially run into problems although you might get away with it on your own machine. The worst possible thing you can do is a bit of initialisation on the EDT and a bit on the main thread (for a while it was 50/50 whether FindBugs (of all programs) would start on a single hardware-threaded machine). ""There is very little need to subclass JFrame and it is generally bad practice."" - now this got me interested. NetBeans did this for me automagically when creating the app skeleton. Can you please elaborate on why this is a Bad Thing? Don't quite see the problem with subclassing JFrame. If what you need logically is a subclass of JFrame create a subclass of JFrame... You very very rarely need a *subclass* of `JFrame`. Just like you very rarely need a subclass of `Thread`. @Tom: While I agree WRT Thread please defend that statement for JFrame. I think this is what Tom means: http://stackoverflow.com/questions/1143923/why-shouldnt-you-extend-jframe-and-other-components  The thing to bear in mind with threading is that ""seems to work"" isn´t the same as ""will demonstrably work under all circumstances"". The basic rule is you shouldn´t create Swing/manipulate components outside the event thread and application's main thread is ""outside the event thread"". So in your application startup code you should create your main window in an invokeLater(). If you're programming with Swing I would use the SwingUtilities version of invokeLater(). Even though I think functionally in current implementations one just calls the other I guess this could change in the future."
530,A,"Convert JPanel to image Is there a way to convert a JPanel (that has not yet been displayed) to a BufferedImage? thanks Jeff Well I give up. I've given you two answers in your last two postings that you've complelely ignore. Good luck with future postings. I appreciate the responses and I have not been ignoring them. On this post ScreenImage wasn't exactly what I was looking for and this method of just painting onto other graphics seemed to be the right direction for me. On the dialog box post it turned out to be a non-issue and I've been swamped so I haven't been replying to everything. I do appreciate your responses. Basically I'm building a component that needs to get written to an image but not displayed ScreenImage explains how to do what you want.  The answer from Tom is basically correct but invoke paint() directly is not recommended as it is a synchronous call and can interrupt with other operation on the swing thread. Instead of using paint() we should use print() instead public BufferedImage createImage(JPanel panel) { int w = panel.getWidth(); int h = panel.getHeight(); BufferedImage bi = new BufferedImage(w h BufferedImage.TYPE_INT_RGB); Graphics2D g = bi.createGraphics(); panel.print(g); return bi; }  From the BufferedImage you can create a graphics object which you can use to call paint on the JPanel something like: public BufferedImage createImage(JPanel panel) { int w = panel.getWidth(); int h = panel.getHeight(); BufferedImage bi = new BufferedImage(w h BufferedImage.TYPE_INT_RGB); Graphics2D g = bi.createGraphics(); panel.paint(g); return bi; } You may need to make sure you set the size of the panel first. @JeffStorey How u made the stuff present on panel visible in the image created?? Call panel.doLayout() as the first thing in the method. nice thanks. is there a way i can figure out what the panel size should be (maybe its preferred size)? I believe it's preferred size or current size as long as it has been rendered already. There are problems if it has not been rendered already - I cannot remember the exact specifics but I remember running into similar properties when implementing a printing system. Yep the preferred size works but as you said it doesn't render if the panel isn't displayed yet which doesn't really help me too much. Is there a way to ""render"" it but not display it on the screen? Basically I'm building a component that needs to get written to an image but not displayed. If you use panel.printAll(g) then it should work. Hmm..that printAll still doesn't work if the component hasn't been made visible yet.  Take a look at BasicTableUI. The cell renderer is drawn on image without showing and then drawn on visible table component."
531,A,Is it possible for Java apps to use the Aero Glass effect? Is it possible for a Swing based Java to have the Aero Glass effect as the background under Windows Vista/7? I know it is possible as it was achieved by the person who asked this question. I am currently researching the same thing and will post here if I find out how. After further research no. The built-in API for Swing applications doesn't have built-in aero compatibility.  It does already. From this unrelated answer -1 as the background not for the border  As of Java SE 6 Swing's native look and feel for windows uses Aero. There's a blog post with a lot of details about this from Chet Haase entitled Java on Vista : Yes it works The blog posts contain screenshots that show window titles in unreadable gray instead of the normal black and show some graphics glitches: Note the right borders of the minimize/maximize/close buttons of the inner windows here: http://weblogs.java.net/blog/chet/96dpi_swingset2.png @Zarel: It may be because the article is dated oct 2006. By now ( Java 6 update 14 ) it works just fine. I remember I had an screenshot of it. There are some other screenshots in this JavaLobby post that show darker window titles - http://www.javalobby.org/java/forums/t78880.html?start=30 Perhaps in Chet's the app was sent to the background by the screenshot software he had a horrible color scheme set or it was an earlier beta version of Java 6SE. I'd validate it with some screenshots myself but currently on my Macbook.
532,A,"How to wait for object creation in EDT without blocking EDT? I am using an API in a Java library which is called from the event dispatch thread and requires me to return a fully-initialized UI component. It looks like this: public JDialog createDialog(); But I can only populate the dialog after loading from a database which can take 10 seconds sometimes. Normally I would do that in a background thread but since this method is called from the EDT and since I have to return the dialog that won't work. It's a third-party library so I can't change the method but is there anything I can do to avoid blocking the EDT? ""Initialized"" is not necessarily the same thing as ""Populated"". ""Initialized"" usually means that the object has been fully constructed but may not have any data. ""Populated"" of course means that the data is present and any data-fetching tasks are complete. So it is possible to give your third-party library a fully initialized JDialog without any data at all. The way I always like to solve this problem is to create a custom JDialog which displays a busy message or a progress bar or the like and then request the data in another thread. When the data is returned I replace the busy message with the data(On the EDT!). As to how you should perform your request in a background thread I recommend using SwingWorkers. I like to use a private SwingWorker inside my custom JDialog which handles the request in the doInBackground() method and handles the Display-related tasks in the done() method. Doing it this way will ensure that display-related tasks only occur on the EDT and database-related tasks only occur OFF the EDT. If you'd like a reasonably good introduction to using SwingWorkers check out Sun's tutorial on worker threads. A simple example would be: public class DBDIalog extends JDialog{ private JLabel busyLabel = new JLabel(""Fetching data from DataBase""); public DBDialog(){ //do your initialization stuff here } private class DBFetcher extends SwingWorker<VoidDBInfo>{ @Override protected DBInfo doInBackground() throws Exception{ return fetchDataFromDB(); //or whatever database call to make } @Override protected void done(){ try{ DBInfo info = get(); //replace your busy label with your DBInfo }catch(InterruptedException e){ //do appropriate thread interrupted stuff }catch(ExecutionException e){ //do appropriate general error handling stuff } } } } A few things to remember though: the done() method is NOT abstract so you aren't required to override it. You should though. If your doInBackground() implementation throws an exception that exception will be swallowed unless done() has been overridden. Also don't make changes to your GUI from inside the doInBackground() unless you use SwingUtilities.invokeLater(Runnable) as doInBackground() is executed from a different thread than the EDT and making GUI changes from a background thread is asking for strange and inexplicable bugs. When should this be used? Unlike other programming tasks the point at which something takes too long to respond is a lot shorter in GUIs--The number I've usually seen written down is about 250ms. If your task takes longer than that it should be in a background thread. In your case 10 seconds should definitely be in a background thread but then you already knew that :) EDIT: Seeing your comment I see that most of my post is pretty moot. However you can still use a SwingWorker: Have your SwingWorker perform the data-retrieval and in the done() method have it construct the JDialog from the data and hand that dialog to your third-party library. That last part about ""have it construct the JDialog from the data and hand that dialog..."" is what's difficult. If my method is called on the EDT how can I run something in the background and then wait for it to return (so I can construct and return the dialog) without blocking other events posted on the EDT between when I am called and when I return? It seems like maybe SwingWorker does not solve that. Nevertheless yours was the better of the two answers. You can override `process()` to display intermediate results and/or call `setProgress()` as required. Here's an example: http://sites.google.com/site/drjohnbmatthews/randomdata  Construct the dialog without data and then start a task to populate it. From a user-experience perspective anything that takes 10 seconds from initiation to completion is going to be an issue. It's best if you should them something right away even if it's not in final form. If necessary you could pop a modal dialog that simply says ""Loading."" According to the documentation for this library it must be fully-populated when I return it (sorry if I was not clear on that point before). I don't know what will happen if I populated it afterwards but I'd guess it would be bad since they specify that it must be fully populated. Other documentation for that package seems to indicate that I should load the data first then populate the dialog and return it but I don't know how to do that without blocking the EDT. *Scott Fines* gave you a good answer: kick off the background process to load the data then at the end of that process create your dialog (back on the EDT). And so that the user isn't wondering what's happening display a temporary dialog while you're retrieving the data."
533,A,"How can I refresh a JTree after adding some nodes to the underlying model? First of all let me say that I dont use the DefaultTreeModel. I implement my own TreeModel so i cant use the DefaultXXX stuff. The problem is this: Through some addStuff() methods which my model defines I add nodes to the underlying data structure. I then notify listeners by calling treeNodesChanged() inside the addStuff() function (I Know there are treeNodesInserted methods but it is the same thing. It just notifies listeners with a different method). Now one of the listeners is a static class in my main form and this listener can tell the JTree which is also contained in my main form to refresh itself. How do I tell the JTree to ""reload"" some or all of its nodes from the model? UPDATE: Found this question that although not exactly the same it gives the answer I want. UPDATE 2: My problem was not how to notify the viewer (the JTree) but rather in what way should the jtree be reloaded after the notification from the model. First of all let me say that the only way i know to refresh a tree to reflect underlying changes is to call the updateUI() or reuse the setModel() method. Essentially my problem is this: Suppose the TreeModelListener has just been notified (through the TreeModelListener API) that a change has occured in the model. Ok what now? I have this problem because the JTree does not implement TreeModelListener. So the listener in my situation is the JTree's container or an internal class implementing the Listener living under the same container as Jtree. So suppose I am a TreeModelListener implementation living happily in a JForm with my brother JTree. Suddenly my method treeNodesInserted(TreeModelEvent evt) is called. What do I do now? If i call Jtree.updateUI() from inside me then the model's listeners List throws ConcurrentModification Exception. Can I call something else other than updateUI? I tried a number of things but only updateUI refreshed the JTree. So I did it outside of the listener. From the JForm I just call the model's method that alters the undrlying structure and then i call updateUI. No TreeModelListener gets used. UPDATE3: I found out that there are implicit TreeModelListeners registered. In my model's addTreeModelListener(TreeModelListener listener) implementation i put a debug system.out line: System.out.println(""listener added: "" + listener.getClass().getCanonicalName()); and I saw this debug output just when I executed jTree.setModel(model): listener added: javax.swing.JTree.TreeModelHandler listener added: javax.swing.plaf.basic.BasicTreeUI.Handler The ConcurrentModificationException is caused because a call to jtree.updateUI() re registers the listener (only the plaf not both) so it is thrown when i call updateUI inside a listener notification loop. The only way now to refresh the tree is do it outside of TreeModelListener. Any comments or ideas for a better solution? Am I missing something? Since my change originates from a method in a JForm (which contains the model and the Jtree) I didnt use the TreeModelListener at all. I just call the model's addStuff() which inserts nodes in the model's structure and then I manually call updateUI() on the tree. If i implemented updateUI() in a TreeModelListener implementation in the JForm then I got concurrent modification exception on the listener's list. I didnt investigate much and I am sure it is not an elegant solution but I am currently prototyping and dont care for the internal implementations at the moment. @Sven I voted for closing it. Can I do it immediately without voting? And it would be nice to post the solution you used. If you found your answer you can close the question @Sven why don't you explain to us how you expect just him to close the question. I faced the same ""problem"": calling treeNodesInserted() did not cause my JTree to update its contents. But the problem was in other place: I used wrong constructor for TreeModelEvent. I thought that I can create TreeModelEvent for treeNodesInserted() like that: //-- Wrong!! TreePath path_to_inserted_item = /*....*/ ; TreeModelEvent tme = new TreeModelEvent(my_source path_to_inserted_item); This doesn't work. As stated in TreeModelEvent docs this constructor is only needed for treeStructureChanged(). But for treeNodesInserted() treeNodesRemoved() treeNodesChanged() we should use another constructor: TreePath path_to_parent_of_inserted_items = /*....*/ ; int[] indices_of_inserted_items = /*....*/ ; Object[] inserted_items = /*....*/ ; TreeModelEvent tme = new TreeModelEvent( my_source path_to_parent_of_inserted_items indices_of_inserted_items inserted_items ); This code works and JTree updates its contents properly. UPD: Actually docs are unclear about using these TreeModelEvents and especially with JTree so I want to tell about some questions that came to me when I tried to figure out how to deal with all this stuff. Firstly as Paralife noted it his comment cases when nodes are inserted/changed/removed or when tree structure is changed aren't orthogonal. So Question #1: when should we use treeNodesInserted()/Changed()/Removed() and when treeStructureChanged()? Answer: treeNodesInserted()/Changed()/Removed() can be used if only all the affected nodes have the same parent. Otherwise you may make several calls to these methods or just call treeStructureChanged() once (and pass the root node of affected nodes to it). So treeStructureChanged() is a kind of universal way while treeNodesInserted()/Changed()/Removed() are more specific. Question #2: As far as treeStructureChanged() is a universal way why do I need to deal with these treeNodesInserted()/Changed()/Removed()? Just call to treeStructureChanged() seems to be easier. Answer: If you use JTree to display contents of your tree then the following thing might be a surprize for you (as it was for me) : when you call treeStructureChanged() then JTree doesn't keep expand state of sub-nodes! Consider the example here's contents of our JTree now: [A] |-[B] |-[C] | |-[E] | | |-[G] | | |-[H] | |-[F] | |-[I] | |-[J] | |-[K] |-[D] Then you make some changes to C (say rename it to C2) and you call treeStructureChanged() for that:  myTreeModel.treeStructureChanged( new TreeModelEvent( this new Object[] { myNodeA myNodeC } // Path to changed node ) ); Then nodes E and F will be collapsed! And your JTree will look like that: [A] |-[B] |-[C2] | +-[E] | +-[F] |-[D] To avoid that you should use treeNodesChanged() like that:  myTreeModel.treeNodesChanged( new TreeModelEvent( this new Object[] { myNodeA } // Path to the _parent_ of changed item new int[] { 1 } // Indexes of changed nodes new Object[] { myNodeC } // Objects represents changed nodes // (Note: old ones!!! // I.e. not ""C2"" but ""C"" // in this example) ) ); Then expanding state will be kept. I hope this post will be useful for somebody. Ok 4 years after the question I cant verify this. In fact I havent touched java stuff since then.But anyway I read the docs you mention and indeed the docs differentiate the constructor based on if the structure has changed or nodes have been inserted/removed. But these two cases are not orthogonal. Doesnt the tree structure changes when a node gets inserted/removed? The description of the constructor I use says: ""Used to create an event when the node structure has changed in some way"". Anyway I will mark it as correct. Thanks. @Paralife yes these cases aren't orthogonal. Actually docs are unclear about some things so I updated my answer (added explanation of things that were unclear personally for me) check it if you want. Thanks for marking my answer by the way =) Hi Dmirty!! I found your answer very useful..Big thanks..i wanted to know that what code/line should i write inside treeNodesChanged() to actually update the UI..How do i use the TreeModelEvent object that i got to update that particular UI part of the tree? @ayush if you use `JTree` to display your tree then you should just give your `TreeModel` instance to the `JTree` and then `JTree` will add its listener to your `TreeModel` and will be updated just when you call `myTreeModel.treeNodesChanged(...)`. If it isn't updated it means that you give wrong arguments to `treeNodesChanged()`. Make sure you give old (unchanged) objects as last argument.  FINAL UPDATE: Found the problem and solved it: The following steps solve the problem(but see the accepted answer for a better solution and a deep explanation of the problem): The implicit listeners registered are enough to do the job. No need to implement my own listener. When adding nodes and calling treeNodesInserted() it doesn't work (JTree not updated). But It works with calling treeStructureChanged(). Apparently the implicit listeners are internally refreshing the tree the way i want but only in their treeStructureChanged() method implementation. It would be good for JTree to provide this ""algorithm"" as a function in order to be able to be called manually. The way it should work according to the MVC approach is that the model is monitored for changes by an Observer or Listener and the changes are passed on to the view. Usually this is done by a controller class if it acts as mediator. `treeNodesInserted()` **does** work (JTree **is** updated) you just need to use proper `TreeModelEvent`. Check my answer below for details. All of Swing is based on the idea that a model tells its view to refresh itself and the view figures it out. You're looking for an API that breaks this. I though that the principle was not ""the model tells the view to refresh"" but rather ""the model tells the view it has changed"" and the view should be free to act however it wants.. Maybe the view doesnt want to refresh. Maybe It wants to continue getting notified but i think it is a bit restrictive to have the model implicitly tell the view what to do after it gets notified. In the particular situation it would not break anything and it would be best if the jtree just provided a refreshPath() method and I could just implement my listener and have it call the method when ever I wanted.  Yesterday I struggeled around to fix the same issue. The requirement was to insert and remove nodes on the fly without collapsing the the expanded tree nodes. I browsed the web and found a bunch of possible solutions until I stumbled over this thread. Then I applied the anwser from 'Dmitry Frank' with the TreeModelEvent. I was a bit confused why it is such a big issue to just insert or remove a simple node and let the rest of the JTree untouched! Finally the plain vanilla examples from java2s helped me to find the probably simplest solution at all. (Neither a call like: nodeStructureChanged nodeChanged nodesWereRemoved nodesWereInserted etc. nor a TreeModelEvent like suggested by 'Dmitry Frank' was required.) Here's my solution: // Remove a node treeModel.removeNodeFromParent(myNode); // Insert a node (Actually this is a reinsert since I used a Map called `droppedNodes` to keep the previously removed nodes. So I don't need to reload the data items of those nodes.) MyNode root = treeModel.getRootNode(); treeModel.insertNodeInto(droppedNodes.get(nodeName) root root.getChildCount()); Keep it simple ;)  I also found implementing TreeModel a bit confusing when the tree consist of more than just Folders(root) and Files(child) so I've used the DefaultTreeModel. This works for me. The method creates or refreshes the JTree. Hope this helps.  public void constructTree() { DefaultMutableTreeNode root = new DefaultMutableTreeNode(UbaEnv.DB_CONFIG); DefaultMutableTreeNode child = null; HashMap<String DbConfig> dbConfigs = env.getDbConfigs(); Iterator it = dbConfigs.entrySet().iterator(); while (it.hasNext()) { Map.Entry pair = (Map.Entry) it.next(); child = new DefaultMutableTreeNode(pair.getKey()); child.add(new DefaultMutableTreeNode(UbaEnv.PROP)); child.add(new DefaultMutableTreeNode(UbaEnv.SQL)); root.add(child); } if (tree == null) { tree = new JTree(new DefaultTreeModel(root)); tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION); tree.addTreeSelectionListener(new TreeListener()); } else { tree.setModel(new DefaultTreeModel(root)); } }  Your TreeModel is supposed to fire TreeModelEvents when it changes and the JTree observes your model though a TreeModelListener to refresh itself when your model changes. So if you implement the TreeModelListener support correctly you do not need to observe the model and inform the JTree as it already does so itself. From an MVC perspecive the JTree is your View/Controller and the TreeModel is your Model (or rather: model adapter) which is observable. You could try force the JTree to update its visual state by calling repaint() but I would recommend not doing so as it's not guaranteed to work. When you're unsure of how to do a fine-granular notification to a TreeModelListener use TreeModelListener.treeStructureChanged(..) to notify a 'whole model' update (warning: can cause selections and node expansion states to be lost). One does not need to implement `TreeModelListener` since `JTree` has its own listener. One should call `treeNodesInserted()` with **correct `TreeModelEvent` object**. See my answer for details. My problem was not how to notify the viewer (the JTree) but rather in what way should the jtree reload itself after the notification from the model. And also if there is possible for the jtree to reload only a portion.  I've always found the TreeModel a bit confusing. I agree with the above statement that the model should notify the view when a change is made so the view can repaint itself. However this does not seem to be the case when using the DefaultTreeModel. I find you need to invoke the reload() method after updating the model. Something like: DefaultTreeModel model = (DefaultTreeModel)tree.getModel(); DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot(); root.add(new DefaultMutableTreeNode(""another_child"")); model.reload(root); actually I'm pretty you wouldn't use the structuryChanged hammer for a simple insert ;-) Which is supported in DefaultTreeModel api - simply use that instead of changing the underlying dataStrucure (aka: node wiring) under the model's feet DefaultTreeXXXX API is not an option. I implement my own tree model."
534,A,"How to receive key events during a drag&drop? I'm currently trying to receive key events during a drag and drop but it seems to me that the focus is taken away while dragging so that I can't listen to any key events. I'm dragging a JComponent subclass that implements KeyListener and requests the focus in the DragSourceListener's dragEnter method but my assumption is that the focus is taken away from it afterwards. Now who's got the focus and how can I take it away back to my JComponent. Or is there a different approach that is more suitable for dnd? Thank you in advance. UPDATE: It's a lot of code necessary to make this work so I'm only going to post some snippets to show you what I'm trying to do: public class Stone extends JComponent implements Serializable KeyListener { public Stone(...) { //... setFocusable(true); addKeyListener(this); this.dragSource = DragSource.getDefaultDragSource(); this.dgListener = new StoneDGListener(); this.dsListener = new StoneDSListener(); this.dragSource.createDefaultDragGestureRecognizer( this DnDConstants.ACTION_MOVE this.dgListener ); //... } //... public void keyPressed(KeyEvent e) { System.out.println(""Stone: ""+e.getKeyCode()); } //... public class StoneDSListener implements DragSourceListener Serializable { //... @Override public void dragEnter(DragSourceDragEvent dsde) { //... Stone.this.requestFocus(); addKeyListener(Stone.this); } //... } } What happens is that before I'm dragging the Stone component my JPanel has the focus so it receives any keys I'm pressing. During the drag I can't listen to any pressed keys(so I don't know who's got the focus) even though I'm requesting it when in dragEnter() and after I release the Stone any key events are send to the Stone. It's probably not important for the question but to illustrate what I'm doing here's a screenshot: (Here I'm dragging the Stone from the collection below to the game field on the top). In this state I don't know how to find out what keys are pressed. I need to figure this out in order to be able to rotate the Stone. is it possible to put the code you are using? And are you using any IDE? I tried to put in as much code as I thought would be helpful. I don't think it makes any difference but I'm using Eclipse Ganymede without any plugins. Btw. this isn't an applet but a standard desktop application. Not sure who has focus during a drag and drop. But an alternative solution to your problem would be to add a KeyEventDispatcher for your Stone class to the KeyboardFocusManager. From the JavaDoc: The KeyboardFocusManager is both a centralized location for client code to query for the focus owner and initiate focus changes and an event dispatcher for all FocusEvents WindowEvents related to focus and KeyEvents+. + my emphasis. Basically we use similar sort of code to intercept KeyEvents before they hit the Component that has focus. Just gave it a quick test for your particular drag and drop context and it seems to work alright (as long as your application has focus within the operating system). Essentially something along the lines of: Public Stone(...) { // ... KeyboardFocusManager fm = KeyboardFocusManager.getCurrentKeyboardFocusManager(); fm.addKeyEventDispatcher( new KeyEventDispatcher() { public boolean dispatchKeyEvent(KeyEvent e) { System.out.println(""Key Press: "" + e.getKeyChar()); return false; } } ); // ... } You will need to do a bit of leg-work on enabling and disabling when the user is no longer dragging and dropping as my test currently prints all the time. I also wonder if it is possible to use the KeyboardFocusManager to determine who actually ends up with focus during a drag and drop? Anyway I hope this gives you a few new ideas to try. That looks really promising and works very well so far. I haven't had time to work out the enabling/disabling part but that doesn't seem to be very complicated. I'll accept your answer as soon as I found the time to give this a try. Thanks a lot ! Worked very well. Thanks!"
535,A,Tomcat update event I am working on an application which uses tomcat as a web server and java swing app. as only client to communicate to the web server via webservices. I am stuck in a situation where i need the server to somehow notify the client of some kind of updated event that occurred on the server side. Something like reverse ajax or similar. Any ideas... Abdul Khaliq The most common approach will be your client to poll the server. This means to issue periodically requests to the server to ask for new events. This will introduce a delay between the appearance of an event and its notification to the client. Another approach is to issue an HTTP request from the client and leave it open until an event appears. This way the notifications arrive immediately after an event. When an event is reported you issue another request. This approach has the disadvantage that it greatly restricts the number of clients that a server can server at any time. The default value of threads for Tomcat is 150. For every http request you need one thread so you can't have more than 150 open requests. Notice that new tomcat has comment support which should handle long polls much more efficiently without wasting threads. Which version of Tomcat are you referring to? Where can I find more info? One important thing to mention is thread management: the polling thread (NOT the EDT) will have to feedback to the GUI through SwingUtilities.invokeLater() or invokeAndWait().
536,A,"How to set an image as a background for Frame in Swing GUI of java? I have created one GUI using Swing of Java. I have to now set one sample.jpeg image as a background to the frame on which I have put my components.How to do that ? There is no concept of a ""background image"" in a JPanel so one would have to write their own way to implement such a feature. One way to achieve this would be to override the paintComponent method to draw a background image on each time the JPanel is refreshed. For example one would subclass a JPanel and add a field to hold the background image and override the paintComponent method: public class JPanelWithBackground extends JPanel { private Image backgroundImage; // Some code to initialize the background image. // Here we use the constructor to load the image. This // can vary depending on the use case of the panel. public JPanelWithBackground(String fileName) throws IOException { backgroundImage = ImageIO.read(new File(fileName)); } public void paintComponent(Graphics g) { super.paintComponent(g); // Draw the background image. g.drawImage(backgroundImage 0 0 this); } } (Above code has not been tested.) The following code could be used to add the JPanelWithBackground into a JFrame: JFrame f = new JFrame(); f.getContentPane().add(new JPanelWithBackground(""sample.jpeg"")); In this example the ImageIO.read(File) method was used to read in the external JPEG file. This doesn't quite answer the question. It puts a background image on a panel but then it just inserts the panel into the normal layout. The question was how to set a background on a frame behind other components. Thanks Coobird  Here is another quick approach without using additional panel. JFrame f = new JFrame(""stackoverflow"") { private Image backgroundImage = ImageIO.read(new File(""background.jpg"")); public void paint( Graphics g ) { super.paint(g); g.drawImage(backgroundImage 0 0 null); } }; I've not found this technique to work properly. The image sometimes draws over the child components or sometimes gets covered by the normal frame background when it shouldn't.  You can either make a subclass of the component http://www.jguru.com/faq/view.jsp?EID=9691 Or fiddle with wrappers http://www.java-tips.org/java-se-tips/javax.swing/wrap-a-swing-jcomponent-in-a-background-image.html  The Background Panel entry shows a couple of different ways depending on your requirements.  This is easily done by replacing the frame's content pane with a JPanel which draws your image: try { final Image backgroundImage = javax.imageio.ImageIO.read(new File(...)); setContentPane(new JPanel(new BorderLayout()) { @Override public void paintComponent(Graphics g) { g.drawImage(backgroundImage 0 0 null); } }); } catch (IOException e) { throw new RuntimeException(e); } This example also sets the panel's layout to BorderLayout to match the default content pane layout. (If you have any trouble seeing the image you might need to call setOpaque(false) on some other components so that you can see through to the background.)"
537,A,"How can I change the size of frame? I have a frame which has a menu item for choosing the font and its size when the user choose her/his font size all the text of buttons panels which are in my program (has many frames) will be changed but they will be bigger than the size of frames. What should I do for changing the size of my frames at run-time? Edit: Also with using pack method how can I call it in my mainFrame to change all the other frames? I used invalidate method but it did nothing when i used pack method everything was OK except the size of panelswhy??? Try using : validate() and invalidate() methods frame.pack() will pack to the best-fit-preferred-size as decided internally. Sometimes this is not what you want. Instead I would suggest using validate() and invalidate() methods which will relayout the contents of your frame with the new sizes.  frame.pack(); This: ""Causes this Window to be sized to fit the preferred size and layouts of its subcomponents. If the window and/or its owner are not yet displayable both are made displayable before calculating the preferred size. The Window will be validated after the preferredSize is calculated."" See Here thanks I get it [:-)] Excuse meif I have lots of frames what should I do?? You can also call frame.setSize(int width int height); on each of them to set their sizes explicitly. If this isn't possible then invalidate() should mark the frames as needing to be laid out. This will cause your layout manager to reposition and size everything in the frame."
538,A,"Swing: How to achieve forwarding of all events from subcomponents to parent container? I'm looking for a straightforward way to make a Swing component forward all received events to its parent container (or even all parents up to root). EDIT: Where do I need this? I have a diagram editor. Components must forward key press and mouse clicks (to set themselves as ""active"" as soon as the user clicks a subelement of that component). First let me present my existing solution for this. It's a bit of a workaround. public interface IUiAction { void perform(Component c); } public static void performRecursiveUiAction(Container parent IUiAction action) { if (parent == null) { return; } for (Component c : parent.getComponents()) { if (c != null) { action.perform(c); } } for (Component c : parent.getComponents()) { if (c instanceof Container) { performRecursiveUiAction((Container) c action); } } } /** * 1) Add listener to container and all existing components (recursively). * 2) By adding a ContainerListener to container ensure that all further added * components will also get the desired listener. * * Useful example: Ensure that every component in the whole component * tree will react on mouse click. */ public static void addPermanentListenerRecursively(Container container final IUiAction adder) { final ContainerListener addingListener = new ContainerAdapter() { @Override public void componentAdded(ContainerEvent e) { adder.perform(e.getChild()); } }; // step 1) performRecursiveUiAction(container adder); // step 2) performRecursiveUiAction(container new IUiAction() { @Override public void perform(Component c) { if (c instanceof Container) { ((Container) c).addContainerListener(addingListener); } } }); } Usage: addPermanentListenerRecursively(someContainer new IUiAction( @Override public void perform(Component c){ c.addMouseListener(somePermanentMouseListener); } ) ); By looking over the code would you say it's a good concept? The problem with my current concept is: It's forwarding only events for which a listener was specified manually. Can you suggest a better one? I encountered the consume() method on some swing events which is used to indicate you consumed the event in your handler. I think the opposite is what you need. For example: Mouse click mouse drag (to ""activate"" a visual diagram element) all kinds of hot keys ... This looks like it would get a bit tricky if every component in your view handled the same mouse event. ie if the user drags item 1 item 2 would process those events as well? if i understand correctly you are looking to have this and this.parent and this.parent.parent handle mouse actions on this. in that case the recursion would be up and not down. you could create an Interface like this: public interface MyInterface() { public void performSpecialAction(Event event); } you then have your containers implement this interface. your components would then need to incorporate this call to their appropriate event handling: public static void performRecursiveUiAction(Component comp Event event) { if (comp.getParent() == null) { return; } if (comp.getParent() instanceof MyInteface) { ((MyInterface)comp.getParent()).performSpecialAction(event); } ThisUtility.performRecursiveUiAction(comp.getParent() event); } yes it would be a upward recursion.  Either you get the events from the components and in this case you register the listeners where you need to capture events. Pro is that you can select where to capture events and you have the choice to receive them selectively by source. Con is that you have to register as much listener as much source you have... Or use the glass pane and capture all before it propagates to components. In this case you capture them all and you must write custom handling code if you want to tie them to components under the glass pane. (Assuming you kept your glass pane empty...) Here is an example that captures events before it reaches the components and even forwards it to selected ones: http://download.oracle.com/javase/tutorial/uiswing/components/rootpane.html#glasspane Middle ground is to use the layered pane to create transparent components (glasspane like things) above whatever you need. Also you can consume() events too... Your main problem is a tradeoff that you either capture events before swing handles (and write custom handling from scratch) them or after (and have some interference from the handling you might have to hack around) but you can't modify the handling code itself by subclassing anything (or can you? never seen so far...).  Based on your scenario I have a suggestion for the keyboard side of things: You could use the KeyStroke facility of swing for that: JRootPane rp = getRootPane(); KeyStroke ks = KeyStroke.getKeyStroke(KeyEvent.VK_F2 0 false); rp.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(ks ""F2""); rp.getActionMap().put(""F2"" new AbstractAction() { public void actionPerformed(ActionEvent e) { onF2Action(); } }); This way you can register 'global' event handlers for shortcuts1. 1 although it might have some limitations in your case. For the mouse-event case I would create a recursive function which adds a MouseAdapter instance to every targeted component. For example: void addToAll(Container c MouseAdapter a) { for (Component p : c.getComponents()) { if (p instanceof InterrestingComponent) { p.addMouseListener(a); p.addMouseMotionListener(a); p.addMouseWheelListener(a); } else if (p instanceof Container) { addToAll((Container)p a); } } } Just to capture the concept. You might need different or multiple receivers for various components. Edit: Sorry I accidentally said WindowAdapter instead of MouseAdapter. On a sidenote: One of the good things about Swing in contrary to Delphi that it makes you easy to inject multiple event handlers practivally everywhere you want whereas Delphi's GUI model was based on single the onSomething approach in my time."
539,A,"Swing: Problem distinguishing between user-induced and automatic components resizing (Writing a custom LayoutManager) I'm trying to write an own layout manager. Components must be placed and sized relative to each other. This means: when the user drags or resizes an component some other components (but not the one altered manually by user) have to be altered. Swing tells the layout manager to layout the components every time when some of them is moved/resized. This is a problem hence the layout manager itself moves/resizes components: It fails the method layoutContainer(Container parent) is called multiple times. An example of the whole thing (simplified in fact my layout manager does more complex stuff): [-component1-][-component2-------][-component3-] user resizes component2 to be smaller my layout manager would adjust other components so that all of them would take same space as before: [-component1-][-component2-][-component3-------] here the actions should stop but they go on: now the layout manager is invoked because of resizing component3 How could I achieve my intention (in an elegant way)? Thank you. EDIT: Removed threading-related information after suggestions by answerers. This isn't a thread synchronization issue. You said that when users change the size or location of an object other objects must be altered. I'm guessing that you are listing for some kind of change event so that you can trigger a recalculation of the layout whenever the user changes an object. If so I'm further guessing that your layout manager is triggering this event causing it to be invoked again. Of course this is only speculation without reviewing your code. somewhere you are listening to events otherwise your components couldn't resize. Something the user is doing is resizing so you musth ave a mouse listener or drag listener. You could trap mouse down set a flag on your layout manager that the user is dragging and clear the flag when you see mouse up. then you could differentiate between ""user"" changes (during drags) and ""system"" events. You could also capture this which component the user is actively modifying at the same place/time. No the layout manager's ""layoutContainer(Container parent)"" method is called (by Swing) after any component was moved/resized. That's it. Please believe me ;) But thank you for the idea for setting the flag! I'm not listening events. The layoutmanager's ""layoutContainer(Container parent)"" is called by Swing when SOMETHING is moved.  This kind of feedback loop is not uncommon when dealing with events. There are several approaches you can use to break out of this loop and the one I suggest you try is to keep track of the calculated sizes of the components. Then when you handle the resize event compare the actual size to the calculated size and just return without doing anything if they are equal. This is probably the most robust approach as it doesn't depend on the order or frequency of the events. As stated elsewhere you shouldn't need to touch anything related to threads from your layout manager. ""Comparing the actual size to the calculated size"" < it helped! Thank you very much.  I can't speak to the correct implementation of a layout manager but as far as threading is concerned all events in Swing are dispatched on the Swing UI thread i.e. the same thread. Thus synchronizing objects will have no effect because only one thread is ever involved. You can see what thread is invoking a method by printing Thread.currentThread() or inspecting it in a debugger. Depending on what you're trying to do you may want to take a look at miglayout. I've found it very powerful and easy to use. Correctly implementing a Swing layout manager is a non-trivial task. Ok I like to hear that Swing handles everything in one thread. But how to stop this snowball effect then? User-induced component movemets should be handled automatic movement not."
540,A,Bringing tab to front in JTabbedPane When I use setSelectedComponent or setSelectedIndex on a JTabbedPane object the panel always comes up in my UI. However sometimes the tab associated with the panel remains hidden. In other words the tab does not scroll to a visible portion of the tabbed pane. How can I fix this? I have tried the cheesy select one index then select desired index as well as several other more elegant things but arrrrgh!! Help me if you can. Thanks Todd Here is a patter you can use if you have a method that alters swing components or their models and so must be called on the EDT but may be called from a background thread. This ensures func always runs on the EDT: void func(final Type1 arg1 final Type2 arg2) { if (!SwingUtilities.isEventDispatchThread()) { SwingUtilities.invokeLater(new Runnable() { public void run() { func(arg1 arg2); } }); return; } // method code goes here } Devon very nice thanks for the pattern!!  I think your call is not done on EDT. Wrap it with SwingUtilities.invokeLater I am having the same problem as Todd. Wrapping the setSelectedComponent code inside a runnable doesn't scroll the tab even though the actual panel appears on screen. the only workaround i was able to come up with was manually selecting tab 0 then selecting the new tab. This worked - thanks! BTW do I need to wrap similar code that is within a ListCellRenderer? Or is that too vague a question do to where the List may be? Any code which has to do with UI (even models) has to run on EDT. You can check if you are on it by using SwingUtilities.isEventDispatchThread() Renderers are used in painting components so their code runs on EDT already. But you can check to be sure Eugene the previously referenced code now using invokeLater has started to exhibit the same problem as before. Any ideas? BTW I have wrapped it directly in the Runnable for the invokeLater as well as used Devon's pattern below - no difference. So it must be on the EDT. So what is inside your Runnable now? And is it running at all? Devon's code is not doing anything if it is on EDT
541,A,Java Issue with Tree Selection In my program I have 2 JTrees and there is a common treeselection listener for both. The problem happens when I select a node in the first tree and then immediately select a node in the second tree.Now if I were to go back and select the same node in the first tree that was initially selected nothing happens. How do I solve this? Is there a way to unselect a node at the end of a valueChanged event handler? After Editing: Now if I only do  if ( tree == tree1 ){ if(!tree2.isSelectionEmpty()){ tree2.clearSelection(); } } else { if(!tree1.isSelectionEmpty()){ tree1.clearSelection(); } } The first time I select the tree it works fine. But the second time if I select from a different tree the listener gets fired twice and I have to double click to select it. Any clue why? Swing will not clear the selection of a JTree (or JTable JList etc) when it loses focus. You need to define this logic yourself. Hence in your example going back and selecting the node in the first tree is having no effect because it is already selected. Here is an example TreeSelectionListener implementation that will clear the selection of one JTree when a selection is made on the other one. public static class SelectionMaintainer implements TreeSelectionListener { private final JTree tree1; private final JTree tree2; private boolean changing; public SelectionMaintainer(JTree tree1 JTree tree2) { this.tree1 = tree1; this.tree2 = tree2; } public valueChanged(TreeSelectionEvent e) { // Use boolean flag to guard against infinite loop caused by performing // a selection change in this method (resulting in another selection // event being fired). if (!changing) { changing = true; try { if (e.getSource == tree1) { tree2.clearSelection(); } else { tree1.clearSelection(); } } finally { changing = false; } } } } Its working but again when I switch from one tree to another for selecting I need to double click the node before it gets highlighted. (Although clicking the node for the first time does trigger the action I am looking for its juts that the node gets highlighted only after the second click). Is this the expected course your piece of code should take? Are you a bot? ... tht was reall fast!
542,A,"Iterate / recurse through Containers and Components to find objects of a given class? I've written a MnemonicsBuilder class for JLabels and AbstractButtons. I would like to write a convenience method setMnemonics( JFrame f ) that will iterate through every child of the JFrame and select out the JLabels and AbstractButtons. How can I obtain access to everything contained in the JFrame? I've tried: LinkedList<JLabel> harvestJLabels( Container c LinkedList<JLabel> l ) { Component[] components = c.getComponents(); for( Component com : components ) { if( com instanceof JLabel ) { l.add( (JLabel) com ); } else if( com instanceof Container ) { l.addAll( harvestJLabels( (Container) com l ) ); } } return l; } In some situations this works just fine. In others it runs out of memory. What am I not thinking of? Is there a better way to search for child components? Is my recursion flawed? Is this not a picture of how things ""Contain"" other things in Swing - e.g. is Swing not a Rooted Tree? JFrame | |\__JMenuBar | | | \__JMenu | | | \__JMenuItem | |\__JPanel | | | |\__JButton | | | |\__JLabel | | | |\__ ... JCheckBoxes other AbstractButtons etc. +1 for the nice ASCII tree Here's your problem: LinkedList<JLabel> harvestJLabels( Container c LinkedList<JLabel> l ) { ... l.addAll( harvestJLabels( (Container) com l ) ); ... return l; } You only have a single list. You are appending a list to another list. Therefore you are adding a list to itself. That may work in some sense but you are going to have a doubling of length (exponential growth). Either have a single List (usually there is no need to specify an algorithm in declarations) or create a new list instance each time the method is called. Avoid returning a reference you don't need to - it's just misleading. Also ArrayList would be more appropriate than LinkedList. LinkedList is almost always the wrong choice.  You can try to remove recursion to release the arrays of components: LinkedList<JLabel> harvestJLabels( Container c LinkedList<JLabel> l ) { List<Container> containers = new ArrayList<Container(); containers.add(c); while (!containers.isEmpty()) { Container cont = containers.remove(0); Component[] components = cont.getComponents(); for( Component com : components ) { if( com instanceof JLabel ) { l.add( (JLabel) com ); } else if( com instanceof Container ) { containers.add((Container)com); } } } return l; }  What if you had two components that each had one another in their components collection? It would infinetly recurse through them adding to your collection. You could have a circular reference somewhere that may not be as obvious or simple as what I described. I'm not familiar with JFrame's so I'm not sure if this is possible. When doing this sort of thing you might need a ""visited"" property of some sort so that you can mark objects as visited and if so don't do the recursive call on them.  Another utility method to stand on the shoulders of others such as @Maurice and @Cem: public <T extends Component> List<T> harvestMatches(Container root Class<T> clazz) { List<Container> containers = new LinkedList<>(); List<T> harvested = new ArrayList<>(); containers.add(root); while (!containers.isEmpty()) { Container container = containers.remove(0); for (Component component : container.getComponents()) { if (clazz.isAssignableFrom(component.getClass())) { harvested.add((T) component); } else if (component instanceof Container) { containers.add((Container) component); } } } return Collections.unmodifiableList(harvested); } and call it with something like: List<AbstractButton> buttons = harvestMatches(root AbstractButton.class); or List<JLabel> labels = harvestMatches(root JLabel.class); Although I also like the Swing-Fest approach by using org.fest.swing.core.GenericTypeMatcher  Agree with Tom here... Your problem is that you're already passing the List to add the JLabels down to your recursive method AND you're also returning it - thus adding the same items to your list more than once. In more politically correct terms - the List is your accumulator. Your method should instead look like this: public void harvestJLabels(Container c List<JLabel> l) { Component[] components = c.getComponents(); for(Component com : components) { if(com instanceof JLabel) { l.add((JLabel) com); } else if(com instanceof Container) { harvestJLabels((Container) com l)); } } } Then you can have a helper method to initiate this harvesting: public List<JLabel> harvestJLabels(Container c) { List<JLabel> jLabels = new ArrayList<JLabel>(); harvestJLabels(c jLabels); return jLabels; }"
543,A,java swing repaint() (second question in a few hours) Kay so I'm making a chess variant in java I have my console program working how I want it but now I'm trying to convert it to a swing GUI while STILL keeping the console things intact. So up to now I have my array of squares with pieces in them for the console and a 2-dimensional array of JPanels with pieces in them for the GUI. I haven't implemented moving pieces in the GUI yet so I'm still doing it from the console but the actual GUI doesn't update after I've moved a piece...even though it does on the console (sorry if this is confusing). The GUI consists of a constructor which calls some methods drawBoard() and drawSidebar() and sets sizes titles etcetc...so this is what the main method looks like: public static void main(String args[]) { ChessGUI GUI = new ChessGUI(); Board console = new Board(); do { console.printBoard(); console.getScore(); console.getMove(); GUI.boardPanel.revalidate(); GUI.sidePanel.revalidate(); GUI.repaint(); } while (true); } and drawBoard() incase it makes any difference: public void drawBoard() { LayoutManager layout = new GridLayout(NUMBER_OF_ROWS NUMBER_OF_COLS); boardPanel.setLayout(layout); boardPanel.setPreferredSize(new Dimension(200 450)); chessBoard = new JPanel[NUMBER_OF_ROWS][NUMBER_OF_COLS]; for (int i = 0; i < NUMBER_OF_ROWS; i++) { for (int j = 0; j < NUMBER_OF_COLS; j++) { chessBoard[i][j] = new JPanel(); chessBoard[i][j].setBackground(getColor(ij)); int index = i * 4 + j; if (!(boardArray.chessBoard[index].square.isEmpty())) { Piece piece = (Piece) boardArray.chessBoard[index].square.firstElement(); chessBoard[i][j].add(new JLabel(piece.toString())); } boardPanel.add(chessBoard[i][j]); } } } the repaint and revalidate methods don't seem to be calling at all even though the console is being updated :( It looks like you're never actually removing anything from 'boardPanel' even though you are resetting its LayoutManager. A safer approach might be to remove 'boardPanel' from its container then create a new instance for 'boardPanel' add that to the container then add the other JPanel pieces to this new 'boardPanel.' Effectively you would be reconstructing the entire JPanel hierarchy after every move. As you've noticed Swing can be quite finicky once you start trying to add/move/remove components after they've been added to containers. For games often the best approach would be to have 1 JComponent/Component and use Java2D methods to draw on top of it. Swing is typically only used for forms-based applications.  I don't really understand what you are doing. But it doesn't make sense to recreate the entire board panel every time a move is made. All Swing components can only have a single parent to the easier solution is to just move the piece from one panel to the other. So the code would be something like: previousPanel.remove( piece ); currentPanel.add( piece ); previousPanel.revalidate(); previousPanel.repaint(); currentPanel.revalidate();  Changing the layout doesn't do anything. You need to call boardPanel.removeChildren() However this is going to be extremely slow. Really what you should be doing is have your own JPanel overwrite paintComponent() and draw the images into the appropriate dimensions using Java Graphics.
544,A,"JTextPane prevents scrolling in the parent JScrollPane I have the following ""tree"" of objects: JPanel JScrollPane JPanel JPanel JScrollPane JTextPane When using the mouse wheel to scroll over the outer JScrollPane I encounter one annoying problem. As soon as the mouse cursor touches the inner JScrollPane it seems that the scrolling events get passed into that JScrollPane and are not processed anymore by the first one. That means that scrolling the ""parent"" JScrollPane stops. Is it possible to disable only the mouse wheel on the inner JScrollPane? Or even better disable scrolling if there is nothing to scroll (most of the time the textpane only contains 1-3 lines of text) but enable it if there is more content? Sadly the obvious solution (JScrollPane.setWheelScrollingEnabled(false)) doesn't actually deregister for MouseWheelEvents so it doesn't achieve the effect you want. Here's a crude-hackery way of disabling scrolling altogether that will let the MouseWheelEvents reach the outer JScrollPane: for (MouseWheelListener mwl : scrollPane.getMouseWheelListeners()) { scrollPane.removeMouseWheelListener(mwl); } If you do this to your inner JScrollPane it'll never respond to scroll wheel events; the outer JScrollPane will get all of them. If you want to do it ""cleanly"" you'd need to implement your own ScrollPaneUI and set that as the JScrollPane's UI with setUI(). Unfortunately you can't just extend BasicScrollPaneUI and disable its mouse wheel listener because the relevant member variables are private and there aren't any flags or guards on the ScrollPaneUI's installation of its MouseWheelListener. For your ""even better"" solution you'd have to dig deeper than I have time to into the ScrollPaneUI find the hooks where the scrollbars get made visible / invisible and add/remove your MouseWheelListener at those points. Hope that helps!  I have run into this annoying problem also and Sbodd's solution was not acceptable for me because I needed to be able to scroll inside tables and JTextAreas. I wanted the behavior to be the same as a browser where the mouse over a scrollable control will scroll that control until the control bottoms out then continue to scroll the parent scrollpane usually the scrollpane for the whole page. This class will do just that. Just use it in place of a regular JScrollPane. I hope it helps you. /** * A JScrollPane that will bubble a mouse wheel scroll event to the parent * JScrollPane if one exists when this scrollpane either tops out or bottoms out. */ public class PDControlScrollPane extends JScrollPane { public PDControlScrollPane() { super(); addMouseWheelListener(new PDMouseWheelListener()); } class PDMouseWheelListener implements MouseWheelListener { private JScrollBar bar; private int previousValue = 0; private JScrollPane parentScrollPane; private JScrollPane getParentScrollPane() { if (parentScrollPane == null) { Component parent = getParent(); while (!(parent instanceof JScrollPane) && parent != null) { parent = parent.getParent(); } parentScrollPane = (JScrollPane)parent; } return parentScrollPane; } public PDMouseWheelListener() { bar = PDControlScrollPane.this.getVerticalScrollBar(); } public void mouseWheelMoved(MouseWheelEvent e) { JScrollPane parent = getParentScrollPane(); if (parent != null) { /* * Only dispatch if we have reached top/bottom on previous scroll */ if (e.getWheelRotation() < 0) { if (bar.getValue() == 0 && previousValue == 0) { parent.dispatchEvent(cloneEvent(e)); } } else { if (bar.getValue() == getMax() && previousValue == getMax()) { parent.dispatchEvent(cloneEvent(e)); } } previousValue = bar.getValue(); } /* * If parent scrollpane doesn't exist remove this as a listener. * We have to defer this till now (vs doing it in constructor) * because in the constructor this item has no parent yet. */ else { PDControlScrollPane.this.removeMouseWheelListener(this); } } private int getMax() { return bar.getMaximum() - bar.getVisibleAmount(); } private MouseWheelEvent cloneEvent(MouseWheelEvent e) { return new MouseWheelEvent(getParentScrollPane() e.getID() e .getWhen() e.getModifiers() 1 1 e .getClickCount() false e.getScrollType() e .getScrollAmount() e.getWheelRotation()); } } } Thanks a bunch works like a champ! Thanks This behaves exactly the way I wanted it."
545,A,"Return to a specific dialog I'm writing a very simple text editor and have run into a somewhat minor problem. Code below Saving a file when a file exists the user will be prompted to overwrite cancel or not overwrite (having the option to try again). So I have a JFileChooser that will prompt the user to overwrite: yes no cancel In the case of no being selected it should return to the JFileChoose dialog but I just plain don't know how. Can anyone help me out on this? The cancel and yes options aren't any problems (as far as I'm aware haven't tested in depth) String contents = textArea.getText(); if (openPath != null) { savePath = openPath; } else if (saveAsPath != null) { savePath = saveAsPath; } else if (savePath != null) { savePath = savePath; } else if (openPath == null) { JFileChooser saveFile = new JFileChooser(); int returnVal = saveFile.showOpenDialog(null); if (returnVal == saveFile.APPROVE_OPTION) { savePath = saveFile.getSelectedFile(); if (savePath.exists() != true) { FileWriter fstream = new FileWriter (savePath); BufferedWriter saveWrite = new BufferedWriter(fstream); saveWrite.write(contents); saveWrite.close(); } else if (savePath.exists() == true) { JOptionPane overwritePrompt = new JOptionPane(); Object[] options = {""Yes"" ""No"" ""Cancel""}; int n = JOptionPane.showOptionDialog(overwritePrompt ""Already exists. Overwrite?"" ""Overwrite File?"" JOptionPane.YES_NO_CANCEL_OPTION JOptionPane.WARNING_MESSAGE null options options[2]); if (n == 0) { FileWriter fstream = new FileWriter(saveAsPath); BufferedWriter out = new BufferedWriter(fstream); out.write(contents); out.close(); } else if (n == 1) { savePath = null; openPath = null; saveAsPath = null; return; // should return to JFileChooser!!!!!! } else { savePath = null; openPath = null; saveAsPath = null; return; } } } else { return; } What about starting over at this line: int returnVal = saveFile.showOpenDialog(null); again when you should return to the JFileChooser? I assume that the same file chooser would display its open dialog again then? Wow that sucks. Thanks man - Feels horrible destroying that code but you're dead right. I never looked much into JChooseFile - just went by example"
546,A,How to display java swing on X11 when running on Mac I would really like to be able to run our test suite on Xvfb so that swing windows don't keep popping up in the way of my work. Unfortunately I cannot seem to find a way to get the java runtime to use the display specified in the DISPLAY environment variable. I suppose this is because the Mac JDK is hardwired to use the (non-X-based) Mac display. I can't find any switches for the java command that say to use X either. Thanks in advance for any help you can give! Matt I don't know if there is a way to get Apple's JDK to use X11 but there is the alternative of using SoyLatte which is a Mac Java implementation that only works with X11. The official Java runtimes use the platform native GUI API. Thus the Mac Java runtime like the MS Windows Java runtime doesn't support X11. Is SoyLatte a good VM or just a small one-man project? I'd like to run a visual editor on my Ubuntu laptop for editing files on my Mac over SSH.
547,A,"Why does repaint(long) repaint immediately? According to the Javadoc JComponent.repaint(long) is supposed to schedule a repaint() sometime in the future. When I try using it it always triggers an immediate repaint. What am I doing wrong? import java.awt.AlphaComposite; import java.awt.Color; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.Timer; public class Repaint { public static final boolean works = false; private static class CustomComponent extends JPanel { private float alpha = 0; @Override protected void paintComponent(Graphics g) { super.paintComponent(g); Graphics2D g2d = (Graphics2D) g; g2d.setComposite( AlphaComposite.getInstance(AlphaComposite.SRC_OVER alpha)); g2d.setPaint(Color.BLACK); g2d.fillRect(0 0 getWidth() getHeight()); alpha += 0.1; if (alpha > 1) alpha = 1; System.out.println(""alpha="" + alpha); if (!works) repaint(1000); } } public static void main(String[] args) { final JFrame frame = new JFrame(); frame.getContentPane().add(new CustomComponent()); frame.setSize(800 600); frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); frame.setVisible(true); if (works) { new Timer(1000 new ActionListener() { @Override public void actionPerformed(ActionEvent e) { frame.repaint(); } }).start(); } } } The parameter says tm - maximum time in milliseconds before update it does not say it won't do so immediately also the javadocs say Repaints the component. If this component is a lightweight component this results in a call to paint within tm milliseconds. JPanel is lightweight. Heavyweight components are those with peers (AWT Canvas Panel Window Frame Dialog TextField TextArea List Checkbox etc.). Thanks for the clarification I am going to edit the answer hope thats ok  If you search a little bit you find that this parameter is ignored in derived classes. ;)  If you want to schedule something to be repainted then you should be using a Swing Timer. You should not be scheduling painting from withing the paintComponnt(..) method. You can't control when the paintComponent() method is called. Using a Timer is really the only way to go. If you try to schedule painting inside PaintComponent() you run the risk of the component not repainting immediately if it is un-hidden when other components or programs are moved over it in a windowing environment.  Note that the Javadoc says the method will cause a repaint to happen within (not after) the specified time. At the time this was written Sun's JDK seems to ignore the ""tm"" parameter altogether. All concrete implementations propagate the argument to their container but no one ever uses it."
548,A,"How to add an image to a JPanel? I have a JPanel to which I'd like to add JPEG and PNG images that I generate on the fly. All the examples I've seen so far in the Swing Tutorials specially in the Swing examples use ImageIcons. I'm generating these images as byte arrays and they are usually larger than the common icon they use in the examples at 640x480. Is there any (performance or other) problem in using the ImageIcon class to display an image that size in a JPanel? What's the usual way of doing it? How to add an image to a JPanel without using the ImageIcon class? Edit: A more careful examination of the tutorials and the API shows that you cannot add an ImageIcon directly to a JPanel. Instead they achieve the same effect by setting the image as an icon of a JLabel. This just doesn't feel right... You can avoid rolling your own Component subclass completely by using the JXImagePanel class from the free SwingX libraries. Download  If you are using JPanels then are probably working with Swing. Try this: BufferedImage myPicture = ImageIO.read(new File(""path-to-file"")); JLabel picLabel = new JLabel(new ImageIcon(myPicture)); add(picLabel); The image is now a swing component. It becomes subject to layout conditions like any other component. +1 Excellent code. +1 that. clean. Nice just used that code myself. +1. Nice one.. Just used this code.. +1 how to scale the image according to the size of the JLabel? Nice code! I'm not much experienced with Swing but I can't get it work. Does anybody tried it in jdk 1.6.0_16? @ATorras I know you asked this a while back but if any other newbies had my issues remember to picLabel.setBounds();  I think there is no need to subclass of anything. Just use a Jlabel. You can set an image into a Jlabel. So resize the Jlabel then fill it with an image. Its OK. This is the way I do. Simpler by a long shot.  You can subclass JPanel - here is an extract from my ImagePanel which puts an image in any one of 5 locations top/left top/right middle/middle bottom/left or bottom/right: protected void paintComponent(Graphics gc) { super.paintComponent(gc); Dimension cs=getSize(); // component size gc=gc.create(); gc.clipRect(insets.leftinsets.top(cs.width-insets.left-insets.right)(cs.height-insets.top-insets.bottom)); if(mmImage!=null) { gc.drawImage(mmImage(((cs.width-mmSize.width)/2) +mmHrzShift)(((cs.height-mmSize.height)/2) +mmVrtShift)null); } if(tlImage!=null) { gc.drawImage(tlImage(insets.left +tlHrzShift)(insets.top +tlVrtShift)null); } if(trImage!=null) { gc.drawImage(trImage(cs.width-insets.right-trSize.width+trHrzShift)(insets.top +trVrtShift)null); } if(blImage!=null) { gc.drawImage(blImage(insets.left +blHrzShift)(cs.height-insets.bottom-blSize.height+blVrtShift)null); } if(brImage!=null) { gc.drawImage(brImage(cs.width-insets.right-brSize.width+brHrzShift)(cs.height-insets.bottom-brSize.height+brVrtShift)null); } }  Fred Haslam's way works fine. I had trouble with the filepath though since I want to reference an image within my jar. To do this I used: BufferedImage wPic = ImageIO.read(this.getClass().getResource(""snow.png"")); JLabel wIcon = new JLabel(new ImageIcon(wPic)); Since I only have a finite number (about 10) images that I need to load using this method it works quite well. It gets file without having to have the correct relative filepath.  JLabel imgLabel = new JLabel(new ImageIcon(""path_to_image.png""));  JPanel is almost always the wrong class to subclass. Why wouldn't you subclass JComponent? There is a slight problem with ImageIcon in that the constructor blocks reading the image. Not really a problem when loading from the application jar but maybe if you're potentially reading over a network connection. There's plenty of AWT-era examples of using MediaTracker ImageObserver and friends even in the JDK demos.  There shouldn't be any problem (other than any general problems you might have with very large images). If you're talking about adding multiple images to a single panel I would use ImageIcons. For a single image I would think about making a custom subclass of JPanel and overriding its paintComponent method to draw the image. (see 2)  I'm doing something very similar in a private project I'm working on. Thus far I've generated images up to 1024x1024 without any problems (except memory) and can display them very quickly and without any performance problems. Overriding the paint method of JPanel subclass is overkill and requires more work than you need to do. The way I do it is: Class MapIcon implements Icon {...} OR Class MapIcon extends ImageIcon {...} The code you use to generate the image will be in this class. I use a BufferedImage to draw onto then when the paintIcon() is called use g.drawImvge(bufferedImage); This reduces the amount of flashing done while you generate your images and you can thread it. Next I extend JLabel: Class MapLabel extends Scrollable MouseMotionListener {...} This is because I want to put my image on a scroll pane I.e. display part of the image and have the user scroll around as needed. So then I use a JScrollPane to hold the MapLabel which contains only the MapIcon. MapIcon map = new MapIcon (); MapLabel mapLabel = new MapLabel (map); JScrollPane scrollPane = new JScrollPane(); scrollPane.getViewport ().add (mapLabel); But for your scenario (just show the whole image every time). You need to add the MapLabel to the top JPanel and make sure to size them all to the full size of the image (by overriding the GetPreferredSize()).  Here's how I do it (with a little more info on how to load an image): import java.awt.Graphics; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.util.logging.Level; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.JPanel; public class ImagePanel extends JPanel{ private BufferedImage image; public ImagePanel() { try { image = ImageIO.read(new File(""image name and path"")); } catch (IOException ex) { // handle exception... } } @Override protected void paintComponent(Graphics g) { super.paintComponent(g); g.drawImage(image 0 0 null); // see javadoc for more info on the parameters } } I tried using this with some custom buttons on top and found that there were strange redrawing issues. Fred Haslam's answer below did not suffer from this problem. -1 for invalid implementation of paintComponent (@Dogmatixed most probably that's why you are having those redrawing issues) - it _must_ garantee to cover its complete area if it reports being opaque (which is the default) easiest achieved by calling super.paintComponent @kleopatra Thanks I didn't realize that... according to the javadoc: ""Further if you do not invoker super's implementation you must honor the opaque property that is if this component is opaque you must completely fill in the background in a non-opaque color. If you do not honor the opaque property you will likely see visual artifacts."" I'll update the answer now. thanks for the edit reverted my vote :-) Please always respect the `Principle of Encapsulation` while overriding methods of the Super Class the Access Specifier of the `paintComponent(...)` method is `protected` and not `public` :-) How do you handle errors in this implementation? I mean if an error is thrown in the constructor not only will you have to deal not just with that but you'll also have to deal with `NullPointerException`s that paintComponent() will throw (and will throw as many times as it is called). Wait nevermind. `drawImage()` doesn't throw a NPE when `img` is null. Opps... put the example together a little to quick... @Dutow - Good call I edited the answer. Thanks."
549,A,"JLabel on top of another JLabel Is it possible to add a JLabel on top of another JLabel? Thanks. sorry...why would that make senses?? that's why i'm asking.. you can use a JLayeredPane and set it's border to No Border. I'm sorry that's an easy way if you use a designer! Like the one in Netbeans.  it's a matter of layout. you can do that using null layout (with hard coded locations) or with a custom layout. I've been trying to do this but it doesn't work for me. :c maybe i'm doing something wrong. i'll try again. thanks Omry! you can use the list() function to get a nice dump of the current container hierarchy should help you debug your problem. great! thanks! should i encounter problems again can i post it here again? if it's about the same question sure. if your current question is solved accept one of the answers and if you have another question just create a new one.  The short answer is yes as a JLabel is a Container so it can accept a Component (a JLabel is a subclass of Component) to add into the JLabel by using the add method: JLabel outsideLabel = new JLabel(""Hello""); JLabel insideLabel = new JLabel(""World""); outsideLabel.add(insideLabel); In the above code the insideLabel is added to the outsideLabel. However visually a label with the text ""Hello"" shows up so one cannot really see the label that is contained within the label. So the question comes down what one really wants to accomplish by adding a label on top of another label. Edit: From the comments: well what i wanted to do was first read a certain fraction from a file then display that fraction in a jlabel. what i thought of was to divide the fraction into 3 parts then use a label for each of the three. then second i want to be able to drag the fraction so i thought i could use another jlabel and place the 3'mini jlabels' over the big jlabel. i don't know if this will work though..:| It sounds like one should look into how to use layout managers in Java. A good place to start would be Using Layout Managers and A Visual Guide to Layout Managers both from The Java Tutorials. It sounds like a GridLayout could be one option to accomplish the task. JPanel p = new JPanel(new GridLayout(0 1)); p.add(new JLabel(""One"")); p.add(new JLabel(""Two"")); p.add(new JLabel(""Three"")); In the above example the JPanel is made to use a GridLayout as the layout manager and is told to make a row of JLabels. oh. cool thanks! im not really familiar with these so i asked here. :) well what i wanted to do was first read a certain fraction from a file then display that fraction in a jlabel. what i thought of was to divide the fraction into 3 parts then use a label for each of the three. then second i want to be able to drag the fraction so i thought i could use another jlabel and place the 3'mini jlabels' over the big jlabel. i don't know if this will work though..:| sounds like this is going to work..thanks coobird! :)  The answer to your original question is yes for the reasons given that any Component can be added to a Container. The reason you don't see the second label is because by default a JLabel uses a null layout manager and the size of the second label is (0 0) so there is nothing to paint. So all you need to do is set the bounds of the second label and away you go. You can't use a layout manager if you want to drag components around because as soon as you resize the frame etc the layout manager will be invoked and the components will be repositioned based on the layout manager of the component. oh. but is it possible to have a label on top of another and be able to drag both labels as one? :| If the mouse listener is added to the parent label then all the children will also be dragged when it is moved. oh..but a friend said that it's not possible.. said i should use a panel. wah. now im lost. :| It is possible and I already told you how to do it. Its 4 lines of code 2 to create the labels one to set the bounds of the child label and the 4th to add the child label to the parent label. It should take about 5 minutes to test it. Try it and post your SSCCE if it doesn't work. If you don't know what a SSCCE is then search the web."
550,A,winforms panels vs java swing panels In java swing I can insert panels into panels and so on and not have to build a brand new window for every view of my applicaiton or mess around removing and adding controls. Theres a panel clas sin C# however I cant see any way of creating a 'panel form' or basically just a form in form designer thats a panel and its contents. How do I do this then and work the way I did with java swing? Actually you can use the panel control and set it's Dock property to Fill. That way your panel will be the entire canvas of the form. Then you can add child panels as needed either through code behind or through forms designer.  Usually i just dock different forms within eachother setting the IsMdiContainer Property to true on the parent window. Then i create subforms that i dock using the following function: static class FormUtil { static public void showForm(Form sender Control reciever) { sender.ControlBox = false; sender.FormBorderStyle = FormBorderStyle.None; sender.ShowInTaskbar = false; sender.TopLevel = false; sender.Visible = true; sender.Dock = DockStyle.Fill; reciever.Controls.Clear(); //clear panel first reciever.Controls.Add(sender); } } then whenever i need to dock a form inside a panel on the parents form i just do: FormUtil.showForm(new SomeForm() this.splitContainer1.Panel1); This allows me to delegate some of the form creation to different designers. Works like a charm for me love to hear if theres a better way of doing it.  There's the concept of user controls which basicly provides you with a panel like designer surface  not to mention that you can create atomic forms (which can be reused) and register them as inheritable that way you can provide inheritance too.
551,A,"Java Swing - how to show a panel on top of another panel? I wish to have an internal (non window) dialog to ask for member input. I would like the dialog to be placed centrally on an existing JPanel. I have looked at layeredpanes and these seem unusable due to only having a single layout manager (or no layout manager) across all the panes. I guess I could try to override JLayeredPane and provide a custom layout but this seems extreme. Glass panes don't seem to be appropriate either. How can this be done? Is there no usable concept of z-indexes in Swing? EDIT The reason Layered Panes weren't appropriate was due to the lack of a layout manager per layer. The panel is resizeable Panel A should stay at 100% of area and Panel B should stay centralized. JOptionPane.showInternalInputDialog probably does what you want. If not it would be helpful to understand what it is missing. Thanks as I understand this it would show an Internal Frame which would have a window look and feel. I really need the full customisation that a panel would offer.  Use a 1 by 1 GridLayout on the existing JPanel then add your Panel to that JPanel. The only problem with a GridLayout that's 1 by 1 is that you won't be able to place other items on the JPanel. In this case you will have to figure out a layout that is suitable. Each panel that you use can use their own layout so that wouldn't be a problem. Am I understanding this question correctly? Thanks I've added a diagram above to clarify. Basically it's laying the components on top of each other (z index) that I'm unsure about. Oh ok I see my mistake. Thanks for the extra clarification.  I just thought that I'd add that there is a notion of Z-order in Swing see [java.awt.Component#setComponentZOrder][1] which affects the positions of a component in its parents component array which determines the painting order. Note that you should override javax.swing.JComponent#isOptimizedDrawingEnabled to return false in the parent container to get your overlapping components to repaint correctly otherwise their repaints will clobber each other. (JComponents assume no overlapping children unless isOptimizedDrawingEnabled returns false) [1]: http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Container.html#setComponentZOrder(java.awt.Component int)  I think LayeredPane is your best bet here. You would need a third panel though to contain A and B. This third panel would be the layeredPane and then panel A and B could still have a nice LayoutManagers. All you would have to do is center B over A and there is quite a lot of examples in the Swing trail on how to do this. Tutorial for positioning without a LayoutManager. public class Main { private JFrame frame = new JFrame(); private JLayeredPane lpane = new JLayeredPane(); private JPanel panelBlue = new JPanel(); private JPanel panelGreen = new JPanel(); public Main() { frame.setPreferredSize(new Dimension(600 400)); frame.setLayout(new BorderLayout()); frame.add(lpane BorderLayout.CENTER); lpane.setBounds(0 0 600 400); panelBlue.setBackground(Color.BLUE); panelBlue.setBounds(0 0 600 400); panelBlue.setOpaque(true); panelGreen.setBackground(Color.GREEN); panelGreen.setBounds(200 100 100 100); panelGreen.setOpaque(true); lpane.add(panelBlue new Integer(0) 0); lpane.add(panelGreen new Integer(1) 0); frame.pack(); frame.setVisible(true); } /** * @param args the command line arguments */ public static void main(String[] args) { new Main(); } } You use setBounds to position the panels inside the layered pane and also to set their sizes. Edit to reflect changes to original post You will need to add component listeners that detect when the parent container is being resized and then dynamically change the bounds of panel A and B. Hi this is the avenue I was initially pursuing but I can't figure out how to make A and B behave without using setBounds. The docs for JLayeredPane mentions ""All of the layout managers provided by the Java platform arrange the components as if they were all on one layer."". Yes that is correct. To position A and B you need to use setBounds. The panels A and B can still have whatever LayoutManager you want to position components within them. Does that answer your question? The reason I was trying to use a layout manager over setBounds is that the panel can be resized. Possibly extending JLayeredPane listening for component changes and calling setBounds on it's children is a correct way to solve this. (I'll edit original question to clarify this too.) See my post for update :)  You can add an undecorated JDialog like this: import java.awt.event.*; import javax.swing.*; public class TestSwing { public static void main(String[] args) throws Exception { JFrame frame = new JFrame(""Parent""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(800 600); frame.setVisible(true); final JDialog dialog = new JDialog(frame ""Child"" true); dialog.setSize(300 200); dialog.setLocationRelativeTo(frame); JButton button = new JButton(""Button""); button.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { dialog.dispose(); } }); dialog.add(button); dialog.setUndecorated(true); dialog.setVisible(true); } } Thanks unfortunately this creates a new window +1 for undecorated though very nice effect. And why this is a problem? Now that I look at you question for a second time you may want to make the dialog non modal and reposition it when the parent frame is resized. It's a requirement. A dialog / window would not make sense for this panel."
552,A,"Java Architecture - Question about ActionListener Conventions I am making a user interface which shows graphs and manipulates graphs. The class extends JFrame implements ActionListener. The ActionListener then calls different classes to manipulate graphs depending on the action. This worked while the class had few ActionListeners; however now the class is becoming unmanageable. I know that in the interest of encapsulation it would be best to have the ActionListener within the user interface class because it needs to access non-static components of the interface. However it seems like there is a conflict between encapsulation and readability. What I am proposing is breaking the class into one class for the interface and a second for the ActionListener and accessing the interface components statically. What I want to know is does this follow basic design conventions? And if this is an acceptable approach would you place the main class in the user-interface class or the ActionListener class? Not a duplicate question... but my answer should help with your question. Short summery my preference would be to have the JFrame class not implement ActionListener and then have a number of named inner classes withing the JFrame that do implement the ActionListener. I would place the main in a class unto itself... and call it Main. Here is some sample code for the way I like to do it: import javax.swing.JFrame; import javax.swing.SwingUtilities; public class Main { private Main() { } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { createAndShowGUI(); } }); } private static void createAndShowGUI() { final FooFrame frame; frame = new FooFrame(); frame.setupGUI(); frame.pack(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } } and then the GUI: import java.awt.FlowLayout; import java.awt.LayoutManager; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.JButton; import javax.swing.JFrame; public class FooFrame extends JFrame { private final JButton incrementBtn; private final JButton decrementBtn; private int value; { incrementBtn = new JButton(""++""); decrementBtn = new JButton(""--""); } private class IncrementListener implements ActionListener { public void actionPerformed(final ActionEvent evt) { increment(); } } private class DecrementListener implements ActionListener { public void actionPerformed(final ActionEvent evt) { decrement(); } } public void setupGUI() { final LayoutManager layout; layout = new FlowLayout(); setLayout(layout); setupListeners(); addComponents(); } private void setupListeners() { incrementBtn.addActionListener(new IncrementListener()); decrementBtn.addActionListener(new DecrementListener()); } private void addComponents() { add(incrementBtn); add(decrementBtn); } private void increment() { value++; System.out.println(""value = "" + value); } private void decrement() { value--; System.out.println(""value = "" + value); } } you are welcome. any time :-) Thank you a ton I really appreciate it. Great answer but before I accept this answer let me make sure I understand. What you suggest is that both JFrame and Actionlistener class implement actionlistener. And that the JFrame interprets it and passes it to the ActionListener for processing? Give me a bit and I'll put some code up :-) (just have to head into work... exam time :-)"
553,A,"How to use Windows 7 Jump Lists in a Java Desktop app? As the title suggests we have a Java (Swing) desktop application and we'd like to be able to have some basic access to the Jump Lists (in the new Windows 7 taskbar). In particular we'd like to be able to add some ""user tasks"" to the jump list--the ability to start other modules in our application maybe to close all running modules etc. I know that we could do this using JNI or JNA and the C API described here but that is our option of last resort. I'm hoping that there might be an easier way--something that Sun has already implemented or maybe a third party library or something. Google is no help so far. Anyone else have any ideas? There is a Java library providing the new Windows 7 features for Java. It's called J7Goodies by Strix Code. You can create your own jump lists with it. Of course it supports ""users tasks"" too. Thank you that looks like just what I needed.  This would break compatibility with other systems so Sun almost certainly won't do it. There are a handful of desktop/toolbar integration libraries out there that make the jni calls for you you might look for one of those that has been updated for windows 7 but if you are going to go single-platform why not use C#? (Not that I'm a fan I'm 100% Java but if you're already breaking compatibility you might consider going all the way just for ease of programming) OS X useds a similar approach with Dock menus and Gnome 3 is doing something similar so I don't think it has to do with multi-platform. It's just that it is not ready yet. Well we are multiplatform but we try to make some concessions for each platform (i.e. at runtime we detect which platform we are running on and do a few ""extras"" for that platform where possible.) Also our app has been under development for almost 10 years now so it's a little late to try it in a new language! :) Good points then I guess you are already used to some level of desktop integration--I'd just look at existing products or possibly even find an open source one and extend it yourself--they are all going to do the same thing (JNI call) anyway."
554,A,Java/Swing: How to draw a simple bar graph in a custom renderer for a JLabel I would like to dynamically create a minimal transparent bar graph to display over a canvas. I was thinking of using a custom renderer for a JButton or a JLabel; but how do I draw my bar graph in this renderer? The standard way would be to create a subclass (possibly an anonymous one if you prefer) of JLabel or JPanel and overload the paintComponent(Graphics g) method. You can then use the passed Graphics object to draw whatever rectangles (and so forth) that you need. For more information on that part of it refer to the Java 2D Graphics Trail. EDIT: Does that answer the question? I just re-read it and now I'm not sure. Your answer is OK... I was thinking of a custom renderer as for table cells but this may not exist for JLabel &/or JButtons. thanks julien Okay. And no there isn't a custom renderer for JLabel or JButton (at least not in standard Swing; there might be third-party libraries which offer something similar). To add any JComponent to a JTable you can extend the DefaultTableCellRenderer and over ride the getTableCellRendererComponent. Just return an instance of your BarGraph object. You have to set the cellRenderder on the JTable also to your subclassed DefaultTableCellRenderer.
555,A,Internationalize Swing Applet Menu Items in English and Chinese - Examples? A Java Swing applet needs to display its MenuItems in Chinese or English depending on how a user has set their system preferences. Has anybody seen compilable examples showing how to do this? I've seen a few articles on the subject of i18n and Java/Swing (for example this one) but so far I haven't found anything specific to the subjects of Swing Applets and MenuItems. Being completely new to i18n I would prefer a working example to help me get up to speed quickly. After working through the example you've already found I'd recommend reading http://www.chinesecomputing.com/programming/java.html  You should start with the Java Internationalization tutorial. Basically you put all your text strings in to external ResourceBundles which have locale suffixes and you can load the appropriate one depending on the user's current locale. This means the menu item labels are not hard-coded into the source. It all works surprisingly easy actually as the ResourceBundle API does all the hard work for you. Other resources are here.
556,A,"I'm writing a screen capture module in Java but I'm having serious performance issues writing screenshots to disk. What else can I do? I'm writing a screen capture module using the Robot class. I'm taking screenshots of the application every x milliseconds and writing them to disk. After screen capture is finished I'm compiling the screenshots to video with FFMPEG. However writing images to disk is extremely slow and grinds my application to a halt. What am I missing? Is there a better way to write a simple screen capture module? Edit: I've tried several ways of writing the images to disk and all are very slow. I've been sticking with the following due to its ease of use: ImageIO.write(bufferedImage ""jpg"" file); We can't easily tell what's making it slow without seeing some code. Please post the method which saves the image to disk. Is your application multithreaded? Check out reply 6 of this posting. It implies that using JAI will improve write performance.  The default buffered image is quite big. Try having it as a smaller format and then write it down. I've used .png before and it's small enough. Post a bit more code and will see what other thing may be wrong in yours. EDIT I use this:  BufferedImage bufferedImage = new BufferedImage( widthFromRobot heightFromRobot BufferedImage. TYPE_3BYTE_BGR ); bufferedImage.getGraphics().drawImage( fromRobotScreenCapture 00 null ); // get a file name ImageIO.write( bufferedImage ""png"" someFile ); Create a new image with the same width and height but a different image types. Write the image in that new image and save that new image to disk. Explore the different image type values and see which is better for you. Of course there could be a tradeoff between quality and speed. ( I think however your problem is somewhere else but try this first )  Try putting your write into a new thread so you do not have to wait for slow disk IO. ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(10); executor.schedule(new Runnable(){ @Override public void run() { writeImageHere(bufferedImage file); } } Just watch out for concurrency issues. The second (memory intensive) solution is to buffer your jpgs and keep them all in memory and write only when a certain amount of time has passed or your program exits.  Or encode the image into video format right when you capture the image and avoid writing the large temporary file at all. Full code using Xuggler can be found here: Xuggler Screen Capture Demo Code"
557,A,"How do I drag and drop a row in a JTable? How do you setup a JTable to be able to drag a row to a different index in the table. For example if I have 5 rows and I want to drag the 4th row to the 2nd position? Did any of the answers below help out? Check out BasicTableUI or the Transferable Interface.  The following allows JTable re-ordering of a single dragged row:  table.setDragEnabled(true); table.setDropMode(DropMode.INSERT_ROWS); table.setTransferHandler(new TableRowTransferHandler(table)); Your TableModel should implement the following to allow for re-ordering: public interface Reorderable { public void reorder(int fromIndex int toIndex); } This TransferHandler class handles the drag & drop and calls reorder() on your TableModel when the gesture is completed. /** * Handles drag & drop row reordering */ public class TableRowTransferHandler extends TransferHandler { private final DataFlavor localObjectFlavor = new ActivationDataFlavor(Integer.class DataFlavor.javaJVMLocalObjectMimeType ""Integer Row Index""); private JTable table = null; public TableRowTransferHandler(JTable table) { this.table = table; } @Override protected Transferable createTransferable(JComponent c) { assert (c == table); return new DataHandler(new Integer(table.getSelectedRow()) localObjectFlavor.getMimeType()); } @Override public boolean canImport(TransferHandler.TransferSupport info) { boolean b = info.getComponent() == table && info.isDrop() && info.isDataFlavorSupported(localObjectFlavor); table.setCursor(b ? DragSource.DefaultMoveDrop : DragSource.DefaultMoveNoDrop); return b; } @Override public int getSourceActions(JComponent c) { return TransferHandler.COPY_OR_MOVE; } @Override public boolean importData(TransferHandler.TransferSupport info) { JTable target = (JTable) info.getComponent(); JTable.DropLocation dl = (JTable.DropLocation) info.getDropLocation(); int index = dl.getRow(); int max = table.getModel().getRowCount(); if (index < 0 || index > max) index = max; target.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR)); try { Integer rowFrom = (Integer) info.getTransferable().getTransferData(localObjectFlavor); if (rowFrom != -1 && rowFrom != index) { ((Reorderable)table.getModel()).reorder(rowFrom index); if (index > rowFrom) index--; target.getSelectionModel().addSelectionInterval(index index); return true; } } catch (Exception e) { e.printStackTrace(); } return false; } @Override protected void exportDone(JComponent c Transferable t int act) { if (act == TransferHandler.MOVE) { table.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR)); } } } I was getting exceptions upon transfer that I fixed by changing `localObjectFlavor` to: `private final DataFlavor localObjectFlavor = new DataFlavor(Integer.class ""Integer Row Index"");` +1 But unfortunately this will not work for multiple row selection. +1 - a couple of simple modifications and this works perfectly ! Nice example! Although I noticed a bug in exportDone. If you drag the selected value outside the component and release the curser will keep the ""copy icon"". I corrected this by modifying the if statement in exportDone to ""act == TransferHandler.MOVE || act == TransferHandler.NONE"".  perhaps sth. like this:  table.addMouseMotionListener(new MouseMotionListener() { public void mouseDragged(MouseEvent e) { e.consume(); JComponent c = (JComponent) e.getSource(); TransferHandler handler = c.getTransferHandler(); handler.exportAsDrag(c e TransferHandler.MOVE); } public void mouseMoved(MouseEvent e) { } });  Check out the drag and drop section of the Java Tutorial. There are some examples on how to implement this for JTable."
558,A,"Containing drawing to a panel area I want to draw an array of X and Y integers to a panel in a Java frame. What is the best way to draw the line (currently I'm using Graphic's drawPolyline)? How can I efficiently scale the integer values so they all fit in the panel area without knowing the max (Y) value? Update for example public void paint(Graphics g) { int height = panel.getHeight(); int width = panel.getWidth(); int[] xPoints = { ... values ... }; int[] yPoints = { ... values ... }; int nPoints = dataLength; // Scale xPoints and yPoints so they fit in the area of width and height // and draw line g.drawPolyline(xPoints yPoints nPoints); g.dispose(); } What do you mean ""draw an array of X and Y integers"" - do you want to draw the points specified by those integers or draw lines joining them or draw the numbers themselves? Without knowing both the x and y maximum values I don't think this can be done since you can't then calculate the scale needed. But if you have an array of points then you can certainly search it to find the minimum and maximum x and y values. If you have a means of getting the maximum values read on (and for the benefit of others with a similar problem). Find the maximum difference between any two x values between any two y values; call them max(dx) and max(dy) - these are max(x)-min(x) and max(y)-min(y) respectively. Take the greater of width/max(dx) and height/max(dy). That number provides your scale; just modify every x value using ((x-min(x))/scale) and each y value using ((y-min(y))/scale) You should now have the largest shape that will fit oriented relative 00. Note: I have have negative coordinates you will have to adjust them into the positive coordinate range before applying these formulas."
559,A,"How to pause execution while JDialog is open How can I make my application pause when I open custom JDialog and after the dialog is closed to make continue again. I think you need to further define ""pause."" Do you mean that you want the UI to completely stop responding? Do you mean that you want some other executing thread to pause? See the constructor of JDialog http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/JDialog.html#JDialog(java.awt.Dialog%20java.lang.String%20boolean) . You can set the modality of this dialog. Setting modal=true will pause your application. you can also use the method 'setModal' http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Dialog.html#setModal(boolean) These comments/answers do not say where the code will pause. That point can be important to know.  Simply use: setModal(true); I usually call it from within the constructor of the JDialog. See the Javadocs on setModal(boolean). http://java.sun.com/javase/6/docs/api/java/awt/Dialog.html#setModal(boolean) That will cause execution to block on the current thread until the dialog box closes. Alternatively you can use: setModalityType(Dialog.DEFAULT_MODALITY_TYPE); It is equivalent to setModal(true) and technically the correct way to do it."
560,A,"Swing: how do I close a dialog when the ESC key is pressed? GUI development with Swing. I have a custom dialog for choosing a file to be opened in my application; its class extends javax.swing.JDialog and contains among other components a JFileChooser which can be toggled to be shown or hidden. The JFileChooser component already handles the ESC key by itself: when the file chooser is shown (embedded in my dialog) and I press ESC the file chooser hides itself. Now I would like my dialog to do the same: when I press ESC I want the dialog to close. Mind you when the embedded file chooser is shown the ESC key should only hide it. Any ideas ? I had problems implementing both of the top answers. Here's a rather compact version using AbstractAction to auto-implement most of Action's methods which works within text-based fields (per @pratikabu's request): final AbstractAction escapeAction = new AbstractAction() { private static final long serialVersionUID = 1L; @Override public void actionPerformed(ActionEvent ae) { dispose(); } }; getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW) .put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE 0) ""ESCAPE_KEY""); getRootPane().getActionMap().put(""ESCAPE_KEY"" escapeAction); References the above answers http://www.coderanch.com/t/335357/GUI/java/KeyPressed-JDialog  If your looking for a technique using new features of Java 8  try a lambda expression: dialog.getRootPane().registerKeyboardAction(e -> { window.dispose(); } KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE 0) JComponent.WHEN_IN_FOCUSED_WINDOW); or KeyStroke k = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE 0); int w = JComponent.WHEN_IN_FOCUSED_WINDOW; dialog.getRootPane().registerKeyboardAction(e -> window.dispose() k w);  Use InputMap and ActionMap for dealing with key actions in Swing. To close the dialog cleanly send a window closing event to it. From my weblog: private static final KeyStroke escapeStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE 0); public static final String dispatchWindowClosingActionMapKey = ""com.spodding.tackline.dispatch:WINDOW_CLOSING""; public static void installEscapeCloseOperation(final JDialog dialog) { Action dispatchClosing = new AbstractAction() { public void actionPerformed(ActionEvent event) { dialog.dispatchEvent(new WindowEvent( dialog WindowEvent.WINDOW_CLOSING )); } }; JRootPane root = dialog.getRootPane(); root.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put( escapeStroke dispatchWindowClosingActionMapKey ); root.getActionMap().put( dispatchWindowClosingActionMapKey dispatchClosing ); } @Tom hello thanks for the great post can you also tell me the best practice in case I've any text base component in the dialog. Since it doesn't work if the focus is on them. And they say Java is verbose... This was to fast for my fingers... you won ;)  You can use the following snippet. This is better because the rootPane will get events from any component in the dialog. You can replace setVisible(false) with dispose() if you want. public static void addEscapeListener(final JDialog dialog) { ActionListener escListener = new ActionListener() { @Override public void actionPerformed(ActionEvent e) { dialog.setVisible(false); } }; dialog.getRootPane().registerKeyboardAction(escListener KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE 0) JComponent.WHEN_IN_FOCUSED_WINDOW); } +1 for much simpler approach than the one from accepted answer. Sounds nice. I'd just replace dialog.setVisible(false) with some code to actually cancel the dialog. I'll give it a try."
561,A,Why is JFrame layout not the one I set? If I set a layout on a JFrame with setLayout and then retrieve it with getLayout then I get a different LayoutManager. What is going on here?? public class Lay { public static void main(String[] args) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { java.awt.Container container = new javax.swing.JFrame(); //new javax.swing.JPanel(); java.awt.LayoutManager layout = new java.awt.GridLayout(); container.setLayout(layout); layout = container.getLayout(); System.err.println(layout); } }); } } Gives java.awt.BorderLayout[hgap=0vgap=0] but if I replace JFrame with JPanel I get java.awt.GridLayout[hgap=0vgap=0rows=1cols=0] From the Java API for JFrame: public void setLayout(LayoutManager manager) Sets the LayoutManager. Overridden to conditionally forward the call to the contentPane. Refer to RootPaneContainer for more information. And from the RootPaneContainer page: This interface serves as a marker for Swing GUI builders that need to treat components like JFrame that contain a single JRootPane specially. For convenience JFrame JDialog JWindow JApplet and JInternalFrame by default forward by default all calls to the add remove and setLayout methods to the contentPane. This means you can call: rootPaneContainer.add(component); instead of: rootPaneContainer.getContentPane().add(component); A JRootPane is a common component that all the heavyweight components use to appear like a native OS window. It handles the menu bar close/minimize/maximize buttons etc. JFrame tries to hide the fact that JRootPane does the real work from you but in this case it just made things more confusing. Second ahead of me. Well done sir! For the rationale behind the getContentPane stuff Hans Muller explains: http://weblogs.java.net/blog/hansmuller/archive/2005/11/jframeadd_conte.html in other words: setLayout() is overriden in JFrame while getLayout() is not...
562,A,"Programmatically close a JDialog Is there a way to close a JDialog through code such that the Window event listeners will still be notified? I've tried just setting visible to false and disposing but neither seem to do it. Untested suggestion: Have you tried getWindowListeners() and then iterating around to fire windowClosed() to each of the WindowListeners? EDIT: the above suggestion is wrong. Keeping it for posterity. I'm afraid calling dialog.dispose() works fine for me in my simple example.  Closing a window (with dispose()) and hiding it (with setVisible(false)) are different operations and produce different events -- and closing it from the operating system is yet another different operation that produces yet a different event. All three will produce windowDeactivated to tell you the window's lost focus but dispose() will then produce windowClosed while closing from the OS will first produce windowClosing. If you want to handle both of these the same way you can set the window to be disposed when closed: window.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE); In general setVisible(false) implies that you might want to use the window again so it doesn't post any window events (apart from windowDeactivated). If you want to detect the hiding of a window you need to use a ComponentListener; window.addComponentListener(new ComponentAdapter() { @Override public void componentHidden() { System.out.println(""componentHidden()""); } }) Note though that this will pretty much only work for explicit setVisible() calls. If you need to detect hiding more generally you can use a HierarchyListener but it's probably more trouble than it's worth.  window.addHierarchyListener(new HierarchyListener() { @Override public void hierarchyChanged(HierarchyEvent e) { System.out.println(""valid: "" + window.isValid()); System.out.println(""showing: "" + window.isShowing()); } }); Note that when you dispose a window you'll get a couple of HierarchyEvents first for hiding and then for invalidation but when you hide it with setVisible() it's still valid so you won't get the invalidation. TL;DR: use dispose() and listen for windowClosed() camickr posting a `windowClosing` event gets you a `windowClosing` event and (assuming the default close operation isn't `EXIT_ON_CLOSE`) a `windowDeactivated` event -- as you say just as if the user clicked the X. That doesn't seem obviously more useful than the events you get with `dispose()` -- if all you want to do is close the window and get some events. It does have the advantage that it matches the behavior of the X so you can handle both the X and your programmatic closing in the same way but you can also get that (reversed) with `DISPOSE_ON_CLOSE`. IMHO that's cleaner but YMMV. Thanks David. I was only listening for windowClosing when using dispose. I didn't realize the only the OS closing it produced window closing. I had to find out the hard way myself. :) Ok I may still not understand the question. But the OP say he wants the ""winder listeners to still be notified. My suggestion is to NOT use the dispose method but to sent a windowClosing event tot the window. This will act just like somebody clicked on the ""X"" button. The window will be disposed and the window listener will be nofified. Its 2 lines of code. You seem to understand the problem better than I so maybe you will test my suggestion to see if it makes sense. My confusion was that I didn't need it on windowClosing but rather windowClosed. I wasn't trying to intercept windowClosing events so by putting it in windowClosed I can get the event either when the dialog is disposed either by hiding it and calling dispose OR if the user clicks the X.  Dispatch a windowClosing event to the Window. Check out the ExitAction example from the Closing an Application entry. It wasn't me that downvoted it but perhaps it's because it looks as though you didn't try to understand Jeff's problem you just found linked to your most-likely-related existing blog post. The fact that you've posted two complaints about Jeff not liking your answer without any further attempt to find out why it's not working for him doesn't make the answer itself look any more attractive. In my experience asking questions (or presenting alternative hypotheses) about the original question is more effective than just looking at it harder and/or suggesting the poster hasn't looked at your answer hard enough. You also seem to be fond of posting comments (like this one) complaining about the poster's failure to appreciate your answers to other questions and I'm not sure who that's helping. But hey your rep's 40% higher than mine with only 28% more answers so clearly the downvotes can't be weighing you down too much. Its my experience that people like to be ""spoon fed"" the answer. So when presented the option of ""posted code"" versus ""following a link and doing some reading"" the former is usually choosen. So my comments are designed to nudge the poster into actually reading the link. By the way my suggestion results in both a windowClosing and WindowClosed event being generated when DISPOSE_ON_CLOSE is used. I agree I could be out in left field but my comment about one of us not understanding the other indicates I've looked at this several times trying to make sure I understand the question. My other comments are designed to have Jeff take another look at my suggestions. I still maintain I have a 1 line solution for his problem on creating images of a non displayed panel. How do people learn anything if you don't give a reason for the down vote?  I wanted to fire a windowClosing event from the code (just as if the user clicked the X) because I have an extra close button in the JDialog and want the same WindowListener (that I implemented using a WindowAdapter) to be run when the X is clicked and when the button is clicked. Running dispose() only fires windowClosed not windowClosing and I want a message to appear before the window is closed for confirmation. I also didn't manage to fire windowClosing via JDialog's method processWindowEvent since it is protected. Here is how I got it working though: WindowAdapter adapter = (WindowAdapter)jdialog.getWindowListeners()[0]; adapter.windowClosing(new WindowEvent((Window)jdialog WindowEvent.WINDOW_CLOSING)); Hope that helps someone.  I don't seem to have your problem. When I use the code below windowDeactivated() is called for either setVisible( false ) or dispose() and windowClosed() is also called for dispose(). ClosingDialog.java: public class ClosingDialog extends JDialog { public ClosingDialog(Frame owner String title boolean modal) { super(owner title modal); JPanel contentPanel = (JPanel) this.getContentPane(); JButton setVisButton = new JButton(""setVisible( false )""); setVisButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ClosingDialog.this.setVisible(false); } }); JButton disposeButton = new JButton(""dispose()""); disposeButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ClosingDialog.this.dispose(); } }); contentPanel.setLayout(new FlowLayout()); contentPanel.add(setVisButton); contentPanel.add(disposeButton); this.addWindowListener(new WindowListener() { public void windowActivated(WindowEvent e) { System.out.println(""windowActivated""); } public void windowClosed(WindowEvent e) { System.out.println(""windowClosed""); } public void windowClosing(WindowEvent e) { System.out.println(""windowClosing""); } public void windowDeactivated(WindowEvent e) { System.out.println(""windowDeactivated""); } public void windowDeiconified(WindowEvent e) { System.out.println(""windowDeiconified""); } public void windowIconified(WindowEvent e) { System.out.println(""windowIconified""); } public void windowOpened(WindowEvent e) { System.out.println(""windowOpened""); } }); this.setSize(300 300); } } Typo: The action for `disposeButton` should call `ClosingDialog.this.dispose()` not `setVisible(false)` again. If you do that you get a `windowDeactivated` followed by a `windowClosed` -- or I do at any rate. The `windowClosing` event is generally for closing a window via an OS control (e.g. the windows red X). (But +1 for some useful test code.) Thanks David. Totally missed it! Yes I tried with windowClosing and did not receive that event. Which is why I gave my solution 5 hours ago. All windowDeactivated means is that is has lost focus. You don't know for sure if the window is actually closing. Generally WindowListeners will listen for the window closing event so they can do some special processing on a close."
563,A,how can i use JXMapViewer in my applet? hi i want to write an applet that must render my map images with zoom/pan tools i find out JXMapViewer can help me how i can use it? where i can find related docs which help me to write an applet that request on my image server to provide tiles to render? what about image server and .... !!!!??? help me on : image server structure tileprovider tilefactory... that JXMapViewer need. As AeonFlux linked you Joshua Marinacci's blog is the best resource to get started. There are six articles he wrote that I have used to get up to speed with JXMapViewer. In order of publication: Getting started with the Aerith Mapping Component NASA Maps in your Swing App A Mapping Christmas Present Tricked out maps and a new tile provider Building Maps into Your Swing Application with the JXMapViewer Mapping Mashups with the JXMapViewer In addition here are some other resources I have found useful: SwingLabs forums where you can ask questions about JXMapViewer SwingX-WS Continuous Build (Hudson) where you can download the latest version of SwingX-WS The best combination of functionality I have found uses the latest continuous build of SwingX-WS which is that JAR built on April 16 2008 (direct link). However some things have changed in SwingX-1.0 and that latest SwingX-WS JAR won't work with SwingX-1.0. So I had to download SwingX 0.9.7 (direct link to the JAR). You'll need both the swingx-0.9.7.jar file as well as the swingx-beaninfo-0.9.7.jar. thanks a million i am going to study Joshua blog  Here are some links that can probably help Link 1 older link from Stack Overflow where a similar question was put up. Link2
564,A,Is it possible to set a TitledBorder opaque on Swing? Is it somehow possible on Swing to set a TitledBorder transparent so that a background image shines through? Thanks for the hint got confused within my own thoughts :) Found the answer. Use the method setOpaque(false) on the underlying panel.  Strange - TitledBorder.isBorderOpaque() supposedly returns false so it should already work. Maybe the problem is just that the component you're putting the border on just doesn't paint the background image over the border insets?
565,A,JPanel size by inner components Is it possible to tell JPanel to set its size to fit all components that it contains? Something like pack() for JFrame. edit: The trick with preferredSize didn't help. I've got JSplitPane where in one part there is GridBagLayout with many labels (see screenshot) and labels overlap each other. I would try: panel.revalidate(); panel.repaint(); This will not necessarily set the panel to its preferred size that is more dependent on what the layout manager decides to use. This is useful in cases where you have added/removed components from a panel that is currently displayed and visible. Update: Based on your screenshot I can say the following: 1) Consider programatically changing the divider location. 2) Consider programatically resizing the window itself horizontally since it seems to be a little tight to show both sides of the split pane. Or both. You can set the divider location by doing splitPane.setDividerLocation(newSize); Keep in mind that there are two overloaded methods for this one taking a float one taking an int. The float does a percentage of the size while the int is the size in pixels. The size is for the left hand panel (or top panel for that orientation). I would consider possibly changing the divider location based on the preferred width of the panels. see edit for exact problem  JSplitPanes are a bit fussy when it comes to its children's sizes have a look at the Java tutorial. Are you using the GridBagLayout correctly? Looks like it's not setting the right JPanel's minimum size properly.  maybe you can do something like that by removing from your panel setResizable(false);  After looking at the source code for pack() I came up with:  panel.setPreferredSize(panel.getPreferredSize()); This forces the panel to recalculate its preferred size based on the preferred sizes of its subcomponenents. You may or may not have to call validate() afterward; in my tiny example it seemed to make no difference but the Javadoc says: The validate method is used to cause a container to lay out its subcomponents again. It should be invoked when this container's subcomponents are modified (added to or removed from the container or layout-related information changed) after the container has been displayed. So I guess it depends on why you're having to repack your JPanel. Thanks.It'll be ok if you don't setSize setPreferredSize or setMinimumSize.  By default Containers have a preferred size that matches the preferred layout size given by the container. So literally all you have to do is: panel.setSize(panel.getPreferredSize()); Presumably you are doing something odd with the parent to stop the parent's layout manager doing the equivalent of this.
566,A,"Isn't Swing's JPanel pretty much like AWT's Panel? The former's widget is not showing up I'm changing a program from AWT to Swing as proposed on the second chapter of Java Swing's book and the panel just disappears when I do the change from Panel to JPanel. The same doesn't happen when I change from Button to JButton. It seems to be a bug since it appears to be trivially simple to do so - just adding an extra J to the name - but I'm not sure where the problem is - with my VM (Sun JDK) with my WM (xmonad) or with the way I'm programming (Clojure's Java Support). Any idea? As previously stated I'm writing it in Clojure (a lisp-like language for the JDK). Here is my code:  (defn main [] (let [toolbar-frame (Frame. ""Toolbar Example (Swing)"") cut-button (JButton. ""Cut"") copy-button (JButton. ""Copy"") paste-button (JButton. ""Paste"") java-button (JButton. ""Java"") windows-button (JButton. ""Windows"") mac-button (JButton. ""Mac"") motif-button (JButton. ""Motif"") lnf-panel (JPanel.) toolbar-panel (Panel.) print-listener (proxy [ActionListener] [] (actionPerformed [evt] (.getActionCommand evt))) ] (.addWindowListener toolbar-frame (proxy [WindowAdapter] [] (windowClosing [e] (System/exit 0)))) ;(doto windows-button (.addActionListener lnf-listener)) ;(doto motif-button (.addActionListener lnf-listener)) ;(doto mac-button (.addActionListener lnf-listener)) ;(doto java-button (.addActionListener lnf-listener)) (doto cut-button (.addActionListener print-listener)) (doto copy-button (.addActionListener print-listener)) (doto paste-button (.addActionListener print-listener)) (doto lnf-panel (.add windows-button) (.add java-button) (.add mac-button) (.add motif-button) (.setLayout (FlowLayout. FlowLayout/LEFT))) (doto toolbar-panel (.add cut-button) (.add copy-button) (.add paste-button) (.setLayout (FlowLayout. FlowLayout/LEFT))) (doto toolbar-frame (.add toolbar-panel BorderLayout/NORTH) (.add lnf-panel BorderLayout/SOUTH) (.setSize 450 250) (.setVisible true)))) Thanks I notice you are adding the child components before setting the layout. Try setting the layout first. The problem may be that the default constraint information is lost when you change the layout. If the JPanel is invisible it may be because it has not been auto-sized to fit its child elements. Also try (.pack) instead of (.setSize 450 250) on the frame. It was the (.pack) thing which strangely wasn't mentioned on the book. Thanks!"
567,A,What am I doing wrong in Java to get this IllegalArgumentException? I occasionally get an exception in a JTextArea that I'm updating with JTextArea.append() ... java.lang.IllegalArgumentException: Invalid remove at javax.swing.JTextArea.replaceRange(Unknown Source) at sun.plugin.ConsoleWindow$24.run(Unknown Source) at java.awt.event.InvocationEvent.dispatch(Unknown Source) at java.awt.EventQueue.dispatchEvent(Unknown Source) at java.awt.EventDispatchThread.pumpOneEventForHierarchy(Unknown Source) at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source) at java.awt.EventDispatchThread.pumpEvents(Unknown Source) at java.awt.EventDispatchThread.pumpEvents(Unknown Source) at java.awt.EventDispatchThread.run(Unknown Source) Is there anything that I could be doing wrong that's causing this exception? The javadoc suggests that the method should be thread-safe. Document does not provide a rich enough interface to be usefully used in a thread-safe manner. JTextArea will have some thread-safety claims removed in JDK7. Stick to updating Swing components and Swing text objects in the AWT Event Dispatch Thread (EDT).  Check out this for a very useful tool for checking thread abuse in Swing: http://weblogs.java.net/blog/alexfromsun/archive/2006/02/debugging_swing.html
568,A,"JTextArea - very small size with long text I'm using a JTextArea to display a long text JTextArea _definition = new JTextArea(5 50); with word-wrap _definition.setLineWrap(true); _definition.setWrapStyleWord(true); embedded in a JScrollPane add(new JScrollPane(_definition) gbc); All that is part of a JPanel with the GridBagLayout. Everything is working fine with shorter text but when I add a long text with line wraps and the scrollbar is required pack() goes south and all components have just a minimum size and the dialog is unusable (it's not only the TextArea that is affected). I've tried to figure out what is going on but all I could figure out is that is has to do with the text in the TextArea. I'm stuck .. any ideas? Thanks! Try calling pack() twice. JTextArea has some odd behavior as described in this entry in the Java bug database. It reports its preferred size initially as a single-line entry that is very wide (e.g. one row a thousand columns). Once it realizes that it is a certain width it will then report a correct preferred size for the number of rows it needs. I've had to do a number of different things to get around this behavior including subclassing JTextArea and modifying its behavior to be a little smarter. Double pack() may work for you in this case or you may have to resort to more complicated tweaking depending on how everything in your layout fits together. Double pack()-ing didn't work for me .. can you elaborate on ""more complicated tweaking"" .. thanks! A first step is probably to try subclassing JTextArea and track every time the get*Size() methods are called and see if the results are what you expect them to be.  Got it to work .. Ross's answer was giving me some better terms to search for so thanks for helping me by pointing in the right direction!  pack(); _definition.setSize(_definition.getPreferredSize()); pack(); So double-packing plus some extra ... strange behavior. Cool I'm glad you got it to work. :)"
569,A,"Moving focus from JTextArea using tab key As stated I want to change the default TAB behaviour within a JTextArea (so that it acts like a JTextField or similar component) Here's the event action private void diagInputKeyPressed(java.awt.event.KeyEvent evt) { if(evt.KEY_PRESSED == java.awt.event.KeyEvent.VK_TAB) { actionInput.transferFocus(); } } And here's the listener diagInput.addKeyListener(new java.awt.event.KeyAdapter() { public void keyPressed(java.awt.event.KeyEvent evt) { diagInputKeyPressed(evt); } }); I've tried evt.KEY_TYPED as well with no joy. Any ideas? quick edit: I've also tried requestFocus() in place of transferFocus() Very similar to http://stackoverflow.com/questions/5042429/how-can-i-modify-the-behavior-of-the-tab-key-in-a-jtextarea According to this class: /** * Some components treat tabulator (TAB key) in their own way. * Sometimes the tabulator is supposed to simply transfer the focus * to the next focusable component. * <br/> * Here s how to use this class to override the ""component's default"" * behavior: * <pre> * JTextArea area = new JTextArea(..); * <b>TransferFocus.patch( area );</b> * </pre> * This should do the trick. * This time the KeyStrokes are used. * More elegant solution than TabTransfersFocus(). * * @author kaimu * @since 2006-05-14 * @version 1.0 */ public class TransferFocus { /** * Patch the behaviour of a component. * TAB transfers focus to the next focusable component * SHIFT+TAB transfers focus to the previous focusable component. * * @param c The component to be patched. */ public static void patch(Component c) { Set<KeyStroke> strokes = new HashSet<KeyStroke>(Arrays.asList(KeyStroke.getKeyStroke(""pressed TAB""))); c.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS strokes); strokes = new HashSet<KeyStroke>(Arrays.asList(KeyStroke.getKeyStroke(""shift pressed TAB""))); c.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS strokes); } } Note that patch() can be even shorter according to Joshua Goldberg in the comments since the goal is to get back default behaviors overridden by JTextArea: component.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERS‌​AL_KEYS null); component.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERS‌​AL_KEYS null); This is used in question ""How can I modify the behavior of the tab key in a JTextArea?"" The previous implementation involved indeed a Listener and the a transferFocus():  /** * Override the behaviour so that TAB key transfers the focus * to the next focusable component. */ @Override public void keyPressed(KeyEvent e) { if(e.getKeyCode() == KeyEvent.VK_TAB) { System.out.println(e.getModifiers()); if(e.getModifiers() > 0) a.transferFocusBackward(); else a.transferFocus(); e.consume(); } } e.consume(); might have been what you missed to make it work in your case. `patch` can be simpler since you want to get back default behaviors overridden by JTextArea. Just 2 lines: `component.setFocusTraversalKeys(KeyboardFocusManager.{FORWARDBACKWARD}_TRAVERSAL_KEYS null)` See http://stackoverflow.com/a/5043957/411282 needed to change to getKeyCode() and evt.consume() - evt.consume() got rid of the tab character and using getKeyCode() allows it to successfully moved the focus using tab. Thanks a lot :) You are welcome. I wonder if the first implementation (the one modifying the FocusTraversalKeys of a Component) is not ""cleaner"" in a way though... wow good answer always the same exemplary attention to detail :)"
570,A,"How can I open a web-page from my applet? I have to open a page from class extended from javax.swing.AbstractAction class... Is that possible? Yes it is possible. getAppletContext().showDocument(url""_blank""); The interface AppletContext has the method Nope pretty much sure that's it. Any reason why that won't work? It was a long way to pass AppletContext to the actionListener... any other way to do it?"
571,A,"How to disable (or hide) the close (x) button on a JFrame? I have a window (derived from JFrame) and I want to disable the close button during certain operations which are not interruptible. I know I can make the button not do anything (or call a handler in a WindowListener) by calling setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE); but I would like to make it clear visually that it is pointless to click it. I agree with Josh. At the very least map close to a popup that says ""Operation in Progress..."" with a ""Cancel"" (hides popup) and ""Close Anyway"" (forces quit) button. When the background operation completes the app closes if that popup is still visible (i.e. they haven't clicked Cancel) Just a suggestion you might want to consider avoiding such GUI behavior due to poor usability. If I understand it correctly this bug report indicates that this is currently not possible.  This is probably the best you are going to get: setUndecorated(true); getRootPane().setWindowDecorationStyle(JRootPane.NONE); This will remove the entire titlebar java doesn't really specify a way to remove individual components of the titlebar edit: There may be a way check out these threads: link 1 link 2  For those coming to this later than 2008 there has been a change making it possible to do this. See this link Second response from the bottom shows how to do it by name. Like many other things in Swing this too is a complete PITA."
572,A,"How to synchronize Swing model with a rapidly changing ""real"" model? As is widely known anything related to Swing components must be done on the event dispatch thread. This also applies to the models behind the components such as TableModel. Easy enough in elementary cases but things become pretty complicated if the model is a ""live view"" of something that must run on a separate thread because it's changing quickly. For example a live view of a stock market on a JTable. Stock markets don't usually happen on the EDT. So what is the preferable pattern to (de)couple the Swing model that must be on the EDT and a ""real"" thread-safe model that must be updateable from anywhere anytime? One possible solution would be to actually split the model into two separate copies: the ""real"" model plus its Swing counterpart which is is a snapshot of the ""real"" model. They're then (bidirectionally) synchronized on the EDT every now and then. But this feels like bloat. Is this really the only viable approach or are there any other or more standard ways? Helpful libraries? Anything? Producer/consumer? The usual approach is to send ""signals"" of some kind to which the UI listens. In my code I often use a central dispatcher which sends signals that contain the object that was modified the name of the field/property plus the old and new value. No signal is sent for the case oldValue.equals(newValue) or oldValue.compareTo(newValue) == 0 (the latter for dates and BigDecimal). The UI thread then registers a listener for all signals. It then examines the object and the name and then translates that to a change in the UI which is executed via asyncExec(). You could turn that into a listener per object and have each UI element register itself to the model. But I've found that this just spreads the code all over the place. When I have a huge set of objects on both sides I sometimes just use several signals (or events) to make things more manageable. Ok so you have a split model and then send update notifications from the ""real"" model to the UI model. `asyncExec()` seems to be a SWT function. Is it essentially similar to `EventQueue.invokeLater()`? Yep use `EventQueue.invokeLater()` :) My approach is to keep the dependencies between the two models as slim as possible so I can easily change either. As long as the signals don't change (much) the other model won't be affected.  As far as I understand you don't want to implement Swing model interfaces in your real model do you? Can you implement a Swing model as a ""view"" over a part of a real model? It will translate its read-access getValueAt() to the calls of the real model and the real model will notify Swing model about the changes  either providing a list of changes or assuming that Swing model will take care of quering the new values of everything it currently is showing. Right: I don't want to implement Swing interfaces in my real model because I know that the real model will be updated from threads other that the EDT which would violate Swing's requirements. I think what you're describing is essentially the ""split model"". It is not a big problem to update the real model from other threads provided that interaction with Swing happens in EDT and your model is thread-safe. Swing will call methods like getValueAT() in EDT so the only thing to worry about is sending notifications (fireSmthChanged) in EDT. You can do it using SwingUtilities.invokeLater ... but of course you will be facing subtle issues like wrong number of children in a tree (because something has changed since you sent a notification to Swing) etc. Subtle issues are to be expected. But note that if the Swing calls getValueAt(x) on the real model *the value might not exist any more* if it was removed by a different thread just a moment ago. So this could lead to `ArrayIndexOutOfBoundsException`s which is not subtle. That's what I actually meant as ""subtle"". It is of course not that subtle if it is not handled properly :). Another idea: you may try creating snapshots of the changed parts and use them if something changes between the instants when you notify Swing and it refreshes its data. But this might be much more error prone than ""split the model"". Ok handling nonexistent get()s gracefully could be one option. Actually I'm starting to see the different trade-offs here. ""Split model"" is a brute force approach conceptually relatively simple and robust but a resource hog (if the snapshot is taken on each update). Incremental notification would be way lighter but also way harder to implement correctly.  I can recommend the following approach: Place events that should modify the table on a ""pending event"" queue and when an event is placed on the queue and the queue is empty then invoke the Event Dispatch thread to drain the queue of all events and update the table model. This optimisation means you are no longer invoking the event dispatch thread for every event received which solves the problem of the event dispatch thread not keeping up with the underlying event stream. Avoid creation of a new Runnable when invoking the event dispatch thread by using a stateless inner class to drain the pending event queue within your table panel implementation. Optional further optimisation: When draining the pending event queue minimise the number of table update events fired by remembering which table rows need to be repainted and then firing a single event (or one event per row) after processing all events. Example Code public class MyStockPanel extends JPanel { private final BlockingQueue<StockEvent> stockEvents; // Runnable invoked on event dispatch thread and responsible for applying any // pending events to the table model. private final Runnable processEventsRunnable = new Runnable() { public void run() { StockEvent evt; while ((evt = stockEvents.poll() != null) { // Update table model and fire table event. // Could optimise here by firing a single table changed event // when the queue is empty if processing a large #events. } } } // Called by thread other than event dispatch thread. Adds event to // ""pending"" queue ready to be processed. public void addStockEvent(StockEvent evt) { stockEvents.add(evt); // Optimisation 1: Only invoke EDT if the queue was previously empty before // adding this event. If the size is 0 at this point then the EDT must have // already been active and removed the event from the queue and if the size // is > 0 we know that the EDT must have already been invoked in a previous // method call but not yet drained the queue (i.e. so no need to invoke it // again). if (stockEvents.size() == 1) { // Optimisation 2: Do not create a new Runnable each time but use a stateless // inner class to drain the queue and update the table model. SwingUtilities.invokeLater(processEventsRunnable); } } } By the way that code has a subtle bug: if someone adds a StockEvent just when the queue is about to be empty stockEvents.isEmpty() may return false but the processEventsRunnable ends before the new events get added to stockEvents queue. Then it's in stuck state. A solution could be to use other mechanism than isEmpty() to check whether processEventsRunnable needs to be relaunched. @Joonas - That's a really good point. I think the problem is solved by checking that size() == 1 after adding the event to the queue. If the queue is empty at this point then the event has already been processed so no problems there and if the size is > 1 then we know the EDT must have already been invoked by a previous method call. @Adamski - That's an ingenious solution thanks again! You're welcome! Thanks you definitely seem to have been there :-)"
573,A,Can I apply CSS to swing text components? A number of swing text components will interpret HTML. I'd like to style this HTML with CSS if possible. Any one know how to do this? The Jaxx Framework allows you to do this. The linked domain is not anymore in use. Hi thanks for response. I did see Jaxx but I'm wondering if it can be done in native Swing. No it can't. Thats why you need a framework. Or rather it can't without you coding a CSS engine yourself. How about doing Swing with Jelly. Yes its another framework :(
574,A,"How to enable GUI behaviors for sorting a JTable when SQL does the sorting? How do I enable JTable icons and behaviors for sorting table rows by a column without letting it use a comparison predicate to do the sorting? That is to say how do I tell the table headers to show the arrow for ascending/descending sort order in the column being used and get it to call appropriate methods when sort order/column change? I am trying to create an (editable filterable sortable) JTable backed by an SQL query or view. The rows may not fit in memory and may not map cleanly to java objects so I want to do all sorting/filtering within SQL. I have already written the code for changing a query to accommodate sorting by column filtering by values and visible columns. To use this I am planning to write a JTableModel based on a ResultSet with TYPE_SCROLL_SENSITIVE and CONCUR_UPDATABLE so changes to the DB get propagated to the ResultSet. I will periodically (several times a second) force a refresh of the visible JTable from the ResultSet so changes to the database become visible to the user. User changes to the table will be passed to the updateable ResultSet after validation. I've looked a little bit at how sorting is done normally but most implementations seems to rely on the JTable creating a javax.swing.RowSorter with a Comparator predicate or on maintaining a sorted list of rows that fires events when changed. So my questions: ORM frameworks are NOT an answer to this question because the data do not map well to entity objects. Also the DBMS I am using is H2. EDIT: Sortable JTable libraries based on applying Comparators or sorting predicates to row objects are also unsuitable unfortunately. I do not believe I will be able to hold all objects in memory in order to perform sorting. This problem prevents me from using the SwingX JXTables GlazedLists or similar libraries. I wish I could but I can't. Period. ** I will be dealing with many thousand rows potentially millions with numerous columns. Yes I really DO need to use SQL to do the sorting and filtering.** Questions: (in descending importance) How do I show indicators for which column is used to sort rows? How do I get the JTable to fire appropriate events when the column headers are LEFT-clicked to change sort order? Is there an easier way to force the JTable to update when the database changes? Is there a library that would make all this considerably easier (connecting DB queries or views and JTables)? Am I going to run into horrible horrible problems when I design the system like this? I have never used it myself but JIDE Data Grids provides a DatabaseTableModel that provides filtering and sorting support using SQL WHERE and ORDER BY. Not free but I should be able to dissect it for ideas at least. Best answer so far and it doesn't involve ""ignore your requirements"" or ""use reflection"" (snicker) so you get credit. Thanks!  In answer to 1 and 2 check out SwingX which already includes a table class with built-in sorting (and filtering). You may be able to adapt this. Am I going to run into horrible horrible problems when I design the system like this? From experience yes. I worked on a project almost exactly the same as this where someone had designed a JTable that supposedly 'magically' bound to a database table. This coupled display logic and database access together in one big horrible mess which we replaced entirely with reflection-driven table models and separate record CRUD operations. You say that ORM is not the answer... If the format of the data doesn't change then it's worth considering anyway. Your 'entity' classes need not represent real-world entities. If (as I suspect) your entity format changes it might be worth considering: A flexible map-based Record class which stores records as key-value pairs; Dynamically-built table models for your display logic built by querying record keys plugged into SwingX tables to get sort and filter for free; A similarly-designed Repository class which encapsulates your database access separately from the table itself responsible for loading and saving Records. This acts as an adapter between your updateable ResultSet and the view (although I'd check whether using a ResultSet this way is going to require an open database connection whilst data is visible...). This separation into 'a table that displays and sorts records' and 'a repository that manages the data' means: You can reuse the table for non-database-bound data; You can display database-bound records in things other than tables; You won't go mad trying to build and test the thing :) Definitely start with SwingX which provides a flexible JXTable(sortingfiltering). I would stay away from a scrollable result set even if it has some advantages. The huge disadvantage is that it keeps a connection opened and having a few grids like that opened in several applications leads to ""no more connections available"" when you expect less(you cannot control how many grids will use an user most of the time).Myself I had to build something like this and I went on the path of retrieving pages in the table model instead of using a cursor. 1&2 = JXTable 3=table model should fire events. See posted question: both JXTable and the GlazedLists connections to it are awesome but not particularly feasible for my needs. To use them I either have to store primary key objects (longs in this case) and use ~1 query per key to get properties for comparison OR store all the objects in memory. The first is unworkably slow. The latter is more complex: it works fine for small simple rows but rapidly eats RAM up. If you store 100K rows with 15 columns you pay for java's objects. 8 bytes minimum per object 24 PER STRING. I've been here before: there's a reason we use DBs. When I say that ORM is utterly unsuitable due to structure I mean it reflection is too bloody slow. AFAIK SwingX is tied to sort predicates on row objects and is thus unsuitable. The table is describing resources with a set of tags which the user may modify. The user can also add new tags. Furthermore I *know* at this point that I will be adding additional data types for tags. There will be thousands or (potentially) millions of unique resources. Reflection will choke on performance and an ORM will generate too many queries or eat RAM like popcorn. @BobMcGee - cool then ditch the ORM and reflection. I still think that you should seriously consider separating the data access from the table though. I've written a JTable extension myself that had clickable column headers. I overrode the code that renders the header row to place JButtons there instead of labels then added event handlers to receive the click update the icon appropriately (up/down arrow) and create a custom Comparator to pass to a straight collection sort method on the backing data. All the sorting was wrapped in a SortableTableModel model extension class. Hmmm....not sure what do you mean by "" I do not believe I will be able to hold all objects in memory in order to perform sorting."" You don't have to keep all the objects in memory and you don't have to use the default sorting model. The main reason to use JXTable is because it provides support for sorted columns and takes care of all visual details but you can still do whatever you want in the table model. You can do the same thing with JTable but you will have to implement yourself a functionality already implemented in JXTable.  Leaving aside the database stuff there's a class called SortableTable that's a part of JIDE Grids. It displays the sorting with a little ^ or v in the table header and supports sorting by more than 1 column (1v 2v etc.). Well its a JTable subclass and uses a TableModel just like any other JTable. It's possible you can if you write your own customised TableModel I don't need multiple sorting columns (yet). Is there a way I can use this to hook into external sorting (SQL) rather than operating on objects in memory?  You should be able to subclass javax.swing.RowSorter in order to create a row sorter that does the sorting in the database. From the API docs: ""RowSorter implementations typically don't have a one-to-one mapping with the underlying model but they can. For example if a database does the sorting toggleSortOrder might call through to the database (on a background thread) and override the mapping methods to return the argument that is passed in."" http://docs.oracle.com/javase/6/docs/api/javax/swing/RowSorter.html"
575,A,"Problem with JDICplus embedding IE in Java I am building a Java Swing application that needs to support both an embedded browser and ActiveX. The easy way to do this seemed to be to use JDICplus which just embeds IE in your application. That would have covered both requirements. I also need to overlay some buttons on top of this browser view so the user can navigate between views. To do that I have a JLayeredPane to which I add views and at a higher layer buttons. This works in my pure Java views. However on my Internet view the Internet draws on top of the buttons. In other words it doesn't seem to respect the JLayeredPane. I'm guessing this is because it is a native component and not a Java component. To be sure I put the Internet pane into a JInternalFrame and the buttons in the other and put both of the internal frames into a JDesktopPane. When I drag the button frame on top of the Internet frame the Internet frame jumps to the foreground and covers the other frame. It's as if the embedded IE steals the focus and puts itself in the forefront of my other windows. My question is this: is there any way to draw Java components on top of these Windows/IE components reliably? Or am I not going to get anywhere mixing Java with IE? Are there other options to meeting my requirement of an embedded browser and ActiveX support (which technically could be a different view--in other words I could have an Internet view and another view that just supports ActiveX). I'm open to suggestions. I have looked at other free browser components for Java and as everyone will tell you it's discouraging. Given my Java experience if you need such Windows specific technologies I think you would be better looking at Windows specific solutions. Sadly I cannot suggest anything more specific. Check out Sun's article on mixing heavy and light components - since JDICPlus basically embeds IE into your app it's a heavyweight component. You may be able to place buttons over the browser window by using other heavyweight components (i.e. AWT Button) or do something like place the button into a JPopupMenu placed over the browser with setDefaultLightWeightPopupEnabled(false) set on it to make it heavyweight. Edited I wrote an example using JPopupMenu to display a JButton over a heavyweight component - JPopupMenu works but it does have built in behavior to close the menu when the popup or components in the popup lose focus. I added a MouseMotionListener to the heavyweight component to show the popups when the mouse entered a bounding box near where the buttons should be. Not sure if this works for you as the buttons aren't always shown. Including a code example and screenshot - import javax.swing.*; import javax.swing.event.MouseInputAdapter; import java.awt.*; import java.awt.event.MouseEvent; import java.awt.geom.Rectangle2D; public class LightHeavy extends JFrame { private Component heavyweightComponent; private JPopupMenu backButton forwardButton; public LightHeavy() { super(""LightHeavy""); heavyweightComponent = buildHeavyweightComponent(); heavyweightComponent.setBackground(Color.ORANGE); heavyweightComponent.setSize(640 480); getContentPane().add(heavyweightComponent BorderLayout.CENTER); ImageIcon backArrow = new ImageIcon(""left_arrow_128.png""); backButton = buildPopup(backArrow); ImageIcon forwardArrow = new ImageIcon(""right_arrow_128.png""); forwardButton = buildPopup(forwardArrow); heavyweightComponent.addMouseMotionListener(new MouseInputAdapter() { public void mouseMoved(MouseEvent e) { Rectangle backHotSpot = new Rectangle(0 0 200 200); Rectangle forwardHotSpot = new Rectangle(heavyweightComponent.getWidth() - 200 0 200 200); if (backHotSpot.contains(e.getPoint())) { backButton.show(heavyweightComponent 0 0); } else if (forwardHotSpot.contains(e.getPoint())) { forwardButton.show(heavyweightComponent heavyweightComponent.getWidth() - forwardButton.getWidth() 0); } } }); } private Component buildHeavyweightComponent() { return new Canvas() { public void paint(Graphics og) { super.paint(og); Graphics2D g = (Graphics2D)og; String big = ""Heavyweight Component""; g.setFont(getFont().deriveFont(20F)); Rectangle2D bigBounds = g.getFontMetrics().getStringBounds(big g); g.drawString(big (this.getWidth() - (int)bigBounds.getWidth()) / 2 (this.getHeight() - (int)bigBounds.getHeight()) / 2); String little = ""(assume this is JDICplus)""; g.setFont(getFont().deriveFont(10F)); Rectangle2D littleBounds = g.getFontMetrics().getStringBounds(little g); g.drawString(little (this.getWidth() - (int)littleBounds.getWidth()) / 2 (this.getHeight() + (int)littleBounds.getHeight()) / 2); } }; } private JPopupMenu buildPopup(Icon icon) { JButton button = new JButton(icon); JPopupMenu popup = new JPopupMenu(); popup.add(button); popup.setBorderPainted(false); popup.setLightWeightPopupEnabled(false); return popup; } public static void main(String[] args) { JFrame f = new LightHeavy(); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); f.setLocationRelativeTo(null); f.setVisible(true); } } Here's a screenshot with the JButton on the left showing - note that you also won't be able to do any cool transparency effects as you're dealing with heavyweight components. But a JPopupMenu can hold more than a menu - I'll update my post with code and a screenshot. Yes this is exactly the problem--thanks for the link to that article! But since I'm building a touch screen application I need to use big buttons instead of menus. Maybe there's a way I can get a JButton into some kind of heavyweight component so I can render on top of IE...I want to be able to put images in buttons so I don't want to use Button... That's excellent--thanks very much!"
576,A,"Which components can be added in a JDesktopPane? I'm having some trouble designing an MDI Application with Swing. I have no trouble implementing the JDesktopPane & JInternalFrames my question will be a little more specific. Here is my base container Frame in a glance: package applicationGUI; import javax.swing.JFrame; public class DesktopContainer extends JFrame{ /* Fields */ /* Constructors */ public DesktopContainer(){ setContentPane(new Desktop()); setJMenuBar(AppllicationMenuBar.getMenuBar()); } /* Public Methods */ public Desktop getDesktop(){ return (Desktop)getContentPane(); } } And my Desktop: public class Desktop extends JDesktopPane{} Notice that I set a Desktop as a content pane of the DesktopContainer. What I want is to be able to add JPanels on the Desktop (specificially just below the JMenuBar). Unfortunately I wasn't able to do this. And finally here are my questions: 1-) Can JPanel objects be drawn on a JDesktopPane? I did some digging I guess it has something to do with the JLayeredPane capabilities but unfortunately I couldn't implement it. 2-) If JPanel object can't be drawn on a JDesktopPane how can I manage to do what I want any advice? I just figured ""add two JPanels to the JFrame use the one on the top for your needs and draw JDesktopPane into the second JPanel below"". Is this a good approach? Thank you for your answers.. A JPanel can be drawn and can receive events on a JDesktopPane public class DesktopContainer extends JFrame { /* Constructors */ public DesktopContainer(){ setContentPane(new Desktop()); setJMenuBar(createJMenuBar()); APanel a = new APanel(); a.setBounds(0 0 200 200); a.setVisible(true); getDesktop().add(a); } .... } class Desktop extends JDesktopPane { } class APanel extends JPanel { public APanel() { setLayout(new BorderLayout()); add(new JButton(""Hello stackoverflow"")); } } It works fine. You should invoke setVisible(true) setBounds() on JPanel as JInternalFrame required. That solved it thank you xrath.. thanks for the setBounds() tip!"
577,A,"How do I make a list with checkboxes in Java Swing? What would be the best way to have a list of items with a checkbox each in Java Swing? I.e. a JList with items that have some text and a checkbox each? You can use the Japura API. There is a List component with checkboxes [http://www.japura.org/checklist.html](http://www.japura.org/checklist.html) I'd probably be looking to use a JTable rather than a JList and since the default rendering of a checkbox is rather ugly I'd probably be looking to drop in a custom TableModel CellRenderer and CellEditor to represent a boolean value. Of course I would imagine this has been done a bajillion times already. Sun has good examples.  Better solution for Java 7 and newer I stumbled upon this question and realized that some of the answers are pretty old and outdated. Nowadays JList is generic and thus there are better solutions. My solution of the generic JCheckBoxList: import java.awt.Component; import javax.swing.*; import javax.swing.border.*; import java.awt.event.*; @SuppressWarnings(""serial"") public class JCheckBoxList extends JList<JCheckBox> { protected static Border noFocusBorder = new EmptyBorder(1 1 1 1); public JCheckBoxList() { setCellRenderer(new CellRenderer()); addMouseListener(new MouseAdapter() { public void mousePressed(MouseEvent e) { int index = locationToIndex(e.getPoint()); if (index != -1) { JCheckBox checkbox = (JCheckBox) getModel().getElementAt(index); checkbox.setSelected(!checkbox.isSelected()); repaint(); } } }); setSelectionMode(ListSelectionModel.SINGLE_SELECTION); } public JCheckBoxList(ListModel<JCheckBox> model){ this(); setModel(model); } protected class CellRenderer implements ListCellRenderer<JCheckBox> { public Component getListCellRendererComponent( JList<? extends JCheckBox> list JCheckBox value int index boolean isSelected boolean cellHasFocus) { JCheckBox checkbox = value; //Drawing checkbox change the appearance here checkbox.setBackground(isSelected ? getSelectionBackground() : getBackground()); checkbox.setForeground(isSelected ? getSelectionForeground() : getForeground()); checkbox.setEnabled(isEnabled()); checkbox.setFont(getFont()); checkbox.setFocusPainted(false); checkbox.setBorderPainted(true); checkbox.setBorder(isSelected ? UIManager .getBorder(""List.focusCellHighlightBorder"") : noFocusBorder); return checkbox; } } } For dynamically adding JCheckBox lists you need to create your own ListModel or add the DefaultListModel. DefaultListModel<JCheckBox> model = new DefaultListModel<JCheckBox>(); JCheckBoxList checkBoxList = new JCheckBoxList(model); The DefaultListModel are generic and thus you can use methods specified by JAVA 7 API here like this: model.addElement(new JCheckBox(""Checkbox1"")); model.addElement(new JCheckBox(""Checkbox2"")); model.addElement(new JCheckBox(""Checkbox3""));  I recommend you use a JPanel with a GridLayout of 1 column. Add the checkBoxes to the JPanel and set the JPanel as the data source of a JScrollPane. And to get the selected CheckBoxes just call the getComponents() of the JPanel to get the CheckBoxes.  Here is just a little addition to the JCheckBoxList by Rawa. This will add the ability to select using space bar. If multiple items are selected all will be set to inverted value of the first item.  addKeyListener(new KeyAdapter() { @Override public void keyPressed(KeyEvent e) { int index = getSelectedIndex(); if (index != -1 && e.getKeyCode() == KeyEvent.VK_SPACE) { boolean newVal = !((JCheckBox) (getModel() .getElementAt(index))).isSelected(); for (int i : getSelectedIndices()) { JCheckBox checkbox = (JCheckBox) getModel() .getElementAt(i); checkbox.setSelected(newVal); repaint(); } } } });  A wonderful answer is this CheckBoxList. It implements Telcontar's answer (though 3 years before :)... I'm using it in Java 1.6 with no problems. I've also added an addCheckbox method like this (surely could be shorter haven't used Java in a while): public void addCheckbox(JCheckBox checkBox) { ListModel currentList = this.getModel(); JCheckBox[] newList = new JCheckBox[currentList.getSize() + 1]; for (int i = 0; i < currentList.getSize(); i++) { newList[i] = (JCheckBox) currentList.getElementAt(i); } newList[newList.length - 1] = checkBox; setListData(newList); } I tried out the demo for the Jidesoft stuff playing with the CheckBoxList I encountered some problems (behaviors that didn't work). I'll modify this answer if I find problems with the CheckBoxList I linked to. I needed to add checkbox.setOpaque(true); for the background to paint (using GTK+ L&F). And how does one add listeners to each checkbox? Did you ever update this or is it still prone to errors? I'm using this with no problems. The OTHER thing I mentioned had problems.  Odds are good w/ Java that someone has already implemented the widget or utility you need. Part of the benefits of a large OSS community. No need to reinvent the wheel unless you really want to do it yourself. In this case it would be a good learning exercise in CellRenderers and Editors. My project has had great success with JIDE. The component you want a Check Box List is in the JIDE Common Layer (which is OSS and hosted on java.net). The commercial stuff is good too but you don't need it. http://www.jidesoft.com/products/oss.htm https://jide-oss.dev.java.net/  Create a custom ListCellRenderer and asign it to the JList. This custom ListCellRenderer must return a JCheckbox in the implementantion of getListCellRendererComponent(...) method. But this JCheckbox will not be editable is a simple paint in the screen is up to you to choose when this JCheckbox must be 'ticked' or not For example show it ticked when the row is selected (parameter isSelected) but this way the check status will no be mantained if the selection changes. Its better to show it checked consulting the data below the ListModel but then is up to you to implement the method who changes the check status of the data and notify the change to the JList to be repainted. I Will post sample code later if you need it ListCellRenderer"
578,A,"Problem with keylistener hi i'm using swing and in my main frame(JFrame) i want that when ever user press + key one window lets say test should appear. my key listener works fine if i don't call the show method of the newly added JInternalFrame but when i call the show method of my JInternalFrame the KeyListener stops listening any more. i've tried a lot to solve it but all in vain so any help regarding this will be appreciated. thanks. this is my keyListener _mainFrameKeyListener = new KeyListener() { public void keyPressed(KeyEvent arg0) { // TODO Auto-generated method stub System.out.println(""the key pressed Id is : "" + arg0.getKeyCode()); if(arg0.getKeyCode() == 107){ test Test = new test(); _mainDesktopPane.add(Test); Test.show(); } } public void keyReleased(KeyEvent arg0) { // TODO Auto-generated method stub } public void keyTyped(KeyEvent arg0) { // TODO Auto-generated method stub } }; test Test = new test(); - Made me cringe :) http://java.sun.com/docs/codeconv/html/CodeConventions.doc8.html So it works once but when the internal frame is shown it stops? Is it because the just opened internal frame has focus maybe? Sounds like you want a hot key instead of a key listener to avoid focus issues. // Get the KeyStroke for our hot key KeyStroke plus = KeyStroke.getKeyStroke(KeyEvent.VK_PLUS 0 true); // Get the input map for our component // In this case we are interested in key strokes in the focussed window InputMap inputMap = panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW); // Map the key stroke to our ""action key"" (see below) inputMap.put(plus ""my_action""); // Get the action map for our component ActionMap actionMap = panel.getActionMap(); // Add the required action listener to out action map actionMap.put(""my_action"" actionListener); http://helpdesk.objects.com.au/java/how-to-specify-a-hot-key-for-a-swing-application Unfortunatelly ""KeyStroke.getKeyStroke(KeyEvent.VK_PLUS 0 true)"" doesn't work for me. But ""KeyStroke.getKeyStroke('+')"" works fine. Maybe that this comment can help to someone. How about an answer rather than a link? the link contains the example code that shows how to do what I have suggested ie. add a hot ket instead of using a key listener thanks for your reply HotKey works as per my expectations.  You would need to add the key listener to exactly the component that has focus (many components are actually composites). So use JComponent.registerKeyboardAction with a condition of WHEN_IN_FOCUSED_WINDOW. Alternatively use JComponent.getInputMap(WHEN_IN_FOCUSED_WINDOW true) and JComponent.getActionMap(true) as described in the registerKeyboardAction API docs. thanks for your reply Tom the issue is solved.  Please check whether a runtime exception is thrown. may be you are in the wrong thread for showing this dialog or another issue could throw this exception. Also please think about to use a asynch thread for showing your dialog instead of using the listener thread. But this is just a think about. i didn't get your reply! i was dealing with Key press event not any multi threading issue. and anyway problem is solved."
579,A,"focus issue using a JComboBox as a cell editor in a JTable I'm having issues with the following code where I use a JComboBox to change a String value in a table cell. The JComboBox works fine but if I click in the box and then click away without selecting anything the JComboBox's dropdown remains visible even if I delete the row. Clicking on another Swing component like a JButton often causes it to go away but not always.  TableColumn col = myTable.getColumnModel().getColumn(0); JComboBox eq = new JComboBox(); eq.addItem(""==""); eq.addItem(""!=""); DefaultCellEditor editor = new DefaultCellEditor(eq); col.setCellEditor(editor); Edit: I had neglected to mention that earlier I set:  myTable.putClientProperty(""terminateEditOnFocusLost"" Boolean.TRUE); If I comment this line out or set it false then clicking on other Swing components does NOT cause the box to vanish. With it in clicking on anything that takes focus causes the box to go away making the problem less annoying but possibly masking the cause of the behavior. Am I doing something wrong here or forgetting a step? Alternately is there a way to force it to close itself? Thanks! To understand this you'll need to understand what goes on with an editable table. A short bit of theory: Every cell has a potential renderer and editor. The renderer just tells the cell how to draw and does not interact with events. The editor however is a component that can interact with events. When an event happens that triggers an edit the editor component is added on top of the table. When the edit finishes the component is removed. In order to get the component to go away you'll have to make sure the cell is not still in the ""editing"" state. This is why terminateEditOnFocusLast causes the JComboBox to vanish. If you want other things to get the box to go you'll need to probably call removeEditor() in response to certain events possibly focus or cell selection. To really get a handle on what happens I'd recommend having a quick look at the source code to removeEditor() editCellAt() etc. and maybe step through once in a debugger. It's possible you've overridden some of the event handling code or are calling it when you shouldn't. The editor/event handling code in JTable is fairly fragile and it's quite easy by accident to get calls to happen in the wrong order with funny side effects. Also Java very subtly changed the event and focus behaviour of JTable between versions once I think it was between 1.4 and 1.5 when the focus handling for swing changed. So the first thing I'd recommend trying is your code with a different Java version. The bug may have been caused by Sun (some of our complicated editor code had to be changed) and if it differs between releases it is easier to report to Sun. Nice thorough answer! Thanks for the lesson about the differences between renderer and editor. Very helpful. Thanks for the background and the thorough answer. I've taken a look at those methods but haven't turned up anything yet. I think you've basically got the right answer though -- I just need to figure out where it's happening. Thanks!"
580,A,"Swing custon JComponent size I want to create a custom JComponent (specifically a custom JToggleButton) that has a custom appearance. What i want to do is simply override the default painting of the component and draw something of my own (an image for instance) This is NOT a question on how to do that (I am fairly proficient with Java2D). What i want to ask is what steps must i take to ensure that my component has the size i desire it to have? The tests i have done so far have been problematic. I draw an image of lets say 200*100 pixels and the layout managers display only a part of my component. I tried setSize setPrefferedSize setMinimumSize and none of them worked. the size is determined by the LayoutManager. if you will use a null LayoutManager you will be able to force a specific size (and location). otherwise you can override getPreferedSize() which will be respected by some layout managers. I did override getPrefferedSize i also tried simply setting the prefered size and none of these methods worked. What is the ""correct"" method of setting the size of your component in Swing? how does the swing team do it? as I said getPreferredSize() is used by the LayoutManager. which may decide to ignore it. to fully control the size of your component you need to use a particular layout manager for the container that contains the button (use null layout + setSize(wh) to force specific size).  There is no way in the Swing model to outright guarantee that you will be given a set amount of space - layout managers can and do ignore minimum and maximum sizes though normally they only ignore one or the other. If you have a fixed size component you should override getMinimumSize getPreferredSize and getMaximumSize to all return a dimension of that fixed size that you need. If you can scale to some extent adjust the minimum and maximum as required. Overriding the methods avoids some third party code calling the set*Size methods and overwriting your choices (layout managers will still call setSize to tell the component what size it was actually allocated which is normal). It also makes sure the sizes are set before the layout manager starts laying out the component. If the size of your component can change after layout has occurred you need to make sure you invalidate the component layout properly but avoid doing this if you can."
581,A,Method that returns the line number for a given JTextPane position? I'm looking for a method that computes the line number of a given text position in a JTextPane with wrapping enabled. Example: This a very very very very very very very very very very very very very very very very very very very very very very long line. This is another very very very very very very very very very very very very very very very very very very very very very very long line.| The cursor is on line number four not two. Can someone provide me with the implementation of the method: int getLineNumber(JTextPane pane int pos) { return ??? } http://java-sl.com/tip_row_column.html An alternative which works with text fragments formatted with different styles  Try this  /** * Return an int containing the wrapped line index at the given position * @param component JTextPane * @param int pos * @return int */ public int getLineNumber(JTextPane component int pos) { int posLine; int y = 0; try { Rectangle caretCoords = component.modelToView(pos); y = (int) caretCoords.getY(); } catch (BadLocationException ex) { } int lineHeight = component.getFontMetrics(component.getFont()).getHeight(); posLine = (y / lineHeight) + 1; return posLine; } the jtextpane class is capable of supporting variable font sizes this method WILL fail on that scenario.
582,A,Plot Graphs in Java The java Swing GUI im developing needs to plot a 2D graph based on the x and y coordinates generated in the program. Is there a Swing component for that? Or is there any other open source package for the purpose? Thanks in Advance.. You should look at JFreeChart.  check out the feature comparison for Java report and charting libraries; http://java-source.net/open-source/charting-and-reporting  Here is a related answer of me: I have summary of existing tools and show a alternative option to create interactive charts with Gnuplot in a JPanel Java 3D plot library? For your case (2d charts) JFreeChart is OK. But sometimes JFreeChart is overkill for simple charts.  You should check out JFreeChart which has Swing support. Here are some samples: http://www.jfree.org/jfreechart/samples.html is there a tutorial doc or something of kind for using JFreeChart?
583,A,"Is there a FREE Java GUI designer? Is there a FREE (or relatively cheaper) Java GUI designer/builder? Just for the record Open Source != Free :) thanks edited the title Try netbeans I'm sure you're gonna like the latest release (version 6.7)  Unfortunately it looks like the Eclipse Visual Editor has not been maintained or developed a lot the past three years. On the Visual Editor homepage you'll see that the last release is from June 30 2006 - more than three years ago. The best free GUI builder for Java at the moment is probably Matisse which is included in NetBeans as others have already mentioned. If you're an Eclipse user then there's also Matisse4MyEclipse but it is not free - it's an add-on to the popular MyEclipse. Another non-free option for Eclipse is WindowBuilder Pro which is not only for Swing but also for SWT and even GWT GUIs. WindowBuilder Pro is now available for free. Yes Google bought it and now had made it available for free.  It isn't free (or particularly cheap) but the one in IntelliJ is pretty nice.  Netbeans has one as does Eclipse. If I remember right if you don't want to fork out any money Eclipse has no capabilities for using GroupLayout; NetBeans has support for GroupLayout out of the box. NetBeans is a lot easier to use than Eclipse for GUI designing in my opinion. Less hassle with configuration.  try NetBeans or Eclipse Visual Editor Plugin  You should go for ecllipse Komodo Edit and Netbeans if you want it for free. But i recoment Jbuider which expensive but really good GUI environment.  I highly recommend NetBeans's Matisse GUI editor. I recommend this one as well... its very easy to use and powerful. I personally have used this one pretty from its early days I have yet to find a GUI design it cannot at least ""rough out""  Try WindowBuilder which once was a non-free Eclipse plugin and is now available for free. WindowBuilder has changed hands several times in the last 12 months (from Instantiations to Google followed by Google giving it to the Eclipse Foundation). It is available for free from the Eclipse WindowBuilder page."
584,A,"Why won't this Swing tabbed pane display? Could someone explain what I am doing wrong with my classes that my JTabbedPane doesn't display when the JFrame.setvisible is set to true? Yes the main method of the program (which I won't put here) uses the event dispatching thread to initiate ArionGUI. Here is my code for the JFrame: import javax.swing.*; public class ArionGUI extends JFrame { public ArionGUI() { // Set up GUI frame for Arion JFrame arionFrame = new JFrame(""Arion v 0.01""); // Add Arion Tabbed Pane arionFrame.getContentPane().add(new ArionTabbedPane()); // Terminate the application when closed arionFrame.setDefaultCloseOperation(EXIT_ON_CLOSE); // Set the size of the frame arionFrame.setSize(500 500); // Center window arionFrame.setLocationRelativeTo(null); // Prevent user from resizing window arionFrame.setResizable(false); // Make Arion frame visible on screen arionFrame.setVisible(true); } } And here is my code for the JTabbedPane: import javax.swing.JTabbedPane; import javax.swing.JLabel; import javax.swing.JComponent; public class ArionTabbedPane extends JComponent { JTabbedPane arionTabbedPane; public ArionTabbedPane() { arionTabbedPane = new JTabbedPane(JTabbedPane.TOP); arionTabbedPane.addTab(""Characters"" new JLabel(""This is the characterz tab"")); arionTabbedPane.addTab(""Miscellaneous"" new JLabel(""This is the miscellaneous tab"")); add(arionTabbedPane); } } What he said: Thanks Oscar that's very helpful!  Because ArionTabbedPane isn't actually a tabbed pane. It's a wrapper for one. So you're just adding a component to your JFrame not a TabbedPane. If you want to be able to add ArionTabbed pane to your JFrame it needs to extend JTabbedPane. If you want to add the Pane it's wrapping then you need a function that returns a reference to it's internal tabbed pane and you need to add that to your JFrame. Something like this: ArionTabbedPane tabbedPane = new ArionTabbedPane(); arionFrame.getContentPane().add(tabbedPane.getPane()); Where ArionTabbedPane.getPane() is something like this: Public JTabbedPane getPane() { return arionTabbedPane; } Edit: Hmm.. the other thing you could do that mioght work if you don't want to do either of those is have ArionTabbedPane extend JPanel instead of JComponent. Java knows JPanel is a container and so when it's added to your JFrame it should check inside the JPanel for things to show. The only thing you'd have to change for that would be having ArionTabbedPane extend JPanel instead of JComponent. Edit again if you extend JTabbedPane then you'll need to remove the internal JTabbedPane. The new ArionTabbedPane should look something like this: public class ArionTabbedPane extends JTabbedPane { public ArionTabbedPane() { super(JTabbedPane.TOP); // Calls JTabbedPane's constructor. this.addTab(""Characters"" new JLabel(""This is the characterz tab"")); this.addTab(""Miscellaneous"" new JLabel(""This is the miscellaneous tab"")); } } Much simpler really. +1 I had to recreate the code to see the problem... Well done Thank you. Your initial answer ArionTabbedPane should extend JTabbedPane works! That's all I need. Careful though you need to remove your internal JTabbedPane if you're going to extend JTabbedPane. You won't be using it anymore. You're new class should look something like what I will now go edit into the answer."
585,A,"Can I use ObjectChangeListener to listen for changes on any object? I've got an Integer called x; if it changes then i would like to update my table in a GUI. To listen to ""x"" I have tried ChangeEvent y = new javax.swing.event.ChangeEvent(x); and I implement javax.naming.event.ObjectChangeListener: class HDIManagementView extends FrameView implements ObjectChangeListener ActionListener TableModelListener { and I override the objectChanged method to update my table. Nothing happened public void objectChanged(javax.naming.event.NamingEvent name){ //gets which status Object y=name.getChangeInfo(); String m=y.toString(); tableModel.setValueAt(y 0 0); }` if i change ""x"" then nothing changes in my table. What have I done wrong? Second question is x can only be called by value. i can only reach x from my database or my properties file. When database changes x can't understand if it changes or not Even if listener listens. All i do is listen y which equals x. When x changes y doesn't understand because x is not calling by referens. What can i do? The answer to the question is ""no - you can't"" and ""JNDI and javax.naming is nothing to do with your problem"" I think you may be confusing the Swing/JavaBeans listener framework with JNDI the Java naming and Directory interface. An ObjectChangeListener is only useful for listening to objects which are bound and re-bound in a JNDI context. You cannot use an ObjectChangeListener to listen for changes on an arbitrary object InitialContext ctx = new InitialContext(); ctx.rebind(""path/to/x"" new Integer(4)); In order to do this you need a JNDI implementation. In order to listen to the change you listen on an EventContext: InitialContext ctx = new InitialContext(); EventContext ec = (EventContext) ctx.lookup(""""); ec.addNamingListener(""path/to/x"" myListener) If you try this it will fail because you have not defined a JNDI provider. Typically these would be provided by an application-server vendor e.g. IBM WebSphere or JBoss. The application server provides JNDI for applications to lookup resources like data sources or configuration information. In order for you to do what you actually want you'll want to implement some class which wraps your integer and uses the property-change mechanism in Java: public class MyInteger { private int x; private final PropertyChangeSupport pcs = new PropertyChangeSupport(this); public void setX(int i) { int old = x; x = i; pcs.firePropertyChange(""x"" old x); } public void addListener(PropertyChangeListener l) { pcs.addListener(""x"" l); } } Then this can be used by your code: MyInteger i = new MyInteger(9); i.addListener(new PropertyChangeListener() { public void propertyChanged(PropertyChangedEvent e) { //implement to process the change - e.g. update your table Integer i = (Integer) e.getNewValue(); } }); See my updated answer - you just want a `PropertyChangeListener` Do i have to use JNDI to understand when integer changes? No - forget about JNDI - it is **nothing whatsoever** to do with your problem My computer says something about your code. It says ""can not find symbol pcs"" :) you can fix it. and thanks. I'll try I've made a small syntax error. It should be PropertyChangeSupport pcs It's now fixed - hope it works for you this time it worked. Thanks a lot I think i am confused too :) Actually i have no idea what you are talking about. ALL i want is just to see if an Integer changed? So i wrote some article and http://www.j2ee.me/j2se/1.3/docs/api/javax/swing/event/ChangeEvent.html . Maybe i am in the wrong way"
586,A,How do i change the UI of a JComboBox I like to change the UI of a JComboBox from the default metal look to some custom UI see attached image. I have tried changing all the UIDefaults for the JComboBox but to no success. How does one achieve this? jdk1.4.2 you need to change arrow image  and in style change background for this JComboBox !  use WindowsLookAndFeel; this works if and only if you are running your application in winows; in your main you can do this before creating any UI:  try{ UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); }catch(Exception ignore){ } Unfortunately the app will be run in the wild and may be launched on any OS  You have to write your own ComboBoxUI class. I suggest to look at either Synth or Nimbus Look and Feel to make it easier. thanks will look at it
587,A,"How to test Netbeans 6.7 Plugin? I created a simple netbeans plugin (see this tutorial) and now i wanna test e.g. the Actionlistener. But how can this be done ? to be more specific what test frameworks suit netbeans plugin development ? how to create a test setup which emulates enough of netbeans e.g. to test the simple actionlistener ? Update a practical example : I registered my Action in the Tools Menue how can i test the ""click"" on the menue entry ? at first i need some directions for 'simple' Tests ill update the description to reflect that What kind of tests do you want to perform? a general 'does it always work and doesn't crush' or something else? Look into http://jemmy.netbeans.org/ and http://blogs.oracle.com/geertjan/entry/gui_testing_on_the_netbeans Or sth. from here http://www.junit.org/taxonomy/term/6  Jemmy had moved to https://jemmy.dev.java.net/ also it is not depend on NetBeans modules so can be used for AWT/Swing/SWT/JavaFX testing. Another library is Window Licker http://code.google.com/p/windowlicker/ from writers of http://www.growing-object-oriented-software.com/ which now supports Swing/Ajax."
588,A,"How do I show the pound sterling (£) sign in Java Swing? Currently I add a pound sterling (£) sign to the Java source and compile the resulting Swing component shows as the square (unsupported character) symbol. I suspect it's an encoding problem the Java source file is encoded as cp1252 (Eclipse seems to default to this). What's the correct way of resolving this? maybe messing around with java.util.Currency's getSymbol() might yield some results  Use the \u00A3 notation. Further examples here for the unicodes Unicode code points for other symbols. Much thanks did the trick!  I believe you can change the source code's encoding from Eclipse (or from any decent editor). Set it to UTF-8. Then everything should behave smoothly because Java Strings are Unicode. I would strongly encourage using proper encoding in the source instead of this \uXXX notation. The reason being how on earth do you infer form the code what for instance \u00A3 means? It's much clearer to just put the correct character there. Thanks that works too I will ensure work is under UTF-8 in future.  Locale locale = Locale.UK; Currency curr = Currency.getInstance(locale); System.out.println(""Symbol: "" + curr.getSymbol()); For some currencies it works."
589,A,"Is there a Swing hack to query or set Z-order of a window? We are trying to save the state of the application on exit and restore it on startup. Part of the state is the relative Z-order of all JFrames. Unfortunately Swing doesn't seem to provide any method to learn or set Z-order of a Window (even relative to other windows in the same VM). We deal with setting the Z-order by calling toFront() on all windows in successive order. But querying Z-order remains unsolved. (Adding focus listeners doesn't work always for example when one uses Windows' ""Cascade"" action on a group of windows.) Any ideas? duplicate of http://stackoverflow.com/questions/624885/how-to-get-the-z-order-of-jinternalframes-in-a-jdesktoppane ? no it's not i'm not talking about JInternalFrames Not with any granularity. As you say you can call toFront() and toBack() and you can ask a window to ""stay on top"" but that's pretty much it. Another option is to have a frame with internal frames and use setComponentZOrder() (this only works for internal components though-- you have to call it on the container). I believe one of the reasons for it not having been a priority in Swing is that support for Z-ordering is quite platform-dependent. (But hey what isn't...)  You can use setComponentZOrder(Component c int layer) and getComponentZOrder(Component c) from the Container class. There is a JDC Tech Tips on this: http://72.5.124.55/developer/JDCTechTips/2005/tt0118.html just to flag for future viewers of this thread: this method applies to the contents of the JFrame not the JFrame itself in the context of the other windows on the system."
590,A,"Suppressing Swing Visibility I've been given a bunch of messy code and a short time limit (no surprises there) to write some tests for it. I have written tests! They are good tests. Unfortunately instantiating some of the project's components causes Swing GUI elements to be constructed and set visible too. I don't want this to happen for obvious reasons so I was wondering if there was a way to suppress the displaying of any Swing-based stuff before I instantiate these objects. Essentially some kind of master visibility setting that says ""I don't care if anyone calls setVisible on a Swing component don't show anything."" I don't think there is and I don't think there's a solution other than modifying the project code. Just thought I'd ask. find ./ -type f -exec sed -i ’s/setVisible(true)/setVisible(false)/’ {} \; I know I know. :P It's in SVN and everything so it wouldn't even be a problem. The thing is these tests will go on and be used by others so I can't affect the internal code. Even if it is godawful. Why don't you consider GUI testing then? You could use FEST which is a very good library for that (http://fest.easytesting.org/). Well I won't answer what I want (which is change the code to separate the GUI from the work so it is testable)... but you might consider headless mode. Off the top of my head you will have to wrap the parts of the GUI that fail as a result by catching the HeadlessException. There is a good chance that such a thing breaks the code in the testing environment however since things will have to probably be set to null. I short I think you can make that work but the result will be messier code... but if you don't have time to fix it I guess that might work. Excitingly this very nearly worked. I'll experiment with this and get back to you.  Don't know if this will help but if the frame itself isn't visible then setting a Swing component (JTextField JButton....) visible has no effect.  I'm not quite into your exact problem but you can extend your component classes (which in turn extend JComponent) and override the setVisible() method with an empty implementation. The new classes of course will reside in the test package. Otherwise it's strongly recommended to refactor the components instead of doing 'hacks' just in order to test them. I'll try this too I think - the problem is that I don't think I'll be able to stop it being setVisible in the first place.  Maybe setting the mainFrame (the container to all subcomponents) visibility to false should not break the code while leaving you with less UI.  mainFrame = new JFrame(); .... // Commeted out for tests // mainFrame.setVisible(true); mainFrame.setVisible(false);"
591,A,"Scatter Graph with multiple ""scatter lines"" Ok I know about JFreeChart and others but I'm coding my own simple scatter graph. I've already got a box chart down (without y-axis labels but that shouldn't be a huge problem when I explain it in my report). I've got a basic scatter graph class however I've tried to change it so that I can add in different scatter values. It works but it only accepts the first scatter array and doesn't draw the rest. Although it does draw the first scatter array in the last scatter array's color... so it's semi-working. Here's my full ScatterPanel class: import java.awt.BasicStroke; import java.awt.Color; import java.awt.Dimension; import java.awt.Font; import java.awt.FontMetrics; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.geom.Line2D; import javax.swing.JPanel; public class ScatterPanel extends JPanel { private TwoArray[] values; private String title; private String[] color_list; // Constructor for ScatterPanel public ScatterPanel(TwoArray[] v String t String[] c) { values = v; title = t; color_list = c; } /* This will paint the scatter chart * using the values from the above variables: * ""values"" ""title"" and ""color_list"" */ @Override public void paintComponent(Graphics g) { super.paintComponent(g); Graphics2D g2 = (Graphics2D)g; // Initialize the titleFont Font titleFont = new Font(""Verdana"" Font.BOLD 16); FontMetrics titleFontMetrics = g.getFontMetrics(titleFont); // Get the width of the JPanel Dimension d = getSize(); int clientWidth = d.width; //int clientHeight = d.height; // Setup the title position and size int titleWidth = titleFontMetrics.stringWidth(title); int title_y = titleFontMetrics.getAscent(); int title_x = (clientWidth - titleWidth) / 2; // Set the font for the title g.setFont(titleFont); // Draw the title g.drawString(title title_x title_y); // Initialise min and max display scale double min = -0.5; double max = 5; // Iterate through each different algorithm we are comparing for(int point = 0; point < values.length; point++) { // Iterate through each algorithm's size array and timing array for (int i = 0; i < values[point].array_time.length; i++) { // Find the overall max and min for x and y double x = (double) values[point].array_size[i]; double y = (double) values[point].array_time[i]; // Adjust max and min to include x and y. if (x < min) min = x - 0.5; if (x > max) max = x + 0.5; if (y < min) min = y - 0.5; if (y > max) max = y + 0.5; } } g2.translate(getWidth()/2getHeight()/2); g2.scale(getWidth()/(max-min) -getHeight()/(max-min)); g2.translate(-(max+min)/2 -(max+min)/2); // Horizontal size of a pixel in new coords. double pixelWidth = (max-min)/getWidth(); // Vertical size of a pixel in new coord. double pixelHeight = (max-min)/getHeight(); g2.setStroke(new BasicStroke(0)); // Draw the x and y axis g2.setColor(Color.BLUE); g2.draw( new Line2D.Double(min0max0)); g2.draw( new Line2D.Double(0min0max)); for(int point = 0; point < values.length; point++) { if(point % 3 == 0) g2.setColor(Color.decode(color_list[0])); else if(point % 3 == 1) g2.setColor(Color.decode(color_list[4])); else if(point % 3 == 2) g2.setColor(Color.decode(color_list[8])); for (int i = 0; i < values[point].array_time.length; i++) { long x = values[point].array_size[i]; long y = values[point].array_time[i]; // Plot the x-y co-ords g2.draw(new Line2D.Double(x-3*pixelWidthyx+3*pixelWidthy)); g2.draw(new Line2D.Double(xy-3*pixelHeightxy+3*pixelHeight)); } } } } TwoArray is just used to store two long arrays. Inside my main interface class I draw a scatter graph like this: for(int i = 0; i < scat_size.length; i++) scat_size[i] = i; for(int i = 0; i < scat_times.length; i++) scat_times[i] = i; // This should be 11 22 33 etc. in Red scatter_values[0] = new TwoArray(scat_size scat_times); // Trying to test a large co-ord so this should be green scat_size[2] = 70; scat_times[2] = 20; scatter_values[1] = new TwoArray(scat_size scat_times); // Trying to test another different co-ord so this should be blue scat_size[2] = 3; scat_times[2] = 7; scatter_values[2] = new TwoArray(scat_size scat_times); myScatter = new ScatterPanel(scatter_values scat_title color_list); A JPanel is set to myScatter. It works and draws the scatter just fine but it doesn't draw it with different colored points and it draws the ""red scatter"" in the color blue. Cheers guys. P.S. I know I don't have any code that draws a curved line through the scatter yet I'll work on that after I finish this part =) scatter_values[] will contain a pointer to the arrays scat_size and scat_times. You're changing values in these arrays so the change will apply to all items in the scatter_values array. Thus it will draw the 3rd graph three times over the top of each other. You need to add a dimension to the arrays: for(int j = 0; j < 3; j++) { for(int i = 0; i < scat_size.length; i++) scat_size[j][i] = i; for(int i = 0; i < scat_times.length; i++) scat_times[j][i] = i; } // This should be 11 22 33 etc. in Red scatter_values[0] = new TwoArray(scat_size[0] scat_times[0]); // Trying to test a large co-ord so this should be green scat_size[1][2] = 70; scat_times[1][2] = 20; scatter_values[1] = new TwoArray(scat_size[1] scat_times[1]); // Trying to test another different co-ord so this should be blue scat_size[2][2] = 3; scat_times[2][2] = 7; scatter_values[2] = new TwoArray(scat_size[2] scat_times[2]); myScatter = new ScatterPanel(scatter_values scat_title color_list); Ah I just changed my interface using a different array like: scat_size2 and scat_size3 and it shows all 3 arrays! Thanks a lot!"
592,A,Setting the mouse cursor for a particular JTable cell I have a JTable with a set of uneditable cells and I want all the cells in a particular column to have a different mouse cursor displayed whilst the mouse is hovering over them. I am already using a custom renderer and setting the cursor on the renderer component doesn't seem to work (as it does for tooltips). It does seem to work for editors. Is this not possible in JTable when your cell is not being edited or am I missing something? Here is one way of changing the cursor at a particular column in JTable: if(tblExamHistoryAll.columnAtPoint(evt.getPoint())==5) { setCursor(Cursor.HAND_CURSOR); } else { setCursor(0); }  Add a MouseMotionListener to the JTable and then on mouseMoved() determine which column it is using JTable's columnAtPoint() and if it's the particular column you are after setCursor() on the JTable. yeah this is more simpler. :D This works well **except** when the JTable is contained in a panel of a JTabbedPane. In that case a Cursor set on the JTable has no effect. This appears to be a bug in Swing (Java SE 1.6.0_27). I'll accept the answer because this is what we were doing already and it works. I was hoping to find something a little nicer though.
593,A,"Why getToolTipText is never called? I have got a JComponent. The paintComponent method is overridden. I mentioned that tooltips were not occuring reliable. Sometimes they were displayed and sometime they didn't. Now I don't see tooltips anymore on this component. I overwrote getToolTipText(MouseEvent e) to specify the contents of the tooltips. But the methods getToolTipText() and getToolTipText(MouseEvent e) are never called! What could be wrong here? What can I do to fix it? First you need to register with the TooltipManager via TooltipManager.registerComponent() Even if that doesent work then Check the value of TooltipManager.getInitialDelay() Check the value of TooltipManager.isEnabled()  Have you set the tooltip with the method ""setToolTipText(String)""? When the tooltip is not set (or resettet with the value ""null"") then the tooltip will not be displayed. (And i suggest the getToolTipText() method will not be called) This link may help you with this problem: How To use Tooltips (sorry about my english i think it's not the best ;-) )  I believe you will need to call ToolTipManager.registerComponent. It's an optimisation apparently.  You'll need to register your component with the tooltip manager. The default implementation of setToolTipText() will do this for you but if you'd like to override getToolTipText() instead you'll need to add this line somewhere IE in your component's constructor: ToolTipManager.sharedInstance().registerComponent(this);"
594,A,Image comes up as just a grey square when added to JPanel I'm working on a project for university which is essentially a re-working of the Space Invaders game with the rules changed a bit. So far I've got a main JFrame containing a subclass of JPanel (for the background image) which contains another subclass of JPanel which I'm using for the sprites. However when I run it the JFrame and the background JPanel work fine but then when I draw the sprite it just generates a grey square for which I can't change the size or position. Here's the code I've got for my Sprite class: import java.awt.*; import java.io.File; import javax.swing.*; public class Sprite extends JPanel { Image spriteImage; int speedX; int speedY; Point pos; final boolean MV_LEFT = false; final boolean MV_RIGHT = true; public Sprite(File _imageFile) { try { spriteImage = javax.imageio.ImageIO.read(_imageFile); } catch (Exception e) { /* handled in paintComponent() */ } speedX = 1; speedY = 1; pos = new Point(100100); } @Override protected void paintComponent(Graphics g) { super.paintComponent(g); if (spriteImage != null) g.drawImage(this.spriteImage this.pos.x this.pos.y this.getWidth() this.getHeight() this); } public void move(boolean direction) { if (direction == true) { this.pos = new Point((pos.x + speedX) pos.y); repaint(); } else { this.pos = new Point((pos.x - speedX) pos.y); repaint(); } } } I'm sure there are a few things wrong in there but for the paintComponent() method I just parroted all of the image handling tutorials I found around the internet and it still doesn't seem to work. Is there something huge I'm forgetting? One problem I see with the paintComponent() method is the location where you're drawing the image. My understanding is that each sprite in your game is a separate JPanel. The Graphics object (g) being passed in the paintComponent method is therefore different for each Sprite. You can imagine a Graphics object as a painting canvas. If you only had 1 Graphics object for the entire game and this graphics object represented the entire game window then your logic would be correct and everything should work. However each Sprite here has its own graphics object presumably with height and width relevant to the sprite. In this case your paintComponent method would probably just look like: public void paintComponent(Graphics g) { if (spriteImage != null) g.drawImage(this.spriteImage 0 0 getWidth() getHeight(); // always at (00) } Why? Because with your design you're moving the Sprite AND it's Graphics object around the game window! The coordinates you pass to drawImage() are relative to the Graphics object; you always want to start painting in the upper-left hand corner (00) of the Sprite. You're getting just a gray square because you're trying to draw the image way out of bounds of the Graphics object. In the long run I don't think this approach is going to work because it's not that easy to move JPanels around inside of their parent containers (unless you're using absolute positioning). It's not really scalable either because JPanels are pretty heavyweight and take a lot of resources to create and display. You are probably better of having a single JPanel that represents the entire game area. Each Sprite wouldn't be a subclass of JPanel so you don't have a paintComponent method. You could do something like this: public class GameArea extends JPanel { private final Collection<Sprite> sprites; // sprites to draw public void paintComponent(Graphics g) { for(Sprite sprite : sprites) { sprite.drawOnSurface(g); } } } public class Sprite // no need to extend anything { /* Your other code looks OK */ public void drawOnSurface(Graphics surface) { surface.drawImage(image x y getWidth() getHeight()); } }
595,A,while loop ignore the event listener so when i run this code to try to change the background the GUI crashes and gets stuck in a infinite while loop ignoring the event listeners. here is the code: private Panel getPanel1() { if (panel1 == null) { panel1 = new Panel(); panel1.setLayout(new GridBagLayout()); while(frame.isVisible()){ panel1.addMouseListener(new java.awt.event.MouseAdapter() { public void mouseClicked(java.awt.event.MouseEvent e) { frame.setVisible(false); } }); int r = (int) (Math.random()*255); int g = (int) (Math.random()*255); int b = (int) (Math.random()*255); Color c = new Color(r g b); panel1.setBackground(c); try { Thread.sleep(4000); } catch (InterruptedException e1) { e1.printStackTrace(); } panel1.addMouseListener(new java.awt.event.MouseAdapter() { public void mouseClicked(java.awt.event.MouseEvent e) { /*panel1.setVisible(false); frame.setVisible(false);*/ System.exit(0); } }); } } return panel1; } instead of exiting the loop of terminating the program or event changing the background it just displays the panel and does nothing else and i have to force it to quit. what should i do? You're effectively blocking the UI thread by calling sleep in a loop. In that loop you're also adding two listeners on every iteration too which is quite bizarre. Don't block the UI thread. Let the GUI framework take care of delivering events etc. Basically you need to take an event-based approach to UI rather than the approach you currently are taking which will never let any events get despatched (as you're never returning control to the caller). Create the panel add the appropriate event listener and then just return it to the caller. If you want to change the background colour every 4 seconds you should do that via a timer so that it's not blocking the UI thread waiting for the 4 seconds to elapse.
596,A,"What are your best Swing design patterns and tips? I'm writing a GUI for an application using Swing and in the interests of code maintenance and readability I want to follow a consistent pattern throughout the whole system. Most of the articles and books (or at least book sections) that I've read appear to provide plenty of examples on how to create and arrange various components but ignore the bigger picture of writing a full GUI. What are your best tips for application GUI design and what patterns do you follow when designing or refactoring a GUI application? here are my four babys : http://blue-walrus.com/swing-design-patterns/ Karsten Lentzsch's JGoodies has been very helpful to me for architectural design especially with regard to the Presentation Model pattern bindings and validation. Check out his articles and libraries. Use an MVC-like pattern. I say ""like"" because the goal is really to separate the view from the model not to conform to a specific flavor of MVC. I prefer using Presentation Model myself. MiGLayout - I use it for everything unless a basic layout manager will do. Modularize and reuse as much as you can. WindowBuilder Pro for Eclipse - The best visual designer because it works with existing/edited code and doesn't lock you in. And it's free now! I have no issue with using designers because the view should be separate from the rest of the code. Netbeans Platform (RCP) - The only real Swing framework. I hope to learn and use this when I have time because part of a framework's job is to address concerns like yours. JavaBuilders - Cool project that allows declarative UIs but I'm not sure it's mature enough to risk it especially with an existing project. However it's interesting to read their PDF book if only to understand the problems they're trying to solve.  I think that the main problem you are going to be faced with is testability of your gui application. So regarding maintainability and ease of unit testing I am leaning towards the ""Presenter first"" idiom instead of Model View Controller (MVC) and other derivatives that instruct you to have the view knowing of the actual application logic (Model). The best resource is the web site of the group that introduced it as a thought. Since using an approach like that is going to take a lot of boilerplate code to initialize the various elements of your application I would also suggest in using a dependency injection framework. I have settled with Guice.  Avoid inherit when composition would be easier. For instance I have seen a lot like this: public class CustomerSupportApp extends JFrame { JList<Customer> customers; OtherBusinessComponent importantComponent; etc. etc } This is mixing business logic with presentation. It only makes changes from difficult to impossible. Better is: public class CustomerSupportApp { JList<Customer> customers; OtherBusinessComponent importantComponent; // The app HAS-A frame but not IS-A frame JFrame frame; etc. etc } In your case it is obvious because application != frame but there are other examples e.g. `FooFrame extends BarFrame` where inheritance also is not appropriate e.g. because they have too less in common.  Try not to code the text into your app. Swing guis can be pretty easily written to be data driven consider defining your GUI in an xml file (including the component names and positions/layout attributes). I worked on systems that had a LOT of property sheets (which are just piles of controls page after page of them)--without making it data driven it's virtually impossible to maintain or internationalize. If you decide to use a GUI builder never modify the code it outputs if you can possibly avoid it--it's better to bind to the GUI from an external class. Think about what will happen if you have to do it without the builder--will it be difficult to port? Impossible? Understand the gotchas in swing--only modifying GUI components from the AWT thread returning the AWT thread as quickly as possible (spawn a new thread if you have to do anything that takes over 100ms) Try your best to keep your code DRY--It can be a real programming challenge with Swing GUIs--Again data driven code is the only way I've found to not constantly repeat code like new JButton(""...""); If your data is property-sheet based seriously consider creating a binding mechanism to tie your controls to your data. A good goal for DRY code would be 0 (ZERO) control-specific lines of code per control to get a piece of data from your database to your GUI have the user edit it and get it back to your DB. This means that you should be able to add a new control by doing nothing but modifying your data.  This is a more abstract high-level answer about what your GUI represents not the mechanics of it.. Depending on your task it may be kind of difficult to make it so your user can conceptually grasp what the GUI is doing. I've done some pretty tricky work involving GUIs and my most successful approaches have been those that took a complex set of controls and put them into a layout that the user expected. For instance I wrote a system to manage 2 devices one at either end of a T1 line (kinda like modems). The controls were really hard to comprehend--fields like ""create loopback test far end signal test near end bit patterns sending various bit patterns ..."" (this is a huge oversimplification it was a lot worse than this) I had to really understand the problem so I went to a Tech Support rep who helped customers with this problem all the time. He showed me a diagram in the manual and stepped me through what the different controls did on that diagram. I took the diagram re-created it using graphics (just a simple line-drawing for the most part but it showed both ends and the connections between them) then used regions of the graphics to represent controls AND feedback (color changes). You could visually see that a signal was going out. When you turned on a loopback at the far end you could see that the line looped the signal back to it's outgoing line then you could see the color change as your near-end started getting the pattern that it was sending out it's other line. The ""Controls"" were significantly more convoluted than this but the GUI reduced it to EXACTLY what the customer needed to understand the problem. After this we had customers coming back to us telling us that they had never been able to figure this stuff out before but now they totally get it! This presentation was infinitely more important than the wiring of the GUI implementation.  Avoid spawning too many threads when user clicks action button multiple times. Disable button on first click spawn your action in background thread and when done enable button again. This may not be problem for short running tasks.  Definitely put the GUI in one class and the logic in another class or multiple classes -- to the greatest extent possible. If you use the MVC (Model-View-Controller) pattern this will happen automatically. If you don't do this the GUI will quickly become unmaintainably complicated.  mvc is your friend.  I think a good working knowledge of concurrency is often understated. You really need to be familiar with Swing's threading policy and general synchronization techniques to build a responsive GUI and an efficient backend.  Have a look at the application framework API ( https://appframework.dev.java.net/ and http://java.sun.com/developer/technicalArticles/javase/swingappfr/. It's a great API to build your swing application. e.g. : all the styles (color fonticons...) are defined in a simple config file.  Avoid using GUI layout designers (builders). Later on it will make your code much cleaner and easier to maintain. WindowBuilder Pro does a good job with generated code. Check it out: https://developers.google.com/java-dev-tools/wbpro/?hl=fr It's true that if you start your GUI with a builder you are pretty much committed to using that builder throughout the whole life of the GUI. This is sometimes acceptable sometimes not. Yes it's true. Different builders store metadata in different formats which are not mutually compatibel. The only exception is Instantiations Swing Designer which works with the code directly. All of them create code which is not meant to be edited by hand (unreadable) which will bite you later. I disagree. If you know Swing well any code generated by a GUI builder will be readable enough. Problem is that by using a GUI builder you will not get to know Swing well. Good separation is of course necessary.  Never derive from JDialog JFrame or JInternalFrame for defining your forms dialogs... Rather derive from JPanel. This will bring you the follwing advantages: possibility to later change from a JFrame to a JDialog for instance (because user changed his mind) you can reuse one panel instance from one JDialog to another (JDialog are generally not reusable because they are constructed with a reference to their ""parent"" a frame or another dialog) you can later on change replace JDialog with a more functional subclass from a 3rd-party framework. What should your 'view' interface do? Along with this I would define a 'view' interface.  Use layout managers. You might think it's simpler just to position everything with hard coded positions now (especially if you use a graphical layout tool) but when it comes time to update the gui or internationalize it your successors will hate you. (Trust me on this I was the guy saying to use the layout managers from the start and the successor to the guy who ignored me.)  Get into the habit of having your callbacks spawn off threads to do the actual work and then you won't be having frozen GUIs when one of your callbacks turns into a time consuming monster. Better yet use SwingWorker. Yes SwingWorker is one of many ways to spawn off a thread. Dont forget SwingUtilities invoker later if that thread needs to update the GUI afterwards :) Take a look at FoxTrot: http://foxtrot.sourceforge.net/  You're not supposed to extend JFrame JDialog JPanel JButton Janything classes (although certain extensions to table behaviour are only available if you extend it). You can extend JComponent if you feel like doing custom component. If are supposed to implement models (e.g. by extending abstract models) listeners (e.g. by extending adapters) but that's it. You don't need/have to extend swing components usually and you better not do it as it makes your code tied to implementation of superclass.  Make heavy use of the MVC pattern. Here's a simple example of what I mean: class Person { String firstName; String lastName; // and getters and setters... } class PersonSwingModel { private Person person; private javax.swing.text.PlainDocument firstName; private javax.swing.text.PlainDocument lastName; // and getters and setters... // Create some method like init() that initializes PlainDocument values // to attributes in model. } class SavePersonAction extends AbstractAction { private PersonSwingModel model; // and getters and setters... } class PersonSwingView extends JFrame { private PersonSwingModel model; private javax.swing.JTextField firstName; private javax.swing.JTextField lastName; private SavePersonAction savePersonAction; // hook up to JButton/JMenuItem // and getters and setters... // Create some method like init() which binds PlainDocument to JTextField // and Actions to JButtons or JMenuItems } I see some people disagree with extending JFrame or JPanel. I don't. Works for me. Also use LayoutManagers. GridBagLayout is very powerful. If you use it define some GridBagConstraints constants (like LABEL_GBC and FIELD_GBC) and keep reusing them."
597,A,"How to make an animation with Swing? I am making a JApplet and got stuck with a animation problem. Here is my code :  this.sprite.setBounds(002017); this.sprite.setIcon(this.rangerDown); for(int i = 0; i< 16;i++) { this.sprite.repaint(); this.sprite.setLocation(this.sprite.getX() this.sprite.getY()+10); try{ Thread.currentThread().sleep(100); }catch(InterruptedException e){ } } With this there is no animation : nothing happens during the loop the repaint() method seems to only act once the sprite stopped moving. I would like to use only Swing for this any ideas of how to proceed ? Thanks for reading. You should use a javax.swing.Timer to perform the animation rather than Thread sleeps. Here is a good link to get you going: http://java.sun.com/docs/books/tutorial/uiswing/misc/timer.html Also I highly recommend buying the book Filthy Rich Clients -- if you go to the website you can also download all the example code for free. For example Chapter 12: Animation Fundamentals has some great examples such as MovingButton that demonstrates the Timer usage. It's perfectly acceptable to sleep() in the image-changing thread so long as that thread has nothing better to do and so long as that thread is not the Swing worker thread which must be left to do its work undisturbed :) @Carl -- true :) Most docs and articles on Java animation prefer the Timer class though. Here's a good Sun article that talks about both approaches for animation: http://java.sun.com/products/jfc/tsc/articles/timer/ (search for ""sleep"" to see some of the comparisons). It worked thanks a lot !  You left out the code surrounding your code that makes it a little harder to help you. You most likely have a problem with thread handling. There's a Swing worker thread responsible for displaying your stuff; if you're sleeping inside that thread it's not able to do its work. If you're changing the image from outside this thread then it may not be picking up the change because you're not properly synchronizing with the Swing thread. You need to use something like SwingUtilities.invokeLater(Runnable r) to accomplish this where your image-changing code would be in r's run() method. If you Google for ""invokeLater"" and Swing chances are you'll find examples."
598,A,"Elements not adding to JList For some reason I can't add anything to my JList. The JList is visible but simply shows white - nothing can be selected. List list; DefaultListModel listModel; //... list = new JList(); list.setBounds(22020150200); listModel = new DefaultListModel(); listModel.addElement(""ONE""); panel.add(list); Am I missing something? You never set the list's model to the ListModel you've constructed.  The JList is not using the listModel. One way is to initialize the JList by specifying a ListModel to use: DefaultListModel listModel = ... JList list = new JList(listModel); Then performing changes to the listModel (such as calling addElement) will cause the changes to appear on the JList. For more information on using JLists the How to Use Lists lesson from The Java Tutorials is a good source."
599,A,"Java Swing questions regarding GridLayout and paintComponent methods Within this program we need to create an 8x8 grid of ""LifeCell"" widgets. The instructor did not mention that the widgets had to be an object of Shape so I went ahead and used the GridLayout class. The GridLayout class works fine (as well as I know since there is no visual aid to confirm.) The object of the program is to play the Game of Life where a user can click on one of the LifeCell widgets and toggle between states being 'alive' or 'dead. My question relies heavily on getting the cells to be painted. It could be a problem with my code but I am not 100% sure. Program2.java public class Program2 extends JPanel implements ActionListener { private LifeCell[][] board; // Board of life cells. private JButton next; // Press for next generation. private JFrame frame; // The program frame. public Program2() { // The usual boilerplate constructor that pastes the main // panel into a frame and displays the frame. It should // invoke the ""init"" method before packing the frame frame = new JFrame(""LIFECELL!""); frame.setContentPane(this); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); this.init(); frame.pack(); frame.setVisible(true); } public void init() { // Create the user interface on the main panel. Construct // the LifeCell widgets add them to the panel and store // them in the two-dimensional array ""board"". Create the // ""next"" button that will show the next generation. LifeCell[][] board = new LifeCell[8][8]; this.setPreferredSize(new Dimension(600 600)); this.setBackground(Color.white); this.setLayout(new GridLayout(8 8)); // here is where I initialize the LifeCell widgets for (int u = 0; u < 8; u++) { for (int r = 0; r < 8; r++) { board[u][r] = new LifeCell(board u r); this.add(board[u][r]); this.setVisible(true); } } LifeCell.java  public class LifeCell extends JPanel implements MouseListener { private LifeCell[][] board; // A reference to the board array. private boolean alive; // Stores the state of the cell. private int row col; // Position of the cell on the board. private int count; // Stores number of living neighbors. public LifeCell(LifeCell[][] b int r int c) { // Initialize the life cell as dead. Store the reference // to the board array and the board position passed as // arguments. Initialize the neighbor count to zero. // Register the cell as listener to its own mouse events. this.board = b; this.row = r; this.col = c; this.alive = false; this.count = 0; addMouseListener(this); } and here is the paintComponent method:  public void paintComponent(Graphics gr) { // Paint the cell. The cell must be painted differently // when alive than when dead so the user can clearly see // the state of the cell. Graphics2D g = (Graphics2D) gr; super.paintComponent(gr); g.setPaint(Color.BLUE); } I do not need the exact solution to fix it but I am at wits end trying to get it to work. Thanks. EDIT: I added more segment of Program2.java class I can check back tomorrow I am heading off to bed I appreciate all the help guys. EDIT #2: My real confusion gets to when I populate my frame with an 8x8 GridLayout each individual ""cell"" for lack of better words is of type LifeCell. How can I paint each LifeCell different colors? If that makes any sense at all to you guys I can try to revise it as much as I can. And camickr I will look at that website thank you. Assignment can be found here to avoid any and all confusion regarding my question and/or the code snippet. show more of the ""Program2.java"" segment. what are you adding the components to etc. By definition when you have a problem you don't know what part of the code is causing the problem which is why you post a SSCCE. How do you know if the extra code you posted is of any use? Read the SSCCE link and post a SSCCE. A SSCCE is also a debugging tool because if requires you so simplify the problem. Most time you will find the problem before even posting a question. You're in the right track. If you want to use an existing component ( such as a JPanel JLabel JButton etc ) it it much better that you honor what the component already does and just parametrize what is needed. So in your case you're using a JPanel this ( and other JComponents ) have a background property that you can change. So instead of trying to paint the component your self ( which is what is failing right now ) just set that value and let the paint paint itself. You can add a ""getLifeColor"" which return different colors depending on the cell state:  private Color getLifeColor() { return this.alive?liveColor:deadColor; } And then just have the cell painting the background with this color:  public void paintComponent(Graphics gr) { setBackground( getLifeColor() ); super.paintComponent( gr ); } After that you just have to set the state of the cell to live or dead and the component will appear with the corresponding color: Here's the short self contained correct example ( SSCCE ) of the code you posted + the live/dead color usage. I think you can continue from there. Thank you very much that is along the lines of what I was going to try when I got home I appreciate all the help you guys have done.  JPanel has no default preferred size or visible content. you'll need to add some kind of visible component (eg JLabel) or give it a preferred size. besides this your layout should work if you've set it up as follows: JFrame frame = new JFrame(); Container cp = frame.getContentPane(); cp.setLayout(new GridLayout(8 8)); for (int i = 0; i < 8; i++) for (int j = 0; j < 8; j++) cp.add(new JLabel(i + ""-"" + j)); frame.pack(); frame.setVisible(true); I have done something similar to make sure populating my `GridLayout` works but when I tried to see if I could color in each cell it wasn't working because I can't color a JLabel :( You can paint with JLabels. The trick is that by default the opaque property is false. You need to call setOpaque(true) first then call setBackground(Color.BLUE). I am anxious now to go home and try it out. Thank you.  Why do you even have a paintComponent() method for your LifeCell? There is no need to do custom painting. You can change the background color of any component by using: setBackground( Color.BLUE ) Other than that your question makes no sense to me. First you state you need to use a Shape object but I don't see a Shape object anywhere in your code so why did you confuse the question by mentioning that? I really don't understand your question and we don't have enough of your code to provide any real suggestions. If you need more help post your SSCCE showing the problem. I only mentioned Shape for the fact that my problem relies on coloring the cell with a mouseclick I am trying to see if `fill` would work but it needs to take a `Shape` argument so I was wondering if the `GridLayout` I used should have been just 8x8 Rectangle2D objects. We have to follow a standard skeleton code by the instructor I can post the link for the assignment above and see if you guys can get a better sense at what I am talking about The instructor did *not* mention that the widgets had to be an object of Shape Well I read the question wrong which leads to me point why post unnecessary information to confuse us. I would never think to use a Shape to solve this problem so I don't know why the OP mentioned it. :)"
600,A,how can i insert a image in swing JList menu? this is my code: URL imageUrl = status.getUser().getProfileImageURL(); ImageIcon tivitImage = new ImageIcon(imageUrl); listModel.addElement(tivitImage.getImage()); // maybe this part is wrong listModel.addElement(tivitImage.getImage()); // maybe this part is wrong Yes thats the problem. Just add the Icon to the ListModel (not the image). JList supports a default renderer for Icons.  You could subclass JList or use your own ListCellRenderer as it is shown in this article. Another reading: http://www.apl.jhu.edu/~hall/java/Swing-Tutorial/Swing-Tutorial-JList.html towards the end a jlist with country flags is explained. You don't have to subclass JList though you can just set the cell renderer via jList.setCellRenderer(cellRenderer);
601,A,Nested JPanel resizing problem I have two JPanels (let's call these Panel1 and Panel2). These panels are of the same width but varying heights. I want to put these JPanels into one big JPanel (lets call it Panel0) and stack them on top of each other (I decided to set Panel0's layout as GridLayout(01)). The problem is that both nested panels (panels 1 and 2) end up having the same dimensions (those of the biggest between the two) instead of the setPreferredDimension and setDimension that I set to them. Sorry I can't really provide any code (there's a lot of crap added to the panel's and it's all for something work-related). Any advice? Thanks! GridLayout forces all components to be the same size; that's why it's called a grid. Since you only have two panels I'd suggest using a BorderLayout with one panel at NORTH and the other CENTER. If you allow resizing then the one in CENTER will be the expand to fill any extra vertical space so just be aware of that. I was half way done typing up this same response. GridLayout is the problem. Oh wow works great! Thanks!
602,A,"Disable default ALT key action in JFrame under Windows I would like to let my JFrame under Windows not act upon an ALT key press. To clarify when you execute the following snippet of code: import javax.swing.*; public class FrameTest { public static void main(String[] args) throws Exception { JFrame frame = new JFrame(); frame.setSize(400 400); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } } and press the ALT key and then the arrow down key you get a menu in the upper left corner in which you can choose to minimize move close etc. the frame (at least I get that). I would like to disable this: ie. the JFrame should not ""listen"" to these ALT presses. I believe that certain Windows components react by default on the ALT key because when I add a menu bar to my frame and explicitly set the look & feel to the system look & feel the menu (File) is now automatically selected after pressing the ALT key: import javax.swing.*; public class FrameTest { public static void main(String[] args) throws Exception { JFrame frame = new JFrame(); frame.setSize(400 400); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JMenuBar menuBar = new JMenuBar(); JMenu menu = new JMenu(""File""); menuBar.add(menu); frame.setJMenuBar(menuBar); UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); // set Windows look and feel frame.setVisible(true); } } and when I remove UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()) from the example above this behaviour is not exhibited when pressing the ALT key: the menu is not selected but the JFrame is. When no look & feel is set the ""Metal"" look and feel is used. It is clear by looking at the menu bar in my previous example that you go from ""native look"" to ""Metal look"" when you remove UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()) from the code. However I don't see a change in the JFrame no matter what look & feel I set it always looks like a native Windows frame. So my question is: how can I disable this ALT behaviour on my JFrame? I guess I can do it by actually changing the look and feel of the JFrame. Is that possible? If so how? Thanks! Actually what you are seeing here is pretty much outside your nice Swing-y Java world. The window frame (except for MDI interfaces) will always be drawn by the window manager of the underlying operating system. And that's also the reason why the Alt key behaves like you observe. This key is intercepted by the WM in this case and it decides that you want to bring up the system menu of the program. That's totally unrelated to Java. For several reasons you can't change the ""look and feel"" of the window frame the main one being that this is outside Swing's PLAF system. You can remove the window frame leaving behind a naked window (freezing in the cold November wind) then you also shouldn't get a system menu anymore. Furthermore you could try handling the Alt keypress and not delegating that very keypress further (the application gets it before the WM does so you can mess with these things). My Java-Fu is a little rusty right now though so no idea if and how this can be achieved. Thanks for your response Johannes. I was afraid of that.  It sounds like you're hitting upon some default interactions with the Windows window manager. It is possible that if you draw your own titlebar and borders that Windows will no longer set these default handlers on the Alt key. You might want to try Substance which gives you much more control over these sorts of things while still working with the standard Swing components. Or try this before you make your frame visible: JFrame.setDefaultLookAndFeelDecorated(true); I will definitely look at Substance but that'll be from a personal perspective. I cannot get it in the project: I'll have to find a *Swing solution* or let it be. Thanks for your time of course! Substance is at its core a plugin to Swing. There are more things added on top but I think you could say it is part of a Swing solution. Thanks Adam already tried it without success. I'll see if I can get a solution with Substance then. If so (and I can't get a Swing-only solution) I'll throw it higher up in the food chain here. Thanks again Adam. See my edit: try `JFrame.setDefaultLookAndFeelDecorated(true);` or the like. Hmm I suspect Substance won't work either then.  Just for history: You can do this. Window manger handles all the events to the current keyboard focus manager and it decides what to do with the particular key. Every swing application has only one keyboard focus manager that's why your changes will affect the whole application and not the particular frame. The code below should do the trick: frame.addFocusListener(new FocusListener() { private final KeyEventDispatcher altDisabler = new KeyEventDispatcher() { @Override public boolean dispatchKeyEvent(KeyEvent e) { return e.getKeyCode() == 18; } }; @Override public void focusGained(FocusEvent e) { KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(altDisabler); } @Override public void focusLost(FocusEvent e) { KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventDispatcher(altDisabler); } }); Thanks for the info Alex. This is exactly what I was looking for. The Alt key `KeyEvent` itself is intercepted but the Java Swing mnemonic key shortcuts still work. It would be nice if there were a way to only intercept Alt key `KeyEvents` which are part of a mnemonic key shortcut but allow Windows to process other Alt key `KeyEvents`."
603,A,Handling overflowing components in swing In my app I have some longish labels on a chinese os the labels overflow and push out other components also. This has only been observed on a chinese os. How can I detect and handle overflowing components? I am guessing that this is a problem for some depending on the window-size and language. Maybe not what you want but you can check the size of the text like this: // get metrics from the graphics FontMetrics metrics = graphics.getFontMetrics(font); // get the height of a line of text in this font and render context int hgt = metrics.getHeight(); // get the advance of my text in this font and render context int adv = metrics.stringWidth(text); If the text is longer than a limit (you have to pull out of a hat) you can truncate or perhaps even abbreviate it - if it is known or possibly replace it with an icon and use a tooltip to show the full text. This is best solution for my purposes. There is one label overflowing however there is also a titledborder overflowing. So using myComponent.getFontMetrics(font) and inserting tooltip if over certain length works well though not ideal.  JComponent has a setMaximumSize method that could help you. Depending on the LayoutManager you are using the results may be different. For setting constraints like this at Layout level check the SpringLayout.  You can make a JTextArea behave like a label with a bit of extra code but it will wrap the text over lines as necessary instead of abbreviating with an ellipsis (...). Design your UI with wrapping in mind. JTextArea label = new JTextArea(); label.setText( text ); label.setWrapStyleWord( true ); label.setLineWrap( true ); label.setEnabled( false ); label.setOpaque( false );
604,A,"How do I combine a Combo Box with a Tree in Swing? For my application I want a Combo Box that displays its elements when dropped down as a Tree. Problem is I'm not versed well enough in Swing to know how to go about doing this. At least without ending up writing a new widget from scratch or something to that effect. How would I do something like this without creating one from scratch? You can create a ComboBoxEditor whose component ( returned by getEditorComponent ) is a JTree Although you may have already tried that. I don't know how would it look like. Post an screenshot if you make it work. :) EDIT I give it a quick dirty try. Its awful but is a start. Here's the code for what is worth. :( Probably you should start thinking in alternatives. What about a fake Combo that is a JButton without border when pushed a hidden panel will appear with the tree displayed. import javax.swing.*; import javax.swing.event.*; import java.awt.*; import java.awt.event.*; public class ComboTree { public static void main( String [] args ) { JComboBox c = new JComboBox( new String [] { ""Hello"" ""there""}); c.setModel( new CustomComboModel() ); c.setEditor( new TreeComboEditor() ); c.setRenderer( new TreeComboEditor() ); JFrame frame = new JFrame(); frame.add( c  BorderLayout.NORTH ) ; frame.pack(); frame.setVisible( true ); } } class CustomComboModel implements ComboBoxModel { public Object getSelectedItem() { return "":P""; } public void setSelectedItem(Object anItem) {} public void addListDataListener(ListDataListener l) {} public Object getElementAt(int index) { return ""at "" + index ; } public int getSize() { return 2; } public void removeListDataListener(ListDataListener l) {} } class TreeComboEditor implements ComboBoxEditor ListCellRenderer { // Editor interface public void addActionListener(ActionListener l) {} public Component getEditorComponent() { return new JTree() ; } public Object getItem() { return """";} public void removeActionListener(ActionListener l) {} public void selectAll() {} public void setItem(Object anObject) {} // Render interface public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { return new JTree(); } } Yeah that's just what I was thinking but I'm not sure how it would handle folding/unfolding vs. selecting an element. I'll give it a shot soon. Don't do it. Looks terrible. :S Hmm. Any other suggestions? This is absolutely useless code. It doesn't do what is required and it do it it worst possible way. (-1)  Hey guess what! This is your lucky day. I've used this framework in the past. It is very complete. I didn't know they have this already. JIDE Soft Is not too expensive but it will take you some time to understand the API ( it is not that is complex but they've created a LOT of new stuff ) Cool but I'm not sure I'd be willing to pay for something that I'm only gonna use a tiny bit of. Thanks for the find though. Yeap. I agree. Then suggestion of show/hide a panel with the jtree will do. I'm pretty sure that's how they did that implementation.  Override the getListCellRendererComponent methode and create the components in level order. For every tree level move the painted string 3 spaces to right. Example: 1 . a . b 2 . c The original implementation you can look from public Component getListCellRendererComponent( JList list Object value int index boolean isSelected boolean cellHasFocus) { //Get the selected index. (The index param isn't //always valid so just use the value.) int selectedIndex = ((Integer)value).intValue(); if (isSelected) { setBackground(list.getSelectionBackground()); setForeground(list.getSelectionForeground()); } else { setBackground(list.getBackground()); setForeground(list.getForeground()); } //Set the icon and text. If icon was null say so. ImageIcon icon = images[selectedIndex]; String pet = petStrings[selectedIndex]; setIcon(icon); if (icon != null) { setText(pet); setFont(list.getFont()); } else { setUhOhText(pet + "" (no image available)"" list.getFont()); } return this; } But wouldn't that lose the expand collapse behavior  I think I would implement this as a JTree component in a JViewPort followed by an expansion button. When collapsed it would look like a combo box. When you click the expansion button the viewport would expand allowing you to scroll and select a node in the JTree. When you selected the node the view port would collapse back to only show the selected node and the expansion button. Sounds like a bit of work but I suppose that'll do. I'll just have to play around with it."
605,A,getting selected row through AbstractTableModel Is it possible to get the selected row index from my table model? My object already knows about the table model. Instead of passing a reference to the table it self can i get the selected index using the model? The TableModel only concerns itself with the data the ListSelectionModel concerns itself with what is currently selected so no you can't get the selected row from the TableModel.  If you let your model class implement ListSelectionModel as well as TableModel you will be able to get selection from one model... but you cannot extend two abstract model classes :-( (It also isn't very good idea anyway as your class will have too many responsibilities).  Like MrWiggles said you can get it from the ListSelectionModel which you is accessible from the table itself. However there are convenience methods in JTable to get the selected rows as well. If your table is sortable etc you will also need to go through the convertRowIndexToModel method :) From the JTable JavaDoc:  int[] selection = table.getSelectedRows(); for (int i = 0; i < selection.length; i++) { selection[i] = table.convertRowIndexToModel(selection[i]); } // selection is now in terms of the underlying TableModel This worked and should be made the correct answer See http://docs.oracle.com/javase/7/docs/api/javax/swing/JTable.html for more information.
606,A,"Can I use two different look and feels in the same Swing application? I'm using the Flamingo ribbon and the Substance Office 2007 look and feel. Of course now every control has this look and feel even those on dialog boxes. What I want is something like in Office 2007 where the ribbons have their Office 2007 look but other controls keep their native Vista/XP look. Is it possible to assign certain controls a different look and feel? Perhaps using some kind of chaining or a proxy look and feel? Swing unfortunately does lots of ""psuedo-global"" things behind the scenes. AFAIK the only way to do it consistently is to use the private AppContext API. Each AppContext has its own event dispatch thread and other ""psuedo-globals"".  Here is a library which will automaticaly change the look and feel. I am not sure it this will done for every component in a different way but you should take a look at it. pbjar.org This book should be useful if you want to go deep into look and feel /java-look-and-feel-design-guidelines-second-edition I would be glad to see some code example if someone can write it feel free to get starting. EDIT: In this forum thread Thread i found the following description Swing uses a Look & Feel (a PLAF). PLAFs aren't attached on a per-JFrame level. They are attached on a per-VM level. It is almost impossible to mix PLAFs within one application. I have seen a few attempts all failed. It's actually per-AppContext. You should be able to have applets on different sites having different PL&Fs installed.  I just discovered: Since Substance 5.0 the SKIN_PROPERTY is available. It allows assigning different skins to different JRootPanes (i.e. JDialog JFrame JInternalFrame) A little trick: I override JInternalFrame to remove the extra border and the title pane so that it looks just like a borderless panel. That way it is possible to create the impression that different parts of a form/dialog have different looks."
607,A,"displaying links in java's JTextPane without html I need to take text from a source as plain text and display it in a JTextPane or JEditorPane. The source text is not HTML but will contain URLs between square brackets which need to be displayed and function as hyperlinks. I've considered setting the pane's content type to text/html and surounding the url in html tags but that ends up ignoring the newline characters which is a bad thing and i'm not sure how to go about replacing newline characters with ""<br/>"". Is there an easy wat to do that? If doing that means scanning through the whole string wouldn't it be better to just customize how the text is displayed? So I've also considered the route that involves making my own EditorKit like starturtle mentions in this thread but he doesn't explain how to do it. I've looked over the code in this article but it seems like a lot of work is this the route I should take? Has anyone ever done this. Any recommendations? Is it better to convert to html or to customize the display? i'm not sure how to go about replacing newline characters with ""<br/>"". Is there an easy wat to do that? You can do that with Java regex:  String raw = ""...""; Pattern p = Pattern.compile(""\n""); String html = ""<HTML>"" + p.matcher(raw).replaceAll(""<BR>"") + ""</HTML>"" ; I have taken the liberty of adding your HTML wrapper in for you. edit: For the fun of it I've taken Oscar's point and took a stab:  Pattern p = Pattern.compile(""\\[([^\\]]*)\\]""); raw = p.matcher(raw).replaceAll(""<a href=\""$1\"">$1</a>""); +1 @Victor: This is correct. Processing the hyperlinks should very similar: substitute [] with"
608,A,"Bug in JOptionPane.showConfirmDialog? I want to prompt the user for a confirmation when they want to close the frame window like so: addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent e) { if (JOptionPane.showConfirmDialog(null ""Are you sure you want to abort the game?"" ""Really quit?"" JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) dispose(); } }); The dialog shows up but the window closes no matter if I click yes no or close the window. Is this some sort of bug or am I really missing something simple here? I'm using Eclipse on OS X with Java 1.6.0.13. You have to set the frame to do nothing on close to control the closing:  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);"
609,A,"Java Code Design Question and Example Hey everyone I've been writing code in Java for awhile now however I feel as though I lack in code ""design"" - that is creating packages and separating classes and such. I'm just not sure when to create what. So I'm practicing :) I am setting out to write a Calculator (with a Swing GUI) and I want to create a really good design for it. So far I have created a package with the following:  com.kevin.Calculator > com > kevin > calculator > ui Swing_Calculator.java >utilities I want to separate out the UI from the functionality (the math). So far so good? My Swing_Calculator.java is right now creating the GUI elements as well as running the user interface. However should I be ""breaking down"" the creation of the GUI elements into more classes? As I said earlier - I don't seem to know when it is best to do modularize. Here is my code so far:  /** * */ package com.kevin.calculator.ui; import java.awt.Dimension; import java.awt.GridLayout; import java.awt.Panel; import javax.swing.*; /** * @author Kevin * */ public class Swing_Calculator { /** * Creates the calculator's GUI and shows it on screen. */ private static void create_GUI() { // Create and set up the window. JFrame frame = new JFrame(""KBehr's Kalculator""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Sets the size of the frame frame.setSize(300 350); // Centers the frame on the screen // Should be called AFTER the frame size has been set frame.setLocationRelativeTo(null); // Creates a new Panel Object JPanel panel = new JPanel(); // Sets the size of the panel panel.setPreferredSize(new Dimension(300 350)); // Creates a GridLayout object // http://java.sun.com/docs/books/tutorial/uiswing/layout/grid.html GridLayout button_grid = new GridLayout(03); // Adds the GridLayout to the Panel panel.setLayout(button_grid); // Adds the Panel to the Frame frame.getContentPane().add(panel); // Displays the window. frame.setVisible(true); } public static void main(String[] args) { // Schedule a job for the event-dispatching thread: // creating and showing this application's GUI. javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { create_GUI(); } }); } } Can anyone offer some insight? Thanks! you'd usually not use underscores in names of classes in java - changing Swing_Calculator.java to camelCase SwingCalculator.java is much better. Packages - As the calculator's only going to have a few classes you don't need to worry about design of packages too much but as a rule of thumb you want to minimise dependencies between them and have classes within them related around a central theme (low coupling high cohesion). So even a set of packages like com.kevin.calculator.view com.kevin.calculator.controller and com.kevin.calculator.model are a good start. Class Design - What you've started with is a pretty good attempt. When you go about deciding on classes you should follow S.O.L.I.D design principles. In your case the most important of these principles is the Single Responsibility Principle - ideally every class should have only one reason to change. If it has more than one reason coupling is increased making improvements harder and unexpected side-effects more likely. For example if you were to include the calculator (business) logic with the responsibility for updating the GUI you'd have two reasons for change. In the future you might want to add more calculator logic (think scientific calculator functions) or alternatively change the appearance and positioning of the buttons. Having this all in the one class means we have to always be careful that changing one responsibility doesn't break the other. It also makes it harder for others to come and understand what's going on in the class. Model-View-Controller is a very nice and standard way of partitioning the responsibilities into separate classes but even here you want to make sure they contain only one reason to change that's why it's common to have JTableModel type classes separate to JListModel classes. Declarative Design - something else I found tremendously useful when I was starting out was making code as easy to read as possible by not using comments. Comments aren't bad but question why you use them - is it because your code is hard-to-read? Much better than this is to use lots of methods with descriptive names. Instead of: if(input < 0 || input > 999999999) { throw new BadInputException(); } // continue processing prefer if (checkInputIsInvalid()) { throw new BadInputException(); } // continue processing because it tells the reader what you're doing without getting them unnecessarily lost in the details of the code when all they want to do is change a specific functionality (and may not even care about what's valid only that a check is done). +1 That was exactly the answer I was waiting for. SOLID Declarative Design and than you can remove most of the comments in the code. Great answer!  GUI: For a simple GUI as a calculator what you have done would do; the only change I would probably make is move out the main method to a different class - ""Application"" or something. Controllers and Logic: Next part is to seperate out the GUI handlers (the listeners); again this is not a strict rule; but it would definitely help on a bigger project. Even the listeners shouldn't have any core logic code. It should merely act as a bridge between the class(es) that implements the logic and your GUI. The implementation of the real logic (how to add subtract etc in this case) should definitely be done in seperate classes/packages. The advantage of doing this will not be very evident in such a small scale project but when it is big; the real merits starts showing up. What I described above is basically the Model-View-Controller architechture. Specific to Java there is this article at the Sun website. You would also find plenty of good books on these concepts too; pick up one read and practise; that's the best way to do it I guess. Thanks for your guidance I will definitely follow your suggestions as well as check out the link you provided.  Since it is a simple application play around with different ""designs"". The best designs are those that work! Once you're done try refactoring it to make it a scientific calculator and see how painful or easy the changes are to make. These learned lessons are far more valuable than reading too many books or articles. Yep definitely designing in mind to expand it in the future. Thanks!  You could just write the application in a way that works but make certain to include unit tests for your functions. Unit tests will help ensure that each method is relatively simple otherwise the tests are too hard to write. My basic thought is: 1. Make it work which includes unit tests 2. Make it right which is refactoring 3. Make it fast which is profiling and optimizing. I agree with Rusty that the MVC paradigm may work well for you so you can try to break your application up this way. Once you get it working then you should read up on refactoring as that will help you to decide how to change the structure. There is a good book on Refactoring to Design Patterns that I liked. Once you have written the application (step 1) then you may want to look at a book on Design Patterns and see if there are patterns that you use to better organize your application. Design patterns make more sense once you have more experience writing otherwise it becomes too easy to try to make patterns everywhere even when it doesn't really make sense. Thanks I think it will also help that I'm taking a Design Patterns class this upcoming semester! Try to finish your calculator and the class will make more sense. Unfortunately people seem to design to patterns rather than using them as a way to help with the design. James couldn't agree more. Don't fall into that trap early.  You should create a subclass of JFrame. In there you should set up your UI. public class Kalculator extends JFrame { // buttons and stuff should be private member variables public Kalculator(){ super(""KBehr's Kalculator""); // set up GUI here } } That is a basic class to get started with. I usually make my ActionListeners private inner classes of the Frame. Then inside the gui on 'Equals' you will pass the arguments into the calculate method of your Math class. That should provide a good start. Thanks for your help!"
610,A,Java: Image as toggle button How can I create in a Swing interface a toggle image button? I have two images imageon.jpg and imageoff.jpgand I basically want a clickable element that toggles the images and fires an event. Update: Is there a way to override the usual 'chrome' around the image? I would prefer a simple image to a button with an image inside. I had the same problem with JButtons. Try this: result = new JButton( icon ); result.setBorderPainted( false ); result.setContentAreaFilled( false ); width = icon.getIconWidth(); height = icon.getIconHeight(); result.setPreferredSize( new Dimension( width height ) ); It is necessary to set the preferred size to get rid of additional space around the button. This worked for me on Windows 7 and Mac OS X 10.6.  Your best bet is to subclass AbstractButton and set properties like border and background (in your constructor). MyButton() { setBorder(null); setBackground(null); }  Load the images with ImageIcon. Create a JToggleButton. Then apply the icons with AbstractButton.setIcon/setPressedIcon/setSelectedIcon. Remove the border with AbstractButton.setBorderPainted(false). really strange... i also tried to make the borderpainted to false but still have the border on the image nor the toggle. How to solve it out? :( Mmm forgot about those methods. (And they don't show up in the Javadoc unless you remember they exist.) +1  How about JToggleButton? You can subclass it and override paint() to paint the correct image based on whether it is selected or not. Another way would be to subclass JPanel and catch mouse clicks overriding paintComponent() to draw the correct image. This way the only thing that gets drawn is the actual image (unlike the JToggleButton option). Thanks for the JPanel tip! I found this resource hope it teaches me to build what i need: http://java.sun.com/docs/books/tutorial/uiswing/painting/index.html
611,A,Swing on Ubuntu font height Running a Java Swing program on Ubuntu Linux I'm getting an odd bug where the font height is too large for the actual font size that is every piece of text (in menus buttons text areas etc.) has excess blank space underneath the text itself. This does not depend on which font I select. It also does not depend on the font size chosen - setting a larger size in an attempt to use up the extra space just causes the excess space to scale with the font size. It does depend on the operating system -- it works fine on Windows. It also depends on the look and feel chosen -- it works with the GTK look and feel (which is otherwise not as attractive as the Metal look and feel so I would prefer not to use that as a workaround if I can avoid it). I can't find any mention of this on Google. Any ideas how to fix it? Are you using SunJDK or OpenJDK? I think OpenJDK uses some other fonts and in general has problems with fonts and layouts. If you're using default install of eclipse you're with gcj which is even more unpredictable. Try SunJDK.
612,A,Setting three button accelerator key hot keys in Java (OSX) I am trying to change a few hot-keys in the java application I am wokring on and it seems that the system I am using may not work with three button key combinations. We currently have a JMenuItem item and we set the hotkey with a call like this: menuItem.setAccelerator(getAcceleratorKey(accelerator)); And here is the getAcceleratorKey method:  private KeyStroke getAcceleratorKey(int keyCode) { return KeyStroke.getKeyStroke( keyCode Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() false); } It seems that the keyCode that this method takes as a parameter can only be one key pressed with command. So how then would I do something like Command-shift z for undo? Do I need to use a different class? KeyStroke.getKeyStroke() takes modifiers as a parameter. A combination of them should give you what you want: KeyStroke.getKeyStroke(keyCode java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.META_MASK);
613,A,Performing an action after a RowSort operation I have a JTable and a TableRowSorter which I'd like to perform an operation after a sort is finished. I've been browsing the net and so far I haven't had much luck. Initially I thought just a RowSorterListener would do the trick but unfortunately it doesn't perform the operation after the sort is finished. Adding a MouseListener to the JTable header could work but the solution isn't terribly elegant. Does anyone have any ideas? Thanks a bunch! Edit (from comment): The following is added in a method inside a custom TableModel class which extends AbstractTableModel. This method is invoked whenever the JTable is set/specified in the custom TableModel class. sorter.addRowSorterListener(new RowSorterListener() { @Override public void sorterChanged(RowSorterEvent rowsorterevent) { rebuildMItems(); // The method which executes } }); `RowSorterListener` should work. can you show how you are adding the RowSorterListener and the implementation of your `sorterChanged` method? Akf thanks for your help. The following is added in a method inside a custom `TableModel` class which extends `AbstractTableModel`. This method is invoked whenever the `JTable` is set/specified in the custom `TableModel` class.  sorter.addRowSorterListener(new RowSorterListener() { @Override public void sorterChanged(RowSorterEvent rowsorterevent) { rebuildMItems(); // The method which executes } }); Nothing too exciting though :P Oops looks like the formatting went awry there. Could you tell I'm new to Stack Overflow? :) You can't format anything in comments. Could you add it to the question instead please? are you suggesting that rebuildMItems() does in fact get called but it is called too early? Two possibilities: I see you have a custom RowSorter. Couldn't you simply add a call to your operation at the end of the sort() method? In other words can you add this: @Override public void sort() { super.sort(); doSomethingAfterSortingIsDone(); } to your sorter? Your current method (doing it in a RowSorterListener) performs the operation twice: once for SORT_ORDER_CHANGED and once for SORTED. Can you check the event's type and only perform the operation at the correct time? Perfect. Thanks a bunch mmyers!
614,A,"Initiating a commandline tool from GUI I want to fire a commandline exe with the parameters entered in GUI. The Process class can be used to fork my required commandline process from the java application. And I used the getInputStream() method of Process object to get the result and got it displayed in the GUI. private void confirmActionPerformed(java.awt.event.ActionEvent evt) { String output; try { Process p = Runtime.getRuntime().exec(""my command line exe with parameters""); BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream())); while ((output = stdInput.readLine()) != null) { TextField.setText(TextField.getText()+output+""\n""); } } catch (IOException e) { System.out.println(""Exception in Process""); e.printStackTrace(); } } This is my code which is an event listener of a button pressed event and I attempted to display the result of the process in the text field (java swing component). This process actually runs for quite a long time and shows some statistics as and when it runs when run in command line. But when i attempt it in GUI with the above code Im getting the entire consolidated result only after the process finish running. Im not getting the TextField updated as and when it is executing. Plz help me. Im not getting where it goes wrong.. This is because the whole thing is done by the Swing event-handling thread. Perhaps should you consider creating a separate thread and update the TextField with a SwingUtilities.invokeLater().  As Maurice already pointed out you shouldn't be doing intensive processing on the UI thread. The SwingWorker class helps with that. It's part of the standard API since 1.6. There is also a backport to 1.5 if you can't use 1.6. This class makes it easier to put some processing task on another thread and display the result later so that your GUI doesn't block in the meantime. You can also use SwingUtilities.invokeLater() directly of course as suggested by Maurice but for me SwingWorker is the way to go as it is quite easy and apparently the new standard way of doing this kind of thing."
615,A,"How to create a custom Swing Component I've always wanted to create custom components in Java or customize existing ones but my searches never resulted in anything useful. So I decided to ask the StackOverflow community: Where can I find information about customizing Java GUI Components in general? And when I mean customizing I'm not talking about changing colors fonts etc. I mean really customize them. Here are two mockup example components: Notes I started this question mainly to find how to create the above two custom components. But then I realized that there isn't a general question about hacking swing components. So I thought it would be better to have a list of resources. In case you are wondering how do the two components in the mockup work here it is: A customized JScrollPane that has two Scrollbars for each orientation. Each scrollbar can act differently. For example the outer ones scroll normally and the inner ones move the view in a more Picasa-like way. I actually got a working(!) answer from google groups here but that was just code. The second one is a custom JComboBox which when the popup list is expanded has a JComponent at the end. This can be anything from a simple JLabel with an icon to a JButton that manipulates the list in a way. But this question isn't about those specific components. It's about finding resources (websites books articles etc.) to learn how to create them. I just noticed that the sceenshot says ""jbomponent""... :P Read Swing Hacks: Tips & Tools for Building Killer GUIs (Marinacci Adamson). IMHO an essential book for effectively working with swing in general.  Filthy Rich Clients is an excellent very readable book on this topic. It's more about improving the look and feel of Swing components than creating entirely new ones but it does get into the guts of Swing and provides a lot of practical examples. Yes I have read this book. Very good book but as you said it's mostly about improving the look and feel.  Maybe this on line book will provide some insight into the design of Swing components?  This article How To Write a Custom Swing Component should be really helpful. It covers replicating a Windows slider control that has both discrete steps and a continuous range.  The JDK is open source. To understand how you write a Swing component there is no better place to look than the source for Swing components. In general when you create custom components you are interested in one or more of the following: {interaction semantics visual representation compositional structure} Start with the simplest cases: Passive components: JLabel Interactive components: JButton JLabel will demonstrate the barebones extension of JComponent for custom drawing of a component; in this case it is drawing the 'text' string value as its representation. JButton will demonstrate the barebones extension for user interaction in addition to drawing the component. A couple of caveats to keep in mind when reading Swing code: there is a lot of code in there for backwards compatibility; most of the actual graphics code is in the UI classes; the Swing classes have ""evolved"" and are not necessarily representative of best practices. Web address for the component code  Personally I find the above answers too general or vague. Also as someone is inevitably going to bump into this thread just as I did I might as well provide what I found: A tutorioal on CodeProject possibly outdated tutorial on a personal blog and another blog entry that builds up on the former. Hope this helps...  This is a pretty open question the short simple answer is that you subclass JComponent or one of it's descendants and add the functionality that you require. Obviously depending on what you're wanting to do this may vary in difficulty. For starters I recommend you read Sun's tutorial on using Swing components where there are examples on how to use scroll panes and popup menus. Once you have read through those and experimented you might have more specific questions that will be easier for people to provide considered answers to. If the two components in your mock up are all you are wanting to implement then giving us some better idea of how you want them to function will yield better answers. I have read the Java Tutorial (and always do when it comes to Swing) but it doesn't quite go as deep as I need. can you be more specific in explaining what it is you need then? Are you wanting to know specifically how to achieve the functionality that you've mocked up in the question or is the question intended to be more general?"
616,A,"Setting the tab policy in Swing's JTextPane I want my JTextPane to insert spaces whenever I press Tab. Currently it inserts the tab character (ASCII 9). Is there anyway to customize the tab policy of JTextPane (other than catching ""tab-key"" events and inserting the spaces myself seems an)? As far as I know you'd have to catch key events as you say. Depending on usage you might also get away with waiting until the input is submitted and changing tabs to spaces at that time.  You could try sub-classing DefaultStyledDocument and overriding insert to replace any tabs in the inserted elements with spaces. Then install your sub-class in JTextPane with setStyledDocument(). This may be more trouble than catching key events though.  You can set a javax.swing.text.Document on your JTextPane. The following example will give you an idea of what I mean :) import java.awt.Dimension; import javax.swing.JFrame; import javax.swing.JTextPane; import javax.swing.text.AttributeSet; import javax.swing.text.BadLocationException; import javax.swing.text.DefaultStyledDocument; public class Tester { public static void main(String[] args) { JTextPane textpane = new JTextPane(); textpane.setDocument(new TabDocument()); JFrame frame = new JFrame(); frame.getContentPane().add(textpane); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(new Dimension(200 200)); frame.setVisible(true); } static class TabDocument extends DefaultStyledDocument { @Override public void insertString(int offs String str AttributeSet a) throws BadLocationException { str = str.replaceAll(""\t"" "" ""); super.insertString(offs str a); } } } Define a DefaultStyleDocument to do the work. Then set the Document to your JTextPane. Cheers Kai"
617,A,"Anyone tried mixing JavaFx and JRuby? Has anyone tried mixing JavaFx and JRuby? I've built a desktop JRuby application with a Swing GUI (100% JRuby) and I'm toying with the idea of replacing the GUI with JavaFx for a more slick feel. To fit with my current application I want to implement an MVC pattern with the View being JavaFX and the Controller and Model being Ruby. No idea but even if this was possible you might want to hold off. With Oracle's recent acquisition of Sun a lot of people think they're going to let JavaFX die. Being a Java fanboi I hope not :( Eng.Fouad: I don't see any reason to mark ""JavaFx"" and ""JRuby"" as code. I'm also skeptical of the relevance of the tags [tag:java] and [tag:swing]; they are tangential (especially [tag:swing]). (I'm unable to undo the edit of course). As far as conceptual differences between JavaFX Scriptand J Ruby there are quite a few. I'll start with JRuby. JRuby is not actually a language per se. It is instead an implementation in Java of the Ruby programming language. The original runtime interpreter for Ruby was written in C (and perhaps some in C++ I'm not sure). The JRuby project was started by some guys who wanted a runtime implementation of Ruby that was written in Java instead. Why? Well there are some interesting advantages. First of all they were able to make it very easy to invoke Java code from a Ruby application. Secondly it means that Ruby programs end up being run by the Java Virtual Machine (JVM) and therefore can benefit from all the optimization work that has been done on JVMs over the last ten years. Today JRuby functions as an interpreter only but from what I heard from one of the project leads earlier this month they are very close to being able to compile Ruby programs directly into JVM bytecode which would provide another performance boost. In the end JRuby is very interesting for projects that are written in Ruby but that want to leverage either: existing Java libraries or existing Java runtimes (the JVM and even application/web servers like GlassFish and Tomcat) or both. JavaFX on the other hand is scripting language which is directly injected for creating graphics kind of stuff.Very pragmatic too.So coming to usage when you are following a design pattern in this case MVC if you are following the rules it should be fine.But trust there might be very few cases which may started using FX with JRuby. You can learn about [JRuby](http://jruby.org) on the [JRuby project](http://jruby.org) page. There is a nice presentation from Google IO on you tube too that gets into the real power Ruby as a first class JVM language.  There is now a JRubyFX gem from the JRuby project for working with JavaFX 2.0. It supports both JavaFX in code and FXML. Most things should work but it has a few issues that are documented in the Readme. +1 I came to say this  It will be much easier when JavaFX 2.0 comes out.  As of java 7u6 javafx is now part of the java language and available by default for Linux Mac and Windows. You can program this with any language on the jvm so now you should be able to code your application very easily. JavaFX script was dropped but JavaFX the technology is bigger and better than ever. Everything is now included in the API directly so using Groovy or JRuby provide a great scripting framework for using JavaFX. Happy Coding!"
618,A,How to auto resize JFrame according to content I have created a custom JPanel that displays images (lets call it MyPanel) I have added this to JFrame's contentPane. I want JFrame to be resized automatically to fit the MyPanel when image changes. It looks like I need to call frame.pack() to do this. Calling pack() from MyPanel increases coupling so I don't want to do that. To solve the issue I extended JFrame (lets call it MyFrame) and made MyFrame observer and MyPanel observable. Whenever the image MyPanel is displaying changes it notifies the listeners MyFrame for this instance. And then MyFrame calls pack() when it gets the notification. Is there a smoother way of resizing JFrame according to its content? The solution you described seem reasonable. Alternatively whenever MyPanel changes its image it can go find its parent Frame and then call pack() on it. If no such Frame exists then don't do anything. No need to create additional classes and its as loose a coupling as you are going to get. You can use SwingUtilities.getAncestorOfClass() to do this easily. Yeah my approach was reasonable. Thanks for approval :)
619,A,"How to make a popup menu added to a JtextField to be invisible when the JTextField's focus is lost? I have added to a JTextField a JPopupMenu. Unfortunatelly when i change the focus from JTextField or when i ""minimize"" the window the JPopupMenu still is visible. I need to make it invisible if JTextField is loosing the focus. How can i do this? You can register a focus listener (http://java.sun.com/j2se/1.3/docs/api/java/awt/event/FocusListener.html) with the text field. The listener's focusLost() method should hide the menu Thank you! ........"
620,A,"What's wrong with this code? I wrote this code: public class FileViewer extends JPanel implements ActionListener { /** * */ private static final long serialVersionUID = 1L; JFileChooser chooser; FileNameExtensionFilter filter = null; JEditorPane pane = null; JTextField text = null; JButton button; JTextArea o = null; URL url; public FileViewer(JTextArea o) { this.o = o; setLayout(new FlowLayout(FlowLayout.RIGHT)); JTextField text = new JTextField(""file..."" 31); text.setColumns(45); text.revalidate(); text.setEditable(true); button = new JButton(""Browse""); add(text); add(button); filter = new FileNameExtensionFilter(""html"" ""html""); chooser = new JFileChooser(); chooser.addChoosableFileFilter(filter); button.addActionListener(this); } public void paintComponent(Graphics g) { super.paintComponents(g); Graphics2D graphic = (Graphics2D) g; graphic.drawString(""HTML File:"" 10 20); } public void actionPerformed(ActionEvent event) { int returnVal = 0; if (event.getSource() == button) { returnVal = chooser.showOpenDialog(FileViewer.this); if (returnVal == JFileChooser.APPROVE_OPTION) { text.setToolTipText(chooser.getSelectedFile().getName()); } else o.append(""Open command cancled by user.""); } } } But in the line: text.setToolTipText(chooser.getSelectedFile().getName()); a NullPointerException is thrown! EDIT I have fixed the problem which I have mentioned above but it doesn't work correctly (it doesn't write the name of the file in the text!) :-( Well your 'text' member variable is initialized to null in the code shown I have fixed the problem which I have mentioned above but it doesn't work correctly(it doesn't write the name of the file in the text!!!) :-( Spellchecking police btw: it's ""canceled"" or ""cancelled"" depending on whether you're using US or British English not ""cancled"". Answering your other point: text.setToolTipText(chooser.getSelectedFile().getName()); Was this the intended behaviour? The filename will only appear as a tooltip when you mouse over the text field. To put text directly into a JTextField you should call setText() instead.  replace this: JTextField text = new JTextField(""file..."" 31); with this: text = new JTextField(""file..."" 31);  You've declared text globally and assigned NULL to it. In your constructor for FileViewer you declare it again with new but this declaration is local. The variable referenced in actionPerformed() is the global one which is still NULL so you get the exception. If you change JTextField text = new JTextField(""file..."" 31); to text = new JTextField(""file..."" 31); that should fix it. yes it has been fixed! Thanks  The field text is null as in your FileViewer constructor you have created a local variable called text that has been added to the form. Replace JTextField text = new JTextField(""file..."" 31); with text = new JTextField(""file..."" 31);  setToolTipText method does not set the text. It sets the tooltip text which is shown when mouse hovers the text. Use setText method."
621,A,"Swing: Alignment Problem I have a question about laying out some swing components. Say I have a JPanel which contains a JLabel and a JTextField. I want JLabel to be drawn on the left-most side of JPanel and JTextField to be drawn on the right-most side of JPanel. I tried using BoxLayout and Horizontal Glues but I couldn't make it work. Can somebody explain how this should be done? And by the way I also should be able to set the JTextField's size which will grow from right to left. EDIT: Here is my class it's pretty simple. public class TextField extends JPanel { private JLabel label; private JTextField textField; public TextField(String labelText){ this.label = new JLabel(labelText); this.textField = new JTextField(""""); Box horizontalBox = Box.createHorizontalBox(); horizontalBox.add(label); horizontalBox.add(Box.createHorizontalGlue()); horizontalBox.add(textField); add(horizontalBox); } } I just added my class so you guys can check it out. No we can't check it out. The code is NOT compileable or executable. By definition when you have a problem you don't know what is or isn't causing the problem so you don't know if you have or haven't posted the relevant code. Thank you all for your answers the problem is solved I decided to use BorderLayout instead of BoxLayout. My apoligies for not posting a compilable or executable code. You could also use border layout and add the label using the BorderLayout.WEST option and the TextField using the BorderLayout.EAST option. +1 but TextField should do to CENTER  The problem with the code that you posted isn't so much the BoxLayout it's the layout that contains it. By default JPanel uses FlowLayout. When you add a component to a FlowLayout it does not expand to fill all of the available space. So instead of adding a Box to the panel either make the class extend Box or set the panel layout to BoxLayout and add the components directly.  To use BoxLayout: public TextField(String labelText){ this.label = new JLabel(labelText); this.textField = new JTextField(""""); this.setLayout( new BoxLayout( this BoxLayout.X_AXIS ) ); this.add( label ); this.add( Box.createHorizontalGlue() ); this.add( textField ); } I like to use GridBagLayout for panels that have either complex layouts or components that should ""fill"" part of the panel. JPanel panel = new JPanel(); JLabel label = new JLabel( ""Enter your text:"" ); JTextField textField = new JTextField(); panel.setLayout( new GridBagLayout() ); panel.add( label new GridBagConstraints( 0 0 1 1 0.0 0.0 GridBagConstraints.EAST GridBagConstraints.NONE new Insets( 0 0 0 0 ) 0 0 ) ); panel.add( textField new GridBagConstraints( 1 0 1 1 1.0 0.0 GridBagConstraints.WEST GridBagConstraints.HORIZONTAL new Insets( 0 0 0 0 ) 0 0 ) ); You can find a good explanation of how you use GridBagLayout here.  I tried using BoxLayout and Horizontal Glues but I couldn't make it work. Can somebody explain how this should be done? There is no trick to this. Read the Swing tutorial on How to Use Box Layout for a working example. If it still doesn't work then you need to post your SSCCE because we can't guess what you might be doing wrong.  Set your JPanel to use BorderLayout. This in combination with Box will give you almost any layout you need.  One of the best ways to debug swing UIs is to add visible borders to your components to get a better idea of what is going on. Try adding this after you create the horizontalBox: horizontalBox.setBorder(BorderFactory.createLineBorder(Color.black)); Most likely what you will find is that your TextField is shrunk to the absolute minimum size required to display whatever text you pass to the constructor and the minimum size of the JTextField (which is basically just one visible character space). Now try adding this to the constructor: horizontalBox.setPreferredSize(new Dimension(400 40)); Then try replacing the glue with a strut: horizontalBox.add(Box.createHorizontalStrut(30)); That said I think the biggest issue is that you are using a JPanel and then adding a box component to it which makes resizing of the component problematic. Try this and see if it works for you: public TextField(String labelText){ this.label = new JLabel(labelText); this.textField = new JTextField(""""); this.setLayout(new BoxLayout(this BoxLayout.X_AXIS)); this.setBorder(BorderFactory.createLineBorder(Color.black)); // debug this.add(label); this.add(Box.createHorizontalStrut(30)); this.add(textField); } [p.s.] You really want to reconsider the name of that JPanel extension. Perhaps TextFieldDisplay or TextFieldPanel would be more appropriate. Thank you for the debugging trick it was good to know."
622,A,How do I find the current focussed InternalFrame? I am having multiple InternalFrames (JIF) added to a desktop manager. How do I know which one has the focus at the moment? Ha..I didnt see that earlier while searching the docs pretty simple question. JDesktopPane.getSelectedFrame() @azlam...good job:)
623,A,"Preserving keyboard layout in a JTextfield? Simple example: 2 JTextFields one for a spanish word another one for it's translation. Is there a way to preserve keyboard layout per JTextField so that the user wouldn't have to switch back and forth? TIA. No keyboard layouts are managed by the OS or desktop environment.  If you know exactly the layout of the Spanish keyboard in question you could theoretically process KeyEvents yourself translating them into the appropriate character. However this would not be an easy thing to do. You would probably end up inserting characters into the textfields yourself.  Yes this demo code uses the keyboard layout for the selected locales in each text field: public class InputMethodTest { public static void main(String[] args) { final InputContext en = InputContext.getInstance(); en.selectInputMethod(Locale.UK); final InputContext es = InputContext.getInstance(); es.selectInputMethod(new Locale(""es"" ""ES"")); JTextArea english = new JTextArea() { @Override public InputContext getInputContext() { return en; } }; JTextArea spanish = new JTextArea() { @Override public InputContext getInputContext() { return es; } }; JFrame frame = new JFrame(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.getContentPane().setLayout(new GridLayout()); frame.getContentPane().add(new JScrollPane(english)); frame.getContentPane().add(new JScrollPane(spanish)); frame.setSize(600 400); frame.setVisible(true); } } Tested on Windows XP Home with EN and ES keyboard layouts installed (via Control Panel > Regional and Language Options > Languages > Details...). See the Java Input Method Framework for more details. Oh wow. I did not expect this to be possible. Nice work. Awesome thanks. BTW you don't really need that .getContentPane() part. Some methods behave well without getContentPane() some don't. I've stuck with it for the sake of consistency. Details here for them that are interested: http://weblogs.java.net/blog/hansmuller/archive/2005/11/jframeadd_conte.html"
624,A,Why is EventListenerList traversed backwards in fireFooXXX()? I don't understand the rationale of this code taken from javax.swing.event.EventListenerList docs: protected void fireFooXXX() { // Guaranteed to return a non-null array Object[] listeners = listenerList.getListenerList(); // Process the listeners last to first notifying // those that are interested in this event for (int i = listeners.length-2; i>=0; i-=2) { if (listeners[i]==FooListener.class) { // Lazily create the event: if (fooEvent == null) fooEvent = new FooEvent(this); ((FooListener)listeners[i+1]).fooXXX(fooEvent); } } } Why is the list traversed backwards? Why is only every second listener called? The event firing is implemented exactly this way in javax.swing.tree.DefaultTreeModel among others so it's obviously me who's just not getting something. to answer #2: Every second listener is called because the array that EventListenerList uses is set populated as an array of Listener-Type Listener-Instance pairs.  Probably performance considerations: backwards iteration is faster because comparison with 0 is a single machine code instruction - lots of former C programmers have that ingrained even though it's rather irrelevant nowadays. Note that there is no guarantee about the order in which listeners will be notified anyway. Look at the rest of the class - it stores the listeners' types as well to provide type safety. @Suraj Chandran there is no reason for wanting such a thingy notification sequence is unspecified Ah ok. I just wonder why it isn't written like `FooListener[] listener = listenerList.getListeners(FooListener.class)`. Would be quite a bit cleaner IMHO. Perhaps it has to do with performance as well. I think the code example in the comment is outdated - the getListeners() method was added in Java 1.3 maybe they are doing it backwards because they want to notify the last listener first?  1. One possible problem when traversing listeners is described in Swing Hacks item #94 and happens if one of them removes itself as a listener in it's implementation of fooXXX(). Consider this listener that might remove itself after receiving the event: public class FooListener implements EventListener { private int i; public FooListener(int i) { this.i = i; } public fooXXX(FooEvent foo) { System.out.println(i); if (i == 1) { ((FooEventSource)foo.getSource()).removeListener(this); } } } and this implementation of the listener traversal: public void fireFooXXX() { for (int i=0; i<listeners.size(); i++) { // Lazily create the event: if (fooEvent == null) fooEvent = new FooEvent(this); listeners.get(i).fooXXX(fooEvent); } } Now suppose we create a number of these listeners: fooEventSource.addListener(new FooListener(0)); fooEventSource.addListener(new FooListener(1)); fooEventSource.addListener(new FooListener(2)); fooEventSource.addListener(new FooListener(3)); Firing the event would give the following output: 0 1 3 We would be looping over the listeners by index from 0 to 3. At index 1 the listener removes itself from the internal array of listeners causing listeners 2 and 3 to be shifted down to index 1 and 2. The loop continues with index 2 which now contains listener 3. Listener 2 has been skipped. By iterating backwards this problem is eliminated since removing a listener would only shift the index of listeners that have already been called. But EventListenerList does not have this problem since the add() and remove() methods are copy-on-write and the listener traversal in the suggested usage operates on the listener list instance returned by getListenerList() before the loop. Some more discussions about it can be found in this thread where the reasons seems to boil down to one of: performance event ordering (the last added listener will be the first to be notified) 2. akf and Michael Borgwardt has already answered that the EvenListenerList stores the listener types in addition to the listeners. I guess the reason for this is that it makes it possible for a single EventListenerList to handle listeners of different types. you didn't try that did you? It's wrong as long as you follow the example in the api doc and simply invert the loop direction that is grab the array of listeners once before looping: the field listeners is re-assigned on add/removeListener the local reference is uneffected Embarrassingly enough I didn't... I have updated the answer accordingly but I am leaving the description of the problem that might occur when iterating over a list of listeners. Thanks for correcting me. cool - and you dug up that ol' thread wouldn't have expected _anything_ on the java.net forum being findable :-) The important points to take away from that and other threads are a) notification ordering is _unspecified_ it doesn't matter because listeners _must not_ rely on any sequence b) all listeners are equal that is they _must_ (and are) notified independent of whether the (awt) event is consumed or not
625,A,"Java: GUIs must be initialized in the EDT thread? I'm Jason. I'm having a bit of a problem with the Substance look and feel (https://substance.dev.java.net/). My problem is more general. I've already got my GUI written and it works fine but when I use a Substance Look-and-feel it requires all GUI initialization to take place in the EDT thread (Event Dispatching Thread or something). Right now I'm using com.sun.java.swing.plaf.windows.WindowsLookAndFeel (not sure if I spelled that right) and it doesn't require anything of this sort. So I put the main initialization into the EDT by calling SwingUtilities.invokeLater(). This made it work. However the program also spawns several other windows during its execution. Right now I have code like: SomeNewWindow window = new SomeNewWindow(); // ... some bs emitted window.doStuff(); This code works fine because by the time window.doStuff() is called it's already initialized. But Substance requires me to do something like this: SwingUtilities.invokeLater(new Runnable(){ public void run(){ SomeNewWindow window = new SomeNewWindow(); }}); // ... bs emitted window.doStuff(); Here it sometimes throws a NullPointerException because window is not initialized by the time window.doStuff() is called. I can't put window.doStuff() into the EDT thread because it usually takes several seconds to return and will hang the GUI. I've tried putting Thread.sleep(1000) right after I invoke the EDT thread because it's probably initialized by then. But this seems awkward. I simply need a way for the main thread to 'know' when the SomeNewWindow initialization has returned so it can continue on without having to worry about a NullPointerException. Thanks in advance. I think the standard approach to this would be to make your EDT the ""base thread"" from which you start other worker threads to do stuff. Another way would be to use a volatile flag that the initializer can set when it's done so the other thread can check it in a loop and act on the new window once the flag is set.  Is there a reason why you can't just move the doStuff() call into the invokeLater callback? SwingUtilities.invokeLater(new Runnable(){ public void run(){ SomeNewWindow window = new SomeNewWindow(); window.doStuff(); } }); If the above is impossible I'd go with invokeAndWait() instead of invokeLater() as Paul Tomblin already suggested. And no because window.doStuff usually takes several seconds or minutes. I try doing that and the window becomes transparent for that time. Agreed bad idea :-)  You could switch from invokeLater to invokeAndWait which will wait until the window is created. It's a bit cheesy but not as bad as putting in a sleep. That works! Never knew that existed. *facepalm*  Egwor suggest using a CountDownLatch instead. Definitely looks like it would simplify the situation. This is a job for condition variables. Basically in run() Lock the lock construct some new window and signal the condition (and unlock the lock). ""Meanwhile"" in the other thread do your other ""bs"" lock the lock; if the window is null wait() on the condition variable; unlock the lock; window.doStuff(); I think a countdown latch might be better no? Maybe. I don't know what a countdown latch is :)"
626,A,"Why is paint()/paintComponent() never called? For the last two days I have tried to understand how Java handles graphics but have failed miserably at just that. My main problem is understanding exactly how and when paint() (or the newer paintComponent() ) is/should be called. In the following code I made to see when things are created the paintComponent() is never called unless I manually add a call to it myself or calls to JFrame.paintAll()/JFrame.paintComponents(). I renamed the paint() method to paintComponent() in hoping that would fix my problem of it never being called (even at repaint()) but no luck. package jpanelpaint; import java.awt.*; import javax.imageio.*; import javax.swing.*; import java.io.*; import java.util.ArrayList; public class ImageLoadTest extends JComponent { ArrayList<Image> list; public ImageLoadTest() { list = new ArrayList<Image>(); try { //create the images (a deck of 4 cards) for(String name : createImageFileNames(4)){ System.err.println(name); list.add(ImageIO.read(new File(name))); } } catch (IOException e) { } } protected void paintComponent(Graphics g) { int yOffset=0; System.err.println(""ImageLoadTest.paintComponent()""); for(Image img : list) { g.drawImage(img 0 yOffset null); yOffset+=20; } } public static void main(String args[]) throws InterruptedException { JFrame frame = new JFrame(""Empty JFrame""); frame.setSize(new Dimension(1000 500)); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); Thread.sleep(1000); frame.setTitle(""Loading images""); ImageLoadTest ilt = new ImageLoadTest(); frame.add(ilt); //update the screen //DOESN'T WORK. only works if I call frame.paintAll(frame.getGraphics()) ilt.repaint(); frame.repaint(); Thread.sleep(1000); frame.setTitle(""Setting background""); ilt.setBackground(Color.BLACK); //update the screen - DOESN'T WORK even if I call paintAll .. ilt.repaint(); frame.repaint(); //have to call one of these to get anything to display // ilt.paintComponent(frame.getGraphics()); //works frame.paintComponents(frame.getGraphics()); //works } //PRIVATE HELPER FUNCTIONS private String[] createImageFileNames(int count){ String[] fileNames = new String[count]; for(int i=0; i < count; i++) fileNames[i] = ""Cards"" + File.separator + (i+1) + "".bmp""; return fileNames; } } One major issue here is you are not updating your swing components on the Event Dispatch Thread (EDT). Try wrapping all the code in your main method in the following:  SwingUtilities.invokeLater(new Runnable() { public void run() { // swing code here... } }); Also: add your ImageLoadTest to the frame before setting the frame visible. This is based on a quick cursory read of the code -- I will read it further and see what else I can find. EDIT: Follow my original advice above and simplify your main method to look like the following and your paintComponent() will be called: public static void main(String args[]) throws InterruptedException { SwingUtilities.invokeLater(new Runnable() { public void run() { JFrame frame = new JFrame(""Empty JFrame""); frame.setSize(new Dimension(1000 500)); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); PaintComponentTest ilt = new PaintComponentTest(); frame.add(ilt); frame.setVisible(true); ilt.setBackground(Color.BLACK); } }); } Also I would read up on using timers to perform animation as well as general Swing event dispatching and how/when to override various paint methods. http://java.sun.com/products/jfc/tsc/articles/painting/ http://java.sun.com/docs/books/tutorial/uiswing/misc/timer.html http://java.sun.com/docs/books/tutorial/uiswing/concurrency/dispatch.html Thanks will try that. But must I really use setVisible at the end in order for it to work? The point with calling it early was to see how I should handle adding additional graphical elements at a later time. But the whole Runnable thing was new to me; I haven't seen that in any of the tutorials I have seen (like this one). Using [`java.awt.EventQueue.`]`invokeLater` makes it work for me. (Although that is probably just covering a bug. You should `revalidate` after `add` as described in the API docs for `add`.) I don't think that wrapping his main - method stuff in an invokeLater() would be a good idea. As he has several sleep()'s in there which would cause the EDT to hang If you really wanted sleeps then `javax.swing.Timer` would be the way to go. But the Swing code can't remain off the EDT. Please note I took his Thread.sleep() calls out of the main method and recommended reading up on timers to do animation. The main focus of my reply was to get the basics working with some reference links to more advanced topics such as animation threading etc. Also to Tom's point you don't need to call revalidate if you add the component before setting it visible as in my simplified example. In the end I feel like there are a lot of complex issues in this one question -- hopefully my response helps clear some up or point in the right direction.  One of the reasons the paintComponent() doesn't get invoked in the original code is because the component has a ""zero size"" and the RepaintManger is smart enough not to try and paint something with no size. The reason the reordering of the code works is because when you add the component to the frame and then make the frame visible the layout manager is invoked to layout the component. By default a frame uses a BorderLayout and by default a component is added to the center of the BorderLayout which happens give all the space available to the component so it gets painted. However you change the layout manager of the content pane to be a FlowLayout you would still have a problem because a FlowLayout respects the preferred size of the component which is zero. So what you really need to do is assign a preferred size to you your component so layout managers can do their job.  To make Tom Hawtin - tackline happy. I rewrote once again There are several things I changed (check the lines with the //new comment) Rewrote it completely Split into a clean new component file (ImageLoadTest.java) and a file to test it (Tester.java) Improvements on original posters code call constructor of parent in ImageLoadTest constructor (super()) provided second constructor to set list of images which component should display IMPORTANT: call to setPreferredSize() of component in constructor. If size isn't set swing of course won't paint your component. preferred size is based on max. width of all images and on sum of all image heights call to super.paintComponent(g) in overriden paintComponent() changed paintComponent to automatically base yOffset on height of images being drawn GUI initialization done on EDT as original code based on using sleep() to illustrate loading and loading of images could take a long time SwingWorker's are used worker waits then sets new title and then loads images on completion the worker in done() finally adds the component to the JFrame and displays it. Added component to content pane of JFrame as described in JFrame api. And as described in javadoc made necessary call to validate() on JFrame after calling add() as the JFrame is an already visible container whichs children changed. javdoc citation from validate() The validate method is used to cause a container to lay out its subcomponents again. It should be invoked when this container's subcomponents are modified (added to or removed from the container or layout-related information changed) after the container has been displayed. second worker just does some more waiting then sets background color to black used JPanel as baseclass for ImageLoadTest to fix setBackground() which I couldn't get to work with JComponent. So your main problems where that you didn't set the preferred size of the component and that you did not call validate() on the JFrame after adding something to the already visible container. This should work jpanelpaint/ImageLoadTest.java package jpanelpaint; import java.awt.Dimension; import java.awt.Graphics; import java.awt.Image; import javax.swing.JPanel; import java.util.List; public class ImageLoadTest extends JPanel { private List<Image> list; public ImageLoadTest() { super(); } public ImageLoadTest(List<Image> list) { this(); this.list = list; int height = 0; int width = 0; for (Image img : list) { height += img.getHeight(this); width = img.getWidth(this) > width ? img.getWidth(this) : width; setPreferredSize(new Dimension(width height)); } } @Override protected void paintComponent(Graphics g) { int yOffset=0; super.paintComponent(g); System.err.println(""ImageLoadTest.paintComponent()""); for(Image img : list) { g.drawImage(img 0 yOffset null); yOffset+=img.getHeight(this); } } } Tester.java import java.awt.Dimension; import java.awt.Color; import java.awt.Image; import java.io.File; import java.io.IOException; import javax.imageio.ImageIO; import javax.swing.JFrame; import javax.swing.SwingWorker; import javax.swing.SwingUtilities; import java.util.List; import java.util.ArrayList; import java.util.concurrent.ExecutionException; import jpanelpaint.ImageLoadTest; public class Tester { private JFrame frame; private ImageLoadTest ilt; private final int NUMBEROFFILES = 4; private List<Image> list; //will load the images SwingWorker worker = new SwingWorker<List<Image> Void>() { @Override public List<Image> doInBackground() throws InterruptedException { //sleep at start so user is able to see empty jframe Thread.sleep(1000); //let Event-Dispatch-Thread (EDT) handle this SwingUtilities.invokeLater(new Runnable() { public void run() { frame.setTitle(""Loading images""); } }); //sleep again so user is able to see loading has started Thread.sleep(1000); //loads the images and returns list<image> return loadImages(); } @Override public void done() { //this is run on the EDT anyway try { //get result from doInBackground list = get(); frame.setTitle(""Done loading images""); ilt = new ImageLoadTest(list); frame.getContentPane().add(ilt); frame.getContentPane().validate(); //start second worker of background stuff worker2.execute(); } catch (InterruptedException ignore) {} catch (ExecutionException e) { String why = null; Throwable cause = e.getCause(); if (cause != null) { why = cause.getMessage(); } else { why = e.getMessage(); } System.err.println(""Error retrieving file: "" + why); } } }; //just delay a little then set background SwingWorker worker2 = new SwingWorker<Object Void>() { @Override public List<Image> doInBackground() throws InterruptedException { Thread.sleep(1000); SwingUtilities.invokeLater(new Runnable() { public void run() { frame.setTitle(""Setting background""); } }); Thread.sleep(1000); return null; } @Override public void done() { ilt.setBackground(Color.BLACK); frame.setTitle(""Done!""); } }; public static void main(String args[]) { new Tester(); } public Tester() { //setupGUI SwingUtilities.invokeLater(new Runnable() { public void run() { frame = new JFrame(""Empty JFrame""); frame.setSize(new Dimension(1000 500)); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } }); //start the swingworker which loads the images worker.execute(); } //create image names private String[] createImageFileNames(int count){ String[] fileNames = new String[count]; for(int i=0; i < count; i++) fileNames[i] = ""Cards"" + File.separator + (i+1) + "".bmp""; return fileNames; } //load images private List<Image> loadImages() { List<Image> tmpA = new ArrayList<Image>(); try { for(String name : createImageFileNames(NUMBEROFFILES)){ System.err.println(name); tmpA.add(ImageIO.read(new File(name))); } } catch (IOException e) { } return tmpA; } } Thanks for pointing out the obvious. 8| Instead of upvoting me because I solved the actual problems of the question poster (images + background not showing) you down vote me for something another poster already explained. I thought atleast that bit oligofren could do/integrate into my solution by himself Wow jitter that's a lot of work for fixing a mere proof-of-concept code! A bit overkill perhaps but a big THANK YOU anyway. I used your code to fix the main issues in the original code: 1) not calling validate() after an add() operation 2) not setting the preferred size of the component. 3) not calling super.paintComponent() when overriding it (this made the setBackground() call not work. After doing that everything works as intended. editing the original post to reflect this. You are still doing Swing stuff off the EDT!  These were the main problems with the original code that caused it not to work: not calling validate() after an add() operation not setting the preferred size of the component. not calling super.paintComponent() when overriding it (this made the setBackground() call not work) I needed to inherit from JPanel in order for it to get painted. Neither Component nor JComponent was sufficient for the setBackground() call to work even when fixing point 3. Having done the above it really didn't matter if calling the method paintComponent or paint both seemed to work as long as I remembered to call the super constructor at the start. This info was assembled from what @jitter @tackline and @camickr wrote so big kudos! P.S. No idea if answering your own question is considered bad form but since the information I needed was assembled from several answers I thought the best way was upmodding the other answers and writing a sum up like this.  I recommend reading the first couple of chapters of ""Filthy Rich Clients"". I had been using Swing for years but only after reading this book did I finally fully understand exactly how Java's painting mechanism works. That was a good tip. I actually read it later on. Fantastic book albeit GUI works seems a thing of the late nineties in this world of the web."
627,A,Resize JScrollPane client without scrollbars rolling I have a JScrollpane which contains a scrollable client that changes its size dynamically while using the application. I want the JScrollPane to be aware of the changes without moving the viewport when the client size changes. To clarify what I mean: Refer to the Java Webstart example ScrollDemo2 from the article How to use scroll panes by Sun. When clicking at the bottom of the window a circle appears partly outside the window and the scrollbars move. It's the latter behavior I want to avoid. My guess is that it's just a matter of setting a simple flag in one of the many components that are involved in a scroll pane solution but I just can't find where it is. Does anyone know? I managed to solve this problem by overriding the standard behavior of the viewport in my JScrollPane. This might be a solution that is not suitable for all but in my GUI this works like a charm. JScrollPane pane = new JScrollPane(); pane.setViewport( new JViewport(){ /** * An empty override implementation to prevent undesired scrolling on * size changes of the client. */ @Override public void scrollRectToVisible(Rectangle rect){} });  I would try something like: Point p = scrollPane.getViewport().getViewportPosition(); revalidate(); scrollPane.getViewport().setViewportPosition(p); You may need to wrap the last line of code in a SwingUtilities.invokeLater. If that doesn't work then maybe you can disable/enable the viewport before and after the revalidate()? I see that the ScrollDemo2 was an unfortunate example. Just as you point out the behavior is explicitly set with the scrollRectToVisible() method. Unfortunately it's very hard to provide an SSCCEE for my problem because it's part of a pretty big and complex GUI. Likely the problem is because of something stupid I do in one of the many nested component classes. However your post kinda pointed me in the right direction anyway and helped me to solve the problem. I'm posting the solution below. This could possibly work under certain circumstances but the problem in my case is that the JScrollPane the class that contains my JScrollPane isn't aware of the size changes in the client. This means that I can't reach the scrollpane from where the changes occur. At least not without searching for it upwards in the hierarchy which I want to avoid. Moreover I really think that there is a simple and straightforward solution to this but that I just don't know about it :). In the example you refer to the solution is to simply remove the scrollRectToVisible() method. Otherwise searching upwards is easy because the panel will be added to the viewport so you just need to get the parent of the panel you are changing the preferred size of. I have noticed that when you add a JTextArea to a panel on a scrollpane the viewport tends to scroll to the text area. Unless you post a SSCCE showing the real problem I don't know how else we can help.
628,A,"mouse moved -crosshair cursor I developed a program to draw polygon triangles. The triangles were drawn using mouse drag. The coordinate of the triangles were stored in array list. Every times the mouse cursor mouse over on the existing drawn triangles(within the area of triangle) the mouse cursor should turns to ""CROSSHAIR_CURSOR"" however this were not happened. Help :-(  ... public class DrawingBoardWithMatrix extends JFrame { public static void main(String[] args) { new DrawingBoardWithMatrix(); } public DrawingBoardWithMatrix(){ this.add(new PaintSurface() BorderLayout.CENTER); ... } private class PaintSurface extends JComponent { java.util.List<Polygon> triangles = new LinkedList<Polygon>(); Point startDrag endDrag midPoint; Polygon triangle; public PaintSurface() { ... this.addMouseListener(new MouseAdapter() { public void mousePressed(MouseEvent e) { startDrag = new Point(e.getX() e.getY()); endDrag = startDrag; repaint(); }//end mousePressed public void mouseReleased(MouseEvent e) { if (startDrag.x > endDrag.x) midPoint = new Point((endDrag.x +(Math.abs(startDrag.x - endDrag.x)/2))e.getY()); else midPoint = new Point((endDrag.x -(Math.abs(startDrag.x - endDrag.x)/2))e.getY()); int[] xs = { startDrag.x endDrag.x midPoint.x }; int[] ys = { startDrag.y startDrag.y midPoint.y }; triangles.add( new Polygon(xs ys 3)); startDrag = null; endDrag = null; repaint(); }//end mouseReleased });//end addMouseListener this.addMouseMotionListener(new MouseMotionAdapter() { public void mouseDragged(MouseEvent e) { endDrag = new Point(e.getX() e.getY()); repaint(); }//end mouseDragged });//end this.addMouseMotionListener }//end paintSurface //THIS CODE DOESNT WORK - AND I AM STUCK :-( public void mouseMoved(MouseEvent e) { startDrag = new Point(e.getX() e.getY()); if (triangles.contains(startDrag)) setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR)); else setCursor(Cursor.getDefaultCursor()); }// end mouseMoved private void paintBackground(Graphics2D g2){ ... } public void paint(Graphics g) { ... } }//end private class PaintSurface }//end public class DrawingBoardMatrix Do you see the mouseMoved method being invoked at all? The way this is written the mouseMoved method is a member of PaintSurface but PaintSurface is not a MouseMotionListener. Implementing 'MouseMotionListener' will force it to implement mouseMoved and mouseDragged. After you have done that you can add your PaintSurface to itself as a MouseMotionListener. Alternatively you could move the mouseMoved method inside the MouseMotionAdapter anonymous class that you have already defined: //paintSurface constructor .... this.addMouseMotionListener(new MouseMotionAdapter() { public void mouseDragged(MouseEvent e) { endDrag = new Point(e.getX() e.getY()); repaint(); }//end mouseDragged //TRY THIS CODE :-) public void mouseMoved(MouseEvent e) { startDrag = new Point(e.getX() e.getY()); if (triangles.contains(startDrag)) setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR)); else setCursor(Cursor.getDefaultCursor()); }// end mouseMoved });//end this.addMouseMotionListener }//end paintSurface EDIT (in response to your comment): It would appear that your conditional if (triangles.contains(startDrag)) depends on the List<Polygon> finding a Point that considers itself equal to the passed in Point. As far as I can tell from looking at the code in Polygon(it doesnt override the equals method so it takes the implementation from Object) you will not be able to perform this test 'successfully.' You will need to iterate over your Polygons in your triangles collection and perform a contains operation on each in turn. EDIT 2: You are probably over-thinking this a bit. In order to implement the suggestion 'to iterate over your Polygons in your triangles collection...' you could do something like the following:  public void mouseMoved(MouseEvent e) { startDrag = new Point(e.getX() e.getY()); Cursor cursor = Cursor.getDefaultCursor(); //you have a List<Polygon> so you can use this enhanced for loop for (Polygon p : triangles) { if (p.contains(startDrag)) {//Polygon has a 'contains(Point)' method cursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR); break; //you've found a hit break from the loop } } setCursor(cursor); }// end mouseMoved You could also consider not setting the cursor with every mouse movement. For that you can put a test in to check the type of the current cursor and the type of the cursor that your mouse movement is intending to set and only set it if there is a change:  if (cursor.getType() != getCursor().getType()) { setCursor(cursor); } Thanks akf. I have changed the placement of the method mouseMoved in the addMouseMotionListener however it is still not working :-( Jessy I have updated my answer take a look. Thanks again akf. But it sounds complicated to me. I will try to modify the code. Help :-( I cannot get the right code. I have updated once again let me know if there are any concerns. Thanks a million akf. My problem has been solved with your code. You are brilliant!! :-)"
629,A,"Footer row in a JTable What is the best way to put a footer row into a JTable? Does anyone have any sample code to do this? The only approach I've thought of so far is to put a special row into the table model that always get sorted to the bottom. Here is what I ended up with: JTable mainTable = new JTable(mainTableModel); JTable footerTable = new JTable(footerModel); footerTable.setColumnModel(mainTable.getColumnModel()); // Disable selection in the footer. Otherwise you can select the footer row // along with a row in the table and that can look quite strange. footerTable.setRowSelectionAllowed(false); footerTable.setColumnSelectionAllowed(false); JPanel tablePanel = new JPanel(); BoxLayout boxLayout = new BoxLayout(tablePanel BoxLayout.Y_AXIS); tablePanel.setLayout(boxLayout); tablePanel.add(mainTable.getTableHeader()); // This seems like a bit of a WTF tablePanel.add(mainTable); tablePanel.add(footerTable); Sorting works fine but selecting the footer row is a bit strange. The only time I have done this I just added a row in the model like so:  @Override public int getRowCount() { return _tableContents.size() + 1; } _tableContents is of course the actual data behind my model. You'll have to be aware of the extra row in the model of course (in such calls as setValueAt(...)) Good luck. The only problem with that approach is sorting. I need the footer row to stay at the bottom of the table.  Here is another solution mentioned in the java bug database A solution that works for me is painting a border for the viewport (your JTable must be inside a JScrollPane) ....  Looks like this project has a component called JideScrollPane which advertises support for a row footer. I haven't tried it myself but it sounds like it does exactly what you want! The website also has a demo app where you can see it in action and it that looks pretty good. Note that it seems a lot of the their stuff you have to pay for but their JideScrollPane looks to be free and open source.  I guess the best approach (but certainly not the easiest) would be to take a look at the source code for the JTableHeader Component see how it works and then create your own JTableFooter Component. You can re-use the JTableHeader UI Delegate for the footer I think the main differences would be in the getHeaderRect() method where it determines the bounds of a given column header tile.  There is an ancient site that shows some examples of what one can do with some of the original Swing components. They provide some very interesting ideas one of which the Fixed Row Example on page six of the JTable examples has something to it that may be of interest. The designer put together 2 tables one of which is fixed to the bottom of the viewport. Excellent site! your first link is broken I fixed the link thanks for that  Try using a second JTable that uses the same column model as your data table and add your footer data to that table. Add the second (footer) table under your original table. JTable footer = new JTable(model table.getColumnModel()); panel.add(BorderLayout.CENTER table); panel.add(BorderLayout.SOUTH footer); This post helps sync the two tables http://stackoverflow.com/questions/2666758/problem-with-resizing-columns-in-a-double-jtable This basically looks like a good solution but it seems to react very oddly when you try to resize the columns.  You could try implementing your own TableCellRenderer that replaces the rendered content of the last visible row with your footer. However this wouldn't be fixed at the bottom of the table it will likely shift up and down as you scroll.  Using 2 tables below each-other is a good approach. If you want to be able to resize/move/remove the colums key is NOT to reuse the same columnModel between the tables. Have a listener do the resizing. See example: package snippet; import java.awt.BorderLayout; import java.awt.Dimension; import java.awt.event.WindowAdapter; import java.awt.event.WindowEvent; import javax.swing.JFrame; import javax.swing.JScrollPane; import javax.swing.JTable; import javax.swing.ListSelectionModel; import javax.swing.SwingUtilities; import javax.swing.event.ChangeEvent; import javax.swing.event.ListSelectionEvent; import javax.swing.event.TableColumnModelEvent; import javax.swing.event.TableColumnModelListener; import javax.swing.table.TableColumnModel; public class FixedRow2Tables extends JFrame { private static final long serialVersionUID = 4676303089799270571L; Object[][] data; Object[] column; JTable footerTable table; public FixedRow2Tables() { super(""Fixed Row Example""); Object[][] mainData = new Object[][] { { ""a"" """" """" """" """" """" } { """" ""b"" """" """" """" """" } { """" """" ""c"" """" """" """" } { """" """" """" ""d"" """" """" } { """" """" """" """" ""e"" """" } { """" """" """" """" """" ""f"" } }; Object[][] summaryData = { { ""fixed1"" """" """" """" """" """" } { ""fixed2"" """" """" """" """" """" } }; column = new Object[] { ""A"" ""B"" ""C"" ""D"" ""E"" ""F"" }; table = new JTable(mainData column); table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); footerTable = new JTable(summaryData column); footerTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); footerTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); footerTable.setTableHeader(null); // footerTable.setColumnModel(table.getColumnModel()); table.getColumnModel().addColumnModelListener( new TableColumnModelListener() { @Override public void columnSelectionChanged(ListSelectionEvent e) { } @Override public void columnRemoved(TableColumnModelEvent e) { } @Override public void columnMoved(TableColumnModelEvent e) { } @Override public void columnMarginChanged(ChangeEvent e) { final TableColumnModel tableColumnModel = table .getColumnModel(); TableColumnModel footerColumnModel = footerTable .getColumnModel(); for (int i = 0; i < tableColumnModel.getColumnCount(); i++) { int w = tableColumnModel.getColumn(i).getWidth(); footerColumnModel.getColumn(i).setMinWidth(w); footerColumnModel.getColumn(i).setMaxWidth(w); // footerColumnModel.getColumn(i).setPreferredWidth(w); } footerTable.doLayout(); footerTable.repaint(); repaint(); } @Override public void columnAdded(TableColumnModelEvent e) { } }); JScrollPane scroll = new JScrollPane(table); scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); scroll.setPreferredSize(new Dimension(400 100)); getContentPane().add(scroll BorderLayout.CENTER); getContentPane().add(footerTable BorderLayout.SOUTH); } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { FixedRow2Tables frame = new FixedRow2Tables(); frame.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { System.exit(0); } }); frame.pack(); frame.setVisible(true); } }); } } +1 without `table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);`"
630,A,"Java GUI Problems I'm designing a really simple GUI but without any luck. Basically the outer layout has two columns which is a splitter pane (this is for an IRC client I'm writing). On the left-hand side is the server/channel/user tree and on the right is the chat pane. Now I break this down so on the right-hand side there's the output pane at the top and a single-lined input box at the bottom. This is the code for creating the GUI on a whole (this is just a snippet) ChatModel cm = new ChatModel(); ChatView cv = new ChatView(cm); treeViewChatSplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT serverTreeView cv); treeViewChatSplitPane.setSize(500 500); treeViewChatSplitPane.setBorder(null); treeViewChatSplitPane.setDividerSize(3); this.getContentPane().add(treeViewChatSplitPane); this.setSize(500 500); The ChatView constructor has this in it (it extends java.awt.Container) this.model = model; this.setLayout(new BorderLayout()); mainTextArea = new JTextArea(); mainTextArea.setLineWrap(true); mainTextArea.setBackground(new Color(255 255 255)); inputField = new JTextField(); this.add(mainTextArea BorderLayout.CENTER); this.add(inputField BorderLayout.PAGE_END); Now it looks fine initially but the problem I'm having with it is that you can move the splitter to the left but not to the right. In fact if you move it left you can no longer move it right. I did have it working earlier but the implementation wasn't as good and I've forgotten what I had done. Any ideas? I can't see why this wouldn't work. Why do you put ""this"" in front of method calls? @Steve: That's a common practice that has benefits and disadvantages; there's an SO question about it. @Steve: I do it usually to find out what properties/methods I have available in the local scope. It's also explicit to tell me what I'm dealing with. I usually remove them in release code. It may be related with minimunSize of the right component. In the following example you can just move the separator to the left. public static void main(String[] args) { JLabel barLabel = new JLabel(""bar""); JLabel fooLabel = new JLabel(""foo""); barLabel.setMinimumSize(new Dimension(150150)); fooLabel.setPreferredSize(new Dimension(5050)); JSplitPane treeViewChatSplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT fooLabel barLabel); treeViewChatSplitPane.setSize(500 500); treeViewChatSplitPane.setBorder(null); treeViewChatSplitPane.setDividerSize(3); JFrame frame = new JFrame(); frame.add(treeViewChatSplitPane BorderLayout.CENTER); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(200200); frame.setVisible(true); }  In any place do you set minimum size for the ChatView? If so isn't this minimum equals to the frame size ( 500 x 500 ) ? It is kind of hard to troubleshot with the information provided but the following advice have ALWAYS worked for me ( and for the people who use it ) Create the simplest frame that could possible work and add a SplitPane with two buttons. Resize in there. In everything goes ok process replacing one of your components. Then the other. Detect which one is causing the strange behavior. On that one start doing the same replace it for the minimum component you can think of ( replace it with a JPanel for instance ) BTW probably it would be better to replace java.awt.Container with javax.swing.JComponent The idea is to start from the simplest thing that could possible work and evolve from there. Most of the times the problem is in some silly property we set and by cleaning up everything it came up. It should take less than 1 hr. for this.  I'm not sure what is exactly causing your problem but from vague memory I can tell you that JSplitPane goes bonkers if you don't set preferred sizes and minimum sizes for each of your panes. I would suggest doing that just to see if it works better. Here is some stuff from the Java tutorial on dividers.  If I remember correctly JSplitPanes always respect the minimum size of their components. Try explicitly setting the minimum size of the ChatView to (00) and see if that helps. If so you can then look at each of the components inside it to see which is causing the problem. I think I just fell in love with you. You star. Umm... excuse me while I move just a little further away. ;)  If both components have sensible preferred and minimum sizes and you're still seeing strange behavior you may need to call setResizeWeight() on the JSplitPane. Note BTW that programatically setting the divider location (setDividerLocation()) pretty much never works."
631,A,How to make the background of a JCheckBox transparent? Is there an easy way to make the background of a JCheckBox transparent? The box itself and the text should both be ordinary colored. Thanks in advance setOpaque(false); That line will make the background of the JCheckBox not be drawn. It will be the color of whatever Component it is on. If you are subclassing a JCheckBox just place that line in the constructor. Otherwise call it on an instance of the JCheckBox.
632,A,"Centering dialog using JOptionPane.showMessageDialog I’ve always been using code similar to the following to display dialogs: JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(this) … yada However I’m now thinking that this is ""more correct"": JOptionPane.showMessageDialog(getRootPane() … yada What do people prefer / recommend? Neither one is ""more correct"" - it just depends on what effect you want. From the JOptionPane JavaDocs - parentComponent : Defines the Component that is to be the parent of this dialog box. It is used in two ways: the Frame that contains it is used as the Frame parent for the dialog box and its screen coordinates are used in the placement of the dialog box. In general the dialog box is placed just below the component. This parameter may be null in which case a default Frame is used as the parent and the dialog will be centered on the screen (depending on the L&F). In your case you want the dialog to be centered on a frame - JOptionPane.getFrameForComponent(component) or SwingUtilities.getWindowAncestor(component) work from any component; getRootPane() only works from a RootPaneContainer (i.e. probably a JFrame) and you might as well just use ""this"" in that context. I didn't realise SwingUtilities has that method - That may be what I want as I always want to center relative to the window containing the component that's displaying the dialog. Presumably this is slightly more generic than getRootPane() as it will handle the situation where the ""containing"" Window is not a root pane container.  if you're extending JFrame or JDialog for instance you can use just this as the parameter: JOptionPane.showMessageDialog(this ...); Unfortunately this will not do what I want: Assuming this is the Component invoking the JOptionPane.showXXX call this will center the dialog relative to the component not the containing frame or dialog."
633,A,"Java Swing packs the window wrong I'm making a Scorched Earth like game in Java (for my exam project :D) but I have this problem. I'm drawing a window (JFrame) setting layout to BorderLayout applying an extended JPanel and packing the window but after it has been packed it's showing some extended white space at the left and bottom border. This is my main class: public class Main { public static void main(String[] args) { javax.swing.JFrame frame = new javax.swing.JFrame(""game title""); panel p = new panel(new java.awt.Dimension(512 512)); frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE); frame.getContentPane().setLayout(new java.awt.BorderLayout()); frame.getContentPane().add(p java.awt.BorderLayout.CENTER); frame.pack(); frame.setResizable(false); frame.setVisible(true); } } panel is my JPanel class which in the constructor is setting it's preferred size to the argument (512x512). I've tested this on both Windows and Linux and the error it at both places and the size of the white gap differs from OS to OS. This is my panel class: class panel extends javax.swing.JPanel{ panel(java.awt.Dimension size){ setPreferredSize(size); } public void paint(java.awt.Graphics g){ g.setColor(java.awt.Color.BLUE); g.fillRect(0 0 512 512); } } Please help! You didn't tell us about your panel class. What does it do? What does the constructor argument do? Can you reduce the problem to a SSCCE? http://www.sscce.org/ I don't see your problem with the provided Panel class. Also you repeat yourself by hard-coding the preferred size of the panel in two places. Don't do that! I have a size variable with the size of the window which I'm using to set the size of the rect just removed it here for simplicity. same problem with windows 7! I solved the problem by removing setResizable(false); Thanks for the help anyways! I had the same problem and solved it by removing setResizable method also. But is there another way to prevent windows from being resized?  I've looked through the code of setResizable() and figured out that everything's right. Just put this.setResizable(false) before this.pack().  saua This isn't what you asked but it's important never the less... You don't override paint in swing; instead you override paintComponent. See Sun's ""Custom Painting"" tutorial: http://java.sun.com/docs/books/tutorial/uiswing/painting/ In fact I strongly suggest (considering your choice of project) that you go through the whole Swing tutorial. It takes ""a while"" but it's worth the time. Cheers. Keith. Hy Keith I wasn't the OP that was Xunil ;-)  I've tried to reproduce this without your panel class (which needs a better name and should at least be named using CamelCase): import javax.swing.*; public class Main { public static void main(String[] args) { JFrame frame = new JFrame(""game title""); JPanel p = new JPanel(); p.setPreferredSize(new java.awt.Dimension(512 512)); p.setBackground(java.awt.Color.BLUE); frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE); frame.getContentPane().setLayout(new java.awt.BorderLayout()); frame.getContentPane().add(p java.awt.BorderLayout.CENTER); frame.pack(); frame.setResizable(false); frame.setVisible(true); } } This produces a window with a blue 512x512 panel in it and no differently-colored border. So the problem must be with your panel class. When I'm doing that I get a all blue window but at a size of 522x522... What is 522x522? The Window? Or the panel? My panel is exactly 512x512 while the Window is obviously a bit bigger than that. It's the panel that's 522x522"
634,A,Continuous Tooltip Update in Swing I have a custom swing component that is implemented similar to a JTree. It has a ComponentUI that renders an object list using a CellRenderer. The tooltip now correctly shows for each rendered cell however it doesn't track the mouse as I would like. For instance if I have boxes layed out like this;  [ box A ] [ box B ] [ box C ] [ box D ] If i drag the mouse across these boxes I will see the tooltip for box A where the mouse crosses the box A boundary. As I continue to move the mouse the tooltip will not track the pointer. When I leave the box the tooltip will appropriately disappear. When i cross box B the same thing happens. My guess is that the tooltip is only updating the view when the contents of getToolTipText(MouseEvent event) change. The behavior I would like is to have the tooltip track the pointer position regardless of the contents returned by getToolTipText. A quick hack is to add and remove an empty space based on an even/odd number of calls to the method. This works but bleh it can't be the way I am supposed to do it. I'm looking for a graceful non-hack way of solving this problem. I'm hoping someone knows of some arcane flag somewhere that forces the tooltip to follow the mouse regardless of mouse content. I tried to use getToolTipLocation to set tooltip's position when pointing on elements of a JList but it didn't work. After inserting breakpoints it came out that in such code: public class DefinitionListCellRenderer extends JTextArea implements ListCellRenderer ComponentListener { ... @Override public Point getToolTipLocation(MouseEvent event) { Point pt = new Point(event.getX() event.getY()); return pt; } ... } getToolTipLocation isn't even called!! Could you please say why? DefinitionListCellRenderer is a single item on a list (has getListCellRendererComponent() ). Check to make sure the component is registered with the tooltip provider: ToolTipManager.sharedInstance().registerComponent(component);  Override getToolTipLocation in your cell renderer. I actually made it part of the component and not the cell renderer. The behavior seems more appropriate there compared to the cell. I'm glad it worked! Ahh Sweet!!! thanks. I knew there had to be a simple way it was right in front of me the whole time.
635,A,Post a KeyEvent to the focused component What is the best way to post a Button Press to a component? I tried using the Robot class and it works normally. However this class has some problems under some Linux platforms so I wonder what is the best Java-only way to post an event to a component. In this particular case I want to post backspace events to a JTextField when I press a button. EDIT: I've used the Robot class after all. I fixed the problem that prevented this class from working correctly under Linux There's also this approach to avoid relaying in the robot: import java.awt.*; import java.awt.event.KeyEvent; import javax.swing.*; public class KeyEventTest { public static void main(String[] args) { final JTextField textField = new JTextField(8); textField.setFont(textField.getFont().deriveFont(18f)); JPanel panel = new JPanel(new GridBagLayout()); panel.add(textField new GridBagConstraints()); JFrame f = new JFrame(); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.getContentPane().add(panel); f.setSize(300160); f.setLocation(200200); f.setVisible(true); new Thread(new Runnable() { public void run() { Toolkit toolkit = Toolkit.getDefaultToolkit(); EventQueue queue = toolkit.getSystemEventQueue(); try { Thread.sleep(1500); } catch(InterruptedException ie) { } char newChar = 'x'; queue.postEvent(new KeyEvent(textField KeyEvent.KEY_TYPED System.currentTimeMillis() 0 KeyEvent.VK_UNDEFINED newChar)); try { Thread.sleep(1500); } catch(InterruptedException ie) { } queue.postEvent(new KeyEvent(textField KeyEvent.KEY_PRESSED System.currentTimeMillis() 0 KeyEvent.VK_BACK_SPACE KeyEvent.CHAR_UNDEFINED)); } }).start(); } } I must warn you that if the component loses the focus the generated events will be lost! D:  You can find example of such key post event like in this class Those posts are using the dispatchEvent() function public void mousePressed(MouseEvent event) { KeyboardButton key = getKey(event.getX() event.getY()); [...] KeyEvent ke; Component source = Component.getFocusComponent(); lastPressed = key; lastSource = source; key.setPressed(true); if(source != null) { if((key == k_accent || key == k_circle) && (lastKey instanceof KeyboardButtonTextJapanese)) { int accent = ((KeyboardButtonTextJapanese)lastKey).getAccent(); if(accent >= 1 && key == k_accent) { /* ** First send a backspace to delete the previous character then send the character with the accent. */ source.dispatchEvent(new KeyEvent(source KeyEvent.KEY_PRESSED System.currentTimeMillis() 0 k_backspace.getKeyEvent() k_backspace.getKeyChar())); source.dispatchEvent(new KeyEvent(source KeyEvent.KEY_TYPED System.currentTimeMillis() 0 k_backspace.getKeyEvent() k_backspace.getKeyChar())); That is a nice library you pointed me to. I've been ripping some pages off their book ;)  I ended up using the robot class which was the easiest way after all. The problem is that in the specific Linux distro I was using the instantiation of the Robot class would hang the Virtual Machine. Looking at the log files I found out that java was trying to load a DLL that wasn't available: libXi.so.6 After adding this library to the distro I was able to continue
636,A,"Printing from swing on Mac & Windows - Where is postscript support? I'm printing a complicated swing application UI to a physical printer via an Airport. I've got Mac & windows machines both printing to the same printer. Printing from the Mac looks great. Printing from windows looks far from great - everything is very pixelated including fonts and graph lines. Some digging around reveals that the available PrintServices are different for the different platforms. DocFlavor flavor = DocFlavor.INPUT_STREAM.POSTSCRIPT; PrintRequestAttributeSet attrs = new HashPrintRequestAttributeSet(); PrintServiceLookup.lookupPrintServices(flavor attrs); When executed from the mac the above returns a single-element array. From windows it returns an empty array. This leads me to believe that windows is sending a 72 DPI image to the printer instead of postscript data. Is this a difference in the mac & windows JVM implementations? Is there any workaround to get printing on Windows working? I realize I could generate my own 350dpi rasterized image and send that to the printer but these things go into the hundreds of pages I really would like to avoid that route if possible. Think I got an answer: The java.awt.printerjob system property was set to sun.awt.windows.WPrinterJob. Apparently this is a handy PrinterJob subclass if you like blocky pixelated output on your printer. Instead I get an instance of sun.print.PSPrinterJob if it's available like so: PrinterJob printerJob = null; try { if (System.getProperty(""java.awt.printerjob"").equals(""sun.awt.windows.WPrinterJob"")) { // WPrinterJob sends crappy GIF images to the printer and everything looks all blocky // try to get an instance of a PSPrinterJob instead printerJob = (PrinterJob) Class.forName(""sun.print.PSPrinterJob"").newInstance(); } } catch (Throwable e1) { log.log(Level.SEVERE ""Could not instaniate sun.print.PSPrinterJob"" e1); } if (printerJob == null) { printerJob = PrinterJob.getPrinterJob(); }"
637,A,"Do I have to explicitly call System.exit() in a Webstart application? Recently I converted a Swing application to Webstart. The process was pretty straightforward but I found that after I close all windows my application's JVM did not terminate. The thread dump showed that there are a couple of non-daemon threads notably Swing's EDT AWT and a couple of websart related threads. The actual strategy used is that each window increments a counter when it is created and decrements one when it is closed. The default close operation is DISPOSE_ON_CLOSE. Wen the counter reaches zero I stop all threadpools and release all JNI resources. When I launched the application from a bat file (same JARs) it terminated fine when all windows were closed so I figured that the problem has something to do with Webstart. Now the questions: Can anybody tell me what exactly is happening? Why does Webstart leave zombie JVMs? Is there a way to release the Webstart resources explicitly without halting the JVM? I've always had the opinion that calling System.exit() encourages the sloppy practice of not releasing your resources and relying on the OS to clean up after you (which can lead to nasty surprises if you reuse the code later)... am I missing something? See also the followup question for detecting whether the app has been launched by Webstart. Consider attaching with jconsole and get a look at what the JVM is doing.  Because of bugs in WebStart yes. WebStart starts up a ""secure thread"" for it's own purposes that interacts with the EDT. This SecureThread prevents the automatic termination of the Java process one would expect when all windows and AWT resources are disposed. For more information see http://www.pushing-pixels.org/?p=232 Thanks the link explains everything I wanted to know. Is there any bug parade ticket that I can vote on? (if yes please post the reply as a comment to the main question)  I experience the same issue with web start. If i turn off java console the process does not hang up. Any known bug id from Sun?  Webstart starts the Console window (you may be able to disable that). The console window is used to see stdout/err of the webstart process as well as rudimentary log/debug but has the side effect of created a top-level AWT/Swing window. Since the AWT/EDT only ends when the LAST window is disposed the console window is holding up your application. You should probably call System.exit() to be 100% sure your application exits (unless you can gurantee a certain client configuration webstart console turned off) nope. the default configuration is no console window. no windows on the screen whatsoever (empty taskbar alt+esc does not do anything)  The AWT EDT is usually the culprit. For some years now it has had some logic to shutdown when there are no undisposed windows. However there are recurrent problems with leaks including within the implementation of AWT and Swing. Therefore I strongly suggest using System.exit in production releases (you might possibly want to leave it out for some testing to detect leaks). The WebStart thread should all be daemon when there are no system windows (console javax.jnlp services and other dialogs) showing. Can you give an example for a leak within Swing (i.e. allocating resource which can not be released using the public API)?"
638,A,Java window buffering keystrokes until the user clicks with the mouse Here's the basic idea: There is a java window (main) that opens another java window (child). When the child is created part of the initialization sets the focus in the appropriate text field in the child window: childTextField.requestFocusInWindow(); childTextField.setCaretPosition(0); The child is generally opened through a serious of keystrokes via a command line type interface. When the window is requested 90%ish of the time the focus correctly goes to the child window text field and the user can type in the box. If the command to open the child is sent off (with a press of the enter key) and the user immediately starts typing before the new window is created the text is correctly buffered and appears in the new textfield after the window opens. However every once in a while when the user requests the child window to open and then starts typing their text does NOT appear in the text field. Only after they click with the mouse in the field does the text they have typed appear. It's like it's being stored somewhere and doesn't come out until they click. The real frustrating thing here is that I can't seem to reliably reproduce the issue at all. It definitely happens but not regularly enough to debug nicely. There is of course all kinds of other mojo going on behind the scenes including communication with a server app but I'm not convinced it's related. Any thoughts or ideas would be very much appreciated. I had an issue similar to this. try adding this after your init() EventQueue.invokeLater(new Runnable() { public void run() { childtextfield.requestFocus(); childTextField.setCaretPosition(0); } }); It's worked for me.  The event queue thread being blocked sounds VERY likely. Unfortunately I'm on windows so no dtrace for me but I'm definitely going to explore that more thoroughly. Of course anybody else who might have other ideas would be very welcome.  It turns out the answer wasn't all that interesting. After you mentioned the event queue I dug into the code a bit more. It turns out the application has a custom keyboard focus manager in place. It would do things like buffer the text typed while waiting for a child window to open. In the code to open the child window it calls a function (via a listener) that flushes the buffer and thus displays it to the screen. In that 10% or less of the time that doesn't happen. However the same flush function is also attached to mouse clicks that happen inside of text fields. So you guessed it it didn't flush with the opening of the window but did when the mouse was clicked. Thanks for the help...even though it wasn't exactly what the solution was it definitely pointed me in the right direction. Now I just have to figure out why the flush function isn't always getting called when the window opens... okay that one almost certainly *is* a bug. I'd put a trace point or a call to logger.info or something like it into the focus manager as early as possible see what the event really is and walk through the code paths. Odds on that there's an unexpected case and a code path that doesn't flush.  On first look that sounds like it might be a bug in the implementation; the key should be in the same event queue as the mouse events. There's another issue possible though: the event queue is running in a thread separate from the program main; without knowing what's going on in the rest of the application it's tempting to wonder if the event queue thread is getting blocked somehow. Actually the difficulty you're having with reproducing it makes that sound even more likely. Debugging that case will require a little craft and trickery. If you're on Solaris 10 or OS/X I'd recommend using dtrace; you can easily put a trace point on the event queue. In not you might want to have another thread that periodically drops something on the event queue.
639,A,Is there a simple way to remove a TimeSeries from a displayed JFreeChart Chart? I have a Swing application which uses JFreeChart to display one of a series of queries. Some of these queries have a composite TimeSeries key. Each component of this key can contain a few values but when rendered makes a very noisy graph. I would like a simple way for the users to hide/show some of the TimeSeries in the displayed Chart component. I'm not quite sure what you mean but if you want to keep item shapes apart have a look at the AnalysisXYItemRenderer class (or corresponding). There's a transXDiff there that can be used for such calculations (such as accumulating the diff and only show plot shapes when that accumulated value reaches a limit). It was a couple of years ago I did this so things might have changed in JFreeChart since then.  It looks like the setSeriesVisible method of AbstractRenderer is what you're looking for. Although this forum discussion suggests that it may only work in the latest release but there's a work around for earlier releases. The setSeriesVisible method was not one hundred percent of my answer but you came close. I also needed to query the displayed chart to find out which series contained the key or key components I needed to hide.
640,A,"Save JFrame location in multi-display environment I want to store a JFrame's location (bounds extendedState) when the user closes it. However when the user moves the frame onto the 2nd screen and maximizes it how can I store that information? My naive (and single display) implementation is like this:  void saveFrame(JFrame frame) throws IOException { Properties props = new Properties(); props.setProperty(""State"" String.valueOf(frame.getExtendedState())); props.setProperty(""X"" String.valueOf(frame.getX())); props.setProperty(""Y"" String.valueOf(frame.getY())); props.setProperty(""W"" String.valueOf(frame.getWidth())); props.setProperty(""H"" String.valueOf(frame.getHeight())); props.storeToXML(new FileOutputStream(""config.xml"") null); } void loadFrame(JFrame frame) throws IOException { Properties props = new Properties(); props.loadFromXML(new FileInputStream(""config.xml"")); int extendedState = Integer.parseInt(props.getProperty(""State"" String.valueOf(frame.getExtendedState()))); if (extendedState != JFrame.MAXIMIZED_BOTH) { frame.setBounds( Integer.parseInt(props.getProperty(""X"" String.valueOf(frame.getX()))) Integer.parseInt(props.getProperty(""Y"" String.valueOf(frame.getY()))) Integer.parseInt(props.getProperty(""W"" String.valueOf(frame.getWidth()))) Integer.parseInt(props.getProperty(""H"" String.valueOf(frame.getHeight()))) ); } else { frame.setExtendedState(JFrame.MAXIMIZED_BOTH); } } How can I discover on which screen the frame is located? How can I move a frame to the second screen and maximize it there? To find the ID of the used graphics device: frame.getGraphicsConfiguration().getDevice().getIDString() Going the other way you can find the graphics devices with:  GraphicsEnvironment.getLocalGraphicsEnvironment().getDevices() You can then use a configuration from the device in the JFrame constructor. I don't believe you can set it after construction. Of course you should be careful not to say open the frame off screen because the resolution has change. and how do I re-paint it in such device? I guess the getIDString() isn't that general. It might not return the same value on different machine/platform. Maybe should I instead get the frame.getGraphicsConfiguration().getDevice() object's index in the GraphicsEnvironment.getLocalGraphicsEnvironment().getDevices() array? Does the array's order resemble to the logical index of the display?"
641,A,"JButton expanding to take up entire frame/container Hey everyone. I'm trying to make a swing GUI with a button and a label on it. im using a border layout and the label ( in the north field ) shows up fine but the button takes up the rest of the frame (it's in the center field). any idea how to fix this? Again :)  import javax.swing.*; public class TestFrame extends JFrame { public TestFrame() { JLabel label = new JLabel(""Some info""); JButton button = new JButton(""Ok""); Box b = new Box(BoxLayout.Y_AXIS); b.add(label); b.add(button); getContentPane().add(b); } public static void main(String[] args) { JFrame f = new TestFrame(); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.setLocationRelativeTo(null); f.setVisible(true); } }  Or just use Absolute layout. It's on the Layouts Pallet. Or enable it with : frame = new JFrame(); ... //your code here // to set absolute layout. frame.getContentPane().setLayout(null); This way you can freely place the control anywhere you like.  You have to add the button to another panel and then add that panel to the frame. It turns out the BorderLayout expands what ever component is in the middle Your code should look like this now: Before public static void main( String [] args ) { JLabel label = new JLabel(""Some info""); JButton button = new JButton(""Ok""); JFrame frame = ... frame.add( label BorderLayout.NORTH ); frame.add( button  BorderLayout.CENTER ); .... } Change it to something like this: public static void main( String [] args ) { JLabel label = new JLabel(""Some info""); JButton button = new JButton(""Ok""); JPanel panel = new JPanel(); panel.add( button ); JFrame frame = ... frame.add( label BorderLayout.NORTH ); frame.add( panel  BorderLayout.CENTER); .... } Before/After What's the default LayoutManger on the Panel then? FlowLayout? FlowLayout that's correct."
642,A,"Is JSR 296 (Swing Application Framework) stable enough to use? If not what are the other options for small Swing apps? Eclipse RCP and Netbeans Platform are too big for the smaller apps that I work on but I would still like to use a framework to make my apps more maintainable and consistent. Are there any other small frameworks that would be useful here? what do you mean by ""too big"" a minimal Eclipse RCP app has very few plugins in it as long as you only include the ones you need that is. Well you can consider it stable at Sun nobody has worked on it for years. Yes I'm a bit sarcastic here but that's the simple truth nobody at Sun seems to care about it. More seriously I have used it in several applications (version 1.03 the latest) quite successfully. However there are some bugs that you may have to fix yourself if they are showstoppers for you (I had to fix some myself). A word of caution: don't use the latest SVN (or is it CVS? I can't remember) source but exclusively rely on 1.03; the latest committed source is rather a regression than an improvement.  We are using Swing App Framework in production for years. It is stable. Some things could be better but we added some of our own enhancements. As you probably know there is a team of engineers at Sun now who are actively working towards making it part of JDK. But it won't be part of the JDK7 as anounced today at http://weblogs.java.net/blog/alexfromsun/archive/2009/08/saf_and_jdk7.html That really doesn't matter because SAF can be used as third-party library."
643,A,"How to implement multilanguage in Java/Swing applications? What are the different ways of implementing multilingual support in Swing applications? Are you using ResourceBundle with property file and implementing it in every frame? Does it work good for you? What if you use some kind of GUI editor? Is there any other way around? At work we are using Matisse4MyEclipse and the code gets regenerated every time we save the screen so simply using Externalize Strings won't work here. One way is to define it as custom property for each component which is very annoying. Another way is to go over the multilanguage components and their properties again after matisse's generated code which is a pain too. Well you had to use ResourceBundles. But if you are setting the componet text property use instead of human readable text the text for RB.getString(). Then if the Matisse regenerates form the bundle key will stay and localization will work. Example: I will use this image from Matisse pages: . there you can see the the property text. There is value ""My New Label"". Instead of this you can use rb.getString(""myNewLabel.my.message"") where rb is ResourceBundle. The only problem should be too intelligent properties editor going against you. I never work with any wysiwyg editor (personal preference I do always UI design by hand).  This is how I implemented the internationalization : give a name to every component which has an internationalized text at runtime take the container(frame dialog applet) iterate all the components and build an i18n key for every component using its name and all parent names. for every component type(JTextField JLable etc) define some keys for every internationalize field(text label hint etc). take this i18n key and query your ResourceBundle take the results and populate the component fields. It works with generated code or with manual created code. Edit: Here it is : public void buildIds() { buildId(true); int count = getComponentCount(); if (count == 0) { return; } for (int i = 0; i < count; i++) { Component component = getComponent(i); if (component instanceof AbstractComponent) { ((AbstractComponent) component).buildIds(); } } } protected void buildId(boolean fireChange) { String prevId = this.id; String computedId; if (getName() == null) { computedId = ClassUtilities.shortClassName(getClass()).toLowerCase() + ""_"" + Long.toHexString(ID_GENERATOR.getAndIncrement()); } else { java.util.List<Component> parents = null; Component parent = getParent(); if (parent != null) { StringBuilder buider = new StringBuilder(80); parents = new ArrayList<Component>(); while (parent != null) { if (parent.getName() != null) { parents.add(parent); } parent = parent.getParent(); } Collections.reverse(parents); if (parents.size() > 0) { for (Component component : parents) { if (buider.length() > 0) { buider.append('.'); } buider.append(component.getName()); } buider.append('.'); } buider.append(name); computedId = buider.toString().toLowerCase(); } else { computedId = name; } } this.id = computedId; if (fireChange && prevId != null && !prevId.equals(computedId)) { componentIdChanged(this prevId); } } How do you assign name/key to every component? For every component with a non-null name including the current component you will create a unique id which will be equivalent to a Java class package namespace. Example : login_dialog.userName.label=User name login_dialog.password.label=Password login_dialog.login.text=Login login_dialog.login.hint=Press login to .... and so on. This has the advantage that it will be really visible in the resource dialog in which context a userName will be used(based on its parent names) login_dialog userName password are component names login_dialog is the parent of userName & password. Where do you store the info that userName key is bound to jTextfield1? Well in your case you don't/shouldn't store it. In my case is a little bit more complex because I use an abstraction of a UI model and by default this namespace is used to calculate a component id which is unique per application. Based on this id every component will query a I18n service to ask for internationalized text. If you just want to apply the same principle just iterate all components create the id query a ResourceBundle and discard the id since you don't need it. We use abstraction level for UI components too. How do you generate unique id for each component? Is it some kind of meaningless hash? No as I told you the id is generated based its name and all parents up to the root. Since I cannot post code as a comment I will post it as an answer.  I don't know of any way besides ResourceBundle. Why do you keep regenerating code? I would imagine that it would be fine once you got a page started but after that it'd be largely unnecessary. Sounds like code generation is your real problem. It's not saving you anything. Do you try to compose pages out of several Components? I can imagine a common header footer and menu that wouldn't have to change all the time. It could be a design issue. Spring has very nice support for I18N. Maybe it can help you here."
644,A,"Creating a Java GUI in Swing for form input Well I've looked all over the internet and just haven't been able to find an answer to this question so maybe someone can provide some insight. I'm working on developing a relatively simple Java app that will replace a Word doc currently used for system access requests. It's designed to allow form entry of new employee hire information - name access needed and so forth. So here's my problem. Trying to make a GUI with all of the text fields and everything is surprisingly painful. Because each widget is a bit different getting the input once the form is filled out seems to require a separate reference for each widget so I can call them individually. This means each panel for a section has 6-10 different private fields. (I attempted adding all the similar widgets to a list and calling them in a loop but that didn't seem to work.) It seems that a web form would be a better fit for this in some ways but I don't have the infrastructure available to do that. Has anyone out there found a better solution than this for something similar? It just seems like a ton of code. Please see below for an idea (I put in some comments rather than actual code because it is so long). Thanks for looking!  private JComboBox my_dates; private JTextField my_date1; private JTextField my_date2; private JTextField my_request_date; private JTextField my_new_legal_name; private JTextField my_new_pref_name; private JTextField my_new_username; private JTextField my_prev_legal_name; private JTextField my_prev_pref_name; private JTextField my_prev_username; private JTextField my_emp_id; private JTextField my_manager; private JTextField my_auth_requestor; private JTextField my_auth_phone; public NameChangePanel(FormSection the_section) { super(); initialize(); buildPanel(the_section.getFields()); } private void initialize() { // Create all the widgets individuall } private void buildPanel(List the_fields) { // add a field label // add a component // repeat for all values } public List getFormValues() { // Call all of the private fields individually return values; } } Thanks to everyone who answered - I ended up getting pretty good results from plain 'ol Swing but there were a lot of great suggestions that I will try for future projects. Much appreciated. Take a look at BetterBeansBinding. It's a tool which makes it easy to bind various JavaBean like properties between objects. You would set up an object which holds a request and bind the properties of that object to the various gui components. When you're done just return the bound object and it should have all the fields filled out. Note that I haven't actually used this before but I've seen the concept and have done similar things before it was released.  I would create a this form from a XML file something like <form name=""MyForm"" package=""com.nowhere.swing""> <field component=""javax.swing.JTextField"" label=""Enter your Name"" pattern=""[a-z]+"" name=""name""/> <field component=""javax.swing.JTextArea"" label=""Enter your Comment"" pattern=""[a-z]+"" name=""comment""/> </form> and then using XSLT I would then generate the java code for a Pojo and for the Swing interface using this definition. class MyFormPojo { private String name; private String comment; (...) } class MyFormPane extends JPanel { JTextField field4name; JTextArea field4comment; (...) MyFormPane() { (...) field4name= new JTextField(); (.. create labels etc...) } }  Netbeans has a gui builder that is reasonably good by most accounts. This screen cast shows off the data binding feature that may be helpful for you. Another option may be to roll your own presentation framework which depending on how complex you want it is not that hard and sorta fun. Just use reflection to pull fields out of an object and translate those fields into widgets and back again. Make sure to use a layout manager to do most of the heavy lifting for you. Yes on the whole gui stuff is not java's strong suit but you should find it's good enough.  Call me crazy but I dislike gui builders. I prefer the extra control that hand-coding brings. Also as you wrote the code yourself it makes it far easier to debug. What is important is to layout your code in a logical order and to use methodical variable names. You mentioned trying to use a list. However I don't see how this is going to save you much time at all (or as I hinted eariler what time you'll save on implementation you'll lose during the debugging process). I'm guessing that the headaches are starting when you start sanity-checking the input of your JTextFields. I'd suggest subclassing JTextField into MoneyTextField PhoneNumberTextField etc. which can be used to setup the ActionListener to stop people doing stupid things.  if you are adventurous you can try doing it in groovy using griffon. Griffon is a GUI building framework that makes gui building easier by automating the repetitive parts. See http://griffon.codehaus.org/ for more details. If you know how to use grails griffon will feel similar as it is built using similar concepts and metaphors.  Vanilla Swing is verbose - no argument there. Basically for this kind of thing I end up relying on a bunch of home-grown util/factory methods like createTextBox() that is parameterized for common usage and will execute the 3-8 statements necessary. I will sometimes even parameterize the layout. I tend to reduce all layout to GridBagLayout (others do BorderLayout etc; it's just a matter of personal preference) and then create methods that'll put a control at a particular point in the grid. If you're not going Web-based I would just stick with Swing. It might be verbose but it's not really all that difficult for a simple form.  If you like XML take a look to SWT/XML or jelly. Oh sorry I have just read the question is about Swing.  You may look at my attempt to solve this problem: http://code.google.com/p/swing-formbuilder/"
645,A,"Is there any (real) Office 2007 look and feel for Java/Swing? I'm aware of the Substance look and feels and that they have a Office 2007 look-a-like look and feel. But this look and feel doesn't look like the Office 2007 design at all the colors are a lot different for example. Are there other look and feels which mimic the Office 2007 more accurately? It may help if you indicated what framework/language you are working with (.Net C++ MFC etc). I'm not familiar with theSubstance so I don't know what it applies to. Sorry! Ah sorry just noticed the tags for Java/swing. You may want to edit your post to include that in the main text so that others don't make the same mistake I just did :) I noticed quite a few people don't specify the domain of their question and instead put some tags that hint at it!! please clearly state in your question that you're talking about the Java framework called Swing (if *that* is what you're talking about) I suggest looking at jide software conponents at http://www.jidesoft.com/ wow that looks awesome I can only find Office 2003 components  Look! http://www.pushing-pixels.org/?p=1010  The author of Substance is also developing ""Flamingo"" which includes a Ribbon component. As far as I understand Flamingo has no dependency on Substance and uses whatever LAF is installed (so the system LAF should work). You migh want to give it a try. Yes I'm already using the ribbon component. What I need now is an Office 20007 look and feel :)  With the Windows 7/VS2010/.NET4 wave the ribbon will become a standard component in Win32 and also the .NET framework I think."
646,A,"Java Right Click does not make a selection. What is the easiest way to solve this globally? Is there a way to globally make right click also select the element that you right click on? From what I understand this has been a bug in Swing for a long time likely to never be fixed because at this point applications depend on it. Any advice on doing this on a global scale? Perhaps on the L&F? Using the Glass Pane will do the trick. Here's a tutorial on how to use the glass pane to get the right click button and redispatch it to the right component. As the glass pane is not a solution in this case I suggest you take a look at the Toolkit class. Specificaly the addAWTEventListener method. You can add a global event listener with it. To add a mouse event listener: Toolkit.getDefaultToolkit(). addAWTEventListener(listener AWTEvent.MOUSE_EVENT_MASK); Cheers Glass pane to the rescue again. A Glass Pane does not work for my case but maybe a good answer for someone else. Why not? When you say ""element"" you mean any Swing component? Or elements in a tree or list? Both actually tables lists trees components. But we also use drag and drop also which adds another level of issues. Another issue is we have multiple independent windows for our application. Ideally if we could set it up on the L&F but I haven't figured that out yet. Updated my answer The toolkit looks like it might be the solution. I will update after I get back to this issue."
647,A,"Java Swing JTree Expansion This method works as expected - it creates a JTree with a root node and two child container nodes (each with a respective leaf node): private JComponent createSideBar() { final DefaultMutableTreeNode top = new DefaultMutableTreeNode(""Projects""); final JTree tree = new JTree(top); DefaultMutableTreeNode project = new DefaultMutableTreeNode(""project 1""); DefaultMutableTreeNode version = new DefaultMutableTreeNode(""version 1""); project.add(version); top.add(project); TreePath treePath = new TreePath(project.getPath()); // tree.expandPath(treePath); project = new DefaultMutableTreeNode(""project 2""); version = new DefaultMutableTreeNode(""version 2""); project.add(version); top.add(project); return tree; } In this case the tree starts out closed. I'd like the application to start with all nodes fully expanded so I started by adding the following:  tree.expandPath(treePath); but when I un-comment it from the code above the second set of child nodes don't show up ie: Project 2 and Version 2 do not show up. In fact all subsequently added nodes never show up. For what its worth I'm using JDK 1.5. From the docs I can't seem to see any restrictions or why this method would have such ill-effects ... I'm going to try to look at the source but was hoping someone might have a good idea what and why this is expected behavior. I'm wondering if each subsequent node 'add' is somehow disallowed somehow - but I can't imagine would work for most run-time use cases. Thanks -Luther Ah ... the model. Your answers are elaborated on a bit here and here .... and even here. I ended up doing something like: DefaultTreeModel model = (DefaultTreeModel) tree.getModel(); model.insertNodeInto(newNode parent index); which keeps the model directly informed. In my case that scales just fine. Now how to mark one of these as the answer!?!  Unfortunately Swing is often ""helpful"". In this case it is creating a model for you from the data supplied much the same as a JList would create a model if you supplied a Vector. JTree and accomplices (primarily the Pluggable Look & Feel) will add listeners to the model to keep informed of updates. If you just change the data behind the (implicit) model's back nothing will get updated other than by chance. So what you should do is explicitly create a model. When the model data changes (always on the EDT of course) cause the relevant event to be fired. +1 I didn't know that.  If nodes are added to a node which has already been expanded you need to reload the model. ((DefaultTreeModel)tree.getModel()).reload(); or ((DefaultTreeModel)tree.getModel()).reload(top); This second version is more useful if you want to reload only a small part of a large tree."
648,A,"Using a JFrame's focus (being lost) to stop recording a screen cast? In my Swing application I'm using a custom module to record a screen cast. However I'm a bit hung up on when to force the recording to stop. Right now I check to see if the user still wishes to record (meaning that they haven't clicked the 'stop' button) and if the application is still open (closing the application causes the recording to stop gracefully). The problem is that the recording will continue if the application gets pushed behind other apps or minimized causing recording of 'junk'. I need the recording to stop when the application is no longer 'on top' of the screen. Using the application's focus doesn't seem to work due to other dialogs and things popping up. Suggestions? You may want to try adding a WindowListener and override the windowDeactivated() event which should get called when the frame is no longer the ""active window"" according to the operating system. UPDATE: If you are conscientious about making sure that your child dialogs and windows are owned by your application (making sure you pass in your application frame as the owner) then you could make your WindowListener do something like this:  public void windowDeactivated(WindowEvent e) { if(e.getOppositeWindow() == null){ // will be null when another application window gets activated stop recording } for(Window w : appFrame.getOwnedWindows()){ if(w.equals(e.getOppositeWindow())){ // one of the windows owned by the frame is active don't stop recording } } } Then you will be able to determine if the window focus has left your application altogether or if the focus has just changed to a different child window/dialog. The problem with this approach is that when the application launches a child JDialog the application is no longer the active window causing my screen cast to stop. I need to check for active on the application and its dialogs. Oh I see .. so something like an ""application focus loss"" event. Exactly. Is that possible? Yes! This is exactly what I just came up with right before you updated and it works beautifully. Thank you! (referring to your update)"
649,A,How can I split up paint swing method in java? I'm developing a fair sized hospital simulation game in java. Right now my pain method is starting to look a little big and I need a way to split it up into different sections... I have an idea but I'm not sure if this is the best way. It starts by painting the grass then the hospital building then any buildings then people then any building previews when building. The grass and hospital building will not change so I only need to paint this once. The buildings themselves won't change very often only when new ones are built. I was thinking use boolean values to determine which sections need repainting? Ideal id like to be able to split up the paint method and then call each one when needed but I'm unsure how to physically split it up. I am still quite new to java and learning on the go. Thanks in advance. Rel Ah the irony of having a _pain_ method in a hospital application. (Sorry could not resist!) Well I am not really an expert at programming but to split up my paint method Ive always just made a new method that takes a Graphics object and call that from paint it has always helped me to keep my code organized but I have never had a big project like it sounds you are working on so it might not work for your situation.  I'm assuming from your description that your scene is split up into tiles. Keeping an array of booleans is a good way to keep track of which tiles need redrawn on the next update. A LinkedList might perform a little better in some situations. (I'm thinking of a Game of Life simulation where there are tons of tiles to redraw and you need to check each neighbor so you may not need to go this route.) Without seeing your code I can't give very specific advice on splitting up your paint method. I can tell you that in sprite animations each sprite object typically has its own draw method that takes the main Graphics object (or more likely a buffer) as a parameter. Since the sprite should know its own image and location it can then draw itself into the main image. Your paint method can then just loop through your list of sprites that need to be redrawn and call their draw method. You might look to Killer Game Programming in Java for more detailed information. THATS it. I planned to do pretty much that but id forgotten! You assume correctly. Each sprite object should indeed have its own paint method. I'm unsure how to use sprites and animations as of yet and im just working on getting the game basics atm with simple swing graphics and simple movement animation. Book looks awesome thanks! :)  Another idea is to create a super class or interface for all items that must be drawn on the screen. Lets cvall this class ScreenObject. You can then have a draw(Graphics2d g) method specified in the ScreenObject class. Next each object that must be drawn implements the draw() method and is only concerned about drawing itself. You can even consider creating a variable that determines whether this draw method should be run at all. In the main class that paints the screen you can have a reference to all ScreenObjects in an ArrayList and your paint() method will simply iterate over this calling draw() on each object.
650,A,"How to set AUTO-SCROLLING of JTextArea in Java GUI? I have embedded a JTextArea on a JScrollPane and am using that JTextArea for output. I want that whenever the ouput goes beyond the size of the JTextArea the JTextArea scrolls automatically so that user don't have to do manual scroll down to see the recent output. How can I do that? I have already set the autoscroll property of both JTextArea and JScrollPane to true.  JScrollBar vbar = scrollPane.getVerticalScrollBar(); for (int i = 0; i < 20; i++) { myJTxt.append(""This is text "" + i + ""\n""); vbar.setValue(vbar.getMaximum()); vbar.paint(vbar.getGraphics()); myJTxt.scrollRectToVisible(myJTxt.getVisibleRect()); myJTxt.paint(myJTxt.getGraphics()); try { Thread.sleep(250); } catch (InterruptedException ex) { Logger.getLogger(ScrollTextView.class.getName()).log(Level.SEVERE null ex); } }  When using JDK1.4.2 (or earlier) the most common suggestion you will find in the forums is to use code like the following: textArea.append(...); textArea.setCaretPosition(textArea.getDocument().getLength()); However I have just noticed that in JDK5 this issue has actually been resolved by an API change. You can now control this behaviour by setting a property on the DefaultCaret of the text area. Using this approach the code would be: JTextArea textArea = new JTextArea(); DefaultCaret caret = (DefaultCaret)textArea.getCaret(); caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE); A more detailed description of this topic can be found here: Text Area Scrolling Any ideas why this might not be working (for what it's worth the form was created using the Netbeans builder)? @cyber-monk No. Create a SSCCE. If it still doesn't work then you can create a question and post your SSCCE. I removed your side note from your answer - if this is still an issue post something on [meta]. @camickr i can't access the link I am sitting behind a corporate firewall. Can you post significant stuff from that linka nd I will up vote you:) Thanks.  When you click anywhere over JTextArea auto-scrolling have possible to be stopped. Because the position of caret once changed view point changed too. In this time you should set caret position when you append or add some text. On my way I made method including set caret position and then use it when anything to be added or appended.  JTextArea jTextArea=new JTextArea(); JScrollPane jScrollPane=new JScrollPane(); jScrollPane.setViewport(jTextArea); you can use them to solve peoblem . not .............."
651,A,"Open-source improvements or replacements for Swing components I develop a number of desktop Java applications using Swing and while Swing is quite powerful (once you get the hang of it) there are still a lot of cases where I wish some advanced component was available right out of the box. For example I'd really like to see easy-to-use components (without writing them myself which I could do given enough time) like: Multi-line label Windows File Explorer-like Icons or Thumbnails view Drop-down button (like Firefox's old Back button) 5-star rating widget Combo box with automatic history (like the text field on Google) An Outlook-style accordion-style bar and so on I know of a couple of sources of free Swing components like SwingLabs home of JXTable JXDatePicker and a few others. Where do you go for Swing components beyond those included with Java itself? Multi-line labels are built into Swing because you can use HTML in JLabels: http://stackoverflow.com/questions/685521/multiline-text-in-jlabel The following are worth a look: swingX Glazed lists Substance look'n'feel Flamingo components Ken Orr's Mac Widgets Jide's open source components Your first link has too many http's in it.  As for: ""Windows File Explorer-like Icons or Thumbnails view"" They are built in in swing. File explorer icons are accessed through FileSystemView class ( it is used by JFileChooser ) when the L&F is Windows of course. FileSystemView.getFileSystemView(); Icon driveIcon = fsv.getSystemIcon( new File(""C:\\"")); And the Thumbnails icon can be retrieved with the sun.com class that are discouraged by Sun sun.awt.shell.ShellFolder getIcon( boolean largeIcon ) But this one may not perform very well some times ( due to native resources handling I think ). I realize that... I was thinking about lists that look like Explorer views but aren't used for the file system. For example a thumbnail list of photos or some other type of icon.  Hey There I know you can get an awesome wrapping labe and an accordion from javaswingcomponents however they are not open source implementations. Otherwise Jide and SwingX are great choices."
652,A,"Clojure GUI calculator. ""-"" always returns 0 and ""/"" always returns 1 I'm well aware this code is horrible. I just made it so I could try out different Swing stuff. This is an interesting problem. This creates 4 buttons one for adding subtracting dividing and multiplying. Multiplying and adding works perfectly no problems at all but when the user tries to subtract it always returns 0. When the user tries to divide it always returns 1 or 1.0 depending on input. I can't figure it out. Here is the code: (ns rayne.main (:gen-class) (:import (javax.swing JFrame JTextField JButton JOptionPane) (java.awt.event ActionListener) (java.awt GridLayout))) (def numbers (ref [])) (def times-clicked (ref 0)) (defn calc [nseq op] (let [n1 (first nseq) n2 (last nseq)] (cond (= op ""+"") (+ n1 n2) (= op ""*"") (* n1 n2) (= op ""-"") (- n2 n1) (= op ""/"") (/ n1 n2)))) (defn add-op-button [op text button] (.addActionListener button (proxy [ActionListener] [] (actionPerformed [e] (dosync (ref-set times-clicked (inc @times-clicked)) (if (= @times-clicked 2) (do (let [result (.toString (calc @numbers op)) result2 (read-string result)] (.setText text result) (ref-set numbers []) (ref-set times-clicked 0))) (do (ref-set numbers (conj @numbers (read-string (.getText text)))) (.setText text """")))))))) (defn -main [] (let [frame (JFrame. ""Calculator"") add-button (JButton. ""+"") sub-button (JButton. ""-"") mul-button (JButton. ""*"") div-button (JButton. ""/"") clr-button (JButton. ""Clear"") text-field (JTextField.)] (add-op-button ""+"" text-field add-button) (add-op-button ""-"" text-field sub-button) (add-op-button ""*"" text-field mul-button) (add-op-button ""/"" text-field div-button) (doto frame (.setLayout (GridLayout. 1 5)) (.add text-field) (.add add-button) (.add sub-button) (.add mul-button) (.add div-button) (.setSize 500 100) (.setVisible true)))) The indentation is probably screwed up because of copy-pasting and on the fly formatting but there it is. Once again I know the code is horrible. It looks like add is only ever adding the number to itself and the multiplication function is actually just squaring the first number. Which is what you would expect given the issues I outlined ;] I was testing the addition and multiplication apparently using numbers that came out the right way squared and added to themselves. Silly me.  The second time the user clicks a button the number isn't added to the list numbers so you're doing calc on a list of one element. Since the list has only one element the first element (n1) and the last element (n2) are the same thing and x / x => 1 x - x => 0 I'm surprised your addition and multiplication are working... :-/ I think you can fix this by moving the update of @numbers to before the if: (ref-set numbers (conj @numbers (read-string (.getText text)))) (if (= @times-clicked 2) or else move the increment of @times-clicked to be after the if. Oh shit! I don't even know how the addition and multiplication were working in the first place!! Thanks a lot! Also in case you were wondering clr-button is a special case I haven't added yet. It's okay. Honestly I'm amazed I remember enough lisp to even understand anything! ;] And result2 isn't used because I was trying stuff and removed it and pasted the code that way :p"
653,A,"VisualEditor in Java - dynamically build sub-panel? I'm using the ""Visual Editor"" to ""paint"" my Swing GUI. Can I dynamically build the contents of a sub-panel with VE or do I have to use a predefined sub-class of JPanel (and build that with VE)? You can dynamically build the contents of a sub panel - say based on a file or soemthing - the visual editor is not going to stop you. Generally VE is intelligent enough to see that you are dynamically build the panel and show the contents (say contents of a file in a JList) Sometimes VE fails to render the items because 'The control is too complex' - but this does not happen frequently. Tried to clarify the question .. want to build the whole GUI with VE including a sub-panel (with boarders) and the widgets in the sub-panel. I assume that you want a panel a sub panel and a lot of widgets in them: I dont see any problem in doing this - should be straightforward without requiring any subclass of JPanel (just for this purpose)."
654,A,"How can I determine which menu item called an ActionListener? I have a Java program where I have a JMenu with an arbitrary number of items (in this case there is one menu item for each dynamic library currently loaded in a different program). I'm running a loop to add JCheckBoxMenuItem s to the menu since I don't know how many there will be. How can I set up an action listener for these menu items that is aware of which option called it? Specifically I want to run the same function but with a different set or parameters for each of the menu items (and a different function again depending on whether the check is being toggled or detoggled). Could someone point me in the right direction? The clean way to do it is to create a different ActionListener for each. EventObject.getSource is fugly. Sure but then how would I call each ActionListener with parameters that are unknown at compile time?  While event.getSource() will definitely let you know which particular button the event came from it has the side effect of needing to track the generated buttons or snooping into the button. Also you may want to present a different name of the library to the user (possibly including the version information) than is used to identify the library. Using the ""ActionCommand"" property of the button may provide a way to separate those issues. So you will need to alter code in the generation of the checkbox menu items and in the listener. ActionListener actionListener = ... // whatever object holds the method possibly this String[] libraries = ... // however you get your library names JMenu parentMenu = ... // the menu you are adding them to for (String s : libraries) { // prettyName is a method to make a pretty name perhaps trimming off // the leading path JCheckBoxMenuItem child = new JCheckBoxMenuItem(prettyName(s) true); child.setActionCommand(s); parentMenu.acc(child); } The action handler code would be... public void actionPerformed(ActionEvent evt) { // the 'current' selection state i.e. what it is going to be after the event boolean selected = ((JCheckBoxMenuItem)evt.getSource()).isSelected(); String library = evt.getActionCommand(); ... process based on library and state here... }  When you build the menu you can pass the Action object to the JCheckBoxMenuItem configured with whatever options you need for given action (you can also push there the reference to the check box to check the state). This way you will not have to do any kind of processing when the action is actually performed because the correct action will be invoked.  Definitely read over this: http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html In short add ActionListener to the menuItems. In the actionPerformed method use event.getSource(). You can add the SAME ActionListener to all your menu items if you want.  event.getSource() should do it."
655,A,Java AWT/Swing: Get notified on change of position/size of my window I've got a window and I would like to get notified when the position or the size has changed. Which type of listener ist the best to take? WindowListener didn't work for me... Any way? Thanks and regards You might want to try the HierarchyBoundsListener  myJFrame.getContentPane().addHierarchyBoundsListener(new HierarchyBoundsListener(){ public void ancestorMoved(HierarchyEvent e) { doSomething(); } public void ancestorResized(HierarchyEvent e) { doSomethingElse(); } see http://java.sun.com/docs/books/tutorial/uiswing/events/eventsandcomponents.html for a full list of listeners that all swing components support.  You can use a ComponentListener which has the componentResized and componentMoved methods. +1 & acc: that one did it very well thanks!! I'm curious as to why this is better than a ComponentAdapter. I tend to create a derivative and then override the ComponentMoved() and ComponentResized() methods. The question was about which listener to use. People can choose to implement the interface or extend the adapter based on their requirements.
656,A,Remove unnessesary spaces from Swings Components i have 3 JPanel the first is the base panel and the other two are added to the first. I have realised that there is a lot of space that is not used shown by the black color and the white color around components. How do you remove this space? What LayoutManager are you using? @willcodejavaforfood - Thanks got the idea. I'm using FlowLayout and created the layout using new FlowLayout(FlowLayout.LEFT 0 0). It works i just need to change the font styles and sizes If you are using either GridLayout or BorderLayout they both have methods to change the space between components. In GridLayout this can be done in the 4 int parameter consturctor and in BorderLayout the 2 int parameter constructor. Both LayoutManagers have the methods setHgap and setVgap. If you are using GridBagLayout you need to make sure that the insets on the GridBagConstraints is changed to whatever you need. Guessing you are using one of the other managers though.
657,A,"How can I identify in which Java Applet context I'm running without passing an ID? I'm part of a team that develops a pretty big Swing Java Applet. Most of our code is legacy and there are tons of singleton references. We've bunched all of them to a single ""application context"" singleton. What we now need is to create some way to separate the shared context (shared across all applets currently showing) and non-shared context (specific to each applet currently showing). However we don't have an ID at each of the locations that call to the singleton nor do we want to propagate the ID to all locations. What's the easiest way to identify in which applet context we're running? (I've tried messing with classloaders thread groups thread ids... so far I could find nothing that will enabled me to ID the origin of the call). If I understand you correctly the idea is to get a different ""singleton"" object for each caller object or ""context"". One thing you can do is to create a thread-local global variable where you write the ID of the current context. (This can be done with AOP.) Then in the singleton getter the context ID is fetched from the thread-local to use as a key to the correct ""singleton"" instance for the calling context. Regarding AOP there should be no problem using it in applets since depending on your point-cuts the advices are woven at compile time and a JAR is added to the runtime dependencies. Hence no special evidence of AOP should remain at run time.  @Hugo regarding threadlocal: I thought about that solution. However from experiments I found two problems with that approach: Shared thread (server connections etc) are problematic. This can be solved though by paying special attention to these thread (they're all under my control and are pretty much isolated from the legacy code). The EDT thread is shared across all applets. I failed to find a way to force the creation of a new EDT thread for each applet. This means that the threadlocal for the EDT would be shared across the applets. This one I have no idea how to solve. Suggestions? You should be able to get a new EDT thread by using a different value for the archive tag. I think you can just add a random jar name to the end even if it does exist.  Singletons are evil what do you expect? ;) Perhaps the most comprehensive approach would be to load the bulk of the applet in a different class loader (use java.net.URLClassLoader.newInstance). Then use a WeakHashMap to associate class loader with an applet. If you could split most of the code into a common class loader (as a parent of each per-applet class loader) and into the normal applet codebase that would be faster but more work. Other hacks: If you have access to any component you can use Component.getParent repeatedly or SwingUtilities.getRoot. If you are in a per-applet instance thread then you can set up a ThreadLocal. From the EDT you can read the current event from the queue (java.awt.EventQueue.getCurrentEvent()) and possibly find a component from that. Alternatively push an EventQueue with a overridden dispatchEvent method. This is (by far) the best collection of ideas I saw on the subject. I especially like the ""push a customized eventqueue"" - and I'm going to try it."
658,A,how would you detect if the mouse cursor is inside a JFrame in java? How would you write a method to detect if the mouse cursor is inside a JFrame in java? The method should return true if it is inside or else false. Thanks Andrew which part you don't understand? Getting the JFrame position dimensions getting the current mouse position or comparing it to the JFrame dimentions ? Is there a way to do this without getting the coordinates of the mouse and testing to see if they are in the jframe dimensions? How do you do it with a hover over event or something like that? You should add a mouse listener and react to the mouseEntered-Event: JFrame.addMouseListener( new MouseAdapter() { public void mouseEntered( MouseEvent e ) { // your code here } } ); Won't work if other components have MouseListeners because as soon as the mouse goes over other components a mouseExited() event will be generated.  Add a mouse listener to your JFrame and look for mouseEntered and mouseExited events. frame.addMouseListener(new MouseListener() { public void mouseEntered(java.awt.event.MouseEvent evt) { // do your action here } public void mouseExited(java.awt.event.MouseEvent evt) { // do your action here } });  To expand on the comment in the original posting you can use the MouseInfo class to get the current location of the mouse. Then you compare this location with the bounds on the frame to return the appropriate value.
659,A,"jscrollpane to scrolling a panel hi i have to writing an applet in left side i must use an panel to contain a list of vehicles that can be a list of buttonswhat is the problem number of the vehicles are not given !!! so i need to scrolling panel when number of vehicles is too much i do this for jframe but it didn't work correct with panel please help me with an example the code i use to scrolling panel is :  public class VehicleList extends JPanel { private ArrayList<VehicleReport> vehicles; private ArrayList<JButton> v_buttons = new ArrayList<JButton>(); public void showList(ArrayList<Vehicles> vehicles) { this.vehicles = vehicles; //... add(getScrollpane()); setSize(155300); } public JScrollPane getScrollpane() { JPanel panel = new JPanel(); panel.setPreferredSize(new DimensionUIResource(150 300)); GridBagLayout gridbag = new GridBagLayout(); GridBagConstraints constraint = new GridBagConstraints(); panel.setLayout(gridbag); constraint.fill = GridBagConstraints.HORIZONTAL; JLabel title = new JLabel(""Vehiles list""); constraint.gridwidth = 2; constraint.gridx = 0; constraint.gridy = 0; constraint.ipady = 230; gridbag.setConstraints(title constraint); panel.add(title); // end of set title constraint.gridwidth = 1; int i=1; for(JButton jb : v_buttons ) { constraint.gridx =0; constraint.gridy = i; gridbag.setConstraints(jb constraint); panel.add(jb); JLabel vehicle_lable = new JLabel(""car"" + i); constraint.gridx = 1; constraint.gridy = i; gridbag.setConstraints(vehicle_lable constraint); panel.add(vehicle_lable); i++; } JScrollPane jsp = new JScrollPane(panel); return jsp; } } in jaframe after add jscrollpane to jframe i place this pack(); setSize(250 250); setLocation(100 300); and it work clearly!!!! can you provide the code that you have already? hi i place it now thanks for your attention... You need to set the scrolling policy on the horizontal and vertical: public void setHorizontalScrollBarPolicy(int policy) public void setVerticalScrollBarPolicy(int policy) Using: JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED JScrollPane.HORIZONTAL_SCROLLBAR_NEVER JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS And: JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED JScrollPane.VERTICAL_SCROLLBAR_NEVER JScrollPane.VERTICAL_SCROLLBAR_ALWAYS So for example: jscrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED); (VERTICAL | HORIZONTAL)_AS_NEEDED are the defaults When I posted the answer there was no sample code so I thought maybe he had accidentally set the values...  You also don't show us the layout manager of the VehicleList JPanel. In case you aren't setting it it defaults to FlowLayout unlike JFrame (which you mentioned this does work in) whose content pane defaults to BorderLayout. So maybe you just need to change the relevant code from: //... add(getScrollpane()); to //... setLayout(new BorderLayout()); add(getScrollpane() BorderLayout.CENTER); thanks a million... that's right !!!"
660,A,"What advantages are to be had by using Java+Swing over C#+WinForms/WPF? There is a group here using Java server-side and client-side with Swing for the client UIs. I plan to suggest that they change the front end to C# and WinForms or WPF but I want to come prepared with: A list of benefits to be had from moving to Winforms / WPF from Swing. A list of Swing benefits that might get thrown back at me over using WinForms / WPF (the only one I can think of off the top of my head is the ability to share more code across server and client due to being the same language - given the fact that the server side will stay Java). Your major argument would probably be moving from Java to C# windows only. There are other Java GUI toolkits such as SWT that will use the native operating system GUI elements. Oh yeah btw Swing is terrible SWT is the way to go in my mind. The performance of the GUI should be faster with a .NET winform app compared to a Swing app running on Windows. It's not really a huge difference at this point for most apps though computers these days can run Java pretty fast. Either way you would still be talking to the Java backend code. Depending on what they've done you may be better off just sticking with the Swing front end. If it's an option you should think about a web front end. If it can be made in XHTML/Javascript/CSS you would retain the cross platform benefits that the Java GUI gives you. But really you need to think about why you want to change to Winforms instead of Java. Is there something about the existing Java app that you don't like that would be better and worth the cost of redeveloping in another language? Is it something that can be fixed without a full rewrite?  Do you have any custom components which would be a pain to migrate from Swing to .net? Do you have staff that are expert at developing custom Swing components (Java2D expertise familiarity with Swings input subsystem etc.) who know little about WinForm custom development? If the answer either to these questions is yes then you should probably stick with Swing.  1) It is easier to make a Winforms app feel like a Windows app. Java applications usually feel ""funny"" if you aren't careful. 2) Everything you are programming is using Java. Having one component that is not Java means that the project is harder to work with. Overall maintenance will also be more annoying. Currently everyone on your project team needs to know Java only in order to be able to work with anyone else on your project team. From a recruiting and maintainability perspective this is convenient. Personally I be against switching the GUI unless you were getting some other benefit out of it. You have not provided any reasons why you plan to make your proposal.  If using windows .net is the better choice because yo have: 1. Good designer in Visual studio good documentation and examples 2. Better startup CPU and memory usage at runtime: see http://www.codeproject.com/KB/dotnet/RuntimePerformance.aspx If using Linux you have Mono versus Java but it is more complicated to make a comparison there due to the large number of distros.  Performace & startup time. You just can't compare Swing to Winforms/WPF in the performace/startup time aspect. Really don't know... if you have a high qualified Java team that does not know .Net APIs stick to Swing otherwise don't think twice... Use Winforms. About ""the ability to share more code across server and client due to being the same language"" don't bother... there is zillions of ways to make two different applications from different languages that each other.  1) Swing stinks. (Almost just kidding but really in my opinion it's pretty awful.) Even if you're going to develop in Java use SWT or some other decent looking/behaving toolkit. Moving to Windows Forms or WPF will (potentially) give you a lot more powerful user interface options on Windows but only on Windows. 2) You're tying yourself to Windows and losing the cross platform nature of Java+Swing. You're potentially losing some ability for shared code. You're having to redevelop in non-java which may mean a lack of experience/training/knowledge on the part of other developers on your team. *Swing stinks.* Can you elaborate? @brano88 It's incredibly slow (startup times are awful) doesn't ""feel"" native etc... Its also in my opinion far more cumbersome to use compared to many other frameworks. You can easy set OS look and feel. And no it's not slow at all. JetBrains shown us that on their IDE's. Also it's very flexible although not easy to use. I'll be honest. I didn't expect such a answer (kind of full of prejudices) from someone with so high reputation score. @brano88 ""native look and feel"" is never exactly the same as truly native components. And slow is relative - JetBrains IDE is much slower than many others given the level of complexity there. Startup times are not very good etc.... I must agree with that sentence about startup time. But it's not slow at all. I feel that IntellijIDEA runs way smoother then Eclipse (SWT remember).  I'll preface this by saying I'm a .net developer so the following might be heretical. It sounds like your company already has a significant investment in java. People software licenses and code base. If my company (or group) was primarily java and we were successful in meeting business demands then quite frankly there would be no way I'd switch. The only way I'd consider switching technology stacks is if the stack we were on was truly dead. Meaning that it was very difficult to find programmers for it could no longer meet business needs we had a high number of failed projects and/or the language itself was no longer evolving. Switching just because someone prefers one language over another is non-starter and ultimately wouldn't make any business sense. The very act of a change like that will mean that the company is going to lose those people who are still committed to the old stack. Replacing people is extremely expensive just in terms of knowledge lost. Another thing if you don't already know what the hard reasons are for switching platforms then you shouldn't even try to encourage it. Take the accountants point of view what really would this provide?"
661,A,"How to bring a window to the front? We have a Java-application that needs to be brought to the foreground when a telecontrol mechanism activates something in the application. In order to get this we have realised in the called method of the Class which represents the Frame of our application (extension of a JFrame) following implementation: setVisible(true); toFront(); Under Windows XP this works the first time it is called on the second time only the tab in the taskbar flashes the frame doesn't come to the front anymore. Same goes for Win2k. On Vista it seems to work fine. Anyone ideas? do you have a sample for this behavior? The proper answer is to call `toFront()` on the EDT using `invokeLater`. There is a simple answer included below but it is not the accepted answer. It does work though. Perfectly. I know this is old but this also happens on OSX I'm experiencing this problem but none of the answers below seems to solve it. I'm sure it's caused by windows not allowing me to 'Steal' Focus for my first window in the application. I tested your answers and only Stefan Reich's one worked for me. Although I couldn't manage to restore the window to its previous state (maximized/normal). I found this mutation better: view.setState(java.awt.Frame.ICONIFIED); view.setState(java.awt.Frame.NORMAL); That is setState instead of setExtendedState.  The rules governing what happens when you .toFront() a JFrame are the same in windows and in linux : -> if a window of the existing application is currently the focused window then focus swaps to the requested window -> if not the window merely flashes in the taskbar BUT : -> new windows automatically get focus So let's exploit this ! You want to bring a window to the front how to do it ? Well : Create an empty non-purpose window Show it Wait for it to show up on screen (setVisible does that) When shown request focus for the window you actually want to bring the focus to hide the empty window destroy it Or in java code : // unminimize if necessary this.setExtendedState(this.getExtendedState() & ~JFrame.ICONIFIED); // don't blame me blame my upbringing // or better yet blame java ! final JFrame newFrame = new JFrame(); newFrame.add(new JLabel(""boembabies is this in front ?"")); newFrame.pack(); newFrame.setVisible(true); newFrame.toFront(); this.toFront(); this.requestFocus(); // I'm not 100% positive invokeLater is necessary but it seems to be on // WinXP. I'd be lying if I said I understand why SwingUtilities.invokeLater(new Runnable() { @Override public void run() { newFrame.setVisible(false); } }); Didn't work on Win7 both windows flash (if I don't hide the 2nd). Creative. Didn't work for my background process on Win7 when covered. New frame does not come up on top. Older JDK 6u21.  There are numerous caveats in the javadoc for the toFront() method which may be causing your problem. But I'll take a guess anyway when ""only the tab in the taskbar flashes"" has the application been minimized? If so the following line from the javadoc may apply: ""If this Window is visible brings this Window to the front and may make it the focused Window.""  I had the same problem with brining a frame to the front under Ubuntu (Java 1.6.0_10). And the only way I could resolve it is by providing a window listener. Specifically I had to set frame to always stay on top whenever toFront is invoked and provide windowDeactivated event handler to setAlwaysOnTop(false). So here is the code that could be placed into a base frame which is used to derive all application frames. @Override public void setVisible(final boolean visible) { // make sure that frame is marked as not disposed if it is asked to be visible if (visible) { setDisposed(false); } // let's handle visibility... if (!visible || !isVisible()) { // have to check this condition simply because super.setVisible(true) invokes toFront if frame was already visible super.setVisible(visible); } // ...and bring frame to the front.. in a strange and weird way if (visible) { int state = super.getExtendedState(); state &= ~JFrame.ICONIFIED; super.setExtendedState(state); super.setAlwaysOnTop(true); super.toFront(); super.requestFocus(); super.setAlwaysOnTop(false); } } @Override public void toFront() { super.setVisible(true); int state = super.getExtendedState(); state &= ~JFrame.ICONIFIED; super.setExtendedState(state); super.setAlwaysOnTop(true); super.toFront(); super.requestFocus(); super.setAlwaysOnTop(false); } Whenever frame should be displayed or brought to front call frame.setVisible(true). Since I moved to Ubuntu 9.04 there seems to be no need in having a window listener for invoking super.setAlwaysOnTop(false) -- as can be observed this code was moved to methods toFront and setVisible. Pls note that method setVisible should always be invoked on EDT. Thanks! Also related is this question: http://stackoverflow.com/questions/2315560/how-do-you-force-a-java-swt-program-to-move-itself-to-the-foreground +1 Was very helpful Thanks! @ka3ak This is a protected setter that could be introduced in the suggested JFrame-base class in order to track the situation with frame being disposed. Method dispose() would need to be overridden with a call to setDisposed(true). This is not strictly speaking needed for everyone. It doesn't compile by me because of setDisposed() method. Can't be found. The `.setAlwaysOnTop(true);` was the only one that worked for me when using a JWindow. This may be the greatest the most important the most happy-making answer I've ever encountered on stack Overflow. Thanks for your service to mankind. This has been driving me NUTS. Worked under all circumstances so I accepted this one.  Simplest way I've found that doesn't have inconsistency across platforms: setVisible(false); setVisible(true); causes some blinking though doesn't it? nice and simple though :) did not work for my background process. Also window comes up white for the first refresh if called from foreground process. Can't use for screen grabs.  Here's a method that REALLY works (tested on Windows Vista) :D  frame.setExtendedState(JFrame.ICONIFIED); frame.setExtendedState(fullscreen ? JFrame.MAXIMIZED_BOTH : JFrame.NORMAL); The fullscreen variable indicates if you want the app to run full screen or windowed. This does not flash the task bar but bring the window to front reliably. Thanks for the setExtendedState tip. I used it along with the toFront() and repaint() solution to bring the window to the foreground even if it was minimized. Confirmed: this solution works in WindowsXP using toFront results in flashing message in task bar. Thanks!  Hj all methods of yours are not working for me in Fedora KDE 14. I have a dirty way to do bring a window to front while we're waiting for Oracle to fix this issue. import java.awt.MouseInfo; import java.awt.Point; import java.awt.Robot; import java.awt.event.InputEvent; public class FrameMain extends javax.swing.JFrame { //... private final javax.swing.JFrame mainFrame = this; private void toggleVisible() { setVisible(!isVisible()); if (isVisible()) { toFront(); requestFocus(); setAlwaysOnTop(true); try { //remember the last location of mouse final Point oldMouseLocation = MouseInfo.getPointerInfo().getLocation(); //simulate a mouse click on title bar of window Robot robot = new Robot(); robot.mouseMove(mainFrame.getX() + 100 mainFrame.getY() + 5); robot.mousePress(InputEvent.BUTTON1_DOWN_MASK); robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK); //move mouse to old location robot.mouseMove((int) oldMouseLocation.getX() (int) oldMouseLocation.getY()); } catch (Exception ex) { //just ignore exception or you can handle it as you want } finally { setAlwaysOnTop(false); } } } //... } And this works perfectly in my Fedora KDE 14 :-) I love it. Thanks for this one. A little hacky works for us but only for the first call :-). (Kubuntu 12.04) - other solution did fail  A possible solution is: java.awt.EventQueue.invokeLater(new Runnable() { @Override public void run() { myFrame.toFront(); myFrame.repaint(); } }); +1 WORKS! Simple to the point. Perhaps one should start ALL the UI code inside invokeLater in first place? ;) Did not work for me in Java 7 on KDE 4.9.5 the window would still hide below other programs. What helped me was changing the order of bringing windows to the front. Instead of hiding one window and show the second window show the second window and then hide the first window (JFrame).  Windows has the facility to prevent windows from stealing focus; instead it flashes the taskbar icon. In XP it's on by default (the only place I've seen to change it is using TweakUI but there is a registry setting somewhere). In Vista they may have changed the default and/or exposed it as a user accessible setting with the out-of-the-box UI. Preventing windows from forcing themselves to the front and taking focus is a feature since Windows 2K (and I for one am thankful for it). That said I have a little Java app I use to remind me to record my activities while working and it makes itself the active window every 30 minutes (configurable of course). It always works consistently under Windows XP and never flashes the title bar window. It uses the following code called in the UI thread as a result of a timer event firing: if(getState()!=Frame.NORMAL) { setState(Frame.NORMAL); } toFront(); repaint(); (the first line restores if minimized... actually it would restore it if maximized too but I never have it so). While I usually have this app minimized quite often it's simply behind my text editor. And like I said it always works. I do have an idea on what your problem could be - perhaps you have a race condition with the setVisible() call. toFront() may not be valid unless the window is actually displayed when it is called; I have had this problem with requestFocus() before. You may need to put the toFront() call in a UI listener on a window activated event. 2014-09-07: At some point in time the above code stopped working perhaps at Java 6 or 7. After some investigation and experimentation I had to update the code to override the window's toFront method do this (in conjunction with modified code from what is above): setVisible(true); toFront(); requestFocus(); repaint(); ... public @Override void toFront() { int sta=super.getExtendedState()&~JFrame.ICONIFIED&JFrame.NORMAL; super.setExtendedState(sta); super.setAlwaysOnTop(true); super.toFront(); super.requestFocus(); super.setAlwaysOnTop(false); } As of Java 8_20 this code seems to be working fine. +1 for supporting not allowing windows to steal the focus. I hate when that happens when I'm typing in a document. I completely agree with you against stealing focus but in this precise case the user expects the application to come to the front. But it would uncool to change the registry settings and change the complete windows behavior.  This simple method worked for me perfectly in Windows 7:  private void BringToFront() { java.awt.EventQueue.invokeLater(new Runnable() { @Override public void run() { if(jFrame != null) { jFrame.toFront(); jFrame.repaint(); } } }); }"
662,A,"adjust selected File to FileFilter in a JFileChooser I'm writing a diagram editor in java. This app has the option to export to various standard image formats such as .jpg .png etc. When the user clicks File->Export you get a JFileChooser which has a number of FileFilters in it for .jpg .png etc. Now here is my question: Is there a way to have the extension of the default adjust to the selected file filter? E.g. if the document is named ""lolcat"" then the default option should be ""lolcat.png"" when the png filter is selected and when the user selects the jpg file filter the default should change to ""lolcat.jpg"" automatically. Is this possible? How can I do it? edit: Based on the answer below I wrote some code. But it doesn't quite work yet. I've added a propertyChangeListener to the FILE_FILTER_CHANGED_PROPERTY but it seems that within this method getSelectedFile() returns null. Here is the code. package nl.helixsoft; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.beans.PropertyChangeEvent; import java.beans.PropertyChangeListener; import java.io.File; import java.util.ArrayList; import java.util.List; import javax.swing.JButton; import javax.swing.JFileChooser; import javax.swing.JFrame; import javax.swing.filechooser.FileFilter; public class JFileChooserTest { public class SimpleFileFilter extends FileFilter { private String desc; private List<String> extensions; private boolean showDirectories; /** * @param name example: ""Data files"" * @param glob example: ""*.txt|*.csv"" */ public SimpleFileFilter (String name String globs) { extensions = new ArrayList<String>(); for (String glob : globs.split(""\\|"")) { if (!glob.startsWith(""*."")) throw new IllegalArgumentException(""expected list of globs like \""*.txt|*.csv\""""); // cut off ""*"" // store only lower case (make comparison case insensitive) extensions.add (glob.substring(1).toLowerCase()); } desc = name + "" ("" + globs + "")""; } public SimpleFileFilter(String name String globs boolean showDirectories) { this(name globs); this.showDirectories = showDirectories; } @Override public boolean accept(File file) { if(showDirectories && file.isDirectory()) { return true; } String fileName = file.toString().toLowerCase(); for (String extension : extensions) { if (fileName.endsWith (extension)) { return true; } } return false; } @Override public String getDescription() { return desc; } /** * @return includes '.' */ public String getFirstExtension() { return extensions.get(0); } } void export() { String documentTitle = ""lolcat""; final JFileChooser jfc = new JFileChooser(); jfc.setDialogTitle(""Export""); jfc.setDialogType(JFileChooser.SAVE_DIALOG); jfc.setSelectedFile(new File (documentTitle)); jfc.addChoosableFileFilter(new SimpleFileFilter(""JPEG"" ""*.jpg"")); jfc.addChoosableFileFilter(new SimpleFileFilter(""PNG"" ""*.png"")); jfc.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY new PropertyChangeListener() { public void propertyChange(PropertyChangeEvent arg0) { System.out.println (""Property changed""); String extold = null; String extnew = null; if (arg0.getOldValue() == null || !(arg0.getOldValue() instanceof SimpleFileFilter)) return; if (arg0.getNewValue() == null || !(arg0.getNewValue() instanceof SimpleFileFilter)) return; SimpleFileFilter oldValue = ((SimpleFileFilter)arg0.getOldValue()); SimpleFileFilter newValue = ((SimpleFileFilter)arg0.getNewValue()); extold = oldValue.getFirstExtension(); extnew = newValue.getFirstExtension(); String filename = """" + jfc.getSelectedFile(); System.out.println (""file: "" + filename + "" old: "" + extold + "" new: "" + extnew); if (filename.endsWith(extold)) { filename.replace(extold extnew); } else { filename += extnew; } jfc.setSelectedFile(new File (filename)); } }); jfc.showDialog(frame ""export""); } JFrame frame; void run() { frame = new JFrame(); JButton btn = new JButton (""export""); frame.add (btn); btn.addActionListener (new ActionListener() { public void actionPerformed(ActionEvent ae) { export(); } }); frame.setSize (300 300); frame.pack(); frame.setVisible(true); } public static void main(String[] args) { javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { JFileChooserTest x = new JFileChooserTest(); x.run(); } }); } } How about this: class MyFileChooser extends JFileChooser { public void setFileFilter(FileFilter filter) { super.setFileFilter(filter); FileChooserUI ui = getUI(); if( ui instanceof BasicFileChooserUI ) { BasicFileChooserUI bui = (BasicFileChooserUI) ui; String file = bui.getFileName(); if( file != null ) { String newFileName = ... change extension bui.setFileName( newFileName ); } } } }  You can also use a PropertyChangeListener on the SELECTED_FILE_CHANGED_PROPERTY prior to attaching your suffix. When the selected file gets checked against the new filter (and subsequently set to null) the SELECTED_FILE_CHANGED_PROPERTY event is actually fired before the FILE_FILTER_CHANGED_PROPERTY event. If the evt.getOldValue() != null and the evt.getNewValue() == null you know that the JFileChooser has blasted your file. You can then grab the old file's name (using ((File)evt.getOldValue()).getName() as described above) pull off the extension using standard string parsing functions and stash it into a named member variable within your class. That way when the FILE_FILTER_CHANGED event is triggered (immediately afterwards as near as I can determine) you can pull that stashed root name from the named member variable apply the extension for the new file filter type and set the JFileChooser's selected file accordingly.  The use of getAbsolutePath() in the previous change the current directory. I was surprised when the JFileChooser dialog displaying ""My documents"" directory change to the Netbeans's project directory when I selected a different FileFilter so I changed it to use getName(). I also used the JDK 6 FileNameExtensionFilter. Here is the code:  final JFileChooser fc = new JFileChooser(); final File sFile = new File(""test.xls""); fc.setSelectedFile(sFile); // Store this filter in a variable to be able to select this after adding all FileFilter // because addChoosableFileFilter add FileFilter in order in the combo box final FileNameExtensionFilter excelFilter = new FileNameExtensionFilter(""Excel document (*.xls)"" ""xls""); fc.addChoosableFileFilter(excelFilter); fc.addChoosableFileFilter(new FileNameExtensionFilter(""CSV document (*.csv)"" ""csv"")); // Force the excel filter fc.setFileFilter(excelFilter); // Disable All Files fc.setAcceptAllFileFilterUsed(false); // debug fc.addPropertyChangeListener(new PropertyChangeListener() { public void propertyChange(PropertyChangeEvent evt) { System.out.println(""Property name="" + evt.getPropertyName() + "" oldValue="" + evt.getOldValue() + "" newValue="" + evt.getNewValue()); System.out.println(""getSelectedFile()="" + fc.getSelectedFile()); } }); fc.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY new PropertyChangeListener() { public void propertyChange(PropertyChangeEvent evt) { Object o = evt.getNewValue(); if (o instanceof FileNameExtensionFilter) { FileNameExtensionFilter filter = (FileNameExtensionFilter) o; String ex = filter.getExtensions()[0]; File selectedFile = fc.getSelectedFile(); if (selectedFile == null) { selectedFile = sFile; } String path = selectedFile.getName(); path = path.substring(0 path.lastIndexOf(""."")); fc.setSelectedFile(new File(path + ""."" + ex)); } } });  Here is my solution and it works fine. It maybe helps someone. You sould create your own ""MyExtensionFileFilter"" class otherwise you have to modify the code. public class MyFileChooser extends JFileChooser { private File file = new File(""""); public MyFileChooser() { addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY new PropertyChangeListener() { public void propertyChange(PropertyChangeEvent e) { String filename = MyFileChooser.this.file.getName(); String extold = null; String extnew = null; if (e.getOldValue() == null || !(e.getOldValue() instanceof MyExtensionFileFilter)) { return; } if (e.getNewValue() == null || !(e.getNewValue() instanceof MyExtensionFileFilter)) { return; } MyExtensionFileFilter oldValue = ((MyExtensionFileFilter) e.getOldValue()); MyExtensionFileFilter newValue = ((MyExtensionFileFilter) e.getNewValue()); extold = oldValue.getExtension(); extnew = newValue.getExtension(); if (filename.endsWith(extold)) { filename = filename.replace(extold extnew); } else { filename += (""."" + extnew); } setSelectedFile(new File(filename)); } }); } @Override public void setSelectedFile(File file) { super.setSelectedFile(file); if(getDialogType() == SAVE_DIALOG) { if(file != null) { super.setSelectedFile(file); this.file = file; } } } @Override public void approveSelection() { if(getDialogType() == SAVE_DIALOG) { File f = getSelectedFile(); if (f.exists()) { String msg = ""File existes ...""; msg = MessageFormat.format(msg new Object[] { f.getName() }); int option = JOptionPane.showConfirmDialog(this msg """" JOptionPane.YES_NO_OPTION); if (option == JOptionPane.NO_OPTION ) { return; } } } super.approveSelection(); } @Override public void setVisible(boolean visible) { super.setVisible(visible); if(!visible) { resetChoosableFileFilters(); } } }  It looks like you can listen to the JFileChooser for a change on the FILE_FILTER_CHANGED_PROPERTY property then change the extension of the selected file appropriately using setSelectedFile(). EDIT: You're right this solution doesn't work. It turns out that when the file filter is changed the selected file is removed if its file type doesn't match the new filter. That's why you're getting the null when you try to getSelectedFile(). Have you considered adding the extension later? When I am writing a JFileChooser I usually add the extension after the user has chosen a file to use and clicked ""Save"": if (result == JFileChooser.APPROVE_OPTION) { File file = fileChooser.getSelectedFile(); String path = file.getAbsolutePath(); String extension = getExtensionForFilter(fileChooser.getFileFilter()); if(!path.endsWith(extension)) { file = new File(path + extension); } } fileChooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY new PropertyChangeListener() { public void propertyChange(PropertyChangeEvent evt) { FileFilter filter = (FileFilter)evt.getNewValue(); String extension = getExtensionForFilter(filter); //write this method or some equivalent File selectedFile = fileChooser.getSelectedFile(); String path = selectedFile.getAbsolutePath(); path.substring(0 path.lastIndexOf(""."")); fileChooser.setSelectedFile(new File(path + extension)); } });  Here is a method to obtain the current file name (as a String). In your property change listener for JFileChooser.FILE_FILTER_CHANGED_PROPERTY you make the following call: final JFileChooser fileChooser = new JFileChooser(); fileChooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY new PropertyChangeListener() { @Override public void propertyChange(PropertyChangeEvent e) { String currentName = ((BasicFileChooserUI)fileChooser.getUI()).getFileName(); MyFileFilter filter = (MyFileFilter) e.getNewValue(); // ... Transform currentName as you see fit using the newly selected filter. // Suppose the result is in newName ... fileChooser.setSelectedFile(new File(newName)); } }); The getFileName() method of javax.swing.plaf.basic.BasicFileChooserUI (the descendant of FileChooserUI returned by JFileChooser.getUI()) will return the contents of the dialog's text box that is used to type in the file name. It seems that this value is always set to a non-null String (it returns an empty string if the box is empty). On the other hand getSelectedFile() returns null if the user has not selected an existing file yet. It seems that the dialog's design is governed by the 'file selection' concept; that is while the dialog is visible getSelectedFile() only returns a meaningful value if the user has already selected an existing file or the program called setSelectedFile(). getSelectedFile() will return what the user typed in after the user clicks the approve (i.e. OK) button. The technique will only work for single-selection dialogs however changing file extension based on selected filter should also make sense for single files only (""Save As..."" dialogs or similar). This design was a subject of a debate at sun.com back in 2003 see the link for details.  Here's my attempt at this. It uses the accept() function to check whether or not the file passes the filter. If the filename does not the extension is appended to the end. JFileChooser jfc = new JFileChooser(getFile()) { public void approveSelection() { if (getDialogType() == SAVE_DIALOG) { File selectedFile = getSelectedFile(); FileFilter ff = getFileFilter(); // Checks against the current selected filter if (!ff.accept(selectedFile)) { selectedFile = new File(selectedFile.getPath() + "".txt""); } super.setSelectedFile(selectedFile); if ((selectedFile != null) && selectedFile.exists()) { int response = JOptionPane.showConfirmDialog( this ""The file "" + selectedFile.getName() + "" already exists.\n"" + ""Do you want to replace it?"" ""Ovewrite file"" JOptionPane.YES_NO_OPTION JOptionPane.WARNING_MESSAGE ); if (response == JOptionPane.NO_OPTION) return; } } super.approveSelection(); } };"
663,A,"WPF client sided and Java server sided? I would like to ask for some ideas regarding a scenario like this: 1) we need to build up a real time application that runs on a client. Some sort of stock trading functionality updates pushed to few clients in different geo locations every 25 secs. 2) the data is collected and pre-processed on the server side (Glassfish/Java) We have been discussing options and narrowed down 2 options: 1) WPF on the client 2) Swing (we previously evaluated JavaFX) What are your thoughts on: 1) easiness/speed of development of an ""medium"" complex client application in Swing vs. WPF 2) communication between WPF and an app server. If we would have a monolithic solution (Java) there are more options for hight throughput data exchange like Java Messaging without going through some .NET to Java bridges or sending data across via XML webservices etc. Any thoughts welcome. Thank you O_o That's very cool! +1 Swing vs WPF I've done extensive work using both Swing and WPF. Swing is at least a whole generation behind WPF. There really is no comparison. WPF's data binding and templates make all the difference. You will save a lot of time and money and end up with a much better user experience if you use WPF. NET Framework connection to Java back end Regarding using NET Framework on the front end against a Java back end: It is extremely easy to do and will generally perform as well as a pure Java solution. The exception would be if your main bottleneck is network bandwidth and you are serializing complex trees of objects. As itowlson noted WCF doesn't talk Java's proprietary binary protocols but there are still a lot of choices that can be used to talk to Java: XML JSON text (REST). I generally recommend good old-fashioned XML Web Services. It takes about two minutes to set up WCF to talk to a simple Java web service. XML Serialization typically only adds 5-10% to network bandwidth over binary so unless you have a lot of complex data and your pipe is very tight I would just use WPF/WCF talking directly to Java on the back end. If you do have lots of data and a tiny pipe you still want the WPF front end because it is so much better than Swing but you might consider using the WCF binary formatter over the wire and doing the conversion on the server. Just stumbled upon this question/answer. Just wanted to say that the 'It takes about two minutes to set up WCF to talk to a simple Java web service' is not entirely true. If you use security it can be a real pain in the ass.  Regarding communication between WPF and an application server you can use all of .NET's messaging facilities specifically including Windows Communication Foundation. However WCF does not have out-of-the-box support for binary messaging to Java (see http://stackoverflow.com/questions/107076/does-wcf-play-well-with-java for discouraging info) so you would need to use XML a custom transport that could be supported on both ends (such as MQ) or a bridge. (Can't help with the comparison of WPF vs. Swing as I have no experience of Swing.)"
664,A,"setVisibile(false) not hiding the frame Instead it just opens the new frame and when that one closes.. it not only doesnt hide and go back to the main frame as its supposed to.. it opens a second version of the first frame... public class FreelanceBillingUI extends javax.swing.JFrame { public FreelanceBillingUI(){ initComponents(); } /** This method is called from within the constructor to * initialize the form. * WARNING: Do NOT modify this code. The content of this method is * always regenerated by the Form Editor. */ @SuppressWarnings(""unchecked"") // <editor-fold defaultstate=""collapsed"" desc=""Generated Code""> private void initComponents() { jPanel1 = new javax.swing.JPanel(); jPanel2 = new javax.swing.JPanel(); jButton1 = new javax.swing.JButton(); jButton2 = new javax.swing.JButton(); jButton3 = new javax.swing.JButton(); jButton4 = new javax.swing.JButton(); jButton5 = new javax.swing.JButton(); jLabel1 = new javax.swing.JLabel(); jLabel2 = new javax.swing.JLabel(); jLabel3 = new javax.swing.JLabel(); jLabel4 = new javax.swing.JLabel(); jLabel5 = new javax.swing.JLabel(); jSeparator1 = new javax.swing.JSeparator(); jSeparator2 = new javax.swing.JSeparator(); jSeparator3 = new javax.swing.JSeparator(); jSeparator4 = new javax.swing.JSeparator(); jLabel6 = new javax.swing.JLabel(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); setResizable(false); jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1 1 1 1) ""Little Bit of Crazy Design Studio"" javax.swing.border.TitledBorder.CENTER javax.swing.border.TitledBorder.DEFAULT_POSITION new java.awt.Font(""Bleeding Cowboys"" 0 48))); // NOI18N javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1); jPanel1.setLayout(jPanel1Layout); jPanel1Layout.setHorizontalGroup( jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0 660 Short.MAX_VALUE) ); jPanel1Layout.setVerticalGroup( jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0 0 Short.MAX_VALUE) ); jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder() ""State Your Purpose"" javax.swing.border.TitledBorder.CENTER javax.swing.border.TitledBorder.DEFAULT_POSITION new java.awt.Font(""Northwood High"" 1 36))); // NOI18N jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/my/freelancebillingapp/1256082409_user_female.png""))); // NOI18N jButton1.addMouseListener(new java.awt.event.MouseAdapter() { public void mouseClicked(java.awt.event.MouseEvent evt) { custClicked(evt); } }); jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/my/freelancebillingapp/1256081773_coins.png""))); // NOI18N jButton2.addMouseListener(new java.awt.event.MouseAdapter() { public void mouseClicked(java.awt.event.MouseEvent evt) { billClicked(evt); } }); jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/my/freelancebillingapp/1256082503_todo_list_remove.png""))); // NOI18N jButton3.addMouseListener(new java.awt.event.MouseAdapter() { public void mouseClicked(java.awt.event.MouseEvent evt) { paidClicked(evt); } }); jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/my/freelancebillingapp/1256082170_invoice.png""))); // NOI18N jButton4.addMouseListener(new java.awt.event.MouseAdapter() { public void mouseClicked(java.awt.event.MouseEvent evt) { invoiceClicked(evt); } }); jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/my/freelancebillingapp/1256082607_user_male_remove.png""))); // NOI18N jButton5.addMouseListener(new java.awt.event.MouseAdapter() { public void mouseClicked(java.awt.event.MouseEvent evt) { removeClicked(evt); } }); jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT); jLabel1.setText(""Customers""); jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT); jLabel2.setText(""Billing""); jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT); jLabel3.setText(""Paid Status""); jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT); jLabel4.setText(""Invoice""); jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT); jLabel5.setText(""Remove""); jSeparator1.setForeground(new java.awt.Color(240 240 240)); jSeparator1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1 1 1 1)); jSeparator2.setForeground(new java.awt.Color(240 240 240)); jSeparator3.setForeground(new java.awt.Color(240 240 240)); jSeparator4.setForeground(new java.awt.Color(240 240 240)); javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2); jPanel2.setLayout(jPanel2Layout); jPanel2Layout.setHorizontalGroup( jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel2Layout.createSequentialGroup() .addContainerGap() .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel2Layout.createSequentialGroup() .addComponent(jButton1 javax.swing.GroupLayout.PREFERRED_SIZE 85 javax.swing.GroupLayout.PREFERRED_SIZE) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addComponent(jSeparator1 javax.swing.GroupLayout.PREFERRED_SIZE 50 javax.swing.GroupLayout.PREFERRED_SIZE)) .addComponent(jLabel1)) .addGap(19 19 19) .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(jLabel2) .addComponent(jButton2 javax.swing.GroupLayout.PREFERRED_SIZE 85 javax.swing.GroupLayout.PREFERRED_SIZE)) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addComponent(jSeparator2 javax.swing.GroupLayout.PREFERRED_SIZE 50 javax.swing.GroupLayout.PREFERRED_SIZE) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel2Layout.createSequentialGroup() .addComponent(jLabel3) .addGap(18 18 18)) .addComponent(jButton3 javax.swing.GroupLayout.PREFERRED_SIZE 85 javax.swing.GroupLayout.PREFERRED_SIZE)) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addComponent(jSeparator3 javax.swing.GroupLayout.PREFERRED_SIZE 50 javax.swing.GroupLayout.PREFERRED_SIZE) .addGap(18 18 18) .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel2Layout.createSequentialGroup() .addComponent(jButton4 javax.swing.GroupLayout.PREFERRED_SIZE 85 javax.swing.GroupLayout.PREFERRED_SIZE) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addComponent(jSeparator4 javax.swing.GroupLayout.PREFERRED_SIZE 50 javax.swing.GroupLayout.PREFERRED_SIZE)) .addComponent(jLabel4)) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(jButton5 javax.swing.GroupLayout.PREFERRED_SIZE 85 javax.swing.GroupLayout.PREFERRED_SIZE) .addComponent(jLabel5)) .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE Short.MAX_VALUE)) ); jPanel2Layout.setVerticalGroup( jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel2Layout.createSequentialGroup() .addContainerGap(60 Short.MAX_VALUE) .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(javax.swing.GroupLayout.Alignment.TRAILING jPanel2Layout.createSequentialGroup() .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING) .addComponent(jLabel5) .addComponent(jLabel3) .addComponent(jLabel1) .addComponent(jLabel2) .addComponent(jLabel4)) .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel2Layout.createSequentialGroup() .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING) .addComponent(jButton5 javax.swing.GroupLayout.PREFERRED_SIZE 73 javax.swing.GroupLayout.PREFERRED_SIZE) .addComponent(jButton3 javax.swing.GroupLayout.PREFERRED_SIZE 73 javax.swing.GroupLayout.PREFERRED_SIZE) .addComponent(jButton1 javax.swing.GroupLayout.PREFERRED_SIZE 73 javax.swing.GroupLayout.PREFERRED_SIZE) .addComponent(jButton2 javax.swing.GroupLayout.PREFERRED_SIZE 73 javax.swing.GroupLayout.PREFERRED_SIZE) .addComponent(jButton4 javax.swing.GroupLayout.PREFERRED_SIZE 73 javax.swing.GroupLayout.PREFERRED_SIZE))) .addGroup(jPanel2Layout.createSequentialGroup() .addGap(29 29 29) .addComponent(jSeparator2 javax.swing.GroupLayout.PREFERRED_SIZE 10 javax.swing.GroupLayout.PREFERRED_SIZE)) .addGroup(jPanel2Layout.createSequentialGroup() .addGap(33 33 33) .addComponent(jSeparator1 javax.swing.GroupLayout.PREFERRED_SIZE 10 javax.swing.GroupLayout.PREFERRED_SIZE)) .addGroup(jPanel2Layout.createSequentialGroup() .addGap(26 26 26) .addComponent(jSeparator4 javax.swing.GroupLayout.PREFERRED_SIZE 10 javax.swing.GroupLayout.PREFERRED_SIZE)))) .addGroup(javax.swing.GroupLayout.Alignment.TRAILING jPanel2Layout.createSequentialGroup() .addComponent(jSeparator3 javax.swing.GroupLayout.PREFERRED_SIZE 10 javax.swing.GroupLayout.PREFERRED_SIZE) .addGap(42 42 42)))) ); jLabel6.setText(""Copyright Jason Bodary - Little Bit of Crazy Design Studio Inveniemus viam aut faciemus.""); javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane()); getContentPane().setLayout(layout); layout.setHorizontalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addContainerGap() .addComponent(jPanel2 javax.swing.GroupLayout.PREFERRED_SIZE javax.swing.GroupLayout.DEFAULT_SIZE javax.swing.GroupLayout.PREFERRED_SIZE)) .addGroup(layout.createSequentialGroup() .addGap(37 37 37) .addComponent(jPanel1 javax.swing.GroupLayout.PREFERRED_SIZE javax.swing.GroupLayout.DEFAULT_SIZE javax.swing.GroupLayout.PREFERRED_SIZE))) .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE Short.MAX_VALUE)) .addGroup(javax.swing.GroupLayout.Alignment.TRAILING layout.createSequentialGroup() .addContainerGap(165 Short.MAX_VALUE) .addComponent(jLabel6) .addGap(147 147 147)) ); layout.setVerticalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addContainerGap() .addComponent(jPanel1 javax.swing.GroupLayout.PREFERRED_SIZE javax.swing.GroupLayout.DEFAULT_SIZE javax.swing.GroupLayout.PREFERRED_SIZE) .addGap(30 30 30) .addComponent(jPanel2 javax.swing.GroupLayout.PREFERRED_SIZE javax.swing.GroupLayout.DEFAULT_SIZE javax.swing.GroupLayout.PREFERRED_SIZE) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED) .addComponent(jLabel6) .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE Short.MAX_VALUE)) ); pack(); }// </editor-fold> private void custClicked(java.awt.event.MouseEvent evt) { new FreelanceBillingUI().setVisible(false); new customerInfoUI().setVisible(true); } private void billClicked(java.awt.event.MouseEvent evt) { // TODO add your handling code here: } private void paidClicked(java.awt.event.MouseEvent evt) { // TODO add your handling code here: } private void invoiceClicked(java.awt.event.MouseEvent evt) { // TODO add your handling code here: } private void removeClicked(java.awt.event.MouseEvent evt) { // TODO add your handling code here: } /** * @param args the command line arguments */ public static void main(String args[]) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new FreelanceBillingUI().setVisible(true); new customerInfoUI().setVisible(false); } }); } // Variables declaration - do not modify private javax.swing.JButton jButton1; private javax.swing.JButton jButton2; private javax.swing.JButton jButton3; private javax.swing.JButton jButton4; private javax.swing.JButton jButton5; private javax.swing.JLabel jLabel1; private javax.swing.JLabel jLabel2; private javax.swing.JLabel jLabel3; private javax.swing.JLabel jLabel4; private javax.swing.JLabel jLabel5; private javax.swing.JLabel jLabel6; private javax.swing.JPanel jPanel1; private javax.swing.JPanel jPanel2; private javax.swing.JSeparator jSeparator1; private javax.swing.JSeparator jSeparator2; private javax.swing.JSeparator jSeparator3; private javax.swing.JSeparator jSeparator4; // End of variables declaration } Nothing like unreadable NetBeans generated code new FreelanceBillingUI().setVisible(false); new customerInfoUI().setVisible(true); That's what it is suppose to do create new frames. You should keep references to your old frames and call setVisible(false) on them not on newly created instances.  You have to change private void custClicked(java.awt.event.MouseEvent evt) { new FreelanceBillingUI().setVisible(false); new customerInfoUI().setVisible(true); } Into: private void custClicked(java.awt.event.MouseEvent evt) { this.setVisible(false); new customerInfoUI().setVisible(true); } Because you make in the first code a new instance from FreelanceBillingUI by writing new FreelanceBillingUI(). That new instance who's not visible make you invisible. So nothing will happen. So you have to know what the difference between a new instance (calling a construcor) and a variable. thanks for great help  You can use .dispose(); then call it again.  As Pilgrim already said you've got a problem because you're not holding an instance to the JFrame that you're creating. You should be doing something like: FreelanceBillingUI frame = newFreelanceBillingUI(); frame.setVisible(true); ... more stuff to do with the frame... frame.setVisible(false); Why are you trying to make the frame invisible? Are you trying to close it definitively or you just want to hide it temporarily? Do you want to close the application when the frame is closed? You should take a look at the method setDefaultCloseOperation of JFrame. For instance with the following code you can configure you frame to close the application when the frame is closed: frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); Take a look at the other possible values (DISPOSE_ON_CLOSE DO_NOTHING_ON_CLOSE and HIDE_ON_CLOSE). Because the program will have 5 different sections each section has it's own window. When you go from the main menu to one of the options the main menu window should go away and when you close the section window the main menu should come back. Even if I set it to FreelanceBillingUI frame = newFreelanceBillingUI(); when I call - frame.setVisible(true); under the event for the button it just tells me it cant find the variable."
665,A,"Why does my application still run after closing main window? If I make a JFrame like this public static void main(String[] args) { new JFrame().setVisible(true); } then after closing the window the appication doesn't stop (I need to kill it). What is the proper way of showing application's main windows ? I'd also like to know a reason of a proposed solution. Thanks in advance. You can set a window listener to the frame so the program terminates after you close it.  frame.addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent e) { System.exit(0); } }  You must dispose the frame invoking the dispose method in your window listener or using setDefaultCloseOperation. For the argument of the last one you can use two options: DISPOSE_ON_CLOSE or EXIT_ON_CLOSE. DISPOSE_ON_CLOSE only dispose the frame resources. EXIT_ON_CLOSE disposes the frame resources and then invokes System.exit. There is no real difference between the two unless you have non daemon threads. I prefer to use DISPOSE_ON_CLOSE because this way I'm able to notice if I forgot to terminate a thread because the JVM will stop if there are no more threads running. That's also the reason closing a Frame without disposing will not terminate the application since Swing creates a thread to handle events that is terminated only when dispose is invoked.  You should call the setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); on your JFrame. Example code: public static void main(String[] args) { Runnable guiCreator = new Runnable() { public void run() { JFrame fenster = new JFrame(""Hallo Welt mit Swing""); fenster.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); fenster.setVisible(true); } }; SwingUtilities.invokeLater(guiCreator); } totally agree that dispose_on_close should be the default. For instance you need to also setDefaultcloseOperation for modal dialogs or they'll hang around and disallow your app from exiting. yikes. Why should it be the default behavior? Many applications create multiple windows. If that were the default you'd have to change it whenever you create a new window. I hate Java sometimes. That should be the default behaviour in my opinion. Ok i found the reason - there are two additional AWT threads running and that's why my application doesn't end when the ""main"" method ends. I always forget that JFrame is nonmodal and creates those threads.  There's a difference between the application window and the application itself... The window runs in its own thread and finishing main() will not end the application if other threads are still active. When closing the window you should also make sure to close the application possibly by calling System.exit(0); Yuval =8-)"
666,A,Java (Swing) - Drag two windows at once How can I have one window move with another? i.e. I'd like a JDialog to follow a JFrame when the JFrame is being dragged. If the JFrame moves by (+5 +20) the JDialog needs to move the same. I've tried using ComponentListeners but I only receive drag events in chunks which causes the JDialog window to be jumpy while dragging the main JFrame. I've tried using MouseListeners but I can't figure out how to detect events on the actual frame of the JFrame. Try using the ComponentListener.componentMoved event instead of monitoring drag events on the JFrame.  AFAIK here is no move multiple windows in AWT. To get the moves to be called at a similar time I guess you want the JFrame decorations to be PL&F rendered. Put in a PL&F-specific hack to do the moves yourself moving both windows at almost the same time. You may still have a problem with exposing bits of windows only to cover them up causing some performance degradation. Can you direct me to any specific classes for the PL&F that I can use to jump start this hack?  The component listener method works perfectly. I did something like this: Point p = this.getLocation(); p.x += this.getWidth() + 10; this.getOwner().setLocation(p); Where the '10' is the space between the current window(a JDialog) and its owner which is to its right.
667,A,Getting the unsaved dot on a Swing Mac OSX app with quaqua LAF I am trying to make it so my app shows the unsaved dot in my swing windows when running on Mac with quaqua LAF. When I say unsaved dot I mean in mac apps when you modify something the red dot in the upper left changes from an empty red circle to a circle that is mostly filled in with a darker red. Is there some flag I can set to make this dot show up or disappear? See here (or the official Apple documentation). It's not a feature of Quaqua specifically.
668,A,"Setting a button I have 2 buttons. One is ""add"". The other is ""cancel"". In the cancel button action I want to write that until the add method is not called this button do nothing. How can I do that? When you initialize your app you could call setEnabled(false) on your cancel JButton. Then in your handler for your add JButton you could call setEnabled(true) on the cancel JButton. Here is a demo from Sun's Swing Tutorial for disabling/enabling JButtons (source code available at link).  Disable the cancel button initially. Then in the add action listener enable the cancel button. JButton add = new JButton(""Add""); JButton cancel = new JButton(""Cancel""); cancel.setEnabled(false); // Then something along these lines... add.addActionListener(new ActionListener(){ public void actionPerformed(ActionEvent e) { cancel.setEnabled(true); } }); NOTE: I haven't used Swing in a while so my syntax could be off... Thanks a lotI get it[:-)]"
669,A,"Detect design time in NetBeans When using the Swing graphical editor in NetBeans is it possible for a custom component to detect that it's design time? E.g. public CustomComponent() { initComponents(); if (!isDesignTime()) { someIcon = IconFactory.loadIcon(""icons/SomeIcon.png""); } } Basically I'm after something like .net's Component.DesignMode Try: java.beans.Beans.isDesignTime() Thanks! That was exactly what I was after :)"
670,A,"Tristate Checkboxes in Java I could really use a tri-stated checkbox in Java. It sounds like a simple thing but I've only seen really ugly implementations [note: link now broken]. Three radio buttons just take up too much real estate and will probably be confusing for the users in my case. It's basically for a search dialog. I need true false or ""don't care"" options. Is there a different technique that people use? Use a drop-down. +1 good idea. if a UI component is hard to code and nonstandard it will feel that way to the user as well. When was the last time you used a tri-state checkbox in that way? I never have. Although I agree with @byron's point a tri-state check box is actually fairly standard from a users point of view. Which users? I'm a developer and power user and I despise tri-state checkboxes usually because it's not clear what the third state means; typically it means some detail is being hidden from you. It's a usability and accessibility nightmare. Most of the time it means that the checkbox applies to a class of things and that those things have different states and you don't want them changed. Checking it checks them all leave it in the third state to not change it. Very common even for power users. Typical usage of tri-state checkboxes: changing properties on multi object selection grayed+selected third state meaning ""some items have this property and some have not and I won't change any of them"". Most common in Microsoft applications. Most usefull use for a tristate is this: No state On and off. When you use the standard 2state you only have on and off and when you want to make sure the user actually choose one you need the third state  In this implementation the three state can be only set via programmatically. To be Look and Feel portable it use images that must be placed inside the the same java package. public class TristateCheckBox extends JCheckBox { private static final long serialVersionUID = 1L; private boolean halfState; private static Icon selected = new javax.swing.ImageIcon(TristateCheckBox.class.getResource(""selected.png"")); private static Icon unselected = new javax.swing.ImageIcon(TristateCheckBox.class.getResource(""unselected.png"")); private static Icon halfselected = new javax.swing.ImageIcon(TristateCheckBox.class.getResource(""halfselected.png"")); @Override public void paint(Graphics g) { if (isSelected()) { halfState = false; } setIcon(halfState ? halfselected : isSelected() ? selected : unselected); super.paint(g); } public boolean isHalfSelected() { return halfState; } public void setHalfSelected(boolean halfState) { this.halfState = halfState; if (halfState) { setSelected(false); repaint(); } } } Sample frame: public class NewJFrame19 extends javax.swing.JFrame { private final TristateCheckBox myCheckBox; public NewJFrame19() { myCheckBox = new TristateCheckBox(); myCheckBox.setText(""123123""); add(myCheckBox); jButton1 = new javax.swing.JButton(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); getContentPane().setLayout(new java.awt.FlowLayout()); jButton1.setText(""jButton1""); jButton1.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton1ActionPerformed(evt); } }); getContentPane().add(jButton1); pack(); } private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) { myCheckBox.setHalfSelected(true); } public static void main(String args[]) { try { for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) { if (""Windows"".equals(info.getName())) { javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } } } catch (ClassNotFoundException ex) { java.util.logging.Logger.getLogger(NewJFrame19.class.getName()).log(java.util.logging.Level.SEVERE null ex); } catch (InstantiationException ex) { java.util.logging.Logger.getLogger(NewJFrame19.class.getName()).log(java.util.logging.Level.SEVERE null ex); } catch (IllegalAccessException ex) { java.util.logging.Logger.getLogger(NewJFrame19.class.getName()).log(java.util.logging.Level.SEVERE null ex); } catch (javax.swing.UnsupportedLookAndFeelException ex) { java.util.logging.Logger.getLogger(NewJFrame19.class.getName()).log(java.util.logging.Level.SEVERE null ex); } /* Create and display the form */ java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new NewJFrame19().setVisible(true); } }); } private javax.swing.JButton jButton1; } We used this approach for a checkbox denoting the aggregation of on/off states. Interaction toggles all on/off the intermediate state is reachable only via interaction with the individual elements. Works quite nicely and I think it's more sound in terms of UI design.  I found a way to make a tri-state checkbox by simply adding a listener:  public class TriStateActionListener implements ActionListener{ final protected Icon icon; public TriStateActionListener(Icon icon){ this.icon=icon; } public static Boolean getState(javax.swing.JCheckBox cb){ if (cb.getIcon()==null) return null; if (cb.isSelected()) return true; else return false; } public void actionPerformed(ActionEvent e) { javax.swing.JCheckBox cb=(javax.swing.JCheckBox)e.getSource(); if (!cb.isSelected()){ cb.setIcon(icon); } else if (cb.getIcon()!=null){ cb.setIcon(null); cb.setSelected(false); } } } Then in the application code it's just a single line:  jCheckBox1.addActionListener(new TriStateActionListener(getResourceMap().getIcon(""TriStateIcon""))); After all the feedback I'm thinking a drop-down may be a better choice. But I wanted to share my code here for everyone else.  Change the UI. Tristate check-box is unusual and can really confuse users. The drop down is good option but for more then one occurrence within dialog it will also bring a lot of confusion to user.  That ""ugly implementations"" is an old link. One of the suggestions on that page was updated a couple of years ago. I haven't tested the old implementation so I don't know if the new one is any better or worse. TristateCheckBox Revisited Yes i think Heinz Kabutz done this very well. I would also recommend that!  JIDE have open sourced some very nice functionality in their Common Layer one of which happens to be a tristate checkbox I would suggest that you go run the webstart demo to see if it meets your needs  I'd just use the one you posted. As long as your complexity is in another class (that works) and it acts just like any other control who cares? (That seems to be the assumption behind all of swing most swing classes seem to be about this complicated.)  Tristate check-boxes are standard UI idiom for Treeviews with partially checked children nodes. They are widely used in layer management in complex hierarchial views such as Google Earth."
671,A,How to draw circle on JPanel? Java 2D I have a JPanel for which I set some image as the background. I need to draw a bunch of circles on top of the image. Now the circles will be positioned based on some coordinate xy and the size will be based on some integer size. This is what I have as my class. import java.awt.Dimension; import java.awt.Graphics; import java.awt.Image; import javax.swing.JPanel; class ImagePanel extends JPanel { private Image img; CircleList cList; //added this public ImagePanel(Image img) { this.img = img; Dimension size = new Dimension(img.getWidth(null) img.getHeight(null)); setPreferredSize(size); setMinimumSize(size); setMaximumSize(size); setSize(size); setLayout(null); cList = new CircleList(); //added this } public void paintComponent(Graphics g) { g.drawImage(img 0 0 null); cList.draw(null); //added this } } How can I create some method that can performed this? I just saw that Ellipse2D needs a double or a float I guess I can use a double for the size. Have you looked at JXLayer? It's an awesome library that allows you to layer special painting on top of any GUI element in an obvious way. I believe that will be included in the main java libraries for JDK7  Well you will probably want to create an ArrayList to store the information about the circles to be drawn. Then when the paintComponent() method is invoked you just loop through the ArrayList and draw the circles. Custom Painting Approaches shows how this might be done for a rectangle. You can modify the code for an oval as well you would probably add methods to update the Array with the location information rather than by doing it dynamically.  Your approach can be something similar to this in which you use a class CircleList to hold all the circles and the drawing routine too: class CircleList { static class Circle { public float x y radius; } ArrayList<Circle> circles; public CirclesList() { circles = new ArrayList<Circle>(); } public void draw(Graphics2D g) // draw must be called by paintComponent of the panel { for (Circle c : circles) g.fillOval(c.x c.y c.radius c.radius) } } Ok so I created I CircleList with two arbitrary circles in the linked list. When I call circleList.draw(null) inside the ImagePanel class nothing happens. The GUI actually freezes. What's the parameter for the draw method when I call it? i noted in the original post the things that I added ok i just casted g to Graphics2D. thanks graphics2D was the one.. the same graphics component of paintComponent of JPanel. I'm used always to cast it to Graphics2D because it's more powerful.  Easiest thing to do would be to place something along these lines into your paintComponent method. int x = ...; int y = ...; int radius = ...; g.drawOval(x y radius radius); +1'd to get you on 0 since you edited the answer and it now gives accurate tips. Hell yea for changing things in dead posts. @camickr. thx to you although I basically gave the same answer as Jack I'm on -1 You gave wrong or misleading information. If I had not commented on this then other people who read the posting might think using the getGraphics() method is a cool idea. When newbies have to ask a basic question like this they should be given information about the proper way to do things. -1 Using getGraphics() will NOT work. Yes it will draw the oval once but it will be removed as soon as JAVA determines the panel needs to be repainted. Custom painting is done by override the paintComponent() method. Are you kidding me? Then just leave `getGraphics()` and move the code into the `paintComponent` method.
672,A,"Bus or listeners/delegates in client-side Swing application? Building a client-side swing application what should be notified on a bus (application-wide message system similar in concept to JMS but much simpler) and what should be notified using direct listeners? When using a bus I always have an unescapable feeling of ""I have no idea who uses that and where"". Also no set order hard to veto events hard to know exactly what's going on at a set time. On the other hand using listeners means either directly referencing the source object (coupling) or passing the reference through myriad conversions (A--b_listener-->B B--c_listener-->C only because a needs to know something only C can to tell but B has no interest in). So are there any rule of the thumb regarding this? Any suggestion how to balance? In my experience trying to make Swing do something it wasn't designed for or doesn't want you to do is extremely painful. I would go with the simplest thing that would work; keep your code clean do it the ""Swing Way"" until you start seeing problems.  Well I can imagine the approach where models are updated using BUS like system and events from models are delegated using listeners. Simple scenario: I got server side which represents producer of data. Then on client side a got consumer interface which consumes all incoming messages and transform them into my internal messages/DTOs and push them into bus which distributes them into application model(s). These model process incoming messages and decide to notify interested components using listeners.  Event buses are very very useful tools for providing decoupling in certain architectures. Listeners are easy to implement but they have significant limitations when your object and dependency graph gets large. Listeners tend to run into problems with cyclic dependencies (events can 'bounce' in odd ways and you wind up having to play games to ensure that you don't get stuck. Most binding frameworks do this for you but there's something distasteful about knowing that listener events are shooting off into a million places). I make this kind of decision based on project size and scalability. If it's a big app or there are aspects of the app that can by dynamic (like plugin modules etc...) then a bus is a good way to keep the architecture clean (OSGI-like module containers are another approach but heavier weight). If you are considering a bus architecture I recommend that you take a look at the Event Bus project - it works very well with Swing and provides a robust out of the box solution for what you are asking about. Link [Event Bus](https://eventbus.dev.java.net/) is dead. Are you referring to [EventBus](http://www.eventbus.org/) or [simpleeventbus](http://code.google.com/p/simpleeventbus/) or something else? Whew - the code at EventBus looks the same as what I pointed at back in 2008 but I haven't followed the project that closely...  The convention in Java Swing is to use listeners heavily. Sticking with the convention improves maintainability but stifles innovation. I've not encountered the bus approach in Swing but I find it interesting."
673,A,"Java Swing JEditorPane: manipulating styled documents I have model that is a queue of Strings associated with enum types. I'm trying to display that model in a JEditorPane with each element in the queue as a separate HTML paragraph that has attributes based based on the associated enum type. However my updating methods are not doing what I want. I tried writing the HTML strings directly to the document (e.g. I take the Strings prepend <p style=""color:red""> and append </p> and then insert them at the end of the document) but that gives me the html tags in the output (instead of as formatting) - which of course is inconsistent with the result of putting the tags on the string that I use construct the document with JEditorPane(""text/html""String foo). I've also tried inserting with an AttributeSet but apparently I'm doing that wrong as well. Any suggestions? I've never had much luck playing with HTML in a JEditorPane. I just use attributes in a JTextPane. Something like: SimpleAttributSet keyWord = new SimpleAttributeSet(); StyleConstants.setForeground(keyWord Color.RED); StyleConstants.setBackground(keyWord Color.YELLOW); StyleConstants.setBold(keyWord true); try { doc.insertString(doc.getLength() ""\nSome more text"" keyWord ); } catch(Exception e) {} This works great thanks; I would still like to eventually support HTML formatting but that's not necessary at the moment and I think I've kept the concerns separate enough that it'll be a simple substitution later. This link show my best effort at using the HTMLEditorKit. Maybe you can figure it out better than me: http://forums.sun.com/thread.jspa?forumID=57&threadID=707909"
674,A,"Images and Panels I'm having a problem adding a JPanel on top of an Image. This is what I'm trying to do: Image bgImage = loadImage(filename); JPanel jp = new JPanel(); jp.setBounds(100100100100); jp.setOpaque(true); jp.setBackgroudColor(Color.red); bgImage.add(jp); After doing this I only see the bgImage. I tried everything but I still can't show the panel. Can somebody help me? There is a typo in `setBackgroundcolor`. There is no method named `setBackgroundColor` on `JPanel` anyway :-) You cannot place a component inside an Image. What you want to do is paint the Image onto the background of a swing component (like JPanel). All swing components have a paint() method that calls these three methods (perhaps not quite this order): paintComponent() paintChildren() paintBorder(). So you want to override the paintComponent() method to paint your background image over the panel. When this runs your custom method will be called and then the paintChildren() method will be called which will paint all ""child"" components over the top of your background image: class BackgroundImagePanel extends JPanel { public void setBackgroundImage(Image backgroundImage) { this.backgroundImage = backgroundImage; } @Override protected void paintComponent(Graphics graphics) { super.paintComponent(graphics); graphics.drawImage(backgroundImage 0 0 this); } private Image backgroundImage; } BackgroundImagePanel panel = new BackgroundImagePanel(); panel.setBackgroundImage(image); panel.add(new JTextField(""Enter text here..."")); panel.add(new JButton(""Press Me"")); uhm sorry if my code is such a trash. i have a longer code that's working (not the one on top). But i really need to place the panel on top of the image because from there i will be placing swing components...simply put i want an Image as my background an 'invisible' panel on top and swing components last. :| OK understood. I have edited my answer to be more descriptive.  The ""BackgroundImagePanel"" solution paints the image at its actual size. If this is a requirement then you can just use a JLabel instead of creating a custom component. The BackgroundPanel entry shows how you can do this. It also provides a background panel with more custom image painting solutions that will allow you to scale and tile the image if this is part of your requirement."
675,A,"How to make a JFrame Modal in Swing java I have created one GUI in which I have used a JFrame. How should I make it Modal? See also [The Use of Multiple JFrames Good/Bad Practice?](http://stackoverflow.com/a/9554657/418556) Your best bet is to use a JDialog instead of a JFrame if you want to make the window modal. Check out details on the introduction of the Modality API in Java 6 for info. There is also a tutorial. Edit: updated Modality API link & added tutorial link (nod to @spork for the bump). Afraid that appears to be the only solution. I'm fighting this same problem with some inherited code. I've got a JFrame that I really need to be modal. Doing the work to convert it all to JDialog is really going to be ugly... :-( Can you hack it through? Create an invisible modal JDialog make it instantiate the JFrame and when the JFrame is closed capture the values if necessary and close the JDialog updated link to original article & added sporks tutorial link - thanks. The link is broken :( still people trying to learn from this 3 years on! Try this in 2013: http://docs.oracle.com/javase/tutorial/uiswing/misc/modality.html  if you have parent and client frame and you want to make child frame as model. <YOUR_CHILD_FRAME_INSTANCE>.setAlwaysOnTop(true); And it will Do. That is not correct. Though the window stays on top other frames can still be clicked and used.  Create a new JPanel form Add your desired components and code to it YourJPanelForm stuff = new YourJPanelForm(); JOptionPane.showMessageDialog(nullstuff""Your title here bro""JOptionPane.PLAIN_MESSAGE); Your modal dialog awaits... Ou but there is an OK button which I don't want.  You can create a class that is passed a reference to the parent JFrame and holds it in a JFrame variable. Then you can lock the frame that created your new frame. parentFrame.disable(); //Some actions parentFrame.enable(); this was usefull for me thanx @Kamil  not sure the contetns of your JFrame if you ask some input from users you can use JOptionPane this also can set JFrame as modal  JFrame frame = new JFrame(); String bigList[] = new String[30]; for (int i = 0; i < bigList.length; i++) { bigList[i] = Integer.toString(i); } JOptionPane.showInputDialog( frame ""Select a item"" ""The List"" JOptionPane.PLAIN_MESSAGE null bigList ""none""); }  There's a bit of code that might help: import java.awt.Component; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.WindowAdapter; import java.awt.event.WindowEvent; import javax.swing.JFrame; import javax.swing.JMenu; import javax.swing.JMenuBar; import javax.swing.JMenuItem; public class ModalJFrame extends JFrame { Object currentWindow = this; public ModalJFrame() { super(); super.setTitle(""Main JFrame""); super.setSize(500 500); super.setResizable(true); super.setLocationRelativeTo(null); JMenuBar menuBar = new JMenuBar(); super.setJMenuBar(menuBar); JMenu fileMenu = new JMenu(""File""); JMenu editMenu = new JMenu(""Edit""); menuBar.add(fileMenu); menuBar.add(editMenu); JMenuItem newAction = new JMenuItem(""New""); JMenuItem openAction = new JMenuItem(""Open""); JMenuItem exitAction = new JMenuItem(""Exit""); JMenuItem cutAction = new JMenuItem(""Cut""); JMenuItem copyAction = new JMenuItem(""Copy""); JMenuItem pasteAction= new JMenuItem(""Paste""); fileMenu.add(newAction); fileMenu.add(openAction); fileMenu.addSeparator(); fileMenu.add(exitAction); editMenu.add(cutAction); editMenu.add(copyAction); editMenu.addSeparator(); editMenu.add(pasteAction); newAction.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent arg0) { JFrame popupJFrame = new JFrame(); popupJFrame.addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent e) { ((Component) currentWindow).setEnabled(true); } }); ((Component) currentWindow).setEnabled(false); popupJFrame.setTitle(""Pop up JFrame""); popupJFrame.setSize(400 500); popupJFrame.setAlwaysOnTop(true); popupJFrame.setResizable(false); popupJFrame.setLocationRelativeTo(getRootPane()); popupJFrame.setVisible(true); popupJFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); } }); exitAction.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent arg0) { System.exit(0); } }); } public static void main(String[] args) { ModalJFrame myWindow = new ModalJFrame(); myWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); myWindow.setVisible(true); } }  As far as I know JFrame cannot do Modal mode. Use JDialog instead and call setModalityType(Dialog.ModalityType type) to set it to be modal (or not modal).  If you're prepared to use a JDialog instead of a JFrame you can set the ModalityType to APPLICATION_MODAL. This provides identical behaviour to your typical JOptionPane: import java.awt.event.ActionEvent; import javax.swing.*; import java.awt.*; import java.awt.event.ActionListener; public class MyDialog extends JFrame { public MyDialog() { setBounds(300 300 300 300); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setVisible(true); setLayout(new FlowLayout()); JButton btn = new JButton(""TEST""); add(btn); btn.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { showDialog(); } }); } private void showDialog() { JDialog dialog = new JDialog(this Dialog.ModalityType.APPLICATION_MODAL); //OR you can do the following... //JDialog dialog = new JDialog(); //dialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL); dialog.setBounds(350 350 200 200); dialog.setVisible(true); } public static void main(String[] args) { new MyDialog(); } }"
676,A,"Best way to stop a JTree selection change from happening? I have a dialog where each entry in a JTree has its corresponding options in a different panel which is updated when the selection changes. If options for one of the entries is set to an invalid state when the user attempts to change to a different entry in the tree I want there to be an error dialog and have the selection not change. I tried doing this with a valueChangeListener on the JTree but currently then have to have the valueChanged method call ""setSelectionRow"" to the old selection if there is an error. So that I don't get a StackOverflow I set a boolean ""isError"" to true before I do this so that I can ignore the new valueChanged event. Somehow I have the gut feeling this is not the best solution. ;-) How would I go about it instead? Is there a good design pattern for situations like this? I did not find a better way but this approach works fine for me. I know in Delphi it was a very convenient event: ""before changing selection"" where you could very easily stop changing selection. here is my java code with prevention of infinite recursion problem  navTree.addTreeSelectionListener(new TreeSelectionListener() { boolean treeSelectionListenerEnabled = true; public void valueChanged(TreeSelectionEvent e) { if (treeSelectionListenerEnabled) { if (ok to change selection...) { ... } else { TreePath treePath = e.getOldLeadSelectionPath(); treeSelectionListenerEnabled = false; try { // prevent from leaving the last visited node navTree.setSelectionPath(treePath); } finally { treeSelectionListenerEnabled = true; } } } } }); always remember to remove all listeners you added to prevent memory leaks. here is another approach: private class VetoableTreeSelectionModel extends DefaultTreeSelectionModel { public void setSelectionPath(TreePath path){ if (allow selection change?) { super.setSelectionPath(path); } } } { navTree.setSelectionModel(new VetoableTreeSelectionModel()); }  Stumbled across this thread while investigating a solution for the same problem. First let me tell you things that didn't work. I attempted to register MouseListeners and all of that with the tree. The problem was that the TreeUI's mouse listeners were getting to the process the event before my JTree did meaning it was too late to set a flag or anything like that. Besides that this solution produced some ugly code and I would generally avoid it. So now for the actual solution! After using a few Thread.dumpStack() calls to get a stack dump I found the method I was looking to override. I extended the BasicTreeUI and overrode the ""protected void selectPathForEvent(TreePath path MouseEvent event)"". This will give you access to the mouse event that caused the selection before the selection actually occurs. You can then use whatever logic you need to either event.consume() and return if you want to stop the selection do whatever selection you want or pass it up for default processing by calling super.selectPathForEvent(path event); Just remember to set the UI you created in JTree. That mistake wasted a few minuets of my life ;-)  To prevent selection I just subclassed DefaultTreeSelectionModel and overrode all the methods to check for objects that I didn't want to be selected (instances of ""DisplayRepoOwner"" in my example below). If the object was OK to be selected I called the super method; otherwise I didn't. I set my JTree's selection model to an instance of that subclass. public class MainTreeSelectionModel extends DefaultTreeSelectionModel { public void addSelectionPath(TreePath path) { if (path.getLastPathComponent() instanceof DisplayRepoOwner) { return; } super.addSelectionPath(path); } public void addSelectionPaths(TreePath[] paths) { for (TreePath tp : paths) { if (tp.getLastPathComponent() instanceof DisplayRepoOwner) { return; } } super.addSelectionPaths(paths); } public void setSelectionPath(TreePath path) { if (path.getLastPathComponent() instanceof DisplayRepoOwner) { return; } super.setSelectionPath(path); } public void setSelectionPaths(TreePath[] paths) { for (TreePath tp : paths) { if (tp.getLastPathComponent() instanceof DisplayRepoOwner) { return; } } super.setSelectionPaths(paths); } }  Here is an example of implementing a TreeSelectionModel that wraps another TreeSelectionModel but allows selection to be vetoed: public class VetoableTreeSelectionModel implements TreeSelectionModel { private final ListenerList<VetoableTreeSelectionListener> m_vetoableTreeSelectionListeners = new ListenerList<VetoableTreeSelectionListener>(); private final DefaultTreeSelectionModel m_treeSelectionModel = new DefaultTreeSelectionModel(); /** * {@inheritDoc} */ public void addTreeSelectionListener(final TreeSelectionListener listener) { m_treeSelectionModel.addTreeSelectionListener(listener); } /** * {@inheritDoc} */ public void removeTreeSelectionListener(final TreeSelectionListener listener) { m_treeSelectionModel.removeTreeSelectionListener(listener); } /** * Add a vetoable tree selection listener * * @param listener the listener */ public void addVetoableTreeSelectionListener(final VetoableTreeSelectionListener listener) { m_vetoableTreeSelectionListeners.addListener(listener); } /** * Remove a vetoable tree selection listener * * @param listener the listener */ public void removeVetoableTreeSelectionListener(final VetoableTreeSelectionListener listener) { m_vetoableTreeSelectionListeners.removeListener(listener); } /** * {@inheritDoc} */ public void addPropertyChangeListener(final PropertyChangeListener listener) { m_treeSelectionModel.addPropertyChangeListener(listener); } /** * {@inheritDoc} */ public void removePropertyChangeListener(final PropertyChangeListener listener) { m_treeSelectionModel.removePropertyChangeListener(listener); } /** * {@inheritDoc} */ public void addSelectionPath(final TreePath path) { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutToAddSelectionPath(path); }}); m_treeSelectionModel.addSelectionPath(path); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public void addSelectionPaths(final TreePath[] paths) { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutToAddSelectionPaths(paths); }}); m_treeSelectionModel.addSelectionPaths(paths); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public void clearSelection() { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutToClearSelection(); }}); m_treeSelectionModel.clearSelection(); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public TreePath getLeadSelectionPath() { return m_treeSelectionModel.getLeadSelectionPath(); } /** * {@inheritDoc} */ public int getLeadSelectionRow() { return m_treeSelectionModel.getLeadSelectionRow(); } /** * {@inheritDoc} */ public int getMaxSelectionRow() { return m_treeSelectionModel.getMaxSelectionRow(); } /** * {@inheritDoc} */ public int getMinSelectionRow() { return m_treeSelectionModel.getMinSelectionRow(); } /** * {@inheritDoc} */ public RowMapper getRowMapper() { return m_treeSelectionModel.getRowMapper(); } /** * {@inheritDoc} */ public int getSelectionCount() { return m_treeSelectionModel.getSelectionCount(); } public int getSelectionMode() { return m_treeSelectionModel.getSelectionMode(); } /** * {@inheritDoc} */ public TreePath getSelectionPath() { return m_treeSelectionModel.getSelectionPath(); } /** * {@inheritDoc} */ public TreePath[] getSelectionPaths() { return m_treeSelectionModel.getSelectionPaths(); } /** * {@inheritDoc} */ public int[] getSelectionRows() { return m_treeSelectionModel.getSelectionRows(); } /** * {@inheritDoc} */ public boolean isPathSelected(final TreePath path) { return m_treeSelectionModel.isPathSelected(path); } /** * {@inheritDoc} */ public boolean isRowSelected(final int row) { return m_treeSelectionModel.isRowSelected(row); } /** * {@inheritDoc} */ public boolean isSelectionEmpty() { return m_treeSelectionModel.isSelectionEmpty(); } /** * {@inheritDoc} */ public void removeSelectionPath(final TreePath path) { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutRemoveSelectionPath(path); }}); m_treeSelectionModel.removeSelectionPath(path); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public void removeSelectionPaths(final TreePath[] paths) { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutRemoveSelectionPaths(paths); }}); m_treeSelectionModel.removeSelectionPaths(paths); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public void resetRowSelection() { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutToResetRowSelection(); }}); m_treeSelectionModel.resetRowSelection(); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public void setRowMapper(final RowMapper newMapper) { m_treeSelectionModel.setRowMapper(newMapper); } /** * {@inheritDoc} */ public void setSelectionMode(final int mode) { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutToSetSelectionMode(mode); }}); m_treeSelectionModel.setSelectionMode(mode); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public void setSelectionPath(final TreePath path) { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutToSetSelectionPath(path); }}); m_treeSelectionModel.setSelectionPath(path); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public void setSelectionPaths(final TreePath[] paths) { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutToSetSelectionPaths(paths); }}); m_treeSelectionModel.setSelectionPaths(paths); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ @Override public String toString() { return m_treeSelectionModel.toString(); } } And here is the listener to go with it: public interface VetoableTreeSelectionListener { /** * About to add a path to the selection * * @param path the path to add * * @throws EventVetoedException */ void aboutToAddSelectionPath(TreePath path) throws EventVetoedException; /** * About to add paths to the selection * * @param paths the paths to add * * @throws EventVetoedException */ void aboutToAddSelectionPaths(TreePath[] paths) throws EventVetoedException; /** * About to clear selection * * @throws EventVetoedException */ void aboutToClearSelection() throws EventVetoedException; /** * About to remove a selection path * * @param path the path * * @throws EventVetoedException */ void aboutRemoveSelectionPath(TreePath path) throws EventVetoedException; /** * About to remove multiple selection paths * * @param paths the paths * * @throws EventVetoedException */ void aboutRemoveSelectionPaths(TreePath[] paths) throws EventVetoedException; /** * About to reset the row selection * * @throws EventVetoedException */ void aboutToResetRowSelection() throws EventVetoedException; /** * About to set the selection mode * * @param mode the selection mode * * @throws EventVetoedException */ void aboutToSetSelectionMode(int mode) throws EventVetoedException; /** * About to set the selection path * * @param path the path * * @throws EventVetoedException */ void aboutToSetSelectionPath(TreePath path) throws EventVetoedException; /** * About to set the selection paths * * @param paths the paths * * @throws EventVetoedException */ void aboutToSetSelectionPaths(TreePath[] paths) throws EventVetoedException; } You can use your own implementation of ListenerList but you get the idea...  Set a TreeSelectionModel which implements the appropriate semantics.  Not sure it's best practice but maybe you could put a FocusListener on the component(s) you want to validate... call your validation when the event is called and then consume then event if you don't want the focus to be moved because the validation fails? This is the ideal approach IMO Maybe it is the best way of doing it then. i like it. thanks.  Here is my solution. In a JTree subclass: protected void processMouseEvent(MouseEvent e) { TreePath selPath = getPathForLocation(e.getX() e.getY()); try { fireVetoableChange(LEAD_SELECTION_PATH_PROPERTY getLeadSelectionPath() selPath); } catch (PropertyVetoException ex) { // OK we do not want change to happen return; } super.processMouseEvent(e); } Then in the tree using class: VetoableChangeListener vcl = new VetoableChangeListener() { public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException { if ( evt.getPropertyName().equals(JTree.LEAD_SELECTION_PATH_PROPERTY) ) { try { <some code logic that has to be satisfied> } catch (InvalidInputException e) { throw new PropertyVetoException("""" evt); } } } }; tree.addVetoableChangeListener(vcl); The mechanism starts at the earliest possible place. Mouse action intercepted the path to-be-selected is advertised to VetoableChangeListeners. In the concrete VCL the changing property is examined and if it is the lead selection veto logic is checked. If vetoing is needed the VCL throws PropertyVetoException otherwise mouse event handling goes as usual and selection happens. In short this makes lead selection property become a constrained property. Thanks for this!"
677,A,"Swing: why wont my custom component repaint? Item is a simple model class. ItemComponent is a view for an Item which just draws simple rectangles in a given spot. A bunch of ItemComponent instances are put into a parent component that is added to the JFrame of the application (just a simple shell right now). The view has two different display styles. I want to adjust some properties of the model and possibly change the state (which controls the style) and then call update() to repaint. The problem is as far as I can tell... paint() is only EVER called once. repaint() seems to have no effect. What's wrong? I'm not a Swing programmer and cobbled this together from examples so I expect it may be something trivial here I don't understand. public class ItemComponent extends JComponent implements ItemView { private static final Color COLOR_FILL_NORMAL = new Color(0x008080ff); private static final Color COLOR_FILL_TARGET = Color.LIGHT_GRAY; private static final Color COLOR_OUTLINE = new Color(0x00333333); Item item; RoundRectangle2D rect; State state = State.NORMAL; float alpha = 1.0f; public ItemComponent(Item item) { this.item = item; this.rect = new RoundRectangle2D.Double(0 0 0 0 5 5); item.setView(this); } public void setState(State state) { this.state = state; } public void update() { System.out.println(""ItemComponent.update""); setLocation(item.getLeft() 1); setSize(item.getWidth() getParent().getHeight()-1); rect.setRoundRect(0 0 getWidth()-1 getHeight()-1 5 5); repaint(); //paintImmediately(getBounds()); } @Override public void addNotify() { update(); } @Override public void paint(Graphics g) { System.out.println(""paint""); Graphics2D g2 = (Graphics2D)g; g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER alpha)); if (state == State.NORMAL) { System.out.println(""draw normal""); g2.setPaint(COLOR_FILL_NORMAL); // light blue g2.fill(rect); g2.setPaint(COLOR_OUTLINE); g2.draw(rect); } else if (state == State.TARGET) { System.out.println(""draw target""); g2.setPaint(COLOR_FILL_TARGET); g2.fill(rect); float[] dashPattern = { 8 5 }; g2.setStroke(new BasicStroke(2 BasicStroke.CAP_BUTT BasicStroke.JOIN_MITER 10 dashPattern 0)); g.setColor(COLOR_OUTLINE); g2.draw(rect); } } } Hint: I traced into repaint() and found a point where isDisplayable() was being checked and it's returning false. It makes sure that getPeer() != null. So my component has no peer? What's up with that? It's been added to a container which itself is added to the rest of the app. And it gets painted once so I know it's visible. A Peer is only around for AWT components (the peer is the native window system's real component that goes with the component) most Swing components do not have a peer. Why are you doing work on addNotify anyway? The answer is somewhere here. Particularly the section on Painting in Swing. I'm puzzled that moving the rendering code into paintComponent() didn't work as suggested by Johannes Rössel. As the documentation there says.. The Paint Methods The rules that apply to AWT's lightweight components also apply to Swing components -- for instance paint() gets called when it's time to render -- except that Swing further factors the paint() call into three separate methods which are invoked in the following order: protected void paintComponent(Graphics g) protected void paintBorder(Graphics g) protected void paintChildren(Graphics g) Swing programs should override paintComponent() instead of overriding paint().  My apologies to people who looked at this already. I trimmed down the code a bit for posting and inadvertently left out a key part: @Override public void addNotify() { update(); } I was using this to do some setup as soon as it's been added. Turns out it's pretty critical that you don't override this or at least you need to call super.addNotify() or a whole bunch of important initialization doesn't happen. Changing it to this fixed the problem: @Override public void addNotify() { super.addNotify(); update(); } Glad you figured it out. Thanks for following up. I'm still learning Java myself. I'll add this info to 'for-future-reference' part of my brain.  You would want to call repaint() to cause your JComponent to repaint itself instead of update. Rather than overriding paint( Graphics g ) instead override paintComponent( Graphics g ) and place your custom rendering code within. Make sure to call super.paintComponent( g ) as the first line of the overridden method because some key initialization happens. Also important to note is that depending on the LayoutManager of the container your ItemComponent is being added to it may be necessary to set the size explicitly. I see you are attempting to do that in the update() method. You should only need to set the size once perhaps best placed in the code that constructs your component and adds it to a container. For what you are trying to do it should only be necessary to override paintComponent(). You should remove all other overridden methods. Call repaint() from setState(). If the size of the component depends on the state passed in you may want to call setSize() just before repaint(). Hope that helps."
678,A,"Is it safe to construct Swing/AWT widgets NOT on the Event Dispatch Thread? I've been integrating the Substance look and feel into my application and ran into several problems regarding it's internal EDT (Event Dispatch Thread) checking routines. Substance absolutely refuses to construct UI classes outside of the EDT. I've done plenty of Swing/AWT and I know most of the rules regarding the EDT. I use SwingWorker SwingUtilties.invokeLater to modify components. I always though that components could be CONSTRUCTED outside of the EDT but must be realized and manipulated on the EDT. In other words you can construct and setup defaults in the background but the call to pack/setVisible must be EDT as well as any subsequent calls to manipulate the component. The reason I ask is that I have a particularly ""beefy"" window to construct involving many widgets state and resources (lots of icons). Previously I constructed the window on the background method of a SwingWorker and made the window visible in the done method. Never had a single problem. Upon switching to Substance the internal EDT checking bites me. I've been able to refactor code to get around this. I can construct on the EDT which isn't a good solution since the entire application will block. I can also refactor even more and try my best to load all of the extra resources outside of the EDT. Wrapping it up ... Is it safe to construct Swing/AWT widgets NOT on the Event Dispatch Thread? Sun has changed the rules in 2004 -- before you were allowed to create the components outside the EDT and only had to move into the EDT once the component had been realized. The new rule now reads: To avoid the possibility of deadlock you must take extreme care that Swing components and models are created modified and queried only from the event-dispatching thread. this blog post of mine gives more details including links to other related articles. note that all official Sun examples have been rewritten and are very strict about this. historically it probably was the increasing availability of multi-core computers as desktop machines that motivated the re-formulation of the rule -- threading issues became more and more apparent on the client stack and by being very strict on EDT guidelines a lot of them can be prevented from the start. sneaky sneaky ... thanks for the concrete evidence I was craving. Time to refactor! It's more race conditions than deadlocks that cause the problem. @tom: sorry i missed that the quote explicitly mentions the deadlocks -- but as said before i agree with you that it's more the race conditions... @tom: i agree about the race conditions -- never claimed it were the deadlocks have i (just referred to 'threading issues')?  No. Simple reason is that even the EDT likes to deadlock in some rare cases and in general it's easy to deadlock the UI when using Swing (or so I've been told). I suggest you read these three articles from Kirill's (the Substance dev) blog: New article on Swing EDT violations Unwritten rule of working with Swing’s EDT Stricter checks on EDT violations in Substance"
679,A,"JScrollBar visible Is there some way to know if a JScrollBar is visible or not inside a JPanel? I mean some times my panel has many rectangles (think of it as buttons) and needs a scrollbar and some times it doesn't need it. I'd like to know if I can know when it is being shown. Further to the answers by VonC and Joshua it's worth noting that isVisible() is a method on the super class Component. Also the javadoc states: Determines whether this component should be visible when its parent is visible. Components are initially visible with the exception of top level components such as Frame objects. What this means is that until the JScrollPane is added to a sized frame calling isVisible() on the JScrollBar will always return true. Consider the following SSCCE: public static void main(String[] args) { // creates a small table in a larger scroll pane int size = 5; JTable table = new JTable(makeData(size) makeHeadings(size)); JScrollPane pane = new JScrollPane(table); pane.setPreferredSize(new Dimension(200 200)); System.out.println(pane.getVerticalScrollBar().isVisible()); // prints true JFrame frame = new JFrame(""JScrollPane Test""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setContentPane(pane); System.out.println(pane.getVerticalScrollBar().isVisible()); // prints true frame.pack(); System.out.println(pane.getVerticalScrollBar().isVisible()); // prints false frame.setVisible(true); System.out.println(pane.getVerticalScrollBar().isVisible()); // prints false } private static Object[] makeHeadings(int size) { Object[] headings = new Object[size]; for (int i=0; i<size; i++){ headings[i] = i; } return headings; } private static Object[][] makeData(int size) { Object[][] data = new Object[size][size]; for (int i=0; i<size; i++){ for (int j=0; j<size; j++){ data[i][j] = i*j; } } return data; } Similarly it's worth adding that if you're adding the JScrollPane to an internal frame then scrollBar.isVisible() will only work once the internal frame has been added to another component.  Assuming you have a reference to a JScrollPane you should be able to just call yourJScrollPane.getHorizontalScrollBar().isVisible() or yourJScrollPane.getVerticalScrollBar().isVisible()  If you need also to be notified about visibility changes than you can use a code as follows: final JScrollPane scroll = new JScrollPane(createMyPanel()); scroll.getVerticalScrollBar().addHierarchyListener(new HierarchyListener() { @Override public void hierarchyChanged(HierarchyEvent e) { if (e.getID() == HierarchyEvent.HIERARCHY_CHANGED && (e.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) != 0) { System.out.println(scroll.getVerticalScrollBar().isVisible()); } } }); By wrapping the println with ""if(isShowing())"" you will only be notified when the ScrollBar is actually visible on the screen.  If you extend the JPanel and add yourself the JScrollbars (horizontal and/or vertical) then you can control when they must be visible or invisible (you can check if they are currently visible with the isvisible() function) You can find two example of such classes that determine the need for visible scrollbar depending on their content: JGraphPanel (its callback actionPerformed(Event e) will adjust the visibility based on a zoom factor) Plane (its function adjustComponents() will call setVisible() on the JScrollBar if needed)"
680,A,An efficient way to display a time counter in a JTable cell A time counter shows the age in seconds of a row in the table. Ideally it would be updated once per second. I know I can just increment the appropriate data in the table model fire the events (one per row) etc. It seems like overkill! Is there a better lighter way? What you need is: a way to model the 'age' of the row in your table model. This is best done implicitely so you just store the creation time of the row once and calculate the age when the cell value is requested (Object getValueAt(row column)). A (daemon) thread which fires the table change event each second. You don't have to fire one event per row but instead you can fire an event that signals a whole column update. Here's some pseudocode for the table model: public Object getValueAt (int rowIndex int columnIndex) { // if it's the column with the 'row age' calculate the age and return it long rowAgeMs = System.currentTimeMs() - getCreationTime(rowIndex); // return the age in milliseconds or a date or a formatted time string } The table model should then also offer a method for the thread so it can fire a change event for the 'row age' column: public class MyTableModel implements TableModel {  private final List<TableModelListener> listeners = new LinkedList<TableModelListener>(); public void addTableModelListener (TableModelListener l) { listeners.add(l); } public void removeTableModelListener (TableModelListener l) { listeners.remove(l); } public void updateColumn (int column) { TableModelEvent evt = new TableModelEvent(this 0 Math.max(0 getRowCount() - 1) column); for (TableModelListener listener : listeners) { listener.tableChanged(evt); } } The thread would then just trigger the updateColumn(..) method each second for the 'row age' column. The invocation of this method should be done in the EventDispatchThread this is done using SwingUtilities.invokeAndWait(..) or SwingUtilities.invokeLater(..). Thread rowAgeUpdater = new Thread() { @Override public void run () { while (isAlive()) { try { long time = System.currentTimeMillis(); long sleepTime = (time / 1000 + 1) * 1000 - time; Thread.sleep(sleepTime); SwingUtilities.invokeAndWait(new Runnable() { public void run () { model.updateColumn(ROW_AGE_COLUMN_INDEX); } }); } catch (Exception e) { return; } } } }; rowAgeUpdater.setDaemon(true); rowAgeUpdater.setPriority(Thread.MIN_PRIORITY); rowAgeUpdater.start(); As long as the granularity of the TableModelEvent only covers the cells that need to be updated (in your case: only the column with the row age) it's the most efficient way to realize this.
681,A,"Remap keyboard navigation with Jython / Swing I'm trying to remap several navigation keys: ENTER: to work like standard TAB behavior (focus to next control) SHIFT+ENTER: to work like SHIFT+TAB behavior (focus to previous control) UP / DOWN arrows: previous /next control etc I tried with a couple of options but without luck: from javax.swing import * from java.awt import * class JTextFieldX(JTextField): def __init__(self *args): # Thanks Jack!! JTextField.__init__( self focusGained=self.onGotFocus focusLost=self.onLostFocus *args) def onGotFocus (self event): print ""onGotFocus "" self.selectionStart = 0 self.selectionEnd = len(self.text) def onLostFocus (self event): print ""onLostFocus "" self.name class Test(JFrame): def __init__(self): JFrame.__init__(self 'JDesktopPane and JInternalFrame Demo' size=(600 300) defaultCloseOperation=JFrame.EXIT_ON_CLOSE) self.desktop = JDesktopPane() self.contentPane.add(JScrollPane(self.desktop)) # This is the same as self.getContentPane().add(...) frame = JInternalFrame(""Frame"" 1 1 1 1 size=(400 400) visible=1) panel = JPanel() self.label = JLabel('Hello from Jython') panel.add(self.label) self.textfield1 = JTextFieldX('Type something here' 15) panel.add(self.textfield1) self.textfield2 = JTextFieldX('and click Copy' 15) panel.add(self.textfield2) panel.add(copyButton) frame.add(panel) frame.pack() self.desktop.add(frame) # ENTER=SPACE remapping for buttons (works ok but only for buttons) # inputMap = UIManager.getDefaults().get(""Button.focusInputMap"") # pressedAction = inputMap.get(KeyStroke.getKeyStroke(""pressed SPACE"")); # releasedAction = inputMap.get(KeyStroke.getKeyStroke(""released SPACE"")); # # pressedAction = self.noAction # inputMap.put (KeyStroke.getKeyStroke(""pressed ENTER"") pressedAction) # inputMap.put (KeyStroke.getKeyStroke(""released ENTER"") releasedAction) # # Attemp to remap ENTER=TAB for TextFields (didn't work no errors) # inputMap = UIManager.getDefaults().get(""TextField.focusInputMap"") # pressedAction = inputMap.get(KeyStroke.getKeyStroke(""pressed TAB"")); # releasedAction = inputMap.get(KeyStroke.getKeyStroke(""released TAB"")); # inputMap.put (KeyStroke.getKeyStroke(""pressed W"") pressedAction) # inputMap.put (KeyStroke.getKeyStroke(""released W"") releasedAction) # # Attemp to remap ENTER=TAB for all controls (didn't work no errors) # spaceMap = self.textfield1.getInputMap().get(KeyStroke.getKeyStroke(event.KeyEvent.VK_TAB 0 True)); # self.textfield1.getInputMap().put(KeyStroke.getKeyStroke(event.KeyEvent.VK_ENTER 0 True)spaceMap); frame.setSelected(1) frame.moveToFront() def noAction (self event): print ""noAction"" pass if __name__ == '__main__': test = Test() test.setLocation(100 100) test.show() see new answer. you missed this line then: self.textfield1.setNextFocusableComponent(self.textfield2) Add keyPressed to the swing competent that you want to listen for the key press on self.textfield1 = JTextField('Type something here'15focusGained=self.myOnFocuskeyPressed=self.myOnKey) myOnKey can be named anything in that method do something like: def myOnKey(selfevent): print str(event) # see all other info you can get. key_code = event.keyCode if key_code == 10: print ""you pressed enter"" # simulate the ""tab"" by just focusing the next textbox... Then you should just be able to play around with the print str(event) command to get all the proper keycodes that you want. Ok so far but then how can I (generically) get the next focusable control? I tried with self.nextFocusableComponent but it's set to None.  Finally used part of Jack's answer (the keyPressed event) but without manually setting setNextFocusableComponent: keyFocusMgr = KeyboardFocusManager.getCurrentKeyboardFocusManager() keyFocusMgr.focusNextComponent() Cool. Glad you got it. Thanks for posting this.  I made a new post for readability. self.textfield1 = JTextField('Type something here'15focusGained=self.myOnFocuskeyPressed=self.myOnKey) #create textfield2...must be created before can be referenced below. self.textfield1.setNextFocusableComponent(self.textfield2) then in your event handler: def myOnKey(selfevent): print str(event) # see all other info you can get. key_code = event.keyCode if key_code == 10: print ""you pressed enter"" # simulate the ""tab"" just focus next textbox... gotFocus = event.getComponent() nextToFocus = gotFocus.nextFocusableComponent nextToFocus.requestFocus() Should do it. @Jack: first of all thanks for your help. I'm trying the code you posted but either gotFocus.nextFocusableComponent and gotFocus.getNextFocusableComponent() return None. TIA Pablo did you setNextFocusableComponent like I did in my first block??? ...because the code above works for me with jython 2.5"
682,A,"Interpreting Java crash files I have a Swing application that is heavy customised with a lot of custom painting mainly on the panels and button to add gradients and round borders. The application infrequently crashes with exactly the same error and i get hs_err_pid[0000].log Snippet: Java Threads: ( => current thread ) 0x032ff400 JavaThread ""Thread-1"" daemon [_thread_in_native id=3452 stack(0x046600000x046b0000)] 0x02b1c400 JavaThread ""Keep-Alive-Timer"" daemon [_thread_blocked id=3524 stack(0x048500000x048a0000)] 0x03198800 JavaThread ""Poller Thread"" [_thread_blocked id=2444 stack(0x046100000x04660000)] 0x032d3c00 JavaThread ""ClientAPI::HttpConnection::InputStreamByteReader"" [_thread_blocked id=3672 stack(0x04ad00000x04b20000)] 0x03288400 JavaThread ""ClientAPI::HttpConnection"" [_thread_blocked id=4564 stack(0x04a300000x04a80000)] 0x0329f400 JavaThread ""ClientAPI::HttpPostConnection"" [_thread_blocked id=412 stack(0x049e00000x04a30000)] 0x02a90400 JavaThread ""MultiThreadedHttpConnectionManager cleanup"" daemon [_thread_blocked id=3500 stack(0x048a00000x048f0000)] 0x003a9400 JavaThread ""DestroyJavaVM"" [_thread_blocked id=132 stack(0x008c00000x00910000)] 0x03e56800 JavaThread ""Thread-7"" [_thread_blocked id=2912 stack(0x047000000x04750000)] 0x03e1d800 JavaThread ""TimerQueue"" daemon [_thread_blocked id=5728 stack(0x03da00000x03df0000)] 0x031abc00 JavaThread ""AWT-EventQueue-0"" [_thread_blocked id=2788 stack(0x036c00000x03710000)] 0x0314ec00 JavaThread ""AWT-Shutdown"" [_thread_blocked id=2468 stack(0x034a00000x034f0000)] =>0x02fbe400 JavaThread ""Java2D Disposer"" daemon [_thread_in_vm id=5836 stack(0x034500000x034a0000)] 0x02a74400 JavaThread ""Low Memory Detector"" daemon [_thread_blocked id=3044 stack(0x02d200000x02d70000)] 0x02a6e400 JavaThread ""CompilerThread0"" daemon [_thread_blocked id=3248 stack(0x02cd00000x02d20000)] 0x02a6cc00 JavaThread ""Attach Listener"" daemon [_thread_blocked id=548 stack(0x02c800000x02cd0000)] 0x02a6b800 JavaThread ""Signal Dispatcher"" daemon [_thread_blocked id=2792 stack(0x02c300000x02c80000)] 0x02a63000 JavaThread ""Finalizer"" daemon [_thread_blocked id=1504 stack(0x02be00000x02c30000)] 0x02a61c00 JavaThread ""Reference Handler"" daemon [_thread_blocked id=3124 stack(0x02b900000x02be0000)] Is there a way of interpreting this file to determine what could be wrong in my application? Edit added more details From the answered so far this article and the snipper below i think the setting of cursors is causing these issues. Stack: [0x034500000x034a0000] sp=0x0349f860 free space=318k Native frames: (J=compiled Java code j=interpreted Vv=VM code C=native code) V [jvm.dll+0xd2db8] Java frames: (J=compiled Java code j=interpreted Vv=VM code) j java.awt.Cursor.finalizeImpl(J)V+0 j java.awt.Cursor.access$000(J)V+1 j java.awt.Cursor$CursorDisposer.dispose()V+13 j sun.java2d.Disposer.run()V+26 j java.lang.Thread.run()V+11 v ~StubRoutines::call_stub there ought to be some sort of exception cause along with a stacktrace in the dump file - do you have those as well? @matt - check my edit So what are you doing with cursors? @Nemi - noted i have made the change @n002213f - you don't need to iterate through all components and set the cursor. Setting the cursor on a container (e.g. a JFrame) will cause all contained components to use that cursor also. I have a panel on which i set the normal cursor and the busy cursor when i'm waiting for an action on the server. I recursively iterate through all components setting the cursor depending on the state. I have made sure i don't instantiate them myself by calling **Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR)** If you are using a Sun JRE that diagnostics should give a link to the appropriate bug report page. http://java.sun.com/webapps/bugreport/crash.jsp It's worth ensuring that you have an up to date JRE (6u15/6u16) and up to date graphics card drivers. while thats good i want to make sure i have established the cause of the crash and maybe have a workaround instead of asking users to get the current JRE If they don't have 6u15 they will have known security vulnerabilities (for untrusted code at the least). You might want to push them along. In that context i will push for an upgrade of JRE at least we were signing the application.  This is a very good guide to interpreting hs_err log files particularly on Windows. It's quite an involved process unfortunately but should ultimately guide you to the problem.  Note that unless you use JNI nothing your application does no matter how wrong should result in a crash of the JVM. I'd try running it on different JVMs and machines to rule out JVM bugs and hardware problems."
683,A,"How to display japanese characters in JTextArea There is strange behaviour of JTextArea when displaying japanese characters - I get well-known blank rectangles instead of kanji. The mostly strange thing is that JTextField displays them perfectly (in both cases I use ""Tahoma"" font family). Also if I put this code:  Font f = new Font(""123"" Font.PLAIN 12); // This font doesn't exists problemTextArea.setFont(f); ...before i write japanese string to the problemTextArea it displays kanji! P.S. Sorry for my English. Upd: I am using Windows What platform are you using? Windows? Linux? The problem is that JTextArea uses a different default font than JTextField. I had the same problem in an application I wrote that had to support multi-languages. The reason for your problem is that JTextArea is normally used to show a mono-spaced font such as Courier New. Normally Java contains no additional mappings for a mono-spaced graphical font to display Kanji. The fix you have works because there is no font named ""123"" so the default is taken (dialog). The ""dialog"" font is internally mapped to a font family in the font.properties file of your platform. This will be the same font that JTextField uses. I have the following fix to ensure that the same font definition is used in ALL graphical components. You can also find the specific key for JTextArea and change it. This way you don't have to worry about the fonts of any component they will be initialized with dialog. Object fontDefinition = new UIDefaults.ProxyLazyValue(""javax.swing.plaf.FontUIResource"" null new Object[] { ""dialog"" new Integer(Font.PLAIN) new Integer(12) }); java.util.Enumeration keys = UIManager.getDefaults().keys(); while (keys.hasMoreElements()) { Object key = keys.nextElement(); Object value = UIManager.get(key); if (value instanceof javax.swing.plaf.FontUIResource) { UIManager.put(key fontDefinition); } }"
684,A,"How to browse for a file in java swing library? I was wondering if there was some kind of J tool in the java swing library that opens up a file browser window and allows a user to choose a file. Then the ouput of the file would be the absolute path of the chosen file. Thanks in advance thanks for the heads up. I ended up using this quick piece of code that did exactly what i needed.  final JFileChooser fc = new JFileChooser(); fc.showOpenDialog(this); try { // Open an input stream Scanner reader = new Scanner(fc.getSelectedFile()); }  In WebStart and the new 6u10 PlugIn you can use the FileOpenService even without security permissions. For obvious reasons you only get the file contents not the file path.  The following example creates a file chooser and displays it as first an open-file dialog and then as a save-file dialog: String filename = File.separator+""tmp""; JFileChooser fc = new JFileChooser(new File(filename)); // Show open dialog; this method does not return until the dialog is closed fc.showOpenDialog(frame); File selFile = fc.getSelectedFile(); // Show save dialog; this method does not return until the dialog is closed fc.showSaveDialog(frame); selFile = fc.getSelectedFile(); Here is a more elaborate example that creates two buttons that create and show file chooser dialogs. // This action creates and shows a modal open-file dialog. public class OpenFileAction extends AbstractAction { JFrame frame; JFileChooser chooser; OpenFileAction(JFrame frame JFileChooser chooser) { super(""Open...""); this.chooser = chooser; this.frame = frame; } public void actionPerformed(ActionEvent evt) { // Show dialog; this method does not return until dialog is closed chooser.showOpenDialog(frame); // Get the selected file File file = chooser.getSelectedFile(); } }; // This action creates and shows a modal save-file dialog. public class SaveFileAction extends AbstractAction { JFileChooser chooser; JFrame frame; SaveFileAction(JFrame frame JFileChooser chooser) { super(""Save As...""); this.chooser = chooser; this.frame = frame; } public void actionPerformed(ActionEvent evt) { // Show dialog; this method does not return until dialog is closed chooser.showSaveDialog(frame); // Get the selected file File file = chooser.getSelectedFile(); } };  You can use the JFileChooser class check this example. Your Windows users will thank you too! If you don't need all the flexibility of JFileChooser you should use java.awt.FileDialog instead. Your OS X users will thank you. FileDialog uses a native file chooser window while JFileChooser is a swing component and lacks keyboard shortcuts and other niceties."
685,A,Quick Swing question: Need to shut down my database on close I've been building a test application that works with a database that up until recently has been without a UI. I'm adding one now. Problem is the JFrame is launched in another thread and I need my database connection to close when that thread closes (when the UI closes I should say). How do I do this? Also what happens to the application's database connection (in this case an embedded database) if the application crashes or is forcefully closed? I hear that unclosed connections cause resource leaks. Anything I can do to clean up if this happens? You may add a shutdown hook to your runtime system. It's a thread which will be fired on closing the virtual machine. In the thread you can close all db connections and other critical resources. This won't solve the leaked connection problem will it? No it won't. It will just give you an oportunity to close open connections manually or to tell the pool to shut down. You don't have a control over DBMS other then setting the timeout period.  The WindowClosingEvent will be fired if a User attempts to close your JFrame. So in this method you can close your connection. Your DBMS uses a pool of connection. If you don't close your connections properly this connection pool is filled with unused connection. It's bad if the pool is full and a new connection is needed. The application won't work. Either the user waits and tries it one more time (while he's waiting one connection could be closed or killed) or the database is restarted manually so all connection are lost. The DBMS closes all unused connections after a predefined time. Which parameter does specify this time you'll find it in your DBMS manual. In addtion to your comment: You cannot assure that you have enough time to clean up your connections. Probably your application is killed by your sytem or whatever. So: Try to clean up your connection as soon as possible. Unused connections can only be removed by the DBMS once you've lost the connection object. Ah okay. But is there any way other than relying on the DBMS's timeout to clean up? See my answer I added some information. Is there a way to detect and clean up (or maybe just resume using?) unused connections (that the DBMS timeout doesn't get to clean up) on application restart from a previous instance? Or am I misunderstanding how this works? No you cannot reuse your connection since your application was closed. Unused connection can only be removed by the DBMS. Ok then. Thanks for the info.
686,A,"Best GUI designer for eclipse? I'm looking for a good GUI designer for swing in eclipse. My preference is for a free/open-source plugin. Why not keep it as a CW? It's useful and the votes prove it that's what's most important The reason this question was closed is that it is effectively a poll. There rarely is one answer to the ""Best XXX for YYY"" style of question so these don't fit well with the Stack Overflow question system. There are plenty of other sites to go to in order to find lists of products and subjective discussions about them but we've found that they don't work here. 126 voted for the question. 70 voted for the chosen answer. Not constructive enough for you? Your comment received 7 votes. @Agnel Kurian: ""asked Aug 27 '08"" ""answered Sep 28 '10"" Considering that the comment was posted just an hour ago... ಠ_ಠ ಠ_ಠ ಠ_ಠ Another good GUI designer for Eclipse is Window Builder Pro. Like Jigloo it's not free for commercial use. It allows you to design user interfaces for Swing SWT and even the Google Web Toolkit (GWT).  GWT Designer is very good and allows for rapid development of GWT websites. (http://www.instantiations.com/gwtdesigner/)  Old question but have you checked out JFormDesigner?  I use GWTDesigner http://www.instantiations.com/gwtdesigner/ which is not free but works well. Best of all their customer support is top notch - very responsive.  well check out the eclipse distro easyeclipse at EasyEclipse. it has Visual editor project already added as a plugin so no hassles of eclipse version compatibility.Plus the eclipse help section has a tutorial on VE.  visualswing4eclipse looks good but the eclipse update URL didn't work for me (I raised ticket 137) I was only able to install a previous version. Here's a url in case anyone wants it: http://visualswing4eclipse.googlecode.com/svn-history/r858/trunk/org.dyno.visual.swing.site/site.xml The plugin actually looks very good. The project seems abandoned. I've tested it on Eclipse 3.6 and it was very unstable. Only five almost trivial commits in the past 3 years. https://code.google.com/p/visualswing4eclipse/source/list  Visual Editor is a good choice. It generates very clean code with no ""layout"" files beside of your sourcen using a simple but convenient pattern. It's very easy to patch the generated code and directly see the result. There are some stability problems (some times the preview window does not refresh anymore...) but nothing that a ""clean Project"" can't fix... The Visual Editor project is nearly dead. According to the website the last release is 2 years ago and it doesn't support Eclipse 3.3. @Tom: No longer true; there is now a version of Visual Editor for Eclipse 3.5/Galileo: http://wiki.eclipse.org/VE/Update There is now also a new release of Visual Editor: V 1.4.0 30 Sep 2009 And vep is now officially dead. I know it doesn't answer exactly your needs but I made it work recently with eclipse 3.4 http://wiki.eclipse.org/VE/Update This only works for eclipse 3.2 and not 3.3.. :-(  Here is a quite good but old comparison http://wiki.computerwoche.de/doku.php/programmierung/gui-builder_fuer_eclipse Window Builder Pro is now free at Google Web Toolkit Note: this comparison is in German...  'Jigloo' is a very cool GUI designer. It is not free for commercial use however. It auto-generates code and allows for custom editing of the code it creates. http://www.cloudgarden.com/jigloo/  Window Builder Pro is a great GUI Designer for eclipse and is now offered for free by google. Windows Builder download: http://www.eclipse.org/windowbuilder/download.php Update site for Eclipse Indigo release: http://download.eclipse.org/windowbuilder/WB/release/R201106211200/3.7/ Window Builder Pro is fantastic. Be sure to go into Window->Preferences then WindowBuilder to configure how variables are set up event handlers etc. I prefer to configure my variables to always be fields and my event handlers to be ""implement listener interface in parent class"". Feels more like Visual Basic when I do that. It's a little bit slow compared to NetBeans but i like the fact of having editor that doesn't change my code so much or hinders editing as NetBeans does.  It's not free or open source. But you can give Intellij Idea's SWING GUI designer a try.  Look at my plugin for developing swing application. It is as easy as that of netbeans': http://code.google.com/p/visualswing4eclipse/ Your plugin looks nice but the download link for Eclipse is not active."
687,A,"How do you implement position-sensitive zooming inside a JScrollPane? I am trying to implement position-sensitive zooming inside a JScrollPane. The JScrollPane contains a component with a customized 'paint' that will draw itself inside whatever space it is allocated - so zooming is as easy as using a MouseWheelListener that resizes the inner component as required. But I also want zooming into (or out of) a point to keep that point as central as possible within the resulting zoomed-in (or -out) view (this is what I refer to as 'position-sensitive' zooming) similar to how zooming works in google maps. I am sure this has been done many times before - does anybody know the ""right"" way to do it under Java Swing?. Would it be better to play with Graphic2D's transformations instead of using JScrollPanes? Sample code follows: package test; import java.awt.*; import java.awt.event.*; import java.awt.geom.*; import javax.swing.*; public class FPanel extends javax.swing.JPanel { private Dimension preferredSize = new Dimension(400 400); private Rectangle2D[] rects = new Rectangle2D[50]; public static void main(String[] args) { JFrame jf = new JFrame(""test""); jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); jf.setSize(400 400); jf.add(new JScrollPane(new FPanel())); jf.setVisible(true); } public FPanel() { // generate rectangles with pseudo-random coords for (int i=0; i<rects.length; i++) { rects[i] = new Rectangle2D.Double( Math.random()*.8 Math.random()*.8 Math.random()*.2 Math.random()*.2); } // mouse listener to detect scrollwheel events addMouseWheelListener(new MouseWheelListener() { public void mouseWheelMoved(MouseWheelEvent e) { updatePreferredSize(e.getWheelRotation() e.getPoint()); } }); } private void updatePreferredSize(int n Point p) { double d = (double) n * 1.08; d = (n > 0) ? 1 / d : -d; int w = (int) (getWidth() * d); int h = (int) (getHeight() * d); preferredSize.setSize(w h); getParent().doLayout(); // Question: how do I keep 'p' centered in the resulting view? } public Dimension getPreferredSize() { return preferredSize; } private Rectangle2D r = new Rectangle2D.Float(); public void paint(Graphics g) { super.paint(g); g.setColor(Color.red); int w = getWidth(); int h = getHeight(); for (Rectangle2D rect : rects) { r.setRect(rect.getX() * w rect.getY() * h rect.getWidth() * w rect.getHeight() * h); ((Graphics2D)g).draw(r); } } } Added bounty to see if I can get a full answer (ideally: the code snippet that when added above answers the question). Your MouseWheelListener also has to locate the cursor move it to the center of the JScrollPane and adjust the xmin/ymin and xmax/ymax of the content to be viewed. Yes that is true - it is also what I was trying to do in the first place (the cursor is located at 'p' and adjusting those bounds correctly is what I do not know how to do).  Tested this seems to work... private void updatePreferredSize(int n Point p) { double d = (double) n * 1.08; d = (n > 0) ? 1 / d : -d; int w = (int) (getWidth() * d); int h = (int) (getHeight() * d); preferredSize.setSize(w h); int offX = (int)(p.x * d) - p.x; int offY = (int)(p.y * d) - p.y; setLocation(getLocation().x-offXgetLocation().y-offY); getParent().doLayout(); } Update Here is an explanation: the point p is the location of the mouse relative to the FPanel. Since you are scaling the size of the panel the location of p (relative to the size of the panel) will scale by the same factor. By subtracting the current location from the scaled location you get how much the point 'shifts' when the panel is resized. Then it is simply a matter of shifting the panel location in the scroll pane by the same amount in the opposite direction to put p back under the mouse cursor. Exactly what I was looking for. Thanks!  I think smt like this should be working...  private void updatePreferredSize(int n Point p) { double d = (double) n * 1.08; d = (n > 0) ? 1 / d : -d; int w = (int) (getWidth() * d); int h = (int) (getHeight() * d); preferredSize.setSize(w h); // Question: how do I keep 'p' centered in the resulting view? int parentWdt = this.getParent( ).getWidth( ) ; int parentHgt = this.getParent( ).getHeight( ) ; int newLeft = p.getLocation( ).x - ( p.x - ( parentWdt / 2 ) ) ; int newTop = p.getLocation( ).y - ( p.y - ( parentHgt / 2 ) ) ; this.setLocation( newLeft newTop ) ; getParent().doLayout(); } EDIT: Changed a couple things. Your code does not keep the point 'p' centered in the resulting view (for an example try zooming near the bottom-right corner) even after changing `int newTop = p.y - w / 2;` to `int newTop = p.y - h / 2;`. Please test code before proposing it as an answer. The updated code seems to zoom into the top-left corner (java 6 on XP) not into wherever the mouse pointer is pointing. I am using the same test program listed in the question.  Here's a minor refactoring of @Kevin K's solution: private void updatePreferredSize(int wheelRotation Point stablePoint) { double scaleFactor = findScaleFactor(wheelRotation); scaleBy(scaleFactor); Point offset = findOffset(stablePoint scaleFactor); offsetBy(offset); getParent().doLayout(); } private double findScaleFactor(int wheelRotation) { double d = wheelRotation * 1.08; return (d > 0) ? 1 / d : -d; } private void scaleBy(double scaleFactor) { int w = (int) (getWidth() * scaleFactor); int h = (int) (getHeight() * scaleFactor); preferredSize.setSize(w h); } private Point findOffset(Point stablePoint double scaleFactor) { int x = (int) (stablePoint.x * scaleFactor) - stablePoint.x; int y = (int) (stablePoint.y * scaleFactor) - stablePoint.y; return new Point(x y); } private void offsetBy(Point offset) { Point location = getLocation(); setLocation(location.x - offset.x location.y - offset.y); }"
688,A,"How can I setup LookAndFeel Files in Java? I need to setup LookAndFeel Files in JDK 1.6. I have two files: napkinlaf-swingset2.jar napkinlaf.jar How can I set this up and use it? I would like a GTK look and feel OR Qt look and feel Are they available? Can you please be more clear? These 2 files do you have the source or are they just binaries you have? The Qt look and feel is available from Trolltech as the product Jambi which IS Qt for Java. this is no look and feel. it is the whole toolkit.  This page explains how the work with Look&Feels: http://java.sun.com/docs/books/tutorial/uiswing/lookandfeel/plaf.html You can do it commandline: java -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel MyApp Or in code: UIManager.setLookAndFeel(""javax.swing.plaf.metal.MetalLookAndFeel""); You need to make sure the jars containing the look&feel are on the application classpath. How this works depends on the application. A typical way would be to put it in a lib folder. Look&Feels that are available by default in the JDK are: com.sun.java.swing.plaf.gtk.GTKLookAndFeel com.sun.java.swing.plaf.motif.MotifLookAndFeel com.sun.java.swing.plaf.windows.WindowsLookAndFeel Quioting the link above: The GTK+ L&F will only run on UNIX or Linux systems with GTK+ 2.2 or later installed while the Windows L&F runs only on Windows systems. Like the Java (Metal) L&F the Motif L&F will run on any platform. i know how to use LAF  but i want install LAF files . and the GTK LAF not installed by default . @Waseem -- Then I suggest you elaborate in your question.  The class name for Naplin is net.sourceforge.napkinlaf.NapkinLookAndFeel. So to set it as default on the command line use: java -Dswing.defaultlaf=net.sourceforge.napkinlaf.NapkinLookAndFeel To install it add napkinlaf.jar to the lib/ext direction and the lines: swing.installedlafs=napkin swing.installedlaf.napkin.name=Napkin swing.installedlaf.napkin.class=net.sourceforge.napkinlaf.NapkinLookAndFeel to lib/swing.properties within your Java installation (you'll probably have to create the file). See the Napkin wiki page it's work now  thank you nice LookAndFeel"
689,A,Java event handlers I am writing a small Java app (on Windows hence the _on_vista appended to my name). I got 3 buttons all of which will react to a click event but do different things. Is the following code the accepted way or is there a cleaner way I do not know about? On one half it works on the other half something doesn't seem right... Thanks cool_button_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { coolfunction1(); } }); cool_button_2.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { coolfunction2(); } }); // etc ... The functions that get called will spawn off threads as needed so on and so forth. UPDATE - Both were good (pretty much the same) answers. I accepted the one with the lower rep to share the wealth. Thanks again guys. I'd say that code is fine as Java code goes. It's a good example for Java's often-criticized verbosity - in this case due to the lack of closures. I havent used closures because i didnt understand them but your comment is starting to connect some dots for me thanks Of course local classes are (rather minimal) closures. Basically a closure is a standalone method (without a class) that you can pass as parameter to a method - exactly what is needed in your example. The anonymous classes you're using offer the same functionality just with a lot of boilerplate around very little code.  Yes this is the correct way to do this. It's a bit clumsy (to have to write five long lines of code just to be able to call a method) but that's Java :( haha after about a year of php working on this project in java is an absolute delight! a real language api is something i took for granted. You don’t write five lines for calling a method. You write five lines for calling a method when a button is pressed. That is a difference. I think Aaron's objection was that some languages would just let you pass a function pointer to coolfunction1 rather than having to wrap it with a new object. Then why doesn’t he say so? Why do I have to keep guessing what people really mean when they are clearly unable to express themselves? :( @Bombe: I assume that people read my reply in context. lol ... seriously though i think i love java  I tend to do something like this: public class ButtonPanel implements ActionListener { JButton button1 button2 button3; public ButtonPanel() { button1 = new JButton(this); button2 = new JButton(this); button3 = new JButton(this): ... } public void ActionPerformed(ActionEvent e) { if( e.getSource() == button1 ) action1(); else if( e.getSouce() == button2 ) action2(); else if( e.getSource() == button3 ) action3(); } } One problem I have with this is now actionPerformed is now part of this class's public API even though no client code can use it directly. If you insist on using a single ActionListener it's probably better to create a new private instance and pass that to your controls. It's a question of priorities; whether a clean API or easily read code is more important to your set of constraints. I don't think my suggestion is something that's good *most of the time* but it is certainly another valid way to do things. I'm a little disappointed you voted it down. Ah well.  Its one of the correct ways to do it. You are using anonymous listeners but there is an alternatif nicely explained on http://java.sun.com/docs/books/tutorial/uiswing/events/intro.html where you write a class that implements ActionListener and have it handle the logic for you  That’s not too bad. I prefer to use Actions and create JButtons from them: Action fooAction = new AbstractAction() { ... }; JButton fooButton = new JButton(fooAction); Thanks for the input I will keep this in mind should I run into a similar problem Yeah You can reuse action with menus and disable them.
690,A,"JavaFX or Swing? I just wanted your input on something with regards to Java. Would it be a good investment to study JavaFX for my user-interfaces or would sticking to Swing be easier or more convenient? i am not building any particular application i just want to your opinions. It might be helpful if you describe the kind of application you are building. This question deserves some recent answers. Adding bounty. For any new projects being started today - you will do yourself a disservice by writing them in Swing/AWT. JavaFX is now part of the standard JDK/JRE in version 8 and is the defacto standard replacement for Swing/AWT. Re-writing an existing application would be pointless unless you really wanted to use JavaFX features. But if it's a new application - there's no consideration - it's JavaFX all the way. Reasons include: `1)` More native LaF/more extensible LaF options (LaF made and editable via CSS) (<-- that's a winner right there) `2)` Non programmers can design and ""code"" the UI via FXML (modified XML structure) and/or using Scene Builder drag-n-drop tool `3)` No dependencies ie. included in standard JDK/JRE `4)` Very easy to implement standard GUI design patterns such as MVC (JavaFX with FXML automatically leans towards an MVC pattern) ---- These are just a few off the top of my head. I'm sure there are loads more reasons such as performance etc. Linking to [Java GUI frameworks. What to choose?](http://stackoverflow.com/questions/7358775/java-gui-frameworks-what-to-choose-swing-swt-awt-swingx-jgoodies-javafx) as a possible duplicate target to make it explicitly visible in the ""linked"" section. Points to consider: JavaFX is young so it won't have as much documentation. However depending on what you're doing it's much easier to use. For instance: to add a click handler to any node just add onMouseClicked: myfunction(e:MouseEvent) in the declaration. You will have more examples for Swing though. It's much easier to start with JavaFX than to bring it in later. You don't have to worry about this since you are a student. JavaFX has gained popularity significantly since its 1.2 release. It still is not mainstream but might be a good technology to invest yourself in for the future (thinking mobile phones) Since you're a student I'd personally have to say JavaFX. Sure it's harder to get started but I think it'll pay off with it's relative simplicity compared to Swing later.  there is several issues with JavaFX which Swing already solved. Also it is really young technology making baby-steps. I suggest to consider all aspects. Both has pros and cons. Swing has a lot of resources. JavaFX is simpler in dealing with RIA kind of interfaces. So try both and decide based on gained experience. But the JavaFX is worth of your time. all swing utility implemented with JavaFX and easier way to design UI using FXML good working with web start And you can implement tour own CSS for design to look better.  JavaFX is worth it if you are willing to ignore the problems of it being a young technology. It has a lot of potential though so I suggest you try it out over Swing if there is no time constraints.  Answer: do not invest time on JavaFX. JavaFX is a huge hairball that makes DirectX look simple. Remember how long it took DirectX to take off? Like 10 years. Now factor in that DirectX was written by Microsoft programmers and JavaFX is being written by ORACLE employees a database company whose software writing capabilities were questionable even when they just writing bloated database code and you start to get the picture. If you examine all the interfaces and HAL layers they are planning for JavaFX in a realistic light it is obvious that there is no light at the end of the tunnel on this one. Even on web and mobile platforms you are far better off using web frameworks and J2ME. The memory footprint of JavaFX is such that it is not realistically deployable except to devices that have lots of spare memory. If you have developed for a cell phone you know that J2ME as it stands is barely tolerable so slapping some huge library on top of this just to provide Windows-like buttons is not going to happen. Same story on the web. If your app is so big you can't download it in Swing and perform inside of a browser JavaFX is not going to solve that problem its just going to make it worse due to HAL stability issues. Trust me after you have crashed a few customer's browsers your bosses will have you going back to a web framework pronto. Maybe sometime JavaFX will be worth your time but that day is years away right now. 2014 UPDATE Just posting to point out how I was the ONLY one on this question to answer correctly. Here we are 5 years after the post and 7 years after JavaFX was released and it is STILL a bug-ridden piece of crap that nobody uses for the reasons I specified. Maybe more Oracle evangelists will help LOL. Oh great now I am going to get down voted by all the devs fixing bugs in JavaFX and promising it will be ready ""any day now"". I should have realized this was one of those ""Yes! Learn this great new technology posts."" where you get rewarded for hyping new stuff that sucks. Also as for the ""sun devs work at Oracle now"" I guess you don't know that virtually anyone from Sun with talent ditched Oracle long ago Gosling Bray Phipps and dozens of others down the ranks. You do know that all the sun programmers are now working at oracle? its not just the database programmers who are working on java now. +1 For the info about complexity memory footprint and interfaces and HAL layers. -1 For the reference about who is writing the software and their skills: I don't care about who is writing a piece of software nor about their skills. I do care about the final product. And yes you could be expecting to get downvoted for such gratuitous comment. (I wish I could downvote your comments... flagging them is too much) +1 for a thought-provoking critical response which probably would be better received by the average reader if sources were cited. Here we are almost a YEAR after this stupid off topic post was made and the only freakin answer that was right was mine: which is that JavaFX is STILL a bug-ridden hairball a *** YEAR *** later. Maybe if Oracle hires a few more ""ambassadors"" it will help. Nice answer. I like people with strong opinions. And I do care who's writing software because it has a direct impact on quality of final products.  I don't think there's anything you can't do with Swing. Event handling shouldn't be a problem if you have done your core java homework. If you looking for better UIs then override paint method use GradientPaint and experiment with the LookAndFeel. Also note as of now you cannot redistribute JavaFX Runtime with you application. But you can bundle JRE with your app which contains the required swing libraries. UPDATE Native Packaging Oracle now provides different methods for deploying JavaFX applications. One of them is Self-Contained Application Packaging. The package is simply a single folder on your hard drive that includes all application resources as well as Java Runtime. It can be redistributed as is or you can build an installable package (for example EXE or DMG format). Your application is easily deployed on fresh systems with no requirement for Java Runtime to be installed. But the application will not auto update as in case of an Applet or Web Start. It is the responsiblility of the developers. But you can vote for the feature ""Add ability to automatically update co-bundled app"" on JIRA I recommend this Oracle blog for JavaFX native packaging. They are doing a great job. Must say. No Always on Top But JavaFX yet doesn't provide Always On Top as the JFrame in swing which is regularily used. You can't move your JavaFX app over the taskbar on windows. JavaFX 2.2 Stage always on top JavaFX is not thread-safe JavaFX uses the same EDT as Swing and is not thread-safe. It uses a SwingWorker's cousin . As pointed in a comment by William Billingsley : I was hoping JavaFX 2.0 would take the step of being thread-safe. Tasks still seem predicated on the idea that off-UI-thread tasks are long and few. As cores increase it seems to me that off-thread tasks in future might be short and many. So the Task would increasingly be boilerplate littering code.I had quietly hoped JavaFX 2.0 would be designed to be thread-safe and that the default would be that the Application does not sit on the event dispatch thread but entirely in one or more Worker threads Fxexperience Blog At the moment there are very few places you can find help on JavaFX but Oracle is promoting the new platform with the FX Experience blog for latest updates demos and links from different sources. They provide scenic view which helps in design and visualization of your app during development. BOTTOM LINE I still personally prefer Swing due to the vast resources available on the internet and the community surrounding it. ""Swing is not dead Yet"". But JavaFX looks promising indeed. +1 Not being able to redistribute the JavaFX Runtime is a deal breaker even though I really like the look and feel of JavaFX. Thread-safe GUI toolkits are very hard to write and maintain. There is a reason no widely used GUI toolkit supports multiple threads.  I think that using JavaFX will be more difficult due to the relative lack of documentation tutorials examples etc. Furthermore I would say that JavaFX assumes a little bit of pre-familiarity with Swing for example the event model (ActionListeners etc) and the event-dispatch thread. There's 10 years worth of Swing resources and libraries out there on the internet. just for future visitors - this is not longer accurate. There are plenty of JavaFX tutorials and it is now part of the standard Java 8 JRE meaning it actually is now the Swing replacement.  JavaFx is good enough to create any GUI and is cheaper than Swing for desktop applications. Comes with support for new computer features like multi touch. In no time you can create beautiful modern mocks of your UI with JavaFX Builder and your GUI will look similar in all OS environments with the look that you give with the help of CSS. But it is not perfect: there are little bugs here and there that you will have to fix with workarounds (nothing too serious). JavaFX needs more computer power than Swing to be really smooth. For the other side we have Swing which is good and reliable. You can quickly create a traditional GUI layout (with Netbeans) but it is really heavy for special GUI customization. One nice feature is that your GUI application can look native under the OS where it runs but that can take you to the infamous 'Write Once Debug Everywhere' especially when you want 'no native' UI behaviors and that is where Swing will be expensive to program. So if you will develop an application with really basic GUI requirements use Swing without doubts. When the look of you application is the key for the success of your product or if you will need to create custom GUI commponents then you must use JavaFX because it comes with more dynamic features. FYI: JavaFX Scene Builder 1.0 http://www.oracle.com/technetwork/java/javafx/downloads/index.html  Several answers focus on a feature comparison - my answer tries to give a personal feedback of my use of JavaFX 2 so far: The -- Integration with Swing in a one-way street: you can embed JavaFX 2 scenes in a Swing panel but you can't do the opposite - it can be an issue if you have many existing Swing components. Corollary: an important consideration is the number of available component libraries: for example if you need advanced charting capabilities there is no equivalent for JFreeChart in the JavaFX environment (yet) - going for JavaFX is probably not in your interest in that case. other example: some of the advanced components of SwingX are not available in for Java FX (for example: tree table) less support is often cited - I haven't found it very penalising so far - there are already a lot of resources online and JavaFX 2 questions on SO tend to attract answers (admittedly not as fast as Swing) The ++ Subjective opinion: I prefer the L&F of JavaFX over Swing a lot. Best way is to find out by yourself by running one of the many demos now available online or by checking the snapshots on Oracle official website Ease of use (subjective again): I personally prefer the general design of Java FX: extensive use of generics binding / properties avaiable in the standard API. But in the end it is an event-driven environment similar to Swing Thread safety: exceptions are sent when JavaFX 2 components are called outside the GUI thread - I prefer that than weird unidentified behaviour when the same happens in Swing - not sure if there is a 100% coverage though Stability: the earlier versions had quite a few bugs but I have not encountered any bugs in 2.2 yet - bug tracker publicly available Release cycles: I have found the development to be very active with bugs being fixed quite fast and new features being added very regularly. They have also been working on performance Integration: JavaFX 2 is now part of the Java SE JavaFX 2 is now available for Windows OSX and Linux JavaFX 2 offers good integration with Java Webstart Open source: I understand that UI controls have been open sourced (open JDK) - not sure about the rest Update It is interesting to note that less than 6 months later some of the above has already become outdated. For example: JavaFX is now available on ARM processors and a version for ios and android is soon going to be open sourced (info buried in the middle of this post showing that a lot more open sourcing has been going on). A lot of new features are planned for JavaFX 8 which will ship with Java 8 in Q1 2014 including a TreeTableView (cf. one of my comments in the -- section) a new 3D engine and the possibility to embed Swing components within a JavaFX application. Bottom line: the cons are being sorted out and JavaFX 8 should solve most of the issues mentioned above. Note: I have no affiliation whatsoever with JavaFX +1 for Subjective opinions :-) next JavaFX_3 could be real option for Java GUI designer btw nice described JavaFX is much harder than Swing because JavaFX has not enough tutorials or documentations"
691,A,"use of invokeLater Pretty sure all of these approaches will work but I'd appreciate opinions on which is the best. Consider for argument's sake the (unfortunate) scenario where you have UI changing code and reasonably intensive (average 500ms) logic code mixed and inseparable. all of the changing ui components are on the one panel. 01 new Thread(){ 02 public void run(){ 03 04 for (int i = 0; i < 100; i++){ 05 // some processing 06 doSomething(); 07 // update some ui components 08 panel.doSomeUi(); 09 } 10 11 panel.revalidate(); 12 panel.repaint(); 13 14 }}.start(); Which of the following 3 approaches would you choose and why? wrap all code in invokeLater call invokeLater inside doSomeUi() and then again for revalidate/repaint only use invokeLater for revalidate/repaint at end For mine: option 1 would hang the Event Processing Thread (EPT) while all of the processing occurs option 2 would have overhead considerations with many new runnables being created and in special cases may cause the ui to update in a half complete state if components need some of the subsequent ui changes to be valid option 3 would be the most efficient but may have some thread safety issues keen to hear other opinions. Did you read the Java Lesson: Concurrency in Swing and consider using Worker Threads. Also check the TumbleItem Example The Lesson explicitly says: Tasks on the event dispatch thread must finish quickly; if they don't unhandled events back up and the user interface becomes unresponsive. and When a Swing program needs to execute a long-running task it usually uses one of the worker threads thanks but that doesn't change much essentially you're saying you'd use a utility class or many instances of a utility class to do the same thing... i haven't used SwingWorker because it's relatively new but my understanding is that it's just a convenience class to encapsulate a two part task - processing+ui. right?  revalidate and repaint is thread safe. They have their own invokeLater thing built into them you can call revalidate and repaint from any thread and at any time. It's even so smart made that if you call revalidate a thousand times before it actually validates anything it will put together all those thousand calls into a single call.  The doSomeUi () some should be wrapped in an invokeLater () and should trigger whatever repaint/redrawing is necessary -- the Swing UI thread will paint while you keep computing. The overhead of creating a lot of short-lived Runnable's will be tiny on a modern VM and shouldn't be an issue. So option 2 (with suggested modification) should be it. When writing multi-threaded code slow and correct is always better than fast and randomly buggy. i'll accept this answer unless someone goes into a bit more depth...  First of I would get it running single threaded. As an integral part of that I would make sure I had good code (e.g. not extending Thread and JPanel) with good separation of ""business"" logic and UI tests etc. It might not be something impressive but it is deliverable. Check that into version control. Then perhaps see if there is a small hot section I can do in parallel. There are extreme ways of approaching the problem of multithreading. With no shared state we can queue immutable action events out from the UI and queue immutable update events back in to replace the UI copy of the model. Alternatively we can share state and be very careful with locking (I suggest the biggest locks that could possibly work - careful with callbacks). It may be useful to note that you don't have to add listeners to every little thing. You can have coarse grain listeners and then rapidly scan through data structures for updates. An important thing to note is that the actions the UI sends to the ""business"" model and the state updates in the reverse direction should be as decoupled as possible (i.e. run from SwingWorker). firstly when did i mention extending JPanel? secondly while your advice **sounds** good i don't see how it relates the question. i've clearly stated that for arguments sake good separation is impossible. maybe it's the question that is flawed but what i'm trying to get at is more the trade offs of locking the EDT for the whole process locking the EDT many times during the process or performing most of the UI tasks off the EDT and then 're-synchronizing' by repaint/validating on the EDT at the end. `panel.doSomeUi();` *suggests* extending `JPanel` to me. Perhaps `doSomeUi` is a stand in for some `JPanel` methods but there are limited choices off EDT. If separation is ""impossible"" as I suggest in my first paragraph the first order of business is to do the ""impossible"". ok i should have written doSomeUi(panel); it was meant to be a semi-sudo code eg that would suggest ui code within the scope of a single container."
692,A,"Session management using Hibernate in a *multi-threaded* Swing application I'm currently working on a (rather large) pet project of mine  a Swing application that by it's very nature needs to be multi-threaded. Almost all user interactions might fetch data from some remote servers over the internet  since I neither control these servers nor the internet itself long response times are thus inevitable. A Swing UI obviously cannot repaint itself while the EDT is busy so all remote server calls need to be executed by background thread(s). My problem: Data fetched by the background threads gets 'enriched' with data from a local (in-memory) database (remote server returns IDs/references to data in the local database). This data later eventually gets passed to the EDT where it becomes part of the view model. Some entities are not completely initialized at this point (lazy-fetching enabled) so the user might trigger lazy-fetching by e.g. scrolling in a JTable. Since the hibernate session is already closed this will trigger a LazyInitializationException. I can't know when lazy-fetching might be triggered by the user so creating a session on demand/attaching the detached object will not work here. I 'solved' this problem by: using a single (synchronized  since Session instances are not thread-safe) Session for the whole application disabling lazy-fetching completely While this works the application's performance has suffered greatly (sometimes being close to unusable). The slowdown is mainly caused by the large number of objects that are now fetched by each query. I'm currently thinking about changing the application's design to 'Session-per-thread' and migrating all entities fetched by non-EDT threads to the EDT thread's Session (similar to this posting on the Hibernate forums). Side-note: Any problems related to database updates do not apply since all database entities are read-only (reference data). Any other ideas on how to use Hibernate with lazy-loading in this scenario ? You could look have a look at Ebean ORM. It is session-less and lazy loading just works. This doesn't answer your question but really proposes an alternative. I know Ebean has built in support for asynchronous query execution which may also be interesting for your scenario. Maybe worth a look. Rob. Hi Rob Thanks for the link - I assume you're the lead developer ? ;-) Anyway sounds promising ... I think I'll give it a try when I have some time to spare.  There are two distinct problems that should get resolved seperately: Handling of Hibernate Sessions in Swing Applications. Let me recommend my own article regarding this problem: http://blog.schauderhaft.de/2008/09/28/hibernate-sessions-in-two-tier-rich-client-applications/ The basic idea is to have a session for every frame excluding modal frames which use the session of the spawning frame. It is not easy but it works. Meaning you won't get any LLEs anymore. How to get your GUI thread separated from the back end. I recommend to keep the hibernate objects strictly on the back end thread they originate from. Only give wrapper objects to the ETD. If these wrapper objects are asked for a value they create a request which gets passed to the backend thread which eventually will return the value. I'd envision three kinds of wrapper Implementations: Async: requests the value and gets notified when the value is available. It would return immediately with some dummy value. On notification it will fire a PropertyChange event i.O. to inform the GUI about the 'changed' value (changed from unknown to a real value). Sync: requests the value and waits for it to be available. Timed: a mixture between the two waiting for a short time (0.01) seconds before returning. This would avoid plenty change events compared to the async version. As a basis for these wrappers a recommend the ValueModel of the JGoodies Binding library: http://www.jgoodies.com/downloads/libraries.html Obviously You need to take care that any action is only performed on actually loaded values but since you don't plan on doing updates this shouldn't be to much of an issue. Let me end with a warning: I have thought about it a lot but never actually tried it so move with care. I am not sure what you mean by shared references. But I probably agree :) Hibernate objects and their sessions need to get confined to a well defined scope and the scope of two sessions must not overlap. If you need to move an object from one scope to the other you'll have to reload it in the target session. won't work for shared references but it would in copied references  Don't expose the Session itself in your data API. You can still do it lazily just make sure that the hydration is being done from the 'data' thread each time. You could use a block (runnable or some kind of command class is probably the best Java can do for you here unfortunately) that's wrapped by code that performs the load async from the 'data' thread. When you're in UI code (on the UI thread of course) field some kind of a 'data is ready' event that is posted by the data service. You can then get the data from the event use in the UI. I'm aware of the ""ever growing session"" problem but currently this is currently far outweighted by the 'lazy fetching disabled' problem ;) Wouldn't I still need two Sessions for this (one for the data thread one for the EDT) so that lazy-fetching within the view works ? Maybe I didn't understand your answer correctly (English not being my first language) but wouldn't this still trigger a LazyInitException when the view model (=EDT) tries to lazily fetch data (since EDT != 'data' thread) ? Anyway your suggestion would work for my application if parsing the server's response would be performed on the EDT and not by some other thread as it's currently being done....hmmmm...I have to think about this ;) Thanks for taking your time ! His answer presumes you have a single session in the data thread which you do not close. However this suffers from the problem of the ever growing L1 cache unless you're very fastidious about detaching items from the session when they're no longer needed."
693,A,"How to select all text in a JFormattedTextField when it gets focus? I have a small Java desktop app that uses Swing. There is a data entry dialog with some input fields of different types (JTextField JComboBox JSpinner JFormattedTextField). When I activate the JFormattedTextFields either by tabbing through the form or by clicking it with the mouse I would like it to select all the text that it currently contains. That way users could just start typing and overwrite the default values. How can I do that? I did use a FocusListener/FocusAdapter that calls selectAll() on the JFormattedTextField but it doesn't select anything although the FocusAdapter's focusGained() method is called (see code sample below). private javax.swing.JFormattedTextField pricePerLiter; // ... pricePerLiter.setFormatterFactory( new JFormattedTextField.AbstractFormatterFactory() { private NumberFormatter formatter = null; public JFormattedTextField.AbstractFormatter getFormatter(JFormattedTextField jft) { if (formatter == null) { formatter = new NumberFormatter(new DecimalFormat(""#0.000"")); formatter.setValueClass(Double.class); } return formatter; } }); // ... pricePerLiter.addFocusListener(new java.awt.event.FocusAdapter() { public void focusGained(java.awt.event.FocusEvent evt) { pricePerLiter.selectAll(); } }); Any ideas? The funny thing is that selecting all of its text apparently is the default behavior for both JTextField and JSpinner at least when tabbing through the form. I know this is kind of old but I came up with a cleaner solution without invokeLater: private class SelectAllOfFocus extends FocusAdapter { @Override public void focusGained(FocusEvent e) { if (! e.isTemporary()) { JFormattedTextField textField; // Get your text field here it depends on your own code // This is needed to put the text field in edited mode so that its processFocusEvent doesn't // do anything. Otherwise it calls setValue and the selection is lost. textField.setText(textField.getText()); textField.selectAll(); } } } works for me in all cases +1  In addition to the above if you want this for all text fields you can just do: KeyboardFocusManager.getCurrentKeyboardFocusManager() .addPropertyChangeListener(""permanentFocusOwner"" new PropertyChangeListener() { public void propertyChange(final PropertyChangeEvent e) { if (e.getNewValue() instanceof JTextField) { SwingUtilities.invokeLater(new Runnable() { public void run() { JTextField textField = (JTextField)e.getNewValue(); textField.selectAll(); } }); } } });  The code of camickr can be slightly improved. When the focus passes from a JTextField to another kind of component (such a button) the last automatic selection does not get cleared. It can be fixed this way:  KeyboardFocusManager.getCurrentKeyboardFocusManager() .addPropertyChangeListener(""permanentFocusOwner"" new PropertyChangeListener() { @Override public void propertyChange(final PropertyChangeEvent e) { if (e.getOldValue() instanceof JTextField) { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { JTextField oldTextField = (JTextField)e.getOldValue(); oldTextField.setSelectionStart(0); oldTextField.setSelectionEnd(0); } }); } if (e.getNewValue() instanceof JTextField) { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { JTextField textField = (JTextField)e.getNewValue(); textField.selectAll(); } }); } } });  Wrap your call with SwingUtilities.invokeLater so it will happen after all pending AWT events have been processed : pricePerLiter.addFocusListener(new java.awt.event.FocusAdapter() { public void focusGained(java.awt.event.FocusEvent evt) { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { pricePerLiter.selectAll(); } }); } }); Thanks that's it. I can only guess that the NumberFormatter is doing something that undoes the selectAll()? Yes it does. It formats the value and resets the text. +1 Needed this could not remember instantly how to do this my self googled and immediately found this answer. Thanks!  Thats because the JFormattedTextfield overrides processFocusEvent to format on focus gained/focus lost. One sure shot way is to extend JFormattedTextField and override the processFocusEvent method : new JFormattedTextField(""..."") { protected void processFocusEvent(FocusEvent e) { super.processFocusEvent(e); if (e.isTemporary()) return; SwingUtilities.invokeLater(new Runnable() { @Override public void run() { selectAll(); } }); } }; Using a focusListener might not always work..since it would depend on the time at which it is called relative to the processFocusEvent."
694,A,"How are Swing components internally created laid out repainted notified of events ...? I wonder if there's a good documentation (or a (viewable) ebook) about the lifecycle of Swing components. Is ""lifecycle"" the correct term anyway? I hope to find answers to question such as: How when in which order painting methods are called? How when which events are called by whom? What is the exact sequence of method calls for component creation? From time to time I encounter strange behavior of my apps for example: ComponentListener's resize event is called before setVisible(true) (so that root pane has negative dimensions!) Some components are laid out correctly only after resizing the JFrame by hand Changing a super class from JPanel to JLayeredPane causes my class to be laid out differently inside an other container. And lot of other strange things... I had the same question long ago. I can't believe how hard is to find a good resource about this topic in the internet. Fortunately I've found this link and now I have it in my bookmark with golden tag. :) A Swing Architecture Overview Once you have a good grasp of how they work conceptually you will be able to fix most of the problems you mention. I hope it helps."
695,A,"Zero-padding a spinner in Java How do you add zero padding to a JSpinner? Since the spinner creates the JFormattedTextField itself I can't just pass the format into the JFormattedTextField constructor. Isn't there a way to set the formatting on an existing JFormattedTextField? What I want: value = 37 editor = ""0037"" UPDATE: I have tried this as suggested: JSpinner mySpinner = new JSpinner(); mySpinner.setEditor( new JSpinner.NumberEditor(mySpinner ""####"")); and the result is no change at all to the presentation of the spinner's data. It seems like a reasonable solution; has anyone tried this successfully so I can be sure it's just something flaky in my own application? I had used it before; that's how I knew where to look. Let me do a little test with your code... There got it. Answer updated. Yep that definitely works - I was just about to post the same edit. Thanks. Referring to the javadocs JSpinner has a setEditor(JComponent) method. Use that to set your custom JFormattedTextField with its custom Format.  You can set the editor yourself like this: // minimum of four digits mySpinner.setEditor(new JSpinner.NumberEditor(mySpinner ""0000"")); ""0000"" is a DecimalFormat string specifying four digits zero-padded as necessary; ""####"" specifies four digits but does not zero-pad. The DecimalFormat API documentation covers formatting strings in more detail."
696,A,"Scrollable JPanel How to make a JPanel scrollable? I implemented the scrollable interface yet when adding it to the containing panel with tabbedPane.add(""Editor"" new JScrollPane(storeyEditor = new MNScrollablePanel())); nothing works Code: public class MNScrollablePanel extends JPanel implements Scrollable { public Dimension getPreferredScrollableViewportSize() { return getPreferredSize(); } public int getScrollableBlockIncrement(Rectangle visibleRect int orientation int direction) { return 10; } public boolean getScrollableTracksViewportHeight() { return false; } public boolean getScrollableTracksViewportWidth() { return false; } public int getScrollableUnitIncrement(Rectangle visibleRect int orientation int direction) { return 10; } } As mentioned in all the other posting there is no reason to implement the Scrollable interface yourself. However if you are just playing around then the basic code posted looks reasonable. However you did not post your demo program showing how you use this code. In the future post a SSCCE with your question. If you don't know what a SSCCE is then search the web. Once possible problem is that scrollbars appear automatically when the ""preferred size"" of the component added to the viewport of the scrollpane is greater than the size of the scrollpane. So if you are doing custom painting on the panel you are responsible for setting the preferred size of the panel as it changes. If you are using a panel with components and a layout manager then you don't have to worry about this. But if you are using components with a null layout manager you will also have problems. That is why we need a SSCCE because we don't know the context of how you are using the panel.  You have to use a JScrollPane. And then call the setViewportview(Component); You don't have to implement scrollable JPanel is allready scrollable You can add any component to a JScrollPane whether it implements Scrollable or not but implementing Scrollable will give you more control. JPanel does not implement Scrollable so you have to sub-class it if you want more control over how the scroll pane behaves when displaying the panel. (Or you can set properties on the `JScrollPane`/`JScrollBar`s without implementing anything.) @Dan: Yes but I never said 'implements'  JPanel doesn't implements Scrollable. It is better to use JXPanel from SwingX which implements Scrollable and has lot more features.  It worked with me like this.... JPanel test = new JPanel(); test.setPreferredSize(new Dimension( 20002000)); JScrollPane scrollFrame = new JScrollPane(test); test.setAutoscrolls(true); scrollFrame.setPreferredSize(new Dimension( 800300)); this.add(scrollFrame);  I have a new solution for you. I think you have to use this code: storyEditor = new JPanel(); storyEditor.setPreferredSize(new Dimension(... ...)); // Insert Here your size for the editor JScrollPane scroller = new JScrollPane(storyEditor); tabbedPane.add(""Editor"" scroller)); frame.setSize(frame.getWidth()+1 frame.getHeight()); // frame is the JFrame where the tabbed pane is into // Maybe you can replace ""frame"" with ""this"" // You need to resize your frame. Why I don't know... frame.pack(); // Your original size will be restored by calling pack This was a solution for me. I hope for you to!"
697,A,"Detecting a JRadioButton state change How can I detect when a JRadioButton is changed from 'unselected' to 'selected' when clicked with the mouse? I've tried using an ActionListener on the button but that gets fired every time the radiobutton is clicked not just when it's changing state to 'selected'. I've thought of maintaining a boolean variable that remembers the state of the button and test it inside the ActionListener to see whether to change its state but I'm wondering if there's a much better or cleaner solution. Yesan ActionListner is usually the way it is done. Everybody knows how to write an ActionListener because it is so common. The code simply would then simply use the isSelected() method of the button. The ItemListener fires multiple times as well so you have to check the ItemEvent to see whether this event was a select or deselect. I would stick with the more common approach. Using an ActionListener like this still doesn't work as isSelected() returns true every time the radio button is clicked which is what my initial problem was. Works fine for me using JDK6 on XP. If the ChangeListener tells you the state has change then the state better be changed or you have a big problem. Post your SSCCE showing the problem. @camickr you told him in your first comment to use an ActionListener and then when he explained there is a problem with that you comment like you told him to use a ChangeListener. Both of those listeners have problems as pointed out below. Sun's tutorial on buttons checkboxes and radio buttons. Going to that link was my first reaction also but then I realized that the only example they give is using an ActionListener on a JRadioButton. :/  Look at JRadioButton.addItemListener() EDIT: It is unlikely you want to use a changeListener as it fires multiple times per click. An itemListener fires only once per click. See here EDIT2: Just to expand on this an actionListener on a jradioButton will fire every time a user clicks on it even if it is already selected. if that's what you want fine but I find it annoying. I only want to be notified it it is selected or deselected. A ChangeListener will fire for all sorts of things meaning your listener will receive 5 or more events per click. Not good. An itemlistener will fire only if the selected or deselected state changes. This means that a user can click on it multiple times and it will not fire if it doesn't change. In your handler method you will have to have an if block checking for SELECTED or DESELECTED status and do whatever there: @Override public void itemStateChanged(ItemEvent e) { if (e.getStateChange() == ItemEvent.SELECTED) { // Your selected code here. } else if (e.getStateChange() == ItemEvent.DESELECTED) { // Your deselected code here. } } It just works better because you know that if you are in the method then the radio button has either just been selected or deselected not that the user is just banging on the interface for some unknown reason. This works perfectly - despite the Sun documentation stating ""Usually you handle radio button clicks using an action listener"". Thanks!  I believe you want to add a ChangeListener implementation. As I mentioned in my post adding a ChangeListener fires multiple times per click and is unlikely the best choice."
698,A,"Window events for JFrames that are hidden/shown via setVisible? Which sort of listener do I have to add to a JFrame to detect when it is being hidden/shown via setVisible? I tried using a WindowListener and the windowOpened and windowClosed methods but they only work for the first time that a window is opened (windowOpened) or respectively when the window is closed using the dispose method (windowClosed). That is not enough for me. I want to be notified every time the window is made visible and invisible on the screen using setVisible. Is there a standard swing way to achieve this or do I need to make my own (by say overriding the setVisible method)? 1- Create a class that implements ComponentListener Interface Like the following example:  //--------------------- import java.awt.event.ComponentEvent; import java.awt.event.ComponentListener; public class winlistenner implements ComponentListener { public void componentHidden(ComponentEvent arg0) { // TODO Auto-generated method stub System.out.print(""Hided\r\n""); } public void componentMoved(ComponentEvent arg0) { // TODO Auto-generated method stub System.out.print(""Moved\r\n""); } public void componentResized(ComponentEvent arg0) { // TODO Auto-generated method stub System.out.print(""Resized\r\n""); } public void componentShown(ComponentEvent arg0) { // TODO Auto-generated method stub System.out.print(""Shown\r\n""); } } //------------------------------------------------------------------------ 2- Now create a getter for your JFrame like this: public class JMain { private JFrame frmNetworkshareMoon; private JTextField textField; private JTextField textField_1; private JTextField textField_2; public JFrame getFrmNetworkshareMoon() { return frmNetworkshareMoon; } /** * Launch the application. */ public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { JMain window = new JMain(); winlistenner listenner= new winlistenner(); window.getFrmNetworkshareMoon().addComponentListener(listenner); window.frmNetworkshareMoon.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } //...... // the rest of your class code: //... } 3- being your main like the above example you will set JFrame listener the listener you created and then run the program you will see messages coming from the listener: Moved Resized Resized Moved Shown Moved Moved  Try a java.awt.event.ComponentListener. You can add one using this code (where window is the name of the JFrame) : window.addComponentListener(new ComponentAdapter() { public void componentHidden(ComponentEvent e) { /* code run when component hidden*/ } public void componentShown(ComponentEvent e) { /* code run when component shown */ } });"
699,A,action listening for a JFrame I am trying to listen tab-in tab-out action for my swing gui that is made by JFrame. I have a JTextField added to the JFrame that will be getting the user clipboard whenever the window is selected so the user may tab between programs copy some url so when back to my program this JTextField will be populated by the copied url string. EDIT: I have tried this:  frame.addFocusListener( new FocusListener() { public void focusGained(FocusEvent e) { url= getClipboardData(); } @Override public void focusLost(FocusEvent arg0) { // TODO Auto-generated method stub } } ); it doesnt work So what exactly is the question? How to pull from the system clipboard how to listen for focus events or what exactly? the question is the focus event for the frame :) A frame doesn't recieve a focus event. A component on the frame gets the focus event. If you want to know when a frame gets focus then use a WindowListener and handle the windowActivated event. thanks for the suggestion :)  What you want is a FocusListener not an ActionListener. Check out the java Doc and you'll know how to use it. It's easy.  it looks like you are not setting the clipboard data onto the text field. frame.addFocusListener(new FocusListener() { public void focusGained(FocusEvent e) { getJTextField().setText(getClipboardData()); } public void focusLost(FocusEvent e) { //ignored } }); Something like that will likely solve your problem
700,A,"Tile-like windows on Swing I have zero experience writing applications with Swing but I have one application with which to start experimenting. For this application I want my window to have a variable number of small ""tile""-like structures which can be moved/closed/minimized just like windows by the user inside my main frame and which will display each a small table. I'd like to know what kind of structures should I use to accomplish this. Bonus points for any answers oriented towards Scala Swing. CardLayout in swing is something quite different. I'm re-phrsasing your question to use the word ""tile"" instead What is a CardLayout in Swing? A CardLayout is for something like a wizard where you want to have one panel and flip back and forth through the contents (like a stack of index cards). It sounds like you want something like what's implemented as JDesktopPane/JInternalFrame. This is what's commonly known as MDI. Check out Sun's ""How to Use Internal Frames"" page.  Check out my answer in this similar question for an example of how to use JDesktopPane and JInternalFrame.  Maybe a docking framework is what you are looking for. You could have a look at InfoNode Docking Windows."
701,A,"Change color of WindowsPlacesBar in JFileChooser This is a followup question to my previous one: http://stackoverflow.com/questions/1241984/need-filedialog-with-a-file-type-filter-in-java I've got a JFileChooser (using that instead of a FileDialog so I can have a file type filter) and I've managed to style it pretty decently for our darker color scheme option except for that little panel on the left. I FINALLY figured out that the one on top was the ""ToolBar.background"" but I have no idea what that one is called. Help? I eventually figured out that the name of the property by looking in the source code for the WindowsPlacesBar: Color bgColor = new Color(UIManager.getColor(""ToolBar.shadow"").getRGB()); setBackground(bgColor); I set the ToolBar.shadow though and nothing changed. Further poking around eventually helped me to realize that the XPStyle.subAppName property was overriding anything I put in. I added this piece of code: JFileChooser chooser = new JFileChooser(); setWindowsPlacesBackground( chooser ); private void setWindowsPlacesBackground( Container con ) { Component[] jc = con.getComponents(); for( int i = 0; i < jc.length; i++ ) { Component c = jc[i]; if( c instanceof WindowsPlacesBar ) { ((WindowsPlacesBar) c).putClientProperty(""XPStyle.subAppName"" null); return; } if( c instanceof Container ) { setWindowsPlacesBackground( (Container)c ); } } } By unsetting that property it allowed my colors and schemes to come through. I still feel like there should be a more clean way of unsetting it than iterating through the containers but I couldn't find it. It did seem like the WindowsPlacesBar was always the first component in the FileChooser. I'm going to leave this open for another day or two just in case somebody else can show me something more ""elegant."" Also apparently it's completely impossible to change the color of a JToolBar (which this inherits) in Java 5 but was fixed in Java 6.  I have no idea how to change its color but I do know how to get rid of it: UIManager.put(""FileChooser.noPlacesBar"" Boolean.TRUE); Or if you really want the panel displayed then maybe you search the source code to see how that panel is created to see if any override of its default color is possible. Well I didn't know it was called the ""Places Bar"" so that seems like it could be helpful but I still can't the property for changing it's color. The obvious ""FileChooser.placesBarBackground"" was a no go."
702,A,recognise combobox deselect when using Swing + models? I'm trying to write a nice GUI in Swing that uses the proper Model-Delegate pattern as much as possible. I have a JComboBox that when changed needs to update the model with the new data. To get the currently selected item I am using: fooCombo.addItemListener(new ItemListener() { public void itemStateChanged(final ItemEvent arg0) { fooChangedHandler((Foo) fooModel.getSelectedItem()); } }); Which returns what the data was changed to as a nice Object. However I can't find a way to find out the old value so I don't know which object needs to be changed. Any ideas here? ended up not going to the model at all but getting my object from the getItem method like so: public void itemStateChanged(final ItemEvent event) { if (event.getStateChange() == event.DESELECTED) { deselectedFoo = (Foo) event.getItem(); } else if (event.getStateChange() == event.SELECTED) { FooChangedHandler(deselectedFoo(Foo) event.getItem()); } }  Foo oldFoo; .... fooCombo.addItemListener(new ItemListener() { public void itemStateChanged(final ItemEvent arg0) { Foo newFoo = (Foo) fooModel.getSelectedItem(); fooChangedHandler(oldFoo newFoo); oldFoo = newFoo; } }); I agree that this is the simplest solution. However I suggested a custom ComboBoxModel as Kieran says he wants to use the proper Model-Delegate pattern as much as possible. I would say this breaks that pattern by keeping the last selected item outside the model.  As the default ComboBoxModel and ItemEvent does not let you get the previously selected value you could implement your own ComboBoxModel with this feature.
703,A,"Obtaining a screen shot of an Applet? Given an Applet object is it possible to programatically obtain a ""screen shot"" of the applet window (represented as say a BufferedImage)?  JApplet applet = this; // ... code here ... BufferedImage screenshotOfApplet = ...; You could use Robot.createScreenCapture(Rectangle bounds) - however the applet would have to be signed to allow this to work once deployed. After comments - If you just want the applet component - You can create a BufferedImage and paint to it - something like this: public static BufferedImage imageFor(Component component) { BufferedImage image = new BufferedImage(component.getWidth() component.getHeight() BufferedImage.TYPE_INT_RGB); Graphics g = image.getGraphics(); component.paint(g); return image; } I'm not sure if this would require the applet to be signed or not... createScreenCapture(..) gives me the entire screen including the browser window etc. I'd like the ""applet window"" only.  At least if you're only using Swing components I suppose it would be possible to create a BufferedImage of the same size as the applet and call the applet's paint method with the Graphics object you can get from BufferedImage#getGraphics(). I have no template code here to test if it actually works but I guess it's worth a try.  I think you want java.awt.image.PixelGrabber. (IIRC that was behind the massive slowdown is Java graphics performance from 1.1 to 1.2 although I might be wrong.)  Screen Image. Must admit I've never tried it on a JApplet before but it works fine on JFrames and JDialogs."
704,A,"Java: When is Java 6 ready for end-user desktop application? I am writing a desktop application written in Swing developed using Java 1.5. Some of the users seem to be using Mac but I am interested in Java 6's scripting feature (Java 6 ships with Rhino). Java 6 although it came out almost 2 years ago doesn't seem to be widely in use. I also hear Apple ships Java 6 only for Intel 64 Macs only. Is Java 1.5 the last Java that runs everywhere? Is Java 6 ready for end-user desktop application now? If not now when? Edit: Don't get too hung up on the fact that I am using Swing. I would like to know when Java 6 can be considered ready for prime time not the choice of UI library. Java 6 has been out 2.5 years and doesn't use Rhino any more for its JavaScript support. I have been using Java 6 with Swing for almost 2 years.. As far as I know it already is and has been for some time now. Swing's just fine for writing native looking apps. It is true though that if you are targeting older Macs you'll never be able to use Java 6. Are you asking about Java 6 Update 10 (AKA the consumer oriented JRE)? That just came out and is unavailable for Macs yet but I don't think that should affect you really.  From what I can tell most of the really successful Java desktop applications aren't using Swing. It's gotten much faster but most people want their windows to ""look native"" and Swing just isn't good at that. If you are intending a real ""professional"" looking end-user application you may want to take a look at the Eclipse Runtime. It's used by the Eclipse application and Azureus to render native-look-and-feel windows for a user. Of course it's hard to find a good tutorial on how to write for the Eclipse Runtime at least in comparison to the proliferation of good example code books and tutorials for writing Swing applications. Java 6 has been out for almost two years now... It's stable enough for development though for some reason as other posters have pointed out the Mac version isn't here yet. I think you have a good point but it doesn't answer my question. When is Java 6 ready? The feature I am interested in Java 6 is scripting. I've edited and updated the Java 6 portion IntelliJ is entirely Swing and looks the same on all platforms something SWT isn't very good at. ;) The point of SWT is not to look the same on all platforms its to look the same as the native platform apps on each platform. It does a pretty good job of that.  As the top answer says Apple's version of Java 6 has been available for Mac OS X 10.5 since April 29 2008. (It can be downloaded here.) Rhino is unfortunately not part of the package though.  Java 1.6 is great for the desktop. I don't know what Apple's problem is. I'm just not supporting Macs anymore until Apple can get their act together.  Java 6 is not officially out for all Macs yet. If you want to be more widely accepted go with 1.5 (5). You say 'yet'. Do you know if Apple has plans to ever release Java 6 for 32-bit Intel Macs or for PowerPC Macs? I was under the impression that these machines would never get Java 6 from Apple.  The speed of availability of 1.6 on Mac is an Apple issue (this has much more to do with politics than 'readiness'). If scripting support embedded in the JVM is a requirement you'll have to wait to get that support on Mac. Or you could just load the Rhino library with your distro and use it... Here's the reference implementation - I'm not sure how much of JRE 1.6 is required for them to run (probably not much if nay) - https://scripting.dev.java.net/ Gotta love the JCP :-) Note that while Rhino is shipped with Sun's implementation of JRE 1.6 it's not part of the JRE standard so it's quite possible that Apple won't choose to include it in their distro. If this is the only thing from 1.6 that is holding you back don't let it. Java is absolutely ready for the desktop we have several product lines that are Swing apps."
705,A,"Java Swing: multiple windows I'm new to GUI programming but need to create a multiple window GUI. Does anyone know of any good tutorial online or could you please show a simple code that will launch 2 windows? If you know how to launch one window just do it twice. http://java.sun.com/docs/books/tutorial/uiswing/components/internalframe.html the JDesktopPane is cool if you really want an integrated desktop.. it handles objects very similar to JFrames (they are indeed called JInternalFrame) and it automatically handles minimizing maximing top menu bar like a normal document based application.  this website is the best IMO gives you direct How-to-do-it codes with super brief descriptions for GUI tutorials look for ""Swing"" lessons. thanks for the useful link!  Just create two JFrame objects like this:  public static void main(String[] args) throws Exception { SwingUtilities.invokeLater(new Runnable() { public void run() { new JFrame(""frame1"").setVisible(true); new JFrame(""frame2"").setVisible(true); } }); } thank you. this answered what i was looking for.  Java has a class called ""Window"" http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Window.html. This may not be what you want. The normal toplevel object in Swing is a JFrame (http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/JFrame.html) which is a subclass of Window.  I suggest you use NetBeans and create a project using the ""Swing Desktop Application"" pre-existing template. It will create the basic infrastructure for your app including a main window with a menu and status bar with a progress bar about box event handlers etc all pre-wired. What's nice about it for example is that the progress bar is already configured to listen to any action task that you create so by simply creating a new action task you get a working progress bar that will run when the task executes without having to code it. Furthermore you get a visual drag-and drop Editor that certainly sometimes can be frustrating when it comes to resizing and layouts but for simple layouts is very good and easy to use. You'll be able to create an interface in no time. For more info see here."
706,A,"How to have program wait for a button press in Java Now I'm not sure if this is possible or even the best way to accomplish what I'm trying to do but basically I'm creating a very simple simulation program with a very simple Swing GUI. After each round of the simulation some buttons on the interface are enabled for the user to make changes and then the user can press the ""continue"" button to start the simulation again. The simulation itself is basically a while loop that needs to wait for the user action before continuing. My question is how can I have the program stop and wait until the user presses the ""continue"" button? Please let me know if there are any more details I can provide if this is unclear! Edit: I'm going to add some simplified code here so maybe this will make more sense. The program is in two parts the simulation class and the view. So the button to be pressed is in the view class while the simulation is happening in its class. Simulation class: SimulationView view = new SimulationView(); // extends JFrame while (!some_condition) { // code // need user action via button press here before continuing! } The program should just be waiting anyway so when you click on something the event is processed and done and the application just waits. It is event-driven. Most likely the best way to go is enclose one round of the simulation in a method that would then be executed from the action listener attached to the button you want. After edit: Somebody needs to control the simulation in the first place so you could do the following: SimluationClass { public int startSim() { ... } } class SimulationView { SimulationClass sim = new SimulationClass(); private void init() { JButton button = new JButton(""Start""); button.addActionListener(new ActionListener() { void actionPerformed(...) { sim.startSim() } }); } } Keep in mind though that this will freeze your gui as the sim method will be executed from the event thread. See my edit above and maybe it will help my situation make more sense. I understand what you're saying but I don't know how that will work with my program being split between the two classes. Yeah that actually makes sense now. Before I had an instance of the view inside the Simulation but the way you have it the other way around is much better. Thanks I think I can use this to move on!"
707,A,"How to push GridbagLayout not to lay components in the center of JPanel the problem is in centered layout of components GridBagLayout always 'sits' in center of JPanel so I don't care how it will layout components inside my problem is where these components will start laying out on a panel. I tried with: panel.setAlignmentX( JPanel.LEFT_ALIGNMENT ); but it did not helped. Any idea? You can set main layout as flowlayout and set alignment as left. in this panel (flowlayout) add a panel which is gridbaglayout. also this is worked in netbeans  In addition to setting the anchor and fill fields you will likely need to set the weightx field. This helps specify resizing behavior. Quote: Unless you specify at least one non-zero value for weightx or weighty all the components clump together in the center of their container. This is because when the weight is 0.0 (the default) the GridBagLayout puts any extra space between its grid of cells and the edges of the container. The following will keep myComponent anchored to the NORTHWEST corner. Assuming this is JPanel or similar: setLayout(new GridBagLayout()); GridBagConstraints c = new GridBagConstraints(); // Specify horizontal fill with top-left corner anchoring c.fill = GridBagConstraints.HORIZONTAL; c.anchor = GridBagConstraints.NORTHWEST; // Select x- and y-direction weight. Without a non-zero weight // the component will still be centered in the given direction. c.weightx = 1; c.weighty = 1; // Add child component add(myComponent c); To keep child components left-aligned yet vertically-centered just set anchor = WEST and remove weighty = 1;.  You can done it by simply use this utility jar painless-gridbag. It also make your code with GridBagLayout much prettier like following  PainlessGridBag gbl = new PainlessGridBag(getContentPane() false); gbl.row().cell(lblFirstName).cell(txtFirstName).fillX() .cell(lblFamilyName).cell(txtFamilyName).fillX(); gbl.row().cell(lblAddress).cellXRemainder(txtAddress).fillX(); gbl.doneAndPushEverythingToTop(); -1 Substituting one pain with another. It's far more useful to just learn GridBagLayout.  If you want to change where a component is located in a cell created by a GridBagLayout use the parameter anchor from GridBagConstraints. That's not enough you have to have a component that fills the remaining horizontal space. yes I know that; that is not the question problem is in putting this whole 'grid' in the left upper corner of JPanel which is holding elements not interfering with GridBags' interior job of laying out components. Just to tell GridBag: ok guy you do your job as you like just sit on left upper corner instead of sitting in centre @as: Bombe is right that you need to use the GridBagConstraints.anchor just missed the bit about the fill component. I believe I'm right in saying GridBagLayout doesn't respect JComponent.setAlignmentX and JComponent.setAlignmentY both of which apply to the component itself not the contents of a container.  Another solution is that you add two dummy panel (container) to the most right the most bottom. then you adjust weightx and weighty to distribute extra space. if you set 1 to the dummy then all extra space assign to this dummy. this is an example forming in netbeans. package tutorial; /** * * @author ttn */ public class GridBag1 extends javax.swing.JPanel { /** * Creates new form GridBag1 */ public GridBag1() { initComponents(); } /** * This method is called from within the constructor to initialize the form. * WARNING: Do NOT modify this code. The content of this method is always * regenerated by the Form Editor. */ @SuppressWarnings(""unchecked"") // <editor-fold defaultstate=""collapsed"" desc=""Generated Code""> private void initComponents() { java.awt.GridBagConstraints gridBagConstraints; jLabel1 = new javax.swing.JLabel(); jTextField1 = new javax.swing.JTextField(); jPanel1 = new javax.swing.JPanel(); jPanel2 = new javax.swing.JPanel(); jLabel2 = new javax.swing.JLabel(); jTextField2 = new javax.swing.JTextField(); jScrollPane1 = new javax.swing.JScrollPane(); jTextArea1 = new javax.swing.JTextArea(); setLayout(new java.awt.GridBagLayout()); jLabel1.setText(""jLabel1""); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.gridx = 0; gridBagConstraints.gridy = 0; add(jLabel1 gridBagConstraints); jTextField1.setText(""jTextField1""); jTextField1.setMinimumSize(new java.awt.Dimension(59 20)); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.gridx = 1; gridBagConstraints.gridy = 0; gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL; gridBagConstraints.weightx = 0.3; add(jTextField1 gridBagConstraints); javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1); jPanel1.setLayout(jPanel1Layout); jPanel1Layout.setHorizontalGroup( jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0 227 Short.MAX_VALUE) ); jPanel1Layout.setVerticalGroup( jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0 104 Short.MAX_VALUE) ); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.gridx = 2; gridBagConstraints.gridy = 0; gridBagConstraints.gridheight = 3; gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH; gridBagConstraints.weightx = 1.0; add(jPanel1 gridBagConstraints); javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2); jPanel2.setLayout(jPanel2Layout); jPanel2Layout.setHorizontalGroup( jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0 172 Short.MAX_VALUE) ); jPanel2Layout.setVerticalGroup( jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0 196 Short.MAX_VALUE) ); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.gridx = 0; gridBagConstraints.gridy = 3; gridBagConstraints.gridwidth = 2; gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH; gridBagConstraints.weighty = 1.0; add(jPanel2 gridBagConstraints); jLabel2.setText(""jLabel2""); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.gridx = 0; gridBagConstraints.gridy = 1; add(jLabel2 gridBagConstraints); jTextField2.setText(""jTextField2""); jTextField2.setMinimumSize(new java.awt.Dimension(59 20)); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.gridx = 1; gridBagConstraints.gridy = 1; gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL; gridBagConstraints.weightx = 0.3; add(jTextField2 gridBagConstraints); jScrollPane1.setMinimumSize(new java.awt.Dimension(104 64)); jTextArea1.setColumns(20); jTextArea1.setRows(5); jScrollPane1.setViewportView(jTextArea1); gridBagConstraints = new java.awt.GridBagConstraints(); gridBagConstraints.gridx = 0; gridBagConstraints.gridy = 2; gridBagConstraints.gridwidth = 2; gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START; add(jScrollPane1 gridBagConstraints); }// </editor-fold> // Variables declaration - do not modify private javax.swing.JLabel jLabel1; private javax.swing.JLabel jLabel2; private javax.swing.JPanel jPanel1; private javax.swing.JPanel jPanel2; private javax.swing.JScrollPane jScrollPane1; private javax.swing.JTextArea jTextArea1; private javax.swing.JTextField jTextField1; private javax.swing.JTextField jTextField2; // End of variables declaration }  You need to add at least one component that will fill the horizontal space. If you don't have such a component you can try this: GridBagConstraints noFill = new GridBagConstraints(); noFill.anchor = GridBagConstraints.WEST; noFill.fill = GridBagConstraints.NONE; GridBagConstraints horizontalFill = new GridBagConstraints(); horizontalFill.anchor = GridBagConstraints.WEST; horizontalFill.fill = GridBagConstraints.HORIZONTAL; panel.add(new JLabel(""Left Aligned"") noFill); panel.add(Box.createHorizontalGlue() horizontalFill);  I had the same problem as you. Solved it by adding that Panel into another one with BorderLayout and NORTH constraint. Ondrej"
708,A,"Java Swing: Mouseover text on JComboBox items? In Swing is there a way to define mouseover text (or tool tip text) for each item in a JComboBox? Here's little bit fixed code from an online example: import java.awt.Component; import java.awt.FlowLayout; import java.awt.event.WindowAdapter; import java.awt.event.WindowEvent; import javax.swing.JComboBox; import javax.swing.JFrame; import javax.swing.JList; import javax.swing.UIManager; import javax.swing.plaf.basic.BasicComboBoxRenderer; /** * @version 1.0 06/05/99 */ public class ToolTipComboBox extends JFrame { /** * */ private static final long serialVersionUID = 2939624252688908292L; String[] items = { ""jw"" ""ja"" ""la"" }; String[] tooltips = { ""Javanese "" ""Japanese "" ""Latin "" }; public ToolTipComboBox() { super(""ToolTip ComboBox Example""); JComboBox combo = new JComboBox(items); combo.setRenderer(new MyComboBoxRenderer()); getContentPane().setLayout(new FlowLayout()); getContentPane().add(combo); } class MyComboBoxRenderer extends BasicComboBoxRenderer { /** * */ private static final long serialVersionUID = 2746090194775905713L; @Override public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { if (isSelected) { setBackground(list.getSelectionBackground()); setForeground(list.getSelectionForeground()); if (-1 < index) { list.setToolTipText(tooltips[index]); } } else { setBackground(list.getBackground()); setForeground(list.getForeground()); } setFont(list.getFont()); setText((value == null) ? """" : value.toString()); return this; } } public static void main(String args[]) { try { UIManager.setLookAndFeel(""com.sun.java.swing.plaf.windows.WindowsLookAndFeel""); } catch (Exception evt) {} ToolTipComboBox frame = new ToolTipComboBox(); frame.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { System.exit(0); } }); frame.setSize(200 140); frame.setVisible(true); } }  If your combo box is not editable use setRenderer(ListCellRenderer). If it is editable use setEditor(ComboBoxEditor) because: The renderer is used if the JComboBox is not editable. If it is editable the editor is used to render and edit the selected item.  I like the simplicity of MountainX's solution but not the lack of encapsulation. An alternate solution which has more moving parts but they are pretty simple and reusable. An interface: public interface ToolTipProvider { public String getToolTip(); } A wrapper class: public class ToolTipWrapper implements ToolTipProvider { final Object value; final String toolTip; public ToolTipWrapper(Object value String toolTip) { this.value = value; this.toolTip = toolTip; } @Override public String getToolTip() { return toolTip; } @Override public String toString() { return value.toString(); } } And a variant of MountainX's renderer: public class ToolTipRenderer extends DefaultListCellRenderer { @Override public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { JComponent component = (JComponent) super.getListCellRendererComponent(list value index isSelected cellHasFocus); String tip = null; if (value instanceof ToolTipProvider) { ToolTipProvider ttp = (ToolTipProvider) value; tip = ttp.getToolTip(); } list.setToolTipText(tip); return component; } } with the adding now: combobox.addItem(new ToolTipWrapper(itemStringtooltipString) );  I've never tried it but you should be able to define a ListCellRenderer and have it return a JLabel or whatever with a tool tip.  There is a much better way to do this than the ToolTipComboBox answer already given. First make a custom ListCellRenderer:   package com.example; import javax.swing.*; import java.awt.*; import java.util.ArrayList; public class ComboboxToolTipRenderer extends DefaultListCellRenderer { ArrayList tooltips; @Override public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { JComponent comp = (JComponent) super.getListCellRendererComponent(list value index isSelected cellHasFocus); if (-1 < index && null != value && null != tooltips) { list.setToolTipText(tooltips.get(index)); } return comp; } public void setTooltips(ArrayList tooltips) { this.tooltips = tooltips; } }  Then use it like this:  JComboBox comboBox = new JComboBox(); ComboboxToolTipRenderer renderer = new ComboboxToolTipRenderer(); comboBox.setRenderer(renderer); ... //make a loop as needed comboBox.addItem(itemString); tooltips.add(tooltipString); ... renderer.setTooltips(tooltips);"
709,A,"Is this possible to do with images in java? Is there any way I can print/show images on top of each other. The picture on top will always be positioned a little lower so that the one under will show partially. How can I decide which image is on top of what image? What layout lets me do this kind of positioning? Is there any way that I can make a border appear on the image when I click it and then move to (doesnt have to be animated can be a ""jump"") where I click next inside the JFrame. I've been trying to do this whole day now (I'm pretty new to swing) before I carry on I'd like to know if I'm trying something impossible. So far I've been printing the images right on to the JFrame as JPanels... Inside the JPanel I add in the paintComponent(Graphics g) method: g.drawImage Sounds like a Swing tutorial is in order. What you're describing shouldn't be very hard. Instead of painting the images directly load them up in ImageIcons and pass those to JLabels. That way you can manipulate your images as JComponents using layout managers or direct coordinates by setting the layout to null. You can set the Z-Order with setComponentZOrder regardless of the layout you choose. You can draw borders by adding swing borders (see BorderFactory) to the JLabels. You can handle the manipulation with MouseListeners. really want to thank you! it's going very good now with my assignment thanks to you :P.. we've had no swing and still we have to make a solitaire game :D  Look into Root Panes. You may be able to do something with the Layered Pane or the Glass Pane. I would try the Layered Pane first."
710,A,"How can I create a ""Drop-Down"" menu in a Java Swing toolbar? I've created a drop-down menu on my Swing JToolBar. But it doesn't create behave the way I want. I'm aiming for it to work like Firefox's ""Smart Bookmarks"" button. It disappears when the user selects a menu item: CORRECT! It disappears when the user presses ESC: CORRECT! It disappears when the user clicks somewhere in the main frame outside of the menu: CORRECT! But it doesn't disappear when the user clicks a second time on the button that shows the drop-down menu: INCORRECT... :-( My question is how can I add this behaviour that it does disappear when the clicks on the button that shows the menu a second time. Here's my current code from Java 6 on the Mac: import javax.swing.*; import javax.swing.event.PopupMenuEvent; import javax.swing.event.PopupMenuListener; import java.awt.*; import java.awt.event.ItemEvent; import java.awt.event.ItemListener; public class ScratchSpace { public static void main(String[] arguments) { SwingUtilities.invokeLater(new Runnable() { public void run() { JFrame frame = new JFrame(""Toolbar with Popup Menu demo""); final JToolBar toolBar = new JToolBar(); toolBar.add(createMoreButton()); final JPanel panel = new JPanel(new BorderLayout()); panel.add(toolBar BorderLayout.NORTH); panel.setPreferredSize(new Dimension(600 400)); frame.getContentPane().add(panel); frame.pack(); frame.setLocationRelativeTo(null); frame.setVisible(true); } }); } private static AbstractButton createMoreButton() { final JToggleButton moreButton = new JToggleButton(""More...""); moreButton.addItemListener(new ItemListener() { public void itemStateChanged(ItemEvent e) { if (e.getStateChange() == ItemEvent.SELECTED) { createAndShowMenu((JComponent) e.getSource() moreButton); } } }); moreButton.setFocusable(false); moreButton.setHorizontalTextPosition(SwingConstants.LEADING); return moreButton; } private static void createAndShowMenu(final JComponent component final AbstractButton moreButton) { JPopupMenu menu = new JPopupMenu(); menu.add(new JMenuItem(""Black"")); menu.add(new JMenuItem(""Red"")); menu.addPopupMenuListener(new PopupMenuListener() { public void popupMenuWillBecomeVisible(PopupMenuEvent e) { } public void popupMenuWillBecomeInvisible(PopupMenuEvent e) { moreButton.setSelected(false); } public void popupMenuCanceled(PopupMenuEvent e) { moreButton.setSelected(false); } }); menu.show(component 0 component.getHeight()); } } Well the listener on the button reacts only when it is pushed down because you listen for ItemEvent.SELECTED events only. How about adding another if clause to listen for ItemEvent.DESELECTED events here:  moreButton.addItemListener(new ItemListener() { public void itemStateChanged(ItemEvent e) { if (e.getStateChange() == ItemEvent.SELECTED) { createAndShowMenu((JComponent) e.getSource() moreButton); } } }); You could either store a reference to the menu somewhere or you could make the menu itself add another listener to the button. The latter solution could be more straightforward since you already seem to send a button reference to the menu. Well the real issue is that all of the events in PopupListener get called before the JToggleButton even gets notified that it's been clicked. Therefore when clicking on the toggle button to dismiss the popup it gets deselected by the popuplistener and THEN the button logic itself handles the click sees that it isn't selected any more and changes the state to selected... thus putting the popup back again. Joonas have you tried your suggestion? I've tried this and it doesn't seem to work. The Popup menu fires a cancel event on clicking the button which unselects the button. This ensures that the button is always set to selected when you click on it. I haven't tested exactly the code above but I'm pretty sure that it should work the way I describe. Maybe I don't understand something but depending on popupMenuCanceled() event feels fragile since the documentation only says that ""This method is called when the popup menu is canceled"". What's that supposed to mean? I suggests just adding an explicit listener for the button's state. Joonas the problem is that your suggestion just doesn't work. Try it and see. Bummer. It seems that the button emits ItemEvent.SELECTED events on weird occasions such as when calling setSelected(false). So this is a quite good question sorry for having no time to dig it deeper just now.  I don't use Firefox so I don't know what the Smart Bookmarks button looks like but maybe use a JMenu as the ""button"". You could try using the Border of a JButton to make it look more like a button. Tried this it's not a good result. So you down vote the suggestion because it doesn't look like what you want. Good to know next time I work give you an ""outside of the box"" type of suggestion. I got it working so I don't know what problems you are having. Camickr I didn't mean to offend. I downvoted because your answer doesn't work in that it doesn't give Firefox ""Smart Bookmarks"" behaviour at all. For the sake of future people with the same question I vote wrong answers down and right answers up. Like I said I don't know how Smart Bookmarks works (or what it looks like) so I was throwing out a suggestion to get you thinking outside the box. As I said it works perfectly fine for me. You click it and a dropdown appears and you click on a menu item so I don't know what it is that you don't like about the suggestion. This should do the trick  Well here is a potential solution that is not without it's drawbacks. Only you can decide if this is acceptable for your application. The issue is that the popup closing occurs before other mouse-handling events are fired so clicking on your More.. button again causes the popup to hide thus resetting the buttons state to deselected BEFORE the button even gets told it was pressed. The easy workaround is to add the following call within your main program: UIManager.put(""PopupMenu.consumeEventOnClose"" Boolean.TRUE); The result of this is that whenever a popup menu is closed because of a mouse-pressed event that mouse event will be consumed at the time the menu is closed and won't be passed on to any other components under the mouse. If you can live with limitation this is an easy solution. Works like a charm... A question: how did you know about this solution? Is it documented somewhere? I was actually just using my debugger (with the JDK src attached) to find out where and when the events were getting fired. I found it in BasicPopupMenuUI.  What's happening is that when you click off the menu it cancels the popup menu so you deselect the button but the next immediate event is clicking the button and now its deselected so it shows the menu again. I don't have the exact solution yet but give me a little bit ..."
711,A,"How small can that JLabel be? I have a JLabel that I need to draw off screen with some Transforms applied to the Graphics object. I'm trying to make the JLabel as small as it can be without ellipsis depending on its text content. What I'm trying to do is: setBounds(0 0 label.getMinimumSize().width label.getMinimumSize().height); Sometimes this yields ellipsis and sometimes now. It really depends on the transform being applied (usually arbitrary scaling in an animation). Am I missing something obvious with what I should consider ""Minimum Size"" am I getting some rounding errors that are rounding down etc? Please point me in the right direction. Thank you The label.getMinimumSize() is computed by the UI delegate and has more to do with the layout and its chrome rather than its content. Maybe you can try computing what the size should be based upon the text? Something like... JLabel label = new JLabel(""xx""); int minWidth = ((int) (label.getFontMetrics(label.getFont()).getStringBounds(label.getText()label.getGraphics()).getWidth()) + label.getInsets().left + label.getInsets().right); and similar for the the height."
712,A,JTable Editor Change with Live Data I have a table model that is populated by live (external) data source that updates every xx seconds. The data is displayed in a JTable. The user can override the data in the table cell through an celleditor that extends the AbstractCellEditor. If the user clicks away the code checks to see if the new value equals the value in the table model. If it doesn't it assumes it's an override. The problem is say a you click on a field don't change the value and external data source updates the table model in the meantime the code thinks the user set an override using the old value rather than just cancelling the override. What is the standard logic and implementation to do this? Your table model should maintain state that indicates if a table cell was overriden on a cell-by-bell basis. If you dont do that you will also run into the problem where a user has overriden a cell and the live data comes in and changes to the same value that the use has put in. You will then cancel that override. You can populate this state in an overriden setValueAt(Objectintint) method in your TableModel. This method will get called by the JTable when your AbstractCellEditor finished editing.  How do I detect whether a user has made a change or not? I made a class which I call TableCellListener that listens for changes made via a cell editor. It takes a copy of the value before the cell starts editing and compares it to the value of the cell after it stops editing. It sounds like it might be what you want. Another solution might be to check if the table is currently editing the cell before you update the TableModel in the background. Maybe you popup a dialog giving the user a chance to accept the update or cancel it.
713,A,"ActionListener problem I have a problem with my actionListener. It seems that the actionListener runs automatically before I click the button? The ""This should not appear in the console before button click"" appear in the console before I click the button"".... This is strange. .... button1.addActionListener(this); button2.addActionListener(this); .... public void actionPerformed(ActionEvent e) { System.out.println(""This should not appear in the console before button click""); if (e.getSource()==button1) System.out.println (""answer1""); else if (e.getSource()==button2) System.out.println (""answer2""); ..... } Can you post the context of the addActionListener()'s? When I click the button it will call the public void actionPerformed(ActionEvent e) {} method. But in my case before I click the button its seem that run the method automatically. You can tell where methods are being called from by calling Thread.dumpStack(). That will print the stack trace to the error stream (possibly the Java console). Alternatively use a debugger and place a break point on the first line of the method. public void actionPerformed(ActionEvent e) { Thread.duumpStack(); System.out.println(""This should not appear in the console before button click""); ... BTW: I recommend not using EventObject.getSource. Instead add a new listener for every action. So your example code would become: button1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent event) { System.out.println(""answer1""); } }); button2.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent event) { System.out.println(""answer2""); } }); Unfortunately the boilerplate associated with anonymous inner classes is distinctly verbose but the intention is clearer. I am very new to Java...I dont understand what do you mean by ..Instead add a new listener for every action ... @Tom: I know of several people who find it cleaner to have only one inner class instead of multiple anonymous classes. It seems like mainly a style issue to me. @mmyers: They're wrong. @Tom: Just plain wrong? No if's and's or but's? I personally tend to prefer the anonymous class version but I don't see why it makes such a big difference. Using separate listeners means that you don't need to use ifs or switches which makes your code cleaner. Also if you need to add or remove a button you do everything right there rather than having to add a case statement somewhere else (which may be several pages down). Thanks a lot...will try that method. @Tom @mmyers you are both wrong - non anonymous inner classes is the right way. Remember there are no absolutes... in the case of android the if is preferred for example.  Also make sure that you have not added 'this' as an ActionListener to any other components that might be use before you click either of the buttons. You could also search your code for doClick() calls to make sure you dont call it programatically."
714,A,"action listeners and event sources in Swing OK so if I add an ActionListener to a GUI element and it's the only element I use that ActionListener with does it matter which of the following lines (ab) I use to get the checkbox selected state? final JCheckBox checkbox = (JCheckBox)this.buildResult.get(""cbDebugTick""); checkbox.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent event){ boolean bChecked = // (a) checkbox.isSelected(); // (b) ((JCheckBox)event.getSource()).isSelected(); model.setPrintDebugOn(bChecked); } }); It makes sense to me that if I add the ActionListener object to multiple GUI elements then I should use (b). And in (b) is it OK to blindly cast event.getSource() to JCheckBox since I'm the one who added the action listener or should I program defensively and do an instanceof check? note: this question is in the context of event listeners in general; kdgregory has some good points below specifically re: checkboxes which I had neglected to consider. For the case where the listener is exclusive (such as an anon listener) I use (a). If the listener will be reused (eg this is an instance of ActionListener) I'll write it as: @Override public void actionPerformed(ActionEvent event) { Object src = event.getSource(); if (src == checkbox) { boolean bChecked = checkbox.isSelected(); // ... } } If you have several checkboxes and they are processed the same way then instanceof makes sense.  I'd do neither. If clicking the checkbox is going to start some action I'd attach an ItemListener then just look at the selection state in the ItemEvent. However checkboxes don't normally invoke actions they manage state. So a better approach is to examine all of your checkboxes in response to whatever does kick off the action. Edit: some commentary about the larger issues that the OP raised. First it's important to realize that large parts of Swing represent implementation convenience rather than a coherent behavior model. JCheckBox and JButton have nothing in common other than the fact that clicking within their space is meaningful. However they both inherit from AbstractButton which provides implementation details such as the button's label. It also assumes that buttons are ""pressed"" and that pressing a button will initiate some meaningful behavior (the action). In the case of JCheckbox however the button press is not important the change in state is. That state change is signaled to the ItemListener -- which is also defined on AbstractButton even though state changes are meaningless to other button types (the JavaDoc even says ""checkbox""). One of the things that Swing did get right -- if hard to use -- is the idea of that an Action is separate from the control initiating that action. An Action object can be invoked from multiple controls: a menu item a pushbutton on a dialog a keystroke whatever. More important from a design perspective is that it takes you away from the idea of a generic ""listener"" that tries to figure out what needs to happen. I've seen apps where a single listener receives input from the entire menu system for example and then runs through a big if/else chain to figure out which menu item was pressed. Using Actions means you have more classes but in the long run gives you a more maintainable app. Finally from a usability perspective there's a difference between controls that maintain state such as JCheckbox and JTextArea and those that initiate actions such as JButton and JMenuItem. I have seen a (web) app where clicking on a radio button takes you to a different page. That's bad. Even if you're planning to use listeners internally to update the state of some model you should ask yourself why the collection of GUI elements do not in themselves provide you with a model. a valid point... but that wasn't my question True but possibly there will be another person who finds this question via Google and would prefer to use the API appropriately rather than worry about which of two hacks is ""better."" that's fair I'll note that in the question. +1 for the other comment at the end: in this case I was using the listener to propagate checkbox state to a model object that didn't have knowledge of the checkbox I guess I should use javax.swing.JToggleButton.ToggleButtonModel instead of an event listener. I also should have asked my question in terms of a JButton or other JComponent; this issue has come up before for me with event listeners and I want to know the appropriate good practice.  I'd program with b defensively as it's the best-practice option. But if only you are ever going to use the code then there is no reason why you can't do a. However imagine how happy you will be with yourself if you come back to it at some future point change something and find you wrote good code which you can directly reuse...  in (b) to be rigourous you should indeed do a instanceof check but it's not that important. I would think both these lines are fine and acceptable though (b) would be ""better code"" Although what is usually done in an action listener is simply call another method customized to your checkbox. So it would look like something like this:  @Override public void actionPerformed(ActionEvent event) { //your treatment would be in this method where it would be acceptable to use (a) onCheckBoxActionPerformed(event) } FWIW most GUI code generated using a graphical tool sucks. could you elaborate? why the forwarding to the outer class if you can have access to the same methods/fields in an anonymous inner class? this way you can easily add different components to the same action listener and treat them differently and/or polymorphicaly making the code ""better"" I disagree with david's assertion. Forwarding a call like this goes against the grain of de-coupling (which is why a listener approach was adopted for event notification in Swing in the first place). The ideal case is where you can factor out the action behavior entirely and use the action listener external to the view that contains the control - in this case option (b) is the preferred technique. That said what you *really* should be doing is creating an Action and attaching the control to it. FYI this is the way most IDEs generate the automated code when using a grpahical GUI creator ex.: NetBeans"
715,A,"Directly show XML record to jtable record I am a c++ programmer but new to the java world. I have to display the xml data to a jtable directly. Say the xml is of the following format <Name> Tom </Name> <DateofBirth> 12/3/1985 </DateofBirth> <country> US </country> Then the table needs to be dispalyed as follows Name | DateofBirth | Country Tom 12/3/1985 Us Is it do-able? If so can any one please provide a sample? It's certainly do-able. I would check out the JDOM library which provides a simple API to XML. It's easier to use than the standard but somewhat unwieldy DOM/SAX libraries. If you have a schema for the above XML JAXB may be of interest although it's quite heavyweight. I can't reliably advise on the Swing/JTable side however. I'm sure there are lots of people who can look after that side of things.  TableModel is an interface. If you really want to populate your table directly from the XML document write a custom implementation of the TableModel interface which gets/sets values from your in-memory DOM object. One advantage of this is that you can support editing the table and apply the edits directly to your XML elements. Just be aware that these TableModel methods are called VERY FREQUENTLY and thus should be very fast. If you're dealing with large XML documents the random-access speeds for getting to an individual cell might not be speedy enough.  Yes this is very do-able. There are 2 steps to this process. The first is to parse the xml. Some sample Java code for parsing xml would be (this example shows getting a ""person"" node from the xml file but it can easily be adapted to your xml file): DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); DocumentBuilder parser = factory.newDocumentBuilder(); Document document = parser.parse(""xml/sample.xml""); NodeList personNodes = document.getElementsByTagName(""person""); List<String> names = new LinkedList<String>(); for (int i = 0; i < personNodes.getLength(); i++) { String firstName = null; String lastName = null; Node personNode = personNodes.item(i); NodeList children = personNode.getChildNodes(); for (int j = 0; j < children.getLength(); j++) { Node child = children.item(j); String nodeName = child.getNodeName(); String nodeValue = child.getTextContent(); if (""firstName"".equals(nodeName)) { firstName = nodeValue; } else if (""lastName"".equals(nodeName)) { lastName = nodeValue; } } names.add(firstName + "" "" + lastName); } Once you have extracted the data you need created a new JTable that uses this data. The simplest JTable constructor to use for your purposes would be: JTable(Object[][] rowData Object[] columnNames) There are more advanced and better ways to do this (such as with data binding frameworks) but this is definitely a good starting point. Thanks for sharing the code was able to find the same on the following page. Thanks!!! http://www.developerfusion.com/code/2064/a-simple-way-to-read-an-xml-file-in-java/ No problem. I actually took it from my blog http://jeffastorey.blogspot.com/2009/10/getting-groovy-with-xml-parsing.html and showed how you can do it in only 2 lines with groovy (putting it in the JTable will be a couple more lines)."
716,A,"Swing: How do I set a component height to the container's height? I want to make a component to occupy the maximumAvailableHeight of the Container. In the code that I have pasted below for example I have made the root frame to be 800600. I want to set the height/width of only that frame (and I do not want to try and pixelify its children). If I run this I see a badly aligned UI. Firstly I want a panel (that is inside the root frame) to take up the 100% height of frame (in this case 800px minus that little space it takes for painting the frame title). Secondly inside the panel I have a tree and text area. I want both of them to take 100% height and let the tree take 30% and textArea take 70% width (if the tree is expanded to 10 levels then I am ok with ScrollPane). Understand that this is easiest to achieve in HTML. Just say height=100% and width to be 30% etc and we are done. Does someone know if this can be done in Swing? (I can achieve this by setting pixel heights and layout manager but I am looking for the cleanest solution to set percentage heights and widths.) package com.ekanathk.logger.gui; import javax.swing.*; import javax.swing.tree.DefaultMutableTreeNode; public class TestFrame extends JFrame { public TestFrame() { super(""Top Frame""); setDefaultCloseOperation(EXIT_ON_CLOSE); JPanel panel = new JPanel(); JTree env = getEnvironmentTree(); env.expandRow(0); panel.add(new JScrollPane(env)); panel.add(new JTextArea(""Some contents"")); getContentPane().add(panel); setSize(800 600); SwingUtil.centerComponentOnScreen(this); setVisible(true); } private JTree getEnvironmentTree() { DefaultMutableTreeNode root = new DefaultMutableTreeNode(""Root""); JTree tree = new JTree(root); DefaultMutableTreeNode one = new DefaultMutableTreeNode(""One""); root.add(one); one.add(new DefaultMutableTreeNode(""under one.1"")); one.add(new DefaultMutableTreeNode(""under one.2"")); root.add(new DefaultMutableTreeNode(""two"")); root.add(new DefaultMutableTreeNode(""three"")); return tree; } public static void main(String[] args) { new TestFrame(); } } Here is another approach using SpringLayout. I couldn't get Spring.width and Spring.height to work so I used a more verbose way import java.awt.BorderLayout; import java.awt.Color; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JScrollPane; import javax.swing.JTextArea; import javax.swing.JTree; import javax.swing.Spring; import javax.swing.SpringLayout; import javax.swing.tree.DefaultMutableTreeNode; public class TestFrame extends JFrame { private static final long serialVersionUID = 1L; public TestFrame() { super(""Top Frame""); setDefaultCloseOperation(EXIT_ON_CLOSE); SpringLayout layout = new SpringLayout(); JTree env = getEnvironmentTree(); env.expandRow(0); JPanel contentPane = new JPanel(layout); contentPane.setLayout(layout); JScrollPane treePane = new JScrollPane(env); JTextArea area = new JTextArea(""Some contents""); contentPane.add(treePane); contentPane.add(area); setLayout(new BorderLayout()); add(contentPane); setSize(800 600); SpringLayout.Constraints cons; cons = layout.getConstraints(treePane); cons.setX(Spring.constant(0)); cons.setY(Spring.constant(0)); cons.setWidth(Spring.scale(layout.getConstraint(SpringLayout.EAST contentPane) .7f)); cons.setHeight(layout.getConstraint(SpringLayout.SOUTH contentPane)); cons = layout.getConstraints(area); cons.setX(layout.getConstraint(SpringLayout.EAST treePane)); cons.setY(Spring.constant(0)); cons.setWidth(Spring.scale(layout.getConstraint(SpringLayout.EAST contentPane) .3f)); cons.setHeight(layout.getConstraint(SpringLayout.SOUTH contentPane)); setPreferredSize(getSize()); setLocationRelativeTo(null); pack(); setVisible(true); } private JTree getEnvironmentTree() { DefaultMutableTreeNode root = new DefaultMutableTreeNode(""Root""); JTree tree = new JTree(root); DefaultMutableTreeNode one = new DefaultMutableTreeNode(""One""); root.add(one); one.add(new DefaultMutableTreeNode(""under one.1"")); one.add(new DefaultMutableTreeNode(""under one.2"")); root.add(new DefaultMutableTreeNode(""two"")); root.add(new DefaultMutableTreeNode(""three"")); return tree; } public static void main(String[] args) { new TestFrame(); } }  There are a number of layout managers that would accomplish this--GridLayout (1x1 grid) GridBagLayout perhaps BorderLayout.  This uses GridBagLayout to do sort of what you want. You might play around with setMinimumSize and setPreferedSize of your components. import java.awt.GridBagConstraints; import java.awt.GridBagLayout; import javax.swing.*; import javax.swing.tree.DefaultMutableTreeNode; public class TestFrame extends JFrame { private static final long serialVersionUID = 1L; public TestFrame() { super(""Top Frame""); setDefaultCloseOperation(EXIT_ON_CLOSE); JPanel panel = new JPanel(new GridBagLayout()); JTree env = getEnvironmentTree(); env.expandRow(0); GridBagConstraints c = new GridBagConstraints(); c.fill = GridBagConstraints.BOTH; c.weightx=.7; c.weighty=1; c.gridx=0; c.gridy=0; c.gridheight=1; c.gridwidth=7; panel.add(new JScrollPane(env)c); c.weightx=.3; c.gridx=7; c.gridy=0; c.gridheight=1; c.gridwidth=GridBagConstraints.REMAINDER; panel.add(new JTextArea(""Some contents"")c); add(panel); setSize(800 600); setLocationRelativeTo(null); setVisible(true); } private JTree getEnvironmentTree() { DefaultMutableTreeNode root = new DefaultMutableTreeNode(""Root""); JTree tree = new JTree(root); DefaultMutableTreeNode one = new DefaultMutableTreeNode(""One""); root.add(one); one.add(new DefaultMutableTreeNode(""under one.1"")); one.add(new DefaultMutableTreeNode(""under one.2"")); root.add(new DefaultMutableTreeNode(""two"")); root.add(new DefaultMutableTreeNode(""three"")); return tree; } public static void main(String[] args) { new TestFrame(); } } Did you try the spring layout solution I posted (currently) below? It has the advantage that it seems to resize better than this one. I did use this solution and it started off well. But in my actual application the right pane is not just a text area (It is actually a JTabbedPane with potentially 10+ tabs). When the texts in the tree were long the alignment got screwed (I have to setMaximumSize I think which I dont want). I used TableLayout as prescribed in http://java.sun.com/products/jfc/tsc/articles/tablelayout/ and the code worked like a charm :) panel.setLayout(new TableLayout(new double[][]{{0.3 0.7} {TableLayout.FILL}})); panel.add(p1 ""00""); panel.add(p2 ""10"");"
717,A,Java: Handle logoff or shutdown on Windows and Linux Is there a way for a Java GUI application to respond to system shutdown or logoff events other than to use JNI? (On Windows the JNI would use WM_QUERYENDSESSION on Linux?) The method should allow the program to prompt users to save etc. and then continue the logoff process. As far as I know there's no way in Java to catch the system shutdown or logoff events. You can however catch when the JVM is terminating by adding a shutdown hook. AWT's WindowAdapter also has a windowClosing event that you can override and hook to a window that you want to monitor. Swing inherits this; I believe SWT does as well. Be aware that you MUST manually dispose of the window if you override this event! I believe that MS Windows will fire these events as it is closing. I believe a SIGTERM on Linux/UNIX does the same although Linux will SIGKILL an app shortly afterwords if this is during shutdown. Beware AWT's WindowAdapter will only hook to events on the window. If the environment is terminated using shutdown the windowClosing or windowClosed events will not fire!  This doesn't answer the question but addresses part of it. In a Unix GUI session I consider the right way to handle the logoff event is to save the document to a temporary file and save the information in the session state. During the session recovery the program can reload the temporary file and take up where it left off. No need to ask the user about saving or not. I just wish more software did transparent session save and recovery. Too many programs reopen with empty document windows because the GUI framework used does that much but none of the rest of the work has been done to actually handle any meaningful program state.  I think that Runtime.getRuntime().addShutdownHook should provide the functionality you need.  You can schedule a Thread to be run on JVM shutdown - see http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Runtime.html#addShutdownHook(java.lang.Thread)
718,A,Selection overridden by formatter I have applied a Formatter to a JFormattedTextField using a FormatterFactory when a user clicks into the text field I want to select the contents. A focus listener does not work as expected because the formatter gets called which eventually causes the value to be reset which ultimately de-selects the fields contents. I think what is happening is that after the value changes the Caret moves to the rightmost position and this deselects the field. Does anyone have any knowledge of how to get around this and select the fields contents correctly? Quick and dirty workaround is to use EventQueue.invokeLater from your focusListener.  EventQueue.invokeLater(new Runnable(){ public void run() { yourTextField.selectAll();} });  which jdk are you using - any chance this is a bug in it?
719,A,"How can I change the width of a JComboBox dropdown list? I have an editable JComboBox which contains a list of single letter values. Because of that the combobox is very small. Every letter has a special meaning which sometimes isn't clear to the user in case of rarely used letters. Because of that I've created a custom ListCellRenderer which shows the meaning of each letter in the dropdown list. Unfortunately this explanation doesn't fit into the dropdown because it is to small because it has the same width as the combobox. Is there any way to make the dropdown list wider than the combobox? This is what I want to achieve:  --------------------- | Small JCombobox | V | -------------------------------------------- | ""Long item 1"" | -------------------------------------------- | ""Long item 2"" | -------------------------------------------- | ""Long item 3"" | -------------------------------------------- I cannot change the width of the combobox because the application is a recreation of an old legacy application where some things have to be exactly as they were before. (In this case the combobox has to keep it's small size at all costs) Here is a great solution by Santhosh Kumar without the need to mess with UI's and other nasty stuff like that! http://www.jroller.com/santhosh/entry/make_jcombobox_popup_wide_enough import javax.swing.*; import java.awt.*; import java.util.Vector; // got this workaround from the following bug: // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4618607 public class WideComboBox extends JComboBox{ public WideComboBox() { } public WideComboBox(final Object items[]){ super(items); } public WideComboBox(Vector items) { super(items); } public WideComboBox(ComboBoxModel aModel) { super(aModel); } private boolean layingOut = false; public void doLayout(){ try{ layingOut = true; super.doLayout(); }finally{ layingOut = false; } } public Dimension getSize(){ Dimension dim = super.getSize(); if(!layingOut) dim.width = Math.max(dim.width getPreferredSize().width); return dim; } } This solution does not adjust height just the width. Adjusting height is far more complicated.  I believe the only way to do this with the public API is to write a custom UI (there are two bugs dealing with this). If you just want something quick-and-dirty I found this way to use implementation details to do it (here): public void popupMenuWillBecomeVisible(PopupMenuEvent e) { JComboBox box = (JComboBox) e.getSource(); Object comp = box.getUI().getAccessibleChild(box 0); if (!(comp instanceof JPopupMenu)) return; JComponent scrollPane = (JComponent) ((JPopupMenu) comp).getComponent(0); Dimension size = new Dimension(); size.width = box.getPreferredSize().width; size.height = scrollPane.getPreferredSize().height; scrollPane.setPreferredSize(size); // following line for Tiger // scrollPane.setMaximumSize(size); } Put this in a PopupMenuListener and it might work for you. Or you could use the code from the first linked bug: class StyledComboBoxUI extends BasicComboBoxUI { protected ComboPopup createPopup() { BasicComboPopup popup = new BasicComboPopup(comboBox) { @Override protected Rectangle computePopupBounds(int pxint pyint pwint ph) { return super.computePopupBounds( pxpyMath.max(comboBox.getPreferredSize().widthpw)ph ); } }; popup.getAccessibleContext().setAccessibleParent(comboBox); return popup; } } class StyledComboBox extends JComboBox { public StyledComboBox() { setUI(new StyledComboBoxUI()); } } The first one dose not work for me when there is bellow 8 items in the JComboBox(OSX). And the second one have the look of windows even on MAC.... First solution doesn't work as popupMenuWillBecomeVisible is called before the size is set (see show() in BasicComboPopup) so any size you set in that listener will be overwritten. Both methods seem to work but popupMenuWillBecomeVisible only works if you also provide a custom ListCellRenderer. The default one seems to cut the strings at the original size.  Sounds like you'll need to write your own ComboBoxUI. There is a good example here that shows how to accomplish this. Also note the method you would probably be interested in is the createPopup() method. This is the method that creates the popup for the combo box and where you would be able to customize it.  I kind of like Santhosh Kumar's WideComboBox  You might want to use setSize() method. combo.setSize(200 combo.getPreferredSize().height);  Here is a nice solution from tutiez. Before setting up the Dimension of popup list it gets the biggest item from it and calculated the width needed to show it completely. public class WiderDropDownCombo extends JComboBox { private String type; private boolean layingOut = false; private int widestLengh = 0; private boolean wide = false; public WiderDropDownCombo(Object[] objs) { super(objs); } public boolean isWide() { return wide; } // Setting the JComboBox wide public void setWide(boolean wide) { this.wide = wide; widestLengh = getWidestItemWidth(); } public Dimension getSize() { Dimension dim = super.getSize(); if (!layingOut && isWide()) dim.width = Math.max(widestLengh dim.width); return dim; } public int getWidestItemWidth() { int numOfItems = this.getItemCount(); Font font = this.getFont(); FontMetrics metrics = this.getFontMetrics(font); int widest = 0; for (int i = 0; i < numOfItems; i++) { Object item = this.getItemAt(i); int lineWidth = metrics.stringWidth(item.toString()); widest = Math.max(widest lineWidth); } return widest + 5; } public void doLayout() { try { layingOut = true; super.doLayout(); } finally { layingOut = false; } } public String getType() { return type; } public void setType(String t) { type = t; } public static void main(String[] args) { String title = ""Combo Test""; JFrame frame = new JFrame(title); String[] items = { ""I need lot of width to be visible  oh am I visible now"" ""I need lot of width to be visible  oh am I visible now"" }; WiderDropDownCombo simpleCombo = new WiderDropDownCombo(items); simpleCombo.setPreferredSize(new Dimension(180 20)); simpleCombo.setWide(true); JLabel label = new JLabel(""Wider Drop Down Demo""); frame.getContentPane().add(simpleCombo BorderLayout.NORTH); frame.getContentPane().add(label BorderLayout.SOUTH); int width = 200; int height = 150; frame.setSize(width height); frame.setVisible(true); } } The code above has already a main for a quick test. But notice that the statement below may be adjusted to around 20 if you want to have a vertical scroll. return widest + 5; Hope it is useful for future reference!  So the answer to your question is yes it is possible. As all of the other replies have stated you will need to do some custom work for the combobox UI. Here is an example of how to make it wider. The picture below shows a horizontal scroll but this can be left out if desired."
720,A,In Swing how to provide priority to user interaction when many components are constantly requesting a repaint? Swing newbie question... I have a system where there is a large number of independent widgets in the window (think >100) getting asynchronous updates and then requesting a repaint. When these widgets get updates very very fast they seem to overload the Swing event thread so that user interaction (e.g. right clicking to display the context menu) takes ages. I'm sure that there is a pattern for handling this. The few solutions I could think of are: 1) Priorities on events (doubt that's supported) 2) Writing a custom repaint manager to slow down items from my widgets. 3) Have components request a repain from another class and that class would somehow calculate the dirty region and contact Swing. Thanks! In Swing multiple repaint requests are combined into one if possible. For this reason I don't think that multiple repaint events are overloading your app. Is it possible that something else is done on the EDT rather then UI operations only? P.S. You are correct that painting can be optimized by calculating the dirty region. But that is usually done by UI part of your component because only it knows how to correctly accomplish such calculation.
721,A,"Java User Interface Specification Java supplies standard User Interface guidelines for applications built using Java Swing. The basic guidelines are good but I really feel the look and feel is really boring and outdated. Is anyone aware of a publicly available Java User Interface Guide that has better look & feel guidelines than the Sun provided guidelines? I don't think there are any other complete guidelines. But if you are not talking about the spacing/positioning of components (I don't think that part of Look And Feel Design Guidelines is outdated) but only about the look and feel good starting points are singlabx / swingx: http://swinglabs.org http://swinglabs.org/docs/presentations/2007/DesktopMatters/FilthyRichClients.pdf http://parleys.com/display/PARLEYS/Home#slide=1;talk=7643;title=Filthy%20Rich%20Clients and JGoodies: http://www.jgoodies.com/articles/index.html http://www.jgoodies.com/articles/efficient%20swing%20design.pdf  the apple developer guide has a human computer interface guide - http://developer.apple.com/documentation/UserExperience/Conceptual/AppleHIGuidelines/XHIGIntro/chapter_1_section_1.html#//apple_ref/doc/uid/TP30000894-TP6 . Even though its targeted at the mac platform you could learn something from it - its the reason why so many mac apps are pleasant to use as well as aesthetically pleasing!  Along the line of Chii's answer I would recommend taking a look at the Windows Vista User Experience Guidelines for general tips on making user interfaces. Although the name (""Windows Vista User Experience Guidelines"") and source (Microsoft) may suggest that it only contains Windows-centric tips and advice it does offer good general tips and directions that can be used when designing interfaces for non-Windows applications as well. The Design Principles sections address some points to keep in mind when designing an effective user interface. For example bullet three of How to Design a Great User Experience says: Don't be all things to all people Your program is going to be more successful by delighting its target users than attempting to satisfy everyone. These are the kinds of tips that apply to designing user interfaces on any platform. Of course there are also Windows-specific guidelines as well. I believe one of the biggest reasons why look and feel of Swing applications seems ""boring"" and ""outdated"" is due to the platform-independent nature of Java. In order for the graphical user interfaces to work on several different platforms Java needs to have facilities to adapt the user interface to the different host operating systems. For example various platforms have various sizes for windows buttons and other visual components so absolute positioning does not work too well. To combat that problem Swing uses Layout Managers which (generally) use relative positioning to place the visual components on the screen. Despite these ""limitations"" of building graphical user interfaces for Java I think that using tips from guidelines that are provided by non-Sun sources and non-Java-specific sources can still be a good source of information in designing and implementing an user interface that is effective. After all designing an user interface is less about programming languages and more about human-machine interaction.  You have many LNF (Look And Feel) displayed here but they have not exactly a 'Java User Guide' Provided. However MigLayout does follow closely the main User Interface standards that exist out there (including some obcure points of button order): For instance the OK and Cancel buttons have different order on Windows and Mac OS X. While other layout managers use factories and button builders for this it is inherently supported by MigLayout by just tagging the buttons. One just tags the OK button with ""ok"" and the Cancel button with ""cancel"" and they will end up in the correct order for the platform the application is running on if they are put in the same grid cell. Example on Mac:"
722,A,"refresh setCellEditor for JTable I was looking for an answer for a previous question and had an ingenious idea to overcome a limit on JTable. I need the editor to be different on a row by row basis whereas JTable can only handle a single editor for each column. So my idea is to use a MouseListener to check the row and column on the JTable and set new editor each time. But calling setCellEditor() a second time do not have any effect. The editor remains to be the first one that was set. So how can I make ""setCellEditor"" work a second time for the same column? Here's the code in MouseListener. public void mouseClicked(MouseEvent e) { int cols = resultTable.columnAtPoint(new Point(e.getX() e.getY())); int rows = resultTable.rowAtPoint(new Point(e.getX() e.getY())); StorageObject item = (StorageObject) resultTable.getModel().getValueAt(rows cols); TableColumn col = resultTable.getColumnModel().getColumn(cols); col.setCellEditor(new MyComboBoxEditor(item.list)); } My theory is that when all the mouse listeners registered to the Table/TableCell are invoked the ones installed to the API classes by default will be invoked first before your mouse listener. This means the event causing the editor to be fetched will occur before you set it to a different one. Kind of like a race condition only it's actually defined somewhere in the API source code... That's my naive theory and I can already see some holes in it so on to my solution: Override JTable.getCellEditor(int row int col). This allows you to return whatever editor you want for any cell.  I'm not sure why your code isn't working (it's been a while since I've done Swing) but why don't you just override public TableCellEditor getCellEditor(int row int column) On your JTable? Maintain a map of the combo boxes you want to use for each row and in your overriden method return the correct one. yep. this is how you handle multiple editor types for a single column."
723,A,"Image Processing extending JPanel and Simulating Classes in Clojure there! I'm building an image-processing application in swing/clojure and right now I need to develop an image panel in which I can click and compute data. Thanks to coobird I now have a good idea on how to do it in Java but I still don't get many issues on its integration with Clojure. Let's take a look at how coobird suggested me doing. First we should extend a class in Java. In clojure we do this with the proxy macro so we'd have something like this:  (def painting-panel (proxy [JPanel] [])) The next step is to create the class constructor and set some variables. I can define functions after the second argument of proxy but how can I create the constructor? Is painting-panel the name of this class (therefore the name of the function I should create)? How can I deal with class variables? Should I define them with a let like I did? Are this and super available for me to use like I did below?  (def painting-panel (let [background-image (Image.) point-clicked (Point.)] (proxy [JPanel] [] (paintComponent [g] (do ((.paintComponent super) g) (doto g (.drawImage background-image 0 0 nil) (.fillRect (.x point-clicked) (.y point-clicked) 1 1)))) (painting-panel []; constructor? ((.addMouseListener this) (proxy [MouseAdapter] [] (mouseClicked [e] (do (def point-clicked (.getPoint e)) (.repaint this))))))))) Suggestions and code corrections are also welcome! Thank you! proxy actually creates an instance tada! You don't need to create a constructor. Yes but consider using a clojure ref instead. Also using def like that on the second last line is nasty! it creates a global binding for point-clicked when your logic relies on the lexically scoped one created by let. (proxy-super paintComponent g) and yes ""this"" is available This works for me: (let [click (ref nil) panel (proxy [javax.swing.JPanel] [] (paintComponent [g] (proxy-super paintComponent g) (.drawImage g (.getImage (javax.swing.ImageIcon. ""play.png"")) 0 0 (.getWidth this) (.getHeight this) nil) (if @click (.fillRect g (:x @click) (:y @click) 10 10))))] (.addMouseListener panel (proxy [java.awt.event.MouseAdapter] [] (mouseClicked [e] (let [p (.getPoint e)] (dosync (ref-set click {:x (.x p) :y (.y p)}))) (javax.swing.SwingUtilities/invokeLater #(.repaint panel))))) (doto (javax.swing.JFrame.) (.setContentPane panel) (.setSize 200 200) (.show))) I love you guys. Seriously. I love you too."
724,A,"Swing GUI : Scrolling not updated when a JTable gets bigger I got a Java Swing GUI and got a problem with a JTable in a JScrollPane. For some reason when the rows of the table model are increased during the program execution the JScrollPane isn't updated - that is if the rows are increased so that the height of the table is over the height of the scroll view the scroll panes aren't updated as supposed. (The new rows are shown at the screen as expected). If the window is resized scrolling is updated as expected. The vertical scrolling policy is VERTICAL_SCROLLBAR_AS_NEEDED table models fireTableDataChanged is called.. Unfortunately the code's a bit complex so I can't provide an code sample causing the problem. But thought to ask if somebody got some ideas straight.. EDIT: Still a bit more confusing : horizontal scrolling policy is HORIZONTAL_SCROLLBAR_AS_NEEDED and if the table width if over the view width (that is the horizontal scrollbar is used) this problem doesn't occur... EDIT2: The problem isn't that the table should be scrolled but that the scrollbar's aren't activated as they should. Hmm.. after returning to the issue I found out that our row header customizing in JScrollPane was causing the problem. (Some preferredsizes were set with not-so-sensible values etc)..  You might need to post some of your code. I've just knocked up the following test and it works as advertised i.e. vertical scrollbars are activated when the number of rows exceeds the viewport height: import java.awt.GridLayout; import java.util.ArrayList; import java.util.List; import javax.swing.JFrame; import javax.swing.JScrollPane; import javax.swing.JTable; import javax.swing.ScrollPaneConstants; import javax.swing.table.AbstractTableModel; public class JTableTest { public static void main(String[] args) { final MyTableModel tm = new MyTableModel(); tm.addData(new Data(""R1C1"" ""R1C2"")); JTable table = new JTable(tm); JScrollPane scrollPane = new JScrollPane(table); scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED); JFrame frame = new JFrame(); frame.setLayout(new GridLayout()); frame.add(scrollPane); frame.pack(); frame.setSize(400 150); frame.setVisible(true); Thread t = new Thread(new Runnable() { private int count = 2; public void run() { for ( ; ; ) { tm.addData(new Data(""R"" + count + ""C1"" ""R"" + count + ""C2"")); count++; try { Thread.sleep(2000); } catch (InterruptedException e) { // TODO Auto-generated catch block e.printStackTrace(); } } } }); t.start(); } private static class MyTableModel extends AbstractTableModel { private List<Data> dataList = new ArrayList<Data>(); public int getColumnCount() { return 2; } public void addData(Data data) { dataList.add(data); fireTableRowsInserted(dataList.size()-1 dataList.size()-1); } public int getRowCount() { return dataList.size(); } public Object getValueAt(int rowIndex int columnIndex) { Data data = dataList.get(rowIndex); return columnIndex == 0 ? data.data1 : data.data2; } } private static class Data { public String data1; public String data2; public Data(String data1 String data2) { this.data1 = data1; this.data2 = data2; } } } Thanks; last '}' was forgotten outside the code section. But yes I'll think I got to work up some test version that does have the problem (or find out how to fix the bug)"
725,A,"Java OS X Dock Menu Is it possible to add items to the applications dock menu? EDIT: I think i miss phrased the question i am not looking for a way to add an icon to the dock. what i am looking for is when you right click on the itunes icon you get itunes control on the menu (play pause etc) i was wondering how can i add custom items to that menu. Look into the com.apple.eawt package. Specifically when you initialize your app do something like the following: if (System.getProperty(""os.name"").startsWith(""Mac OS X"")) { // only do this setup if we know this is a Mac com.apple.eawt.Application macApp = com.apple.eawt.Application.getApplication(); java.awt.PopupMenu menu = new java.awt.PopupMenu(); // create your java.awt.MenuItem objects here // add to menu via java.awt.Menu#add(java.awt.MenuItem) macApp.setDockMenu(menu); } If you are distributing this as a cross-platform application Apple provides an Apple Java Extensions jar with stubs for the com.apple.eawt package so the code will compile with non-Apple JDKs.  Yes (providing I understand the question). If your just trying to customize the Java Icon in the Dock see ... http://developer.apple.com/documentation/Java/Conceptual/Java14Development/03-JavaDeployment/JavaDeployment.html#//apple_ref/doc/uid/TP40001885-208447-TPXREF120 Point two under OSX Application Bundles section ""If you add an appropriate icon it shows the application icon in the Dock clearly identifying your application. (Otherwise a default Java coffee cup icon appears in the Dock.)"" There is an example app (Java) for handling drag and drop events for your dock icon as well located here : http://www.devdaily.com/blog/post/jfc-swing/java-handle-drag-drop-events-mac-osx-dock-application-icon If you want you application to automatically add it's icon during installation to the dock (possibly what you mean) you should know that there is no ""official apple"" way to do this as it's BAD design on OS X to force your icons into a users dock and typically frowned upon. All MAC users i know will instantly remove your application as a result of such behavior. That said however you can review the system administration guides on Apple's site to see how it can be done programatically."
726,A,"Which Swing layout(s) do you recommend? There are 8 layout managers in the Java library alone and then there's a bunch of 3rd party products as well. The other day I tried to use SpringLayout and... well it ain't working out for me. See my other question. So... if you have a Swing app to design and you want your layout just so what are your preferred layout managers? Any interesting/useful experiences to relate? Update: Yup sure I'm aware that different LMs are appropriate for different layouts. But I'd expect that most of you use 1 2 or maybe 3 for most everything you do or you swear by a single one that's so versatile you never need anything else. With enough responses I'd expect to see something like a bell curve with a peak on GridBagLayout or MigLayout (for example) and a long tail of a few stragglers using (say) BoxLayout or FlowLayout. Hopefully the distribution of responses will reveal some trends as to what people use most to Get Stuff Done™ UPDATE and Summary OK after almost 2 days MiGLayout is definitely out in front! Its fans will be happy to hear that it looks like this layout will be entering the ""official"" library soon. GroupLayout FormsLayout and TableLayout are relatively new and haven't gotten much exposure. Perhaps others will be as surprised to find out about them as I was. I only use GridBagLayout especially when doing some complex interfacing believe me GridBagLayout can do anything. I also recommended the FlowLayout because it is easy to use and understandable good for putting a group of buttons. Actually I only use this two layouts since it is part of the JDK library as for the MigLayout I haven't tried it yet so for now can't recommend it for you.  MiGLayout no doubt. Honestly it's the only Swing layout manager I know of that makes any sense. The mere fact that there are 8 layout managers in the core JDK is a good sign that the Swing creators had absolutely no idea about what they were trying to do. This is not to trash the rest of the Swing - it's a good GUI toolkit except for the layout managers. After about thirty minutes of struggling with every single one of the 'default' layouts I googled and found this question. +1 for an epic recommendation I picked MiGLayout in about 3 seconds (compare to 30 minutes still not groking any of the default layouts...) @JoonasPulakka - I have never used Mig. But i have used border grid and flow of swing. They are easy to use. All you need to do is add a component. Is Mig that easy ? Or do you have to make some house keeping/preparatory code before you actually get to add the components ? If not then mig is not advantageous for situations where a simpler swing layout would suffice. Does Mig have oracle styled tutorials with colored pictures and such for the not so gifted learners like me ? I am not a MigLayout user but I am well-aware of its power. The key difference between (i) MigLayout (and other powerful layout managers) and (ii) simulating its features with many simpler layouts e.g. BorderLayouts FlowLayouts and BoxLayouts is each simple layout requires a JPanel (or JComponent). In certain situations this *can* be wasteful (in terms of lines of code and memory footprint) in complex dialogs and windows. At work we always use the ABsolute layout manager. Why does everyone dislike that layout manager. Having eight implementations of an interface is not a sign of weakness! (Although there is no guarantee that there are no unrelated weaknesses.) Granted - it could also be an intentional design decision. However given that the amount has *grown* to 8 little by little as each JDK was released it looks just like an attempt to fix earlier bad implementations. -1 Disagree 100%. Different layout managers for different purposes which can be combined to do almost anything. There's nothing wrong with that Like different machine instructions are for different purposes and can be combined to do almost anything. There's nothing wrong with that but I'll rather use higher-level languages to achieve the same effect with less effort. I'm with Joonas here. Those layouts look like they build on experienced gained over time. Nothing wrong with that but it means some of the older ones are less useful than they could be. +1 - that's why I like SO your're always pointed to libraries and tools that can make your life easier :) Thanks for the link! If you're trying to do anything moderately complex or you want layout to respect system-specific component spacing MigLayout is absolutely the best layout manager I've ever seen. It's also quite easy to do simple things. The only other layout manager I can see any reason for using is CardLayout as it provides something rather different from any other layout manager. And we have a winner (by sheer weight of agreement). Pardon me for taking so long to accept it slipped my mind!  I usually use border layout with gridlayout first i design ui on paper prototype like ; After that we can split screen to gridlayout on borderlayout. In this picture we see NORTH CENTER SOUTH part (BorderLayout elements) and every part's layout can be gridlayout or BorderLayout it depends on you. Same Layouts can use one within the other. Gah borders. Top tip how to make your UI noisy  It depends which kind of layout you need that's why you have 8 of them: BorderLayout simple and quite useful to design normal content frames (with main content in the middle and helpers on sides). GridLayout useful when you have a grid of objects that should be of the same size (buttons? textfields?). GridBagLayout very flexible needs some tweaking to be fine and it is quite verbose (but I raccomend it if you want to do things well). FlowLayout useless.. not a very layout: just placing item one next to another. CardLayout useful for tabs or subviews that must be switched. BoxLayout never used it too much.. it should be a sort of enhanced FlowLayout but it's not enough flexible to be used intensively. The key to `BorderLayout` is the center is ""greedy"" by default and auto-expands widgets within to consume all available space. All other slots are non-""greedy"".  I'm a Swing neophyte but in the course of writing my first Swing application I've tried four different layout managers: FlowLayout BoxLayout GridLayout and GroupLayout. In my opinion FlowLayout and BoxLayout seems most appropriate for laying out groups of components of similar sizes. For components of varying sizes GroupLayout seems to be the way to go. Steeper learning curve than the other two but definitely worth it. As for GridLayout I'd argue that you can achieve the same results you would with that layout manager by using a combination of FlowLayout and BoxLayout -- and you'd probably have more control of the placement of your components. But maybe that's just me :) Sheldon  Use IntelliJ IDEA with its GUI designer. Makes GridBagLayout easy. http://madbean.com/anim/totallygridbag/ Although GridBagLayout has a piss poor interface he flash thing just demonstrates that bad code is bad code. +1 and Thanks for the link. I appreciate the intent but I didn't even find it funny enough to provoke a smirk. Maybe GBL and humor aren't compatible.  GroupLayout is pretty decent. It was originally intended for use by GUI Builder applications but I've found it to be very straight forward to code by hand too. I second this sentiment. I find `GroupLayout` to be extremely versatile. It produces some great layouts that scale very well. In windows where the user can just grab the corner and resize this produces beautiful results. I code this entirely by hand as well. I've discovered ""pretty decent"" to be an understatement! It's VERY versatile and can do a few tricks GridBagLayout can't. Recommended!  DesignGridLayout both looks great and is easy to use through fluent interface. just look at example: with just a few lines of clean code:  layout.row().grid(label(""Last Name"")) .add(lastNameField) .grid(label(""First Name"")) .add(firstNameField); layout.row().grid(label(""Phone"")) .add(phoneField) .grid(label(""Email"")) .add(emailField); layout.row().grid(label(""Address 1"")) .add(address1Field); layout.row().grid(label(""Address 2"")) .add(address2Field); layout.row().grid(label(""City"") 1) .add(cityField); layout.row().grid(label(""State"")) .add(stateField) .grid(label(""Postal Code"")) .add(postalField); layout.row().grid(label(""Country"") 1) .add(countryField); layout.emptyRow(); layout.row().center().add(newButton).add(deleteButton).add(editButton).add(saveButton).add(cancelButton); Thanks for the pointer to this interesting layout manager! I've bookmarked it. It's cool but got bug my panel get bigger after each windows resize Hi. Do you know if I can use DesignGridLayout and set it not to not occupy the whole panel? Or add a ""space"" between LastName TextField and FirstName Label?  There are following layout options available: MiGLayout TableLayout GroupLayout FormsLayout Out of these above MigLayout is the most recommended one as it is swing layout manager. There others have not got much exposure.  There is no real answer to your question except that: it depends. It depends on what kind of frame (form) you are trying to create. I am no Swing-guru but created a couple of (moderately advanced) GUI's and have never had the need to touch the GridBagLayout manager. I have always been able to create my GUI's using a combination of ""easier"" layout managers. For example you can give your frame the BorderLayout and then place another layout in the SOUTH of that BorderLayout. I tried getting away with using only the simple layouts when I first started Java programming but quickly found that this led to undesirable behavior when resizing the application window.  GridBagLayout. Does pretty much all that you need (kind of) and it's in the Java library. Admittedly it does need some help and the API is terrible. GroupLayout makes a real mess of your layout code. Okay so most people's GUI code is a big ball of mud. But your's does not have to be! Perhaps a nice interface could be put onto this layout manager but I suspect it might have to be cloned-and-owned. I am not in favour of introducing external dependencies unless they are really necessary. Also a lot of the third-party layout managers use strings of data which have all the usual issues. GridBagLayout may take a lot of code but that's because it allows you so much customization that many of the other layouts don't. People say GridBagLayout is confusing but I say that the odd sizing and positioning behaviors of all the other layouts used in nested panels is more confusing than just learning GridBagLayout. Yeah... I seem to be the only person in my team who understands GridBagLayout. It's still painful though. I'm happy when I can average only 4 lines of code per component but that's only for boring layouts. There's gotta be a better way! Hehe mastering `GridBagLayout` gives you instant respect almost everywhere. ;) Bombe: Back in JDK1.02 days it was practically the first thing you did. Kids of today!  All of them in combination. That's the whole point. Each layout manager fulfills different requirements and by nesting panels with different layout managers you can achieve almost anything. The ""do everything in a single panel"" layout managers like GridBagLayout and GroupLayout (and lots of 3rd party ones) have their place mainly when you need components in different parts of the layout to align but with a large layout they generally result in a huge hard-to-handle mess.  It depends on what kind of GUI you are creating. You might use just one or two of the simple layouts or you might need to reach for a more advanced layout. My overall layout manager use would probably break down to something like this although it would vary based on the project: 65% GridBagLayout - The one layout that will get it done no matter what you need to do. 15% Box/BoxLayout - Great for quickly & easily sticking a couple components together. 12% BorderLayout - Good for attaching a button panel or info panel to a content panel. I almost always use it to add content to a JFrame. 3% FlowLayout - Useful for button panels but not much else. 3% CardLayout - Mostly useful in programs that display different content panels for different operational modes. 2% Other layouts - It's very rare that I need anything else but occasionally one of the other layouts comes in handy. Once you get the hang of GridBagLayout it's not that bad to write initially but it's still not pretty to work with or to debug later on. I tried MiGLayout for something recently and was disappointed to find that the MiGLayout actually ended up being more complicated to use than the GridBagLayout in that particular case. Some people try to avoid GridBagLayout like the plague; but the truth is there are some things that no combination of simple layouts will be able to handle. It's fine to split a GUI into panels for different logical sections but I think if you're creating a whole bunch of unnecessary extra nested panels just for the purpose of positioning components you clearly need to learn how to use a GridBagLayout (or other similarly advanced layout like MiGLayout). You might get your GUI to look okay with a nasty mess of nested BorderLayouts and GridLayouts and BoxLayouts but as soon as someone starts resizing your application windows and dialogs to be either smaller or larger than you originally designed them your GUI will probably look horrible and your customers will start to form a negative opinion about your product since you couldn't get such a simple thing right. Update: I've been using WindowBuilder in Eclipse for a while now and it greatly simplifies working with many layouts especially GridBagLayout. I used to spend a lot of time writing layouts by hand but with WindowBuilder or probably any similarly advanced visual editor you can create the layouts in much less time. +1 Thank you for a detailed and thoughtful answer! I agree about GBL but have recently come to love GroupLayout which does a couple of things GBL can't. Recommended! Like you I found MiGLayout *almost* great.  FormLayout part of the JGoodies Forms package has been a workhorse for me. It's not perfectly flexible in that it works hard to make your design look good. I've used it for several years on dozens of projects and it keeps on producing good looking output quickly. You specify your layout in human-readable text then add the components. Done. +1 and thank you. I'll be sure to take a look!"
727,A,"Modifying graphics context in Java I have a form that tries to modify a JComponent's graphics context. I use for example ((Graphics2D) target.getGraphics()).setStroke(new BasicStroke(5)); Now immediately after I set the value and close the form the change is not visible. Am I not allowed to modify a JComponent's graphics context? How else would I modify the stroke color and transformations? Thanks Vlad Nobody to answer? I have let some time to see if there is any good answer before mine: I am not a specialist of such question... First I don't fully understand your question: you change a setting then close the form? Anyway I am not too sure but somewhere in the process the graphics context might be recomputed or taken from default. Perhaps if you do this operation in the paint() method you can get some result although I am not sure. For a number of changes you usually use a decorator. I explored a bit this topic when answering a question on SO: How do I add a separator to a JComboBox in Java?. I had to paint my own border there (asymmetrical) but often you just take an existing one so it is quite simple. I hope I provided some information if it didn't helped perhaps you should give more details on what you want to do (and perhaps a simple minimal program illustrating your problem).  There are several problems with that approach. The first is that most components will set these things themselves when ever they are asked to repaint themselves. This means that your change will be lost every time the component gets to the point where it would actually use it. But on an even more fundamental level than that Graphics2D objects are not persistant. They are typically instantiated every time the component is redrawn meaning that the Graphics2D object you got won't be the same the component will be using when redrawing. What you need to do to achieve this kind of thing is either to reimplement the specific component yourself or implement a new look and feel that will affect the entire set of swing components. Have a look at the following link for further details about this: http://today.java.net/pub/a/today/2006/09/12/how-to-write-custom-look-and-feel.html  OK I've worked around the problem like this: The custom JComponent now holds a Stroke object which is set by the ""Choose stroke"" form when the user clicks OK. Then in the paint method of the JComponent I set the stroke of the graphics context passed as parameter to paint to the one contained in the object. I have experimented and found out that for some reason JComponent.getGraphics().set* doesn't work."
728,A,Part of path returned from Directories Only JFileChooser is sometimes duplicated In my application I want the user to be able to select a directory to store stuff in. I have a text field that I'm using to display the directory they've chosen. If they just click on a directory (don't browse it) everything is fine. However if they double click on the directory and look inside it the directory name is duplicated. Ex. They're in the home directory single click the folder Desktop...path returned is ~/Desktop. On the other hand if they're in the home directory double click the folder Desktop and now are in the Desktop folder path returned is ~/Desktop/Destkop. Here's what I'm doing: JFileChooser chooser = new JFileChooser(); chooser.setMultiSelectionEnabled(false); chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); int returnVal = chooser.showOpenDialog(this); if (returnVal == JFileChooser.APPROVE_OPTION) { File f = chooser.getSelectedFile(); loadField.setText(f.getPath()); } I've also tried to do something like chooser.getCurrentDirectory() but that doesn't really work either. Edit: Using Mac OS X Java 1.6 what OS and Java version are you on? Mac Java is troubled in many ways. You should maybe submit a bug report to Sun? You could also try OpenJDK 6/Java 7? Apple are responsible for their Java implementation. Bugs specific to Apple implementation should I believe be sent to Apple. The problem occurs when you use chooser.showDialog or chooser.showSaveDialog instead of chooser.showOpenDialog. On XP chooser.showDialog returns the correct path under the example given by the OP but on Mac OS 10.5.7 (and probably earlier versions as well) you'll get ~/Desktop/Desktop . (In my case I need to use showSaveDialog because I want users to have the option to create a new folder so it looks like I'll have to de-dupe the path manually. It sure looks like this is a bug in the Apple Java implementation.)  Seems to work for me. import javax.swing.JFileChooser; public class FChoose { public static void main(String[] args) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { JFileChooser chooser = new JFileChooser(); chooser.setMultiSelectionEnabled(false); chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); int returnVal = chooser.showOpenDialog(null); if (returnVal == JFileChooser.APPROVE_OPTION) { java.io.File f = chooser.getSelectedFile(); System.err.println(f.getPath()); } }}); } } 6u13 on Vista. Is there something strange about your setup or what you are doing? If there's a specific bug in a Mac OS X implementation of Java you may want to say check if the file exists and if not de-dupe the last to elements of the path. The difference as noah10 explains below is using showDialog vs showOpenDialog. Seems to be a bug in OSX implementation of Java. same ver on XP same positive result. Edited above but I'm using Mac OS X and Java 1.6. And you get the same problem with my complete example? Ok actually I feel like an idiot now...used your example works fine now. I think I was actually using the wrong Dialog type in my own code but copied it incorrectly when I wrote my question. Sorry for wasting your time and thanks for helping. Oh everyone make mistakes! I am interested in what you did wrong in the code you actually used.
729,A,Swing: Canvas overlaps menu I have a JFrame with a menu bar and a canvas covering all the remaining surface. When I click on the menu bar the menu opens behind the Canvas and I can't see it. Has anyone experienced this? Other than resizing the Canvas (which I am reluctant to do) is there any solution? Thanks Vlad You're experiencing heavyweight vs. lightweight issues. The quick fix: // Call this sometime before you use your menus JPopupMenu.setDefaultLightWeightPopupEnabled(false) Heavyweight vs. Lightweight Or use a JComponent instead of a Canvas. The JComponent idea was actually saner. I didn't think of looking for a Swing equivalent of Canvas. Thanks :)  That happened to me when i resized a Canvas that is on a JFrame. I just had to call validate() on the JFrame after the resize. Good luck!
730,A,"How can I create a Java/Swing text component that is both styled and has a custom font? How can I create a Java/Swing text component that is both styled and has a custom font? I want to highlight a small portion of the text in red but at the same time use a custom (embedded via Font.createFont) font. JLabel accepts HTML text which allows me to highlight a portion of the text but it ignores font settings when rendering HTML. Other text components such as JTextArea will use the custom font but they won't render HTML. What's the easiest way to do both? Here's an example of using JTextPane unsuccessfully:  JTextPane textPane = new JTextPane(); textPane.setFont(myCustomFont); textPane.setText(text); MutableAttributeSet attributes = new SimpleAttributeSet(); StyleConstants.setForeground(attributes Color.RED); textPane.getStyledDocument().setCharacterAttributes( text.indexOf(toHighlight) toHighlight.length() attributes true ); This successfully displays the text with the ""toHighlight"" portion highlighted in red but it doesn't use myCustomFont. Note that I could set a String font with StyleConstants.setFontFamily() but not a custom font. I had the same problem when writing a program in Clojure ie. using fonts loaded from TTF in a JEditorPane displaying HTML text. The solution here worked all right - I copy the interesting part here for future reference: (def font1 (with-open [s (FileInputStream. ""SomeFont.ttf"")] (.deriveFont (Font/createFont Font/TRUETYPE_FONT s) (float 14)))) (def font2 (Font. ""SansSerif"") Font/PLAIN 14) (let [editor (JEditorPane. ""text/html"" """")] (.setDocument editor (proxy [HTMLDocument] [] (getFont [attr] (if (= (.getAttribute attr StyleConstants/FontFamily) ""MyFont"") font1 font2))))) This assumes that the HTML document refers to a font-family ""MyFont"" e.g. with a CSS snippet like p { font-family: ""MyFont"" } Note that with this you have to handle all font requests. This is because of the limitation of proxy not being able to call the member functions of the superclass. Also if you want to handle different font sizes you have to do that ""manually"" checking the StyleConstants/FontSize attribute and creating a font with deriveFont accordingly. I hope this will help somebody :)  You should try to use JEditorPane or JTextPane instead. They allow rich style in the content at the price of a more complex API. Unfortunately if you are in search of a pixel-prefect UI they also have an additional problem: they don't support baseline-alignment (Java 6 feature). I've tried both of those but still with the same problem. If I use StyledDocument it ignores any font settings I have and insists that I set fonts using ""FontFamily"" which only allows a String--not a custom Font. Could you show a snippet that shows what you've done with StyledDocument and that doesn't work? I've added a more detailed example to the question. Hopefully that will help clear up what I'm trying to do.  jfpoilpret's solution worked perfectly! For posterity's sake here's a working code snippet:  JTextPane textPane = new JTextPane(); textPane.setStyledDocument(new DefaultStyledDocument(new StyleContext() { @Override public Font getFont(AttributeSet attr) { return myCustomFont; } })); textPane.setText(text); MutableAttributeSet attributes = new SimpleAttributeSet(); StyleConstants.setForeground(attributes Color.RED); textPane.getStyledDocument().setCharacterAttributes( text.indexOf(toHighlight) toHighlight.length() attributes true ); Thanks jfpoilpret!  OK I see the problem better now. After checking some Swing source code it is clear you cannot use the DefaultStyledDocument and have it use a physical font (one you created yourself with createFont) out of the box. However what I think you could do is implement your own StyleContext this way: public class MyStyleContext extends javax.swing.text.StyleContext { @Override public Font getFont(AttributeSet attr) { Font font = attr.getAttribute(""MyFont""); if (font != null) return font; else return super.getFont(attr); } } Then you have to: create a DefaultStyledDocument with a new MyStyleContext() ""attach"" it to the JTextPane call attributes.addAttribute(""MyFont"" myCustomFont); in your snippet above I did not try it but I think it should work or it might be a good path to investigate. Awesome thanks! I'll give it a shot. Worked perfectly. Code sample below. Thanks again. :)"
731,A,"how to set JTree ""ctrl"" selection mode to be always enabled I have a JTree that implements multi selection logic. This works great when I do all my selections using the mouse + Ctrl key pressed. If user makes selections with the Ctrl key unpressed it breaks my logic. I can't really see why it breaks but I think that a possible solution is to always indicate the TreeSelectionModel that the selection has been make with the Ctrl key pressed. What would you suggest? @willcodejavaforfood - Exactly. Need to clarify a few things. So CTRL+left click lets you select multiple nodes in the jtree but when just left clicking it only selects one? So what you want is to have the tree work as ctrl is always pressed and just keep adding selections on each click? I think I've found the solution You will need to extend JTree and DefaultTreeSelectionModel. JTree relevant methods: ///////////////////////////////////////////////////// ///////////////////////////////////////////////////// /// Implement selection using ""adding"" only logic. // ///////////////////////////////////////////////////// ///////////////////////////////////////////////////// @Override public void setSelectionPath(TreePath path) { System.out.println(""MLDebugJTree: setSelectionPath("" + path + "")""); addSelectionPath(path); return; //super.setSelectionPath(path); } @Override public void setSelectionPaths(TreePath[] paths) { System.out.println(""MLDebugJTree: setSelectionPaths("" + paths + "")""); addSelectionPaths(paths); return; } @Override public void setSelectionRow(int row) { System.out.println(""MLDebugJTree: setSelectionRow("" + row + "")""); addSelectionRow(row); return; //super.setSelectionRow(row); } @Override public void setSelectionRows(int[] rows) { System.out.println(""MLDebugJTree: setSelectionRows("" + rows + "")""); addSelectionRows(rows); return; //super.setSelectionRows(rows); } DefaultSelectionModel relevant methods : package com.ml.tree2.model.impl; import javax.swing.tree.DefaultTreeSelectionModel; import javax.swing.tree.TreePath; public class MLTreeSelectionModel extends DefaultTreeSelectionModel { private static final long serialVersionUID = -4270031800448415780L; @Override public void addSelectionPath(TreePath path) { // Don't do overriding logic here because addSelectionPaths is ultimately called. super.addSelectionPath(path); } @Override public void addSelectionPaths(TreePath[] paths) { if(paths != null) { for(TreePath path : paths) { TreePath[] toAdd = new TreePath[1]; toAdd[0] = path; if (isPathSelected(path)) { // If path has been previously selected REMOVE THE SELECTION. super.removeSelectionPaths(toAdd); } else { // Else we really want to add the selection... super.addSelectionPaths(toAdd); } } } } HTH. thanks I can't upvote this enough this saved me loads of searching!  Another solution would be to simply extend BasicTreeUI and change the selection behavior to suit your needs: public class MultiSelectionTreeUI extends BasicTreeUI { @Override protected boolean isToggleSelectionEvent( MouseEvent event ) { return SwingUtilities.isLeftMouseButton( event ); } } And then set that ui on your JTree: JTree tree = new JTree(); tree.setUI( new MultiSelectionTreeUI() );"
732,A,Painting a custom JScrollBar I want to completely change the look of a scollbar but overriding JScrollBar and the paintComponent method doesn't work the track and thumb are painted but the left and right arrows stay the same. I am also using them inside a JScrollPane and using setHorizontalScrollBar( new CustomScrollBar() ) to set the scroll bars to my custom scroll bars but it doesn't work so well the horizontal scrollbar doesn't change it's orientation it doesn't change to a vertical scroll bar. How do I paint a completely new JScrollBar and use it within a JScrollPane? In a nutshell you need to subclass ScrollBarUI with your own implementation and then register it with the UIManager. There's a full article here. It looks like a good article but I was hoping for something simpler. That method actually creates an entirely new scrollbar it defines completely new functionality. All I want is to change the look the rest of the scrollbar must stay exactly the same.
733,A,"Java: How can I add a JMenu to a JPanel or create a drop down button? is there any way to add a JMenuItem to a JPanel so that I can create a button to show multiple options like the latest news button in firefox under the address bar? I can only add JMenu and JMenuItems to a JMenuBar JPopupMenu and other JMenus and JMenuitems Is there any way to create in Java Swing a drop down Jbutton? (the ones with an down arrow in their left which shows more options to the user) Thanks in advance Thank you for your feedback. If you have a code illustrating your solution it might be interesting to publish it as an answer (and choose your own entry as the official answer if you want) thx i did it but i have to wait 48 hours to vote my answer Finnally i implement the ""show options button"" with a simple Jutton and a JPopupPane with the options to show: In the ActionPerformedListener of the button i write this code: popMenu.show(showOptionsButton0showOptionsButton.getHeight()) It works fine like a JMenu in a JMenuBar but not exactly like a dropdown button in which you can perform an action pressing the button or show more actions pressing the down arrow. I believe this can be done ussing two buttons ""very close"" then use the code above in the arrow button but setting the ""action button"" as the component of the popup so that the popup shows below of both buttons. Thank you for this feedback. +1  A JMenuBar should only be added to a JFrame (setMenuBar()) not a JPanel. A Swing drop down button is the way to go here. See this article for a good discussion on various implementation propositions The above drop-down button use the NetBeans UI Utilities API (platform7/modules/org-openide-awt.jar in any distribution of NetBeans IDE). You do not need to have NetBeans to run it: only this jar you have extracted from the NetBeans installation. It works but i finnally not use it in order to not depend of an external jar in the app which is distributed by JavaWebStart. I do it by showing a popmenu on point 0comp.getHeight() of the button"
734,A,Progress Dialog in Swing How can I make a modal JDialog without buttons appear for the duration it takes a Runnable instance to complete and have that instance update a progress bar/message on that Dialog. Clearly spaghetti code might be this working but I'm looking for a clean design if one exists. Thanks. Look at the project described at the following URL: http://digilander.libero.it/carlmila/compmon/main.html It is a free Java library alternative to the Swing ProgressMonitor.  Use a monitor class whit a global instance and which your code keeps up to date (I'm starting I'm working I'm at xxx% I'm done). The monitor can then decide to show the dialog and keep it current. Later you can simply replace the dialog with a progress bar in the status bar for example. Use an interface for the monitor (methods: start() update() end() error() isAborted()) so you can replace it with something else too. You can extend the monitor to wait for 500ms after start() if there is an end() and not show the dialog in this case etc. This is how Eclipse does it and it works well.  You might want to look into ProgressMonitor. It automatically pops up a dialog with a progress bar if the operation is taking a long time; see How to Use Progress Monitors. Yes it's not ideal but it does answer the question exactly. Except for the cancel button? :P
735,A,"How could I implement autocompletion using Swing? I'm interested in providing an autocompletion box in a JFrame. The triggering mechanism will be based on mnemonics (I think) but I'm not really sure what to use for the ""autocompletion box"" (I would like results to be filtered as the user presses keys). How would you implement this? Some sort of JFrame or a JPopupMenu? I would like to know how this is implemented so please don't post links to available [J]Components. Please post your solution when you got it. Ok Oscar  I will. Also see [this](http://stackoverflow.com/questions/15219625/how-would-be-implements-autosugesion-in-jtextarea-swing/15220056#15220056) similar answer You can use this library: http://fifesoft.com/autocomplete/  You might want to try the free AutoComplete component over at SwingLabs. http://swinglabs.org Edit: This site seems to have moved http://java.net/projects/swinglabs There is an example how to implement this code at: http://download.java.net/javadesktop/swinglabs/releases/0.8/docs/api/org/jdesktop/swingx/autocomplete/package-summary.html It is also available on Maven Central http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.swinglabs.swingx%22 Notice that the swinglabs site now appears empty. However there is https://swinglabs.dev.java.net which gives access to the sources. Furthermore the project seems to be avaiable via maven like http://www.mvnbrowser.com/artifact-details.html?groupId=org.swinglabs&artifactId=swingx&version=0.9.5-2&tab=VERSIONS#tabs indicates.  Here is a great article that uses a couple of libraries: Adding Auto-Complete Support to Swing Comboboxes @Java.net  You can use JEdit's textarea with built-in completion & syntax highlighting framework. A more heavyweight solution (that is good on the long term) is use NetBeans Platform.  import java.awt.; import java.awt.event.; import javax.swing.*; public class Autocompleter2 { //~ Methods ------------------------------------------------------------------------------------ public static void main(String[] args) throws Exception { // YES IT'S EMPTY !!! // It'll start anyway because of static initializers SwingUtilities.invokeLater(new Runnable() { @Override public void run() { final JPopupMenu textPopupMenu = new JPopupMenu(""MENU"") { { add(new JMenuItem(""item 1"")); add(new JMenuItem(""item 2"")); setFocusable(false); } }; final JTextArea textInput = new JTextArea(""type something la"") { { setCaretPosition(getText().length()); } }; KeyListener textInputListener = new KeyAdapter() { @Override public void keyTyped(KeyEvent e) { Point p = textInput.getCaret().getMagicCaretPosition(); if (textPopupMenu.isVisible()) { SwingUtilities.convertPointToScreen(p textInput); textPopupMenu.setLocation(p.x p.y + 20); } else { textPopupMenu.show(textInput p.x p.y + 20); } } }; textInput.addKeyListener(textInputListener); new JFrame(""TEST"") { { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); add(textInput); setSize(400 60); setLocationRelativeTo(null); setVisible(true); } }; } ; }); } }  I would add a actionListener so you can get each key as it is pressed. You can can then do a search in the background (another thread) `DocumentListener` is better option for auto-complete `JTextField`. The component to which you will be providing auto-completion. But  to what component would you add the ActionListener ?  And once more but with pop-ups as you wanted. You can also launch it the button is on the bottom of the page. God bless Java Webstart Or here my simplified version. Very simple but sadly here you have to click the text field first before start typing or you get exceptions. Perhaps you could figure out what's wrong... import java.awt.*; import java.awt.event.*; import javax.swing.*; public class _Autocompleter { private final static JPopupMenu textPopupMenu = new JPopupMenu(""MENU"") { { add(new JMenuItem(""item 1"")); add(new JMenuItem(""item 2"")); setFocusable(false); } }; private final static KeyListener textInputListener = new KeyAdapter() { @Override public void keyTyped(KeyEvent e) { Point p = textInput.getCaret().getMagicCaretPosition(); if (textPopupMenu.isVisible()) { SwingUtilities.convertPointToScreen(p textInput); textPopupMenu.setLocation(p.x p.y + 20); } else { textPopupMenu.show(textInput p.x p.y + 20); } } }; private final static JTextArea textInput = new JTextArea(""type something"") { { addKeyListener(textInputListener); setCaretPosition(getText().length()); } }; private final static JFrame f = new JFrame(""TEST"") { { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); add(textInput); setSize(400 60); setLocationRelativeTo(null); setVisible(true); } }; public static void main(String[] args) throws Exception { // YES IT'S EMPTY !!! // It'll start anyway because of static initializers } } Ah! I've figured out what's wrong! 1) Just ignore the caret position when the text field is empty! 2) Use instead of KeyListener something such as UndoableEditListener.  There is an example for auto-completion for text area at Sun's tutorials ""Using Swing Components"". It is done in the style of word processors (no pop ups but the suggested text is typed ahead of the cursor). Just scroll down to ""Another Example: TextAreaDemo"" ant hit the Launch button! The link is as of today broken. The link does work again. I think Oracle reversed the decision to break forwarding from sun.com URLs."
736,A,alternatives/improvements to JSplitPane I had a fairly simple dialog with a pair of JPanels of roughly equal size contained in a JSplitPane. Now I'm looking at adding a 3rd JPanel and I'm not so sure there is an obvious solution. Is there a good window-docking framework out there? or is that a horribly complex thing to get into? If I do just stick with the 3-panel split do I have to use a pair of nested JSplitPanes or is there an alternative that allows a 3-way split? SwingX library has JXMultiSplitPane class which allows you to create any layouts of resizable panels. A very good article about it is at http://today.java.net/pub/a/today/2006/03/23/multi-split-pane.html ooh! nice.... thanks I'll take a look at it.  Let's say you have three panels: JPanel panel1; JPanel panel2; JPanel panel3; // set up panels ... // put three panels into a horizontal split pane // with 2 resizeable dividers JSplitPane splitPaneLeft = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT); JSplitPane splitPaneRight = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT); splitPaneLeft.setLeftComponent( panel1 ); splitPaneLeft.setRightComponent( panel2 ); splitPaneRight.setLeftComponent( splitPaneLeft ); splitPaneRight.setRightComponent( panel3 ); // put splitPaneRight onto a single panel JPanel panelSplit = new JPanel(); panelSplit.add( splitPaneRight ); Note the last line. You add the *LAST* splitPane to the container not the first as I did then wondered why the others don't apear. Quite non-obvious. This is how I intuitively made my GUI work with 3 panels. However this raises issues with resizing the split panes: the right panel can now be resized over the left panel but not vice-versa. Try switching the master panel to the splitPaneLeft to see different resize functionality. Pick the style that best suits your GUI.
737,A,"Using SwingWorker publish efficiently I am using SwingWorker to query a server process for a large number of ""result"" objects on a background thread. As individual results arrive I want to publish them and display them on the GUI. My question is: Given that I will be receiving potentially thousands of results is it more efficient to call publish(V... chunks) for every N results or should I just call publish for each event received? I see that the documentation states that multiple calls to publish will be coalesced into a single call to process but wasn't sure if it was still better to retain some form of control in my own code by throttling when I call publish. What do people recommend? I say do the simplest thing that works - leave it to the Swing API to perform the throttling and if you run into problems later on it'll be an easy fix to add additional throttling yourself at that time (plus you'll have the justification for doing so). Cool - That's what I was thinking of doing. @Adamski: great minds and that ;-)"
738,A,"How do I populate a JComboBox with an ArrayList? I need to populate a JComboBox with an ArrayList. Is there any way to do this? For future reference: //first create the array; String[] comboBoxArray = {""item1""""item2""""item3""}; //create JComboBox and assign it to the comboBox JComboBox comboBox1 = new JComboBox(comboBoxArray);  i think that is the solution ArrayList<table> libel = new ArrayList<table>(); try { SessionFactory sf = new Configuration().configure().buildSessionFactory(); Session s = sf.openSession(); s.beginTransaction(); String hql = ""FROM table ""; org.hibernate.Query query = s.createQuery(hql); libel= (ArrayList<table>) query.list(); Iterator it = libel.iterator(); while(it.hasNext()) { table cat = (table) it.next(); cat.getLibCat();//table colonm getter combobox.addItem(cat.getLibCat()); } s.getTransaction().commit(); s.close(); sf.close(); } catch (Exception e) { System.out.println(""Exception in getSelectedData::""+e.getMessage());  Use the toArray() method of the ArrayList class and pass it into the constructor of the JComboBox See the JavaDoc and tutorial for more info. If you're doing something like ArrayList . in your Person class you can define toString() which will adjust what your value is for the ComboBox. Also you may have to declare your array variable as Object[] (instead of String[]) when using ArrayList.toArray()."
739,A,"Java User Interface Framework? I am about to build a UI in Java and I am trying to determine what I should use. I definitely don't want to use vanilla swing. The one caveat is that it has to be added inside of an existing swing application. I am looking at JavaFX and Groovy Swing Builder. For the former it looks like there is fairly poor support for embedding into swing. Anyone have another other suggestions? What's the ""vanilla"" thing I've been hearing everywhere ?? If the question is about declarative UI builders then it's almost a duplicate of http://stackoverflow.com/questions/761237/suggestions-for-declarative-gui-programming-in-java . It's hard to tell right now though. @OscarRyz Not sure about vanilla but chocolate Swing is animated http://i996.photobucket.com/albums/af88/taranaingel/Places/swstpgch.png have you thought about building your backend with java but using another language for interface? I find most java interfaces quite heavy. I'm not quite sure what you're looking for but SwingX might fit the bill. Contains extensions to the Swing GUI toolkit including new and enhanced components that provide functionality commonly required by rich client applications. Highlights include: Sorting filtering highlighting for tables trees and lists Find/search Auto-completion Login/authentication framework TreeTable component Collapsible panel component Date picker component Tip-of-the-Day component (SwingLabs seems to be down at the moment though.) Edit: On second reading I guess you were actually talking about declarative UI builders? In that case I'll refer you to another answer of mine in which I recommended javabuilders a YAML-based Swing UI builder.  The groovy guys are working on Griffon: http://groovy.codehaus.org/Griffon. I believe it is supposed to model a console type GUI like a web UI. Another possible answer is JavaFX. Here's a link to their hello world app: http://javafx.com/docs/gettingstarted/javafx/create-first-javafx-app.jsp +1 for Griffon. Not so sure about JavaFX though it doesn't seem to have gained much traction despite the marketing effort that was ploughed into it Griffon sports a JavaFX plugin that works with the current JavaFX 2.0. See https://github.com/deanriverson/griffon-javafx-plugin  I've used JIDE in the past. It's docking framework is pretty awesome. I'd be concerned about the level of community-support available for JIDE  Have you considered using NetBeans? http://www.netbeans.org/features/java/swing.html Why got this downvoted? Building swing uis with Netbeans is really easy as it uses a graphical editor."
740,A,"Using Mac OS X Services-menu from a Java/Swing application I would like to make my Java/Swing application compatible with the Services-menu available on Mac OS X. For example so that the user could select some text in JTextArea and have it converted into speech by Services -> Speech -> Start Speaking Text. Is there a simple way to achieve that? (The application should still be able to run on platforms other than Mac OS X.) This seems to work on Mac OS X Leopard with no change to the original application. So I've lost interest in the answer (to how to make it work on Tiger). Thanks for your contribution however.  Have a look at apple's OSXAdapter package (link requires free apple developer login) for java development. The samples included in the package shows you how to integrate nicely to the OS X application menu in a way that is only activated when your application is running under OS X.  I'm inclined to say no. If I recall correctly services are only available to Cocoa applications and Java apps are not Cocoa applications.  If all you want is the end result of the text being converted to speech you could try invoking the ""say"" command using ProcessBuilder something like this: String stuffYouWantToSay = ""StackOverflow Rocks!""; Process p = null; try { ProcessBuilder pb = new ProcessBuilder(""/usr/bin/say"" stuffYouWantToSay); p = pb.start(); } catch (Exception e) { // handle the error return; } This won't add it to the services menu but you can still get the same effect. Be sure to check out the man page for ""say"" as you can change the voice."
741,A,"Java(Swing): influence height of JList in GridBagLayout I want to build a dialog in Java with a List and a couple of buttons underneath it. The list ends up with the same height as the buttons (about one line) and the whole dialog is about two lines of height. However I'd like the dialog to be taller (maybe 10 lines) and the JList to take up most of the space .. I've played around with the parameters but for the life of it can't get it to work. Any ideas? Here's my current code: //layout setLayout(new GridBagLayout()); GridBagConstraints gbc = new GridBagConstraints(); gbc.fill = GridBagConstraints.BOTH; int y = 0; //List gbc.gridx = 0; gbc.gridy = y; gbc.weighty = 3; gbc.weightx = 1; gbc.gridwidth= 3; add(new JScrollPane(_myList) gbc); _myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); // Buttons gbc.gridx = 1; gbc.gridy = ++y; gbc.gridwidth = 1; gbc.weighty = 0; add(_Save gbc); gbc.gridx = 2; add(_Cancel gbc); Added some new info regarding the size of the ListModel. Oh gosh... I always hated that problem. Don't forget to watch ""Totally Gridbag"" http://madbean.com/anim/totallygridbag/ cool cartoon .. where can I upvote your answer ;-) You might as well consider calling _myList.setVisibleRowCount(n) to force a preferred size (in number of visible rows) for your list. I tried but it didn't change anything with the null entries. For general sizing it sure works so +1  For the list set weightY=1 instead of 3. The setting of 3 will make the space for the list larger than the list itself. 99.9% of the time GridBagLayout is used the weightX/Y values should always be either 0 or 1. Also the gridWidth should probably be 2 instead of 3. Thanks but the problem was somewhere else in my code. +1 This actually helped me with the problem I had. Setting weighty to a JScrollPane (that has a JList) will appropriately resize the component vertically.  I've done some more poling around and apparently the behaviour is caused by the number of items in the ListModel of _myList. When I populate it with a larger number of items than the one or two it has in my current usage then the list is properly displayed. Hopefully that helps to pin down the problem and find a solution ..  Found the problem .. and it has nothing to do with the layout code. I was adding a null to ListModel and that seemed to confuse the LayoutManager. Would close the question but not yet enough mojo ..."
742,A,"Spring JdbcTemplate and Threading Is it safe to fork off a Thread to execute an insert using a JdbcTemplate in Swing. It's a logging event and as much as possible I don't want it to affect perceived performance. Why would you think that it wouldn't be? I've not used JdbcTemplate directly from Swing but I have in several web applications (which have a separate thread per request) and I've never had any problems with threading issues from it. In this situation the template was configured once at application startup and repeatedly called with different parameters. If you're worried about threading issues you can always create a new template per logging thread...  Also note that its thread-safety is very well explained in the Spring 3.1 reference documentation: 13.2.1.2 JdbcTemplate best practices Instances of the JdbcTemplate class are threadsafe once configured. This is important because it means that you can configure a single instance of a JdbcTemplate and then safely inject this shared reference into multiple DAOs (or repositories). The JdbcTemplate is stateful in that it maintains a reference to a DataSource but this state is not conversational state. And read carefully ""once configured"" bit so don't misuse setMaxResult for limiting result set for given thread for given query as it affects all the queries and all the threads using shared JdbcTemplate instance.  This answer from the Spring forum says yes: http://forum.springframework.org/showthread.php?t=25965 JdbcTemplate is a singleton that won't change state once it's set."
743,A,"Java JTextField with input hint I would like to add a hint value to my JTextField. It should look like Firefox rendering of <input type=""text"" title=""bla"">. This creates a edit field with the text 'bla' in the background. If the textbox has focus the title-text disappeares and just reappears if the user leaves the editbox without text. Is there a (free) swing component that does something like this? I found a swing bug report about this at https://swingx.dev.java.net/issues/show_bug.cgi?id=306 Thanks for your help. Here is a single class copy/paste solution: import java.awt.Color; import java.awt.Graphics; import java.awt.event.FocusEvent; import java.awt.event.FocusListener; import javax.swing.plaf.basic.BasicTextFieldUI; import javax.swing.text.JTextComponent; public class HintTextFieldUI extends BasicTextFieldUI implements FocusListener { private String hint; private boolean hideOnFocus; private Color color; public Color getColor() { return color; } public void setColor(Color color) { this.color = color; repaint(); } private void repaint() { if(getComponent() != null) { getComponent().repaint(); } } public boolean isHideOnFocus() { return hideOnFocus; } public void setHideOnFocus(boolean hideOnFocus) { this.hideOnFocus = hideOnFocus; repaint(); } public String getHint() { return hint; } public void setHint(String hint) { this.hint = hint; repaint(); } public HintTextFieldUI(String hint) { this(hintfalse); } public HintTextFieldUI(String hint boolean hideOnFocus) { this(hinthideOnFocus null); } public HintTextFieldUI(String hint boolean hideOnFocus Color color) { this.hint = hint; this.hideOnFocus = hideOnFocus; this.color = color; } @Override protected void paintSafely(Graphics g) { super.paintSafely(g); JTextComponent comp = getComponent(); if(hint!=null && comp.getText().length() == 0 && (!(hideOnFocus && comp.hasFocus()))){ if(color != null) { g.setColor(color); } else { g.setColor(comp.getForeground().brighter().brighter().brighter()); } int padding = (comp.getHeight() - comp.getFont().getSize())/2; g.drawString(hint 2 comp.getHeight()-padding-1); } } @Override public void focusGained(FocusEvent e) { if(hideOnFocus) repaint(); } @Override public void focusLost(FocusEvent e) { if(hideOnFocus) repaint(); } @Override protected void installListeners() { super.installListeners(); getComponent().addFocusListener(this); } @Override protected void uninstallListeners() { super.uninstallListeners(); getComponent().removeFocusListener(this); } } Use it like this: TextField field = new JTextField(); field.setUI(new HintTextFieldUI(""Search"" true)); Note that it is happening in protected void paintSafely(Graphics g). How might one make it so that the hint is italicized but the user entered text is not? In the `paintSafely()` you would have to call `setFont(fontHint)` or `setFont(fontOriginal)` according to whether `getText().isEmpty()` where `fontHint` would have been derived from the original `getFont()` in constructor. I also had to override `setFont()` to regenerate it: `fontOriginal = getFont(); hintFont = new Font(fontOriginal.getName() fontOriginal.getStyle() | Font.ITALIC fontOriginal.getSize());` Note that I didn't use `font.deriveFont()` because it seems that it eats up a lot of memory and never gives it back... works like a charm thanks!  Here is a simple way that looks good in any L&F: public class HintTextField extends JTextField { public HintTextField(String hint) { _hint = hint; } @Override public void paint(Graphics g) { super.paint(g); if (getText().length() == 0) { int h = getHeight(); ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASINGRenderingHints.VALUE_TEXT_ANTIALIAS_ON); Insets ins = getInsets(); FontMetrics fm = g.getFontMetrics(); int c0 = getBackground().getRGB(); int c1 = getForeground().getRGB(); int m = 0xfefefefe; int c2 = ((c0 & m) >>> 1) + ((c1 & m) >>> 1); g.setColor(new Color(c2 true)); g.drawString(_hint ins.left h / 2 + fm.getAscent() / 2 - 2); } } private final String _hint; }  If you still look for a solution here's one that combined other answers (Bart Kiers and culmat) for your reference: import javax.swing.*; import javax.swing.text.JTextComponent; import java.awt.*; import java.awt.event.FocusEvent; import java.awt.event.FocusListener; public class HintTextField extends JTextField implements FocusListener { private String hint; public HintTextField () { this(""""); } public HintTextField(final String hint) { setHint(hint); super.addFocusListener(this); } public void setHint(String hint) { this.hint = hint; setUI(new HintTextFieldUI(hint true)); //setText(this.hint); } public void focusGained(FocusEvent e) { if(this.getText().length() == 0) { super.setText(""""); } } public void focusLost(FocusEvent e) { if(this.getText().length() == 0) { setHint(hint); } } public String getText() { String typed = super.getText(); return typed.equals(hint)?"""":typed; } } class HintTextFieldUI extends javax.swing.plaf.basic.BasicTextFieldUI implements FocusListener { private String hint; private boolean hideOnFocus; private Color color; public Color getColor() { return color; } public void setColor(Color color) { this.color = color; repaint(); } private void repaint() { if(getComponent() != null) { getComponent().repaint(); } } public boolean isHideOnFocus() { return hideOnFocus; } public void setHideOnFocus(boolean hideOnFocus) { this.hideOnFocus = hideOnFocus; repaint(); } public String getHint() { return hint; } public void setHint(String hint) { this.hint = hint; repaint(); } public HintTextFieldUI(String hint) { this(hint false); } public HintTextFieldUI(String hint boolean hideOnFocus) { this(hint hideOnFocus null); } public HintTextFieldUI(String hint boolean hideOnFocus Color color) { this.hint = hint; this.hideOnFocus = hideOnFocus; this.color = color; } protected void paintSafely(Graphics g) { super.paintSafely(g); JTextComponent comp = getComponent(); if(hint != null && comp.getText().length() == 0 && (!(hideOnFocus && comp.hasFocus()))) { if(color != null) { g.setColor(color); } else { g.setColor(Color.gray); } int padding = (comp.getHeight() - comp.getFont().getSize()) / 2; g.drawString(hint 5 comp.getHeight() - padding - 1); } } public void focusGained(FocusEvent e) { if(hideOnFocus) repaint(); } public void focusLost(FocusEvent e) { if(hideOnFocus) repaint(); } protected void installListeners() { super.installListeners(); getComponent().addFocusListener(this); } protected void uninstallListeners() { super.uninstallListeners(); getComponent().removeFocusListener(this); } } Usage: HintTextField field = new HintTextField(); field.setHint(""Here's a hint"");  You could create your own: import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.FocusEvent; import java.awt.event.FocusListener; import javax.swing.*; public class Main { public static void main(String[] args) { final JFrame frame = new JFrame(); frame.setLayout(new BorderLayout()); final JTextField textFieldA = new HintTextField(""A hint here""); final JTextField textFieldB = new HintTextField(""Another hint here""); frame.add(textFieldA BorderLayout.NORTH); frame.add(textFieldB BorderLayout.CENTER); JButton btnGetText = new JButton(""Get text""); btnGetText.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { String message = String.format(""textFieldA='%s' textFieldB='%s'"" textFieldA.getText() textFieldB.getText()); JOptionPane.showMessageDialog(frame message); } }); frame.add(btnGetText BorderLayout.SOUTH); frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); frame.setVisible(true); frame.pack(); } } class HintTextField extends JTextField implements FocusListener { private final String hint; private boolean showingHint; public HintTextField(final String hint) { super(hint); this.hint = hint; this.showingHint = true; super.addFocusListener(this); } @Override public void focusGained(FocusEvent e) { if(this.getText().isEmpty()) { super.setText(""""); showingHint = false; } } @Override public void focusLost(FocusEvent e) { if(this.getText().isEmpty()) { super.setText(hint); showingHint = true; } } @Override public String getText() { return showingHint ? """" : super.getText(); } } If you're still on Java 1.5 replace the this.getText().isEmpty() with this.getText().length() == 0. I would rather use a flag in getText() which indicates if a hint is currently shown or not. Otherwise if the user happens to enter the hint text getText() would return an empty string too. @MichaelJess yes you're right. I edited my example to include a boolean flag instead. @Gerret if the text field is displaying the ""hint"" it returns an empty string otherwise it returns the actual contents of the text field (through `super.getText()`). If you're unsure about the `... ? ... : ...` construct it's called a ternary operator (ternary if): http://en.wikipedia.org/wiki/%3F: @BartKiers Could you tell me how the getText() Method in HintTextField works? I don't understand the return ^^ This solution is nice too. You would have to overload getText() and filter the hint-text.  Take a look at this one: http://code.google.com/p/xswingx/ It is not very difficult to implement it by yourself btw. A couple of listeners and custom renderer and voila.  For any Swing component (that is anything that extends JComponent) you can call the setToolTipText(String) method. For more information reference the following links: API Documentation for setToolTipText ""How to Use Tool Tips"" tutorial I think he is not talking about tooltip he wants something like ""Type here to search"" grey text which disappears when one starts typing Hmm you might be right but that fit with the HTML he provided. OP.. if you're looking to clear/set default text when the input is focused/blurred look into FocusListener: http://java.sun.com/docs/books/tutorial/uiswing/events/focuslistener.html Dmitry is right. Thanks for your help."
744,A,"Change the direction of growth for a JTexField object I need to change the direction of the growth of JTextField object when more characters are added to it. Currently when I add more stuff to it it grows from left to right but I need this growth of the bounds of the JTextField from right to left. For e.g. when I add ""StackOverflow"" to this JTextField the o/p is <empty space>StackOverflow but I want StackOverflow<empty space> Can you guys help me with this? I tried setHorizontalAlignment. But it doesnt work. Thanks for any help. EDIT : Added SSCCE for better explanation. import java.awt.Container; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JTextField; public class JTextFieldExample { public static void addComponentsToPane(Container pane) { pane.setLayout(new BoxLayout(pane BoxLayout.Y_AXIS));  JTextField transitionEditorJTextField = new JTextField(""StackOverFlow""); pane.add(transitionEditorJTextField); System.out.println(""If I add text to JTextFiled notice that it grows towards Right - which is normal. "" + ""But I want it to grow towards left.""); JButton button = new JButton(""Button.I.Am""); pane.add(button); } /** * Create the GUI and show it. For thread safety * this method should be invoked from the * event-dispatching thread. */ private static void createAndShowGUI() { //Create and set up the window. JFrame frame = new JFrame(""BoxLayoutDemo""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //Set up the content pane. addComponentsToPane(frame.getContentPane()); //Display the window. frame.pack(); frame.setVisible(true); } public static void main(String[] args) { //Schedule a job for the event-dispatching thread: //creating and showing this application's GUI. javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { createAndShowGUI(); } }); } } textField.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT); This works in the SSCCE but somehow it does not in my actual application. Thats is weird.  I'm not sure I understand your question. Normally you create a JTextField with code like: JTextField textField = new JTextField(10); This gives the text field a fixed preferred size which is respected depending on the layout manager being used. It sounds like you are doing something like: JTextField textField = new JTextField(); In which case I don't think the text field has a size. Can you even add character to it? Well maybe the solution in this case is to add a ComponentListener to the text field and keep track of the original size. Every time the size changes you change the location of the text field by the difference in the size. Again this may or may not work depending on the layout manager. If you need more help post your SSCCE showing the problem. I added SSCCE per your request. I do not want the current behavior in the example given. I want it to grow towards left. Thanks."
745,A,"Is it possible to use Enter as Tab without inheriting JTextField or mass-adding key listeners? I've found several pages and SO answers about the enter-as-tab problem in Java but all propose either overriding methods of JTextField or adding a key listener to every component. But isn't there any other way? Can't I override something of the LookAndFeel or install some global policy? The hammer - of setting the enter as focus traversal key for all component except those which register their own - is just fine if it's really required. The obvious drawback is that default bindings to the enter stop working in particular action/Listeners on textFields default buttons any other component type with a custom binding to enter If those side-effects are problematic there's the less intrusive alternative of tweaking the binding in the shared ancestor actionMap of the textFields. // ""early"" in the app instantiate a textField JTextField text = new JTextField(); ActionMap map = text.getActionMap(); // get a reference to the default binding final Action notify = map.get(JTextField.notifyAction); while (map.getParent() != null) { // walk up the parent chain to reach the top-most shared ancestor map = map.getParent(); } // custom notify action TextAction tab = new TextAction(JTextField.notifyAction) { @Override public void actionPerformed(ActionEvent e) { // delegate to default if enabled if (notify.isEnabled()) { notify.actionPerformed(e); } // trigger a focus transfer getTextComponent(e).transferFocus(); } }; // replace default with augmented custom action map.put(JTextField.notifyAction tab); After replacing the default all textFields will use the custom action. The one beware is that the replacement has to be repeated whenever the LAF is changed. [and interesting answer for my question](http://stackoverflow.com/questions/10075147/how-to-use-textaction)  After some documentation crawling I found a solution: It is possible to set the focus traversal keys on KeyboardFocusManager instead of a JComponent instance. // 1. Get default keys Set<AWTKeyStroke> ftk = new HashSet<AWTKeyStroke>( KeyboardFocusManager.getCurrentKeyboardFocusManager() .getDefaultFocusTraversalKeys( KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS)); // 2. Add our key ftk.add(KeyStroke.getKeyStroke(""ENTER"")); // 3. Set new keys KeyboardFocusManager.getCurrentKeyboardFocusManager() .setDefaultFocusTraversalKeys( KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS ftk); This adds the enter key to the list of keys which are used for forward traversal. (Backward traversal similar)  you can probably use http://java.sun.com/products/jfc/tsc/special_report/kestrel/keybindings.html to change the keyBinding for the enter key or you can add focustravesal keys setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS your keys here); Both methods still require touching each component instance."
746,A,"Java JTabbedPane how can I select a tab from a button? How can I select a tab as if it was clicked by clicking on a button? I have googled and looked at all the actions but there are just just so many... :( Anyone know off hand? Thanks in advance! If your jtabbedpane's name is mytabbedpane it goes like this: mytabbedpane.getSelectedIndex(); which returns the int of that tab (01 .. n) or mytabbedpane.getSelectedComponent(); which returns the String of the tab's name (""Firts tab""""Second tab""...). If you want to use the ""getSelectedComponent()"" for boolean logic you should write something like: if (mytabbedpane.getSelectedComponent().equals(""First tab"")) { //code here } and for the ""getSelectedIndex()"" one is of course: if (mytabbedpane.getSelectedIndex() == 0) { //code here }  I'm not sure what you mean about the button but you might be looking for setSelectedComponent or setSelectedIndex.  Add an action listener to the button that calls setSelectedComponent or setSelectedIndex on the JTabbedPane.  Try this code tabbedPane.addTab(tabName component); int count = tabbedPane.getTabCount(); tabbedPane.setSelectedIndex(count-1); Thanx"
747,A,"How do I get my netbeans drag and drop widget to know whether it is rendering inside the netbeans design view window or the running application? How do I get my netbeans drag and drop widget to know whether it is rendering inside the netbeans design view window or the running application? I'm trying to do some custom rendering. I think it has to do with the root container. This is another method: Component c = javax.swing.SwingUtilities.getRoot(this); String className = c.getClass().getCanonicalName(); if (!""org.netbeans.core.windows.view.ui.MainWindow"" .equalsIgnoreCase(className)) { Although I think the  Beans.isDesignTime() method is better  Try java.beans.Beans.isDesignTime().  Testing the Beans.isDesignTime() with the following example package test; import java.awt.Graphics; import java.beans.Beans; import javax.swing.JLabel; public class TestLabel extends JLabel { private static final long serialVersionUID = -2438507032083091628L; public TestLabel() { super(); } public void paint(Graphics g) { super.paint(g); if (Beans.isDesignTime()) this.setText(""Design Time""); else this.setText(""Production runtime""); } } It works - that's quite incredible. I'm also amazed when things actually work."
748,A,Java: Display an Email body in Swing Is there a simple way to display an email body in a JComponent. Just the body is enough I will make labels and fields like: from to subject ... It would be very easy if I could do something like this: Message m = ...; //From the java mail lib. (javax.mail.Message) JEmailBodyComponent c = new JEmailBodyComponent(m); frame.add(c); Thanks If it is just plain text then isn't it just a text area? This is some example code to provide an email composition window in Swing. It should be trivial to populate the fields with the contents of an existing message.
749,A,In Swing how can I find out what object currently has focus? I have few TextFields on my frame. I want to know the TextField name which is currently focused. Can someone please help me? How can I find out the current focused object name? Thanks getFocusOwner() will return the child component which is currently focused. But you have to check to see if it is a JTextField. Other components like buttons might be focused if they exist in your frame as well.  This tutorial should be pretty helpful to understand focus.  Every JComponent has a hasFocus method that you can use to check if it has focus. However this has been changed and now you should use isFocusOwner. So run over all the text fields in your frame and check on each of them if it is isFocusOwner by calling that method. You could also get the focus owner through the frame. Seems really inefficient. You can just call KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();  Also have a look at the javax.swing.FocusManager  JFrame.getFocusOwner() (inherited from Window.getFocusOwner()) ought to return a reference to the component with focus. getMostRecentFocusOwner() might also be of interest.  KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()  KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner(); wont work across threads. So if your app invokes a new thread and that thread has its own frame/window etc then it wont be able to gain the focus owner from that thread. Instead use: KeyboardFocusManager.getCurrentKeyboardFocusManager().getGlobalFocusOwner(); Hmmm.... Yes you are right. Sorry for the bum steer. okay reading the api doc helps (me :-) to understand what you might mean. It states the _Returns the focus owner even if the calling thread is in a different context than the focus owner_ - it's not usable in application code though because it's scope is protected. It's used internally only ...
750,A,"address book next and previous buttons I'm making an address book and I need to cycle through my contacts. The contacts are imported from file and are read into the JTextFields as so: name phone mobile address How do I go about doing this? I've tried it runs but the buttons do nothing. edit: now using this:  public void importContacts() { try { BufferedReader infoReader = new BufferedReader(new FileReader(""../files/example.txt"")); txtName .setText(readLine(infoReader)); txtPhone .setText(readLine(infoReader)); txtMobile .setText(readLine(infoReader)); txtAddress.setText(readLine(infoReader)); } catch (IOException ioe) { JOptionPane.showMessageDialog(null ioe.getMessage()); } } In your importContacts() method you do :  txtName.setText(Name.get(0)); txtPhone.setText(Phone.get(0)); txtMobile.setText(Mobile.get(0)); txtAddress.setText(Address.get(0)); instead of .get(0) I think it should be .get(index) according to your code --Edit-- or to avoid re-importing your contact here what your previous() method should be : public void Previous() { if (index > 0) { index--; } txtName.setText(Name.get(index)); txtPhone.setText(Phone.get(index)); txtMobile.setText(Mobile.get(index)); txtAddress.setText(Address.get(index)); } public void Next() { if(index < temp.size() - 1){ index++; } txtName.setText(Name.get(index)); txtPhone.setText(Phone.get(index)); txtMobile.setText(Mobile.get(index)); txtAddress.setText(Address.get(index)); } -Final edit code source availabe at pastebin new code here http://pastebin.com/d12aa3ab3 i just used 0 to prove how to access the first element of the list You can do in your previous() and next method() txtName.setText(Name.get(index)); (and all others) so get(1) will show the next contact?? i'm really stuck on this one! in the above example yes. To show the next contact you must keep track of the index of the ArrayList you are at. Increasing the index value will give you the next contact decrease the index value will give you the previous contact check my edit to help you please note that it will only show the next contact because the example shows the get method retrieving the 0th element of the ArrayList nettogrof i've put that in but its not working? Did you assign a actionLister to your button ? Because in your last code in pasteBin the line was in comment "" // "" and if it still doesn't work try to add this.repaint(); at the end of your previous and next method I have made the change and it's work look at http://pastebin.com/m4b81c9e5 hi nettogrof sorry for wasting your time. i've now changed the way i import the file its a lot easier this way. can I still use your code? nettogrof i've noticed that your way shows the contacts as soon as it runs do i need an import button and can i get rid of my method importContacts?? The new way that you import your file it'll read only the first contact not all of them. With the code I provide  yes you can remove the Import button but the ImportContacts() is use to read the file. can i amend your code so that it works with my new code? thanks"
751,A,"Java 6 and SwingUtilities2 There is component within the application that uses com.sun.java.swing.SwingUtilities2 Now I understand that this class shouldn't be used but it's a component within the system that uses it. Therefore since it's no longer available in Java 6 I get a NoClassDefFoundError. How can I get around this issue without having to upgrade the component as I don't yet know if that's an option. Are you going to name and shame the provider of the component? Is this for a spot fix? is it possible to get the vendor to do a rebuild for 6? @Tom: They've since fixed it we just don't want to absorb the time and monetary costs. For example they've improved their API but we don't need any of the improvements (other than this fix). As well we don't know if our code will need an uplift to match the new API (more time costs). And there's of course the ""upgrade"" cost for the component. If you have absolutely no other choice then you should figure out exactly what it was that the class is using from SwingUtilities2 and then make proxies for that functionality in your own SwingUtilities2. You can then stick it in your own com.sun.java.swing package which will overlap with the original one and if the same class loader that loads your component is also aware of SwingUtilities2 then the one will see the other and your application will work. Depending on what the component is and what it used out of SwingUtilities2 this could be significantly harder than upgrading it or even rewriting it. I agree. Do you have any idea if the source is available anywhere. I understand it's not open source but someone must have created some kind of class to replace it... Other than just decompiling it. In regards to googling it I did (well before asking here). The issue is that there are several different ""versions"" of the same code. So which is right? And more importantly how well do you trust them... That's what I got too. The problem is that there is some code in an obfuscated jar that's the culprit. Which unfortunately means I don't have the luxury of just changing the code :( http://www.google.com/search?q=SwingUtilities2.java It looks like they just changed the package name to sun.swing Note that the `com.sun.` package could become sealed the class might be reintroduced without the relevant method or some other reason why it might break again at any moment. Is there a copy in OpenJDK? If not the top hit on google has a Sun copyright at the top so it might be trustworthy. Either way you'd have to evaluate the code whether it's worth using and the legalities of doing so. http://www.javaresearch.org/source/jdk150/com/sun/java/swing/SwingUtilities2.java.html  Just a though I don't know if this would work. Try pulling out the SwingUtilities2 class and put it in a patch jar include this jar in your classpath. Hopefully this works until you can change the source. Unfortunately it doesn't quite work. There's a line ((Boolean)c.getClientProperty(AA_TEXT_PROPERTY_KEY)); that always returns null and therefore throws a nullpointerexception. Edit the references inside the copied class to refer locally. I think the NP is because it is using the real 6 variables. Although it would be best to get the vender to rebuid a 6 . Some companies do this for quick fixes  The only correct way (out of hacking) is to ask vendor to fix and rebuild this component to Java 6. The possible working way is copy sun.swing.SU2 to com.sun...SU2 and package it into separate jar (e.g. java6fix.jar) and try to run your application. It will be fine if you add this patch jar into jvm bootclasspath. The best patch should be to create own com.sun..SU2 and delegate all calls to sun.swing.SU2. And take a look for different version of component which support Java6 maybe also from different vendor. Also if the problem is only in the mentioned line ((Boolean)c.getClientProperty(AA_TEXT_PROPERTY_KEY)); then you may put your own client property for this component to prevent NPE. When you take this path you can just simply create your own com.sun...SU2.AA_TEXT_PROPERTY_KEY and call c.setClientProperty(AA_TEXT_PROPERTY_KEY true) on this component. Also try to disable anti aliasing check on component if possible. If not take another path from my suggestions. Although it's nice to say I'm afraid this is an expensive route. The component was built in the JDK 5 error so I can't fault them for not supporting JDK 6.  Da-dum! This is precisely why you should pay attention to those pesky warnings admonishing you not to rely upon internals of the JVM! But do you have a solution? @Rob you assume that @Stephane made the problem he has to support. How do you solve the problem if you had to fix the issue? It's actually in a component that was purchased to include in the software. The component since it's proprietary is obfuscated. I also had no idea (nor how could you even) know it was using this class. Even obfuscated you should be able to see what the code is using. For instance using `strings` on the class files. Not necessarily an interesting thing to do though."
752,A,Prevent Swing GUI locking up during a background task I have a swing application which stores a list of objects. When the users clicks a button I want to perform two operations on each object in the list and then once that is complete graph the results in a JPanel. I've been trying SwingWorker Callable & Runnable to do the processing but no matter what I do while processing the list (which can take up to a few minutes as it is IO bound) the GUI is locked up. I have a feeling it's probably the way I'm calling the threads or something or could it be to do with the graphing function? That isn't threaded as it is very quick. I have to do the two processing stages in order too so what is the best way to ensure the second one has waited on the first? I've used join() and then while(x.isAlive()) { Thread.sleep(1000); } to try and ensure this but I'm worried this could be the cause of my problem too. I've been looking everywhere for some pointers but since I can't find any I'm sure I'm doing something stupid here. Agreed; show us the problematic code. It might help if you include some code showing how you're using SwingWorker. I can't really speak to the swing threading model but: I have to do the two processing stages in order too so what is the best way to ensure the second one has waited on the first? For this kind of functionality I'd suggest you create two worker threads and embed a JMS broker. Deliver work to the two threads by passing messages into JMS queues that they read from. Your GUI thread is free to examine the queues to determine when work is happening and represent the state of play in your UI.  The solution to my problem was a mixture of jjnguy and Bill K's answers so thanks very much for that guys. I needed to use threads within a SwingWorker like this: public class Worker extends SwingWorker<Void Void> { private List<Object> list; public YourClassSwingWorker(List<Object> theOriginalList){ list = theOriginalList; } @Override public List<Object> doInBackground() { Thread t = new Thread(new ProcessorThread(list)); t.start(); } @Override public void done() { // draw graph on GUI } } class ProcessorThread implements Runnable { //do lots of IO stuff Thread t2 = new Thread(new SecondProcess()); t2.start(); } This made sure all the work was being done by worker threads away from the GUI and also ensuring that the SwingWorker itself wasn't doing all of the work which might have been a problem. Whoa whoa whoa! Why are you spawning a thread from the SwingWorker? SwingWorkers (when started with the execute() method) are not run on the GUI thread so there should be no reason to create another thread here. I must've been doing it wrong initially because that was the only solution that worked for me  You are not returning the swing thread properly. I realize you are using callable/runnable but i'm guessing you are not doing it right (although you didn't post enough code to know for sure). The basic structure would be: swingMethod() { // Okay this is a button callback we now own the swing thread Thread t=new Thread(new ActuallyDoStuff()); t.start(); } public class ActuallyDoStuff() implements Runnable { public void run() { // this is where you actually do the work } } This is just off the top of my head but I'm guessing that you either aren't doing the thread.start and are instead calling the run method directly or you are doing something else in the first method that locks it up (like thread.join). Neither of these would free up the swing thread. The first method MUST return quickly the run() method can take as long as it wants. If you are doing a thread.join in the first method then the thread is NOT being returned to the system! Edit: (Second edit actually) I think to speak to the problem you are actually feeling--you might want to think more in terms of a model/view/controller system. The code you are writing is the controller (the view is generally considered to be the components on the screen--view/controller are usually very tightly bound). When your controller gets the event it should pass the work off to your model. The view is then out of the picture. It does not wait for the model it's just done. When your model is finished it needs to then tell the controller to do something else. It does this through one of the invoke methods. This transfers control back to the controller and you go on your merry way. If you think about it this way separating control and deliberately passing it back and forth doesn't feel so bulky and it's actually very common to do it this way.  The problem is your long running task is blocking the Thread that keeps the GUI responsive. What you will need to do is put the long running task on another thread. Some common ways of doing this are using Timers or a SwingWorker. The Java tutorials have lots of information regarding these things in their lesson in concurrency. To make sure the first task finishes before the second just put them both on the same thread. That way you won't have to worry about keeping two different threads timed correctly. Here is a sample implementation of a SwingWorkerFor your case: public class YourTaskSwingWorkerSwingWorker extends SwingWorker<List<Object> Void> { private List<Object> list public YourClassSwingWorker(List<Object> theOriginalList){ list = theOriginalList; } @Override public List<Object> doInBackground() { // Do the first opperation on the list // Do the second opperation on the list return list; } @Override public void done() { // Update the GUI with the updated list. } } To use this code when the event to modify the list is fired create a new SwingWorker and tell it to start. SwingUtilities.invokeLater() executes tasks on the event dispatch thread which will cause the same problem at an unspecified future time. Bad advice. @mmyers: I think you're thinking of protected void process( List chunks ) which is the signature for the method which processes intermediate data; void of course being the intermediate chunk type. I was too lazy to look up the Javadoc yesterday but I see now that the second type parameter is used only as a parameter to publish() and process(). I retract my first comment. I'm pretty sure the question mentioned threads and SwingWorker already. Also SwingUtilities.invokeLater() runs things on the GUI thread. Yeah I gave kinda' generic swing threading answer...kinda sucks OP here Yeah I've tried both of those suggestions already but I may not have implemented them correctly... I've been through the swing tutorial but it doesn't have much on swing worker at all at least not the info I'm after Have a look at my edit does it help? That should be public Void done() right? no Void is used as a return type if you want to update progress of the worker. We aren't using it here at all. (I don't think)  It sounds like the problem might be that you are waiting on the threads to finish from inside the GUI thread. Your GUI thread should not wait on these threads instead you should have the worker threads invoke some method on the GUI thread that sets a flag. When both flags are set then you know both threads finished and you can do the graph.
753,A,Small dot trailing cursor in Swing application There is a small dot that keeps trailing the cursor on a Swing application as I move the cursor about over the application frame. What is causing this? You're using Windows or something else? A remote desktop or VNC connection? Could you post a screenshot? I've seen this as well and have never found a solution (haven't looked real hard either). In my experience the dot is one pixel by one pixel and seems to be anchored near the lower right corner of the cursor - but the distance from the cursor seems to vary. I don't have an answer for you just contributing the circumstances I've seen. same thing is happening to me. anybody know what this dot on the cursor is? I keep getting the dot on login windows for Livejournal Facebook and various websites. I actually am getting it in the upper right of my cursor. It's pretty annoying. I've wondered if this is some sort of keylogger? Can it be an empty tooltip? Is the getTooltip() method implemented for the frame (or other component you are hovering over)? If you don't want the tooltip you should return null and not an empty String.
754,A,Easiest way to unit test SWT and Swing apps in a headless environment? I'm looking to unit test some SWT and Swing code for a project I'm working on and the tests run fine as long as I'm running them from eclipse. As soon as I run them in my hudson environment it fails since hudson runs the tests in headless mode. What's the best way of doing this? Open source solutions only please (since the project is open source). Using Swing I tend to organise things so that the component tree can be created without a Window at the top. Doing this allows you to simply create a JPanel in a unit test and use that as your top-level component. There are certain things you cannot test such as focus and any logic involved in the creation of the Frame for normal operation but the vast majority can be tested. You may want to look into the FEST library to make life easier whether you go headless or not it looks very good: http://fest.easytesting.org/swing/wiki/pmwiki.php  You could run Xvfb (X virtual framebuffer an X11 server that performs all graphical operations in memory) and this works fine. But there is another solution with Hudson's plugin for Xvnc. Simply install the plugin and check the checkbox in the job configuration screen: Hudson will then automatically start up a Xvnc session and set the DISPLAY environment variable to the appropriate value and then shut down the session when the build is complete. One advantage this has over the Xvfb method is that if you have multiple Swing/SWT projects building simultaneously each build has its own X session. This may not be an issue at all but it seems like a good idea. Before using this plugin you obviously have to have Xvnc installed. What's less obvious (although sensible) is that you must also set a password. You do this by running: $ vncpassword This has to be done as the same user Hudson runs as. +1 Works for me :-) If this works this is the neatest trick I've seen in years!  I don't know about SWT but with Swing you can't. Any instantiation of a Window (JFrame JDialog etc.) even if it is never set to visible will blow up in headless mode (on JDK 5). What we did was not run in headless mode and install Xvfb to provide the windowing without actually having a real windowing system installed.  Try the Abbot Java GUI Testing Framework and SWTbot. At least SWTbot should be able to do it. If neither offers a headless mode then this blog post might give you some ideas how to get rid of the UI for testing.  I was sure I posted this here before not sure what happened to it. Cacio allows for running Swing app headless. http://rkennke.wordpress.com/2011/10/17/cacio-for-ui-testing/
755,A,"Swing: How to read graphic information underneath a component? How could I ""read"" graphic information underneath a component (let's say as BufferedImage)? I want to make that component half-translucent (already done) and apply graphic effects on underlying stuff such as blur all elements under that component (but not the component itself). My approach is probable wrong: I try to get graphic information from Graphics2D instance given to me in the paint(...) method but it's empty right? Question: is your component top-level (i.e. do you want to know what's on the desktop under a JFrame) or do you just want to know about components that are layered underneath the component? If 1) then it's a simple matter to grab a screenshot with the java.awt.Robot method createScreenCapture(Rectangle); the Rectangle should be your window bounds in this case. If 2) then if you have a reference to the component underneath you can make use of the fact that paint(Graphics) doesn't care where the Graphics object came from. You can create a BufferedImage call createGraphics() (in case a Graphics2D is expected) and pass the result to the paint(Graphics) method of the component that you want to capture. Note that if the component is a container it will paint its children also; this may or may not be what you want. I need number 2). Thank you I'll try this!!!!"
756,A,Can I make Swing JButtons have smaller margins? I prefer buttons with minimal margins about as wide as their text caption. Is there a way to achieve that in a JButton in Swing? What I am seeing in practice now is that even if I try to use setMaximumSize() and similar it just ends up eating the text caption cutting it off to the right. But it does not reduce the margins. I believe setMargin is what you're looking for. myButton.setMargin(new Insets(0 0 0 0)); I concur. You beat me to it. yep this worked. Thanks a lot.
757,A,"Paint RTF/HTML strings into a custom swing component In my Swing application users enter styled text into a JTextPane which uses an RTFEditorKit (HTML is also a possibility). I then need to render many of these styled notes at specific coordinates in a custom component. I would think the View.paint method would be helpful here but I'm not able to create a usable View object. I have the following method: public View createView() throws IOException BadLocationException { RTFEditorKit kit = new RTFEditorKit(); final Document document = kit.createDefaultDocument(); kit.read(new ByteArrayInputStream(text.getBytes(""UTF-8"")) document 0); return kit.getViewFactory().create(document.getDefaultRootElement()); } This returns a javax.swing.text.BoxView with the following attributes: majorAxis = 1 majorSpan = 0 minorSpan = 0 majorReqValid = false minorReqValid = false majorRequest = null minorRequest = null majorAllocValid = false majorOffsets = {int[0]@2321} majorSpans = {int[0]@2322} minorAllocValid = false minorOffsets = {int[0]@2323} minorSpans = {int[0]@2324} tempRect = {java.awt.Rectangle@2325}""java.awt.Rectangle[x=0y=0width=0height=0]"" children = {javax.swing.text.View[1]@2326} nchildren = 0 left = 0 right = 0 top = 0 bottom = 0 childAlloc = {java.awt.Rectangle@2327}""java.awt.Rectangle[x=0y=0width=0height=0]"" parent = null elem = {javax.swing.text.DefaultStyledDocument$SectionElement@2328}""BranchElement(section) 035\n"" Note that parent = null and nchildren = 0. This means there's nothing really useful there. I can hack together something by calling JTextPane.getUI().paint but the text pane needs to be visible and this feels like the wrong way to do it. Is there any way to get a visual representation of the RTF content without rendering the actual JTextPane? Check out the ScreenImage class which allows you to create a BufferedImage of any Swing component. It should also work for Swing components that are not visible but yes you do have to do the rendering first. Thanks for the link this looks more geared towards taking a snapshot of a component which is already visible on-screen. I'd like to use a ""stamping"" approach to render blocks of styled text in various places on my custom component. I don't know what a stamping apprach is. Maybe I don't understand the question but idea is you can create an image from a non visible component. You can then make sub images to render on your custom component. The key is you don't need a visible component to create the image.  This code sort of works but seems less than ideal. Is there a better way to do it? Also what's a good way to render the text somewhere other than 00 on the graphics? private static void testRtfRender() { String s = ""{\\rtf1\\ansi\n"" + ""{\\fonttbl\\f0\\fnil Monospaced;\\f1\\fnil Lucida Grande;}\n"" + ""\n"" + ""\\f1\\fs26\\i0\\b0\\cf0 this is a \\b test\\b0\\par\n"" + ""}""; JTextPane pane = new JTextPane(); pane.setContentType(""text/rtf""); pane.setText(s); final Dimension preferredSize = pane.getUI().getPreferredSize(pane); int w = preferredSize.width; int h = preferredSize.height; pane.setSize(w h); pane.addNotify(); pane.validate(); // would be nice to use this box view instead of instantiating a UI // however unless you call setParent() on the view it's useless // What should the parent of a root element be? //BoxView view = (BoxView) pane.getEditorKit().getViewFactory().create(pane.getStyledDocument().getDefaultRootElement()); //view.paint(d new Rectangle(w h)); BufferedImage img = new BufferedImage(w h BufferedImage.TYPE_INT_ARGB); final Graphics2D d = img.createGraphics(); d.setClip(0 0 w h); // throws a NullPointerException if I leave this out pane.getUI().paint(d pane); d.dispose(); JOptionPane.showMessageDialog(null new JLabel(new ImageIcon(img))); }"
758,A,Override default behavior of TAB in JTextPane I am implementing a JTextPane-based text editor. Currently when I have a piece of selected text pressing the TAB key deletes the selected text. I would like to change this behavior such that TAB will indent the selected text. How to go about it? The other way is to redefine action for JTextArea component associated with TAB key. Take look at ActionMap.  Something along the line of: public void keyPressed ( KeyEvent event ) { switch ( event.getKeyCode ()) { case KeyEvent.VK_TAB : insertTabChar ( event.isShiftDown ()); event.consume (); break; case KeyEvent.VK_ENTER : snapshot (); insertNewLine (); event.consume (); break; } } You have some classes out there which do just that like this one. In particular the function  /** * manage keyboard tabbing implementing blockindent. * @param isUnindent */ private void insertTabChar ( boolean isUnindent ) { snapshot (); // snapshot current setup if ( isSelection ) { // blockindent might do just what you need. I had to do that before it looks right from here.
759,A,What JEditorPane event should I create a listener for? Suppose I have a JEditorPane in a JPanel. I want to be able to execute a callback each time the user enters/pastes text in the JEditorPane component. What type of listener should I create? One way of doing this is to create a custom Document and override the insertString method. For example: class CustomDocument extends PlainDocument { @Override public void insertString(int offset String string AttributeSet attributeSet) throws BadLocationException { // Do something here super.insertString(offset string attributeSet); } } This allows you to find out what is inserted and veto it if you wish (by not calling super.insertString). You can apply this document using this: editorPane.setDocument(new CustomDocument());  You can use a DocumentListener to be notified of any changes to the Document. Since I can't yet leave comments I would just like to say that it is better to use listeners when possible than it is to override a class like the example given above that overrides the PlainDocument. The listener approach will work on a JTextField JTextArea JEditorPane or JTextPane. By default an editor pane uses a HTMLDocument and a JTextPane uses a StyledDocument. So you are losing functionality by forcing the component to use a PlainDocument. If your concern is about editing the text before it is added to the Document then you should be using a DocumentFilter but how would I obtain the actual change? You get all the necessary information out of the `DocumentEvent` passed along with each listener method: here you will find the type of change as well as the offset into the document where the change started which together with the length of the change tell you the affected portion of the document. The event processing mechanism assures that these values are still correct (i.e. the document will not have changed even more) while the listener methods are executed.  In the DocumentListener interface you have methods like getOffset() and getLength() which you could use to retrieve the actual change. Hopes this helps you
760,A,"Is there a nice way to abstract the GUI so SWT or Swing can be used? I'm writing an application that has an SWT GUI currently but would like the end-users to be able to choose between SWT and Swing. I've experimented with abstracting the GUI details before at different layers in the program but have never been really satisfied with the results. Is there an agreed-upon or nice way to do this? Unfortunately I don't believe there's a toolkit-agnostic API or similar. So perhaps it's worth looking at the model-view-controller pattern. You need to abstract as much functionality away from the GUI into the controller such that the GUI components are thin and are dedicated to the particular windowing toolkit that you've chosen. This will allow you to slot in a Swing view in place of a GWT view (or vice versa) with the minimum of duplicated code. Note also that this makes testing a lot easier since as much as possible has been folded into the controller or model.  Is there an agreed-upon or nice way to abstract away GUI-specific code? The answer in short is no. The trouble using any particular GUI library is that each GUI comes with a set of basic design tenets that influence every use of the library. Unless one comes across two such libraries that agree in every particular on these design tenets there's no simple substitution of one GUI for another. There are a number of libraries that attempt to impose their design upon a bunch of disparate GUIs underneath each with their own design but these libraries require ferocious amounts of programming. As well the attempt to force one set of design paradigms into another is not usually completely successful. Examples of these libraries are QT wxWidgets and of course Java's base AWT. In the end you pretty much have to accept that you are going to choose a library and get stuck with it.  If your only goal is to let users choose between SWT or Swing drawing their UI then SWTSwing would have been an option. You could code in SWT and choose the SWT implementation jar during startup and adapt your classpath accordingly. SWTSwing is an implementation of the SWT API using Swing. It does the same thing that every native SWT implementation does: it provides the bridge to the underlying GUI API. Why do I write ""would have been""? Unfortunately the project seems dead stuck in an unfinished implementation of SWT-3.2 even though lots of the work seems to be done as you can see in the webstart demo. The sister project EoS (Eclipse on Swing) had even a running prototype. So I cannot really recommend using it even though I like the idea. I knew of this project and I'm sad that it's dead :(  Yes using SwingWT an implementation of Swing using SWT as the backend. Many people prefer the higher-level Swing APIs but the SWT uses native widgets. This library apparently gives you both. It also lets Swing applications run unmodified using an SWT backend (since your program is already written using SWT that doesn't help you but it will others). According to the description the implementation works using a custom class loader that replaces Swing calls with calls to SwingWT. It should be possible to let the user select whether to do this. The author doesn't seem to be actively developing it but he's still reviewing/applying patches received from others (most recently earlier in 2012)."
761,A,"How to check for key being held down on startup in Java I'm trying to write a resolution selection dialog that pops up when a program first starts up. To prevent boring the user I want to implement the fairly standard feature that you can turn off that dialog with a checkbox but get it back by holding down the alt key at startup. Unfortunately there is no obvious way to ask java whether a given key is currently being pressed. You can only register to be informed of new key presses via a KeyListener but that doesn't help if the keypress starts before the app launches. So it appears that you can do this but only for caps lock et al. Hence I've switched to using caps lock for this purpose. Not perfect but OK.  I don't know much about Java (mostly code in C#) but what about having a small loader program written in C or something that then launches your Java app with some parameters (like whether or not a certain key is down)? @Zarkonnen Does it have JVM bundled with the installer? If the answer is yes then the `KeyboadUtils.isPressed` would work on Windows Mac and Linux A difficult solution in that the program wants to run on Mac/Windows/Linux and that I don't know enough C.  public class LockingKeyDemo { static Toolkit kit = Toolkit.getDefaultToolkit(); public static void main(String[] args) { System.out.println(""caps lock2 = "" + kit.getLockingKeyState(KeyEvent.VK_CAPS_LOCK)); } } where should I import the Toolkit class from? has this solution overcome the problems described in this blog post? It kind of describes this method as unreliable but it's old.... http://weblogs.java.net/blog/2007/11/02/log-me-log-me-out  Well there are two types of key press detection: event based and polling. If you poll the keyboard for KEY_PRESSED on startup (through a loop with a sleep.thread(timeInMs) constantly checking if your key is down) then you can detect if it's already pressed on startup.  import java.awt.*; import java.awt.event.*; import javax.swing.JFrame; public class LockingKeyDemo { static Toolkit kit = Toolkit.getDefaultToolkit(); public static void main(String[] args) { JFrame frame = new JFrame(); frame.addWindowListener(new WindowAdapter() { public void windowActivated(WindowEvent e) { System.out.println(""caps lock1 = "" + kit.getLockingKeyState(KeyEvent.VK_CAPS_LOCK)); try { Robot robot = new Robot(); robot.keyPress(KeyEvent.VK_CONTROL); robot.keyRelease(KeyEvent.VK_CONTROL); } catch (Exception e2) { System.out.println(e2); } System.out.println(""caps lock2 = "" + kit.getLockingKeyState(KeyEvent.VK_CAPS_LOCK)); } }); frame.addKeyListener(new KeyAdapter() { public void keyReleased(KeyEvent e) { System.out.println(""caps lock3 = "" + kit.getLockingKeyState(KeyEvent.VK_CAPS_LOCK)); } }); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(200 200); frame.setLocationRelativeTo(null); frame.setVisible(true); } }  The original question seems to be not answered. The proposed method determines the locking key state like CapsLock ScrollLock etc. So it would not work for Alt pressed state. Consider the following code: com.sun.jna.platform.KeyboardUtils.isPressed(java.awt.event.KeyEvent.VK_ALT); The only problem is that this class is an internal Sun's JDK class and not likely to be available in any other JVM. Depend on your project it may or may not be acceptable. Internally it calls into User32.DLL on Windows: User32.INSTANCE.GetAsyncKeyState(...)"
762,A,"Why does my jscrollpane result in odd paint calls in java swing? I've got a routine that paints an insanely large graph inside a scroll pane. It's too big to paint before adding to the scrollpane - the menory requirements would be several gigs. Because of the size of the graph I'm rendering the chart within the paint method of the scrollpane's child. Which works out well however I'm noticing that every time a scrollbar is moved my paint routine is called twice - once with a clipping rect equal to the uncovered area scrolled to and a second time with the clipping rect equal to the viewport's dimensions. For example if my viewport is 245x195 & I scroll down by 3 pixels my paint routine gets called with g.getClipBounds() set as follows: java.awt.Rectangle[x=0y=195width=245height=3] java.awt.Rectangle[x=0y=3width=245height=195] ... because I render within the paint routine this is causing flicker (I do my calcs as fast as I can but there is a wee bit of a delay I guess). Questions: Does anyone know how to prevent the 2nd paint call? This is plain-jane JScrollPane stuff I'm doing here - I have a component I add it to the scrollpane I add the scrollpane to a parent component. You can see this behavior even in the first image scrolling demo @ the swing tutorial. If the answer to #1 is 'nope': can anyone think of a good way to deal with this ? Should I paint to some sort of image buffer track recent paint calls & copy the image where possible ? I cannot imagine this being much faster than re-rendering but any insight appreciated :-) I've ran into this issue in the .NET world. Double buffering should solve your problem. If you're rendering directly onto a surface that is shown on the screen you have no control over when the ""showing"" actually happens. What typically happens is: you start rendering the not-yet-finished image is being displayed on the screen you finish rendering and then that is finally shown on the screen. If you begin your rendering logic by clearing to a background color then this will appear like a flash. Double buffering prevents this because it's always displaying from a completed render. The worst that could happen is slight 'tearing' but that's only noticeable in quickly changing animations. Even if you only want to render part of a gigantic image you can still use this technique. Simply render what you need onto an off-screen surface (which is the size of the visible portion you want). And then when you're done draw the entire image onto your display surface in one fell swoop. Oh no worries. I actually didn't understand that what you were drawing was that huge until your comment. The only thing to do to make it quicker is to improve your drawing logic but there's always going to be some delay. Good luck. my only problem is that I cannot buffer the entire image - it's too huge. Which means I need to keep buffered sections as they're drawn check for coverage when I'm called to paint() & sew them together as needed. I guess I'll give it a shot but I'll hold off to see if anyone else has any ideas Well double buffering can still come into play. Simply render what you need to on an off-screen surface (the size of the visible portion). And then when you're done draw the entire image onto your display surface in one fell swoop. actually this works. Thanks :-) Scrolling is a wee bit slower but the flicker is gone. Sorry I didn't get it @ first - my stupidity was no match for your perseverance ;-)"
763,A,"How do I make a JLabel that has an imageIcon that is available to all methods and classes? I want to have an ImageIcon in a JLabel that i will be able to update from another method. But I can't figure out a way to be able to create a static JLabel(so as to be able to acccess it from another method) and also instaiate it as a Jlabel that contains an imageIcon - is there another method other than JLabel label = new JLabel(imgIcon) to create a label with an imageIcon? tried to use the setIcon method without the label being instatiated the way it is above but it gave a null pointer exception. Thanks in adavance for any help. Don't make the JLabel static - instead define it outside of other methods but still in your class. public class Test { private JLabel label = new JLabel(new ImageIcon(/*your icon*/)); } If you need to access it from another class create an accessor method: public JLabel getLabel() { return label; } but what do I do if I want access from both the same class and another class? That's what the getLabel() method is for. You'd have to create an instance of Test. I recommend www.java-made-easy.com it has the perfect tutorial for showing how to properly create a class and instances of the class for use outside of the class. If the label is created private can I access it form other methods in the same class if it was created outside of any method? Because I am getting an error that tells me that a non-static variable cannot be referenced froma static context? Does this mean tnhat even for within the same class I have to use the getlabel(0 method? If so how do I use the getlabel() method? do i need to create a label to call the getLabel method from ie label2 = test.getLabel()? or how do I get access to it to change the Icon in the label? thanks Don't make your methods static if you want access from other methods in the same class.  Only use static methods or objects in any class (like Clazz) when you want to access them without creating an object (like Clazz c = new Clazz();). For instance if I make a static method public static void staticMethod() {} and a regular method public void regularMethod() {} this is how I access them: public class Clazz //A class with methods { public void regularMethod() { //Do something local } public static void staticMethod() { //Do something static } } public class Main //The main class with the main method. { public static void main(String[] args) { Clazz.staticMethod(); Clazz c = new Clazz(); c.regularMethod(); } } Notice that I did not call Clazz.regularMethod(); because that is not possible. I did not call c.staticMethod(); because that is poor form even though it is possible. All in all try your best to NOT use static objects unless it (A) is absolutely necessary or (B) has to be accessed at any time from any context  I havent been able to get AlbertoPL way to work so I have make a short example program that brings up the same null pointer error when run if you just change the images to any jpg of ur own choice u will b able to see the problem and hopefully will be able to help me out. AlbertoPL what you are telling me probably works just I am not understanding it vey well. UI have also included the methods used to resize the bufferedImage and load the image incase the error is oming from there but the nullpointer says it is coming from the line picPanel.add(labelPicPanel); Thanks very much in advance for any help. the example code is public class test { static JPanel picPanel; static JLabel labelPicPanel = new JLabel(new ImageIcon(""C:/Documents and Settings/Admin/My Documents/My Pictures/pi.jpg"")); public static void test() { String ref = ""C:/temp/new00000001.jpg""; BufferedImage loadImg = loadImage(ref); ImageIcon imgIcon = new ImageIcon(loadImg); labelPicPanel.setIcon(imgIcon); picPanel.add(labelPicPanel); picPanel.setPreferredSize(new Dimension(1120 620)); JFrame frame = new JFrame(""Frame""); frame.add(picPanel); frame.pack(); frame.setVisible(true); } public static BufferedImage loadImage(String ref) { BufferedImage bimg = null; try { bimg = javax.imageio.ImageIO.read(new File(ref)); } catch (Exception e) { e.printStackTrace(); } BufferedImage bimg2 = resize(bimg1120620); return bimg2; } public static BufferedImage resize(BufferedImage img int newW int newH) { int w = img.getWidth(); int h = img.getHeight(); BufferedImage dimg = dimg = new BufferedImage(newW newH img.getType()); Graphics2D g = dimg.createGraphics(); g.setRenderingHint(RenderingHints.KEY_INTERPOLATION RenderingHints.VALUE_INTERPOLATION_BILINEAR); g.drawImage(img 0 0 newW newH 0 0 w h null); g.dispose(); return dimg; } public static void main(String args[]){ test(); } } Just realised I maybe shouldn't have posted this as an answer but didnt want to create a new question. Sorry but what is the proper protocol for this(for future reference?) Th ereason you have to use static everywhere is because you're calling the test method statically from your main method. If you instead do this: test myTest = new test(); and make a proper constructor then you won't have to have everything be static. ok that makes sense. What do u mean by a proper constructor? also do u think that will solve the problem of getting the nullpointer? R u able to place a BUfferedImage in to create a new ImageIcon because it inherits that ability from image? thanks. First of all the name of your class should start with an uppercase letter. Besides that the constructor for your class should be: public test() { /*your code*/ } notice how there is no return type. And yes you should be able to place a BufferedImage in. I don't exactly know where you are getting a null pointer."
764,A,Best Practices - Swing Database Access I'm a newbie to swing development. I have a swing app that needs to access data from a remote sql database. The users of the app are all located in our office. Is it bad practice to access the database directly from the swing app? Should I put database facing code into an rmi server? The question is vague. Are you asking if it's okay to use JDBC in your Swing action classes? Or are you asking if you should interpose another server running some other component between your swing app server and the database server? I'm asking if I should interpose another server running some other component between your swing app server and the database server. Not necessarily but you'll want to 'layer out' the data access code in your application to make it easier to do later. It will also tend to make the rest of the application more maintainable.  Do you have a plan for dealing with concurrent access to the same records in the database? It is something you will have to deal with so if not from within the code having all instances of the Swing application accessing the data via a central (i.e. your RMI server) location would make this much easier. No it's read only. The just tier your Swing application so that all your data access can be factored out later if you need to and stop there.
765,A,"Is there a ""Group Box"" equivalent in Java Swing? Trying to build a GUI application in Java/Swing. I'm mainly used to ""painting"" GUIs on the Windows side with tools like VB (or to be more precise Gupta SQLWindows... wonder how many people know what that is ;-)). I can't find an equivalent of a Group Box in Swing... With a group box you have a square box (usually with a title) around a couple of related widgets. One example is a group box around a few radio buttons (with the title explaining what the radio buttons are about e.g. Group Box entitled ""Sex"" with ""Male"" and ""Female"" radio buttons). I've searched around a bit... the only way I found was to add a sub-pane set the border on the sub-pane and then add all the widgets in the ""group"" to the sub-pane. Is there a more elegant way to do that? Perhaps you could explain what a group box is. I think he means the control group you see in many dialog boxes where you have a square around a bunch of widgets such as radio buttons for example. Others have already commetned about JPanel and using a TitledBorder that's fine. However when playing with Swing LayoutManagers you may find it annoying that components in different JPanels cannot align correctly (each panel has its own LayoutManager). For this reason it is a good practice (check ""JGoodies"" on the web for more details) in Swing GUIs to NOT use TitledBorders but rather separate groups of components in a JPanel by a JLabel followed by a horizontal JSeparator. Ref. ""First Aid for Swing"" FYI - your reference link is broken. Thanks for the remark the original web site was changed last year and I wasn't aware of it. Now I just fixed the link.  Create a JPanel and add your radiobuttons to it. Don't forget to set the layout of the JPanel to something appropriate. Then call panel.setBorder(BorderFactory.createTitledBorder(name));  Not AFAIK at least not with standard swing widgets. In VB you have a group widget which is essentially a panel + border. In Swing you have a JPanel which is the container widget and you create and set a border object on it only if you need one. One can argue that in a way that is more elegant since you don't pay for something you don't use (e.g. border)  I'm responding based on the Uri's comment . AFAIK  every JComponent can set a border for itself  so  you don't need a second panel . I want to have a border around a number of JComponents .. also having just one element in a group box is usually bad practice. You can add more than one component in a JPanel . I know .. I probably misunderstood your answer.  A Group box is just a set of 'logically grouped widgets'. This in the swing world is a JPanel. Add your widgets to a JPanel. Set its border type to 'Titled Border' and give the title same as the name of the VB6 'frame'. Voila. You have your group box.  Here's a quote from the JRadioButton javadocs since you brought up radio buttons. An implementation of a radio button -- an item that can be selected or deselected and which displays its state to the user. Used with a ButtonGroup object to create a group of buttons in which only one button at a time can be selected. (Create a ButtonGroup object and use its add method to include the JRadioButton objects in the group.) Note: The ButtonGroup object is a logical grouping -- not a physical grouping. To create a button panel you should still create a JPanel or similar container-object and add a Border to it to set it off from surrounding components. Thanks but as you correctly point out my main intent was the ""visual"" aspect."
766,A,"whether reading swing is worth it? i planning to read swing concept if it is worth reading please suggest some study material There are too many GUI toolkits for Java since the AWT debacle. Even Swing has been seriously downplayed by critics they have thier reasons though. But there are still lot of advantages of playing with Swing: Inherently Swing is slightly tough to use. So once you have done through swing you may probably get through any other technology smoothly. Swing has a good design: Ok not from usability point of view but still there is something really beautiful about Swing's design and approach to GUI programming. You will understand that when I tell you how many different toolkits we have integerated along with Swing we couldnt do the same for other GUI toolkits. Well I can assure that using Swing will improve your code-digging abilities. People who have suffered Swing would tell you :) Note: But all this only applies if you have enough time and a spare job :)  Its good to know won't hurt. As a Java programmer you might need to make small utility applications from time to time so why not make them a good GUI. Aside from that i would suggest a graphical IDE like Netbeans. You can use the Swing components and dig in the ""auto-generated"" code when you need to.  Swing is necessary to learn if you wish to make desktop applications with Java. Also it can't hurt to learn about it as that many of the techniques used in Swing are found in Design Patterns and other GUI toolkits. so its like  by learning swings i can have the good basic knowledge while working in other GUI toolkit right  From my experiences with Swing I think that it really depends on what you are planning on using it for. Swing was the first tool I used for designing GUI applications. I felt it was easy to use and there is very good documentation and tutorials all over the internet on Swing. After a certain period of time I came to realize the limitations in Swing and made a personal conclusion that Swing was a great tool for learning and for developing small desktop applications. Unfortunately these characteristics can only take you so far. I personally feel that Swing is limiting in that it is not a very powerful tool beyond windows and text boxes. If you are looking at doing something with the absolute most basic need of these features then yes you would use Swing. On the other hand if you plan on creating Powerful professional applications then swing might not be the tool for you to spend your time mastering. There are other tools out there that allow you to go beyond the limitations of Swing in regards functionality and efficiency. So once again it really depends what level you currently consider yourself as well as what you plan on doing in the future. For everyday ""play"" coding Swing is great but if you plan on doing anything more then research other tools first."
767,A,"Java - Statistics Symbols What's the best way to insert statistics symbols in a JLabel's text? For example the x-bar? I tried assigning the text field the following with no success: <html>x&#772; Thanks. Html codes will not work in Java. However you can use the unicode escape in Java Strings. For example: JLabel label = new JLabel(new String(""\u0304"")); Also here is a cool website for taking Unicode text and turning it into Java String leterals.  Well that's completely mal-formed HTML probably even for Swing (I think you would need the </html> at the end for it to work. But I would try to never go that road if you can help it as Swing's HTML support has many drawbacks and bugs. You can probably simply insert the appropriate character directly either directly in the source code if you're using Unicode or with the appropriate Unicode escape: ""x\u0304"" This should work actually. But it depends on font support and some fonts are pretty bad in positioning combining characters. But short of drawing it yourself it should be your best option."
768,A,"How would you make a frame visible if the mouse is inside it and invisible when it's not in Java? So if I was writing pseudo code: if(mouseInsideFrame==true) frame.setVisible(true); else frame.setVisible(false); What method would I use for the mouseInsideFrame in the if statement? Thanks If the frame is not visible the mouse can't be ""in"" the frame so can you give some more context about what you are trying to accomplish? I'm trying to create a java desktop application that holds desktop icons. The app will be a menu/panel that is invisible until you hover your cursor near the top of the screen at which point the menu full of desktop icons will drop down. To add new icons to the menu one must simply drag icons from the desktop into the menu and they should snap to grid. Right now I'm just trying to get the menu to appear when I mouseover the invisible frame. It might be to use the SystemTray - http://java.sun.com/developer/technicalArticles/J2SE/Desktop/javase6/systemtray/ - rather than doing some kind of disappearing / reappearing frame. This is now your 3rd posting on this topic. Keep your questions in one posting so everybody know what has already been suggested and people don't waste time repeating suggestions that have already been made. It wouldn't hurt to actually ""accept"" and answer once and a while since you've been given lots of valid suggestions that answer your questions. I came across a post on java.net that covers visibility options including this one using a private AWT API. public class TransparentFrame { private static final float OPAQUE = 1.0f; private static final float TRANSLUCENT = 0.1f; public static void main(String[] args) { final JFrame frame = new JFrame(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(600 400); frame.addMouseListener(new MouseAdapter() { @Override public void mouseEntered(MouseEvent e) { com.sun.awt.AWTUtilities.setWindowOpacity(frame OPAQUE); } @Override public void mouseExited(MouseEvent e) { com.sun.awt.AWTUtilities.setWindowOpacity(frame TRANSLUCENT); } }); frame.setVisible(true); } } This is OK for toy code but obviously I wouldn't use a private com.sun class for portable production code.  Normally you could use listeners. Specifically: frame.addMouseListener(new MouseListener() { public void mouseEntered(MouseEvent evt) { frame.setVisible(true); } public void mouseExited(MouseEvent evt) { frame.setVisible(false); } }); But the problem is that since your JFrame is not visible there is no way to listen to mouse events!!!! At least from what I know.... your second method must be a mouseExited(MouseEvent evt). Probably just a wrong cut & paste. Yes you're right! Sorry! :-)  Update: Same method as before but with more explicit step-by-step explanation. Other respondents wonder what you want to achieve with this and question the design behind an app that unexpectedly jumps up at the user. I guess it's a matter of how dead set you are to implement this functionality exactly as you described. The technique itself may be useful for other purposes too which is my main motivation for my new improved revision of this answer. As far as I know a frame that's not visible can't capture mouse events. So it won't know if the mouse is inside it or not. There's a loophole around this problem: If you make your frame visible but borderless and fully transparent it will be visible in the technical sense but invisible to the user for practical purposes. The borderless part is easy: setUndecorated(true). It would be great if JFrame had a method like setOpaque() or setTranslucent() where you could make it fully transparent but alas it doesn't. Another answer mentions a solution based on a Sun private class which does permit you to make the window transparent. This will work for current and probably near-future Sun JREs but is far from guaranteed to work with other and future JREs so I can't recommend it. Sun expliticly advises against using their private classes this way. There's an alternate somewhat hacky alternative: The frame is left fully visible but it displays the image of a screenshot of the screen behind it. Because this means we're effectively looking through the frame it's effectively invisible. This solution is described here: http://onjava.com/pub/a/onjava/excerpt/swinghks_hack41/index.html?CMP=OTC-FP2116136014 . The author and I both admit to this being a a bit clumsy; it also involves a lot more code than should be necessary. But it's based on standard Java coding and should be supported unchanged in many Java environments upward of about version 1.4 or so. The tip describes how to create a Component that displays the screen background. That's fine for when you want the frame to be invisible but what happens when you want it to be normally visible? The thing to do is to give the JFrame's ContentPane a CardLayout and add both the TransparentBackground component and your intended main visible component (likely a JPanel) to it. With that set up switching between ""invisible"" and visible involves simply: setUndecorated(false) // (true) cardLayout.last() // (first) This switching of course will be controlled by a MouseListener you can add to the JFrame. sounds unacceptable on many levels @medopal: Java is more an ""application"" language than a ""systems"" language thus a few things that *should* or at least *could* be simpler aren't. While my proposed solution looks a bit clumsy it will work. With that I believe I've offered the best answer so far. I regret that you were apparently unable to understand it.  Out of the top of my head there is a fairly easy way to get the position of the mouse on the screen (I think it has something to do with Toolkit). Now if you can combine that with a way to find out your frame's position on the screen (if you don't already know) you have your solution. I'm curious what you're trying to do though.  Given what you are trying to do I would say you need two frames (or perhaps just JPanels and frame that does a lot of changing. One is to capture the mouse moving over it (make it transparent undecorated or otherwise acceptably out of the way) and when the mouse moves over it show the new frame (or panel) and then hide that when the mouse moves out of it. The other answers here give you the basics on how to capture the mouse events and set the frame undecorated and transparent."
769,A,"How to force a component to grow in MigLayout in Java I have a component that is made up of various components such as a checkbox a slider and some buttons. i want to add this to a scrollpane and have the slider grow to fill all the remaining space. This is no problem as this code demonstrates :  public static void main(String[] args) { JFrame f = new JFrame(""Test""); JPanel c = new JPanel(new MigLayout( """" ""[]5[]10[grow]10[]0[]0[]0[]"" ""[]"" )); c.add(new JCheckBox("""")); c.add(new JLabel(""Name"")); c.add(new JSlider()); c.add(new JButton(""1"")); c.add(new JButton(""2"")); c.add(new JButton(""3"")); c.add(new JButton(""4"")); f.getContentPane().add(new JScrollPane(c)); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); f.setVisible(true); } If you run this and resize the frame the slider fills all the space. My problem lies in the fact that i want to add my component (the one with the slider) in another component that contains different instances of this one. So for instance it will contain 3 or 4 components with sliders one below the other. I thought this would work :  public static void main(String[] args) { JFrame f = new JFrame(""Test""); JPanel c = new JPanel(new MigLayout( """" ""[]5[]10[grow]10[]0[]0[]0[]"" ""[]"" )); c.add(new JCheckBox("""")); c.add(new JLabel(""Name"")); c.add(new JSlider()); c.add(new JButton(""1"")); c.add(new JButton(""2"")); c.add(new JButton(""3"")); c.add(new JButton(""4"")); JPanel a = new JPanel(new MigLayout(""wrap 1"")); a.add(c); f.getContentPane().add(new JScrollPane(a)); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); f.setVisible(true); } But it doesn't. Any thoughts as to why and how to fix it? That's weird...What mig version do you use and what java version? (also what OS?) When I cut and pasted that code the slider did _not_ grow. I had to add a `""growx""` constraint to it. Try changing the JPanel a declaration to: JPanel a = new JPanel(new MigLayout(""wrap 1"" ""[growfill]"")); Aha! Thanks... i need the ""fill"" parameter on both mig layouts but it works. :)"
770,A,Dependent columns in a JTable Hie! I have a JTable. Columns of this JTable are rendered by JComboBox. I would like to be able to change items of column 2 on the basis of values selected in column 1. For example if the user selects Microsoft in column 1 then in column 2 he/she can select ado wpf etc. Is it possible ? If it is possible than which events should be listened to do it ? Maybe you can base you on this code; table.getSelectionModel().addListSelectionListener( new ListSelectionListener() { public void valueChanged(ListSelectionEvent event) { int row = table.getSelectedRow(); int column = table.getSelectedColumn(); } } ); This is an intresting page: click  Just make your own TableCellEditor that preps the JComboBox's model on the call to getTableCellEditorComponent. Something like this: class MyEditor extends DefaultCellEditor{ public MyEditor() { super(new JComboBox()); } @Override public Component getTableCellEditorComponent(JTable table Object value boolean isSelected int row int column) { JComboBox combo = (JComboBox)editorComponent; Object column1Value = table.getValueAt(row column-1); Object[] options = ... create options based on other value combo.setModel(new DefaultComboBoxModel(options)); return super.getTableCellEditorComponent(table value isSelected row column); } }  What are you using as values in your TableModel? One solution would be to define a class say CategoryValue that represents a list of possible items and a selected item and use that; then listen for TableModelEvents and when a value in column 0 changes set the corresponding value in column 1. A simple example is below. First the TableModelListener: model.addTableModelListener(new TableModelListener() { @Override public void tableChanged(TableModelEvent e) { if (e.getColumn() == 0) { int firstRow = e.getFirstRow(); int lastRow = e.getLastRow(); for (int row = firstRow; row <= lastRow; row++) { // note <= not < CategoryValue parentValue = ((CategoryValue) model.getValueAt(row 0)); String parentSelection = parentValue.getSelection(); List<String> childCategories = getChildCategories(parentSelection); CategoryValue newChildValue = new CategoryValue(childCategories); model.setValueAt(newChildValue  row 1); } } } }); (Implementing getChildCategories(String) depends on where your data is coming from but it could be as simple as a Map<String List<String>>.) Next the value class: public class CategoryValue { private final String selection; private final List<String> categories; public CategoryValue(List<String> categories) { this(categories categories.get(0)); } public CategoryValue(List<String> categories String selection) { assert categories.contains(selection); this.categories = categories; this.selection = selection; } public String getSelection() { return selection; } public List<String> getCategories() { return categories; } @Override public String toString() { return selection; } } Finally a custom cell editor for the value class: public class CategoryCellEditor extends DefaultCellEditor { public CategoryCellEditor() { super(new JComboBox()); } static List<CategoryValue> allValues(List<String> categories) { List<CategoryValue> allValues = new ArrayList<CategoryValue>(); for (String value: categories) { allValues.add(new CategoryValue(categories value)); } return Collections.unmodifiableList(allValues); } @Override public Component getTableCellEditorComponent(JTable table Object value boolean isSelected int row int column) { CategoryValue categoryValue = (CategoryValue) value; List<String> categories = categoryValue.getCategories(); List<CategoryValue> allValues = CategoryValue.allValues(categories); ComboBoxModel cbModel = new DefaultComboBoxModel(allValues.toArray()); ((JComboBox)editorComponent).setModel(cbModel); return super.getTableCellEditorComponent(table categoryValue isSelected row column); } } All done with one event listener and a nice bonus is that that event listener doesn't care how the table is edited/updated or where the edits/updates come from. Edited to add: Alternatively represent each row of the table with some business object that captures all the choices made for a particular row and have the CellEditor get the available choices from the business object (using the row argument to getTableCellEditorComponent() to get the business object). The event mechanism would remain the same. This has the advantage that it's probably easier to read the selected values from the business object than to scrape the table.  The Combo Box Table Editor provides one possible solution for this. Thanks camickr ! That solved my problem.
771,A,How to show a textbox button etc in a Java Applet? How can I show common GUI elements such as : Textbox Button Radios/Dropdowns Labels etc in a java applet which would be run from a web browser? This applet tutorial starts from the beginning and covers GUI components. There are plenty of other applet tutorials around of course almost all of which will cover GUI work. What's the dev day and when is it? The London Stack Overflow DevDay October 28th. http://stackoverflow.carsonified.com/ thank you :). How long do you think it'll take to get 100k rep? take you i mean not me :p I'm hoping to reach 100K before the DevDay.  JApplet and JFrame both extend Container so you just set the layout and add the components like you would in any other Swing GUI.  Do you really need it to be an applet? Laying out a nice GUI with a java applet and swing is a pain and javascript has advanced dramatically in speed and compatibility since the early years. There are very few reasons an actual java applet is needed anymore. Yep it needs to be an applet for other reasons
772,A,"JTabbedPane: icon on left side of tabs hello i am using the nimbus look-and-feel and have a tabbedpane with an icon and text. now the icon appears on the right side of the text while i would like to have it on the left side. also i would like to add some spacing between the icon and the text. thanks! You need to set the tab component yourself; which governs how the tab title is rendered. // Create tabbed pane and add tabs. JTabbedPane tabbedPane = ... // Create bespoke component for rendering the tab. JLabel lbl = new JLabel(""Hello World""); Icon icon = new ImageIcon(getClass().getResource(""/foo/bar/hello.jpg"")); lbl.setIcon(icon); // Add some spacing between text and icon and position text to the RHS. lbl.setIconTextGap(5); lbl.setHorizontalTextPosition(SwingConstants.RIGHT); // Assign bespoke tab component for first tab. tabbedPane.setTabComponentAt(0 lbl); Obviously you could encapsulate this in a utility method: private void addTab(JTabbedPane tabbedPane Component tab String title Icon icon) { tabbedPane.add(tab); JLabel lbl = ... // Create bespoke label for rendering tab title. tabbedPane.setTabComponentAt(tabbedPane.getTabCount() - 1 lbl); } i was using this code to add (componentstringicon and tooltip) to the tab pane.addTab(""Name of Tab"" new ImageIcon(""resources\\1.png"") mainPanel"" tooltip text""); now i want the same (the text to appear on right and icon on left) i tried the same u specified in ur comment above ...and i got exception in my code ...please help @Gagan93: Please can you post this as a separate question; without seeing the exception I'm not sure I can help. ok i wasn't posting in fear of getting downvoted i m posting a different question within 2 minues with my problem...please provide a solution"
773,A,"Listening to all JInternalFrame events - Java I'm trying to internationalise a Java applet and with that support scripts which are written from right to left. I want to set up component orientations for all java components added to the view automatically. My solution so far has to listen to all AWTEvent's using the windows mask: c.getToolkit().addAWTEventListener(listener AWTEvent.WINDOW_EVENT_MASK); ...and then setting the c/o on each window added as well as adding component listeners to set c/o on any components added to the window at a later point. My issue is that JInternalFrames are not handled by this solution I want to be able to add another listener for these events much like I have done for windows. Any ideas? Or alternatively are there any better approaches to handling script direction for all components in an applet? Do you have a handle on all those JInternalFrames? If so try the internal frame listener. http://java.sun.com/javase/6/docs/api/javax/swing/event/InternalFrameListener.html It notes that it's the analogue to the AWT WindowListener. Thanks - I do kind of but would rather not since there are 83 usages when doing a quick search...I would rather just do it all in one place.  Add a ContainerListener to the JDesktopPane. As a component is added to the desktop you can change its orientation. I already had this but thought it wasn't working...I now realise it was another issue that was causing problems. Thanks anyway.  AWTEventListener on the current Toolkit will only give you events coming from the toolkit. Generally events generated by lightweight components will have been caused by mouse or key events. Asking for all of something in a process is usually a very bad sign. A low-level piece of code is making policy for the whole program. A much better approach is to add listeners near to where you create the component before it is ""realised"". This is repeated code but then you probably already have repeated code. So factor out into a method. Then you have only one place to update unless you have any cases where it doesn't apply which would have broken the global approach."
774,A,"How do I work with the Card Layout in the NetBeans GUI builder? Does anyone know how to work with the Card Layout in the NetBeans GUI builder tool? I want to show panels as per the JRadioButton selection so I want to lay this out using the Card Layout. card.next(yourPanel); will loop through all the components in your mainpanel then come to first one. To show a component with your own desire try following (think if there are 5 components and you are on the 2 and want to show first then you have to go through rest of all in the Vincent Ramdhanie's example JRL's answer is good according to that gives a quick jump to one you want but here is another way. import javax.swing.JLabel; import javax.swing.JPanel; public class myJFrame extends javax.swing.JFrame { private JPanel panel1 panel2; /** * Creates new form myJFrame */ public myJFrame() { initComponents(); panel1=new JPanel(); panel2=new JPanel(); JLabel lb1=new JLabel(""This is panel 1""); JLabel lb2=new JLabel(""This is panel 2""); panel1.add(lb1); panel2.add(lb2); //make more if you want // contentPanel.add(panel1);//show any of the panel first } private void initComponents() { jPanel1 = new javax.swing.JPanel(); buttonPanel1 = new javax.swing.JButton(); buttonPanel2 = new javax.swing.JButton(); contentPanel = new javax.swing.JPanel(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); buttonPanel1.setText(""Panel 1""); buttonPanel1.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { buttonPanel1ActionPerformed(evt); } }); buttonPanel2.setText(""Panel 2""); buttonPanel2.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { buttonPanel2ActionPerformed(evt); } }); .... } private void buttonPanel2ActionPerformed(java.awt.event.ActionEvent evt) { contentPanel.removeAll(); contentPanel.add(panel2); contentPanel.repaint(); contentPanel.revalidate(); } private void buttonPanel1ActionPerformed(java.awt.event.ActionEvent evt) { contentPanel.removeAll(); contentPanel.add(panel1); contentPanel.repaint(); contentPanel.revalidate(); } /** * @param args the command line arguments */ public static void main(String args[]) { /* * Create and display the form */ java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new myJFrame().setVisible(true); } }); } private javax.swing.JButton buttonPanel1; private javax.swing.JButton buttonPanel2; private javax.swing.JPanel contentPanel; private javax.swing.JPanel jPanel1; } This way is used when you have a tree and show a panel or component on a tree selection. It shows directly that component. On the tree add a value change listener and get the selection item and show appropriate panel.  The Sun tutorial seems a good place to start to learn about Card Layouts. Concerning NetBeans per se simply assign the card layout to the component you wish to assign to (example a JPanel) give it a name and then for the JPanel child components (other JPanels for example) specify their cardName property. To switch from one to another you code it in an event. Hi JRL .. i know how to work with card layout as independent ..but here i want to know from Netbeans GUI builder ..  Here is a very simple tutorial that might start you off in the right direction. I hope it is helpful. I was looking for exactly the same thing as mentinoned by Vincent Ramdhanie. But could you just update your blog post wrt to latest netbeans ? OR can you just tell regarding that set action ? The tutorial needs an update... thanks Vincent Ramdhanie  this is what i expect .."
775,A,Getting the value from a Swing component from outside the EDT My current code looks like this: final String[] value = new String[1]; SwingUtilities.invokeAndWait(new Runnable() { public void run() { value[0] = textArea.getText(); } }); The use of a final array seems like a bit of a hack. Is there a more elegant solution? I've done a lot of searching but I don't seem to be able to find anything to do this which surprises me. Although I keep coming across SwingWorker but I'm not sure that's suitable in this case? I'm assuming that JTextArea.getText() isn't thread-safe. Thanks. I find that in 99% of my Swing code that I'm often accessing a JTextArea in response to a user action (the user has typed clicked a button closed a window etc). All of these events are handled through event listeners which are always executed on the EDT. Can you provide more detail in your use case? UPDATE BASED ON USE CASE: Can the user change the text after the server has been started? If yes then you can use the listener style mentioned previously. Make sure to be careful with your concurrency.If the user can't change the text pass the text to the server thread in response to the button click (which will be on the EDT) and disable the text box. LAST UPDATE: If the client connections are persistent and the server continues to send updates you can use the listener model. If not two copies of the data might be redundant. Either way I think you'll end up having more threading work (unless you use selectors) on yours hands than worrying about copying one data value. I think you've got a plethora of info now good luck. I want to be able to get the contents of the text area using a socket connection. But yes you're right—I can just copy the contents to a variable whenever the text area is changed and fetch from there. Doesn't make sense to me to keep two copies of the data. I think your original solution is simpler. We could probably still provide a better answer with more details. Assuming this is some sort of client-server setup is one side polling the other to get the text? What is the sequence of events? Textbox button. Clicking button starts server (new thread). Client connects server responds with contents of textbox. The user can change the text after the server has started. When you refer to 'listener style' do you mean listening for changes and keeping a copy of the data? I'm inclined to agree with camickr.  All problems can be solved by adding another layer of indirection (except when you have too many layers :P). public class TextSaver implements Runnable { private final JTextArea textArea; private final ObjectToSaveText saveHere; public TextSaver(JTextArea textArea ObjectToSaveText saveHere) { this.textArea = textArea; this.saveHere = saveHere; } @Override public void run() { saveHere.save(textArea.getText()); } } I'm not going to provide the code for ObjectToSaveText but you get the idea. Then your SwingUtilties call just becomes: SwingUtilities.invokeAndWait(new TextSaver(textArea saveHere)); You can retrieve the saved text from your saveHere object. Ah so basically just storing the value into an object property rather than a local variable? That should do the trick :) So up vote me then please?? :D (it's my first answered question cmon) And yes it is probably a more elegant solution because you abstract out task of saving the text out to another class...
776,A,Remoting from a Swing app to GWT server To put it simple I've written a JSE Swing app that needs to talk to a GWT server I've written earlier. I absolutely love the way GWT does remoting between it's javascript and server sides and wish I could utilize this mechanism. Has anyone managed to use GWT-RPC this way? Should I just go Restlet instead? If you are doing Java-to-Java communication RMI would be simpler and more expedient. Serializing data to/from some XML or URL-based format doesn't add a lot of value. With EJB3 it is dead simple to deploy remote objects and to call them. You can then turn those EJBs into web services if you need to later but for Java-to-Java I can't think of a good reason to not use some sort of RMI-based communication. RMI does not work at the moment on AppEngine. I'm not sure if Google will fix that
777,A,"JFrame in a Java desktop application I am developing a desktop Java application with GUI implemented through Swing. I have made a JFrame and have added three buttons on it - Add Edit Delete. Now I want that whenever a user clicks on any of the button the content specific to that button appears besides those three buttons. So how to implement this? Should I need to add a JPanel besides those three buttons and then add the content specific to the button to that JPanel? So far I have taken a JFrame and have added 3 buttons on it. That's it. For the Add button I want to add some buttons and textfields to add information to the database. For the Delete button I want to add some buttons to find records in the database based on the information entered through the user in the textfield that appears when the user clicks on the Delete button. Similar type of content for Edit button. Can you post the code (simplified if need be) of what you've got so far? What is ""the content"" though? A string? More controls? A few more details would be helpful. Either of Chad's or Alex's answers would be fine. You will probably need to call a combination of revalidate() and repaint() on the panel that you've changed as in the past I've noticed Swing doesn't always like panels being swapped out. Also have you considered using a JTabbedPane instead of manually coding the interaction with the add/edit/delete buttons? CardLayout is the correct answer - no revalidate()s or repaint()s needed if you choose this. In CardLayout don't you always ""flick"" between cards rather than reference them by ID? In that case with only 3 cards it's probably best but what if you've got 10 or 20 to flick through? Maybe not a general case solution. Sorry just read the CardLayout API properly - the constraints object can be used for ""fast random access"". So yeah CardLayout wins I guess.  I was using a JFrame to add all buttons and make a new JFrame for a new window and hide a previous one. gven way are better. I will do that now.  I haven't done a lot of Java programming but I think using 2-3 different JPanel and make visible the one you need depending on the button that was clicked would do the trick. I'm not sure if this is the right approach though.  So how to implement this. Should I need to add a JPanel besides those three buttons and then add the content specific to the button to that JPane That would be fine. When you push the button you can call JPanel.removeAll() to remove all the controls currently in the control and then just do the layout again specific to whatever button you pushed. If you have custom swing controls just add your custom control the JPanel using a BorderLayout and putting in the center. Another option would be to use a CardLayout and flipping between the cards when a user presses one of the buttons. If the layouts for the buttons never change that would probably be a better way to do it. Obviously if the content changes between button presses you'll need to redo the layout each time. CardLayout is a good approach here."
778,A,"JSpinner editor locale I'm creating a JSpinner and setting a NumberEditor with a custom format. But no matter what I do the format uses ""."" instead of """" not according to my locale (pt_BR). priceSpinner = new JSpinner(); priceSpinner.setEditor(new JSpinner.NumberEditor(priceSpinner ""0.00"")); Is it possible to use """" instead of ""."" as a decimal separator? By specifying a custom format pattern you are telling the JRE to ignore your locale and use that specific format. If you are simply after a spinner for numbers to two decimal places use setModel() instead of setEditor() which will create a NumberEditor for you:  JSpinner priceSpinner = new JSpinner(); priceSpinner.setModel(new SpinnerNumberModel(0.00 0.00 100.00 0.01)); If you absolutely must use your own format pattern you can adjust the decimal format symbols for that pattern after you've created it:  JSpinner priceSpinner = new JSpinner(); JSpinner.NumberEditor editor = new JSpinner.NumberEditor(priceSpinner ""0.00""); DecimalFormat format = editor.getFormat(); //better to use Locale.getDefault() here if your locale is already pt_BR Locale myLocale = new Locale(""pt"" ""BR""); format.setDecimalFormatSymbols(new DecimalFormatSymbols(myLocale)); priceSpinner.setEditor(editor); Thanks it worked. I really need the custom pattern because I want ""100"" instead of ""1""."
779,A,What event would I need to be able to tell that the mouse was moved over a JMenuItem? I'd like to handle the case where the mouse goes over any of the JMenuItems. I don't need the user to click one of the JMenuItems; simply to move the mouse over any of them. Basically he has to click the JMenuBar to show the menus but he doesn't have to click any menu item. I wanted to use an actionPerformed listener on the JMenuBar - since the menu items and submenus only appear once the user clicks the JMenuBar - but that doesn't seem to be possible unless I did something wrong. Implement a MouseListener and add it to the JMenuItems. Then you can catch when the mouse enters and leaves each JMenuItem. Specifically mouseEntered and mouseExited are the methods you need to implement.  Already asked? I want to perform some action when a mouse is over JMenuItem. What listener should I use?
780,A,"Difficulty removing all components from a Jpanel G'day all I am coding a main menu for a project. The menu displays properly. I have also set up ActionListeners for the three buttons on the menu. What I wish to do is reuse the JPanel for a new set of radio buttons when the user chooses ""Start a New Game"". However coding ActionPerformed to remove the existing components from the JPanel has me stumped. I know removeAll is somehow important but unfortunately NetBeans informs me I cannot call it on my mainMenu JPanel object within ActionPerformed. So i have commented it out in my code below but left it in so you can see what I am trying to do. Your thoughts or hints are appreciated. Here is my main code: public class Main { public static void main(String[] args) { MainMenu menu = new MainMenu(); menu.pack(); menu.setVisible(true); } } Here is my mainMenu code: import java.awt.*; import java.awt.event.*; import javax.swing.*; public class MainMenu extends JFrame implements ActionListener { JButton startNewGame = new JButton(""Start a New Game""); JButton loadOldGame = new JButton(""Load an Old Game""); JButton seeInstructions = new JButton(""Instructions""); public MainMenu() { super(""RPG Main Menu""); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JPanel mainMenu = new JPanel(); mainMenu.setLayout(new FlowLayout()); startNewGame.setMnemonic('n'); loadOldGame.setMnemonic('l'); seeInstructions.setMnemonic('i'); startNewGame.addActionListener(this); loadOldGame.addActionListener(this); seeInstructions.addActionListener(this); mainMenu.add(startNewGame); mainMenu.add(loadOldGame); mainMenu.add(seeInstructions); setContentPane(mainMenu); } public void actionPerformed(ActionEvent evt) { Object source = evt.getSource(); if (source == startNewGame) { // StartNewGame code goes here // mainMenu.removeAll(); } if (source == loadOldGame) { // LoadOldGame code goes here } if (source == seeInstructions) { // Quit code goes here } } } Avoid attempting to ""reuse"" stuff. Computers are quite capable of tidying up. Concentrate on making you code clear. So instead of attempting to tidy up the panel simply replace it with a new one. Generally a better way to write listeners is as anonymous inner classes. Code within these will have access to final variables in the enclosing scope and to members of the enclosing class. So if you make mainMenu final and you ActionListeners anonymous inner classes your code should at least compile. Also don't attempt to ""reuse"" classes. Try to make each class do one sensible thing and avoid inheritance (of implementation). There is almost never any need to extend JFrame so don't do that. Create an ActionListener for each action rather than attempting to determine the event source. Also note you should always use Swing components on the AWT Event Dispatch Thread. Change the main method to add boilerplate something like: public static void main(final String[] args) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { runEDT(); }}); }  The problem is that the actionPerformed method is trying to call the JPanel mainMenu which is out of scope i.e. the mainMenu variable is not visible from the actionPerformed method. One way to get around this is to have the JPanel mainMenu declaration in the class itself and make it an instance field which is accessible to all instance methods of the class. For example: public class MainMenu extends JFrame implements ActionListener { ... JPanel mainMenu; public MainMenu() { ... mainMenu = new JPanel(); ... } public void actionPerformed(ActionEvent e) { ... mainMenu.removeAll(); } }  Consider using a CardLayout instead which manages two or more components (usually JPanel instances) that share the same display space. That way you don't have to fiddle with adding and removing components at runtime. Thanks Zach. I will consider CardLayout.  You don't have a reference to mainMenu actionPerformed use. If you declare mainMenu with the buttons. It would work.  You need mainMenu to be a member variable:  public class MainMenu extends JFrame implements ActionListener { JButton startNewGame = new JButton(""Start a New Game""); JButton loadOldGame = new JButton(""Load an Old Game""); JButton seeInstructions = new JButton(""Instructions""); JPanel mainMenu = new JPanel(); Why do you feel the need to re-use this object?"
781,A,"Swing component prints text differently than it displays it I am printing a Swing component that contains text. The Swing component renders the text just fine on the screen but when I print it (to a .tif file) the characters are all smashed together. Why is this? Run this code to see what I mean: import javax.swing.*; import javax.swing.text.MutableAttributeSet; import javax.swing.text.SimpleAttributeSet; import javax.swing.text.StyleConstants; import javax.swing.text.StyledDocument; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.print.PageFormat; import java.awt.print.Printable; import java.awt.print.PrinterException; import java.awt.print.PrinterJob; public final class PrintingDemo2 implements Printable { private final JTextPane textPane; private static final String WORDS = ""GOOD MORNING\u00AE AMERICA""; private static final String TEXT = WORDS + '\n' + WORDS + '\n' + WORDS + '\n' + WORDS + '\n' + WORDS + '\n' + WORDS; public static void main(String[] args) { new PrintingDemo2(); } public PrintingDemo2() { textPane = new JTextPane(); textPane.setText(TEXT); final StyledDocument document = textPane.getStyledDocument(); String[] fontFamilies = new String[]{""Tahoma"" ""SimSum"" ""MS Mincho"" ""Batang"" ""Arial"" ""Times New Roman""}; for (int i = 0; i < fontFamilies.length; i++) { final MutableAttributeSet attributeSet = new SimpleAttributeSet(); StyleConstants.setFontFamily(attributeSet fontFamilies[i]); StyleConstants.setFontSize(attributeSet 14); document.setParagraphAttributes(i * 22 21 attributeSet true); } final AbstractButton printContextButton = new JButton(""Print Context""); printContextButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { final PrinterJob job = PrinterJob.getPrinterJob(); job.setPrintable(PrintingDemo2.this); try { job.print(); } catch (PrinterException ex) { throw new RuntimeException(""Printing Failed."" ex); } } }); final JFrame frame = new JFrame(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); final Container contentPane = frame.getContentPane(); contentPane.setLayout(new BoxLayout(contentPane BoxLayout.Y_AXIS)); contentPane.add(printContextButton); contentPane.add(new JScrollPane(textPane)); frame.setSize(400 200); SwingUtilities.invokeLater(new Runnable() { public void run() { frame.setVisible(true); } }); } public int print(Graphics graphics PageFormat pageFormat int pageIndex) throws PrinterException { if (pageIndex >= 1) return Printable.NO_SUCH_PAGE; RepaintManager mgr = RepaintManager.currentManager(textPane); mgr.setDoubleBufferingEnabled(false); final Graphics2D graphics2D = (Graphics2D) graphics; graphics2D.translate(pageFormat.getImageableX() pageFormat.getImageableY()); textPane.paint(graphics); mgr.setDoubleBufferingEnabled(true); return Printable.PAGE_EXISTS; } } You could try rasterizing it (painting it to a BufferedImage at 300dpi) and then printing that image. Hacky and bad for performance (huge rasterized file sent to printer instead of vector data) but at least you won't have font problems. To rasterize it create a BufferedImage that is 4.17x (300/72) the size of your on-screen panel and scale its graphics object be the same abount and then paint the panel onto the buffered image's Graphics2D object. Disclaimer: this isn't elegant and I know it. If someone knows how to convince every make and model of printer to receive fonts from a Java printing process please chime in!  Check that the printed font is the same one you're seeing in the screen form. If the printer is substituting a font it probably kerns and hints differently than the screen font. To start with try trimming it down to only one font. There's a lot of moving parts there. Update Okay I just tried it and it seems to work fine printing to a LaserJet 1300 from Mac OS/X 10.5.6. I'd try a different printing device; I'm betting that it's happening after Java s done with the data. I just did and the output on my physical printer looks just fine. I'm actually printing it to a .tif file not to a real printer. Did you try running the code?"
782,A,"JTextField and \r\n problems Part of an app I am working on includes a log file viewer with a find text function which calls a pattern matcher on JTextField#getText() like so: Matcher m = somePattern.matcher(textField.getText()); m.find(startPosn); System.out.println(""startPosn: "" + m.start()); System.out.println(""endPosn: "" + m.end()); where textField is a JTextField and startPosn is set to the current caret position of the text field However the start and end positions returned by this return incorrect start and end caret positions only in Windows. Both the start and end positions are X more than they should be where X = the number of times a new line is encountered in textField up to startPosn. As this does not appear in Linux I think it may be to do with a difference in the way in which new lines (\r\n and \n) are handled. Am I doing something wrong; and how do I work arounhd this? Impl. solution: Modified using example in TFA linked by camickr. Matcher m = somePattern.matcher(textField.getDocument().getText(0 textField.getDocument().getLength())); m.find(startPosn); System.out.println(""startPosn: "" + m.start()); System.out.println(""endPosn: "" + m.end()); Note: only first line changed. This was able to give me the right output in both Linux and Windows. I think it may be to do with a difference in the way in which new lines (\r\n and \n) are handled. Yes that is a problem in Windows. But I doubt that you will have a problem with a JTextField since they don't contain new lines strings. I suggest you read Text and New Lines which will explain how to handle this for JTextArea and JTextPane. If you need more help post your SSCCE that shows the problem. Thank you. This is what I was lookign for. See my impl. solution (edit).  You may use something like this: String text = textField.getText(); text.replaceAll(System.getProperty(""line.separator"") ""\n""); Then do your stuff. In the above code you can replace ""\n"" with something that suits your need. I actually want to avoid using a replace function before doing the pattern match. However if all else fails I guess this'll be an OK workaround. Instead of replace why not just trim()? No I think trim wont work. Because trim will remove whitespaces only from the very begining and very end. What if the whitespaces lie in between!!:) @bguiz don't i deserve an upvote;) Can you comment on why you want to avoid using replaceAll? I wanted to avoid it because 1) There may already be an overlooked API that does it; 2) If 1 is true I am duplicating code possbily introducing errors. As it turns out 1 is true see camickr's answer and my implemented soln. there you go Suraj +1 for you"
783,A,Adding a watermark to a JTextArea Is they a way of adding a watermark to a JTextArea? I doubt the suggestion given above will work. A JTextArea is opaque so the text will paint over top of the image. So at the very least you will need to make the text area non-opague and you will then need to play with the background colors of the viewport and/or scrollpane. If you want a reusable solution try creating an ImageBorder. The order of painting is: a) paintComponent b) paintBorder c) paintChildren So if you add the border to the text area it will paint on top of the text in a fixed location. Or if you add the border to the viewport it will paint below the text is a floating location. you can just setOpaque(false) and that solves that little problem.  You may also consider using JXLayer which can create quite complex visual effects With Java7 you get access to [JLayer](http://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html) which is based on the project mentioned by Dmitry. Also the above [link](https://java.net/projects/jxlayer/) is broken.  I suspect that you'd need to subclass JTextArea and override the paintComponent() method drawing your background image first and calling super.paintComponent() to render the text: public void paintComponent (Graphics g) { g.drawImage(watermark 0 0 this); super.paintComponent(g); } edit: as pointed out by camickr a JTextArea is opaque so your subclass will need to change this by calling setOpaque(false). You may also want to use alpha channel to compose your image with what will be painted by super() Most watermarks are drawn OVER the content. If you want to do this call super.paintComponent(g) first and then draw your semitransparent watermark image (or text) over it. You can either chose to have a transparent image or work with alpha composites to get the transparency effect. Also you may want to tile your watermark instead of just painting it on the upper left corner. I'd suggest you make a reusable Watermark container that paints the watermark over its content so you are free to embed the JTextArea (watermarks scroll with the text) or JScrolledPane (watermark stays text scrolls)
784,A,"Getting the removed text from a Java text component A JTextComponent allows you to add a DocumentListener to its Document which will tell you when text was added or removed and the offset and length of the change. It will not however tell you what the text of the change was. This is not much of a problem for text addition as you can use the offset and the length to find the added text. However you can't use it to find the deleted text as the text is already gone. Has anyone run into this problem before? How can you get the string that was deleted from a document? store the original version of the text in a property where you can still do the ""offset-length-trick"" to get the removed string. should do fine  Install a DocumentFilter into the AbstractDocument. (BTW: In Swing it's usually best to go straight to the model (in this case document).)  Every time text is added store the document in memory. Every time text is removed compare the document to what was last stored to determine what was removed. exactly what I suggested - just a bit slower than you ;-)"
785,A,"Getting java.lang.ClassCastException: javax.swing.KeyStroke when creating a JSplitPane I'm getting a random unreproducible Error when initializing a JSplitPane in with JDK 1.5.0_08. Note that this does not occur every time but about 80% of the time: Exception in thread ""AWT-EventQueue-0"" java.lang.ClassCastException: javax.swing.KeyStroke at java.util.TreeMap.compare(TreeMap.java:1093) at java.util.TreeMap.put(TreeMap.java:465) at java.util.TreeSet.add(TreeSet.java:210) at javax.swing.plaf.basic.BasicSplitPaneUI.installDefaults(BasicSplitPaneUI.java:364) at javax.swing.plaf.basic.BasicSplitPaneUI.installUI(BasicSplitPaneUI.java:300) at javax.swing.JComponent.setUI(JComponent.java:652) at javax.swing.JSplitPane.setUI(JSplitPane.java:350) at javax.swing.JSplitPane.updateUI(JSplitPane.java:378) at javax.swing.JSplitPane.<init>(JSplitPane.java:332) at javax.swing.JSplitPane.<init>(JSplitPane.java:287) ... Thoughts? I've tried cleaning and rebuilding my project so as to minimize the probability of corrupted class files. Edit #1 See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6434148 - seems to be a JDK bug. Any known workarounds? None are listed on the bug entry page. After doing some Googling on bugs.sun.com this looks like this might be a JDK bug that was only fixed in JDK 6. See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6434148  Same exception had got thrown when i had upgraded java verion and db visualizer dint support jre7. and since Support for Java 7 was introduced in DbVisualizer 8.0 for Windows and Linux/UNIX. Support for Java 7 on Mac OS X was introduced in DbVisualizer 9.1. So Solution that worked for me : Windows/Unix/Linux: In the DbVisualizer installation directory there is an .install4j directory In this directory create a file named pref_jre.cfg if it doesn't already exist Open the file in a text editor Add the complete path to the root directory for the Java installation you want to use. Example: C:\Program Files\Java\jre7"
786,A,"Top tips for designing GUIs? A while back I read (before I lost it) a great book called GUI Bloopers which was full of examples of bad GUI design but also full of useful tidbits like Don't call something a Dialog one minute and a Popup the next. What top tips would you give for designing/documenting a GUI? It would be particularly useful to hear about widgets you designed to cram readable information into as little screen real-estate as possible. I'm going to roll this off with one of my own: avoid trees (e.g. Swing's JTree) unless you really can't avoid it or have a unbounded hierarchy of stuff. I have found that users don't find them intuitive and they are hard to navigate and filter. PS. I think this question differs from this one as I'm asking for generalist tips **Make the common case the default** (works for APIs too!) See earlier question: [UI design books/resources for programmers](http://stackoverflow.com/questions/221966/user-interface-design-books-resources-for-programmers). Do not change default colors. It is important for people who are colorblind.  To address your issue with JTree (which I agree with) you should look into using glazed lists if you want nice JList and JTable interaction in your app: http://publicobject.com/glazedlists/ You get a lot of functionality (sortable table headers e.g) with a few tweaks to your code. Aside from that keep it simple. It seems like lots of functionality provided by glazed lists is now in the JDK (since 1.6) with the RowSorter and filter classes.  Use as little UI as possible. I think we forget that computers are information machines i.e. they’re meant to do work for us. Ever seen Shazam on the iPhone? It pretty much has one button. You press it hold the phone up to a speaker playing a song and in about 10 seconds it’ll tell you what song’s playing. Incredibly useful virtually no UI. All of the hard work goes on underneath.  User Interface Design by Joel Spolsky. You can read it in one afternoon. In one afternoon? Probably not worth £80 then! Get a used one for $20.  Once you have completed the design: Have a few people sit down in front of your software and let them try to solve a task that your software was designed for (one by one not all at once...). It's absolutely amazing what you will learn just by watching them. If possible the testers should match the profile for your typical customer group. The more people you can find for this kind of usability testing the better but even watching just a handful of people per product iteration has been very useful for me in the past.  I don't think that it's possible in this little space to give tips which would make it possible to design good GUIs (the question is as big as ""how can I write good programs?""). But I can give pointers to some helpful books: The Design of Everyday Things About Face User Interface Design: A Software Engineering Perspective Usability Engineering I'm not sure I agree with you. There are loads of tips which can help. The Dialog/Popup advice opened my eyes to aspect of design that hadn't occurred to me. The more tips the better  Just one rather concrete tip I got once from a skillful GUI techlead: When you have a dialog/form with buttons text fields lists etc try to keep the space between them consistent and symetric. For instance try using the same distance between widgets in all directions and if a group of widgets is separated from another by increasing the space between the groups try to make that space a duplicate of the space between the controls within the groups. For example if all buttons in one section are separated by 16 pixels in all directions try making the larger space to the next group 32 64 128 or so pixels. It's much more comfortable for the human eye to interpret something which is bound to a distinct symmetry. Ever since I tried it I always use this method with very nice results. I even went back and reworked older GUIs and was surprised to see such a facelift from this adjustment only. EDIT: Forgot to mention an important lesson I learned from the above method: When you arrange all widgets according to this system (in particular when reworking old cluttered GUIs) you might run out of space and your dialog needs to be inflated. At some point one can feel that the dialog is getting too large (e.g. blocking related background GUI or related widgets ending up too far from eachother). That might be a good indicator that you maybe should split the dialog into tabs move things into the menu or just making it into a wizard-style concept etc. This is pretty unrelated to widget spacing but touches the subject of less-is-more for the user to interact with at any given time. It's interesting that when you start making things right it ""ripples the water"" and sometimes forces you to make more things right (kind of like fixing const correctness :p ). Absolutely. Widget alignment is another (related) area where a little bit of work goes a long way. These two details can make an app far more professional looking and they're good for usability too. This is where the choice of the ""right"" LayoutManager stands! Of couse you don't want to use hard-coded XYWH! Some LayoutManagers will have automatic alignment some others won't. Another point is that inter-component spacing is generally platform-dependent (different on XP and MacOS). In Java 6 there is support for that and modern PLAF support that. Once again you have to use a LayoutManager that can use this information.  Remember that the goal of the user isn't to use your program. Their goal is something else and your program is simply a tool to help them achieve that goal. Do your best to make them successful and happy. +1. As a developer one could easily forget about that!  well I personally follow these simple rules: be consistent throughout the application DO NOT CHANGE BEHAVIOUR/LAYOUT information flow: from top to bottom from left to right (in western-countries) not too much info on a page (like a ppt-presentation) big letters (so old people can read them too) KISS (whoever can use a videorecorder can use this page/form/etc.) use relaxing colors like blue green etc. (not bright-red or neon-pink) Structure (can change of course but as a first draft mostly it is): top -> navigation/menu left -> navigation/info middle -> content bottom -> status bottom right -> buttons Unless there are no system facilities for managing font sizes on your target platform I would discourage using ""big letters"" without a good reason. I think that depends on what the users are used to. As far as I remember ""financial-folk"" is used to loads of paper with huge tables full of numbers. So it could be best to duplicate such tables in your GUI. That also has the benefit that ""old-folks"" easier accept the new application. If you have just 5 (+/-2) categories you may display them in different panels. As I said such things depend on the wishes of the customer - if he is unsure: make a prototype to show him what the application would look like. Well I can disagree with ""not too much info on a page (like a ppt-presentation)"": when you have lots of data to display (I'm thinking of a financial app) what is the best: one large frame with many subpanels and lots of data OR a bunch of small panels the user have to navigate on ???  My top tip would be From a GUI developer's perspective Keep it thin and simple If you mean from a usability perspective Show it to the actual user as soon as possible and refine based on feedback"
787,A,"Strike through java.awt.Font Is there a way to make a java.awt.Font strike through? underline and strikethrough examples in awt. http://www.java2s.com/Code/Java/2D-Graphics-GUI/TextAttributeUnderlineandstrikethrough.htm Basically create a new AttributedString out of your string add a STRIKETHROUGH attribute and draw. NOTE: This will NOT make the FONT strikethrough but you can set the text to that font and then strikethrough on the text. This is simply another way of doing it. Rich's answer actually makes the font strikethrough.  In case you are interested in what other text attributes are available you can use the Visual Font Designer to experiment with different attributes to see how they look. The designer also allows you to change the Font so you can verify if the strike through is available for the Font you want to use.  So i found this which works. Font font = new Font(""helvetica"" Font.PLAIN 12); Map attributes = font.getAttributes(); attributes.put(TextAttribute.STRIKETHROUGH TextAttribute.STRIKETHROUGH_ON); Font newFont = new Font(attributes); Thanks @richs it works with me Will this work for all fonts? I couldn't figure that out."
788,A,"Populate JTable from a Hashtable in Java I have a function which gets a key from the user and generates a Hashtable (on a pattern specified by the key). After creating a Hashtable I would like to populate a JTable so that each each column represents a key and every rows represents the values associated with the key. I tried everything but couldn't get this work. I'm not creating the table from within the constructor as I need to get input from the user. See How to Use Tables: Creating a Table Model. The JTable constructor used by SimpleTableDemo creates its table model with code like this: new AbstractTableModel() { public String getColumnName(int col) { return columnNames[col].toString(); } public int getRowCount() { return rowData.length; } public int getColumnCount() { return columnNames.length; } public Object getValueAt(int row int col) { return rowData[row][col]; } public boolean isCellEditable(int row int col) { return true; } public void setValueAt(Object value int row int col) { rowData[row][col] = value; fireTableCellUpdated(row col); } } You basically have to wrap your hashtable in the above manner. Here's an example. package eed3si9n.hashtabletable; import java.awt.BorderLayout; import java.util.Enumeration; import java.util.Hashtable; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JScrollPane; import javax.swing.JTable; import javax.swing.table.AbstractTableModel; import javax.swing.JButton; import java.awt.Dimension; public class MainForm extends JFrame { private static final long serialVersionUID = 1L; private JPanel jContentPane = null; // @jve:decl-index=0:visual-constraint=""2338"" private JScrollPane m_scrollPane = null; private JTable m_table = null; private Hashtable<String String> m_hash = null; private JButton m_btnAdd = null; /** * This is the default constructor */ public MainForm() { super(); initialize(); m_hash = new Hashtable<String String>(); m_hash.put(""Dog"" ""Bow""); } private void onButtonPressed() { m_hash.put(""Cow"" ""Moo""); m_table.revalidate(); } /** * This method initializes this * * @return void */ private void initialize() { this.setSize(409 290); this.setTitle(""JFrame""); this.setContentPane(getJContentPane()); } /** * This method initializes jContentPane * * @return javax.swing.JPanel */ private JPanel getJContentPane() { if (jContentPane == null) { jContentPane = new JPanel(); jContentPane.setLayout(new BorderLayout()); jContentPane.setSize(new Dimension(500 500)); jContentPane.setPreferredSize(new Dimension(500 500)); jContentPane.add(getM_scrollPane() BorderLayout.NORTH); jContentPane.add(getM_btnAdd() BorderLayout.SOUTH); } return jContentPane; } /** * This method initializes m_scrollPane * * @return javax.swing.JScrollPane */ private JScrollPane getM_scrollPane() { if (m_scrollPane == null) { m_scrollPane = new JScrollPane(); m_scrollPane.setViewportView(getM_table()); } return m_scrollPane; } /** * This method initializes m_table * * @return javax.swing.JTable */ private JTable getM_table() { if (m_table == null) { m_table = new JTable(); m_table.setModel(new AbstractTableModel(){ private static final long serialVersionUID = 1L; public int getColumnCount() { return 2; } public int getRowCount() { return m_hash.size(); } public String getColumnName(int column) { if (column == 0) { return ""Animal""; } else { return ""Sound""; } } public Object getValueAt(int rowIndex int columnIndex) { if (columnIndex == 0) { return getKey(rowIndex); } else { return m_hash.get(getKey(rowIndex)); } // if-else } private String getKey(int a_index) { String retval = """"; Enumeration<String> e = m_hash.keys(); for (int i = 0; i < a_index + 1; i++) { retval = e.nextElement(); } // for return retval; } }); } return m_table; } /** * This method initializes m_btnAdd * * @return javax.swing.JButton */ private JButton getM_btnAdd() { if (m_btnAdd == null) { m_btnAdd = new JButton(); m_btnAdd.setPreferredSize(new Dimension(34 30)); m_btnAdd.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent e) { onButtonPressed(); } }); } return m_btnAdd; } public static void main(String[] args) { //Schedule a job for the event-dispatching thread: //creating and showing this application's GUI. javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { MainForm frame = new MainForm(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(500 500); frame.setVisible(true); } }); } } // @jve:decl-index=0:visual-constraint=""1010""  Firstly avoid Hashtable go straight for Map. In this case there two potential standard implementations you mights want: LinkedHashMap can retain the order that the entries were added; TreeMap a SortedMap/NavigableMap will sort the results (order of which can be determined by a Comparator. Alternatively you might want a form of Map that fire events or also provides a TableModel. If you want a one time conversion from the Map to table then it's pretty straightforward. public static TableModel toTableModel(Map<??> map) { DefaultTableModel model = new DefaultTableModel( new Object[] { ""Key"" ""Value"" } 0 ); for (Map.Entry<??> entry : map) { model.addRow(new Object[] { entry.getKey() entry.getValue() }); } return model; } Then just create the JTable with this pre-populated model. (Disclaimer: I've not tested or so much as compiled this code.) To keep the Map and TableModel synchronized is more code. Generally it's best to avoid duplicating state whereever possible. Write a class that exposes itself as both a Map and a TableModel. You could go more disjoint by having a Map that fires events and a TableModel that adapts the Map (although note that Map does not have random access based on index so you'll need to be iether clever or slow for large maps). Going the other way a simpler approach would be to add the data straight to a DefaultTableModel and not using a Map at all."
789,A,"Swing won't trigger mouseEntered/mouseExited properly after mouse wheel events? I have an issue where Swing (in Java 1.6 Windows) doesn't seem to trigger mouseEntered and mouseExited events the way I want it to. I have an application where I wish to have a number of JPanels stacked vertically in a JScrollPane and that they should be highlighted with a different colour when the mouse is over them. Simple enough problem but whenever I scroll using the mouse wheel it doesn't quite behave. I have made a sample application to illustrate my problem (code found below). The images below are from that one not the ""real"" application. When I hold the mouse cursor over the edge of a panel it's highlighted correctly. Now when I use the mouse wheel to scroll down I expect the cursor to be over box B and the proper mouseEntered/mouseExited events to be triggered so that A becomes white and B becomes red. However that doesn't seem to happen. Now B becomes highlighted if I trigger another mouse event be it ""move 1 pixel"" ""click a button"" or ""scroll another step"". Knowing this I could perhaps solve it in a hackish way but I'd rather not if there's a proper solution. So basically what I'm wondering is if this is to be regarded as a bug in Swing or am I just doing things wrong? import java.awt.Color; import java.awt.Dimension; import java.awt.Font; import java.awt.GridBagConstraints; import java.awt.GridBagLayout; import java.awt.GridLayout; import java.awt.Insets; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import javax.swing.BorderFactory; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JScrollPane; import javax.swing.SwingConstants; import javax.swing.SwingUtilities; public class ScrollTest extends JFrame { public static class LetterPanel extends JPanel { private static final Font BIG_FONT = new Font(Font.MONOSPACED Font.BOLD 24); public LetterPanel(String text) { setBackground(Color.WHITE); setBorder(BorderFactory.createLineBorder(Color.BLACK)); addMouseListener(new MouseAdapter() { @Override public void mouseEntered(MouseEvent e) { setBackground(Color.RED); } @Override public void mouseExited(MouseEvent e) { setBackground(Color.WHITE); } }); setLayout(new GridLayout(1 1)); setPreferredSize(new Dimension(-1 50)); JLabel label = new JLabel(text SwingConstants.CENTER); label.setFont(BIG_FONT); add(label); } } public ScrollTest() { setLayout(new GridLayout(1 1)); setSize(400 400); JPanel base = new JPanel(); JScrollPane jsp = new JScrollPane(base); jsp.getVerticalScrollBar().setUnitIncrement(16); add(jsp); base.setLayout(new GridBagLayout()); GridBagConstraints gbc = new GridBagConstraints(); gbc.gridx = 0; gbc.gridy = 0; gbc.gridheight = 1; gbc.gridwidth = 1; gbc.fill = GridBagConstraints.HORIZONTAL; gbc.insets = new Insets(0 0 10 0); gbc.weightx = 1.0; for (char c = 'A'; c <= 'Z'; c++) { base.add(new LetterPanel(String.valueOf(c)) gbc); gbc.gridy++; } } public static void main(String[] args) { final JFrame f = new ScrollTest(); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); SwingUtilities.invokeLater(new Runnable() { public void run() { f.setVisible(true); } }); } } The restrictions are there for a reason. Without it SO would have had quite a bit of SPAM-posts. I added the images and removed your remarks about how ""retarded"" the rules here are. Besides those remarks you've asked an excellent question: clear images a good snippet of code: well done. I'm no Swing guru but I'll have a look at it later on (if it isn't answered already by then). +1 Thanks for the edit. It was a bit frustrating to first fight with the problem write the question write the snippet take good screenshots upload them to a server and then have SO barf at my post just because I'm a new user. I feel better now. :-) This seems like a similiar problem to the one described in Tooltips and Scrollpanes. That is no mouse events are generated because the mouse itself doesn't move the viewport moves. I'm not sure the exact solution other using the AdjustmentListener to track the component at the mouse location. Every time is changes you can fire a mouseExited event to the previous panel and a mouseEntered event to the new panel.  I can get your code to reproduce this reliably but only when I don't quite finish the scrolling. On my mouse at least there is sort of a ""catch"" when the mouse wheel finished scrolling. If I scroll very slowly I can have it move but it doesn't change the highlight until the mouse wheel has reached the ""catch"". When I do that the mouse enter message is received on the previous panel (same behaviour you are seeing). Looking at it I scroll the mouse and it does not actually receive the exited/entered events unless I scroll enough to have the mouse wheel ""catch"". It is possible that Windows does not send the message to Java until the ""catch"" happens... from my testing that is what it looks like. You might want to look into the MouseWheelListener interface and the MouseInfo class. I guess you might be able to detect the wheel movement and then figure out where you are with MouseInfo.getPointerInfo().getLocation() and then figure out what component you are over and change the highlighting. Curious... Your ""Catch"" could be rough enough that it moves the mouse a little causing a mouse event to come through. You might try it with the bottom of the mouse pointed into the air so the light can't get any traction. It might also be that your scroll wheel causes a button-3 down or something--something that wouldn't otherwise be noticed."
790,A,"Java JFrame: howto parse recursively through componets (i.e. if using JScrollPane) I'm using TableLayout for my swing GUI. Initially only some basic labels buttons and text fields where required which I could later on access by: public Component getComponent(String componentName) { return getComponent(componentName this.frame.getContentPane()); } private Component getComponent(String componentName Component component) { Component found = null; if (component.getName() != null && component.getName().equals(componentName)) { found = component; } else { for (Component child : ((Container) component).getComponents()) { found = getComponent(componentName child); if (found != null) break; } } return found; } Unfotunately I ran into issues after using using JScrollPane to support scrolling in JTextArea and JTable's which I did with: JTextArea ta = new JTextArea(); ta.setName(""fooburg""); JScrollPane scr = new JScrollPane(ta); frame.getContentPane().add(scr ""1 1""); // EDIT: changed tkx bruno After suggestions I've been able to access through getComponent(""fooburg"") the desired component (the version above is the final one). Many thanks to Dan and Bruno! You need to add the child to the JFrame's content pane instead: frame.getContentPane().add(comp); If you add your new component to JFrame directly your code above never get's to it because you are only enumerating the components under frame.getContentPane(). tkx bruno I changed the code as you suggested  @bruno is right - you need to add the text pane to the frame's content pane. Slightly OT: If you generally want to access every component in a hierarchy you need something recursive - your current method will only print immediate child names: void printNames(Component component) { System.out.println(component.getName()); for (Component child : component.getComponents()) { printNames(child); } } void printFrameNamesComponents(JFrame frame) { printNames(frame.getContentPane()); } (not tested but something like this.) Thank you Dan I updated the function and implemented it as you suggested. It works fine for textfields & co but not for components embedded in JScrollPane :-("
791,A,"Newline in JLabel How can I display a newline in JLabel? For example if I wanted: Hello World! blahblahblah This is what I have right now: JLabel l = new JLabel(""Hello World!\nblahblahblah"" SwingConstants.CENTER); This is what is displayed: Hello World!blahblahblah Forgive me if this is a dumb question I'm just learning some Swing basics... Thanks Aakash for recommending JIDE MultilineLabel. JIDE's StyledLabel is also enhanced recently to support multiple line. I would recommend it over the MultilineLabel as it has many other great features. You can check out an article on StyledLabel below. It is still free and open source. http://www.jidesoft.com/articles/StyledLabel.pdf  Surround the string with <html></html> and break the lines with <br>. JLabel l = new JLabel(""<html>Hello World!<br>blahblahblah</html>"" SwingConstants.CENTER); just a little correction: use instead of just ... this is recommended way of doing it (to not miss any closing tags)...happy coding... @NitinBansal Actually it's recommended in the new version of HTML to leave it as . It's called a void tag. still works for backwards compatibility. @gsingh2011 : ok...thats better :-) Awesome. I was looking for a way to make my JLabel strings even uglier... WTF!!!! I can use html in java like that!!! Ok I am confused now thank you! Any idea WHY JLabel's don't support newlines by default? thanks! that works great (just seems a little odd) Thanks I agree about the oddness.  You can do JLabel l = new JLabel(""<html><p>Hello World! blah blah blah</p></html>"" SwingConstants.CENTER); and it will automatically wrap it where appropriate.  JLabel is actually capable of displaying some rudimentary HTML which is why it is not responding to your use of the newline character (unlike say System.out). If you put in the corresponding HTML and used <BR> you would get your newlines. *sigh* I tried to add backticks to escape your html however it says I can't edit unless I'm adding at least 6 characters. @b1naryatr0phy na the problem was fixed :) The original post had a literal ` ` tag which was formatted by stack-overflow as a literal line break in the post. @Annan That isn't necessary in HTML. What you're talking about is for supporting XHTML. http://stackoverflow.com/questions/1946426/html-5-is-it-br-br-or-br  You can use the MultilineLabel component in the Jide Open Source Components. http://www.jidesoft.com/products/oss.htm"
792,A,"Java AWT/SWT/Swing: How to plan a GUI? I've already realized some applications with a small graphical user interface. Nothing complex but I've encountered several problems that components aren't displayed or just not behaving as expected. Now my question: How do you plan those user interfaces? What do you do when you need to make changes? How do you debug strange behaviours?! This applies for nearly every type of gui-design. Sure with Microsofts Visual Studio you have a big advantage because you nearly get what you see in the designer. Does a good and open-source (or freeware) designer for AWT exist? Already looked around and didn't find anything really intelligent. EDIT: Until now I've also created all of my GUIs by hand. Sure it is cleaner code but sometimes it's very hard to find the layouting bugs. If Visual Studio by MS is able to create approximately clean code why aren't the others? I've heard about some Eclipse Visual designer. Is that one already production-ready? --- regards Thanks for the good responses all of you provided useful information. I've building around with Visual Editor for Eclipse. For a prototype it's a good tool but not really for production use. Apart from tools discussion just some ideas and thoughts Before you touch the keyboard draw the GUI elements on paper. Like the classic storyboard used for video production. If you have customers use the hand-drawn (!) designs to communicate the ideas (.. just read that you already plan on paper) Plan to implement a model-view-controller (MVC) or model-view-presenter pattern Databinding is a great technique to consider. It guarantees synchronisation between your model (data) and the view (GUI) and offers input validation on-the-fly conversion and many more useful things (Provided the link for JFace databinding but I'm sure there are other frameworks for Swing/AWT as well)  While NetBeans' Matisse editor is admittedly handy the code it produces is fairly esoteric and the layouts are fragile. So I've been taking best of both worlds using NetBeans for WYSIWYG prototyping and then later recoding the whole thing by hand. I was close to actually trying to write a converter from XAML to Swing code because VS and WPF were *very* handy in prototyping UIs. But then I lacked time and still coded it by hand *sigh*  Do it by hand. GUI builders aren't good unless you have the 'partial class' concept in C# and even then they often cause more problems than they solve. Use the GUI builder tools to make a prototype - sure but not for production code. Also another little trick I've used over the years to good effect when trying to debug layout or ""which panel am I really seeing here"" problems is to give each 'container' panel a really garish background color (yellow blue etc). Something obvious enough that you'll see it even if it's only one pixel wide. And my favorite layout for simple dialogs is BoxLayout. It's not great you have to write a lot of boilerplate but at least it generally works the way you would expect it to in your head. Don't overthink layouts until you have to.  I'm one of those archaic dudes who do GUI layout by hand. I'm also not afraid of the infamous GridBagLayout! I keep things simple for myself by emulating the coding standard used by Visual Age years ago: I use a lot of JPanels to organize parts of the GUI and each one gets its own makeXXX() method to create it lay it out and return it to a a parent panel or the constructor. That way each makeXXX only has to concentrate on a small part of the whole works. Some components need to be accessible by various instance methods; I declare those as instance fields. The other stuff that's just decoration or layout need not be exposed outside the makeXXX methods. That's mostly it. Works for me. If you like `GridBagLayout` you surely love [MiGLayout](http://www.miglayout.com/). ;) GridBagLayout rocks. i absolutely totally agree! I'd replace GridBagLayout (shudder...) with MigLayout - http://www.miglayout.com/ GridBagLayout killed Jesus. Any time someone uses GridBagLayout an angel loses his wings. Better: identify your layouting needs and write your customed layout managers (e.g. for key/value layouts).  NetBeans might the best option for building GUI in WYSIWYG manner but many java developers write their GUI by hands as it is not that difficult. Care about the thickness of your borders and gaps between your controls and you're ok :) and yes about the alignment. There are many things in UI which are quite complex from technical point of view and there are tricks for debugging (e.g. breakpoints may not help if your control is repainted often => use logging) but really challenging stuff happens on a sheet of paper and in designer's brain.  I would suggest you to use netbeans for GUI development in AWT/SWING. Regards Sameer Please have a look at the following link. It shall help you. It's the just the matter of drag and drop. http://java.sun.com/docs/books/tutorial/javabeans/nb/index.html  I use JFormDesigner for gui generation. It generates nice clean java code and I've learned a few things from reading through the generated code. Makes localization a snap. It's a really quick way to throw together an involved layout especially complex menubars and grid layouts.  I'm not a big fan of GUI builders: They typically autogenerate bucket-loads of code that then locks in your whole development team to using one IDE. Also this code is often unreadable (check the code generated when using Matisse under Netbeans). My recommendations for GUI design / debugging would be: Add a main method to each panel (or ""top-level"" component) implementation allowing other developers to easily determine what a component looks like. Favour the use of Actions over ActionListeners and register these actions with each JComponent's ActionMap. This allows them to be ""extracted"" and added to other parts of the UI (e.g. JToolBar) whilst still having their state controlled by the ""owning"" JComponent (i.e. loose coupling). Use assert to ensure that all UI component modifications are occurring on the Event Dispatch thread; e.g. assert SwingUtilities.isEventDispatchThread(). To debug strange layout behaviour consider painting a component's background in red! Centralise the capturing and reporting of workflow events and exceptions. For example I typically implement a TaskManager class that is registered with my UI's status bar. Any background processing (performed within SwingWorkers) is passed a handle to a Task created by the TaskManager. Interracting with the Task (by calling setDescription(String) setThrowable(Throwable) cancel()) causes the status bar to be updated. It also causes the glass pane to be displayed for ""global"" tasks ... but this is all decoupled / hidden from the individual SwingWorkers. Do not use the Observer / Observable classes but instead favour ChangeListener PropertyChangeListener or your own custom listener implementation for propagating events. Observer passes an Object as it's event forcing client code to check the type using instanceof and to perform downcasts making code unreadable and making relationships between classes less clear. Favour the use of JTable over JList even in situations where your table only has one column. JList has some nasty features in its API including the fact that you need to provide a prototype value for it to calculate its size correctly. Never use DefaultTableModel as it typically results in you storing your ""model"" data in two places: In your actual business objects and also within the 2D array that DefaultTableModel sits on. Instead simply subclass AbstractTableModel - It's very easy to do this and means your implementation can simply delegate through to the data structure (e.g. List) storing your data. Everything is this answer is great I'd just like to add one bit. Consider drawing your GUI on paper. Use a different color pen/pencil to indicate hidden panels layout managers actions etc. Works WONDERS! You could do the same on a white board but I prefer the precision of paper and pen (plus we've got all sorts of scrap at work) +1 Nice tip with the assertion. The bugs that happen when you access the UI from outside the EDT are ofttimes subtle and weird. And very hard to find. Nice set of best practices here. Well done. You do not need to specify a prototype value for JList. The proper size is calculated automatically. This is done by looping through all the items in the model and invoking the renderer to determine the preferred size. If you have a large model this may be inefficent and you may wish to provide a prototype value to bypass this behavour. JTable on the other hand provides no support for this at all an you must guess at the row height and column width and update the table and TableColumn manually. @camickr: I was referring to the case where the JList starts off empty and has items added to it during the application life-time. I still prefer JTable as it also offers sorting / filtering out of the box. To size the table columns I typically use a utility method similar to: http://www.exampledepot.com/egs/javax.swing.table/PackCol.html  I for myself use Pencil for some prototyping first then start coding ""by hand"" (i.e. not using any GUI editor). The provided link gives a HTTP 500 error. This is an updated link: http://pencil.evolus.vn/  There has been a temporarily-dead (but now apparently at least half-alive) plugin for Eclipse for visual GUI design and Netbeans still has support for it. The resulting code was less than stellar though. At least for people having to work with that codebase afterwards it's quite a pain. As for me I tend to plan on paper beforehand and try to get all nestings of panels with their layouts right on the first try. Java GUI code is inherently write-only in my experience. Last time I did such a thing I first created every control I needed and then pieced it together in multiple panels and layouts etc. That way was at least manageable and worked without too much pain when changes had to be made. I tend not to think too much about the particular layout in Winforms and WPF due to the as you noted also strong designer support. Also WPF is very easy to handle even in XAML. Ans partial classes make working with partly designer-generated and partly handwritten code very pleasant. Alas no such thing in the Java world. I like the code that generates VE. It is much cleaner comparing with Netbeans GUI builder it is easy to understand and to modify ""by hands"". @bancer: I have to admit the comment on code quality was more about Netbeans. I had the joy of modifying such code only once but it was painful :-) Oh thanks for the notice. Didn't notice they raised it from the dead as for the most part of me using Java it was dead or near-so. correct me if I'm wrong but I thought the eclipse VE has become active again (after some years). Read something about a version 1.4 !?"
793,A,"SpringLayout problem/challenge SpringLayout is claimed to be very powerful. I tried to implement what I thought was a fairly simple layout using SpringLayout and I'm failing badly. Reduced to the minimum I want 4 JButtons on my JFrame side by side: *=====================* | +--+ +--+ +--+ +--+ | | |b1| |b2| |b3| |b4| | | +--+ +--+ +--+ +--+ | *=====================* I want all 4 to have the same size regardless of different texts. I want the outermost ones (b1 and b4) to be a constant horizontal distance of 5 px from the borders of the container and a 5 px border to the north and south of the buttons which are all the same height. I want the gaps between the buttons to be 5 px as well. So far so easy. I have more constraints: When the frame is made wider (user/mouse) I want the gaps between the buttons (b1/b2 b2/b3 b3/b4) to widen but not the buttons. If the frame is made smaller I want to gaps between the buttons to shrink down to 1 or maybe 0 before other stuff has to give way. I expect a pack() on the frame to give me a window just the right size for the buttons with default 5px gaps and the 5px border around them. I wrote the following fairly simple code and results are horrible. The gaps don't shrink and expansion happens exclusively to the rightmost button (b4). Now that I have custom buttons that take care of uniformly sizing themselves I could meet these requirements fairly easily with GridBagLayout and probably even more easily with MigLayout. That's not the answer I'm looking for. Specifically my question is: Can this layout be made to work correctly using SpringLayout? How? The layout is even ignoring my buttons' getMaximumSize(). Am I doing something wrong or is SpringLayout bugged? Thanks a lot. public class SpringLayoutTest extends JFrame { public SpringLayoutTest() { setLocation(100100); setSize(400 300); Container cp = getContentPane(); SpringLayout layout = new SpringLayout(); cp.setLayout(layout); SiblingButton b1 b2 b3 b4; cp.add(b1 = new SiblingButton(""..."")); cp.add(b2 = new SiblingButton(""iii"")); cp.add(b3 = new SiblingButton(""xxx"")); cp.add(b4 = new SiblingButton(""WWW"")); layout.putConstraint(NORTH b1 5 NORTH cp); layout.putConstraint(SOUTH b1 Spring.minus(Spring.constant(5)) SOUTH cp); layout.putConstraint(NORTH b2 5 NORTH cp); layout.putConstraint(SOUTH b2 Spring.minus(Spring.constant(5)) SOUTH cp); layout.putConstraint(NORTH b3 5 NORTH cp); layout.putConstraint(SOUTH b3 Spring.minus(Spring.constant(5)) SOUTH cp); layout.putConstraint(NORTH b4 5 NORTH cp); layout.putConstraint(SOUTH b4 Spring.minus(Spring.constant(5)) SOUTH cp); layout.putConstraint(WEST b1 5 WEST cp); layout.putConstraint(WEST b2 Spring.constant(1 5 Integer.MAX_VALUE) EAST b1); layout.putConstraint(WEST b3 Spring.constant(1 5 Integer.MAX_VALUE) EAST b2); layout.putConstraint(WEST b4 Spring.constant(1 5 Integer.MAX_VALUE) EAST b3); layout.putConstraint(EAST b4 Spring.minus(Spring.constant(5)) EAST cp); layout.putConstraint(WEST cp Spring.minus(Spring.constant(5)) WEST b1); } public static void main(String[] args) { (new SpringLayoutTest()).setVisible(true); } SiblingButton is a pretty artless implementation. Please ignore its design faults this is just for demo purposes. class SiblingButton extends JButton { static ArrayList<SiblingButton> siblings = new ArrayList<SiblingButton>(); public SiblingButton(String text) { super(text); siblings.add(this); } public Dimension getMaximumSize() { return getPreferredSize(); } public Dimension getMinimumSize() { return getPreferredSize(); } public Dimension getPreferredSize() { Dimension mx = new Dimension(0 0); for (SiblingButton sb : siblings) { mx = new Dimension(Math.max(mx.width sb.originalPreferredSize().width) Math.max(mx.height sb.originalPreferredSize().height)); } return mx; } Dimension originalPreferredSize() { return super.getPreferredSize(); } } UPDATE / Conclusion It's been 24 hours now and the response has been overwhelmingly underwhelming. The lone response (thanks Camickr!) doesn't even try to touch SpringLayout. I don't think this reflects poorly not on the SO community but on the utility of SpringLayout! My impression is that SpringLayout is the red-headed stepchild of layout managers useful in some ways but so little utilized that nobody has working experience with it and nobody is bothering to report bugs to Sun. For me it turned out that GroupLayout does everything I needed and allowed me to accomplish what I wanted exactly with a reasonable amount of coding. A welcome change from GridBagLayout the steps I needed to take to achieve my intended layout were clear to me from the beginning and I just needed to sit down and write the code. For anyone who cares these are the characteristics of GroupLayout that made it so useful for me: Layout is done more or less separately for the horizontal and vertical directions. Lots of flexibility and simpler code; It's possible to nest grids without needing to introduce containers just to hold a layout; It's possible to insert gaps with specified constraints; It's possible to form arbitrary groups of components with shared sizing specs i.e. all components have the same dimensions as the biggest in the group; and It's possible to alter a component's sizing (e.g. maximumSize = preferredSize) without needing to subclass the component. Not an answer but have you checked out TableLayout? http://java.sun.com/products/jfc/tsc/articles/tablelayout/ TableLayout would satisfy my stated reqs a bit more simply than GBL and maybe even MigL - thanks! The reason I wanted to use SL is that there's actually more to the GUI and there are components in other rows that will get laid out in columns independently of those buttons and I don't want to speculate how many columns they would span. When you want different column widths within the same layout that rapidly diminishes your alternatives. I may end up going with nested containers. Oh another reason I wanted SpringLayout: It's the only layout that would allow me without subclassing my buttons or fiddling directly with their dimension settings to force all of them to have the same min/pref/max size - via that funky spring arithmetic. That would be rather cool if it worked as advertised. My example uses subclassed buttons just to simplify my spring-twiddling code. You could use a BoxLayout: import java.awt.*; import java.awt.event.*; import javax.swing.*; import javax.swing.border.*; public class BoxExample extends JFrame { public BoxExample() { Box box = Box.createHorizontalBox(); box.setBorder( new EmptyBorder(5 5 5 5) ); Dimension size = new Dimension(100 25); box.add( createButton(""Button1"" size) ); box.add( createStrut() ); box.add( createButton(""Button2"" size) ); box.add( createStrut() ); box.add( createButton(""Button3"" size) ); box.add( createStrut() ); box.add( createButton(""Button4"" size) ); add( box ); } private JButton createButton(String text Dimension size) { JButton button = new JButton(text); button.setPreferredSize( size ); button.setMinimumSize( size ); button.setMaximumSize( size ); return button; } private Component createStrut() { JComponent component = (JComponent)Box.createHorizontalStrut(5); component.setMinimumSize(new Dimension(0 0)); component.setMaximumSize(new Dimension(Short.MAX_VALUE Short.MAX_VALUE)); return component; } public static void main(String[] args) { BoxExample frame = new BoxExample(); frame.setDefaultCloseOperation( EXIT_ON_CLOSE ); frame.pack(); frame.setLocationRelativeTo( null ); frame.setVisible(true); } } Doesn't answer my question but +1 for effort and a decent alternative! Also accepted for being the only answer.  You need to set the constraint of the container (the content pane of the frame) and more precisely the constraint east and south of it. Read the tutorial on this : http://java.sun.com/docs/books/tutorial/uiswing/layout/spring.html The SpringDemo3 explain it all"
794,A,"How to ""do something"" on Swing component resizing? I've a class which extends JPanel. I overwrote protected void paintComponent(Graphics g). There is a variable which has to be recalculated when the panel's dimensions change. How do I do that in a proper way? Thanks in advance Is the calculation long/time consuming? Please excuse my ignorance but what does ""do sth"" mean? Oh ""do something"". Thanks Google! Like Adam Paynter suggested you can also add an inner class to your code like this: class resizeListener extends ComponentAdapter { public void componentResized(ComponentEvent e) { //Recalculate the variable you mentioned } } The code you have entered between the innermost brackets will be executed everytime the component get resized. Then you add this listener to your component with myJPanel.addComponentListener(new resizeListener()); You can get your component by using e.getComponent() . This way you can call any method of your component from inside the inner class like e.getComponent().getWeight();  If the calculation isn't time consuming I would just re-calculate the value each time in paintComponent(). Otherwise you can save a value that is the size of the component and check it against the new size in paintComponent. If the size changed then recalculate otherwise don't. private Dimension size; protected void paintComponent(Graphics g){ if (!size.equals(getSize()){ size = getSize(); // recalculate value } } Or you can do the calculation on a resize event. private CompoentListener resizeListener = new ComponentAdapter(){ public void componentResized(ActionEvent e){ // recalculate value } }; //in the constructor add the line addComponentListener(resizeListener);  I suppose you could override the various setSize and resize methods and perform the calculation there. However you may not find all the places where the size can be changed. You may want to have your class implement ComponentListener and simply listen to itself for resize events. Warning: I am not a Swing expert. Warning: I have not compiled this code. public class MyJPanel extends JPanel implements ComponentListener { public MyJPanel() { this.addComponentListener(this); } public void paintComponent(Graphics g) { // Paint paint paint... } public void componentResized(ComponentEvent e) { // Perform calculation here } public void componentHidden(ComponentEvent e) {} public void componentMoved(ComponentEvent e) {} public void componentShown(ComponentEvent e) {} } This looks like the better way to go. However if the component is resized but it isn't being painted you may not wanna re calculate anything yet Wow shafted. I would have accepted your answer btw... Thanks for the support. A bit odd that mine is actually an implementation of the accepted answer...  If I understand the question correctly then you should read the section from the Swing tutorial on How to Write a Component Listener which shows you how to listen for a change in a components size."
795,A,"Dynamic resize of Layout Manager areas In which Swing layout manager it is possible to change layout areas programmatically? And how to do this with lowest cost? I have to create component with functionality similar to JSplitPane but with three panels from scratch. One of the moments is to Expand/Collapse one of the panels after clicking oneTouchExpandable button on the divider. But the problem is that I don't know how to implement this collapse action. I tried just setting panels width to 0 but the layout area which contains this panel doesn't shrink after the component. I tried to do this in all Layout Managers but effect is the same. Thanks. Thanks to all for the answers. Finally I ended up with combining solutions from several answers. My final solution is following: I use BorderLayout set West Center and East panels and then manipulate their sizes by setting PreferredSize to West and East panels. The scheme of rendering is following: while laying out the components BorderLayout gives East and West panels their PreferredSize and rest of the space to Center panel. So with a bit of easy calculations I can manipulate size of each of three panels painlessly. I also added dividers(originally just JPanel components with fixed size) to West and East panels(their size is also considered while calculating). For dynamic resize I handle dragging events on this dividers and recalculate panel sizes. Refreshing is done with following snippet: container.setVisible(false); container.revalidate(); container.repaint(); container.setVisible(true); I'd like to put this code somewhere to be available for others but don't know where exactly to do this. So if you know such place please point me to it in the comments.  All layout managers resize dynamically. However the width and height properties are the result of the layouting and will be overwritten. The properties you should look at are preferredSize minimumSize and maximumSize - the layout managers base their calculations on those properties though the exact effect depends on the layout manager (e.g. BorderLayout will give the NORTH SOUTH WEST and EAST components their preferred size if possibe and assign the remainder to the CENTER component). Once you've changed the size properties you have to call revalidate() on the container then you should see the changes.  When making a change that affects the layout of a panel after the GUI is visible you need to revalidate() the panel which essentially invoke the layout on the panel. In your case it might be easier to simply make the component invisible: component.setVisible(false); panel.revalidate(); panel.repaint(); // this is only required sometimes  I'm with the revalidate()/preferredSize answers but just wanted to suggest this: don't re-invent the wheel! Use the JideSplitPane (part of JIDE's free ""Common Layer"") - it supports more than two splits. Sure its in the javadocs. See http://www.jidesoft.com/javadoc/com/jidesoft/swing/JideSplitPane.html#setOneTouchExpandable(boolean) Can you point me to exact place where one touch expandable feature for this approach is explained? Thank you in advance. Yes I looked on this approach and was ready to use it but it doesn't allow manipulations with dividers between panels and I need to simulate JSplitPane behavior with OneTouchExpandable buttons and so on. But for anyone who doesn't need to control dividers it can be a good solution Not quite sure what you mean by ""it doesn't allaw manipulations..."" It acts exactly like the standard split pane it even has the one touch expandable feature built in..."
796,A,"Java actionListener for a nameless JButton? I was wondering if there is a way to implement an action listener for a Jbutton without a name. For example I have the following for loop that creates a button for each letter of the alphabet. for (int i = 65; i < 91; i++){ alphabetPanel.add(new JButton(""<html><center>"" + (char)i)); } Is there a way that I can add an action listener for each of those buttons without getting rid of my for loop and hard coding each JButton and then creating an action listener for each? Thanks in advance Tomek By named you seem to mean storing the button instance in a local variable of your immediate method. Attempting to avoid that is likely to make your code more difficult to read. But to answer your question: The most obvious way is to use the old but newly-popular double-brace idiom. alphabetPanel.add(new JButton(""<html><center>"" + (char)i) {{ addActionListener(new ActionListener() { public void actionPerformed(ActionEvent event) { ... } }); }}); Note in this case as i is not final it will not be usable from the anonymous inner class. Either assign it to another (final) variable or reformulate the loop. Another route would be to go via an Action. (Usually I'd suggest avoiding Actions as they are jsut a poor man's Hashtable. ButtonModel is ""good"" though.) alphabetPanel.add(new JButton(new AbstractAction(""<html><center>"" + (char)i) { public void actionPerformed(ActionEvent event) { ... } })); Then of course there is the application specific library way: Form alphabetForm = new Form(alphabetPanel); for (char c='A'; c <= 'Z'; ++c) { alphabetForm.button(""<html><center>"" + c new ActionListener() { public void actionPerformed(ActionEvent event) { ... } }); }  Your question is a little vague. it would be trivial to modify the loop to add a listener inside the loop: ActionListener listener = something; for (int i = 65; i < 91; i++){ JButton button = new JButton(""<html><center>"" + (char)i); button.addActionListener( listener ); alphabetPanel.add(button); } if you can't modify the loop you could iterate over all of the panel's children and add listeners to any of the children that are jbuttons. also why are you using html to center the text? isn't that overkill? doesn't jbutton already center text? you could use setHorizontalAlignement(SwingConstants.CENTER) to do it too. for some reason I thought that te way action listener works is that after it is created it somehow stops there in the code until an action is performed but I guess that defeats the entire purpose of it. I changed it and it worked exactly as I wanted it to. Thanks! P.S. html was overkill  It is possible to add ActionListener to anonymous components like below: new JButton().addActionListener(new ActionListener(){ @Override public void actionPerformed(ActionEvent arg0) { // TODO your action } }); However in your case where you try to add the anonymous JButton to your panel this approach will not work because the return type of addActionListener method (which is void) will be taken instead of JButton's constructor as shown below: for (int i = 65; i < 91; i++){ alphabetPanel.add(new JButton(""<html><center>"" + (char)i).addActionListener(new ActionListener(){ @Override public void actionPerformed(ActionEvent arg0) { // TODO your action } })); } The above code complains about invalid argument for panel.add() method. So in your case you will have to create a named instance of the JButton. Hope this clarifies. Best Regards Suresh  What is the problem of doing this? for (int i = 65; i < 91; i++){ JButton button = new JButton(""<html><center>"" + (char)i)); button.addActionListener( new ButtonListener()); alphabetPanel.add(button); } ... class ButtonListener implements ActionListener { ButtonListener() { } public void actionPerformed(ActionEvent e) { //TODO: } } Also if the button's text doesn't identify the button you could set the button's name with the letter of the alphabet. button.setName((char)i)); // or button.setName(i);"
797,A,"Java get JPanel Components I have a JPanel full of JTextFields... for (int i=0; i<maxPoints; i++) { JTextField textField = new JTextField(); points.add(textField); } How do I later get the JTextFields in that JPanel? Like if I want their values with TextField.getText(); Thanks I've got to say thanks ""nobody"" for removing those apple logos and the ""THANKSSS"" sign off. Well bear in mind they didn't get there by them selves ( I think a read some questions about dynamically creating these panels at runtime ) In the answers posted there someone said you should kept reference to those textfields in an array. That's exactly what you need here: List<JTextField> list = new ArrayLists<JTextField>(); // your code... for (int i=0; i<maxPoints; i++) { JTextField textField = new JTextField(); points.add(textField); list.add( textField ); // keep a reference to those fields. } // Later for( JTextField f : list ) { System.out.println( f.getText() ) ; } Wasn't that easy? Just remember to keep these kinds of artifacts ( list ) as private as possible. They are for your control only I don't think they belong to the interface. Let's say you want to get the array of texts instead of  public List<JTextField> getFields(); You should consider:  public List<String> getTexts(); // get them from the textfields ...   //una forma de recorer todos los elementos dentro de un jpanel Component[] components = jPanelX.getComponents(); for (int i = 0; i < components.length; i++) { if(components[i].getClass().getName().toString().equals(""javax.swing.JTextField"")){ components[i].setEnabled(false); } }  Every JPanel in Java is also an AWT container. Thus you should be able to use getComponents to get the array of contained components in the panel iterate over them check their types (To make sure you didn't get other controls) and do whatever you need with them. However this is generally poor design. If you know that you will need to access specific components it is better to maintain an array of those text fields and pass it around even though they are visually contained within the container. If this is a recurrent task or could be done from multiple points it may even make sense to have a special class representing a panel with text fields that will then provide through its interface means of accessing these fields."
798,A,"Implementation of file ""save"" like Notepad I want to create a text editor (using java/swing) like notepad. For this I need the implementation of saving file. mean if the user clicks on ""save"" first time then the dialog should appear for taking file-name file-extension. But if he clicks again on same ""save"" button then the file should save without appearing the ""save-dialog-box"". Thanx Are you asking: (a) how to open the save dialog box or (b) how to *avoid* opening the save dialog box if the user has already saved the file once? Think of it as if: clicking on ""save"" the first time *actually* opens the ""save as"" dialog. If you use a singleton JFileChooser it will hold the last-selected file path/name until you pop the dialog again. Doing it this way might prevent filename synchronization issues you might encounter otherwise. For example the user saves the first time enters the filename he wants to save as then a minute later changes his mind and decides to Save As to a new filename. If you use a singleton JFileChooser you can just reference it when performing the actual save because it will always have the most recently selected filename.  Just keep track of the chosen name within your application. If your application has stored a name re-use it for subsequent saves.  You can just look whether the file was already named. You probably start with an ""Unnamed1"" file in the beginning. This is where you want to display the save dialog. In case you opened a file that already existed or you already saved the file you would know its name and can save directly.  For general help on using the Java File chooser check out the Sun Tutorial How to Use File Choosers"
799,A,"bold fixed fonts in Java Swing I'm trying to use fixed width fonts in Java. I can use Courier or Lucida Console but when I apply a ""bold"" style it makes the characters larger in width and that's not acceptible in my application. Is there anyway I can force the bold characters to have the same width as non-bold characters? Monospaced should work on any platform. On Windows I like Consolas. Courier New should also work. `Courier New` doesn't work for me the `|` character is a different width to the letters. `Monospaced` works fine though! +1 ""Monospaced"" works. Courier New appears to be the same thing. Consolas doesn't seem to work on my machine (and I have Windows) Not only that Monospaced works but it loads faster on my Windows machine.  The only solution I can think of is to find a font face that renders with exactly the same width regardless of the bold property. I am yet to find such font.  re @Mario Ortegon's suggestion I asked on a Sun forum and someone suggested Lucida Sans Typewriter which does appear to work but it looks pretty lousy. >:( Guess we can't have it both ways :( (+1 this is a solution)"
800,A,"SwingWorker cancellation with ThreadPoolExecutor i am using a ThreadPoolExecutor with a thread pool size of one to sequentially execute swing workers. I got a special case where an event arrives that creates a swing worker that does some client-server communication and after that updates the ui (in the done() method). This works fine when the user fires (clicks on an item) some events but not if there occur many of them. But this happens so i need to cancel all currently running and scheduled workers. The problem is that the queue that is backing the ThreadPoolExecutor isnt aware of the SwingWorker cancellation process (at least it seems like that). So scheduled worker get cancelled but already running workers get not. So i added a concurrent queue of type <T extends SwingWorker> that holds a reference of all workers as long as they are not cancelled and when a new event arrives it calls .cancel(true) on all SwingWorkers in the queue and submits the new SwingWorker to the ThreadPoolExecutor. Summary: SwingWorkers are created and executed in a ThreadPoolExecutor with a single Thread. Only the worker that was submitted last should be running. Are there any alternatives to solve this problem or is it ""ok"" to do it like this? Just curious... Does it work? If it ain't broke don't fix it (or fix it till it is lol) Yes it works. But writing concurrent code is hard. A i just want to know if there exist any concepts for my task. Let me see if I understand the problem correctly. You have a FIFO queue of tasks only the oldest of which is running. Each task needs to update the UI when it's done. But if a certain user event comes in all tasks need to be cancelled -- that is running tasks need to be cancelled and not-yet-running tasks need to be removed from the queue. Is that right? Assuming it is I wouldn't use SwingWorker since you only need one worker thread not one per task. FutureTask should be enough (assuming you override done() to make the necessary call to SwingUtilities.invokeLater() and do the UI update). If you cancel a FutureTask then even if its run() method gets called it won't do anything. So you can submit FutureTasks safely to a ExecutorService knowing that cancellation will work even if the executor tries to run them. I suspect that a good-enough solution would just be to keep a list of all FutureTasks that might need to be cancelled and cancel them all when the user event comes in. The ExecutorService will still try to run them but it'll basically be a no-op. You need to make sure completed tasks are removed from the list and you need to make sure the list is updated and used in a thread-safe way (probably from the same thread that puts tasks on the ExecutorService) but that shouldn't be too hard. I bashed the code below out in just an hour and I wouldn't bet on it being correct but you get the idea. :) /** Untested code! Use at own risk. */ public class SwingTaskExecutor { // //////////////////////////////////////////////////////////// // Fields private final ExecutorService execSvc = Executors.newFixedThreadPool(1); private final Lock listLock = new ReentrantLock(); private final List<ManagedSwingTask<?>> activeTasks = new ArrayList<ManagedSwingTask<?>>(); // //////////////////////////////////////////////////////////// // Public methods public <T> Future<T> submit(SwingTask<T> task) { ManagedSwingTask<T> managedTask = new ManagedSwingTask<T>(task); addToActiveTasks(managedTask); execSvc.submit(managedTask); return managedTask; } public void cancelAllTasks() { listLock.lock(); try { for (ManagedSwingTask<?> t: activeTasks) { t.cancel(true); } activeTasks.clear(); } finally { listLock.unlock(); } } // //////////////////////////////////////////////////////////// // Private methods private <T> void addToActiveTasks(ManagedSwingTask<T> managedTask) { listLock.lock(); try { activeTasks.add(managedTask); } finally { listLock.unlock(); } } // //////////////////////////////////////////////////////////// // Helper classes private class ManagedSwingTask<T> extends FutureTask<T> { private final SwingTask<T> task; ManagedSwingTask(SwingTask<T> task) { super(task); this.task = task; } @Override public void cancel(boolean mayInterruptIfRunning) { try { task.cancel(); } finally { super.cancel(mayInterruptIfRunning); } } @Override protected void done() { removeFromActiveTasks(); updateUIIfDone(); } private void removeFromActiveTasks() { listLock.lock(); try { activeTasks.remove(this); } finally { listLock.unlock(); } } private void updateUIIfDone() { if (isDone()) { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { task.updateUI(); } }); } } } public static interface SwingTask<T> extends Callable<T> { /** Called from the EDT if task completes successfully */ void updateUI(); /** Hook in case there's task-specific cancellation to be done*/ void cancel(); } } Something like that anyway. If you want to be doubly sure you could then shut down and replace the ExecutorService but that's probably not necessary.  Instead of using a SwingWorker could you not use a ThreadPoolExecutor to perform the client-server communication and then call SwingUtilities.invokeLater to update the UI with the result? This to me seems a bit cleaner and would ensure that events and UI updates are still processed in order. As you submit tasks to your executor you could keep a reference to their Future instances so that you can cancel the task if needed. The problem is that the future that i can get from the executor does not provide the cancellation possibilities like the swing worker because it just wraps the runnable interface. But they both provide the same cancel method. SwingWorker implements the Future interface. Like i said. It seems like the Executor isnt aware of it. And just executes it as a Runnable  One way to create a Single thread ThreadPoolExecutor that only executes last incoming Runnable is to subclass a suitable queue class and override all adding methods to clear the queue before adding the new runnable. Then set that queue as the ThreadPoolExecutor's work queue. Nice. That's much cleaner than my idea of keeping a separate list of tasks needing cancellation. That is pretty much like my own implementation.  Why do you need a ThreadPoolExecutor to do this kind of job? How many sources of different SwingWorkers you have? Because if the source is just one you should use a different approach. For example you can define a class that handles one kind of working thread and it's linked to a single kind of item on which the user can fire actions and care inside that class the fact that a single instance of the thread should be running (for example using a singleton instance that is cleared upon finishing the task) I need a threadpool executor with a single thread to ensure that only one task is running at a time. but there cann occure many of them so i have to queue them."
801,A,"Is possible to associate a text to a JTableHeader without a table? I want to create a JTable with a header inside some cells. But I want to associate a text with this header. Is it possible? How to do? All my best! Leandro Lima If I understand the question then you can create a panel using a BorderLayout. You add the table to the CENTER and the table header to the NORTH. Something like that. But the idea is to create a row header I'll put a header in each cell from the first column. I can do it ok but I don't know how to set the header text.  I only way to do it I found was to create a table without cells and with a column with a header title. So I get this header and put it inside other table by cell renderer.  table.getColumnModel().getColumn(x).setHeaderValue( ""text"" ); Hi Nate thanks for this solution but I don't have a table with columns just the JTableHeader."
802,A,"Making a JTable cell editable - but *not* by double clicking I am trying to add a column to a JTable with the following behaviour (similar to Windows Explorer and similar shells): The cell can be clicked once to select it as usual. The cell can be double-clicked to perform a separate action (launching an external program.) The cell value (a string) can still be edited by single-clicking a second time (after a pause) or by pressing F2 when the cell is highlighted. Double-clicking must not trigger editing of the cell but I would like to leave any other default editing triggers operational if possible. I have tried adding a MouseListener to the table and consuming all MouseEvents but this does not work - if I return true from isCellEditable() then my listener never receives any click events but if I return false then F2 no longer works. Can this be achieved using only event listeners? I would prefer not to mess with the PLAF functions if I can avoid it. I have solved this by wrapping the existing CellEditor with a Proxy and intercepting calls to isCellEditable returning false for all mouse events and delegating all other calls to the original CellEditor. This is slightly more complex than camickr's solution but works for all editors (I have 4 in all.) I'd be interested in seeing the solution. Also I don't understand how you distinguish between the initial click on the cell and the click to initiate the editing. Does your code just track the last cell that was selected and when you get two single clicks on the same cell you start editing? If so then the second click could be second or minutes later. Your initial requirement said after a ""pause"" which is why I suggested a Timer to control the pause interval. @carnickr I have not implemented that part yet but yes that sounds right. There is no time limit.  You will have to make your own cellEditor and ovveride public boolean isCellEditable( EventObject e ) You can distinguish between single and double click with the clickCount on the eventObject If its a single Click and its on a selected cell you can return true otherwise return false; retrieve row and column with int row = ( (JTable) e.getSource() ).rowAtPoint(e.getPoint()); int column = ( (JTable) e.getSource() ).columnAtPoint(e.getPoint()); to enable F2 you can add custom inputMap en actionMap entries similar too table.getInputMap().put(KeyStroke.getKeyStroke(""DOWN"") ""doMyArrowDown""); table.getTable().getActionMap().put(""doMyArrowDown"" new ArrowDownAction()); and from your action you can then fire the cellediting yourself table.editCellAt(row column ); This is similar to what I did with the proxy. I only override isCellEditable. The key stroke handler is included in the default editor. I do not need to re-implement that.  The DefaultCellEditor has a setClickCountToStart() method to control mouse clicks for editing. The default is 2. Changing this will have no effect on F2 functionality. Therefore you can set editing to be a triple click. Not sure exactly how to handle two single clicks to start editing but I guess you would use a Timer to keep track of the first click and then do the editing if the second single click is within you time interval. No need for a timer - it just needs to be too slow to register as a double click."
803,A,"How can I know when the text of an editable JComboBox has been changed? I have an editable JComboBox where I want to take some action whenever the text is changed either by typing or selection. In this case the text is a pattern and I want to verify that the pattern is valid and show the matches that result in some test data. Having done the obvious attach an ActionHandler I have found that for typing the event seems to fire unreliably at best (selection is fine). And when it does fire as a result of typing the text retrieved (using getEditor().getItem() since getSelectedItem() only gets the text when it was selected from the list) seems to be the text as it was when the last event was fired - that is it's always missing the character was typed immediately before the action event was fired. I was expecting the action event to fire after some short delay (500ms to 1 second) but it seems immediately fired upon keying (if it is fired at all). The only workable alternative I can think of is to simply start a 1 second timer on focus-gained killing it on focus-lost and doing the work as the timer action if the content is different from last time. Any thoughts or suggestions? The code snippets are not particularly interesting: find.addActionListener(this); ... public void actionPerformed(ActionEvent evt) { System.out.println(""Find: ""+find.getEditor().getItem()); } The action listener is typically only fired when you hit enter or move focus away from the editor of the combobox. The correct way to intercept individual changes to the editor is to register a document listener: final JTextComponent tc = (JTextComponent) combo.getEditor().getEditorComponent(); tc.getDocument().addDocumentListener(this); The DocumentListener interface has methods that are called whenever the Document backing the editor is modified (insertUpdate removeUpdate changeUpdate). You can also use an anonymous class for finer-grained control of where events are coming from: final JTextComponent tcA = (JTextComponent) comboA.getEditor().getEditorComponent(); tcA.getDocument().addDocumentListener(new DocumentListener() { ... code that uses comboA ... }); final JTextComponent tcB = (JTextComponent) comboB.getEditor().getEditorComponent(); tcB.getDocument().addDocumentListener(new DocumentListener() { ... code that uses comboB ... }); @LawrenceDol (or anyone who reads this in the future) - You can store the `Document` as a field in the parent class (referring to `tc.getDocument()`). Then in any of the changed/remove/insert update methods of the `DocumentListener` the `DocumentEvent.getDocument()` method will return the `Document` that is linked to the `JComboBox`. True you may have to have just a bit of extra logic to keep track of the fact that the two objects are associated with each other. OK so putting aside the ""19"" levels of method call... Having added a document listener when the event occurs I can find no way to tie it to which of the two combo-boxes were changed. At this point a simple timer's looking rather attractive. I stored the last known text for the two CBs and use that to determine which has changed when the document event is fired. If you know how to tie the event back to the component which fired it that would be useful info - since a DocumentEvent is not a standard AWT event or java.util.EventObject. Thanks I'll give this a try. I don't mind Swing as a whole but sometimes working out how to get certain behavior or trap certain events is **FAR** from obvious. The document doesn't really know about the component it's hooked to by design. That way you can have multiple ""views"" of the same document. Rather than a single DocumentListener implementation create a separate one for each combo box. An anonymous class would probably be good here. I added another example using anonymous classes.  You can use somthing like this: JComboBox cbListText = new JComboBox(); cbListText.addItem(""1""); cbListText.addItem(""2""); cbListText.setEditable(true); final JTextField tfListText = (JTextField) cbListText.getEditor().getEditorComponent(); tfListText.addCaretListener(new CaretListener() { private String lastText; @Override public void caretUpdate(CaretEvent e) { String text = tfListText.getText(); if (!text.equals(lastText)) { lastText = text; // HERE YOU CAN WRITE YOUR CODE } } });"
804,A,"How do I get the style of the selected text in a JTextPane? I'm trying to create a simple WYSIWYG editor that will allow users to select text and bold/underline/italicise it. Currently the user can select text right-click it and select bold from a popup menu which ends up applying the bold style to the selected text like so: this.getStyledDocument().setCharacterAttributes(this.getSelectionStart() this.getSelectionEnd()-this.getSelectionStart() boldStyle false); The bold style is set up like so: boldStyle = this.addStyle(""Bold"" null); StyleConstants.setBold(boldStyle true); What I would like to know is if it is possible to get the style for the currently selected text so that if a user attempts to ""bold"" some text that is already bold I can detect this and write code to un-bold this text instead of simply applying the bold style to it again? Something like: if(!this.getStyledDocument().getStyleForSelection(this.getSelectionStart() this.getSelectionEnd()-this.getSelectionStart()).isBold()){ //do bold } else{ //un-bold } Would be a dream come true but I have no hope for this. What I'm realistically hoping for is to either be told I'm doing it wrong and be shown ""the way"" or to be pointed in the direction of a round-a-bout method of achieving this. Thank you very much for your time. The easiest way to do this is via the StyledEditorKit: JTextPane text = new JTextPane(); JButton button = new JButton(""bold""); button.addActionListener(new StyledEditorKit.BoldAction()); JFrame frame = new JFrame(""Styled""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(new BorderLayout()); frame.add(button BorderLayout.NORTH); frame.add(text BorderLayout.CENTER); frame.setSize(600 400); frame.setVisible(true); +1: you might want to check out the other options in StyledEditorKit provides as well. It might come in handy for other aspects of your WYSIWYG editor Thank you very much for this. Again the proper solution was so simple! I deleted the addActionCommand and addActionListener from my popup menu items and used ""bold.addActionListener(new StyledEditorKit.BoldAction());"" which worked perfectly. Thanks again!"
805,A,"Java Swing group of Jbuttons without raised portion I wanted to know how to display a group of JButtons to look like smooth panel without raised portion. thanks One reason to do this is if you're trying to make a button look like a HTML link. SO you want plain text without any indication to the user that it should be pressed? Why? no i had a group of buttons very close to each other and i wanted to give a smooth finish look to buttons. I've often just used standard JLabels and added mouseListeners to make them clickable. Alternatively you could get more advanced and create your own ButtonUI class if you want to really fine-grained control over the rendering of the buttons.  If you want the buttons to be in a row you can put them in a JToolBar and set Rollover to true. This will make flat buttons that with mouse over look raised.  button.setBorder(null); You may want to look at some of the other ""setXXX"" method that control painting as well. can also use button.setBorderPainted(false);"
806,A,Java Swing: Generating dynamic GUI forms from XML I am writing this application in Java where I have a JTree on the left of the JFrame and the item selected in the JTree determines what appears on the right. This is similar to Edit --> Preferences in Thunderbird and several other applications' preferences. Anyhow the main difference is that in my app the stuff on the right is dynamic and needs to be generated at run time using input from a file. What I am after is various ways in which this can be accomplished code snippets or existing frameworks / libraries if they exist. The input file needs to be something higher level than the sort of XML generated during Serialization. No output capability is required. Thanks Perhaps it - http://www.soyatec.com/eface/ - XAML/WPF for Java.  As of now i think one of the most actively used is Swixml. better support compared to JEasy. have been using it for some while now and is very easy to learn too +1 @frewper : Thanks for the heads up!  The JEasy Framework looks to do exactly what you're asking for. But here's a whole list of similar projects: http://java-source.net/open-source/xml-user-interface-toolkits There's a short description for each one and a link to their project page. You'll want to look at a handful of the ones that sound good to you and then try one or two for yourself.
807,A,"How to Use context menu with tray icon in Java? I'm using Netbeans to develop a Java application and I want to create a tray icon at system tray and a popup menu will be display when I right click on tray icon. I have created a jframe and popup menu by drop and drap them. But I have a problem.My popup menu have 2 menu items (Exit and Show Login) but selected menu item is not high-lighted and after I click menu item popup menu is not closed. Here is my code: Declare some global variables SystemTray systemTray = null; Image image = Toolkit.getDefaultToolkit().getImage(""D:/key-16x16.png""); TrayIcon trayIcon = new TrayIcon(image); Create and display system tray icon  systemTray = SystemTray.getSystemTray(); try { systemTray.add(trayIcon); } catch (AWTException ex) { Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE null ex); } Create MouseAdapter and add mouseListener for tray icon MouseAdapter trayIconMouseAdapter = new MouseAdapter() { // @Override public void mouseClicked(MouseEvent e) { trayIconMouseClicked(e); } }; trayIcon.addMouseListener(trayIconMouseAdapter); handle mouse click event on tray icon. Check whether it is a right click and show popupmenu private void trayIconMouseClicked(java.awt.event.MouseEvent evt) { if(SwingUtilities.isRightMouseButton(evt)) { popupMeunu.show(evt.getComponent() evt.getX() evt.getY()); } } But if i drap a button to jframe and replace popupMeunu.show(evt.getComponent() evt.getX() evt.getY()); by popupMeunu.show(jButton1 evt.getX() evt.getY()); everything will be OK. I don't know why?Pls help me to slove my problem. Don't add your own MouseListener. Pass your popupMeunu (which needs to be a java.awt.PopupMenu not javax.swing.JPopupMenu) in the constructor of TrayIcon like that: TrayIcon trayIcon = new TrayIcon(image ""The Tip Text"" popup); I copied this from this tutorial and it worked fine."
808,A,"Why/When ComponentListener.componentShown() get invoked? Why this code never prints ""Hello2"" ? public class Test4 { public static void main(String[] args) { JFrame f = new JFrame(); JPanel p = new JPanel(); f.getContentPane().add(p); JLabel x = new JLabel(""Hello""); p.add(x); p.addComponentListener(new ComponentListener() { public void componentResized(ComponentEvent arg0) { System.err.println(""Hello1""); } public void componentMoved(ComponentEvent arg0) { } public void componentShown(ComponentEvent arg0) { System.err.println(""Hello2""); } public void componentHidden(ComponentEvent arg0) { } }); f.setVisible(true); f.pack(); } } From Java Tutorials The component-hidden and component-shown events occur only as the result of calls to a Component 's setVisible method. For example a window might be miniaturized into an icon (iconified) without a component-hidden event being fired.  I would guess that it's called when the visibility state of the actual object changes. in this case you change the visibility of the Frame not of the Panel. (by default Frame starts hidden but panels are visible) try to add the listener to the frame. yes that is right i re-read the api doc. Thank you.  AWT's definition of ""visible"" may be a bit counter-intuitive. From the Javadoc of java.awt.Component#isVisible: ""Components are initially visible with the exception of top level components such as Frame objects."" According to this description p is already visible before you add the ComponentListener. In fact you can verify this if you insert a System.out.println(p.getVisible()); anywhere before you call f.setVisible(true). In that sense the visibility is not changed when displaying the frame and hence componentShown(..) is not called."
809,A,"JComboBox With Larger Drop Down Width The problem: I have a combo box that needs to fit into a fixed space as part of a Swing application. However its contents may be quite long. I'd like the box itself to be a fixed size truncating contents. When the down arrow is clicked though I'd like it to act similar to an HTML select and show a box that is long enough to fit the longest entry as the drop down. The ListCellRenderer may be the way to go on this one; I'm not sure. It also may be that I need some sort of implementation of javax.swing.plaf.basic.ComboPopup and my own ComboBoxUI. I've dug through the SwingUtilities code to understand how the DefaultListCellRenderer does its calculations. It uses a JLabel and the BasicLabelUI calls SwingUtilities.layoutCompoundLabel (eventually in the call stack) which does the clipping. BasicComboPopup the only implementation of ComboPopup in the Java 6 code I was digging through seemed to delegate to: JList.computeVisibleRect(Component c Rectangle visibleRect) Has anyone done this before? Any pointers? Here is a good starting point :) http://www.crionics.com/products/opensource/faq/swing_ex/JComboBoxExamples1.html EDIT: Wayback link: http://web.archive.org/web/20070607203953/http://www.crionics.com/products/opensource/faq/swing_ex/JComboBoxExamples1.html There _was_ a good starting point... @CostisAivalis fixed that with Wayback machine. Wow! Great idea!  JComboBox by anonymous with variable-width dropdown. Note that this is Metal LAF only. import java.awt.*; import java.util.*; import javax.swing.*; import javax.swing.plaf.metal.*; import javax.swing.plaf.basic.*; /** * @version 1.0 12/12/98 * updated 2012-02-18 to include @Overrides and other Java needs */ class SteppedComboBoxUI extends MetalComboBoxUI { @SuppressWarnings(""serial"") @Override protected ComboPopup createPopup() { BasicComboPopup popup = new BasicComboPopup( comboBox ) { @Override public void show() { Dimension popupSize = ((SteppedComboBox)comboBox).getPopupSize(); popupSize.setSize( popupSize.width getPopupHeightForRowCount( comboBox.getMaximumRowCount() ) ); Rectangle popupBounds = computePopupBounds( 0 comboBox.getBounds().height popupSize.width popupSize.height); scroller.setMaximumSize( popupBounds.getSize() ); scroller.setPreferredSize( popupBounds.getSize() ); scroller.setMinimumSize( popupBounds.getSize() ); list.invalidate(); int selectedIndex = comboBox.getSelectedIndex(); if ( selectedIndex == -1 ) { list.clearSelection(); } else { list.setSelectedIndex( selectedIndex ); } list.ensureIndexIsVisible( list.getSelectedIndex() ); setLightWeightPopupEnabled( comboBox.isLightWeightPopupEnabled() ); show( comboBox popupBounds.x popupBounds.y ); } }; popup.getAccessibleContext().setAccessibleParent(comboBox); return popup; } } @SuppressWarnings(""serial"") public class SteppedComboBox extends JComboBox { protected int popupWidth; public SteppedComboBox(ComboBoxModel aModel) { super(aModel); setUI(new SteppedComboBoxUI()); popupWidth = 0; } public SteppedComboBox(final Object[] items) { super(items); setUI(new SteppedComboBoxUI()); popupWidth = 0; } @SuppressWarnings(""unchecked"") public SteppedComboBox(Vector items) { super(items); setUI(new SteppedComboBoxUI()); popupWidth = 0; } public void setPopupWidth(int width) { popupWidth = width; } public Dimension getPopupSize() { Dimension size = getSize(); if (popupWidth < 1) popupWidth = size.width; return new Dimension(popupWidth size.height); } }"
810,A,How to do file uploads via a Java applet? Specifically how can I: Show a button which will let the user browse through his computer and select a file Show a progress bar as the files are uploaded And store the files to a location on the server of the website on which the applet is being run Any ideas? And yes I must do this in an applet and I will make it a trusted/signed applet have looked into all that. This question sounds familiar... I've had to do just this with very large (4Gb+) files. The piece of code at the bottom of this Google Answers post helped me out a LOT: http://answers.google.com/answers/threadview?id=193780 It showed a way of uploading files chunked into smaller bits so you can easily use a JProgressBar. Will this work if the server-side is written in PHP rather than a servlet? It should if you can read in binary data in PHP and append it to a file. I'm not so great at PHP so I can't say with certainty. Yes it can do all that. So what the client is basically doing is breaking the file into X chunks then uploading one chunk at a time. The servlet then takes the chunk and appends it to the file on server. Is that right? And if so how does the servlet know the name of the file it should append to? is that passed on by the client? 1 more thing is it possible to upload those chunks of data as a string so they'll be treated like a regular string by the server side? if we did it as a multipart file upload php might not be able to handle it if the file is incomplete because it might come off as corrupt You could but I'm not sure I'd recommend it. I don't think the file would be corrupt though.  I would load/stream in the file convert it to Base64 (or not) and send a POST request (using URLConnection) containing it to a servlet at the other end. From a client side viewpoint its easier than doing a multi-part/form-data file upload and have the Commons FileUpload wait for it on the other end1 in my opinion. 1 unless there are libraries available to do just that easily on the client side. How would i show a progress bar for it if I just did a POST to a server-side servlet / PHP script? If you don't want a 'sub-realistic' progress indication Show a JProgressBar with setIndeterminate(true) - then it just 'bounces' back and forth during the upload. If you want a realistic progress bar perform the write() to the URLConnection in batches of some KB of data count the bytes written and pass the percentage to the progress bar. Although the solutions suggested by others are better than mine.  I'm bored. I think I'll just copy the links from the last time I answered this question. Signed Applet JFileChooser JProgressBar JButton Apache HttpClient's PostMethod with a MultipartRequestEntity that wraps the JFileChooser's file in a FilePart).  There is no need to sign the applet since 6u10. Instead you can use the FileOpenService to read the file through a standard Swing file chooser (technically implementation dependent). Then it is just a matter of sending the file back as a browser would with a multipart MIME HTTP POST. Is 6u10 fairly well adopted? Yeah. Of course some people are running jview (nice and secure!!). The last SSR (Synchronized Security Release) was for 6u13 (which Mac OS X users have) and so everyone(!) should have autoupdated to at least that. The 5.0 releases train is still supported but due to complete its End Of Service Life in a few months from now. How do you suggest showing a progress bar for this? Especially if the server-side is a PHP script rather than a servlet? It shouldn't matter what the server side is. So long as the network dominates performance (and I think even PHP can cope with calling a library function to copy some bytes). Copy which bytes? I'm new to java can you explain what the server servlet is doing? The server side is identical as if this had been a file upload through an HTML form. It need not communicate back to the client (any more than any other HTML POST does) during the upload. The client can quite easily figure out how much of the file has been uploaded (other than a little bit of uncertainty due to buffering).
811,A,"Refresh JPanel I need to display different drawings on a JPanel. I have put the drawing files into an array but when I changed it using a button the JPanel only displays first drawing and doesn't change to the next drawing... I have called panel.revalidate() but it doesnt work. This is the segment of the code that I used but not working. The JPanel display was static.  String[] a = {""image1.txt""""image2.txt""""image3.txt""}; List<String> files = Arrays.asList(a); public void actionPerformed(ActionEvent e) { if (e.getSource() == answer1){ fileNumber++; //call other class for painting (files=array files fileNumber=index of the array) draw = new drawingPanel(filesfileNumber); panel.add(draw); } panel.revalidate(); panel.repaint(); } Are you only displaying one drawing at a time? If so you may want to try using a CardLayout so you can switch between drawings easily. See http://java.sun.com/docs/books/tutorial/uiswing/layout/card.html for an example. I had a similar issue the other day attempting to dynamically display different buttons on my UI depending which tab of a JTabbedPane the user picked. CardLayout was just the thing to make things easy. yes one drawing at a time.My program quite similar with the example that u suggest to have a look. How ever I still cant change the drawing...this is so confusing me. Let me show the segement of the code in Answer. The code is similar to my failed attempts. Use CardLayout on the panel; each drawingPanel instances is a new card. See http://grocerylister.cvs.sourceforge.net/viewvc/grocerylister/grocerylister/src/grocerylister/ui/MainFrame.java?revision=1.91.4.75&view=markup&pathrev=release_0_2_0_dev for example SO limits comments to 300 characters so I'll continue here. Search the linked code for ""cardPanel"" to see what I'm doing there. Hopefully you'll be able to adapt it for your (slightly more complex) needs. Hi ssakl...thanks for the example. I now can display the drawing after add the code removeAll() before draw.  You might try keeping a reference to your drawingPanel and calling remove() on the existing drawingPanel before re-adding it. According to the JPanel JavaDoc the layout is FlowLayout by default - which will not replace the image like you are intending but will instead place the next drawingPanel to the right of the previous one. (what happens when you resize the window?) By the way how do you handle the case where you get past the last image in the array? Dear Mike...Thanks a million for suggesting the code remove(). Now the JPanel display different drawing everytime I click button. Oh!! I couldnt believe it just one word ..remove() and it costs me tears & sleepless night for so many day!! Oh I missed to answer you question. When I pass the last image I add the system.exit code to close it."
812,A,"Java SwingWorker hanging I'm debugging some code that was written using a SwingWorker to perform a mix of numerical calculation and GUI update. The SwingWorker hangs with the following stack trace : Full thread dump Java HotSpot(TM) Client VM (14.3-b01 mixed mode sharing): ""SwingWorker-pool-3-thread-4"" prio=6 tid=0x07fd7c00 nid=0x143c waiting on condition [0x0a33f000] java.lang.Thread.State: TIMED_WAITING (sleeping) at java.lang.Thread.sleep(Native Method) at sum.ee.ui.modelviewer.ModelViewer$ModelAnimator.doInBackground(ModelViewer.java:940) at sum.ee.ui.modelviewer.ModelViewer$ModelAnimator.doInBackground(ModelViewer.java:877) at javax.swing.SwingWorker$1.call(SwingWorker.java:274) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at javax.swing.SwingWorker.run(SwingWorker.java:313) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619) ""SwingWorker-pool-3-thread-3"" prio=6 tid=0x07fd7000 nid=0x11a8 waiting for monitor entry [0x0a2af000] java.lang.Thread.State: BLOCKED (on object monitor) at java.awt.Component.resize(Component.java:2044) - waiting to lock <0x24b936a0> (a java.awt.Component$AWTTreeLock) at java.awt.Component.setSize(Component.java:2035) at java.awt.Component.resize(Component.java:2069) at java.awt.Component.setSize(Component.java:2060) at javax.swing.JViewport.setViewSize(JViewport.java:1038) at javax.swing.ViewportLayout.layoutContainer(ViewportLayout.java:183) at java.awt.Container.layout(Container.java:1421) at java.awt.Container.doLayout(Container.java:1410) at jsyntaxpane.components.LineNumbersRuler.updateSize(LineNumbersRuler.java:109) at jsyntaxpane.components.LineNumbersRuler.removeUpdate(LineNumbersRuler.java:203) at javax.swing.text.AbstractDocument.fireRemoveUpdate(AbstractDocument.java:243) at jsyntaxpane.SyntaxDocument.fireRemoveUpdate(SyntaxDocument.java:118) at javax.swing.text.AbstractDocument.handleRemove(AbstractDocument.java:608) at javax.swing.text.AbstractDocument.remove(AbstractDocument.java:576) at javax.swing.JEditorPane.setText(JEditorPane.java:1493) at sum.ee.ui.SourceCodePanel.clearSourcePane(SourceCodePanel.java:256) at sum.ee.ui.SourceCodePanel.access$100(SourceCodePanel.java:47) at sum.ee.ui.SourceCodePanel$1.stateChanged(SourceCodePanel.java:209) at sum.ee.ui.VisualizationAggregator.fireStateChanged(VisualizationAggregator.java:300) at sum.ee.ui.VisualizationAggregator.update(VisualizationAggregator.java:97) at sum.ee.ui.modelviewer.ModelViewer$ModelAnimator.doInBackground(ModelViewer.java:918) at sum.ee.ui.modelviewer.ModelViewer$ModelAnimator.doInBackground(ModelViewer.java:877) at javax.swing.SwingWorker$1.call(SwingWorker.java:274) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at javax.swing.SwingWorker.run(SwingWorker.java:313) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor $Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619) My understanding is that GUI work should not be done inside of doInBackground() but rather in done(). I performed a naive experiment where I moved all of the code in doInBackground() into done() and it still didn't work. Is there any tips that folks can give me on what I can do to root cause this issue? The code looks like this : protected Void doInBackground() { isAnimating = true; resetButtonBackgrounds(); backgroundColor = new Color(175 255 175); // Soft Green JToggleButton b = null; for (final int index : modelIndices) { if (index == modelIndices.get(modelIndices.size() - 1)) { backgroundColor = defaultBackgroundColor; } if (!keepTrace) { // Resetting the backgrounds is necessary to have // individual display of the changing elements due to // the fact that there can be multiple nodes per // source line. The reset works in combination // with updating from ModelViewer.this (as opposed // to the 'this' of ModelAnimator instances) due // to not sending an event to itself. Furthermore // if the event was sent from ModelAnimator the model // indices are recalculated causing a jump when multiple // element source lines are encountered. resetButtonBackgrounds(); } aggregator.modelIndex(index); aggregator.update(ModelViewer.this); b = getButtonByIndex(index); scrollRectToVisible(b.getBounds()); ModelViewer.this.repaint(); try { StaticTools.sleepAtLeast(sleepTimeMilliseconds); } catch (final InterruptedException ex) { // continue with thread } } isAnimating = false; if ( b != null) { Color orig = b.getBackground(); Color blink = Color.PINK; Color current = orig; for (int i = 0; i < 100; i++) { try { Thread.sleep(100); } catch (InterruptedException ex) { } if (current == orig) { current = blink; } else { current = orig; } b.setBackground(current); ModelViewer.this.repaint(); } } return null; } The other clue is that there are two SwingWorker threads that execute. Can they be running the same thread? UPDATE: Here is the code that executes the SwingWorker : public final void animate(final long delayBetweenUpdatesMilliseconds final List modelIndices final boolean keepTrace final List propertyChangeListeners) { ModelAnimator modelAnimator = new ModelAnimator(delayBetweenUpdatesMilliseconds modelIndices keepTrace); for (final PropertyChangeListener listener : propertyChangeListeners) { modelAnimator.addPropertyChangeListener(listener); } modelAnimator.execute(); } I'm no expert but it looks like you have a deadlock. What does the code look like that is calling that method? Hi Chad thanks for the response. I thought if I had a deadlock the stack trace would have shown it - thats usually what it does. The code that calls this simply does execute() on the SwingWorker. Might be the consecutive calls to sleep(). The thread may still be sleeping when you make the second call to sleep and that may be the reason for the deadlock. I've always just created an instance of the runnable object for worker threads. I was assuming a deadlock because the stacktrace says the monitor of an object was blocked and one was waiting for condition. Don't forget that the reference to any objects created within the thread needs to be returned to the caller otherwise they only exist in that thread. Astute observation regarding the sleep. I think its possible that both threads are sleeping forever because of the way this was written. I'll update soon. This is a failure to observe the Swing EDT rules. The purpose of SwingWorker is to do heavy nonGUI tasks when a UI event occurs that would otherwise block the UI then update the UI at the end. So you would implement your weight lifting inside doInBackground(); then once finished swing would call done() on the EDT and you can retrieve the results using get(). The problem here is you are doing GUI work in the new thread SwingWorker has created. This can lead to deadlocks and concurrency issues. This includes the creation of said GUI objects which should be in runnables even if your already on the EDT Actions such as: b = getButtonByIndex(index); Should be encased in a Runnable with InvokeandWait. Stuff that actually modifies the GUI itself especially need to be in their own runnables even if your already in the swing event dispatch thread responding to a button press or change you run the risk of working on objects your already working on. e.g. swing is working on and locked A to let you do work letting you do work on B attempting to lock and work on A"
813,A,"Selection of embedded items in a JTextPane A JTextPane lets you embed JComponents and images. When you select a section of the document the text is highlighted but the embedded items are not. You can have the embedded components notified by way of a CaretListener after the event but I was wondering if there was a way to have them highlighted during mouse selections? I've done a bit more digging and I strongly suspect the way to go is to install a custom Highlighter on the JTextPane. I'll try this out tomorrow and add an answer if I can get it to work. Well I did something similar long long back. In my cases the embedded components were smileys in a chat editor. What you do is that when a selection happens you get the mark and the dot(e.getMark e.getDot). If the smiley lies between the mark and the dot then it is supposed to be highlighted so you set a field in the smiley component telling to be highlighted and put a repaint request. Finally in the paint(g) method of the smiley component you just paint it as highlighted. ""You can have the embedded components notified by way of a CaretListener after the event but I was wondering if there was a way to have them highlighted during mouse selections""  Install a custom Highlighter into the JTextPane which can inform the embedded components when they need to be highlighted or not: textPane.setHighlighter( new CustomHighlighter() ); // ... private final class CustomHighlighter extends DefaultHighlighter { @Override public Object addHighlight( int p0 int p1 HighlightPainter p ) throws BadLocationException { Object tag = super.addHighlight(p0 p1 p); /* notify embedded components ... */ return tag; } @Override public void removeHighlight( Object tag ) { super.removeHighlight(tag); /* notify embedded components ... */ } @Override public void removeAllHighlights() { super.removeAllHighlights(); /* notify embedded components ... */ } @Override public void changeHighlight( Object tag int p0 int p1 ) throws BadLocationException { super.changeHighlight(tag p0 p1); /* notify embedded components ... */ } }  YOu could use a MouseMotionListener and handle the mouseDragged event. You would then need to use the viewToModel() method to know which part of the model was being selected."
814,A,"How do I disable the Cancel Button when using javax.swing.ProgressMonitor? I'd like to make use of ProgressMonitor's functionality but I don't want to give the user the option of canceling the action. I know if I don't call isCanceled() then the button press has no effect but I'd prefer not to have the user believe the program is unresponsive. How shall I go about doing this? First question is why don't you want the user to be able to cancel the action? If it takes that long why shouldn't they be able to decide that they don't want to wait for it? If you really don't want the cancel button you'll have to bite the bullet and create your own progress dialog. You could look at the ProgressMonitor source to see how they do it (they use a JOptionPane for the dialog and pass it a couple of Strings and a JProgressBar).  You can't. Make your own dialog using a JProgressBar as described in The Java Tutorial.  I know this post is a little old but the first answer on google so i'll post my answer... I've no solution to disable the cancel button but I use this tip: redisplay the progress monitor when cancel is clicked. public void propertyChange (PropertyChangeEvent event) { if (event.getPropertyName().equals(""progress"")) { int progress = ((Integer) event.getNewValue()).intValue(); lastProgress = progress; progressMonitor.setProgress(progress); } if (progressMonitor.isCanceled()) { progressMonitor = new ProgressMonitor(panel """" """" 0 100); progressMonitor.setMillisToDecideToPopup(0); progressMonitor.setMillisToPopup(0); progressMonitor.setProgress(lastProgress); } } Of course you'll have to remember the last progress value. This solution is a bit uggly but it works for me. Yves  I don't know why all ProgressMonitor fields are private. Probably not Mr. Godsling's proudest creation :)  * @author James Gosling * @author Lynn Monsanto (accessibility) * @version 1.37 04/12/06 Just clone it along with some package private stuff from Swing then you can do whatever you want like add a flag for cancelability and use it in ProgressOptionPane's constructor. (UPDATE) If you can't derive JDK code under SCSL then here is a devious way to get hold of the JDialog then you can do anything you want including removing the Cancel button: progressMonitor = new ProgressMonitor(ProgressMonitorDemo.this ""Running a Long Task"" """" 0 100); progressMonitor.setMillisToDecideToPopup(0); progressMonitor.setMillisToPopup(0); progressMonitor.setProgress(0); JDialog dialog = (JDialog)progressMonitor.getAccessibleContext().getAccessibleParent(); JOptionPane pane = (JOptionPane)dialog.getContentPane().getComponent(0); pane.setOptions(new Object[]{}); It's ugly and it's totally dependent on ProgressMonitor's implementation. So you should check for ClassCastException and null. Why do you need to set both time periods to 0? Otherwise the dialog is not created in setProgress."
815,A,"What is the best testing tool for Swing-based applications? While we try to set up as many unit tests as time allows for our applications I always find the amount of UI-level tests lacking. There are many options out there but I'm not sure what would be a good place to start. What is your preferred unit testing tool for testing Swing applications? Why do you like it? Thanks! related: http://stackoverflow.com/questions/91179/automated-tests-for-java-swing-guis Consider Marathon (http://www.marathontesting.com/Home.html)--tests are written in Jython so it's easy to write any sort of predicates based on object state.  try pounder : http://pounder.sourceforge.net/  I had the chance to play around with QF-TEST once. It is commercial but offers a lot of functionality. Maybe you have a look at it: http://www.qftest.de/en/index.html  Not an answer but a refining. Record-and-playback is the wrong thing to want. Teams need the ability to write tests before the code has been written. Otherwise the coders finish their work and wait around while the testers scramble to record tests (interrupted by fixes when they spot issues). In a BDD/TDD/ATDD kind of setup you really need some kind of tool that allows you to script tests for code that hasn't been written yet specifying UI element names and the like. Are there tools that work for non-waterfall testing?  I can highly recommend QFTest. I have used it for my commercial product and it works very well with almost zero code (my app requires the use java client APIs for some things). It handles identification of swing components well and is pretty tolerant of updates to your GUI - (resizingrepositioning and adding components does not break existing tests). I have done major updates to functionality and have my tests still work. Its expensive but I think it will pay itself off in a couple of months. Before QFTest I tried: 1) Automatedqa - good tool but windows centric and does not understand Swing. Similar to Quick test Pro. 2)UISpec4J - After devoting a solid 50 hour week to this I had issues with fragility and the arcane java code it produced. Using it was just too arduous - trying to debug/update hundreds of lines of java performing a sequence of a dozen GUI operations just did not work for my brain. I ended up avoiding writing tests because it much more complicated than actually writing the app itself!  On our side we use to test SWING GUI with FEST. This is an adapter on the classical swing robot but it ease dramatically its use. Combined with TestNG We found it an easy way to simulate ""human"" actions trough the GUI.  You can try to use Cucumber and Swinger for writing functional acceptance tests in plain english for Swing GUI applications. Swinger uses Netbeans' Jemmy library under the hood to drive the app. Cucumber allows you to write tests like this:  Scenario: Dialog manipulation Given the frame ""SwingSet"" is visible And the frame ""SwingSet"" is the container When I click the menu ""File/About"" Then I should see the dialog ""About Swing!"" Given the dialog ""About Swing!"" is the container When I click the button ""OK"" Then I should not see the dialog ""About Swing!"" Take a look at this Swinger video demo to see it in action.  If your target application has custom components I would definitely recommend Marathon to automate your tests. I was given the task of automating an application with several extremely complicated custom components written in-house from the ground up. I went through a review process that lasted two months in which I made the decision on which test tool to use from a list of close to 30 test tools that were available both commercial and FOSS. It was the only test tool that was able to successfully automate our particular custom components; where IBM's Rational Functional Tester Microfocus' TestPartner QF-Test Abbot & FEST failed. I have since been able to successfully integrate the tests with Cruise Control such that they run upon completing each build of the application. A word of warning though: 1) it is rather rough around the edges in the way it handles JTables. I got around this by writing my own proxy class for them. 2) Does not support record/replay of drag-and-drop actions yet. Very interesting informations. Any feedback on http://frankenstein.openqa.org/? Hi Pascal unfortunately Frankenstein wasn't one of those that I did try. I looked at the presentation on the link and I can say that it does look rather similar to Marathon in terms of proxy classes and OGNL-style assertions. Differences: Marathon doesn't appear to have inbuilt threading support or i18n support. Looks interesting.  I like Jemmy the library written to test Netbeans."
816,A,How can I capture all mouse events in a JFrame/Swing? I have a JFrame that has a large number of changing child components. (Many layers) Is there any way to add a listener for all mouse events? Something like KeyEventDispatcher? why is this community wiki? Implement all mouse-related listeners in a class and register that class as the handler for all mouse related events Mouse Related interfaces would be MouseListener MouseMotionListener MouseWheelListener This doesn't work since only a single component in the hierarchy is going to publish the mouse event. So this would require registering the mouse listener(s) on every component in the hierarchy.  You could add a GlassPane over your entire JFrame add a MouseInputAdapter to it to grab all possible mouse events and then use [SwingUtilities.getDeepestComponentAt()][3] to get the actual component and [SwingUtilities.convertMouseEvent()][4] to delegate the mouse event from the glass pane to the actual component. However I'm not sure of the performance impact of this - unlike KeyEventDispatcher which just needs to fire an event whenever a key is pressed multiple events are generated as the user moves the mouse - and unlike KeyEventDispatcher you need to re-send the event to the lower component for it to handle it. (Sorry - stackoverflow isn't handling the links to the SwingUtilities methods correctly... links are showing below rather than in the text.) [3]: http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/SwingUtilities.html#getDeepestComponentAt(java.awt.Component int int) [4]: http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/SwingUtilities.html#convertMouseEvent(java.awt.Component java.awt.event.MouseEvent java.awt.Component)  You might want to implement a subclass of MouseAdapter an abstract class that provides empty implementations of all of the methods defined in the Mouse*Listener Interfaces. Once you do that you can register it with your child components as a MouseListener when they are created. As you indicate that your components are 'changing' you will want to make sure the you also unregister your listener if you hope to release your components during the lifecycle of your JFrame. MouseInputAdapter - MouseAdapter is only an implementation for MouseListener (clicks no motion or scroll wheel). Nate thanks for the reply. Looking at the code I see that MouseAdapter implements all three interfaces.  You have to use JFrame's glassPane: http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/JFrame.html#getGlassPane() Just get the glass pane of a JFrame with frm.getGlassPane() and use addMouseListener() on it to capture all mouse event inside the window.  Use an AWTEventListener to filter out the MouseEvents: long eventMask = AWTEvent.MOUSE_MOTION_EVENT_MASK + AWTEvent.MOUSE_EVENT_MASK; Toolkit.getDefaultToolkit().addAWTEventListener( new AWTEventListener() { public void eventDispatched(AWTEvent e) { System.out.println(e); } } eventMask); +1 better answer than mine. This is not allowed in unsigned applets
817,A,"Java JList scroll to selected item I have a JList with a lot of items in it of which one is selected. I would like to scroll to the selected item in this JList so the user can quickly see which item is selected. How can I do this? String[] data = {""one"" ""two"" ""three"" ""four"" /* AND A LOT MORE */}; JList dataList = new JList(data); JScrollPane scrollPane = new JScrollPane(dataList); This should do it: dataList.ensureIndexIsVisible(dataList.getSelectedIndex());  Or if multi-selection is enabled : dataList.scrollRectToVisible( dataList.getCellBounds( dataList.getMinSelectionIndex() dataList.getMaxSelectionIndex() ) ); its dataList.getMinSelectionIndex() however the answer is still useful for me :) Thanks - edited code from `Selelected` to `Selection`  You can use the ensureIndexIsVisible method http://java.sun.com/javase/6/docs/api/javax/swing/JList.html#ensureIndexIsVisible(int) Scrolls the list within an enclosing viewport to make the specified cell completely visible. This calls scrollRectToVisible with the bounds of the specified cell. For this method to work the JList must be within a JViewport."
818,A,Problem with Swing GUI on Macintosh I am new to Swing. Are there any specific issues related to customizing the paint operation on the Mac? I have developed a sample application using NetBeans + Swing on Windows. It is working fine. But if I run the same application on a Mac panels' buttons' labels don't appear on the screen. Only when the mouse over operation is performed on particular component does it get displayed on the screen. Kindly can anyone help me out in solving this issue? Thanks in advance. sakkiharry Since Swing paints all UI itself it is not really influenced by Mac OS. There are exceptions though. If you allow Java to use a native menu the menu will behave like any other Swing menu but it is in fact translated to native menu functions (so it will be displayed on top of screen and behave like a native Mac OS X menu... nothing you as programmer need to care about but great for Mac users who hate menus to appear elsewhere). I guess your issue is probably something else but it's hard to guess if I have no code to work with. Can you break down the issue into an ultra minimal test case? E.g. can you just draw a JFrame add a singe one of your custom buttons there that shows the problematic behavior and just use as much code as is necessary to paint this minimal UI and expose the problem? If you'd post this code here I'd take a closer look into it and will try to find out what causes the issue and how to resolve it (I'm a graduated Java programmer but I also have years of Mac OS X development experience; so these are two fields of knowledge I should know really well but I usually don't combine them as I don't develop in Java for Mac OS X).
819,A,How can create a task that pops up the busy label and is cancelable while executing? I am writing an application in java (1.6) using swing. I currently have a JXBusyLabel on a JXLayer over the content area of my program acting as a busy indicator. I want to provide a way to allow others working with me to create a task that pops up the busy label while it's executing. The catch is the task must be cancel-able. What is the best way to expose the functionality I desire? Some ideas I've come up with: Raw access to setBusy() This is obviously the easiest for me but requires users know and understand swing threading issues. public <T> Future<T> execute(Callable<T>) Wraps the callable in a FutureValue that is run() on a separate thread and returns that FutureValue. The question then becomes how to keep track of all FutureValue's generated and how to ensure that they can be cancelled. (e.g. cancel(true) always cancels) I have never used the concurrency package in Java before and it didn't exist back when I 'learned' Java. So I am open to completely new and different ways of implementing this functionality. Edit: Clarification of my question. I know about SwingWorker. I've just never used it. What I want to know is this: Given a Callable (Java version of a closure?) How can I: Return the value of call() to the user w/o blocking (I think I need to use a Future for this) Tell the JXLayer to lock (starts painter) execute the supplied callable and then unlock the JXLayer (stops painter) Ensure that no matter what thread calls my busyExec() function the GUI remains responsive and the background task completes. (NOTE: If I return some sort of Future object and they call get() on the event thread it can/will block and that is ok) I guess my main stumbling point is how to implement #2. Should I have busyExec() spin off a new thread that blocks until no background tasks are running? Should I try for some sort of queue. Is there an object that will do this all for me already? Okay. For anyone interested here is what I am currently using to implement my request. I have a method that will take a Callable<T>. It then creates a FutureTask<T> this will be returned to the caller as a this as a Future<T>. The JXBusyLabel and JXLayer are told to start painting and to lock the ui. The FutureValue and Thread (see below) is enqueued in a special list. A Runnable is created that: calls run() on the FutureTask removes the FutureValue (and thread) from the list and if the list is empty unlocks the JXLayer and stops the JXBusyLabel. This Runnable is launched in a new Thread with normal priority. When the user hits the cancel button. The list is iterated over and the FutureTasks are all canceled and removed from the list if they could be cancelled. First try cancel(false) then cancel(true). If both those means fail the user is prompted with a warning asking them if they want to Thread.stop() the task and explains that this could make the app unstable. If yes stop() the thread running the task. This might bring the app down. In all cases the UI is unlocked. The documentation for other team members states that they must be aware that the task can be killed. They are not to call get() until isDone() is true. They are explicitly told that this will basically force them to block until the task is done or cancelled. So they can't call it from the event dispatch thread. Other solutions are still welcome  The SwingWorker (of Java 6) implements Future so it seems like it has the ability to cancel tasks via the cancel method. More information on SwingWorker from The Java Tutorials: Lesson: Concurrency in Swing Worker Threads and SwingWorker Canceling Background Tasks
820,A,"BoxLayout can't be shared error I have this Java JFrame class in which I want to use a boxlayout but I get an error saying java.awt.AWTError: BoxLayout can't be shared. I've seen others with this problem but they solved it by creating the boxlayout on the contentpane but that is what I'm doing here. Here's my code: class edit_dialog extends javax.swing.JFrame{ javax.swing.JTextField title = new javax.swing.JTextField(); public edit_dialog(){ setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE); setTitle(""New entity""); getContentPane().setLayout( new javax.swing.BoxLayout(this javax.swing.BoxLayout.PAGE_AXIS)); add(title); pack(); setVisible(true); } } I think that one important thing to highlight from the previous answers is that the BoxLayout's target (the first parameter) should be the same Container that the setLayout method is being called upon as in the following example: JPanel XXXXXXXXX = new JPanel(); XXXXXXXXX.setLayout(new BoxLayout(XXXXXXXXX BoxLayout.Y_AXIS)); Good principle =]  I've also found this error making this: JPanel panel = new JPanel(new BoxLayout(panel BoxLayout.PAGE_AXIS)); The JPanel isn't initialized yet when passing it to the BoxLayout. So split this line like this: JPanel panel = new JPanel(); panel.setLayout(new BoxLayout(panel BoxLayout.PAGE_AXIS)); This will work. just ran into this. thanks! Just got this same issue thanks YES THANK YOU :D  Your problem is that you're creating a BoxLayout for a JFrame (this) but setting it as the layout for a JPanel (getContentPane()). Try: getContentPane().setLayout( new BoxLayout(getContentPane() BoxLayout.PAGE_AXIS) ); Thanks worked perfectly :D Of course you don't need the first getContentPane... :-) Yes but removing it would confuse the issue now wouldn't it?"
821,A,"Java Swing custom text JEditorPane I have a list of Objects (the model) that are constantly appended to (similar to a log file) and I'd like to display as rich text in a JEditorPane (the view). How can I glue them together? http://java.sun.com/docs/books/tutorial/uiswing/components/generaltext.html#document doesn't seem to give enough information to use. What class(es) are used as Objects (model) ? I have a Vector of proprietary objects - each containing a String plus other information. Ideally some sort of custom renderer would style and append to the text pane but I can't figure out how to hang it together. You can use DefaultStyledDocument together with AttributeSet: SimpleAttributeSet attr = new SimpleAttributeSet(); StyleConstants.setBold(attr  true); StyleConstants.setForeground(attr Color.RED); document.insertString(document.getLenght()""yourstring"" attr))  Building a custom Abstract Document is painful. You're better off with an intermediary model that listens to changes in both your Object Model and the document (with a DocumentListener) and updates either the model or view depending. This works pretty well if you're working in user time (as opposed to updating the Object model 1000 times per second). The way I understand it - models for Editor Panes must be Documents. If you do not implement Document how can your custom model be added? I meant to use one of the standard StyleDocuments and just manipulate text and and attributes.  One simple solution would be to convert each object in the model to HTML and append the strings to create an HTML document that can be set on the JEditorPane. Yes this would be the simplest solution but I wanted to rerender the data when a user wished to change their color scheme or filter the data. I guess the whole data could be re-appended after any event. If that is the case I think you might be better using a JTable. It would be easier to make a TableModel for your objects than try to make a Document. You could then apply filters to your table model and change table renederer settings for color etc.  OK so the simplest approach was to extend JTextPane. The extended class created and managed the underlying list. On format change (eg new colours) the list completely reformats the data. The only real problem was that the auto-scrolling is not 100% reliable Both: Container parent = getParent(); // get the parent until scroll pane is found while (parent != null && !(parent instanceof JScrollPane)) { parent = parent.getParent(); } if (parent != null) { JScrollPane scrollPane = (JScrollPane)parent; scrollPane.getVerticalScrollBar().setValue(scrollPane.getVerticalScrollBar().getMaximum()); } and scrollRectToVisible(new Rectangle(0 getHeight() - 2 1 1)); Provide inconsistent results with the text pane sometimes not scrolling all the way."
822,A,"Cannot set mnemonic in JLabel with HTML text The following associates a JLabel with a JTextArea and sets a mnemonic that decorates the label. Pressing Alt-X on Windows moves the focus to the JTextArea.  JTextArea textArea = new JTextArea(10 20); JLabel label = new JLabel(""Text""); label.setLabelFor(textArea); label.setDisplayedMnemonic(KeyEvent.VK_X); However if the label uses HTML the label is displayed as expected but it is not decorated with the mnemonic.  JTextArea textArea = new JTextArea(); JLabel label = new JLabel(""<html>Text</html>""); //!!! NO DECORATION label.setLabelFor(textArea); label.setDisplayedMnemonic(KeyEvent.VK_X); Is this expected behavior? Any workarounds? Edit 1: Modified the example to use a mnemonic that isn't part of the HTML tag based on Aziz' response. Edit 2: Removed comments in question about the mnemonic key not working since further experimentation indicated that this was dependent on the Look and Feel used. maybe because the t in <html> is the one that is underlined. try using setDisplayedMnemonicIndex() to fix that Nope. Sorry should have used a different mnemonic for the example but even if I change it to 'x' or use setDisplayedMnemonicIndex() (or both) it still doesn't work. I'll edit the example too.  BasicLabelUI paints the label differently depending on whether it's got HTML or not. If not BasicLabelUI's calls some of its own functions that draw the underline. If it does BasicHTML.Renderer is used and that does not paint any underlines. The easiest workaround would be to do this: JLabel label = new JLabel(""<html>Te<u>x</u>t</html>""); Thanks. Based on your answer I tried the actual code in a couple of different L&F's and although none of them decorate the label as intended pressing the mnemonic key works. I'll edit the question again taking out the comment about the key not working. And the brute force html underlining works. Thanks. Probably because they all inherit from BasicLabelUI. From what I can see the painting is eventually done by javax.swing.text.html.StyleSheet."
823,A,"How to access multiple JPanels inside JFrame? I have a JFrame that contains a ""display"" JPanel with JTextField and a ""control"" JPanel with buttons that should access the contents of the display JPanel. I think my problem is related on how to use the observer pattern which in principle I understand. You need to place listeners and update messages but I don't have a clue where to put these how to get access from one panel to the other and maybe if necessary to introduce a ""datamodel"" class. For example I want to access the contents of the JTextField from the control panel and I use an anonymous action listener as follows:  JButton openfile = new JButton(""Convert file""); openfile.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { openButtonPressed(); } } ); It does make the code cleaner if you create the models in one layer and add a layer or two above to create the components and layout. Certainly do not extend the likes of JFrame and JPanel. Do not feel the need to make the composition hierarchy in the model layer exactly match the display. Then it's just a matter of taking the text from the Document and performing the relevant operation. Okay perhpas not that simple. Swing models are a little bit messy. In particular ButtonModel is brain damaged and the controller area of code might not be entirely pure.  thanks. I added a datamodel layer which handles somehow the communication between the panels. I also found this link on Listeners on JTextField usefull: link text  You need to reduce the coupling between these objects. You can have a master object that owns all the text fields and the button ( the panels are irrelevant ) Then a separete actionlistener within that master object ( I call it mediator see mediator pattern ) That action listener performs a method on the mediator which in turn take the values from the textfields and create perhaps a transfer object. This way you reduce the coupling between the panels textfields etc. and let the control in one place ( the mediator ) that is you don't let them know each other. You can take a look at the code in this question: http://stackoverflow.com/questions/324554/#324559 It shows these concepts in running code. BTW the observer pattern is already implemented in the JTextField JButton ActionListener etc. You just need to add the hooks. I hope this helps. EDIT Joined two answers into one. This is the code. class App { // this is the mediator // GUI components. private JFrame frame; private JTextField name; private JTextField count; private JTextField date; // Result is displayed here. private JTextArea textArea; // Fired by this button. private JButton go; private ActionListener actionListener; public App(){ actionListener = new ActionListener(){ public void actionPerformed( ActionEvent e ){ okButtonPressed(); } }; } private void okButtonPressed(){ // template is an object irrelevant to this code. template.setData( getData() ); textArea.setText( template.getTransformedData() ); } public void initialize(){ frame = new JFrame(""Code challenge v0.1""); frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); name = new JTextField(); count = new JTextField(); date = new JTextField(); textArea = new JTextArea(); go = new JButton(""Go""); go.addActionListener( actionListener ); // prepare the button. layoutComponents(); // a lot of panels are created here. Irrelevant. } } Complete and running code can be retrieved here: It is important to favor composition over inheritance when possible.  We have so called builders which will build the parent panel out of the children. In this builder you will have access to all the subcomponents you need to listen to and can thus can implement any logic there. Finally the builder will then return the parent panel with the complete logic. Once you've got the parent panel it's really a mess getting to the child components and have them do anything."
824,A,"Swing components are light-weight? Whenever I read about Swing they say they are light weight components. So I just googled Swing and found that it means Swing does not depend on native peers. Is that why they are called ""light weight""? I mean by light weight I thought maybe the Swing components occupy less memory than the AWT components. Isn't that so? Lightweight vs heavyweight is a question of how the UI components are implemented. Heavyweight components wrap operating system objects lightweight components don't. They are implemented strictly in the JDK. what can you say about the memory the components occupy pal ? do the swing components occupy less memory ? It's hard to say. Lightweight components may occupy more simply because the operating system handles some of the stuff with heavyweight components. Or the overhead of OS objects might be huge. Or simply interfacing those objects might have a huge overhead. In addition to this it highly depends on the LAF (Look & Feel) you use. This is one other advantage of Swing: you can change LAF in just a few lines of code.  Swing is considered lightweight because it is fully implemented in Java without calling the native operating system for drawing the graphical user interface components. On the other hand AWT (Abstract Window Toolkit) is heavyweight toolkit as it merely makes calls to the operating system in order to produce its GUI components. The Evolution of the Swing Paint System section from the Painting in AWT and Swing article explains the difference between lightweight and heavyweight: When the original AWT API was developed for JDK 1.0 only heavyweight components existed (""heavyweight"" means that the component has it's own opaque native window). This allowed the AWT to rely heavily on the paint subsystem in each native platform. [...] With the introduction of lightweight components in JDK 1.1 (a ""lightweight"" component is one that reuses the native window of its closest heavyweight ancestor) the AWT needed to implement the paint processing for lightweight components in the shared Java code. As Swing is implemented in Java it does have some performance disadvantage however I hear that performance has improved in recent releases of Java. The advantage of Swing is that it has many more components available such as JTable and JList which are more graphical and extensible than the components provided in AWT allowing for more graphics-rich applications to be developed. i agree that there are too many cool things with swing - especially the tooltips and icons . In Java 6 the Windows look-and-feel delegates to the OS to draw the lightweight components (see http://weblogs.java.net/blog/chet/archive/2006/02/these_are_some.html)."
825,A,"JTabbedPane weird behaviour I have the following code :  JTabbedPane container; ... AWindow page = WinUtils.buildWindow(); boolean existing = checkIfExists(page); // in this code this will always be false if(!existing) { String tabName = page.getLoadedFileLocation().getName(); container.addTab(page.getLoadedFileLocation().getName() page); } Component comp = container.getTabComponentAt(0); int sel = container.getSelectedIndex(); container.setSelectedComponent(page); the thing is :  container.getTabComponentAt(0) returns null. The other weird thing is :  container.getSelectedIndex() returns 0. The logical thing that I think should happen is to have a reference to the created window. Why am I receiving null? What am I doing wrong? You're confusing the two sets of methods in JTabbedPane: the tab component methods and the component methods. getTabComponentAt(0) is returning null because you haven't set the tab component. You've set the component that is displayed at index 0 but the tab component is the component that renders the tab--not the component that displays in the pane. (Notice the example in the Javadocs: // In this case the look and feel renders the title for the tab. tabbedPane.addTab(""Tab"" myComponent); // In this case the custom component is responsible for rendering the // title of the tab. tabbedPane.addTab(null myComponent); tabbedPane.setTabComponentAt(0 new JLabel(""Tab"")); The latter is typically used when you want a more complex user interaction that requires custom components on the tab. For example you could provide a custom component that animates or one that has widgets for closing the tab. Normally you won't need to mess with tab components.) Anyway try getComponentAt(0) instead.  getTabComponentAt() returns the custom component you might add as the tab title. You might be looking for the getComponentAt() method to return the contents of a tab. The getSelectedIndex() just returns that the first tab is currently selected (it would return -1 for no tabs selected)"
826,A,"Swing: Is there a way to differentiate between a user-caused ItemEvent and an application-caused one? I'm working with a combobox in a Swing-based application and I'm having a hard time figuring out what to do to differentiate between an ItemEvent that is generated from a user event vs one caused by the application. For instance Lets say I have a combobox 'combo' and I'm listening for itemStateChanged events with my ItemListener 'listener'. When either a user changes the selection to item 2 or I execute the line (pseudocode): combo.setSelection(2) .. it seems like I'm not able to tell these events apart. That said I'm no Swing expert by any means so I thought I would ask. Thanks! @awied: you also need to worry about the situation in which a user accessibility application is driving your program. I'm not following this. Why would you generate events programmatically and then want them to be different from normal events? I'm not generating events exactly. I have listeners that ""do things"" which are attached to the combobox. When the user performs the action the application works properly. However when I need to update the combo it still causes the events but I need it handled differently. You can set a flag in your code before you set the selection and then check for this flag in the listener (and unset the flag if it is set)... There may be a better way since Java 6 but this is the way I always used to do it... [Edit]: As David points out you will need to set the flag (and update the combo) in the EDT using SwingUtilities.invokeLater or similar (you should do this anyway as you are changing a UI control)  The Action and Reaction law is quite clear :). If you try to react on change there is no need to distinguish between user and application. I can imagine only one use case where you need to ""distinguish"". The case where application is displaying some data. In this case you have probably data model for your application. And also there are some change listener in this model and application GUI will react by setting values to components. And also. If user selects anything into GUI component. The data model will react by changing value. In this case it is easy to set up some sort of read-only state on data model which will notify model to ignore ANY event coming from observed objects. This notification set should run in EDT and there is no problem with flagging. Small example: class ApplicationDataModel { private Flag current = Flag.RW; public void setData(ApplicationData data) { current = Flag.RO; setDataImpl(data); notifyObservers(); current = Flag.RW; } public void reaction(Event e) { if (flag = Flag.RO) return; ... } } Be careful with flagging and don't forget about threading. If you are calling setData from another thread then EDT you are going into trouble. Of course. The extraction of ApplicationData object has to be run in different thread ;). In general rethink design of your application.  Whether the user selects Item 2 or the API calls setSelection(2) the event will appear the same. The solution to your problem might be in re-thinking what you want the itemStateChanged code to do when the selection changes. Why would your app work differently under each condition? Maybe there are similarities that you can use to your advantage. Be careful when using flags. The itemStateChanged event will occur on the Event Dispatch Thread which is a different thread than the one on which you'd set the state of the flag. This would mean that using a flag may not be 100% reliable.  If you need to tell the events apart then there is probably something about your design that needs a rethink. The whole point of MVC is to decouple changes to the model from the actual mouse clicks of the user. Perhaps you should restate the question in terms of why you would ever want to differentiate between these two situations. We could then provide some guidance on a different way of achieving the goal.  So I'm guessing you want the user selection to perform some action rather than just a plain old direct state change. This is an issue caused by limited flexibility (flexibility is always going to be limited particularly if you have flexibility in other directions). My suggestion: Firstly always go straight to using model in Swing. The widgets are way to complicated and you want different concerns to be split up. Fortunately Swing is already there with its models. A common pattern is to have delegation between models. So in this case you have the ""real"" default model that holds your data. Insert between the JComboBox and real ComboBoxModel and delegating ComboBoxModel that performs actions on state change instructions. Your application code should ignore the JComboBox and go straight for the real ComboBoxModel bypassing the delegating model. So in a diagram:  User -- JComboBox -- ActionComboBoxModel -- DefaultComboBoxModel -- Application code"
827,A,"Remove Swing Component Using Validate or Revalidate Whenever I remove and add swing components from say JPanel shall I perform call on validate or revalidate? revalidate() would be better. revalidate() marks all the container upto the top level as not proper or not valid. Then it calls validate() on the top level. The validate() method of the parent checks if at least one of its immediate children is signaled invalid or improper. it calls validate of the parent. so calling revalidate() automatically means calling validate().  revalidate() is basically a invalidate() followed by a validate(). Look at Sun's Java source code. You want to call revalidate(). ""basically"" is stretching it. If you do an `invalidate()` followed by a `validate()` you will not get the same results as `revalidate()`.  At least in Java 7 revalidate() doesn't necessarily ""erase"" removed components from the screen. I believe that happens when the bounding box shrinks. For these cases call repaint() after the revalidate().  I would think revalidate() is what you want. The validate() method will be automatically called for you after a call to revalidate(). See the Java API for JComponent.revalidate()."
828,A,The best tool for build swing UI visually What is the best and powerful tool for building swing interface? What tool do you use for swing? Why? I used to use gui builders a few years ago but only for fun or protoyping. They was very limited - changing generated code causes that designer didn't work anymore and generated code was very excessive. What I miss in answers is some detailed information about pros and cons of todays these tools and why to use them. Thx. Nice opinion. I've read more about this there http://stackoverflow.com/questions/623692/handcode-gui-or-use-gui-designer-tool Look at these: http://www.instantiations.com/windowbuilder/ WindowBuilder is now free and part of Google Java Developers Tools see http://code.google.com/javadevtools/ Nice! Thanks for the info  Eclipse is my IDE of choice. You can download Eclipse Visual Editor Project(VEP) from here. take a look at this tutorial. The Eclipse Visual Editor project is a vendor-neutral open development platform supplying frameworks for creating GUI builders and exemplary extensible tool implementations for Swing/JFC and SWT/RCP. if you want some compression between Eclipse's VEP and NetBeans' Matisse take a look at this and this. +1 for the comparison links I may have missed something but the comparison links are almost exclusively about swt vs. swing and not about gui builders (VEP can generate swing code). A short summary of both: first swt is good VEP is no contest for Matisse second swt sucks --> VEP sucks??  After using NetBeans and the Eclipse plugin I'd go with NetBeans.  I suggest you using JBuilder ....  Netbeans comes with a nice GUI builder look here: http://java.sun.com/developer/technicalArticles/tools/nb_guibuilder/  JFormDesigner is a nice visual designer. It supports lots of open source and built-in swing Layout it has a plugin support for EclipseIntelliJ and also can be used external designer.I have used it as an IntelliJ plugin in a multi-year big swing project with no problem.  Netbeans is the best tool till date! how many and which tools have you used to make that comparison?  NetBeans Matisse (comes bundled with NetBeans) is good and powerful. This eclipse plugin seems fresh as well but I haven't tried it. @Bozho - the major drawback of Matisse is that it relies on proprietary metadata and locked regions. Once you decide to use it you're bound to it. Uhaaa I strongly disagree about your opinion on Matisse. Though I agree with the fact that NetBeans is good at GUI building I'm a bit uncertain on the future of Sun NetBeans now Sun has been taken over by Oracle which has it's own Java IDE. @zedoo - I've used it in a big project and found no major drawbacks. explain exactly about your experience? @extraneon - That is too distant and too unrelated to whether the tools works good or not. Even if Oracles decides tomorrow that it stops developing everying Sun's including Java the tool will still be a good one. that's a fair point but if a project starts using one technology / tool and at half the time decides to switch there is something wrong with the developers not the technology / tool  I have written a Qt-style wrapper around GridBagLayout and I handcode my GUIs using it. Visual GUI builders certainly provide more flexibility but that comes at the cost of reduced readability of the code. However I do use NetBeans Matisse when I have some quick and dirty job at hand. ;) Anyway... If you are interested in handcoding GUIs at all then you might also like to have a look at MigLayout. I have never tried it though.  The Netbeans builder can be quite nice but it does build a lot of code for some simple tasks. So over time I have gone back to coding by hand it can save you a lot of time in the long run! Code generation has always had that problem. But I don't think writing it manually will save time - I've done a big project with Matisse and it was easy and smooth.  I prefer coding by hand with GridBagLayout but if I had to use a GUI-Builder I would use NetBeans. Change that to MigLayout and I agree!  Abeille Forms is pretty good. It's based on JGoodies FormLayout. With Abeille you can layout your components visuals and access and/or replace the component with a richer component at runtime. https://abeille.dev.java.net/
829,A,"Getting raw text from JTextPane In my application I use a JTextPane to display some log information. As I want to hightlight some specific lines in this text (for example the error messages) I set the contentType as ""text/html"". This way I can format my text. Now I create a JButton that copies the content of this JTextPane into the clipboard. That part is easy but my problem is that when I call myTextPane.getText() I get the HTML code such as : <html> <head> </head> <body> blabla<br> <font color=""#FFCC66""><b>foobar</b></font><br> blabla </body> </html> instead of getting only the raw content: blabla foobar blabla Is there a way to get only the content of my JTextPane in plain text? Or do I need to transform the HTML into raw text by myself? No need to use the ParserCallback. Just use: textPane.getDocument().getText(0 textPane.getDocument().getLength()) ); That's indeed a really good solution... except that I lost all the line breaks and then my final String is only in one line. Too bad because I really liked this solution! Yes the Document doesn't store line breaks they where manually added by the other solution.  Based on the accepted answer to: Removing HTML from a Java String MyHtml2Text parser = new MyHtml2Text(); try { parser.parse(new StringReader(myTextPane.getText())); } catch (IOException ee) { //handle exception } System.out.println(parser.getText()); Slightly modified version of the Html2Text class found on the answer I linked to import java.io.IOException; import javax.swing.text.html.*; import javax.swing.text.html.parser.*; public class MyHtml2Text extends HTMLEditorKit.ParserCallback { StringBuffer s; public MyHtml2Text() {} public void parse(Reader in) throws IOException { s = new StringBuffer(); ParserDelegator delegator = new ParserDelegator(); delegator.parse(in this Boolean.TRUE); } public void handleText(char[] text int pos) { s.append(text); s.append(""\n""); } public String getText() { return s.toString(); } } If you need a more fine-grained handling consider implementing more of the interface defined by HTMLEditorKit.ParserCallback  (Is RegExp allowed? This isn't parsing isn't it) Take the getText() result and use String.replaceAll() to filter all tags. Than a trim() to remove leading and trailing whitespaces. For the whitespaces between your first and you last 'blabla' I don't see a general solution. Maybe you can spilt the rest around CRLF and trim all Strings again. (I'm no regexp expert - maybe someone can provide the regexp and earn some reputation ;) ) Edit .. I just assumed that you don't use < and > in your text - otherwise it.. say it's a challenge.  You need to do it yourself unfortunately. Imagine if some of the contents was HTML specific eg images - the text representation is unclear. Include alt text or not for instance."
830,A,"jtextfield default cursor position I'm working with JTextField and the code for the text field. I'm trying to make a textfield as big as the notepad but the cursor always appears in the middle. I want to put in the starting of the textfield. tf=new JTextField(50); tf.setCaretPosition(0); f.setLayout(new BorderLayout()); f.add(tfBorderLayout.CENTER); Try setting the text alignment: JTextField textfield = new JTextField(""Initial Text""); // Left-justify the text textfield.setHorizontalAlignment(JTextField.LEFT); // Center the text textfield.setHorizontalAlignment(JTextField.CENTER); // Right-justify the text textfield.setHorizontalAlignment(JTextField.RIGHT); I'm not going to mark it down since it's still useful information but it's *not* the right answer -- `JTextField` defaults to horizontal alignment and the poster's problem is with vertical alignment (as you can quickly see if you run the code). Oops -- that should be: ""defaults to _center_ horizontal alignment"". +1: the right answer  You should use JScrollPane. It will provide a scroll bar and will fulfill your needs too. JTextArea area=new JTextArea(); JScrollPane scroll=new JScrollPane(area); cnt.add(scroll); area.setLineWrap(true); scroll.setBounds(320 100 650 300); nice try :-) but actually ... not an answer to the question. Apart from that: never-ever do any manual locating/sizing of components that's the exclusive job of a LayoutManager.  Not a very clear question. Since you are adding the text field to the center of a BorderLayout the text field will automatically resize both vertically and horizontally to fill the space available in the frame. By default the cursor will appear on the left horizontally and in the center vertically. So I guess the vertical alignment is what you are complaining about. Well I don't know any way to solve the problem since this is the way the text field UI works. If you change the font size of the text then it will appear bigger and the caret will appear more to the top. I suggest you use try using a JTextArea. The Single Line Text Area may work the way you want.  Since JTextField holds only a single line of text you might be better off sizing the JTextField more appropriately. As far as I know there is no good way to do exactly what you asked for. Note that while there is setHorizontalAlignment() there is no corresponding setVerticalAlignment(). setAlignmentY() doesn't do it either (that sets the alignment of components added to a container which doesn't make sense for a JTextField). You can fake it by placing the JTextField in the north of the BorderLayout as follows: tf.setBorder(null); f.setBackground(Color.WHITE); f.add(tf BorderLayout.NORTH); f.add(Box.createVerticalGlue() BorderLayout.CENTER); But I suspect what you really want may be multiple lines in which case you should be using a JTextArea."
831,A,"Mac OS X Java Swing Buttons are Disabled for no aparent reason I wrote an application in Java and when it runs on one customer's computer running OS X The Save and Export buttons are disabled. (Everything else works in the application.) Both of these buttons open up a standard save file dialog. Any ideas? Are the save & Export buttons something you wrote? The Export button doesn't sound familiar for any dialogs I know. I just implemented JButtons that when pressed open the standard Save diablog. I think we need more information to answer your question. do you have any example code? You aren't doing any setEnabled/isEnabled things property listeners or anything else to determine the state of your buttons? This was caused by misinformation recieved from the customer. Turns out the customer was trying to save to a location where files can't be saved on his/her hard drive.  A stab in the dark but most macs are still running Java 1.5; check if your current code misbehaves with Java 1.5 on your end. Maybe that's where you problem lies.  The fact that these buttons open a file dialog probably has nothing to do with it being disabled. Buttons can end up being disabled for a number of reasons its setEnabled can be called with false when using an action its setEnabled can be called with false and when using an action it can have a property ""enabled"" that potentially disables it; see Action for more information there's a list of properties there. Could you post how you 'implemented the JButtons'? Could you expand on when using an action it can have a property ""enabled"" that potentially disables it.? I'll post implementation later today when I have code in front of me."
832,A,"How to change JFrame Icon I have a JFrame but it displays a Java icon on the title bar (left corner). I want to change that icon to my custom icon. How should i do it ? I bet that in the most cases those people have not even heard of the API yet. Probably the best solution in cases like this is to provide a link to the API with the answer. Here is an Alternative that worked for me: yourFrame.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(Filepath))); It's very similar to the accepted Answer.  Here is how I do it: import javax.swing.ImageIcon; import javax.swing.JFrame; import java.io.File; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.JButton; public class MainFrame implements ActionListener{ /** * */ /** * @param args */ public static void main(String[] args) { String appdata = System.getenv(""APPDATA""); String iconPath = appdata + ""\\JAPP_icon.png""; File icon = new File(iconPath); if(!icon.exists()){ FileDownloaderNEW fd = new FileDownloaderNEW(); fd.download(""http://icons.iconarchive.com/icons/artua/mac/512/Setting-icon.png"" iconPath false false); } JFrame frm = new JFrame(""Test""); ImageIcon imgicon = new ImageIcon(iconPath); JButton bttn = new JButton(""Kill""); MainFrame frame = new MainFrame(); bttn.addActionListener(frame); frm.add(bttn); frm.setIconImage(imgicon.getImage()); frm.setSize(100 100); frm.setVisible(true); } @Override public void actionPerformed(ActionEvent e) { System.exit(0); } } and here is the downloader: import java.awt.GridLayout; import java.io.BufferedInputStream; import java.io.BufferedOutputStream; import java.io.FileOutputStream; import java.net.HttpURLConnection; import java.net.URL; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JProgressBar; public class FileDownloaderNEW extends JFrame { private static final long serialVersionUID = 1L; public static void download(String a1 String a2 boolean showUI boolean exit) throws Exception { String site = a1; String filename = a2; JFrame frm = new JFrame(""Download Progress""); JProgressBar current = new JProgressBar(0 100); JProgressBar DownloadProg = new JProgressBar(0 100); JLabel downloadSize = new JLabel(); current.setSize(50 50); current.setValue(43); current.setStringPainted(true); frm.add(downloadSize); frm.add(current); frm.add(DownloadProg); frm.setVisible(showUI); frm.setLayout(new GridLayout(1 3 5 5)); frm.pack(); frm.setDefaultCloseOperation(3); try { URL url = new URL(site); HttpURLConnection connection = (HttpURLConnection)url.openConnection(); int filesize = connection.getContentLength(); float totalDataRead = 0.0F; BufferedInputStream in = new BufferedInputStream(connection.getInputStream()); FileOutputStream fos = new FileOutputStream(filename); BufferedOutputStream bout = new BufferedOutputStream(fos 1024); byte[] data = new byte[1024]; int i = 0; while ((i = in.read(data 0 1024)) >= 0) { totalDataRead += i; float prog = 100.0F - totalDataRead * 100.0F / filesize; DownloadProg.setValue((int)prog); bout.write(data 0 i); float Percent = totalDataRead * 100.0F / filesize; current.setValue((int)Percent); double kbSize = filesize / 1000; String unit = ""kb""; double Size; if (kbSize > 999.0D) { Size = kbSize / 1000.0D; unit = ""mb""; } else { Size = kbSize; } downloadSize.setText(""Filesize: "" + Double.toString(Size) + unit); } bout.close(); in.close(); System.out.println(""Took "" + System.nanoTime() / 1000000000L / 10000L + "" seconds""); } catch (Exception e) { JOptionPane.showConfirmDialog( null e.getMessage() ""Error"" -1); } finally { if(exit = true){ System.exit(128); } } } }  JFrame.setIconImage(Image image) pretty standard. These solutions do not work.  Create a new ImageIcon object like this: ImageIcon img = new ImageIcon(pathToFileOnDisk); then set it to your Frame: myFrame.setIconImage(img.getImage()); Also checkout java.awt.Window.setIconImages() that should be: `myFrame.setIconImage(img.getImage());` what should be the size of the icon?.. im gonna create one now .. See here for interesting discussion about size: http://www.coderanch.com/t/343726/Swing-AWT-SWT-JFace/java/Frame-s-setIconImage-optimum-image"
833,A,Library to embed 3D view in a swing app? I'm currently searching for a 3d library that I could embed in a Swing application. This library doesn't necessarily have to be a huge thing as I mainly intend to give a 3D representation of some shapes and certainly rotate around them. My main concern is to get something as easy to set up and to deploy as possible. Do you have any clue ? Why not just embed Java3D in your application. http://java3d.j3d.org/tutorials/quick_fix/swing.html You can also embed Jogl (Java OpenGL) with Swing. http://cld.blog-city.com/mixing_java_2d_and_3d_jogl_in_a_swing_application.htm Java3D would be higher level so it may be a better choice.
834,A,"SwingBuilder: scrollPane What's the proper way to set up a scroll pane using groovy's SwingBuilder? I'm using griffon and I'm having a hard time adding and removing components dynamically... Here's a snippet I've tried within SwingPad. It works ok but the remove only take immediate effect if my scroll pane has scrollbars. If not it takes 4-5 secs. Here's the snippet: import java.awt.Dimension panel(id:'main') { panel { button(name:'x' action: action(name:'add' closure:{p.add(label('new')); main.revalidate()})) button(action: action(name:'remove' closure:{p.removeAll();main.revalidate()})) } panel() { scrollPane(preferredSize: [200200] constraints: context.CENTER) { panel(id:'p') { checkBoxList(listData: (1..20).collect([]){""Option $it""} as Object[]) } } } } Looks like it's a repaint issue as this seems to work:  panel(id:'main') { panel { button(name:'x' action: action(name:'add' closure:{p.add(label('new')); p.revalidate()})) button(action: action(name:'remove' closure:{p.removeAll();p.revalidate();scroll.repaint()})) } panel() { scrollPane(id:'scroll'preferredSize: [200200] constraints: context.CENTER) { panel(id:'p') { checkBoxList(listData: (1..20).collect([]){""Option $it""} as Object[]) } } } }"
835,A,"How would i program a dynamic menubar in Swing? Basically i want to be able to allow the user to save bookmarks which are then put into a list on a submenu on a menubar. How would i go about programming a general function for any number of bookmarks that may be added i basically want the items to put the URL into a textbox when clicked. Would i need to create a new class for this or is there an inbuilt function? My program is a simple RSS reader written in Java using Swing. You need to add a MenuListener to the menu item that you want to be dynamic. In the void menuSelected(MenuEvent e) method implement the construction of the submenus. In a first implementation you can first reset the content of your menu and then rebuid it from scratch instead of updating it : JMenu menu = new JMenu(""Bookmarks""); menu.addMenuListener(new MyMenuListener()); private class MyMenuListener implements MenuListener { public void menuCanceled(MenuEvent e) { } public void menuDeselected(MenuEvent e) { } public void menuSelected(MenuEvent e) { JMenu menu = (JMenu) e.getSource(); populateWindowMenu(menu); } } void populateWindowMenu(JMenu windowMenu) { windowMenu.removeAll(); // Populate the menu here }"
836,A,Changing JTable cell color This is driving me absolutely insane. I know that to change the formatting of table cells with JTable I have to use my own renderer. But I cannot seem to implement this properly. This is my current setup: public class MyClass { public static void main(String args[]) { JTable myTable = new JTable(10 10); myTable.setDefaultRenderer ([I dont know what to put here] new CustomRenderer()); } } class CustomRenderer extends DefaultTableCellRenderer { public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { Component c = super.getTableCellRendererComponent(table value isSelected hasFocus row column); // Formatting return c; } } What do I need to use for the first parameter of setDefaultRenderer? The API just says 'class'. I have no idea what to put there. Could someone just explain in the simplest of terms how I go about implementing this? Please provide an example of how I can change the formatting from within the main() method as well. In the first parameter for setDefaultRenderer put the class literal for the Class that you want to override rendering. I.e. if your data consist all of strings you can put myTable.setDefaultRenderer(String.class new CustomRenderer()); If your data also consists of values with BigDecimal or Integer as classes you have to invoke that method several times for each class type (BigDecimal.class or Integer.class in each case). And finally to change the background color you do this in your renderer: class CustomRenderer extends DefaultTableCellRenderer { public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { Component c = super.getTableCellRendererComponent(table value isSelected hasFocus row column); c.setBackground(new java.awt.Color(255 72 72)); return c; } } If you write a renderer that should work for all classes of an interface you will also need to modify the getColumnClass function of your table model and let it return the interface class for all objects that implement this interface: public Class<? extends Object> getColumnClass(int c) { Object object = getValueAt(0 c); if(object == null) { return Object.class; if(getValueAt(0 c) instanceof IColorable) { return ICarPart.class; } else { return getValueAt(0 c).getClass(); } } With that one can register a renderer for IColorable.class and does not need to register a separate renderer for each implementation. You need to use Object.class because you created a JTable w/o passing in a TableModel. The default table model created returns Object.class for each columns type. See: TableModel::getColumnClass(int col) This doesn't seem to work for me. The only thing I've done is invoke the setDefaultRenderer method and created the CustomRenderer class. Is there something else I need to be doing to get this to work? I got it working by using Object.class instead of String.class. Not sure why this was necessary though because all of my data were strings. Thank you for your help! Am I not allowed to change the renderer inside a listener? I want to re-format the table when a button is pressed. Where do I use it? Say I now want to change a table cell's colour when I click on it?
837,A,"Swing components : vertical text question If I have a button like the one in this image : http://www.freeimagehosting.net/image.php?4cd775814c.png how could I make the text display itself vertically ? As in  j B u t t o n 1 I would like to know how to do the same thing for JLabel . I'm sure there has to be a better way than to create as many labels as there are characters in the string . Right ? EDIT: how can I insert an image into my post ? The button for the image shows the image in the preview section  but when I actually post the data  I only get some text back  like the tags are getting messed up . I don't know if this is useful to you but this sample shows how to make a vertical label. The difference is that it rotates all of the text (and/or the icon) instead of stacking the letters. I don't know how difficult it would be to modify it to do what you're asking. The advantage of doing it this way is if your labels can change at runtime; generating big HTML strings might be a pain compared to a simple label.setUI(new VerticalLabelUI(true)); (and you don't have to worry about <> in the label text).  You can use HTML for JButton or JLabel. So button = new JButton(""<html>J<br>b<br>u<br>t<br>t<br>o<br>n<br>1</html>""); should do the trick."
838,A,TreeModel backed by Lists I want to build a TreeModel from some Lists that contain the source data. Now there's an utility class called DynamicUtilTreeNode that can be used to build trees from arrays Vectors and Hashtables but... not from Lists?! Of course I could use the List's toArray() method but it gives a clone array of the List's state at the moment so any changes in the List wouldn't get propagated to the TreeModel. Is there an obvious reason why DynamicUtilTreeNode doesn't support Lists? Is there anything similar that would support Lists or should I just write it myself? Is there an obvious reason that DynamicUtilTreeNode doesn't support Lists? It looks as though DynamicUtilTreeNode was written before or around the time when the List Collections framework was introduced in Java 1.2. The Collections that are supported (Vector and Hashtable) are those that needed to be retrofitted to the List interface. You will notice that JTable as well makes use of Vector and of Object arrays in it quick-start constructors. s there anything similar that would support Lists or should I just write it myself? I dont see anything within the JDK that replaces it with a List compatible version. You might be best served rolling your own. At the very least it may give you a better understanding of how the TreeNode objects are used.  GlazedLists contains everything to build a dynamic tree from lists which automatically updates as you change the lists.
839,A,"Java: Swing --> Maximize window I'm putting together a quick and dirty animation using swing. I would like the window to be maximized. How can I do that? i like this version: import java.awt.Dimension; import java.awt.GraphicsConfiguration; import java.awt.Toolkit; import javax.swing.JFrame; public class Test { public static void main(String [] args) { final JFrame frame = new JFrame(); final GraphicsConfiguration config = frame.getGraphicsConfiguration(); final int left = Toolkit.getDefaultToolkit().getScreenInsets(config).left; final int right = Toolkit.getDefaultToolkit().getScreenInsets(config).right; final int top = Toolkit.getDefaultToolkit().getScreenInsets(config).top; final int bottom = Toolkit.getDefaultToolkit().getScreenInsets(config).bottom; final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); final int width = screenSize.width - left - right; final int height = screenSize.height - top - bottom; frame.setResizable(false); frame.setSize(widthheight); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } }  How about JFrame.setExtendedState(JFrame.MAXIMIZED_BOTH)?  Provided that you are extending JFrame: public void run() { MyFrame myFrame = new MyFrame(); myFrame.setVisible(true); myFrame.setExtendedState(myFrame.getExtendedState() | JFrame.MAXIMIZED_BOTH); } It is a bad practice to access static field through an instance. Use `JFrame.MAXIMIZED_BOTH` instead. @nimcap: You are correct I've edited the answer. Huge massive bug and issues with the above! (Well okay fine minor warnings with no major consequence...) Should be Frame.MAXIMIZED_BOTH not JFrame.MAXIMIZED_BOTH! :) Why do you call setVisible(true) first? Is it significant? It also works fine without (ubuntu). Without `setVisible(true)` first the frame is not sized correctly. I tried it both before and after `setExtendedState()` and `setVisible()` must be first. @Crusader Absolutely no issue here actually since both refer to the same constant field (`JFrame` inherits from `Frame`). @AvrDragon After experimentation I discovered that it must the the LAST frame.setVisible(). For example if I already have a frame.setVisible() just plonking another one before the maximizing line of code for the purposes of making it work won't work.  This page may provide some help JFrame maximisation  Something like this.setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH); import java.awt.*; import javax.swing.*; public class Test extends JFrame { public Test() { GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment(); this.setMaximizedBounds(env.getMaximumWindowBounds()); this.setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH); } public static void main(String[] args) { JFrame.setDefaultLookAndFeelDecorated(true); Test t = new Test(); t.setVisible(true); } } +1 Maximizes except for taskbar. Very helpful. What is the `|` for? Does it do one and if that fails it does the other? Or are you indicating programmer choice (I.e. pick one of A|B to go in this call?) I've not seen this syntax before. @Pureferret it is the ""bitwise inclusive OR"" operator which copies a bit if it exists in either operand. (http://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html or http://www.tutorialspoint.com/java/java_basic_operators.htm)  If your using a JFrame try this JFrame frame = new JFrame(); //... frame.setExtendedState(JFrame.MAXIMIZED_BOTH);"
840,A,"how to add different cell editors for one column in JTable? I have a JTable with two columns and both are JComboBox for this purpose I implemented my own Model and overrode methods. One of the method which I overrode is: public Class getColumnClass(int index) { return JComboBox.class; } Also created my own ComboBoxEditor and ComboBoxRender classes and set cellEditor and cellRenderer: column.setCellEditor(new ComboBoxEditor()); column.setCellRenderer(new ComboBoxRenderer()); Now I want to make changes so that for column one some cells are JComboBox and some cells are standard textual data. How can I achieve this ? Any helpful suggestions would be welcome You can use instanceof. Usage: Object o = new String(""Test""); if (o instanceof String) { String s = (String) o; // Do something with the string } So make the data-matrix for your JTable like this Object[][] data = new Object[...][...]. Ent then can you use instanceof in your DefaultTableCellRenderer to check if the Object is a String or a JComboBox. Depending on that result render like a String or a JComboBox.  You need to implement your own javax.swing.table.TableCellRenderer where return different renderers at getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) according to your business logic. The same for TableCellEditor Interface. I think the important point is that the ""default"" renderers use inappropriate inheritance. Yes no sense in inheritance. Should be used pure composition of two renderers and return appropriate one whet it is needed.  I usually override the table.getCellEditor(...) method to return the appropriate editor. Maybe something like this: import java.awt.*; import java.awt.event.*; import java.util.*; import javax.swing.*; import javax.swing.table.*; public class TableComboBoxByRow extends JFrame { ArrayList editors = new ArrayList(3); public TableComboBoxByRow() { // Create the editors to be used for each row String[] items1 = { ""Red"" ""Blue"" ""Green"" }; JComboBox comboBox1 = new JComboBox( items1 ); DefaultCellEditor dce1 = new DefaultCellEditor( comboBox1 ); editors.add( dce1 ); String[] items2 = { ""Circle"" ""Square"" ""Triangle"" }; JComboBox comboBox2 = new JComboBox( items2 ); DefaultCellEditor dce2 = new DefaultCellEditor( comboBox2 ); editors.add( dce2 ); String[] items3 = { ""Apple"" ""Orange"" ""Banana"" }; JComboBox comboBox3 = new JComboBox( items3 ); DefaultCellEditor dce3 = new DefaultCellEditor( comboBox3 ); editors.add( dce3 ); // Create the table with default data Object[][] data = { {""Color"" ""Red""} {""Shape"" ""Square""} {""Fruit"" ""Banana""} {""Plain"" ""Text""} }; String[] columnNames = {""Type""""Value""}; DefaultTableModel model = new DefaultTableModel(data columnNames); JTable table = new JTable(model) { // Determine editor to be used by row public TableCellEditor getCellEditor(int row int column) { int modelColumn = convertColumnIndexToModel( column ); if (modelColumn == 1 && row < 3) return (TableCellEditor)editors.get(row); else return super.getCellEditor(row column); } }; System.out.println(table.getCellEditor()); JScrollPane scrollPane = new JScrollPane( table ); getContentPane().add( scrollPane ); } public static void main(String[] args) { TableComboBoxByRow frame = new TableComboBoxByRow(); frame.setDefaultCloseOperation( EXIT_ON_CLOSE ); frame.pack(); frame.setVisible(true); } } this is very helpful camickr xD The most clear option at least for my use case. Thanks! this worked exceedingly well thank you very much :D This was very helpful.  Perhaps if you use your own table model it would be more convenient to override setValueAt(Object value int row int col) method and try to convert input data in it. I'm about to use this solution in my code. Does anyone see a problem with this approach?"
841,A,"Matisse or Jigloo? We have a dilema; developing desktop application using matisse or jigloo.. Matisse has this XML form files which we are affraid of maintaining later we don't even know should MyEclipse further support Matisse even Netbeans - do you think they will give up os support of Matisse? Moreless Jigloo and Matisse have similar behaviour although Jigloo obeys more designers wish Matisse have this strange alignment behaviour from time to time. Jigloo generates Java code which can be edited and which in turn can cause visual editor not being able to draw form. Thats propbably the reason why matisse wants to have definition of elements in more stable XML form from which it generates java code. Matisse would not help much if there is an error in instantiating GUI element so puttin custom elements can be also nightmare. When typing code in jigloo visual editor likes to erase picture so you have to wait for picture to show up after editing code. In Matisse you can have errors in class and still editing GUI. Please help us by voting what do you prefer more and why. Does not really answer your question: Did you consider coding your GUI by hand? I used Matisse a lot and I got the impression that if you have to maintain GUIs its easier not to do it with a visual editor because it's more likely that it's going to screw things up. @sebastian: that is the main argument we should give up on matisse. Coding GUI by hand takes time not productive. In Myecplise 7.5 I have no more crashes and if there is problem now I can see some stack trace.. @as - ""Coding GUI by hand takes time not productive."" It's a question of long-term vs. short term cost. Coding a GUI by hand - takes longer initially (and you actually have to learn Swing...) but (if done right) is easier to update with changes later less code to maintain less chance of something just breaking or having trouble with integrating with other projects (MigLayout? GlazedLists? SwingLabs?). I have personally had a handful of occasions where the XML file backing a Matisse form somehow became out of sync with the code and had to resort to a backup to get it working again. This was enough to scare me away. I have no experience with Jigloo though. My current projects use TableLayout extensively. It is easy to understand and (of all the layout managers I've tried) maintain. I have not found any other solution in GUI design for Java that I feel more comfortable with than coding the GUIs by hand. Moving forward it seems like the best ""future-proof"" way of coding my GUIs. I agree with Chintan on using Matisse or similar to mock up your design and then convert the layout to another layout (like TableLayout). Personally I like using pencil and paper to do most of it. Not exactly high-tech but it gets the job done. Up voted for using pencil + paper.  I prefer Netbeans Matise. Even if it is impossible to edit generated code it's much more easier to design complex screens with Mattise(because of FreeForm layout).  What you can expect when you mess a file generated by a tool? Mess isn't it? This is a very very important always forgotten by developers. Take Matisse as an example. It generates a XML file for you and a .java file for you. Why on Earth developers start changing these classes? Later they complain that everything is messed and they point out to Matisse as the guilt of it because Matisse doesn't do A or doesn't do B. The only thing Matisse is guilty is not being able to fix the mess promoted by developers. This is problem in the domain of Artificial Inteligence and I personally do not expect any solution soon. There's a more or less simple solution for it: OOP. I explain: one of the most important concepts of OOP is 'responsibility' which means that a certain class has a limited and well defined responsibility in a broader and more complex problem domain. So Matisse generated the UI for you which basically consists on UI elements event handlers etc. Then you say: well... I need to add some logic to it otherwise the UI is innoperative. True. This is another responsibility which cannot *never* be implemented in the same class generated by Matisse. Because either people is lazy or do not understand what 'responsibility' means in OOP people implement whateber they need add lots of variables and promote all sort of madness in a class which is definitely not responsible for business logic. By a very simple thing like inheritance you can separate business logic in a extended class. The base class is the one produced by Matisse. The extended one is your class implemented by hand which contain implementation of event handlers initialization of UI elements etc. Many developers are tempted to edit by hand the .java file produced by Matisse. The golden rule is: never never edit the .java file by hand. Matisse provides you means of defining whatever you need and call whatever you need. Never editing resources (both .xml and .java) produced by Matisse you guarantee that it (Matisse) will be able to load it again in case you need to change the GUI in future. Probably you will find yourself tempted to edit the .java or even the .xml file directly. Please resist this temptation and educate yourself; you will thank yourself in future. So... you can use whatever tool you wish or whatever provides the sexiest UI elements. All tools will fail if you fail to separate UI from business logic. All tools will succeed if you succeed in your main task as programmer which is: produce decent code.  Please don't use either! As with this answer it's my strong opinion (after writing Swing GUIs for 10 years) that using GUI builders is in all but the most edge-cases a bad idea. HAND CODE YOUR GUI! Whether you choose Matisse or Igloo it is not a standard will fall out of favour and a better tool will come along. At that point you will have legacy code that is nigh on impossible to maintain. This has already happened severeal times in the history of Java GUI builders You should avoid forcing your developers to use one IDE and it is a huge overhead to expect devs to switch to a particular IDE when looking at the GUI code. They'll be frustrated as they can't remember key bindings project setup is out-of-date they havbe the wrong version installed etc. People will make quick-fixes without the builder. At this point your code is unmaintainable in both your IDE of choice and in the GUI builder istelf! The whole thing is a mess. Designing a GUI is not in my experience a particularly onerous task and probably accounts for no more than 5-10% of the total development time of an application. Even if initially using Matisse or Igloo provides you with a 50% time advantage over hand-coding the GUI this is insignifcant in the grand scheme of things. It is certainly not worth the hidden costs and impending maintenance disasters that lie ahead GridBagLayout is not hard. It just isn't! It's really simple in fact. It will take you a few minutes to learn and after that you'll never look back. Your GUI's will look like how you want them to look and your code will be more maintainable as a result. Use GridbagLayout! I have spent a good deal of time warning people about this before and been proven correct. Not using a gui designer is a bad idea the productivity will be awful and the properly aligning controls on a gui will take ages if done by hand @oxbow_lakes although from a project management standpoint what you say may be true.. But the flexibility and power of Netbeans' Matisse has improved remarkably over the years. In 4+ years that I've been (exclusively) making GUIs with it I've never once regretted it. ESPECIALLY with how much it improves with every update. It really does make Swing a lot easier AND is MUUUCH more survivable than anything else in my programs... @Eugene - as I've already said `GridBagLayout` is just not hard. It's certainly capable of managing 20+ controls without becoming difficult to maintain @Oxbow_Lakes You can make your life easier by switching to MigLayout. GridBagLayout is nothing comparing to it. Yes the Netbeans GUI builder is cursed. One drag and drop and it ruins your forms. Best to learn to do it properly and avoid the tears. @Eugene - I've looked at MiGLayout and it looks great. Until they put it in the JDK I'll probably be leaving it alone though. I would agree with you for simple cases but when you have forms with 30-50 and more controls there is no choice but to use GUI builder. That is why I suggested the ""cleanest"" one in my opinion - Instantiations Swing Designer. Agreed. GUI builders for Swing are big bolted-on hacks because Swing just was not designed with GUI builders in mind from the beginning. Leaky abstractions are bound to appear. I don't know if GridBagLayout is the most elegant choice but I would definitely learn to do everything thing by hand really well before consider doing it another way. @Eugene - MiLayout isn't a GUI designer it's a LayoutManager class it doesn't lock you into an IDE. Core Spring may be non-invasive but Spring MVC isn't and neither is Hibernate - your web/view layer has a dependency on Spring MVC classes in the first case and your DAO layer has a dependency on Hibernate in the second. MigLayout is the same way - it doesn't spread the dependency throughout your code only in your classes that need to layout GUIs - and the ""MigLayout"" LayoutManager class is the only class you have a direct dependency on - it uses Strings to configure the layout. @Nate - that's true. The main reason being that I write layout code so rarely it makes up such a small proportion of my code *and I can accomplish what I want using GridBag* that I see no immediate need of an extra 3rd party dependency. @Nate - I never said MigLayout did lock anyone into an IDE! *This question is about Matisee and Igloo!* I agree that MigLayout looks great and should be in the JDK in some form or other no pun intended. @Nate I know what the difference is between layout and GUI designer :) I use them daily. I was suggesting MigLayout to oxbow_lakes as a better alternative to GridBagLayout. @oxbow_lakes - you're right - you can accomplish what you want with GridBagLayout - I can too. However It usually takes lots of tries recompile and rerun and visually inspect the result to get the syntax and settings *just right* - and even then the problem is that the layout code isn't really readable anyway - it's hard to read GridBagLayout code and know exactly what the visual result is going to be. @oxbow_lakes - sorry - my comment was about your comment ""@Eugene - I've looked at MiGLayout and it looks great. Until they put it in the JDK I'll probably be leaving it alone though."" @oxbow_lakes - leaving it alone even if it's better? - just like ignoring Spring/Hibernate/ANT/so many more just because they're not part of the JDK. @Nate - Spring and Hibernate are **non-invasive**. That is they don't litter dependencies throughout your code. Even Spring DAO can be isolated into a single-class which is Spring-specific. And Spring is just a JAR like any other. This is **not the same** as a GUI designer which locks you into an IDE  I haven't tried Jigloo but I would throw a fourth one in the mix. JFormDesigner is the best Swing UI designer that I have ever used. Like Matisse it does create XML form files but that is the only negative about this tool. It supports all standard layout managers plus some popular ones (such as JGoodies FormLayout). It has plugins for IntelliJ and eclipse and can also run as a standalone tool. Here is the link hth Koen  I wouldn't go with either. The best thing I've found so far is Instantiations Swing Designer. It is not free but not expensive either. It supports all major Swing layouts and DOES NOT create any additional artifacts except pure Java code. Here is the link if your are interested.  I would prefer Matisse since Netbeans is backed by Sun Microsystems and the possibility of the project being scrapped in the near futures seems blissfully low. Also I do not know the size of your project but I have developed some small ones and I personally use matisse to see how the layout would look and then go ahead and code everything using the Miglayout library. It increases the amount of coding a lot but gives good control and flexibility. And there is a possibility this library might be included in Java 7 consequently embedded into Matisse. And Oracle buying SUN has no potential for Netbeans being cancelled/sidelined/deep-sixed? Oracle have their own development environment (it's crap but when has that stopped anyone) and is a supporter of Eclipse."
842,A,"Tabs with equal (constant) width in JTabbedPane I'm trying to get a JTabbedPane where all tabs (the actual tabs not the components) have the same width (either the minimum width needed for the widest label or a constant width). I've tried to override BasicTabbedPaneUI.getTabBounds(int tabIndex Rectangle dest) but apparently this method isn't used by the painting methods of BasicTabbedPaneUI instead it uses a rects array to determine the tabs size. My next approach would be to override JTabbedPane.insertTab(String title Icon icon Component component String tip int index) and setting the preferred size of the label component but this doesn't seem very elegant and I'm not even sure it would work at all. Is there a way to achieve this? I've tried the following: tabPane.setUI(new javax.swing.plaf.metal.MetalTabbedPaneUI() { @Override protected int calculateTabHeight(int tabPlacement int tabIndex int fontHeight) { return super.calculateTabHeight(tabPlacement tabIndex fontHeight) + 12; } }); This seems to work fine for me. But if your using a different L&F you'll end up rendering it with the 'metal' regardless. I guess you could get the default UI and do an 'instanceof' on it to determine which is being used and instantiate it accordingly. For example: TabbedPaneUI ui = tabPane.getUI(); if (ui instanceof WindowsTabbedPaneUI) { // Create the windows rendition } else if (ui instanceof MetalTabbedPaneUI) { // Create the metal rendition } else if (ui instanceof MotifTabbedPaneUI) { // Create the motif rendition } else if (ui instanceof SynthTabbedPaneUI) { // Etc... } Thanks but this is only affecting the tab height not the width right? @Ole: That's right I don't know how I came to read width and end up giving a height example. Ah well now there for others who may need it I guess.  this is worked for me.  JLabel lab = new JLabel(); lab.setPreferredSize(new Dimension(200 30)); jTabbedPane1.setTabComponentAt(0 lab); // tab index jLabel or try this change to all tab component in same sizes (called in main method) UIManager.getLookAndFeelDefaults().put(""TabbedPane:TabbedPaneTab.contentMargins"" new Insets(10 100 0 0));  I think it's not as complicated as you've done. Just use setTabComponentAt() with a JLabel on which you've set preferred size. That works thanks. Unfortunately I have to set all other parameters of the label component (color font size etc.) myself. I thought of retrieving the label via getTabComponentAt() but it returns null all the time. Yep that's because the getter only gets a label that was previously set (I think the doco specifically mentions that).  The answer is simple. When we put the name for the tab just format the name using html. say tp - JTabbedPane object tp.addTab(""<html><body><table width='150'>Name</table></body></html>""Componentobject) This sounds very good. I've seen other situations where html was the only way to achieve something in swing (e.g. line wrap on tooltips). I'll definitely give it a try."
843,A,Swing: Floating panel next to the selected item in a JComboBox I've created an app with a small window (the size of a combo box). I need to create a floating panel that sits outside the window next to the selected item in a JComboBox. (See attached image). I've been reading about the JComboBox.setRenderer(customRenderer) etc. But was just wondering before I go down this path whether it is at all possible to render something outside the window. I suspect it is as the combobox itself manages to render it's popup list outside the window. I'm very new to Swing so any advice would be appreciated. It's not possible with the custom renderer since Swing components are light weight. That is Java is given a native window and all the component drawing takes place in that window. In your case that is the JFrame containing the combo box. What you can do though is create a new undecorated window and set it's location accordingly and draw whatever you want inside it. EDIT: When Java needs to paint outside it's window bounds (like the case of pop up messages or combo boxes drop downs) if the component falls inside the bounds it uses the swing light weight mechanism. But if the component falls out side the bounds it is automatically substituted with a awt heavy weight component that has it's own native drawing surface outside the active window.  I've implemented similar idea using combobox renderers and tooltips on them. Content of every item's tooltip can be customized and rendered using HTML. Location of the tooltip can be set outside of the item itself thus creating design very similar to the one presented in your question. Here is the starting point for you: http://www.java2s.com/Code/Java/Swing-Components/ToolTipComboBoxExample.htm Thanks Eugene. Do you know if the tooltip can be set to float outside the window as per my image? I think it should be possible
844,A,can I build swing applications on eclipse? I used to work on netbeans to build Java applications but now: i am using eclipse. I was was wondering if there a a free good plug-in to help me with swing windows.?? JForm designer is a good swing designer but it is not free.  I'm assuming you want a GUI designer. The best plug-in for this is the excellent Swing Designer. Definitely worth a look. Nope sorry. But it is worth the license. it is not free ??  Jigloo is free for non-commercial use. There are others on the UI category at Eclipse Plugin Central.  Jigloo - CloudGarden(free non-commercial) Visual Editor Project AND JForm (pay) I think your third link is wrong. It looks like a domain parking site... cheers looks like they forgot to pay there bill...
845,A,"What's the best way to add a self-update feature to a Java Swing application? I'm trying to figure out a way to add a self-update feature to a Java/Swing application I'm working on. Basically I've got a bunch of jar files with extra functionality to be re-deployed to the installed users when they change. Nothing complicated just check if a new version has been released download them over HTTP and then optionally offer to restart the app to the user. I had a look at webstart and it could work. But this particular app does some funky stuff with classloading and GC memory settings that don't look like they are supported via webstart or will at least complicate matters. (It's a tweaked build of JMeter) I also went down the road of adding in this plugin handler http://swing-fx.blogspot.com/2008/06/add-auto-update-and-plugins-to-your.html but it is very alpha and tries to do too much with the usual bugs you get with alpha stuff. I would definitely first try out Webstart. We've had lots of success launching even the early Eclipse RCP apps using Webstart and you can probably not get more funky classloading issues than with the OSGI framework (Eclipse Equinox). Could you perhaps give some more detail in your question about you classloading approach? Regarding the GC and other VM settings: these are easy to specify in your JNLP (Java Network Launching Protocol) files used by Webstart for launching apps. Could you give a link to an RCP app? Do you mean a RCP app that can be webstarted? The one's I worked on are all for intranet type enterprise applications so not available on the web.  I believe you should look again at Java WebStart or at least detail the ""funky classloading"" which you think is going to cause problems (as it might also cause problems with any solution proposed here). IIRC you can set command line parameters using Java WebStart ( http://java.sun.com/j2se/1.5.0/docs/guide/javaws/developersguide/syntax.html#resources ).  The Java Web Start is good choice. The GC stuff is not important. Classloading could be problem. But when you got trusted by user you can grant AllPermisions and you will be able to do custom classloading. Maybe it will be good to reconsider funky stuff with classloading. It is really necessary? Or look at NetBeans. There should be found inspiration for auto-update.  we had a swing app 6 years ago that had self-update. like you suggested 1)it downloaded the latest jars over http 2) copied them to a folder. 3) since the swing app is launched using a .BAT file after user said YES we would shut down the swing app and look for any files in the update folder. if yes launch another .BAT file to copy the NEW JARs to the required directory. 4) then re launch the swing app.  Updates plugins separation of concern etc. are exactly what OSGi is about - you might want to take a look at this. It won't come free (read: with a steep initial learning curve especially when you are currently using classloading tricks) at least there are good open source implementations (felix - see felix.apache.org equinox - see www.eclipse.org and others) For these implementations autoupdaters are available - if you write your modules correctly it's possible to update at runtime without restarting.  I did the exact same thing. But that was long back so there are probably better tools today. What I found out I needed was a loader. The loader main program did not have the app jars in classpath. It first downloaded an update if required and then created a custom classloader with the app jars in class path and invoked the main method of the application main class. It is not very complicated. IIRC I needed to do this because the jars could not be overwritten in windows if they were already in classpath. Hope this helps. That seemed to be the easiest way all round. I kept an XML file on the server and a replica of it locally listing all the files to be updated and a version number. Quick and simple but does the trick."
846,A,"How do I set an Application's Icon Globally in Swing? I know I can specify one for each form or for the root form and then it'll cascade through to all of the children forms but I'd like to have a way of overriding the default Java Coffee Cup for all forms even those I might forget. Any suggestions? There may be a way of doing it using the Look and Feel overriding the UIDefaults. I'm just not sure which index would do.  There is another way but its more of a ""hack"" then a real fix.... If you are distributing the JRE with your Application you could replace the coffee cup icon resource in the java exe/dll/rt.jar wherever that is with your own icon. It might not be very legit but it is a possibility... If it's the only way it doesn't matter if you're desperate or not :) My company does it through InstallAnywhere's `executableIcon` property. I think it does it by replacing `JavaCup.png` in `jre/lib/resources.jar`. Agreed. It'd work but I'm not feeling that desperate. :)  You can make the root form (by which I assume you mean JFrame) be your own subclass of JFrame and put standard functionality in its constructor such as:  this.setIconImage(STANDARD_ICON); You can bundle other standard stuff in here too such as memorizing the frame's window metrics as a user preference managing splash panes etc. Any new frames spawned by this one would also be instances of this JFrame subclass. The only thing you have to remember is to instantiate your subclass instead of JFrame. I don't think there's any substitute for remembering to do this but at least now it's a matter of remembering a subclass instead of a setIconImage call (among possibly other features). Not ideal but it works. There should be a way of doing this for all forms in an app. Some forms might be spawned by third party tools etc. Yes there *should* be a way but sun hasn't provided one. Its probably a sev3 enhancement in bugparade somewhere...  Also if you have one ""main"" window and set its icon properly as long as you use that main window as the ""parent"" for any Dialog classes they will inherit the icon. Any new Frames need to have the icon set on them though. as Paul/Andreas said subclassing JFrame is going to be your best bet.  Extend the JDialog class (for example name it MyDialog) and set the icon in constructor. Then all dialogs should extend your implementation (MyDialog)."
847,A,"setBorder method for JLabel causing paint problem I have a custom class that extends JLabel. For specific instances of that class I want to add some spacing to the text on the left side. I need the spacing as I'm setting the background of this JLabel and I don't want the text to bump up right next to the edge of the colored background. I fished around quite a bit and implemented this (inside the paint function): if (condition) { bgColor = Color.red; setBackground(bgColor); setOpaque(true); // This line merely adds some padding on the left setBorder(BorderFactory.createEmptyBorder(0 10 0 0)); } else { setOpaque(false); } This appears to work in that it adds the spacing I want however it has an unfortunate side effect in that it appears to break the repainting of the whole rest of the application...it appears that only that particular component is repainting and not the rest of the application. I eventually tracked it down to the setBorder call specifically...setting ANY kind of border appears to cause the same broken behavior. We have two different versions of our application one that runs in Java 1.5 and one that runs in Java 1.6 the Java 1.6 version appears to work correctly while the Java 1.5 version doesn't. It is not possible to upgrade the older version to Java 1.6...I need something that will work in Java 1.5. Also I tried this (just to see what it looked like): setHorizontalTextPosition(JLabel.CENTER); And that also appears to break the repainting in exactly the same way. I looked through the source of our application and found other places where we set borders (including empty borders) but couldn't find any on JLabels (only panels buttons etc). Anybody see anything like this before? Know how to fix it? Or perhaps another way to obtain the spacing I require that may work around the bug? Thanks. Where are you calling this code from? If it's in the constructor things should be fine... if it's from paintComponent() or something like that you may run into the kind of trouble you're describing. The problem is that you're calling that code inside the paint method. You should not do that because it will freeze the EDT with unwanted loops in the swing painting pipeline. You should put that code on the constructor and change the component design state elsewhere on the app life cycle. If you want to know a little bit more about Swing painting please read the ""Swing painting pipeline"" post on pushing-pixels.org. Note that you can use BorderFactory.createCompoundBorder to combine any two borders. Then you can set spacing with the emptyBorder and any other to draw the outer border. EDIT: Example added. package com.stackoverflow.swing.paintpipeline; import java.awt.Color; import java.awt.Graphics; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import java.util.ArrayList; import java.util.List; import java.util.Random; import javax.swing.BorderFactory; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.SwingUtilities; import javax.swing.Timer; import javax.swing.border.Border; public class JLabelSetBorderPaintProblem extends JLabel { public JLabelSetBorderPaintProblem(String text) { super(text); } /* * @see javax.swing.JComponent paint(java.awt.Graphics) */ @Override public void paint(Graphics g) { super.paint(g); // You can not call setBorder here. // Please check javadoc. } /* * @see javax.swing.JComponent paintBorder(java.awt.Graphics) */ @Override protected void paintBorder(Graphics g) { super.paintBorder(g); // Here is where the Swing painting pipeline draws the current border // for the JLabel instance. // Please check javadoc. } // Start me here! public static void main(String[] args) { // SetBorder will dispatch an event to Event Dispatcher Thread to draw the // new border around the component - you must call setBorder inside EDT. // Swing rule 1. SwingUtilities.invokeLater(new Runnable() { @Override public void run() { // Inside EDT JFrame frame = new JFrame(""JLabel setBorder example""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Add the JLabel final JLabelSetBorderPaintProblem label = new JLabelSetBorderPaintProblem(""Just press or wait...""); frame.add(label); // And change the border... label.addMouseListener(new MouseAdapter() { @Override public void mousePressed(MouseEvent e) { label.setBorder(BORDERS.get(new Random().nextInt(BORDERS.size()))); } }); // ...whenever you want new Timer(5000 new ActionListener() { @Override public void actionPerformed(ActionEvent e) { label.setBorder(BORDERS.get(new Random().nextInt(BORDERS.size()))); } }).start(); frame.pack(); frame.setVisible(true); } }); } public static final List<Border> BORDERS; static { BORDERS = new ArrayList<Border>(); BORDERS.add(BorderFactory.createLineBorder(Color.BLACK)); BORDERS.add(BorderFactory.createLineBorder(Color.RED)); BORDERS.add(BorderFactory.createEtchedBorder()); BORDERS.add(BorderFactory.createTitledBorder(""A border"")); } } That definitely seems to be the crux of the issue. We solved the problem by creating the border as a global static (like the other borders in the application) and then still setting the border in the paint method. I still don't have a good enough grasp on exactly what is going on here but this seems to solve the issue so I'm going to call it good enough."
848,A,"Displaying XHTML in Swing (JEditorPane) I'm writing a Java application with GUI using Swing. One of the GUI components is a JEditorPane that renders HTML. All the rendering is fine except that it shows in the first line the XML header: ?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?> I've googled a little bit and I've found the same question here and there but never any answer. I know that using some other projects like ""Flying saucer"" is an option but before I start adding other libs to my project - is there a way to make it work with Swing? Two notes: I can replace JEditorPane with some other component if it can help. I'm not using it for any other features than HTML rendering. I'm currently using a workaround for that which works fine but I have a feeling this is an ugly hack: html = html.replaceFirst(""\\<\\?.*\\?\\>"" """"); Flying Saucer is a good choice for XHTML. JEditorPane can't even handle self closing tags and there are no other components that come with the standard JDK that you can use. AFter trying a little bit more and facing some further obscurities of JEditorPane i decided to go with FS indeed."
849,A,"Java: link JSlider and JTextfield for float value what is the best and easiest way to link a JSlider and a JTextField so that if one changes the other gets updated too but there is no recursive loop? thanks! related http://stackoverflow.com/questions/2172574/jslider-for-doubles Here's a quick and dirty demo: import java.awt.*; import java.awt.event.*; import javax.swing.*; import javax.swing.event.*; public class Main { public static void main(String[] args) { final JFrame frame = new JFrame(); final JTextField text = new JTextField(20); final JSlider slider = new JSlider(0 100 0); slider.addChangeListener(new ChangeListener(){ @Override public void stateChanged(ChangeEvent e) { text.setText(String.valueOf(slider.getValue())); } }); text.addKeyListener(new KeyAdapter(){ @Override public void keyReleased(KeyEvent ke) { String typed = text.getText(); slider.setValue(0); if(!typed.matches(""\\d+"") || typed.length() > 3) { return; } int value = Integer.parseInt(typed); slider.setValue(value); } }); frame.setLayout(new BorderLayout()); frame.add(text BorderLayout.NORTH); frame.add(slider BorderLayout.CENTER); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); frame.pack(); } } EDIT And if you want to use floats (as the title suggests) you could extends the JSlider class like this: import java.awt.*; import java.awt.event.*; import javax.swing.*; import javax.swing.event.*; import java.text.DecimalFormat; public class Main { public static void main(String[] args) { final DecimalFormat df = new DecimalFormat(""0.####""); final JFrame frame = new JFrame(); final JTextField text = new JTextField(20); final DoubleJSlider slider = new DoubleJSlider(0 100 0 1000); slider.addChangeListener(new ChangeListener(){ @Override public void stateChanged(ChangeEvent e) { text.setText(df.format(slider.getScaledValue())); } }); text.addKeyListener(new KeyAdapter(){ @Override public void keyReleased(KeyEvent ke) { String typed = text.getText(); slider.setValue(0); if(!typed.matches(""\\d+(\\.\\d*)?"")) { return; } double value = Double.parseDouble(typed)*slider.scale; slider.setValue((int)value); } }); frame.setLayout(new BorderLayout()); frame.add(text BorderLayout.NORTH); frame.add(slider BorderLayout.CENTER); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); frame.pack(); } } class DoubleJSlider extends JSlider { final int scale; public DoubleJSlider(int min int max int value int scale) { super(min max value); this.scale = scale; } public double getScaledValue() { return ((double)super.getValue()) / this.scale; } } The example above denotes the interval between 0 and 0.1 in 100 steps. This (again) is just a quick and dirty example but might help you on your way. That is working with int values only. @Guillaume ah it just occurred to me that the word float is mentioned in the topic title (and not in the question itself). But since clamp accepted my answer it seems the conversion to using floats wasn't all that hard luckily. :) Well it's not trivial :) And the 'float' tag should be removed from the question: I though my quest for doing a slider using float was over but it was not ! @Guillaume see my edit. This is wonderful. You're the only guy on the internet that has posted a short answer to this question."
850,A,"JTable Row Header implementation I wanna create a JTable with a row header. This question seems simple and I could find a lot of tips on google search. Nevertheless everything I have found were tips of how make a column mimics the real header. Although good it comes with the problem of that the look and feel can not be applied very well. In my program I tryed this way and I got a row header as shown bellow: See? My header is completely different from my row header. It seems the row header got the background of header when mouse is pressed on it. How I have written above I really did a good search on google and I didn't found any thing to resolve this error. So could anybody help me? All the best! Leandro can you be a bit more specific about what you want/need? do you have a table header and you now want a row mimicking it? or do you just need to add a header to your table? Hi akf I need a real header to the rows. It is the problem I have just found row mimicking it. Took me seconds to google ""jtable row header"" and get: http://www.java2s.com/Code/Java/Swing-Components/TableRowHeaderExample.htm Maybe it is the same code you sent to me before... Row Number Table show a simple example. It was a different way to try resolve my problem. The main question is that I want a row header that seems like the true header. So when I apply a look and feel this row header receives the look and feel exactly like the header. And it's not what happens when you just tranform a column in a header.  This page might be what you're looking for: http://www.chka.de/swing/table/row-headers/JTable.html This is awesome. Exactly what i was looking for thanks.  try this. The code was taken from here and there but it works reasonably well. It is a JTable with a redimensionable rowHeader (drag mouse between header rows to resize as usual with columns) It ask for an image path to show the repaint while resizing (works well) $ java JTableRowHeader /path/to/image.gif This is the code  import javax.swing.; import javax.swing.event.MouseInputAdapter; import javax.swing.table.DefaultTableCellRenderer; import javax.swing.table.JTableHeader; import javax.swing.table.TableColumn; import java.awt.; import java.awt.event.MouseEvent; import java.io.File; import java.util.Vector;  /** * JTable redimensionable * User: alberto * Date: 23/01/13 * Time: 1:04 */ public class JTableRowHeader { private static final String COL_IMAGE = ""Image""; private static final int MIN_ROW_HEIGHT = 12; public static void main(String[] args) { JFrame frame = new JFrame(); frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); String filename = args[0]; if (new File(filename).exists()) { System.out.println(""Provide the path of an image""); } final JTable table = new JTable(new Object[][]{ {filename filename 5.5}  {filename null 7}  {""nothing"" null 12}}  new Object[]{""File"" COL_IMAGE ""Number""}); JScrollPane scrollPane = new JScrollPane(table); JPanel panel = new JPanel(new BorderLayout()); panel.add(scrollPane BorderLayout.CENTER); TableColumn column = table.getColumn(COL_IMAGE); column.setCellRenderer(new DefaultTableCellRenderer() { @Override public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { if (value != null) { ImageIcon image = new ImageIcon(value.toString()); setIcon(image); } else { setIcon(null); } setHorizontalAlignment(JLabel.CENTER); return this; } }); table.setRowHeight(0 200); scrollPane.setRowHeaderView(buildRowHeader(table)); frame.getContentPane().add(panel); frame.setPreferredSize(new Dimension(400 400)); frame.pack(); frame.setVisible(true); } private static JList buildRowHeader(final JTable table) { final Vector<String> headers = new Vector<String>(); for (int i = 0; i < table.getRowCount(); i++) { headers.add(String.valueOf((char) (i + 65)).toUpperCase()); } ListModel lm = new AbstractListModel() { public int getSize() { return headers.size(); } public Object getElementAt(int index) { return headers.get(index); } }; final JList rowHeader = new JList(lm); rowHeader.setOpaque(false); rowHeader.setFixedCellWidth(50); MouseInputAdapter mouseAdapter = new MouseInputAdapter() { Cursor oldCursor; Cursor RESIZE_CURSOR = Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR); int index = -1; int oldY = -1; @Override public void mousePressed(MouseEvent e) { super.mousePressed(e); } @Override public void mouseMoved(MouseEvent e) { super.mouseMoved(e); int previ = getLocationToIndex(new Point(e.getX() e.getY() - 3)); int nexti = getLocationToIndex(new Point(e.getX() e.getY() + 3)); if (previ != -1 && previ != nexti) { if (!isResizeCursor()) { oldCursor = rowHeader.getCursor(); rowHeader.setCursor(RESIZE_CURSOR); index = previ; } } else if (isResizeCursor()) { rowHeader.setCursor(oldCursor); } } private int getLocationToIndex(Point point) { int i = rowHeader.locationToIndex(point); if (!rowHeader.getCellBounds(i i).contains(point)) { i = -1; } return i; } @Override public void mouseReleased(MouseEvent e) { super.mouseReleased(e); if (isResizeCursor()) { rowHeader.setCursor(oldCursor); index = -1; oldY = -1; } } @Override public void mouseDragged(MouseEvent e) { super.mouseDragged(e); if (isResizeCursor() && index != -1) { int y = e.getY(); if (oldY != -1) { int inc = y - oldY; int oldRowHeight = table.getRowHeight(index); if (oldRowHeight > 12 || inc > 0) { int rowHeight = Math.max(MIN_ROW_HEIGHT oldRowHeight + inc); table.setRowHeight(index rowHeight); if (rowHeader.getModel().getSize() > index + 1) { int rowHeight1 = table.getRowHeight(index + 1) - inc; rowHeight1 = Math.max(12 rowHeight1); table.setRowHeight(index + 1 rowHeight1); } } } oldY = y; } } private boolean isResizeCursor() { return rowHeader.getCursor() == RESIZE_CURSOR; } }; rowHeader.addMouseListener(mouseAdapter); rowHeader.addMouseMotionListener(mouseAdapter); rowHeader.addMouseWheelListener(mouseAdapter); rowHeader.setCellRenderer(new RowHeaderRenderer(table)); rowHeader.setBackground(table.getBackground()); rowHeader.setForeground(table.getForeground()); return rowHeader; } static class RowHeaderRenderer extends JLabel implements ListCellRenderer { private JTable table; RowHeaderRenderer(JTable table) { this.table = table; JTableHeader header = this.table.getTableHeader(); setOpaque(true); setBorder(UIManager.getBorder(""TableHeader.cellBorder"")); setHorizontalAlignment(CENTER); setForeground(header.getForeground()); setBackground(header.getBackground()); setFont(header.getFont()); setDoubleBuffered(true); } public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { setText((value == null) ? """" : value.toString()); setPreferredSize(null); setPreferredSize(new Dimension((int) getPreferredSize().getWidth() table.getRowHeight(index))); //trick to force repaint on JList (set updateLayoutStateNeeded = true) on BasicListUI list.firePropertyChange(""cellRenderer"" 0 1); return this; } } } comment lines about image path if you don't care about that. Here is the result:  to resolve my problem I simply return as my renderer to the row header a header already with the title I want. Let me explain I create a table with the header get the header and return it as my renderer. Thanks! Leandro"
851,A,"auto abbreviating JLabel Anyone written a JLabel (extension/util/??) that automatically abbreviates the contents depending on it's preferred/visible size? much appreciated. Doesn't JLabel abbreviate text that can't fit by default? This code displays only ""The quick brown fox jum..."" on my install: public class Driver { public static void main(String[] args) { final JFrame frame = new JFrame(""JLabel Test""); frame.setSize(160120); frame.getContentPane().add( new JLabel(""The quick brown fox jumped over the lazy dog."") ); frame.setVisible(true); } } haha .. i had just noticed that - i had mistaken a bug for JLable not working how it obviously does... sorry for the stupid question!!  For improved swing before writing your own extensions I recommend to check SwingLabs. In particular there is a cool JXLabel (although it's not clear what you want that the regular JLabel has not) sorry i'm not having a go at you - but i did look at the website and some content was not available (404) while what was available was honestly not that helpful/impressive - so i'm not sure of the relevance.... i had a look at their website and there's nothing there too impressive. not sure what relevance your answer has whatsoever. Well your question was asking for something that was already available in the regular JLabel so it wasn't really clear what you were looking for. SwingLabs **is very** impressive (maybe the JXLabel is not where they shine best) so it must be the first place to look at when you need something more than plain vanilla Swing."
852,A,"How do you set a focus on Textfield in Swing? I have created one form using Swing in Java.In the form I have used one textfield on which I have to set the focus whenever I press the key.How to set focus on a particular component in Java ? 10 questions none of them answers accepted... Now that we've searched the API all we need to do is read the API. According to the API documentation: ""Because the focus behavior of this method is platform-dependent developers are strongly encouraged to use requestFocusInWindow when possible. ""  Just a simple search through the API would give you Component.requestFocus() is that what you need? FYI the [javadocs for JComponent](http://docs.oracle.com/javase/7/docs/api/index.html) say of `requestFocus()` ""use of this method is discouraged because its behavior is platform dependent. Instead we recommend the use of [requestFocusInWindow()](http://docs.oracle.com/javase/7/docs/api/javax/swing/JComponent.html#requestFocusInWindow()). If you would like more information on focus see [How to Use the Focus Subsystem](http://java.sun.com/docs/books/tutorial/uiswing/misc/focus.html) a section in The Java Tutorial."" Thankslet me see whether it works for me or not Took me five minutes to find it ... so much for ""simple"" search :-( – ah well the Java API docs aren't a paragon of clarity anyway :-)  This would work.. SwingUtilities.invokeLater( new Runnable() { public void run() { Component.requestFocus(); } } );"
853,A,"GoogleEarth inside Java Swing Is it possible to embed a GoogleEarth view inside a Java Swing app? If so could you please point me to a tutorial explaining how to do it? Even though technically it is possible (using JXMapViewer) legaly it is not. Google does not allow using Google Maps outside of the browser. One possible solution would be to embed JWebPane (http://weblogs.java.net/blog/alex2d/archive/JWebPaneJ1.pdf) into your Swing App but it is still not ready :(  There's also NASA's World Wind SDK.  I did a project on vehicle tracking system using GPS and GSM at my college. In the project we used to get the latitude and longitude value of vehicle and show it in Google map. The code we used for creating a frame with Google location is Map code.java The frame is created by creating an Object of the class and calling the method createmap(String xString y); Where x-latitude and y-longitude.  you could us a java RDP client and run Google Earth on a remote desktop  Embedding GoogleEarth inside Java Swing App is not feasible. Legally or otherwise. However you may find a way to embed Google Map on a frame. Edit: Found this google post. The Google post was exactly what I was looking for. Thanks!  I just discovered a link on java.net ... Building Maps into Your Swing Application with the JXMapViewer This did not work for me.  You can use Jawin to extract native stubs and use it to embed Google Earth on a Java Swing container. I've worked on it before please check my demo video on youtube http://www.youtube.com/watch?v=2Pf8V8uubVM As WTP'-- pointed out to the Blog http://www.brantb.com/2007/12/java-and-google-earth-com-api.html Brant used ""com4J"" to generate the stubs.  Here's a lil' tutorial which explains it all: http://www.brantb.com/2007/12/java-and-google-earth-com-api.html It uses the Google Earth COM API"
854,A,"Animated *.gif framerate is too high I'm loading an animated gif into a JButton. Online the gif looks to move at a normal pace. But when I load it in java it looks like the animation is trying to run as quickly as possible! How can I atleast slow it down? Here is my code: public Icon getIcon(){ return new ImageIcon(getClass().getResource(""images/working.gif"") ""Application is running.""); } Any ideas? Thanks guys 'n gals. Please add link to the GIF in question. Your delay is most likely incorrect in the GIF file. waw.... that's right! thanks for giving an advice :D @Sandro Browsers tend to limit the framerate of GIFs. For example I've read that Opera and IE will fix framerates slower than Firefox. Here's an example of people seeing this effect. The problem is likely that the delay in the animation is incorrect in the .gif itself and viewing it in a browser is only masking the issue. yes that was problem. I saved the gif with a new frame rate and it now works correctly. Thank you!"
855,A,Splitting a swing control into equal parts I know this is gonna be a stupid question. Pardon me as a n00b into CS I have a new swing component that inherits from JComponent. I am trying to paint lines on its surface to show that the lines split the control into equal parts. The code looks like int spc; spc = (int) Math.round((this.ZBar.getWidth() / this.ZBar.getModel().getModelSize())); for (int i = 0; i <= this.ZBar.getModel().getModelSize(); i++) { g.drawLine(i * spcing 0 i * this.ZBar.getHeight()); } this.ZBar.getModel().getModelSize(); gives out number of parts to split into. However in some cases there is some more space left on the right most end of my component. I guess it is gue to the Type conversion done by Math.round. How can I solve this ?? The code you posted will not compile due to syntax errors but I see no immediate problems with your approach. You said that the problem shows up intermittendly. This suggests the problem might lay with the way swing does refreshing and how you handle that in your code. Try reading up on that.  Thank you very much for the reply. Solved this. I have made all those integer mess to double. Then used Java2D package to handle doubles. Line2D class support creation using double parameters.  It is because that division is a int type divide. For example: 5 / 2 == 2 Math.round is doing nothing here. It is already being rounded (as Math.floor instead). To get your intended effect cast the int to a double before the division: (double)5 / 2 == 2.5 Or in your specific case: spc = (int) Math.round(((double)this.ZBar.getWidth() / this.ZBar.getModel().getModelSize()));
856,A,"Java KeyListener for JFrame is being unresponsive? I'm trying to implement a KeyListener into my JFrame. On the constructor I'm using this code: System.out.println(""test""); addKeyListener(new KeyListener() { public void keyPressed(KeyEvent e) { System.out.println( ""tester""); } public void keyReleased(KeyEvent e) { System.out.println(""2test2""); } public void keyTyped(KeyEvent e) { System.out.println(""3test3""); } }); When I run it the test message comes up in my console. However when I press a key I don't get any of the other messages as if the KeyListener was not even there. I was thinking that it could be because the focus is not on the JFrame and so they KeyListener doesn't recieve any events but I'm pretty sure it is. Is there something that I am missing? lol .... all you have to do is make sure that addKeyListener(this); is placed correctly in your code. You should really explain the ""correct place"" to make this a helpful answer.  This should help  yourJFrame.setFocusable(true); yourJFrame.addKeyListener(new java.awt.event.KeyAdapter() { @Override public void keyTyped(KeyEvent e) { System.out.println(""you typed a key""); } @Override public void keyPressed(KeyEvent e) { System.out.println(""you pressed a key""); } @Override public void keyReleased(KeyEvent e) { System.out.println(""you released a key""); } });  You could have custom JComponents set their parent JFrame focusable. Just add a constructor and pass in the JFrame. Then make a call to setFocusable() in paintComponent. This way the JFrame will always receive KeyEvents regardless of whether other components are pressed. -1 definitely not - that's complete in more than one respect: a) indecent subclassing b) indecent reference passing c) inappropriate state change while painting d) ..  I got the same problem until i read that the real problem is about FOCUS the your JFrame has already added Listeners but tour frame is never on Focus because you got a lot of components inside your JFrame that also are focusable so try: JFrame.setFocusable(true); Good Luck Great!This is the right answer! I found that this works only until I use something that is on my JFrame then the KeyListener no longer responds  InputMaps and ActionMaps were designed to capture the key events for the component it and all of its sub-components or the entire window. This is controlled through the parameter in JComponent.getInputMap(). See How to Use Key Bindings for documentation. The beauty of this design is that one can pick and choose which key strokes are important to monitor and have different actions fired based on those key strokes. This code will call dispose() on a JFrame when the escape key is hit anywhere in the window. JFrame doesn't derive from JComponent so you have to use another component in the JFrame to create the key binding. The content pane might be such a component. InputMap inputMap; ActionMap actionMap; AbstractAction action; JComponent component; inputMap = component.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW); actionMap = component.getActionMap(); action = new AbstractAction() { @Override public void actionPerformed(ActionEvent e) { dispose(); } }; inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE 0) ""dispose""); actionMap.put(""dispose"" action);  Deion (and anyone else asking a similar question) you could use Peter's code above but instead of printing to standard output you test for the key code PRESSED RELEASED or TYPED. @Override public boolean dispatchKeyEvent(KeyEvent e) { if (e.getID() == KeyEvent.KEY_PRESSED) { if (e.getKeyCode() == KeyEvent.VK_F4) { dispose(); } } else if (e.getID() == KeyEvent.KEY_RELEASED) { if (e.getKeyCode() == KeyEvent.VK_F4) { dispose(); } } else if (e.getID() == KeyEvent.KEY_TYPED) { if (e.getKeyCode() == KeyEvent.VK_F4) { dispose(); } } return false; }  in order to capture key events of ALL text fields in a JFrame one can employ a key event post processor. Here is a working example after you add the obvious includes. public class KeyListenerF1Demo extends JFrame implements KeyEventPostProcessor { public static final long serialVersionUID = 1L; public KeyListenerF1Demo() { setTitle(getClass().getName()); // Define two labels and two text fields all in a row. setLayout(new FlowLayout()); JLabel label1 = new JLabel(""Text1""); label1.setName(""Label1""); add(label1); JTextField text1 = new JTextField(10); text1.setName(""Text1""); add(text1); JLabel label2 = new JLabel(""Text2""); label2.setName(""Label2""); add(label2); JTextField text2 = new JTextField(10); text2.setName(""Text2""); add(text2); // Register a key event post processor. KeyboardFocusManager.getCurrentKeyboardFocusManager() .addKeyEventPostProcessor(this); } public static void main(String[] args) { JFrame f = new KeyListenerF1Demo(); f.setName(""MyFrame""); f.pack(); f.setVisible(true); } @Override public boolean postProcessKeyEvent(KeyEvent ke) { // Check for function key F1 pressed. if (ke.getID() == KeyEvent.KEY_PRESSED && ke.getKeyCode() == KeyEvent.VK_F1) { // Get top level ancestor of focused element. Component c = ke.getComponent(); while (null != c.getParent()) c = c.getParent(); // Output some help. System.out.println(""Help for "" + c.getName() + ""."" + ke.getComponent().getName()); // Tell keyboard focus manager that event has been fully handled. return true; } // Let keyboard focus manager handle the event further. return false; } } For a working example you might consider adding the imports. I usually add 'package imports' to keep them short. Otherwise +1. Interesting technique.  You must add your keyListener to every component that you need. Only the component with the focus will send these events. For instance if you have only one TextBox in your JFrame that TextBox has the focus. So you must add a KeyListener to this component as well. The process is the same: myComponent.addKeyListener(new KeyListener ...); Note: Some components aren't focusable like JLabel. For setting them to focusable you need to: myComponent.setFocusable(true); yea you were right when the program starts you can slightly see that the focus is on the button A. adding a keylistener to each button fixed this. thats a little weird i would think that adding a keylistener to the JFrame would work but i guess not. Thanks!  I have been having the same problem. I followed Bruno's advice to you and found that adding a KeyListener just to the ""first"" button in the JFrame (ie on the top left) did the trick. But I agree with you it is kind of an unsettling solution. So I fiddled around and discovered a neater way to fix it. Just add the line myChildOfJFrame.requestFocusInWindow(); to your main method after you've created your instance of your subclass of JFrame and set it visible.  If you don't want to register a listener on every component you could add your own KeyEventDispatcher to the KeyboardFocusManager: public class MyFrame extends JFrame { private class MyDispatcher implements KeyEventDispatcher { @Override public boolean dispatchKeyEvent(KeyEvent e) { if (e.getID() == KeyEvent.KEY_PRESSED) { System.out.println(""tester""); } else if (e.getID() == KeyEvent.KEY_RELEASED) { System.out.println(""2test2""); } else if (e.getID() == KeyEvent.KEY_TYPED) { System.out.println(""3test3""); } return false; } } public MyFrame() { add(new JTextField()); System.out.println(""test""); KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager(); manager.addKeyEventDispatcher(new MyDispatcher()); } public static void main(String[] args) { MyFrame f = new MyFrame(); f.pack(); f.setVisible(true); } } KeyboardFocusManager is application wide if you have multi frames you will get trouble? So this should work something like: foreach(""focusable components in the frame"" as _){ _.addkeylistener(frameKeylistener);}  Hmm.. what class is your constructor for? Probably some class extending JFrame? The window focus should be at the window of course but I don't think that's the problem. I expanded your code tried to run it and it worked - the key presses resulted as print output. (run with Ubuntu through Eclipse): public class MyFrame extends JFrame { public MyFrame() { System.out.println(""test""); addKeyListener(new KeyListener() { public void keyPressed(KeyEvent e) { System.out.println(""tester""); } public void keyReleased(KeyEvent e) { System.out.println(""2test2""); } public void keyTyped(KeyEvent e) { System.out.println(""3test3""); } }); } public static void main(String[] args) { MyFrame f = new MyFrame(); f.pack(); f.setVisible(true); } } I get all of the messages output also. Run in Windows command line. You get all the messages because in this example the JFrame has the focus. try adding a TextBox component to the JFrame and see what happens.  KeyListener is low level and applies only to a single component. Despite attempts to make it more usable JFrame creates a number of component components the most obvious being the content pane. JComboBox UI is also often implemented in a similar manner. It's worth noting the mouse events work in a strange way slightly different to key events. For details on what you should do see my answer on Application wide keyboard shortcut - Java Swing."
857,A,"Help with annotations Edit--@Uri correctly pointed out that this was an abuse of annotations; trying to actually create the menu data itself in annotations is just silly. They are good for binding however I think I'll stick with using them to link the text data to the methods (the @Menu (""File"") portion) since it's more explicit and flexible than reflecting to a method name. Also I learned quite a bit in messing with it. I'll post the code here in a few days as an answer. --original post-- I haven't used these new-fangled annotations but they look amazingly interesting. I'm having trouble figuring out the syntax though (or more appropriately the best way to use it). In writing some code in response to this question It occurred to me that my methods are quite outdated. I used to parse a string to define my method structure then use reflection to pass it out to classes but I think annotations could make a much better menu structure. I'd like to replace my test class in the file with something like this: @TopMenu(""FileEdit"") @Menu(name=""File""""SaveLoadPrintPreviewQuit"") @Menu(name=""Print""""PreviewPrint"") @Menu(name=""Edit""""CopyPaste"") public class TestMenu { @MenuItem (""Save"") public void save() { System.out.println(""saved""); } @MenuItem (""Load"") public void load() { System.out.println(""loaded""); } ... and pass the entire class off to a method that manufactures and returns a JMenuBar bound to the class instance with no further input. First problem is that I can't figure out how to pass a ""Default"" of a string they all want to have (attribute=""value"") instead of just (""value"") can this be done? I can live without it but it's a little verbose. It'd be even better if I could get rid of the parens and/or quotes but I'm not holding my breath (I think to do that I'd have to define an individual interface for each menu item that's not acceptable). Secondly it doesn't like the multiple @Menu tags on a single class. I could get around this by parsing a single string but I was wondering if there was another way. Most importantly is there a library that does this already? (If nobody comes up with one I'll publish code to this thread when I get it working in case anyone else is interested.) I know I'll get downvoted for this but I really think people are starting to overabuse the annotation mechanism in Java. All it was designed for was to be a mechanism for providing metainformation about classes and methods for the purpose of the compiler or of programming-support tools (e.g. testing infrastructure model checkers code generators etc.) It was not meant for actual production-oriented code macro metaprogramming and all that. This is just as inelegant as using preprocessor macros in C instead of actual functions. If menus are first-class entities in your program I really don't feel that you should be using the annotation mechanism for them. As for your specific questions you can easily define a default value. However you can't start doing things like nesting annotations to overcome the menu problem. It really wasn't designed for this. Interesting observation. I started out thinking about using annotations to facilitate the binding process for my menus having them define the menus themselves was just a second step. It's better than binding to method names and better than repetitive ""new Menu()"" code. Other alternatives? Well you could use the annotations as the input to a custom 'menu binding generator' which produces actual code. But I don't see how this is any different from other presentation/logic separation technology such as XAML and saves a lot of boiler plate code if you use it a lot. In situations like this I'd go with XML if it was really necessary. Annotations made more sense than XML in things like Hibernate where the code is already in place. However here we're talking about generating UI elements. Although I've used XML/string binding before (as in my example code in the link) It's irritating if it's in a different file. On the other hand this approach would be virtually impossible to i18nalize. Hmm. Maybe a combination of XML and annotations for binding? I'm not sure I understand what you mean. Why would XML be more difficult to internationalize ? If anything by putting UI labels as annotations you're binding yourself to specific version. Can't you write code that generates a menu class from XML? Annotations can be used quite well for code generation. For example see http://code.google.com/p/javadude/wiki/AnnotationsPropertyExample1 Rather than writing code to say ""I am a bean"" you declare it and have a superclass (""isA"") generated for you to match the spec. Not downvoted up voted. I agree completely annotation are meta data. IMO if you can't replace an annotation with a marker interface they you've abused the feature (yes Spring 2.5 I'm talking to you you horrible ""configuration all over the code"" framework). @Uri I was agreeing with you saying ""my annotation approach was more difficult to internationalize"" I just didn't phrase it well. I would accept this as the correct answer (it is) but since it didn't actually answer the question I asked I just upvoted it.  The way I've seen multiple annotations attached is to use a container annotation and then specify the items as an array. @Retention(RetentionPolicy.RUNTIME) public @interface Menu { String name(); String[] children(); } @Retention(RetentionPolicy.RUNTIME) public @interface MenuBar { Menu[] value(); } @Retention(RetentionPolicy.RUNTIME) public @interface MenuItem { String value(); } @MenuBar( { @Menu(name=""File"" children= {""Save""""Load""""Print""""Preview""""Quit""}) @Menu(name=""Print"" children= {""Preview""""Print""}) @Menu(name=""Edit"" children= {""Copy""""Paste""}) } ) public class TestMenu { @MenuItem (""Save"") public void save() { System.out.println(""saved""); } @MenuItem (""Load"") public void load() { System.out.println(""loaded""); } } awesome. I figured out the default thing by using ""value()"" which should make things a lot easier if I combine that with this. Now I have to figure out how to read them all... Thank you.  You can define default value for annotation - here's example String str() default ""text""; You can't overcome this easily. You can define annotation Menus which accepts arrays of string"
858,A,"Correct way to use Actions to create menus toolbars and other components in Java The naive way of writing building a menu in a Java Swing app is to do something like: JMenu fileMenu = new JMenu(""File""); JMenuItem openItem = new JMenuItem(""Open...""); openItem.addActionListener(new ActionListener() { /* action listener stuff */ } ) fileMenu.addMenuItem(openItem); A more experienced developer will recognize that actions can be accessed through a variety of mechanisms - menus toolbar buttons maybe even other workflows in the system. That person is more likely to write: Action openAction = new AbstractAction(); openAction.setName(""Open...""); openAction.addActionListener(new ActionListener() { /* action listener stuff */ } ) ... JMenuItem openItem = new JMenuItem(openAction); My question is what is the best way to manage these Action objects so they can be used across menus toolbars etc? Create a factory class that returns specific actions? Declare all of the actions as private static final Action in some utility class? Take advantage of a Java application framework? Something else? Duplicate of http://stackoverflow.com/questions/448179/organizing-actions-in-a-swing-application#448195  as pointed out by Dave Ray. Also see this question which is pretty much the same as what you're asking.  Action is a bad abstraction - an ActionListener welded to a poor man's Map. Certainly do not assign them to a static as they are mutable and also need some context to operate usefully. My general advice for GUI programming is to note that it is actually much the same as any other area of programming. Follow the usual good practices. Notably layering separation of concerns use (implementation) inheritance rarely and don't write a big ball of mud.  Applications that I have developed that need to use that same actions across menus toolbars and other buttons have been done using Swing Application Framework. Swing Application Framework This framework will allow you to have a resource file where you can define all menu text tooltips and ICONS. I think the icons are the key you do not have to load them yourself. Also if you have any actions that you need to enable/disable you can override the method to control its state. The website is worth the read.  Edit: I got the feeling people didn't believe this was possible or easy so I did it--took about an hour from scratch--would have taken 40 mins if I'd just used a single method as a target instead of reflecting it out to separate methods for each menu item. Here's the Tested source code. It works but is one big method and ugly--refactor it if you use it. I may fix it up a little over the next few days I've always wanted to have a copy of this to keep around to reuse. --- original post First of all remember to separate your code from data. That means you should NEVER type: new Menu(""File...""); The string ""File..."" is data. If you start thinking this way you will find that your question answers itself. First you need to build up some data. You need to get ""File..."" and ""Save"" into menus. I generally start off with a string array (which you can easily move to a file) new String[]{""File...""""+Save""""Load""...} This is one of the simpler patterns I've started out with. Then you can parse out the + sign and use it to mean ""Drop down a level in the menu when you add this one"" This is just a silly convention invent your own if you don't like it. The next step is binding that to code to run. You could have them all call the same method but what a pain in the ass (Giant switch statement). One possibility is to use reflection to bind a method name while you are reading in the data. Here's one solution (again it might not fit your tastes) new String[]{""File...[fileMenu]""""+Save[saveMenu]""""Load[loadMenu]""...} Then you parse out the thing in square braces reflectively hook it up to a method in your current class and you are set. There is a temptation I ALWAYS have at this point and I've learned to fight it because it NEVER works out. The temptation is to use the first set of data (""File..."") and manipulate it to fit some pattern and auomatically bind to your code (in this case remove all non-alpha chars make the first letter lower case and append ""Menu"" to get the correct method name). Feel free to try this it's very attractive and seems slick but be ready to abandon it when it doesn't meet some need (such as two menu items with the exact same name in different sub-menus). Another way would be if your language supports closures then you could actually create the file name and closure in the same place.. Anyway once you start coding like this you'll find that ALL your menu construction is in a single 10 line method and you can alter it to suit your needs. I had a case where I had to change a set of menus to a button hierarchy and I did it in 2 minutes. In the end you can use this pattern to set up the action objects easily and change how they are used easily (in a single location single line of code) so you experiment with them. There are many ways to use them but if you don't do what I'm recommending here you will end up having to re-implement across every menu item for every change which is really annoying--after a single change you will have wasted more time than if you had just implemented a data-driven solution in the first place. This really isn't hard code should take like an hour or two then you never have to write new Menu(""... again. Trust me this kind of tooling is just about always worth it. edit: I just about always code data-driven these days. Usually I'll prototype a few things the normal way recognize the pattern and refactor--and if you are refactoring correctly the data just about always factors out and what you're left with is beautiful tight and maintainable. I could do what I suggested above in less than 1/2 an hour (maybe an hour to do the reflective version). This is almost always just as long as it would do to use the unfactored version and from then on your savings multiply for every change. This is very similar to what people like about ruby except with ruby they seem to insert even more data into their code (which makes it awfully hard to extract your data from the code completely which is always a nice goal for internationalization). Hmm did I mention that if you're good at extracting your data like this i18n is virtually free? I suggest you just give it a try sometime and see what you think. Embedding the control in the strings is unnecessary if it makes you uncomfortable. I tend to use string/object arrays just because they are really easy to enter are still in the file while you are coding and are trivial to externalize later but if you like YML or XML or properties files use whatever you're comfortable with--just abstract your data from your code! You really code your GUI's like this? :| How can your GUI be fully factored without being data driven? There is so much repetitiveness. By the way String.split (used to be StringTokenizer) can help a lot with parsing these items. A string like ""File...|*|fileMethod"" can be parsed in a second (the * means ""top level"" in this case--you can make up your ""language"" on the fly--very like a Ruby DSL but easier)  You can group all your abstractAction using the dedicated Map javax.swing.actionmap . See http://java.sun.com/javase/6/docs/api/javax/swing/ActionMap.html Moreover each JComponent has an internal actionMap (getActionMap()). class MyComponent extends JPanel { public static final String ACTION_NAME1=""my.action.1""; public MyComponent() { AbstractAction action= new AbstractAction() { ... } getActionMap().put(ACTION_NAME1action); ... menu.add(getActionMap().get(ACTION_NAME1)); } } Hope it helps  Create a base action for your application; this will help you IMMENSELY later on Do create actions as you have in your code instead favor subclasses of your base action To organize them it will depend on what you are doing with them and you may have some actions organized one way and others created a different way. It will all depend. What you want is to have a consistent way to locate/create an action in your code. Depending on your UI you may need to differentiate between ""static"" actions (i.e. stuff that's always available in your app such as the menu system) and dynamic actions that are created only on certain screens or in certain locations. In any case using concrete subclasses of your specialized base action will help you keep these things organized. What you don't want is to be specifying things like labels mnemonics and icons all over the place in your code."
859,A,"Java based Swing Browser should support JavaScript In my company I am implementing a java based html browser. I found a lot of tools to generate complete browsers only in Swing which are looking like Mozilla. But I was not able to find a browser which supports JavaScript. The browser I will implement should execute JavaScript inside the HTML sides. Do you know of a tool that supports this? Or do you know of a parser which pairs the javascript to something I can use inside the html browser? I know that the eclipse plugins can handle javascript but I can not use AWT in my project. Thanks for your help. In my company I am implementing a java based html browser. Good God why? That said this page at java.net discusses some options; you could search it more extensively.  I'd look at Lobo. It sounds like just want you want. It has a HTML Renderer and parser and some support for Javascript. If it's missing a feature of Javascript that you need it seems like it would easier to contribute to Lobo instead of reinventing the wheel. Will you please tell me that how to implement this? That sounds like a good solution. I will test this. Thanks  You don't want to build this yourself. Fortunately there are a number of open source javascript engines you might be able to adapt. add the moment the html sides are shown by using C++ and a firefox plugin but i should use the existing html sides which including javascript. I have no choice i have to show html with javascript. I'm not saying don't do it: I'm saying find someone else that's already done it and use that.  It will be available. I hope pretty soon. Its name is JWebPane and it is based on WebKit afaik. The interesting question is ""When"" Here's the link: http://weblogs.java.net/blog/ixmal/archive/2008/05/introducing_jwe.html News today: http://weblogs.java.net/blog/alex2d/archive/2008/12/jwebpane_projec.html"
860,A,"JMenuItem setMinimumSize doesn't work I try to set a minimum width for my menu items but it doesn't seem to work. Here is my function which creates the items:  private JMenuItem newItem(String text String iconPath) { JMenuItem myMenuItem; if (iconPath == null || iconPath.isEmpty()) { myMenuItem = new JMenuItem(text); } else { ImageIcon icon = new ImageIcon(iconPath); myMenuItem = new JMenuItem(text icon); } // this would work but then setMaximumSize doesn't have any effect // myMenuItem.setPreferredSize(new Dimension(25020)); myMenuItem.setMinimumSize(new Dimension(25020)); myMenuItem.setMaximumSize(new Dimension(35020)); return myMenuItem; } What am I doing wrong? PS. I'm using jdk1.6 on Windows XP Servicepack 3 with the System Look&Feel That “iconPath == """"” comparison will not work by the way. oh thats right :). Thanks! So use to script languages that I forgot string comparasion is not static in java. Which version of Java are you using? Which operating system are you using? Which Look & Feel are you using? In Swing this matters :-( I'm using jdk1.6 on WinXP servicepack 3 with the system look and feel. Are you adding the menu items to a JMenu or doing something else with them? Just adding them to a JMenu with .add() Minimum and maximum sizes are ignored by most layout managers. Here is a useful little trick that forces those sizes to be respected in any layout manager: private class MyMenuItem extends JMenuItem { @Override public Dimension getPreferredSize() { Dimension preferred = super.getPreferredSize(); Dimension minimum = getMinimumSize(); Dimension maximum = getMaximumSize(); preferred.width = Math.min(Math.max(preferred.width minimum.width) maximum.width); preferred.height = Math.min(Math.max(preferred.height minimum.height) maximum.height); return preferred; } } This has the advantage of working even if the contents of the menu item changes. You will need to add constructors to suit your purposes. That's a good workaround! Thank you!  Ok so I found A solution perhaps not the best one but it seems to work. I'm still a bit worried about the FontMetrics statement though. So if anyone has a better solution I would be glad to see it. Here is my code (Menu.MINWIDTH is set to 200 and Menu.MAXWIDTH to 300):  private JMenuItem newItem(String text String iconPath) { JMenuItem myMenuItem; ImageIcon icon= null; int iconPixels = 0; if (iconPath == null || iconPath.isEmpty()) { myMenuItem = new JMenuItem(text); } else { icon = new ImageIcon(iconPath); myMenuItem = new JMenuItem(text icon); iconPixels = icon.getIconWidth(); } FontMetrics fontM = myMenuItem.getFontMetrics(new Font(""Default"" Font.PLAIN 12)); int stringPixels = fontM.stringWidth(text); int newWidth = stringPixels + iconPixels; newWidth = newWidth < Menu.MINWIDTH ? Menu.MINWIDTH : newWidth; newWidth = newWidth > Menu.MAXWIDTH ? Menu.MAXWIDTH : newWidth; myMenuItem.setPreferredSize(new Dimension(newWidth 20)); System.out.println(text + "" - "" + newWidth); return myMenuItem; } Instead of using font metrics you could just construct a `JLabel` with the font text and icon and get its preferred size. It should be the same as the default preferred size of the `JMenuItem` or near enough. Actually -- I only just noticed that you're constructing the menu item here -- you don't even need the `JLabel`; you can just use the menu item's own original preferred size as in Russ Hayward's answer.  If I understand the question I'm not sure why you need to use the FontMetrics. Just invoke getPreferredSize() on the menu item. If the preferred size is less than your minimum then reset the preferred size to your minimum. well the size should vary according to the length of the item's text. If the text is longer then the minimum the menu item should change its width but no more than the allowed maximum.  i replaced your myMenuItem.setMinimumSize(new Dimension(250 20)); myMenuItem.setMaximumSize(new Dimension(350 20)); with myMenuItem.setPreferredSize(new Dimension(250 20)); and it makes it the width you were looking for. In my experience swing components respond better to preferred size than min and max size. EDIT: after taking another stab i think this works pretty well.. it boils down to much the same as you have and i think it'll work no matter what the font (where as you've hardcoded the font). it does however not take into account the leading gutter of a menu item but unless you're text is really significantly long it shouldn't make a difference..  private JMenuItem newItem(String text String iconPath) { JMenuItem myMenuItem; if (iconPath == null || iconPath.isEmpty()) { myMenuItem = new JMenuItem(text); myMenuItem.setPreferredSize(new Dimension(myMenuItem.getFontMetrics(myMenuItem.getFont()).stringWidth(text) 20)); } else { ImageIcon icon = new ImageIcon(iconPath); myMenuItem = new JMenuItem(text icon); myMenuItem.setPreferredSize(new Dimension(icon.getIconWidth() icon.getIconHeight())); } return myMenuItem; }"
861,A,"Java image display I am trying to create a GUI that will coexist with several images. There is one background image that will take up the most room. On top of the background image several other images will be displayed in varying locations. These locations will be updated every 5 seconds or so so speed is not a huge factor. So all I need is the ability to display or remove images from display at the coordinates of my choosing upon each update. I am using netbeans to put it all together. Here is the most reasonable code I have come across to get the job done so far but I don't know how to put it into practice or whether it can accomplish what I need. A short simple explanation of what a JPanel is would also be helpful. public class ImagePanel extends JPanel { private Image img; public void setImage(String img) { setImage(new ImageIcon(img).getImage()); } public void setImage(Image img) { int width = this.getWidth(); int height = (int) (((double) img.getHeight(null) / img.getWidth(null)) * width); this.img = img.getScaledInstance(width height Image.SCALE_SMOOTH); } @Override public void paintComponent(Graphics g) { g.drawImage(img 0 0 this); } } And here is the code from the main class that I have so far. I can easily add code to determine whether or not given images should be displayed and where they need to be but I don't know where to put what. public class ClientWindow extends javax.swing.JFrame { /** Creates new form ClientWindow */ public ClientWindow() { initComponents(); imagePanel1.setImage(""C:\\Documents and Settings\\Robert\\Desktop\\ClientServer\\Poker Table Art\\TableAndChairs.png""); } /** This method is called from within the constructor to * initialize the form. * WARNING: Do NOT modify this code. The content of this method is * always regenerated by the Form Editor. */ @SuppressWarnings(""unchecked"") // <editor-fold defaultstate=""collapsed"" desc=""Generated Code""> private void initComponents() { jScrollPane1 = new javax.swing.JScrollPane(); jTextField1 = new javax.swing.JTextField(); jScrollPane2 = new javax.swing.JScrollPane(); jTextArea1 = new javax.swing.JTextArea(); jCheckBox2 = new javax.swing.JCheckBox(); imagePanel1 = new Pokertable.ImagePanel(); imagePanel3 = new Pokertable.ImagePanel(); jPanel1 = new javax.swing.JPanel(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); setTitle(""Not Logged In""); getContentPane().setLayout(null); jTextField1.addKeyListener(new java.awt.event.KeyAdapter() { public void keyTyped(java.awt.event.KeyEvent evt) { jTextField1KeyTyped(evt); } }); jScrollPane1.setViewportView(jTextField1); getContentPane().add(jScrollPane1); jScrollPane1.setBounds(0 540 170 22); jTextArea1.setColumns(20); jTextArea1.setRows(5); jScrollPane2.setViewportView(jTextArea1); getContentPane().add(jScrollPane2); jScrollPane2.setBounds(0 440 166 96); jCheckBox2.setText(""Sit Out Next Hand""); jCheckBox2.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jCheckBox2ActionPerformed(evt); } }); getContentPane().add(jCheckBox2); jCheckBox2.setBounds(0 410 113 23); imagePanel1.add(imagePanel3); imagePanel1.add(jPanel1); getContentPane().add(imagePanel1); imagePanel1.setBounds(0 0 520 370); pack(); }// </editor-fold> private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) { // TODO add your handling code here: } private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) { // TODO add your handling code here: } /** * @param args the command line arguments */ public static void main(String args[]) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new ClientWindow().setVisible(true); } }); } // Variables declaration - do not modify private Pokertable.ImagePanel imagePanel1; private Pokertable.ImagePanel imagePanel3; private javax.swing.JCheckBox jCheckBox2; private javax.swing.JPanel jPanel1; private javax.swing.JScrollPane jScrollPane1; private javax.swing.JScrollPane jScrollPane2; private javax.swing.JTextArea jTextArea1; private javax.swing.JTextField jTextField1; // End of variables declaration } For simplicity suppose that I want to have the TableAndChairs.png as a stable background image and the Button.png image (the D with a circle around it) to move to a new location every so often. read a swing tutorial and some things might get clearer for you :) Use your ImagePanel to display the background image. Then set the panel to use a null layout manager. Now you can add an ImageIcon to a JLabel and add the JLabel to the panel. Make sure you use: label.setSize( label.getPreferredSize() ); otherwise the label won't appear. By default the label will appear at location (0 0) although you can change this using the setLocation(...) method. To do the animation you can use a Swing Timer and set it to fire every 5 seconds. When the Timer fires you move the image by changing its location. If you don't know how to use a Timer then read the section from the Swing tutorial on ""How to Use Timers"". They are being updated sporadically not necessarily every x seconds. This is a game being written so every time someone takes an action the display needs to be updated. It doesn't change my answer of course some ""event"" has to happen for the image to move. That event could be regularly scheduled (by using a Timer) or is could be a user controlled event (by clicking a button for example). The point is whenever the event occurs you have to do ""something"". Without knowing the details of what you are doing I'm just suggestion that ""something"" should be setting the location of the icon so it looks like its moving around the board from player to player.  A better approach doing this would be by extending JComponent and overriding the paintComponent method to draw your custom Table and Chairs component. You could use the foundations of Circle Trigonometry to calculate each circle dynamically. I have done a quick example to show you how this could be simple done using Java2D. There is a lot of performance tweaks that could be done such as caching clipping etc. The reason why did this code is for you to understand how simple it is to draw them yourself. The reasons why to do this you have more control over what is being drawn and the location its being drawn. public class JTableChairs extends JComponent { private final int TABLE_DIAMETER = 300; private final int CHAIR_DIAMETER = 50; private final int CHAIR_TABLE_BOUND = 50; private final int CANVAS_WIDTH = 500; private final int NUMBER_OF_CHAIRS = 10; private final int TABLE_X = (CANVAS_WIDTH - TABLE_DIAMETER) / 2; private final int TABLE_Y = TABLE_X; private final double TABLE_CENTER_X = TABLE_DIAMETER / 2.0 + TABLE_X; private final double TABLE_CENTER_Y = TABLE_DIAMETER / 2.0 + TABLE_Y; private final double TABLE_RADIUS = TABLE_DIAMETER / 2.0 + CHAIR_TABLE_BOUND; public JTableChairs() { super(); } @Override public void paintComponent(Graphics g) { g.setColor(Color.WHITE); g.fillRect(0 0 getSize().width getSize().height); // Draw Table. g.setColor(Color.BLACK); g.fillOval(TABLE_X TABLE_Y TABLE_DIAMETER TABLE_DIAMETER); // Draw each chair using normal circle trig functions. for (int i = 1; i <= NUMBER_OF_CHAIRS; i++) { Rectangle r = getSeatCoordinates(i); g.drawOval(r.x r.y r.width r.height); g.drawString(String.valueOf(i) r.x r.y); } } public Rectangle getSeatCoordinates(int seat) { // Clamp from 0 to number of chairs to make sure it doesn't // go over/under bounds. seat = seat < 1 ? 1 : (seat > NUMBER_OF_CHAIRS ? NUMBER_OF_CHAIRS : seat) - 1; // Calculate the coordinates using trig functions. double arcAngle = Math.toRadians(360 / NUMBER_OF_CHAIRS * seat); int x = (int)(TABLE_CENTER_X + TABLE_RADIUS * Math.cos(arcAngle) - CHAIR_DIAMETER / 2.0); int y = (int)(TABLE_CENTER_Y + TABLE_RADIUS * Math.sin(arcAngle) - CHAIR_DIAMETER / 2.0); return new Rectangle(new Point(x y) new Dimension(CHAIR_DIAMETER CHAIR_DIAMETER)); } } Say you need to do some listener so when you press any circle you want to highlight it. Using collision detection in 2D you can do that. Note the ugly way doing it is the following:  public boolean setSeat(Point coord) { // Quick collision detection. This is bad performance since its // checking each point. for (int i = 1; i <= NUMBER_OF_CHAIRS; i++) { Rectangle r = getSeatCoordinates(i); if (r.contains(coord)) { Graphics g = getGraphics(); g.setColor(Color.RED); g.drawRect(r.x r.y r.width r.height); g.dispose(); return true; } } return false; } And in the constructor you can add a mouse listener: addMouseListener(new MouseAdapter() { @Override public void mouseReleased(MouseEvent e) { setSeat(e.getPoint()); } }); I hope you learned a thing or two :x  just an idea: use an additional class for holding the images and corresponding coordinates and put them into a list. public class MyImage { // or SubImage? private Image image; private int x; private int y; public MyImage(Image image int x int y) { this.image = image; this.x = x; this.y = y; } public void paint(Graphics g ImageObserver obs) { g.drawImage(image x y obs); } // getters and setters } public class ImagePanel extends JPanel { private Image img; private final List<MyImage> images = new ArrayList<MyImage>(); // setImage methods public void addMyImage(MyImage image) { images.add(image); } // or/and public void addMyImage(Image image int x int y) { images.add(new MyImage(image x y)); } @Override public void paintComponent(Graphics g) { g.drawImage(img 0 0 this); // check if img is null? for (MyImage image : images) { image.paint(g this); } } Why the downvote? not much helpful downvoting without comment... or didn't you like the comment I did?  If each of your panels were one of these ImagePanels and you simply had it take another pair of ints as argument your final paint method would simply paint your n different image panels onto the main graphics object: public class Example extends JApplet{ ImagePanel[] images; //whatever code you want for the rest of your applet public void paint(){ for(ImagePanel i : images) images.paintComponent(); } } } and you would fix ImagePanel to be: @Override public void paintComponent(Graphics g) { g.drawImage(img x y this); } this is an application not an applet. will that affect the fact that you are overriding the paint() method? I don't believe so. The underlying idea is the same though. I only have JApplet code but if you post your main class I can give you some more help for the images themselves there isn't really any logic to them so events don't need to be handled. But i'm not sure WHERE code goes to update everything and how to control the properties of the components being updated. Yeah. You should read some tutorials or play about (I learned by playing about). but your main problem is that you don't seem to have overridden the paint method. The signature is public void paint(Graphics g) -- either that or you need to be calling repaint. I'm not entirely sure. Also it might be easier to be using a JApplet and then put that into a JFrame to make it an application"
862,A,"Which Layout Manager do you use? What java GUI layout manager does everyone use? Lately I have been using MigLayout which has some powerful component controls. Just wanted to see what other developers are using other than the standard JDK ones. MiGLayout is the GUI layout manager which is widely used by Java Developers. i just tried it and it is AWESOME! Just have a look at the website and you will know for sure. No need to justify in words when you can see it in action!! Let's add some pros and cons. The most outstanding feature of MigLayout is probably its debug mode showing the boundaries of cells and components with dotted lines overlaid on the UI. This is vital to understand why a layout goes bad. The cons... well it's not part of the JDK but it's just a 75k dependency. MigLayout is easy to learn and do excatly what you expect. Just print its ""Cheat sheet"". It has nice sample application. It is possible to write readable and changeable layouts. It has useful debug mode. I wrote Swing applications for 2 years. Trust me do not use standard layouts it is paintful way to hell use MigLayout. This answer is a bit quick. We would expect justifications pros and cons... What makes MiGLayout so good?  I use GridBagLayout for form like layouts use BorderLayout for simple layouts and FlowLayout for number of horizontal icons/buttons that have some spaces in between. Netbeans is also a good GUI builder that can avoid a lot of tedious layout codings to save your time.  I'm a bit of Java newbie. I tried GridBagLayout gave up then tried BoxLayout then gave up then made my own Custom Layout which worked. With GridBag and Box I put my best guess in and the Layout engines decided to do something different without any apparent way to debug them. With my custom layout I could print out coordinates and widths and heights to find out where it was going wrong. Its a bit mathy placing things but you've got the full power of java to use rather than the limited vocabulary of one of the builtin layout managers. Of course it was just for a home project you'd never be allowed to do this at work.  GridBagLayout is powerful but quite primitively: the code that wires up the layout is very verbose. This utility library (actual just 1 jar file containing about 10 classes) simplifies a lot of works: http://code.google.com/p/painless-gridbag/ The following snippet is quoted from the home page of that site:  PainlessGridBag gbl = new PainlessGridBag(getContentPane() false); gbl.row().cell(lblFirstName).cell(txtFirstName).fillX() .cell(lblFamilyName).cell(txtFamilyName).fillX(); gbl.row().cell(lblAddress).cellXRemainder(txtAddress).fillX(); gbl.doneAndPushEverythingToTop(); This has the advantage you can just copy the 10 classes into your project and not be dependent on a third-party library...  The only layout manager that I have found that I actually like is the Relative Layout Manager. The Relative Layout Manager works in a way that is consistent with how dialog boxes are conceptually organized. One draw-back is that while this layout manager deals with additive constraints. It does not seem to deal with ratio constraints. Fortunately it is pretty well designed and I was able to implement this feature.  I use BorderLayout 90% of the time while nesting BoxLayout and SpringLayout  I prefer to minimize dependencies on 3rd party libs so it's usually BoxLayout for dialogs and GridBagLayout for ""complicated"" layouts. GridBagLayout is easy enough to understand but a bit hard to configure. I wrote myself a tool for creating the code from HTML layouts (hope that helps others too): http://www.onyxbits.de/content/blog/patrick/java-gui-building-gridbaglayout-manager-made-easy  I use to go for GridBagLayout for the control but since java1.6 I'm going to use GroupLayout Is awsome. Here an screenshot and sample code to use it!.  private void layoutComponents(){ JPanel panel = new JPanel(); GroupLayout layout = new GroupLayout(panel); panel.setLayout(layout); layout.setAutoCreateGaps(true); layout.setAutoCreateContainerGaps(true); SequentialGroup hGroup = layout.createSequentialGroup(); JLabel nameLbl = new JLabel(""Name""); JLabel countLbl = new JLabel(""Amount""); JLabel dateLbl = new JLabel(""Date(dd/MM/yy)""); hGroup.addGroup(layout.createParallelGroup(). addComponent(nameLbl). addComponent(countLbl). addComponent(dateLbl). addComponent(go)); hGroup.addGroup(layout.createParallelGroup(). addComponent(name). addComponent(count). addComponent(date)); layout.setHorizontalGroup(hGroup); SequentialGroup vGroup = layout.createSequentialGroup(); vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE). addComponent(nameLbl).addComponent(name)); vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE). addComponent(countLbl).addComponent(count)); vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE). addComponent(dateLbl).addComponent(date)); vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE). addComponent(go)); layout.setVerticalGroup(vGroup); frame.add( panel  BorderLayout.NORTH ); frame.add( new JScrollPane( textArea ) ); } I've removed the dead link . . the source code in the link at the end was deleted :-(  As a general overview you might find an article I wrote a loooong time ago at sun to be useful. It's not up to date with the latest layout managers but it concentrates on effective nesting of layout managers rather than trying to do everything with one layout. See http://developer.java.sun.com/developer/onlineTraining/GUI/AWTLayoutMgr  Spring layout which was developed for the mantissa gui builder which is part of netbeans. I thought Matisse used GroupLayout. There was a SpringLayout GUI builder in the BDK. I wouldn't recommend it. Internally the GroupLayout implementation does use what it calls springs.  I use DesignGridLayout for most of my panels. For the rare panels that DesignGridLayout cannot fully handle I use a mix of Borderlayout and DesignGridLayout. With DesigngridLayout you can manually code your layouts with a minimum number of lines of code that are easy to type and read: DesignGridLayouut layout = new DesignGridLayout(myPanel); layout.row().grid(lblFirstName).add(txfFirstName).grid(lblSurName).add(txfSurName); layout.row().grid(lblAddress).add(txfAddress); layout.row().center().add(btnOK btnCancel); Each row of the panel grid is defined by one line of code. As you can see ""drawing"" your panel is quite straightforward. In addition I find DesignGridLayout has some unique features (such as its ""smart vertical resize""). Oops I forgot the usual disclaimer: ""I am one of DesignGridLayout project owners"";-)  I was sick of all those layoutmanagers that needed alot of setup werent very readable or exhausting to do manually so I wrote my own very simple laoutmanager which uses the abstraction of two photocorners keeping each component in place. You can add your component like this: parent.add(child""topleft(0 0.5)bottomright(0.51.0)""); Have a look here https://github.com/hageldave/UsefulStuff/blob/master/src/PhotoCornersLayout.java ;) you're responisble for a correct layout yourself though cause it's not checking overlappings or other shortcommings of your layout.  MiG and FormLayout (JGoodies) are both excellent for manual layout (And almost all layout eventually becomes manual). My biggest piece of advice is to design your views so that you can completely rip out the layout and re-implement it without impacting your application (good separation of view and controller is key here). Definitely take a look at JGoodie's PresentationModel approach for implementing 'dumb' views. I use this technique with a GUI builder (I use GroupLayout with the Jigloo GUI builder plugin) for tossing off quick prototypes. After 3 or 4 iterations that usually goes out the window and we do a re-implement using MiG or FormLayout. EDIT: Since I wrote this I have moved to using MiG for all of my layouts and I no longer use a GUI builder - it's just way too easy to lay things out using MiG.  I use the GridBagLayout. It seems to take alot of code but it makes very good looking layouts. I also like to combine BorderLayout with GridBagLayout panels for great customizability.  I'm a big fan of using TableLayout instead of GridBagLayout. Everything just makes sense whereas every time I try to use GridBagLayout it crushes my soul.  I've used GroupLayout as well. Again its a standard JDK layout manager as of Java6 but you can find the library separate as well.  I have started using Swing recently and I am using GridBagLayout.  GridBagLayout is usable. Once you get used to using it it works great. I think the standard JDK layout managers are pretty powerful on their own. Plus you get to minimize dependency on 3rd party libraries.  I've found that for any non-trivial GUI I use multiple layouts with nested sub-panels where the main panel may have a GridBagLayout and each sub-panel (typically without a border or indication that it is a panel) uses a simpler layout where possible. Typically I'll use BorderLayout FlowLayout and BoxLayout for smaller simpler sub-panels. By dividing small sections of the GUI into sub-panels and using the simplest layout possible to control that section of the GUI you can create complex well arranged displays without too much headache from GridBagLayout's many options. Also by grouping like display functionality into a panel it creates more readable code.  I started off using various nested layouts then moved over to GridBagLayout (which is pretty frustrating). Since then I tried FormLayout (but found it wasn't suited to anything but forms) and settled firmly on TableLayout which overall I'm very happy with. Since then I've discovered MiGLayout and although I haven't done much more than play with it it seems very capable quite similar to TableLayout and probably a little cleaner. The big plus for me is that MiGLayout is set to become part of the JDK so I intend to use it pretty much exclusively when it does. The other thing to remember is that no matter which heavy-weight LayoutManager you settle on there is always a place for some of the simpler layout managers such as GridLayout. I've seen some horrible things done with GridBagLayout that could have been done much more easily with a simpler layout manager.  I've always been a big fan of the GridBagLayout. It resembles HTML tables a lot so it is intuitive to those web programmers.  The last Swing application I worked on used JGoodies' FormsLayout."
863,A,"How to un-link a JSlider's progress indicator from its thumb? I'm using a JSlider to show progress in my application so that it updates as a certain process computes. I want a user to be able to drag the thumb backwards to a tick mark in the past but when this happens I want the progress indicator to remain at its current position. // A dismal attempt at drawing the situation Progress: --------- Thumb: | // User drags backwards. What I have: Progress: --- Thumb: | // What I want instead: Progress: --------- Thumb: | Can anyone offer any guidance for how to best accomplish this? Thanks in advance for all help! You'll need to post a code example. I use JSlider extensively and have never seen the track change size in response to moving the slider. As a WAG somehow the value is being fed back into the size of the component and what you're seeing is the component changing size.. Perhaps I worded it wrong then. I really want the progress indicator (the blue line that grows as the thumb moves down the component). What is that really called? What's the difference between what you have and what you want? They look the same to me. Haha thanks for pointing that out. I edited it so it no longer said ""track"" and messed up the drawing. Now it looks how i mean it. Ah I see what you mean. Unfortunately there's no way to do that. The 'blue bar"" is not really part of JSlider it's part of the Metal LAF. It's just the way the Metal LAF chose to paint the component. If you try it with another LAF you don't get the bar at all. You'll need to couple a JProgressBar and a JSlider to get what you want. Here's a starting point. You'll need to tweak it to get it to look right import java.awt.*; import java.awt.event.ActionEvent; import javax.swing.*; import javax.swing.event.ChangeListener; public class ProgressSlider extends javax.swing.JPanel { private JProgressBar progressBar; private JSlider slider; public ProgressSlider() { this(0 100); } public ProgressSlider(int min int max) { setLayout(new GridBagLayout()); GridBagConstraints gbc; gbc = new GridBagConstraints(); gbc.gridwidth = GridBagConstraints.REMAINDER; gbc.fill = GridBagConstraints.HORIZONTAL; slider = new JSlider(min max min); progressBar = new JProgressBar(min max); add(slider gbc); add(progressBar gbc); } public void setValue(int n) { boolean adjSlider = slider.getValue() == progressBar.getValue(); progressBar.setValue(n); if (adjSlider) slider.setValue(n); } public int getValue() { return progressBar.getValue(); } public int getSliderValue() { return slider.getValue(); } public void syncSlider() { slider.setValue(progressBar.getValue()); } public void addChangeListener(ChangeListener l) { slider.addChangeListener(l); } public void removeChangeListener(ChangeListener l) { slider.removeChangeListener(l); } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { JFrame jf = new JFrame(); jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); final ProgressSlider ps = new ProgressSlider(); final JTextField tf = new JTextField(4); final JButton jb = new JButton(new AbstractAction(""Set"") { public void actionPerformed(ActionEvent e) { ps.setValue(Integer.parseInt(tf.getText())); }}); JPanel jp = new JPanel(); jp.add(tf); jp.add(jb); jf.getContentPane().add(ps BorderLayout.CENTER); jf.getContentPane().add(jp BorderLayout.SOUTH); jf.pack(); jf.setVisible(true); } }); } } I see what you were saying about the Metal LAF. I decided to extend its paintTrack() method per the solution I posted. Thanks for the help.  Well I don't see how this is possible. You will need to customize the slider UI and change the model because no you need to store two pieces of model information the ""track value"" and the ""thumb value"". If you want a big hack then you paint two sliders on top of one another. The bottom slider would be for the track value and the top would be for the thumb value. import java.awt.*; import java.awt.event.*; import javax.swing.*; import javax.swing.plaf.metal.*; public class SliderTest extends JFrame { public SliderTest() { JSlider bottom = createSlider(); bottom.setUI( new MySliderUI1() ); JSlider top = createSlider(); top.setUI( new MySliderUI2() ); top.setOpaque(false); JPanel panel = new JPanel(); panel.setLayout( new OverlapLayout() ); panel.add( bottom ); panel.add( top ); getContentPane().add( panel ); } private JSlider createSlider() { JSlider slider = new JSlider(2 50); slider.createStandardLabels(10 5); slider.setMajorTickSpacing(10); slider.setPaintTicks(true); slider.setPaintLabels(true); slider.setValue(20); return slider; } class MySliderUI1 extends MetalSliderUI { public void paintThumb(Graphics g) {} } class MySliderUI2 extends MetalSliderUI { public void paintTrack(Graphics g) {} } public static void main(String[] args) { JFrame frame = new SliderTest(); frame.setDefaultCloseOperation( EXIT_ON_CLOSE ); frame.pack(); frame.setLocationRelativeTo( null ); frame.setVisible( true ); } } You will also need the Overlap Layout. How you keep them in sync would be up to you. The solution has many flaws but it may give you some ideas. I went with a solution close to what you first talked about-- extending JSlider to track the progress and overriding the MetalSliderUI to paint the track to the point I wanted. Thanks for the help.  I figured it out. I extended JSlider to keep track of the progress separately from the current thumb position and then overrode the MetalSliderUI's paintTrack method to draw fill the track to the position I want. Here's the solution stripped down the important parts. The new progress bar: public class ProgressSlider extends JSlider { protected int progress; private static final String uiClassID = ""ProgressSliderUI""; public ProgressSlider() { progress = 0; putClientProperty(""JSlider.isFilled"" Boolean.TRUE); updateUI(); } public void updateUI() { setUI(new ProgressSliderUI(this)); } public String getUIClassID() { return uiClassID; } public int getProgress() { return this.progress; } public void setProgress(int value) { if (value < this.getMinimum()) { this.progress = this.getMinimum(); } else if (value > this.getMaximum()) { this.progress = this.getMaximum(); } else { this.progress = value; } } } The new UI: Note there were only 2 lines added to the paintTrack() method in the UI class immediately following the comment saying such. public class ProgressSliderUI extends MetalSliderUI { public ProgressSliderUI() { super(); } public ProgressSliderUI(JSlider b) { } @Override public void paintTrack(Graphics g) { Color trackColor = !slider.isEnabled() ? MetalLookAndFeel .getControlShadow() : Color.blue; boolean leftToRight = true; g.translate(trackRect.x trackRect.y); int trackLeft = 0; int trackTop = 0; int trackRight = 0; int trackBottom = 0; // Draw the track if (slider.getOrientation() == JSlider.HORIZONTAL) { trackBottom = (trackRect.height - 1) - getThumbOverhang(); trackTop = trackBottom - (getTrackWidth() - 1); trackRight = trackRect.width - 1; } else { if (leftToRight) { trackLeft = (trackRect.width - getThumbOverhang()) - getTrackWidth(); trackRight = (trackRect.width - getThumbOverhang()) - 1; } else { trackLeft = getThumbOverhang(); trackRight = getThumbOverhang() + getTrackWidth() - 1; } trackBottom = trackRect.height - 1; } if (slider.isEnabled()) { g.setColor(MetalLookAndFeel.getControlDarkShadow()); g.drawRect(trackLeft trackTop (trackRight - trackLeft) - 1 (trackBottom - trackTop) - 1); g.setColor(MetalLookAndFeel.getControlHighlight()); g.drawLine(trackLeft + 1 trackBottom trackRight trackBottom); g.drawLine(trackRight trackTop + 1 trackRight trackBottom); g.setColor(MetalLookAndFeel.getControlShadow()); g.drawLine(trackLeft + 1 trackTop + 1 trackRight - 2 trackTop + 1); g.drawLine(trackLeft + 1 trackTop + 1 trackLeft + 1 trackBottom - 2); } else { g.setColor(MetalLookAndFeel.getControlShadow()); g.drawRect(trackLeft trackTop (trackRight - trackLeft) - 1 (trackBottom - trackTop) - 1); } // Draw the fill if (filledSlider) { int middleOfThumb = 0; int fillTop = 0; int fillLeft = 0; int fillBottom = 0; int fillRight = 0; if (slider.getOrientation() == JSlider.HORIZONTAL) { middleOfThumb = thumbRect.x + (thumbRect.width / 2); middleOfThumb -= trackRect.x; // To compensate for the // g.translate() fillTop = !slider.isEnabled() ? trackTop : trackTop + 1; fillBottom = !slider.isEnabled() ? trackBottom - 1 : trackBottom - 2; if (!drawInverted()) { fillLeft = !slider.isEnabled() ? trackLeft : trackLeft + 1; // THIS IS THE CHANGE OF NOTE: // Fills the progress with the value from the custom slider fillRight = xPositionForValue(((ProgressSlider) slider) .getProgress()); fillRight -= trackRect.x; } else { fillLeft = middleOfThumb; fillRight = !slider.isEnabled() ? trackRight - 1 : trackRight - 2; } } else { middleOfThumb = thumbRect.y + (thumbRect.height / 2); middleOfThumb -= trackRect.y; // To compensate for the // g.translate() fillLeft = !slider.isEnabled() ? trackLeft : trackLeft + 1; fillRight = !slider.isEnabled() ? trackRight - 1 : trackRight - 2; if (!drawInverted()) { fillTop = middleOfThumb; fillBottom = !slider.isEnabled() ? trackBottom - 1 : trackBottom - 2; } else { fillTop = !slider.isEnabled() ? trackTop : trackTop + 1; fillBottom = middleOfThumb; } } if (slider.isEnabled()) { g.setColor(slider.getBackground()); g.drawLine(fillLeft fillTop fillRight fillTop); g.drawLine(fillLeft fillTop fillLeft fillBottom); g.setColor(trackColor); g.fillRect(fillLeft + 1 fillTop + 1 fillRight - fillLeft fillBottom - fillTop); } else { g.setColor(MetalLookAndFeel.getControlShadow()); g.fillRect(fillLeft fillTop fillRight - fillLeft trackBottom - trackTop); } } g.translate(-trackRect.x -trackRect.y); } } And for the driver to test it: public class ProgressExample extends JFrame { public ProgressExample() { super(""Progress Example""); ProgressSlider mSlider = new ProgressSlider(); mSlider.setMinimum(0); mSlider.setMaximum(100); mSlider.setValue(20); mSlider.setProgress(50); getContentPane().setLayout(new FlowLayout()); getContentPane().add(slider); getContentPane().add(mSlider); } public static void main(String args[]) { ProgressExample f = new ProgressExample(); f.addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent e) { System.exit(0); } }); f.setSize(300 80); f.show(); } }"
864,A,"Java .getText vs. Hard Coded String not returning the same results I am completely stumped with this one . . . If I call the function below with the following: Search(SearchTextField.getText()); // (Fiberglass was entered) Search(""Fiberglass""); // hardcoded I get the following results: Fiberglass 10 Not Here Fiberglass 10 String found! Same String is passed with the same length different results. How can this be? Yes I've trimmed it on both sides of the == with no luck. I am loosing my mind any help would be appreciated. Test[] array = new Test[3]; array[0] = new RowBoat(""Wood"" ""Oars"" 10); array[1] = new PowerBoat(""Fiberglass"" ""Outboard"" 35); array[2] = new SailBoat(""Composite"" ""Sail"" 40); public void Search(String searchString) { boolean found = false; System.out.print(searchString + "" "" + searchString.length() + "" ""); for (int i = 0; i < array.length; i++) { if (searchString == array[i].getBoatMaterial()) { found = true; break; } } if (found) { System.out.println(""String found!""); } else { System.out.println(""Not Here""); } } Use the .equals() method when you're comparing Strings. Do not use == equals() will compare the actual String content no matter where the String resides in memory. if (searchString.equals(array[i].getBoatMaterial())) { Matt thank you a million times. Works like a charm.  Since String variables are references in Java when you code  if (searchString == array[i].getBoatMaterial()) { What you are actually doing is comparing two pointers. It just so happens that when you hardcode the same string in multiple places in your program the compiler reduces it to one instance (since Strings are immutable) and reuses it. This is why using a hardcoded value succeeds since both pointers point to the same value. However when the search string is not the same hardcoded ""Fiberglass"" the two strings are at different locations and the comparison fails. To compare two strings use the String.equals(String) method instead. Answer Upvoted! Jim if I could give you some credit I would. Excellent explanation completely makes sense now. Thanks You could upvote the answer :-)  Use the String.equals(String other) function to compare strings not the == operator. The function checks the actual contents of the string the == operator checks whether the references to the objects are equal."
865,A,"Why does Jython refuse to find my Java package? I know it's something silly but for some reason Jython refuses to find javax.swing. I'm using Java 1.6.0_11. This is my start-up script: @echo off ""%JAVA_HOME%\bin\java"" -Xmx1024M -classpath "".;c:\Projects\Jython2.5.1\jython.jar"" org.python.util.jython My output looks like: Jython 2.5.1 (Release_2_5_1:6813 Sep 26 2009 13:47:54) [Java HotSpot(TM) Client VM (Sun Microsystems Inc.)] on java1.6.0_10 Type ""help"" ""copyright"" ""credits"" or ""license"" for more information. >>> import javax.swing Traceback (most recent call last): File ""<stdin>"" line 1 in <module> ImportError: No module named swing >>> import javax >>> dir(javax) ['__name__'] >>> I changed the name -- you're right this can happen to anyone. This is an extremely common question/problem. Any chance that you would change the title to ""Why does Jython refuse to find my Java package?"" that way more people will probably find this. Thanks for changing the name! I had similar issues and it turns out that since the standalone Jython dist does not support caching it also does not support the ""import *"" approach. This is not clearly documented anywhere in the official Jython docs but I concluded this based on a number of different bug reports: https://groups.google.com/forum/?hl=en&fromgroups=#!topic/robotframework-users/6ipB0DYJkvU http://bugs.jython.org/issue1778514 http://bugs.jython.org/issue1422 http://bugs.jython.org/issue1692579 Notable from that last link: So as Oti noted in standalone you must do full imports to succeed. To fix your issue use the non-standalone standard jython.jar generated by installing jython using the 'Standard' option. If you wanted to package and distribute jython.jar with your application in case a user does not have Jython installed then you will also need to copy/pase the complete ""Lib"" folder from the jython installation directory into whichever location you end up placing jython.jar. This enables access to the python stdlib which is not included in the standard jar file. UPDATE: After playing around more I think I have a fix to enable ""import *"" type imports even when using the standalone jar. All that needs to be done is to enable caching! You can do this by either adding the following options to the jvm when running jython: -Dpython.cachedir.skip=false -Dpython.cachedir=DESIRED CACHE PATH (Note that the second argument is optional and if left blank a default value will be used) If you are having an issue running the InteractiveConsole embedded in an app (which is what my problem was) you can add these properties before initializing the console:  Properties props = new Properties(); props.put(""python.cachedir.skip"" ""false""); props.put(""python.cachedir"" ""DESIRED CACHE PATH""); // again this option is optional InteractiveConsole.initialize(System.getProperties() props new String[0]); Is there anyway to modify the standalone jar so that python.cachedir.skip is set to false by default?  Most likely Jython is not scanning your packages. On startup Jython tries to go through the jars and class files on its path and scan for Java packages. This is necessary because there is no way to look for Java packages by reflection. Package scanning can be deliberately turned off or you could lack write privileges where it wants to write the cached information out see http://wiki.python.org/jython/PackageScanning for more. The best way to import Java classes is to do so explicitly class by class like so: from javax.swing import JFrame This method should always work even if package scanning is off or otherwise unable to work and is the recommended approach (though it can be a bit tedious). If you do want to import packages (or if you want to do ""from javax.swing import *"" which also depends on package scanning - but is discouraged) you will need to figure out why your package scanning isn't working. The ""from package import object"" thing worked. I'll figure out why the package scanning isn't working but at least I have something to go on. Thanks Frank! Keep up the great work!  I'm using Java 1.6.0_11 No you're using [Java HotSpot(TM) Client VM (Sun Microsystems Inc.)] on java1.6.0_10 What happens if you delete the cachedir from the Jython distribution directory and try again? Also why are you explicitly setting the classpath that way? Why not simply java -jar jython.jar ? you can enable caching even when using the standalone jar. See my answer in this thread. I'm using the stand-alone Jython jar which doesn't do caching. And I can't run this from -jar because I will eventually start adding other jars to the classpath."
866,A,Trying to bring swing frame to front before taking a screenshot but getting artifacts I have a part of my app that takes a screenshot of a certain window but before I do so I want to bring the window to the front. This works fine on my Mac machine but when I tested it on in Windows XP on paralells the screenshot always has a greyed out area where the overlapping window was. It seems the screenshot is always taken while the window I want on top is being transfered to the top. Ive tried using both:  frame.setVisible(true); and frame.setAlwaysOnTop(true); Does anyone have a reasonable solution for this issue? Can you post the code fragment that takes the screenshot and calls frame.setVisible(true)? If you are trying to take a screenshot of a window w painted by Java you can just ask it to paint itself on a BufferedImage bi = new BufferedImage( w.width w.height BufferedImage.TYPE_INT_RGB); Graphics g = bi.getGraphics(); by calling the windows' paint(g) method. You can then save the BufferedImage to a file. If you are grabbing an external window then I believe Oscar Reyes has given you all the answers. Awesome this worked perfectly and seems very clean. Thank you very much! Awwn :( I thought you have covered that part already!!.. :)  You could add a delay the the thread that takes the screenshot. You could fire the screenshot from the frame when the it has gained focus: class ScreenshotShooter implements FocusListener { public void focusGained( FocusEvent e ) { // smile..... // you may add a sec of delay here just be be sure. } public void focusLost( FocusEvent e ) {} } FocusListener focusListener = new ScreenshotShooter(); frame.addFocusListener( focusListener ); frame.setVisible( true ); // should autofire frame.remoe( focusListener); You can do both. That sounds like a reasonable solution I'll try that. Thanks. I tired that but the delay seemed to prolong the time it took for the refresh to occur. I was thinking I could maybe start a new thread the slept for a certain period of time and lock that against the screenshot thread but this all seems very sloppy and would not guarantee success on machines of differing speed. Oh definitely that should be in another thread or at least using SwingUtilities.invokeLater() .... Otherwise you stop for a second take the screenthot and theeen make it visible.
867,A,Best way of subclassing a JPanel in Swing I am currently trying to build an expanding panel in Swing (akin the WPF's Expander control) and I'd like to retain the usual methods for manipulating it (i. e. setLayout add etc.). Only they should be routed to an embedded panel (the one being shown or hidden). How would one do that? Overriding every method of JComponent and re-routing that to an embedded JPanel would be cumbersome but that's the only way I see. Or should I rather make the embedded panel visible to the outside and force users to use something like ExpanderPanel.getInnerPanel() instead. But then it's no drop-in replacement for JPanel which I think would be nice to have. In 1.5(ish) Swing routed a few methods to the content pane in JFrame JApplet etc. Whilst there appeared to be some usability benefits for those just starting it doesn't actually fix the problem. So everyone has to deal with a very strangely behaving API. So my advice is to avoid this approach.  If you have a Container widget which holds a panel you want to show and hide why not layout your inner panel however you want then add it to the Container panel then use static methods against the Container to say JPanel p = new JPanel(); //do something with the JPanel... ContainerWidget.setContent(p); ContainerWidget.expandPanel(ptrue); Would somethign like this work?  Take a look at the JXTaskPane from Swingx project. It already does what you need. The requirements here force me to reinvent the wheel as the code must run on plain Java without any JNI or library dependencies.
868,A,"How to keep the bottom of an SWT Browser widget visible when appending to the HTML content? I'm viewing HTML in an SWT Browser widget. I am appending logging messages to the end of the content and would like to keep the bottom visible all the time. Currently whenever I append text to the content I first set the new text: browser.setText(content); And then I scroll down the Browser widget via JavaScript: browser.execute(""window.scrollTo(0100000);""); The problem with this is that when I set the text the widget switches to the top again before scrolling down so when I append lots of messages quickly the browser widget is showing the top part most of the time occasionally flickering when switching to the bottom. This makes it impossible to follow what is being logged at the bottom. I am aware that I could use a tree viewer and get all the convenience of the Eclipse platform but there is a Swing version of the app too and both should use the same HTML with CSS presentation. Ideally I'd like to avoid embedding a Swing component but if there is one that would allow this I'd be happy to hear about it. I have tried it with a JEditorPane inside a JScrollPane appending to the content via the editor kit's read method: editorPane.getEditorKit().read(/*...*/); And then scrolling down like this: editorPane.setCaretPosition(editorPane.getDocument().getLength()); This works very smoothly for the standalone Swing app but embedded in Eclipse it flickers and does not keep up with fast updates of the HTML content. Right now the only way I can make this work smoothly inside Eclipse is prepending to the Browser widget's content instead of appending but I'd really prefer adding new messages at the bottom not at the top. Rewriting the whole HTML content every time seems unnecessarily busy-work and there may not be a way to prevent some browsers from scrolling to the top each time you redraw the entire page. Especially if you allow the logs you show to get very long this will get slower and slower as the log gets longer. A better solution might be to use JavaScript to append to the page. You're already using browser.execute() How about something like this (assuming ""itemID"" is the ID of the DIV containing the content): String newContent = newContent.replaceAll(""\n"" ""<br>"").replaceAll(""'"" ""\\\\'""); browser.execute(""document.getElementById(\""itemID\"").innerHTML += '"" newContent + ""'""); You have to do the replaceAll() and you may need a couple more transformations depending on your log content. I've noticed that browser.execute() doesn't like it if the script contains newlines for example and single quotes in your string needed to be quoted as I show above. @Fabian Steeg: You may want to log an SWT bug report about this. Thank you this is much better even if I set the entire text each time. Just wanted add that a downside of this is that it does not seem to work on the Mac with a default Browser widget. A workaround is to force Mozilla usage in the Browser widget with the SWT.MOZILLA option which requires an installed XulRunner (see http://www.eclipse.org/swt/faq.php#howusemozilla).  I would have just added this as a comment but it wouldn't let me (not enough reputation). You can ship XUL in a nonstandard location on the mac by setting a system property. System.setProperty(""org.eclipse.swt.browser.XULRunnerPath"" ""/fubar/xul/Versions/1.9.0.7/""); Thanks this is good to know for the future. In this particular case I ended up not using the browser widget but a tree viewer (for other reasons)."
869,A,"How should I handle exceptions when using SwingWorker? I use SwingWorker in Java 6 to avoid running long-running code on the event dispatch thread. If the call to get() in my done() method returns an exception what is an appropriate way of handling the exception? I'm particularly concerned about possible InterruptedExceptions. The JavaDoc example simply ignores the exception but I've learnt over the years that swallowing exceptions leads to hard-to-debug code. A sample usage is as follows: new SwingWorker<String Void>() { @Override protected String doInBackground() throws Exception { // do long-running calculation return result; } @Override protected void done() { try { setTextField(get()); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } } }.execute(); Assume this is a GUI application you may want to provide a visual feedback about failed operation upon exception.  This is as much an interface question as it is an error handling question. A lot of apps add some small table that lists the running background jobs. An exception in one of them might flash the table row that produced an error or do something as disruptive as present an alert. It depends on the severity of the exception. I think the harder question you'll probably have to answer is how many potentially different types of exceptions are we talking about and what is their relative severity. I think a simple compromise might be to present a modal alert for your most severe errors and anything else simply record the occurrence until it a) blocks the user from proceeding furhter or b) the user closes the document/window at which time you can show a list of exceptions that happened during background processing tasks at the same time that you ask if you want to save any unsaved buffers for example.  It depends very much on the type of errors that might result from the background job. If the job in doInBackground throws an exception it will be propagated to the done method as a nested ExecutionException. The best practice in this case would be to handle the nested exception rather than the ExecutionException itself. For example: If the worker thread throws an exception indicating that the database connection has been lost you'd probably want to reconnect and restart the job. If the work to be done depends on some kind of resource that turns out to already be in use it would be a good idea to offer the use a retry or cancel choice. If the exception thrown doesn't have any implications for the user just log the error and continue. From what I can remember I believe that the InterruptedException won't be an issue here since you make the get method call in the done method since the InterruptedException will only be thrown if the get call is interrupted while waiting for the background job to finish. If an unexpected event like that were to occur you'd probably want to display an error message and exit the application.  What I would recommend is to let the error propagate all the way up to where the action was started. For example if a user clicks on a button to fetch data from a data-source. If a problem occurs whether it being a credential error a network error a database error or whatever else it wouldn't be appropriate for you to have logic within that worker thread to try to solve it right there. But if you let it propagate to where the task was started from there you can take the appropriate error corrections such as popping the credentials dialog once more showing a ""try again"" dialog or even showing an error message. I have had problems with the Exception never being thrown. I have read that this is due to the way the Exception is caught in the SwingWorker internals and that it may be thrown later and it may not. I work around this by setting an Exception field in my SwingWorker implementations and checking to see if it is null when the SwingWorker is finished. How would I do this seeing as the SwingWorker could throw the exception at a later stage? The action handler invoked by the button would have already returned.  It's an old post but I want to do some clarification: SwingWorker.get throws InterruptedException ExecutionException as checked exceptions. Plus it throws a very specific unchecked exception that is CancellationException. Of course it could potentially throw any unchecked exception but CancellationException is not an ""exceptional"" and unexpected one. It is thrown when you try to call get method after that has been called cancel. ExecutedException is thrown when an Exception is thrown inside doInBackground. The original exception is wrapped inside an ExecutionException. When the get() method will be called the ExecutionException will be thrown. The idea of take out the original exception and manage that is good. (As Emil H pointed out). CancellationException is unchecked and in my opinion should be checked. The only excuse for the API implementation not to have it as checked is that it has a status method isCancelled(). You can either: - test isCancelled() and if is true do NOT call get() since it will throw CancellationException - surround get() with try-catch and add the CancellationException that since unchecked will not requested by compiler - the fact that CancellationException is not checked leave you free to forget all that stuff and get a nice surprise. - do anything because you won't cancel the worker InterruptedException. If you cancel a SwingThread with cancel(true) the first interruptable method call (for sure Thread.sleep this.wait maybe some IO methods) in doInBackground will throw InterruptException. But this exception is not wrapped in an ExecuteException. The doInBackground is left to terminate with interrupted exception. If it is catched and converted to some other exception those will be ignored because by this moment cancel has already invoked SwingThread.done on the EDT and if done has called get it has get just the standard CancellationException. Not an InterruptedException! If you cancel with cancel(false) no InterruptException is raised inside doInBackground. The same if you cancel with cancel(true) but there are no interruptable method calls inside doInBackground. In these cases the doInBackground will follow its natural loop. This loop should test the isCancelled method and exit gracefully. If the doInBackground doesn't do so it will run forever. I've not tested for the presence of timeouts but I not belive so. For me it remains just a gray area. In which cases is InterruptedException thrown by get? I'd like to see some short code since I couldn't produce a similar exception. :-) P.S. I've documented in another Question&Answer that the done and state change listener in case of cancellation are called before the doInBackground exits. Since this is true this -that is not a bug- requires a special attention when designing doInBackground method. If you are intrested in this see SwingWorker: when exactly is called done method? looks like as this gray area is just about proper and correct process naming +1 great analysis!  I guess you don't get many of these question with C#. You need to understand what the exception is and deal with it appropriately (which is usually to let it go further up the stack). InterruptedException - Thrown when a thread is interrupted (by Thread.interrupt) when waiting (roughly). Why would you want a thread to be interrupted? Usually you want the thread to stop what it's doing - reset the interrupt state and exit. For instance the PlugIn will interrupt applet threads if they continue for much longer after an applet should be gone. However in this case provided done is called correctly you shouldn't be waiting at all. Therefore it would be appropriate to wrap the exception in an IllegalStateException (and the API docs should probably state that). It's a really bad API. The publish/process mode probably makes more sense. ExecutionException - You need to deal with the wrapped exception. If you are not expecting a particular type of exception wrap it in an unchecked exception. Generally I would suggest a clear separation between what happens on the EDT and what happens off the EDT. Therefore avoid SwingWorker in production code. Why avoid SwingWorker in production code? Sun promotes it http://java.sun.com/docs/books/tutorial/uiswing/concurrency/index.html Avoid SwingWorker because it is atrocious design. Don't use something just because a company tells you to. I rely on SwingWorker - what's a good alternative? This answers my question perfectly: ""Therefore it would be appropriate to wrap the [InterruptedException] in an IllegalStateException (and the API docs should probably state that)"" Alternatives to SwingWorker: java.util.concurrent.ThreadPoolExecutor for running off EDT java.awt.EventQueue.invokeLater for running on EDT. In some cases you might want to be a bit smarter with invokeLater taking more than one item at a time (but only if that is determined to be necessary). Tom the new framework in Java 6 was implemented in order to add greater flexibility to the existing framework. For example in Java 6 you can actually populate a JTable with massive amount of data as the data is being loaded. Although it should be used when appropriate its kind of far fetch to recommend to avoid it. None of your suggested alternatives can do what the Java 6 was designed for. You could always retrieve data in the background (although in Java 1.1 there was no EventQueue.invokeLater). SwingWorker allows trivial examples to be written with few lines of code. Real code tends to get more complex very quickly. SwingWorker imposes a bad design that tightly couple EDT and non-EDT work. I think you are wrong. You do want to know if the thread was interrupted. For example the background task got canceled. Thus when done is called you won't be able to retrieve the result but instead you get an InterruptedException. It's not an illegal state. It is legal for someone to cancel the background task and you have to deal with it however it feels appropriate. I think in the catch clause for the InterruptedException you should write the handling code considering you were not able to retrieve the data the task was supposed to fetch."
870,A,How do events work in Java Swing? How does the event creation and handling work in Java Swing? Do you mean in general or just in Swing? There's a tutorial on eveng handling here: http://java.sun.com/docs/books/tutorial/uiswing/events/index.html It's about Swing. If that doesn't work maybe you could be a bit more specific?  The java event mechanism is actually an implementation of the Observer design pattern. I suggest you do alittle reading on the observer pattern this will give you a lot of insight on how the event mechanism in Java works. See observer pattern on Wikipedia  Generally events are handled by registering a callback function with the class that would raise the event. When the event occurs that class will call the callback function. You will find a lot of examples from swing. Here is a non-swing example from a chat application i made some time back This was a library that would let the developer embed chat capabilities to their apps. The ChatClient class has a member of IMessageListener type IMessageListener listener; Afer creating the object for the ChatClient class the user will call setListener on the object. (Could be addListerer for multiple listeners) public void setListener(IMessageListener listener) { this.listener = listener; } And in the library method when a message is recieved i would call the getMessage method on that listener object This was a basic example. More sophisticated libraries would use more complex methods like implementing event queues threading concurrency etc. Edit: And Yes. this is the observer pattern indeed
871,A,"How to disable a container and its children in Swing I cannot figure out a way to disable a container AND its children in Swing. Is Swing really missing this basic feature? If I do setEnabled(false) on a container its children are still enabled. My GUI structure is pretty complex and doing a traversion of all elements below the container is not an option. Neither is a GlassPane on top of the container (the container is not the entire window). As VonC's answer there's no simple solution existed. So i recommend you to program with a supporting infrastructure from the start. A simple infrastructure is likely to be for example using delegated listeners that do a ""event enabled"" check from a super container's flag before actual event-respond: class ControlledActionListener extends ActionListener { ... public void actionPerformed( ActionEvent e ) { if( !container.isEnabled() ) return; doYourBusinessHere(); } } Or even better you can use the APT to automatically inject the boilerplate code for you. This works well all the time. It's the clean way to block both user interaction and programming calls with a single effort. Even though it costs you some codes to support the underlying functionality you get simplicity usablity and stability in return. PS. i'd like to see better solution to this problem.  JXLayer might be what you're looking for according to this post: Wrap your container with the JXLayer and call JXLayer.setLocked(true) after that - all components inside will be disabled Good alternative. +1 However this is only viable when you only want to block user interactions. Actually all programming calls including ui-robot calls (such as doClick) can still pass thru and trigger corresponding events.  I would suggest you to write a recursive method which finds all the java.awt.Container instances in your java.awt.Container and sets its components enabled/disabled. This is how I solved such a problem in my extended JFrame class: @Override public void setEnabled(boolean en) { super.setEnabled(en); setComponentsEnabled(this en); } private void setComponentsEnabled(java.awt.Container c boolean en) { Component[] components = c.getComponents(); for (Component comp: components) { if (comp instanceof java.awt.Container) setComponentsEnabled((java.awt.Container) comp en); comp.setEnabled(en); } }  To add to mmyers's answer disabling children is not an easy task (see this thread) The problem is near-to unsolvable in the general case. That's why it is not part of core Swing. Technically the disable-and-store-old-state followed by a enable-and-restore-to-old-state might look attractive. It even might be a nice-to-have in special cases. But there are (at least probably a bunch more) two issues with that. Compound components The recursion must stop on a ""compound component"" (or ""single entity""). Then the component is responsible for keeping dependent's state. There's no general way to detect such a component - examples are JComboBox JXDatePicker (which as related issue) To make things even more complicated dependents don't need to be under the hierarchy of the ""compound component"" f.i. JXTable takes care of the ColumnControl's (and header's) enabled state. Trying to tackle both would require to have a) a property on the compound: ""don't touch my children"" and b) a property on the uncontained dependents: ""don't touch me"" Binding to enabled enable-and-update-to-old might break application state if the enabled status is bound to a (presentation or other) model property and that property changed in-the-meantime - now the old-state is invalid. Trying to tackle that would require to have c) a ""real"" stored-old-enabled-due-to-view-concerns property d) bind the presentation model property to both the enabled and the stored-old-enabled JXRadioGroup has a variant of that problem: On disabling - the group itself or the general controller - keeps track of the old-enabled of every button. Button's enabled is controlled by the Action - if there is an Action. So the enabled controller needs to restore to old-enabled or to action's enabled. During group's disabled (as-group) a problem looms if the Action's enabled was false on storing and changed to true. Another if actions are added. Now imagine the complexity of state transitions when overloading a)-- d)  This is the code I use. It recursively visits the component tree maintaining a counter for each component. Only weak references are kept on the components preventing any memory leak. You say that traversing all the elements is not an option but my experience is that this code works well for quite complex GUIs. By the way if Swing had this feature natively there would be no other way than traversing the component tree anyway. Example usage (parenthesis means disabled) :  a / \ b c / \ d e setMoreDisabled(c) a / \ b (c) / \ (d) (e) setMoreDisabled(a) (a) / \ b (c) / \ (d) (e) setMoreEnabled(a) a / \ b (c) / \ (d) (e) Now the code : import java.awt.Component; import java.awt.Container; import java.util.Map; import java.util.WeakHashMap; public class EnableDisable { private static final Map<Component Integer> componentAvailability = new WeakHashMap<Component Integer>(); public static void setMoreEnabled(Component component) { setEnabledRecursive(component +1); } public static void setMoreDisabled(Component component) { setEnabledRecursive(component -1); } // val = 1 for enabling val = -1 for disabling private static void setEnabledRecursive(Component component int val) { if (component != null) { final Integer oldValObj = componentAvailability.get(component); final int oldVal = (oldValObj == null) ? 0 : oldValObj; final int newVal = oldVal + val; componentAvailability.put(component newVal); if (newVal >= 0) { component.setEnabled(true); } else if (newVal < 0) { component.setEnabled(false); } if (component instanceof Container) { Container componentAsContainer = (Container) component; for (Component c : componentAsContainer.getComponents()) { setEnabledRecursive(cval); } } } } } That's right the ""enable"" state of the components must be fully controlled by these two methods. If I am not mistaken using this class would require that anytime one wants to enable/disable a component they use this class vs calling the component's setEnabled() method. If not then this class could unintentionally enable/disable a component it should not because it does not know the ""native"" state of child components when one of the setMore*() methods are invoked.  This is what I came up with. Component[] comps = myPanel.getComponents(); for (Component comp:comps){ comp.setEnabled(false); }"
872,A,How do you effectively add components to a swing panel with a background image? I have a JPanel onto which I'm trying to add some buttons. I have a bitmap background image onto which I'm supposed to draw the buttons. I have images for all the buttons. I need the background to scale with the buttons and the spacing to be correct. Is there a clean way to do this or is this going to be painful? Thanks First the JPanel with a background image is easy. Derive your own panel from JPanel add an Image field. This I understand but when try make this 2 step its show problems Second Override the paintComponent() method to do a drawImage() using the image stored in the field. Can you show me some example  First the JPanel with a background image is easy. Derive your own panel from JPanel add an Image field. Override the paintComponent() method to do a drawImage() using the image stored in the field. Second the buttons. Derive you own button add image in constructor and use setIcon() to put it on the button. use setPressedIcon() ... and so on to add additional images for the various button states. Lastly the scaling it is not clear to me what you want. The drawImage() can scale the image so that is no problem. You can position the buttons when the JPanel is resized by adding a listener. Then you can reposition the buttons the x y values should be calculated as a % of the width and height of the panel. You could even rescale the buttons so that the width /height ratio is the same of the panels ratio. So yes there is a clean way to do it. Because of the scaling. I assume that the buttons are somewhat related to the background image and should adjust relative to the size of the background. This is relatively easy to accomplish using a listener to the background panel's size and recalculating the position of the buttons. I cannot immediately think of a layout manager doing this. But I admit that my assumption can be wrong and in that case a layout manager might be a better solution. Why would you use a listener for repositioning the button? Just using the appropriate LayoutManager will take care of this for you and avoid any nasty redraw issues
873,A,"Why does InvokeLater cause my JFrame not to display correctly? Ok I've read an searched all over the web and I've not found the solution to my problem yet perhaps I'm missing something simple hence here I am... I've got a rather large project that handles work orders for a repair business. It's all database connected many many pages of code and classes. But i just added a short bit of code to the front end that essentially checks for new messages in our notes area. Anyway I display a simple JFrame with two *JLabel*s while a separate thread queries the database. This all happens at the start of the program. The problem is my little ""please wait"" JFrame comes up with its frame but no guts no background and no *JLabel*s during the wait (which is the rest of the program loading not the database thread) afterwords it displays but by then its missing its point. I wrote the following example program. It displays a simple JFrame (CheckingMessagesGUI: a JFrame with two *JLabel*s nothing more) sleeps for 5 sec then displays the Example (main program) JFrame then instantly closes (System.exit(0)) in this example of course my real program goes on to do a lot more. What I found is that invokeLater seems to be causing the problem. Once the sleep timer runs out the window will display but the code to display it was given before the Thread.sleep command and should have been done in that order correct? My question is why does invokeLater cause my JFrame not to display correctly? Its my understanding that the purpose of invokeLater is so that the items run on the correct AWT event thread which would make me think that this window would get painted correctly. Anyway I'm sure I'm missing something obvious. I commented out the invokeLater part in the code below and it runs correctly if you put it back it doesn't... Many thanks in advance. package javaapplication6; public class Example extends javax.swing.JFrame { public Example() { System.out.println(""Example started""); setBounds(100100200200); System.out.println(""cmGUI instantiated""); CheckingMessagesGUI cmGUI = new CheckingMessagesGUI(); System.out.println(""Set cmGUI visible""); cmGUI.setVisible(true); cmGUI.validate(); try { System.out.println(""timer started""); Thread.sleep(5000); System.out.println(""timer done""); } catch(InterruptedException e){ } System.exit(0); } public static void main(String[] args) { /*java.awt.EventQueue.invokeLater(new Runnable() { @Override public void run() { */ System.out.println(""Started""); System.out.println(""example Instantiated""); Example example = new Example(); System.out.println(""example visible""); example.setVisible(true); /* } }); */ } } UPDATE: To clarify I realize Thread.sleep() will block everything but shouldn't my CheckingMessagesGUI already have been fully drawn before I call sleep? That is the issue. This forum is used by programmers in a wide variety of languages. A question's tags must help identify the domain immediately for readers to be able to filter questions they may help with. Would java and awt be good tags for your question? invokeLater runs the Runnable in the Event Dispatch Thread which also is used for updating the GUI. Your sleep is blocking this Thread so the GUI also does not get serviced no updates can be done till you return from the invokeLater code. That's why you should not do any long (time consuming) computations in this Thread. They should be done in an different (new) Thread. The Event Dispatch Queue states Tasks on the event dispatch thread must finish quickly; if they don't unhandled events back up and the user interface becomes unresponsive. Your code could be changed to (not tested): public Example(){ System.out.println(""Example started""); setBounds(100100200200); System.out.println(""cmGUI instantiated""); CheckingMessagesGUI cmGUI = new CheckingMessagesGUI(); System.out.println(""Set cmGUI visible""); cmGUI.setVisible(true); cmGUI.validate(); Thread thread = new Thread(new Runnable() { try { System.out.println(""timer started""); Thread.sleep(5000); System.out.println(""timer done""); } catch(InterruptedException e) { } System.exit(0); }); thread.start(); } EDIT: let's go a bit ""deeper"" (and it's my view of the working of Swing/AWT). I suppose the ""please wait"" (see comments) should be displayed in the CheckingMessagesGUI class but isn't. That's related to the way the GUI works. It does not directly change anything on the display if you call the corresponding (Swing) methods (draw setText setLocation ...); it just queues an Event in the Event Queue. The Event Dispatch Thread is (should be) the only Thread that reads this queue and process the events. As long as it is being blocked - by the sleep in this case - no changes to the GUI will be displayed. The GUI is frozen. EDIT2: invokeLater the Runnable is appended to the end of the queue to be latter executed by the EDT after all pending events have been processed the next command after the invokeLater call will be executed. invokeAndWait same as above but the actual Thread blocks until the Runnable was executed (after pending events) by the EDT that is the command following the invokeAndWait will only get started after the submitted Runnable was executed. @Marc: No it won't paint because the painting is a separate event which was posted to the event queue but never processes. Painting does not happen inline with GUI construction (since it needs to arise from a system request to paint to a specific graphics context). I think this might be the key ""no updates can be done till you return from the invokeLater code."". I realize that Thread.sleep() blocks everything in my example but my point was that my ""please wait"" (CheckingMessagesGUI) should have already been drawn fully before i called sleep. Shouldn't this be true? @Software Monkey: But it works if you don't use InvokeLater? why? I might have just thought up the answer to my own question. Without the InvokeLater call the EDT is not tied up and can paint because my code is running in the init Thread? is that right? I'm thinking out loud... but if that's true then no paint operations happen when the code inside the InvokeLater is running? That probably should be mentioned somewhere. So InvokeLater blocks paint from happening is that not what InvokeAndWait is suppose to do? Why did you accept the answer if you don't understand the solution? I sure you ignored my answer since I didn't provide code and now you are confused. Try reading the link I provided which explains everything. That why I post the link to the tutorial because it explains better than the code what happens. First I didn't ignore your answer and i didn't really read Carlos's code (so the code didn't matter) my first comment stated the key. Second I'm new to this site and didn't really understand how the answer thing works (but his is still the best answer so far) Also I had already read that tutorial before i asked my original question (several times and again just now) it doesn't go that deep or answer my question. I also knew that sleep was blocking (that wasn't the problem just the example) and you were talking about repainting I was saying that it never painted the first time. It didn't occur to me that accepting his answer might block others from answering until just now so for the time being if un-accepted his answer if that's the case. Perhaps that should be made more clear on this site. Ahh a few manipulations of my example program later and I've tested and worked out my answer (OF COURSE THANKS TO EVERYONE OUT HERE). everything in the InvokeLater method get submitted to the EDT as a chunk which holds up the paint which falls later in the queue. It does then return to the first line after the InvokeLater call and runs anything there so it doesn't block entirely (as InvokeAndWait would do) as a previous comment/question of mine suggested. So why did the ""please wait"" frame outline get painted but not the contents? Should the contents not be painted at the same time as the frame since a single method setVisible(...) is used to show the frame. I'm not sure what your comment on invokeAndWait() is about. You would still have the same problem because you are causing the EDT to sleep. setVisible() does not show the component; it just marks it as visible and quques an event for it to be (re)painted. The event will stay in the queue until the EDT gets to it and then the component will be painted. As long as the EDT is being blocked the event will stay in the queue and the component will not be painted.  my understanding that the purpose of InvokeLater is so that the items run on the correct AWT event thread That is correct. However that also means that Thread.sleep() is executing on the EDT which means the GUI can't repaint itself since you just told the EDT to sleep. You need to use a separate Thread for your long running task. Read the section from the Swing tutorial on Concurrency for more information about the EDT. but my point was that my ""please wait"" (CheckingMessagesGUI) should have already been drawn fully before i called sleep. Shouldn't this be true? Here is my simplified understanding of the process. The frame is created and displayed because it is an OS native component. However the contentPane and child component are lightweight components which means the Swing Repaint Manager schedules when they should be repainted. So before the repainting is scheduled the EDT is put to sleep and the repainting can't be done until the sleeping is finished. You can find more infomation about the Repaint Manager in the article on Paintng in AWT and Swing.  Invisible components are not painted.  My answer was that when the GUI is constructed its not automatically painted at that time instead a call to paint is placed in the EDT queue. If in the same method you construct a GUI object and setVisible(true) then in the next few lines do something intensive it blocks the future call to paint from occurring because it will not get placed into the EDT queue until that method (with the intensive stuff) finishes. Also as was mentioned the frame or border is on the platform side of the equation (hence gets drawn) and the rest (Jlabel container background etc) is on the java side and doesn't happen until paint is actually run (i.e. the EDT queue gets to it). My example code worked without the InvokeLater call because that ran the intensive stuff in the init thread and allowed the EDT thread to still paint. Well that is more or less the way I expained it for you.  Here is a general solution for newbies like myself who have problems finding what they need in the Swing tutorial. public void method(){ final PleaseWaitWindow window = new PleaseWaitWindow(); Thread thread = new Thread(new Runnable() { @Override public void run() { //stuff that you want to do that is preventing window to display window.dispose(); } } thread.start(); }"
874,A,"How to add scrollable JTextArea to jDesktopPane I was try several opinion but neither of them it seams to work. This method returns JTextArea  private static JTextArea getJArea() { if (jArea == null) { jArea = new JTextArea(); jArea.setBounds(new Rectangle(16 153 468 139)); jArea.setVisible(true); jArea.setLineWrap(true); jArea.setWrapStyleWord(true); jArea.setEditable(false); jsp.getViewport().add(jArea); } return jArea; } and i JDesktopPane i add this area with this code snippet jDesktopPane.add(getJArea() null); And this not work I was try to create a JScrollPane and assign JTextArea to him and add that to the JDesktopPane but that also doesn't work. You need to use JInternalFrame too. JDesktopPane is supposed to be parent container for JInternalFrame objects. JInternalFrame iframe = new JInternalFrame(""Title"" true true true true); iframe.setSize(180 150); iframe.setVisible(true); iframe.getContentPane().add(new JScrollPane(new JTextArea(""TestText""2020))); JDesktopPane desktop = new JDesktopPane(); desktop.add(iframe); Then add the JDesktopPane to e.g. JFrame and you are done. Yes basically that's it. Thank you. Just have to add ((javax.swing.plaf.basic.BasicInternalFrameUI) iframe.getUI()).setNorthPane(null); to remove the nort title bar and thats it."
875,A,"JTextPane keeps throwing BadLocation I have a JFrame that contains a JTextPane. The purpose of this JTextPane is to highlight words as I type them something along the lines of a programmer's text editor. To accomplish this I extended JTextPane I implemented the KeyListener interface and I had it setup as a key listener to self. The method that does some important work is keyReleased. The problem is I can highlight the first word I type but after that I keep getting BadLocation even though the start and the end are within document limits. I am posting some of my code snippets :  // this is my highlight method private void highlight(int startint end) throws BadLocationException { Document doc = getDocument(); Color c = Color.red; String text = doc.getText(startend); StyleContext sc = StyleContext.getDefaultStyleContext(); AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY StyleConstants.Foreground c); setCharacterAttributes(aset true); setSelectionStart(start); setSelectionEnd(end); replaceSelection(text); } //this is my keyReleased method public void keyReleased(KeyEvent arg0) { char character = arg0.getKeyChar(); if(wordStarted) { // have I started typing a new word ? if(character == ' ') { // end word try { int dot = getCaret().getDot(); highlight(wordStart dot - 1); setCaretPosition(dot); wordStarted = false; } catch (BadLocationException ex) { ex.printStackTrace(); } } } else { if(Character.isLetter(character)) { wordStarted = true; wordStart = getCaret().getDot() -1; } } } I tried to type in : public static but only public is colored red. I even added some println statements for debugging and this is the output:  this is outputted after writing public Start param:0 End param:6 Document Length:7 Document START:0 Document END:8 text:public this is outputted after writing static Start param:7 End param:13 Document Length:14 Document START:0 Document END:15 text:public static javax.swing.text.BadLocationException: Invalid location at javax.swing.text.GapContent.getChars(GapContent.java:189) at javax.swing.text.GapContent.getString(GapContent.java:167) at javax.swing.text.AbstractDocument.getText(AbstractDocument.java:774) at ifirst.visual.CodePanel.highlight(CodePanel.java:49) at ifirst.visual.CodePanel.keyReleased(CodePanel.java:82) at java.awt.Component.processKeyEvent(Component.java:6069) at javax.swing.JComponent.processKeyEvent(JComponent.java:2810) at java.awt.Component.processEvent(Component.java:5885) at java.awt.Container.processEvent(Container.java:2105) at java.awt.Component.dispatchEventImpl(Component.java:4469) at java.awt.Container.dispatchEventImpl(Container.java:2163) at java.awt.Component.dispatchEvent(Component.java:4295) at java.awt.KeyboardFocusManager.redispatchEvent(KeyboardFocusManager.java:1881) at java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(DefaultKeyboardFocusManager.java:742) at java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(DefaultKeyboardFocusManager.java:1007) at java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(DefaultKeyboardFocusManager.java:879) at java.awt.DefaultKeyboardFocusManager.dispatchEvent(DefaultKeyboardFocusManager.java:706) at java.awt.Component.dispatchEventImpl(Component.java:4339) at java.awt.Container.dispatchEventImpl(Container.java:2163) at java.awt.Window.dispatchEventImpl(Window.java:2478) at java.awt.Component.dispatchEvent(Component.java:4295) at java.awt.EventQueue.dispatchEvent(EventQueue.java:604) at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:275) at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:200) at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:190) at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:185) at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:177) at java.awt.EventDispatchThread.run(EventDispatchThread.java:138) I am writing this code to get a hang of JTextPane. I am not interested in something like JTextPane. Is there something missing from your code? I can't see anywhere that BadLocationException is being thrown from. I think we need to see where your ""text"" variable is coming from in the replaceSelection call as it looks like it's coming from doc.getText(...) but theres no call to that I forgot the line: String text = doc.getText(startend); I think I figured it out. The end param sent to the method the second time it's called is 13 and I think it specifies 13 characters from the character at position 7and since it doesn't exist the exception gets thrown. As you discovered theDocument.getText() takes a start and length not a start and end argument. I thought I'd provide an answer and a link to the JavaDoc for others reading your question who might not look in the comments. This was pretty annoying. 2 hours of debugging can save 10 minutes of readingright? :) Definitely true. And the libraries are sometimes inconsistent causing the need to check the javadocs as half of the libraries use startend+1 and the other half uses startlength. Feh!"
876,A,"Obtaining a JFrame from a JApplet Given a JApplet how do I obtain the JFrame object corresponding to this applet? JApplet applet = this; JRootPane rootPane = getRootPane(); Container contentPane = getContentPane(); JFrame jframe = ...; // How do I obtain the JFrame? trying to run an applet inside a JFrame? Omry: No I have code that assumes access to a JFrame. I want this JFrame to be the ""JApplet window"". Creating a new JFrame won't work since that will create a new window. You can create a new JFrame from an Applet. But there is no container like a JFrame surrounding an Applet. The Applet is ths container. IIRC the plug-in does have an embedded `JFrame` but this is just an implementation detail. `Applet` is considered the *top-level* container."
877,A,"Should I use a Listener or Observer? I have a dropdown box in my GUI which shows the contents of an ArrayList in another class. New objects can be added to the ArrayList elsewhere in the GUI so I need to know when it is updated so I can refresh the dropdown menu. From what I can gather my two options are to extend the ArrayList class to allow me to add my own changeListener to it or to make the class which contains the ArrayList in question extend observable. Which would be a more appropriate solution? Are you referring to a JComboBox? If so I'd look into ComboBoxModel and its implementations. If you can add a new jar to the application check out glazed Lists  The Observable implementation in Java is rarely used and doesn't inter-operate well with Swing. Use an EventListener instead. In particular is there a reason not to extend AbstractListModel or even use DefaultListModel directly when managing the contents of the list ""elsewhere in the GUI""? Then your combo box could use a ComboBoxModel that delegates to the same ListModel instance adding its own implementation to track the selection state. I have in mind something like this (but I haven't test it): final class MyComboBoxModel extends AbstractListModel implements ComboBoxModel { private final ListModel data; private volatile Object selection; MyComboBoxModel(ListModel data) { /* * Construct this object with a reference to your list * which contents are managed somewhere else in the UI. */ this.data = data; data.addListDataListener(new ListDataListener() { public void contentsChanged(ListDataEvent evt) { fireContentsChanged(this evt.getIndex0() evt.getIndex1()); } public void intervalAdded(ListDataEvent evt) { fireContentsChanged(this evt.getIndex0() evt.getIndex1()); } public void intervalRemoved(ListDataEvent evt) { fireContentsChanged(this evt.getIndex0() evt.getIndex1()); } }); } public void setSelectedItem(Object selection) { this.selection = selection; fireContentsChanged(this 0 data.getSize() - 1); } public Object getSelectedItem() { return selection; } public int getSize() { return data.getSize(); } public Object getElementAt(int idx) { return data.getElementAt(idx); } }  Always prefer composition over extension (my reference is effective java and my personal experience). extending ArrayList is simply a promise that you will not violate any of the classes invariants. It also binds you to the specific list implementation you are extending.  Why not use bindings? http://wiki.eclipse.org/index.php/JFace_Data_Binding Bind your GUI widget to your List. Changes will propogate between the two objects transparently. Be sure to wrap your model with an appropriate observable such as WritableList (if using the ArrayList directly).  The two solutions are essentially implementations of the same root design pattern (the ""Observer"" pattern as defined by the Gang of Four.) In the former case you are making the ArrayList itself ""observable"" in the latter you are making the domain object which uses the array list ""observable."" My tendency would be to do the latter: make the domain object observable. This is primarily because you may eventually have other things that could change about the domain object (for which the GUI should be updated.) If it is already observable you're already set. Note that you don't strictly have to extend java.util.Observable - you can implement the design pattern without doing that. This seems like the easiest way Thanks for all the other answers though.  You could switch to using a GUI design pattern. Or construct a limited implementation. Create a GUI Form Interface that has a method DrawXArrayList (with X being some meaningfull name. It has a parameters of type ArrayList Create a new class called GUIView. It has at least two methods: UpdateXArrayList and RegisterForm When you initialize your application have the GUI Form register itself with the class implementing GUIView. Make the class implementing GUIView visible to the form. When anything in your GUI Form updates the arraylist have it call UpdateXArrayList as the last thing it does. The UpdateXArrayList method in the class implementing GUIView will then in turn call DrawXArrayList passing the updated arraylist. DrawXArrayList in the form class implementing the GUIFormInterface will then take the steps need to update the control displaying the ArrayList. While this seems like a lot of steps compared to a observer and listener setup. You have more control over how the various user actions effect the UI then the observer-listener pattern. In addition you documented in code the interaction between the user action and the updates to the UI."
878,A,"How can I validate parameters without creating a separate dialog? I'm going to make an application (in Swing) that uses a tree to visualize a data structure (JTree). A tree will be on the left side of a window. The user will be able to browse a tree. The parameters of every tree node will be displayed on the right side of the window. The example windows will be looking like this =========================== | tree panel | data panel | | | | | | | | | | --------------------------- The problem arises when a user wants to change that data. when should I validate them ? The easy approach is to open a new modal dialog (JDialog) and let the user to change this data in it. Validation of data would take place in an ""ok"" button listener method but this is a little clunky. I would like to allow the user to edit those data right in the data panel. In that case when should I validate them? Is there a pattern of such solution in Swing? Or any online tutorial how to do it? Thanks in advance. what about ""save"" button in data panel? ;) Dialogs are bad. Immediately discard any complete nonsense input immediately. For instance typing a letter in the numerical field (use Document filters). Don't beep. Don't require any particular commit step. You may have retain partially entered data.  I'm not totally sure what you're after but.. You could maybe add this ""ok"" button (or ""commit changes"" or whatever) to data panel and when the button would be pressed you would validate the data and save the changes if the changes are valid? (So you'd have editable components at the data panel) Edit: if this wasn't good could you clarify me a bit: Is the data panel showing data for one item of the tree at time? What kind of data is there to change (and to validate) Anyway if you want to validate straight the changes made to an edit component (for example JTextField) you can use for example Formatted text fields see How to Use Formatted Text Fields For more general validating see InputVerifier More ideas see Validating Numerical Input in a JTextField (concentrates of numerical input but usable for other purposes also)"
879,A,"JDialog cancel button How can I set a cancel button in a Swing JDialog i.e. a button whose action is performed automatically if the user presses the “Cancel” key on the keyboard? The counterpart is offered for a default action via the setDefaultButton method of the dialog's root pane. If that's helping I'm searching for an analogue to the WinForms Form.CancelButton property. Guess you mean escape key.. Single line solution t.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW) .put(KeyStroke.getKeyStroke(""ESCAPE"") btnCancel.getAction()); where t is any component(except JButton) like JTextField in the dialog. The second argument to the `put()` method is a key into the action map not an `Action`. This would only work if `btnCancel.getAction() != null` and if the `Action` returned by `btnCancel.getAction()` was registered in the action map for `t` with itself as the key ie. if `t.getActionMap().put(btnCancel.getAction() btnCancel.getAction())` had previously been called.  I don't think this is possible with JDialog without extending it. You could use JOptionPane.showOptionDialog() (or possibly one of the other show methods) passing the JButtons you want to be used. If the options passed are components they'll be rendered as normal so you can do something like this: int optionType = JOptionPane.DEFAULT_OPTION; int messageType = JOptionPane.PLAIN_MESSAGE; // no standard icon JButton ok = new JButton(""ok""); JButton cancel = new JButton(""cancel""); //add any handlers to the buttons ... //construct options Object[] selValues = { ok cancel }; //show dialog as normal selected index will be returned. int res = JOptionPane.showOptionDialog(null ""message"" ""title"" optionType messageType null selValues selValues[0]); Hi Rich thanks for the example. Unfortunately I need a completely customized dialog with lots of different controls not merely an individualized option dialog. As far as I can see there's no method/overload that can be passed a completely customized panel. I think you're right if you have a custom dialog you will need to implement the handling yourself you can however rip off the processing to do so from JOptionPane. FWIW in SWT you can define an arbitrary subclass of Dialog and call its open() method to display it  The best way I can see is to add an Action to the action map of the root pane and link that action to the escape key using the root pane's input map. For this you need an Action. If your cancel button's behaviour is implemented as an action (ie. cancelButton.getAction() != null) then this will work:  getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE 0) ""CANCEL""); getRootPane().getActionMap().put(""CANCEL"" cancelButton.getAction()); Otherwise if the cancel button's logic is implemented via an ActionListener you could have the actionPerformed() method of the ActionListener call a private void onCancel() method that implements the logic and register a ""cancel"" action that calls the same method.  getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE 0) ""CANCEL""); getRootPane().getActionMap().put(""CANCEL"" new AbstractAction(){ @Override public void actionPerformed(ActionEvent e) { onCancel(); } });  All you have to do is attach the action listener to the button and call dialog.setVisible(false) inside of it. Just try... it actually works You don't answer the question. It was about to dismiss a dialog with a keystroke in general with the Escape key. At least that's how I read the question which is a bit ambiguous on re-reading it. Oops thanks for pointing that out. The question should read “‘cancel’ key” not “button”. I’ll fix that."
880,A,Applet with JRE 1.5 (IE6) fails to open HTML page over HTTPS works with JRE1.6 I have a small (500kb) swing applet that displays small HTML page with JEditorPane. This works nicely with most browsers and JREs but with JRE 1.5 (IE6) it seem to display just blank. There are no error messages on java console or exceptions. Applet is able to load TXT files with all JREs just fine with JAVA CONSOLE tracing 5 option it displays the same diagnostic message for both text files and html files: network: Connecting https://xxx.net/xxx/data/my.txt with proxy=DIRECT network: Connecting https://xxx.net/xxx/data/my2.htm with proxy=DIRECT Any ideas how to diagnose further whats going wrong or how to fix it? I don't have console access to my client's server hosting the applet but I have a test machine with IE6+JRE 1.5 that I can use to access their HTTPS url and reproduce the problem. The problem does not appear with other browsers / JRE 1.6. Applet is unsigned since the HTML page and applet are located in same folder in same server. Can't you just insert logging statements into the applet source code & redeploy? You should be able to see the log output in the java console. That should help to narrow down the problem.  Have you tried running something like Wireshark to see if the request is actually happening or if you're actually getting a response? If it's something weird with the network (maybe the 1.5 JRE is doing something weird with the request) then that might help you track it down. thanks for comment I will try..  Solution found JEditorPane Async mode was causing this issue switching to Syncronized mode solved bug with JRE 1.5
881,A,"How to resolve swing listener memory leaks? Background So I read that often memory leaks within Swing applications originate from the use of various listeners (mouse key focus etc). Essentially because you register an object as a listener and forget to deregister the object the notifier ends up holding onto the reference of the object and leaks a bit of memory. I knew our application wasn't deregistering listeners and did a bit of research on potential solutions: I found one approach in dealing with the problem was the use of a WeakReference full details on the approach with swing listeners can be found here. I then became curious about how the NetBeans form editor was generating code to clean up after listeners added to the form and discovered that NetBeans was registering listeners via a wrapping object i.e. argTypeComboBox.addItemListener(new java.awt.event.ItemListener() { public void itemStateChanged(java.awt.event.ItemEvent evt) { argTypeComboBoxItemStateChanged(evt); } }); But the generated code did not seem to ever clean up by calling removeItemListener. Questions Is the wrapping object acting like a weak reference? To me it looks like it could leak a tiny amount of memory (the size of the wrapping object)? Do you have alternative approaches when dealing with listeners to ensure that they are always garbage collected when you are finished with them? First a correction the potential leak here is not tiny. An anonymous inner class holds a reference to the outer class so as long as the listener is reachable it will hold on to the whole class. However this is typically not a problem as you are adding listeners to objects on a frame. When that frame is disposed (important that it be disposed though) and has no more references (which is pretty typical) all of its components become unreachable (if you didn't do anything fancy) and the whole thing gets garbage collected. I once dealt with an application however that did do fancy things such as registering open windows with a different window so if the window was closed it was still registered - big time memory leak - these windows were not tiny. So the bottom line is that NetBeans isn't doing anything to cause memory ""leaks"" here as the component is referenced by the frame and not outside of it and the component references the anonymous class which in turn references the frame - dispose the frame and the whole graph is unreachable but you do have to be careful with listeners as they can do this to you. My current software does what you once dealt =\ Great clarification Yishai what was the approach you took to dealing with listeners in the fancy application that had a big time memory leak? @Clinton once I diagnosed the problem (that took a while lots of profiling) I was just sure to deregister the listener on window dispose. I don't remember all the details but that was the key - I didn't know then about weak references as a standard solution to the problem I might have been able to use that. @Yishai I had been doing deregister as the listener was leaving scope... But it seemed a bit clunky and went looking for a better solution. Thanks again for the correction."
882,A,"Java GUI Design Advice I'm programming my very first GUI app in Java using the Swing framework. I've coded a basic login system using the JTextField JPasswordField and JButton classes. Now I'm writing the actionPerformed method for the button which I want to remove these items as they are no longer necessary but I am unsure as to the best way of achieving this. I've considered using the setVisible method of these components which seems to work but I'm sure that's not the preferred way of doing it. Sorry if this is a bit of a dumb question.. What do you mean by removing them? Are you dinamically changing your only screen? Yeah that's what I'm trying to go for anyways...it's just a little confusing because there's no reference to the actual JFrame containing the components. Do you use some GUI editor for your app or you are just manually composing it? Can you show us some code samples? There is always the **this** within a JFrame Generally you would want to be able to do this in one line of code. So you should consider wrapping the different things you'd like to show or hide in a JPanel. Then you can dynamically show or hide the JPanels. If you change the contents of the JFrame it is implicitely repaint()-ed. Updated to reflect this.  I agree with JPanel suggestion. Add the log-in components to a JPanel then hide the JPanel once there is a log-in. hide the log-in Panel once the user clicks a successful log-in This is the same logic as the JDialog stated above... have a seperate JPanel for a login then hide it once the user has a successful login I find this easier for the user because there arent any seperate windows open over the screen. Hope this revision helps!  Have your login dialog separated from your main window. When you finished with the login just hide the login dialog. You can also save your text fields and buttons into a class field and later call remove(Component) for each one. Is it recommended to setVisible or to remove? I favor separation. My login is usually a popup like modal dialog. I rarely need to change the contents of a jpanel - causes trouble with the layout management. If you use a dialog -- see JDialog -- then you'd normally dispose() it when done  You could have a login JPanel which is set up and displayed and once the user's password is verified you can show your application JPanel. This can easily be done using a CardLayout. It treats each component in the container as a card. Only one card is visible at a time and the container acts as a stack of cards. Here is a tutorial. Using a CardLayout your code could look something like this: instance variables: static final String LOGINPANEL = ""LOGINPANEL""; static final String MAINPANEL = ""MAINPANEL""; JPanel cards; where your panels are created: JPanel loginPanel = new JPanel(); //add your stuff to the login panel JPanel mainPanel = new JPanel(); //add your stuff to the main panel cards = new JPanel(new CardLayout()); cards.add(loginPanel LOGINPANEL); cards.add(mainPanel MAINPANEL); then when your password is verified in the AWT thread you can do this: CardLayout cl = (CardLayout)(cards.getLayout()); cl.show(cards MAINPANEL);  I will suggest you to use a JDialog for your login. After a successful login you just need to call “dialog.dispose()” and then load your interface. If the application you are building need to display several windows you should consider to use a JDesktopPane (http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JDesktopPane.html)"
883,A,"How do I catch this exception in Swing? I have a Swing application and even though I have everything in a try/block the exception isn't caught. public static void main(String[] args) { try { App app = new App(); app.setVisible(true); } catch (Throwable e) { System.err.println(""never printed""); } } all I get is this stack trace: Exception in thread ""AWT-EventQueue-0"" java.lang.ArrayIndexOutOfBoundsException: 9 >= 9 at java.util.Vector.elementAt(Vector.java:427) at javax.swing.table.DefaultTableModel.getValueAt(DefaultTableModel.java:633) at javax.swing.JTable.getValueAt(JTable.java:2695) at javax.swing.JTable.prepareRenderer(JTable.java:5712) at javax.swing.plaf.basic.BasicTableUI.paintCell(BasicTableUI.java:2075) at javax.swing.plaf.basic.BasicTableUI.paintCells(BasicTableUI.java:1977) at javax.swing.plaf.basic.BasicTableUI.paint(BasicTableUI.java:1773) at javax.swing.plaf.ComponentUI.update(ComponentUI.java:143) at javax.swing.JComponent.paintComponent(JComponent.java:763) at javax.swing.JComponent.paint(JComponent.java:1027) at javax.swing.JComponent.paintChildren(JComponent.java:864) at javax.swing.JComponent.paint(JComponent.java:1036) at javax.swing.JViewport.paint(JViewport.java:747) at javax.swing.JComponent.paintChildren(JComponent.java:864) at javax.swing.JComponent.paint(JComponent.java:1036) at javax.swing.JComponent.paintChildren(JComponent.java:864) at javax.swing.JComponent.paint(JComponent.java:1036) at javax.swing.JComponent.paintChildren(JComponent.java:864) at javax.swing.JComponent.paint(JComponent.java:1036) at javax.swing.JLayeredPane.paint(JLayeredPane.java:564) at javax.swing.JComponent.paintChildren(JComponent.java:864) at javax.swing.JComponent.paintToOffscreen(JComponent.java:5129) at javax.swing.BufferStrategyPaintManager.paint (BufferStrategyPaintManager.java:277) at javax.swing.RepaintManager.paint(RepaintManager.java:1217) at javax.swing.JComponent.paint(JComponent.java:1013) at java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:21) at sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:60) at sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:97) at java.awt.Container.paint(Container.java:1780) at javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:814) at javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:714) at javax.swing.RepaintManager.seqPaintDirtyRegions(RepaintManager.java:694) at javax.swing.SystemEventQueueUtilities$ComponentWorkRequest.run (SystemEventQueueUtilities.java:128) at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209) at java.awt.EventQueue.dispatchEvent(EventQueue.java:597) at java.awt.EventDispatchThread.pumpOneEventForFilters (EventDispatchThread.java:269) at java.awt.EventDispatchThread.pumpEventsForFilter (EventDispatchThread.java:184) at java.awt.EventDispatchThread.pumpEventsForHierarchy (EventDispatchThread.java:174) at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169) at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161) at java.awt.EventDispatchThread.run(EventDispatchThread.java:122) I'm going to guess that you have a grid somewhere right It is a JTable :) The only suitable ways that I am aware of in order to catch exceptions thrown from inside the EDT are: write your own EventQueue (I woudln't advise it in general) use Swing internal property ""sun.awt.exception.handler"" (I use it and it works on all Sun JDK 1.4 1.5 and 1.6 at least plus on IBM JDK 1.4 and 1.5 at least; I didn;t check it on other JDK though) You should take a look at this thread to have a more complete overview of the solutions with their pros and cons. link is dead...  Swing runs things in the event dispatching thread. You are trying to catch it in the main thread. And note that swing is not thread safe you too should be doing things in event dispatching thread. To catch the exception you can override some method from that stack trace like the paint method from your component. And for me that exception does look like a bug you should fix not something you should hide by catching. And how to catch is it possible? may helps I'm not a Java expert: http://ruben42.wordpress.com/2009/03/30/catching-all-runtime-exceptions-in-swing/  As mentioned above the problem is where the exception is being thrown - on the event dispatch thread. If you want to set up a try/catch block to catch this particular problem I would throw one into the App class's paint method. Override it and put a call to super.paint in a try catch block there. If you want a generic way to catch uncaught exceptions take a look at Thread.setUncaughtExceptionHandler. You call that method with an exception handler and you can deal with all the exceptions which don't get caught in your application.  Runtime exceptions like ArrayIndexOutOfBoundsException shows a programmer mistake. So it might be better to fix them rather catching and silently chewing it. Just a wild guess for the cause of exception. Something concurrently remove rows from the table model's datavector once the JTable starts to draw the data on screen. You are right but I'm using library which chew the exception for me. Therefore when the table is drawed I get the exception. But anyway I wanted to know what could I do. I might fix the library not sure know.  As mentioned by another poster your problem is that the exception is being thrown in another thread the event dispatch thread. A couple of solutions: put a try/catch around the actual code where the exception is occurring: e.g. if it's in response to a button click handled by an ActionListener put the try/catch inside your actionPerformed() method; or leave the exception as an uncaught exception and add an uncaught exception handler. For example:  Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() { public void uncaughtException(Thread t Throwable e) { // ... do something with exception here ... } }); On a side-note you should in principle but your UI startup code in a SwingUtilities.invokeLater(). Duncan - see comments above: it looks like this is something that changed from Java 5 to Java 6. The only method I know to catch unhandled exceptions on the event dispatch thread is to register a new EventQueue as described [here](http://ruben42.wordpress.com/2009/03/30/catching-all-runtime-exceptions-in-swing/). Using `Thread.setDefaultUncaughtExceptionHandler()` will not work. Has someone really ever caught any exception thrown in the EDT by using Thread.setDefaultUncaughtExceptionHandler()? I seriously doubt (at least on JDK5 didn't check on JDK6) because the EDT catches ALL exceptions by itself and just issue a printStackTrace() to System.err. In JDK 6 at least it appears to ""properly"" go through the uncaught exception handler. I confess I didn't realise this was something that had changed between 5 and 6 but maybe. I'm now really able to catch the exception.(using jdk1.6.) thank you for the side note :) On previous jdk versions you had to use an unofficial trick - setting the ""sun.awt.exception.handler"" property with your handler. Something like this: System.setProperty(""sun.awt.exception.handler""ExceptionHandler.class.getName()); public class ExceptionHandler { public void handle(Throwable ex) { ... } } This trick still works (up till java 6) but it may not work in future versions."
884,A,"What is the difference between swing and awt? Can someone please explain me what's the difference between swing and awt? Are there any cases where awt is more useful/advised to use than swing or vice-versa? Related: http://stackoverflow.com/questions/2994304/is-java-swing-still-in-use/2994324#2994324 The base difference that which already everyone mentioned is that One is heavy weight and other is light weight. Let me explain bacially what the term heavy weight means is that when you are using the awt components the native code used for getting the view component is generated by the Operating System thats why it the look and feel changes from OS to OS. Where as in swing components its the responsibility of JVM to generate the view for the components. Another statement which i saw is that swing is MVC based and awt is not. actually Swing uses a Model-Delegate approach which is derived from the MVC approach where in the View and Controller are combined for a Delegate structure +1 for more simpler explanation  AWT 1 . AWT occupies more memory space 2 . AWT is platform dependent 3 . AWT require javax.awt package swings 1 . Swing occupies less memory space 2 . Swing component is platform independent 3 . Swing requires javax.swing package Could you say me how does AWT occupies more memory space? Because it uses native code? awt requires java.awt.*  As far as when AWT may be more useful than Swing - you may be targeting an older JVM or platform that doesn't support Swing. This used to really come into play if you were building Applets - you wanted to target the lowest common denominator so people wouldn't have to install a newer Java plugin. I'm not sure what the current most widely installed version of the Java plugin is - this may be different today. some people prefer the native look of AWT over Swing's 'not quite there' platform skins. (There are better 3rd party native looking skins than Swing's implementations BTW) Lots of people preferred using AWT's FileDialog over Swing's FileChooser because it gave the platform file dialog most people were used to rather than the 'weird' custom Swing one. But for the last one we can also create a FileChooser that pretty much looks like windows file dialog (but with no autocomplete) http://stackoverflow.com/q/17630055/2534090  AWT is a Java interface to native system GUI code present in your OS. It will not work the same on every system although it tries. Swing is a more-or-less pure-Java GUI. It uses AWT to create an operating system window and then paints pictures of buttons labels text checkboxes etc. into that window and responds to all of your mouse-clicks key entries etc. deciding for itself what to do instead of letting the operating system handle it. Thus Swing is 100% portable and is the same across platforms (although it is skinnable and has a ""pluggable look and feel"" that can make it look more or less like how the native windows and widgets would look). These are vastly different approaches to GUI toolkits and have a lot of consequences. A full answer to your question would try to explore all of those. :) Here are a couple: AWT is a cross-platform interface so even though it uses the underlying OS or native GUI toolkit for its functionality it doesn't provide access to everything that those toolkits can do. Advanced or newer AWT widgets that might exist on one platform might not be supported on another. Features of widgets that aren't the same on every platform might not be supported or worse they might work differently on each platform. People used to invest lots of effort to get their AWT applications to work consistently across platforms - for instance they may try to make calls into native code from Java. Because AWT uses native GUI widgets your OS knows about them and handles putting them in front of each other etc. whereas Swing widgets are meaningless pixels within a window from your OS's point of view. Swing itself handles your widgets' layout and stacking. Mixing AWT and Swing is highly unsupported and can lead to ridiculous results such as native buttons that obscure everything else in the dialog box in which they reside because everything else was created with Swing. Because Swing tries to do everything possible in Java other than the very raw graphics routines provided by a native GUI window it used to incur quite a performance penalty compared to AWT. This made Swing unfortunately slow to catch on. However this has shrunk dramatically over the last several years due to more optimized JVMs faster machines and (I presume) optimization of the Swing internals. Today a Swing application can run fast enough to be serviceable or even zippy and almost indistinguishable from an application using native widgets. Some will say it took far too long to get to this point but most will say that it is well worth it. Finally you might also want to check out SWT (the GUI toolkit used for Eclipse and an alternative to both AWT and Swing) which is somewhat of a return to the AWT idea of accessing native Widgets through Java. :) .. please check my edited question Um... having done some pretty extensive Swing across multiple platforms I can tell you that it very much is not the same across platforms. Similar? Sure. Same? No way. thanks a lot skiphoppy... The heavyweight/leightweight problems will disappear with Java 6 update 12 (see http://java.dzone.com/news/a-farewell-heavyweightlightwei). Wow. I can't believe they can fix it and I still can't believe mixing lightweight and heavyweight components would ever be desirable. But it's incredible that they can fix it. Just forget about both. Have a look at WPF. :)  swing component provide much flexible user interface because it follow model view controller(mvc). awt is not mvc based. swing works faster. awt does not work faster. swing componets are light weight. awt componentsare heavy weight. swing occupies less memory space. awt occupies more memory space. swing component is platform independent. awt is platform dependent. swing require javax.swing package. awt require javax.awt package. I don't think swing works faster than AWT because AWT uses native code (the gui code) that was already there in the OS but swing builds every component from the scratch. So AWT might be faster. Could you say me what is your point of view in saying **swing works faster**? Thanks.  Several consequences result from this difference between AWT and Swing. AWT is a thin layer of code on top of the OS whereas Swing is much larger. Swing also has very much richer functionality. Using AWT you have to implement a lot of things yourself while Swing has them built in. For GUI-intensive work AWT feels very primitive to work with compared to Swing. Because Swing implements GUI functionality itself rather than relying on the host OS it can offer a richer environment on all platforms Java runs on. AWT is more limited in supplying the same functionality on all platforms because not all platforms implement the same-looking controls in the same ways. Swing components are called ""lightweight"" because they do not require a native OS object to implement their functionality. JDialog and JFrame are heavyweight because they do have a peer. So components like JButton JTextArea etc. are lightweight because they do not have an OS peer. A peer is a widget provided by the operating system such as a button object or an entry field object. Great answer. Especially the **peer** no one discussed this. Thank you :)  Swing: Swing is part of the java foundation classes. Swing components are platform-independent. Swing components are lightweight components because swing sits on the top of awt. AWT: AWT is called the abstract window tool. AWT components are platform-dependent. AWT components are heavyweight components.  Swing vs AWT. Basically AWT came first and is a set of heavyweight UI components (meaning they are wrappers for operating system objects) whereas Swing built on top of AWT with a richer set of lightweight components. Any serious Java UI work is done in Swing not AWT which was primarily used for applets. @Pacerier he was talking about AWT not SWT are there any cases where awt is more useful/ advised to use then swing? Samiksha make that another question instead of trying to have a discussion thread in these comments. :) It used to be relevant... 10 years ago."
885,A,"Java JComboBox Custom Renderer and GTK I have a list of Customer objects that I need to have selectable from a JComboBox. From what I read I need to implement a custom renderer to have the fields I want displayed in the list. I want my JComboBox to have entries formatted as such: +----------------------------------------------+ | Customer Name - Contact - City State V | +==============================================+ | Customer #2 Name - Contact - City State | | Customer #3 Name - Contact - City State | | Customer #4 Name - Contact - City State | | Customer #5 Name - Contact - City State | +----------------------------------------------+ I used this code: public class CustomerListCellRenderer extends DefaultListCellRenderer { @Override public Component getListCellRendererComponent( JList list Object value int index boolean isSelected boolean cellHasFocus) { super.getListCellRendererComponent(list value index isSelected cellHasFocus); if (value instanceof Customer) { Customer c = (Customer) value; StringBuffer sb = new StringBuffer(); if (c.getCompany() != null && c.getCompany().length() > 0) { sb.append(c.getCompany()); } sb.append("" - ""); if (c.getCompany() != null && c.getCompany().length() > 0) { sb.append(c.getContact()); } sb.append("" - ""); if (c.getCompany() != null && c.getCompany().length() > 0) { sb.append(c.getCity()); sb.append("" ""); } if (c.getCompany() != null && c.getCompany().length() > 0) { sb.append(c.getState()); } setText(sb.toString()); } return this; } } This doesn't work correctly under Solaris / Unix / Linux using the system GTKLookAndFeel. The background of the input area of the combobox is not drawn and no border is drawn around it. (See screenshot below). Is there another way to achieve this that will work correctly across the 3 major platforms (Win/Mac/GTK)? Can I do a converter to do this and only manipulate the data not the GUI? My current workaround is to override toString() on my Customer object to display each record in the format I want but looking for other ideas. Nick I see no reason why you would need a custom renderer for that example. @ammoQ : You need it because you want to store a Customer into your ComboBoxModel and not a String. So that when you do : getSelectedItem() you get a Customer and not a String. Try this: public Component getListCellRendererComponent( JList list Object value int index boolean isSelected boolean cellHasFocus) { if (value instanceof Customer) { Customer c = (Customer) value; StringBuffer sb = new StringBuffer(); if (c.getCompany() != null && c.getCompany().length() > 0) { sb.append(c.getCompany()); } sb.append("" - ""); if (c.getCompany() != null && c.getCompany().length() > 0) { sb.append(c.getContact()); } sb.append("" - ""); if (c.getCompany() != null && c.getCompany().length() > 0) { sb.append(c.getCity()); sb.append("" ""); } if (c.getCompany() != null && c.getCompany().length() > 0) { sb.append(c.getState()); } value = sb.toString(); } return super.getListCellRendererComponent(list value index isSelected cellHasFocus); } } Also use a StringBuilder not a StringBuffer (this is a single threaded situation). Also also it looks like you have cut and paste errors in the code for instance:  if (c.getCompany() != null && c.getCompany().length() > 0) { sb.append(c.getState()); } Is checking the Company member and using the State member.  Same issue I did this in order to customize it for showing icons: private static class CustomComboBoxRenderer extends DefaultListCellRenderer { private final ListCellRenderer backend; public CustomComboBoxRenderer(ListCellRenderer backend) { this.backend = backend; } @Override public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { Component component = backend.getListCellRendererComponent(list value index isSelected cellHasFocus); if(component instanceof JLabel == false) component = super.getListCellRendererComponent(list value index isSelected cellHasFocus); JLabel label = (JLabel)component; label.setIcon(Icons.COMPONENT); return label; } } Then assigned the renderer like this: comboBox.setRenderer(new CustomComboBoxRenderer(comboBox.getRenderer())); This has worked out fine for me so far.  The DefaultListCellRenderer extends JLabel and looks like JLabel. If you have non-editable ComboBox then Renderer returned via getRenderer is used for painting drop down list area and also for ""input"" area. Try to play with border/foreground/background settings for ComboBox and renderer."
886,A,"How do you make a Swing/JFace/SWT GUI addressable? I have a ""fat"" GUI that it getting fairly complex and I would like to add links from a place to an other and add back/forward buttons to ease navigation. It seems to me that this would be easier if my application was addressable: each composite could have its URI and links would use that URI. Are there design patterns applicable to this problem? I could just look at the source code for Firefox or Eclipse but these are huge projects and it would take a good amount of time making sense of it so I'm asking here. Is there a simpler example somewhere? Of course it would be simpler if I had build a web app in the first place but I'm not going to rewrite this huge app from scratch anytime soon. All answers to date assume there is one level but imagine a top menu leading to ""pages"" then each page has nested tab folders. The URI needs to identify each page and tab item. My last approach included global manager and registration of links. Each part of UI was able to name yourself uniquely and register. The global manager knows about each one and then use some dirty work to bring this part visible. The back/forward navigation was made by special undo/redo manager. Each ""display"" was able to obtain navigation manager and register its ""undo"" event. It was hard work to make it work but the resulting feature was quite useful. We discussed about using some simple JNDI service to locate and name UI parts. It may be useful in linking too.  My solution for doing things like this usually involves the listener pattern. In a nutshell you reduce coupling by providing a way to send and receive events to and from interested parties (composites in this case). This is fairly easy to implement even when retrofitting. This way your events and parties can change without changing the dependent code.  In Swing you might use a CardLayout. You can have each ""page"" be a card and the name of the card (chosen when adding cards to the layout) would be equivalent to the URI you want. Example: String PAGE_1_KEY = ""page 1""; String PAGE_2_KEY = ""page 2""; // as many keys as you need JFrame frame = ...; frame.setLayout(new CardLayout()); frame.add(createPage1() PAGE_1_KEY); frame.add(createPage2() PAGE_2_KEY); // etc. Then in your buttons' action listeners you would call ((CardLayout)frame.getLayout()).show(frame PAGE_1_KEY); // or whichever  You could build a ""global"" registry that maps unique IDs to objects (or maybe class names). These objects could be JPanels for instance. When the user clicks on a link or button some Controller is notified with the key of the new page to be displayed. This Controller could create that JPanel and place it in the application's frame."
887,A,"Lightest-weight spacer component in a GridBagLayout In a GridBagLayout what component is the best for providing empty space in a panel? Ideally I would like to use a component that has: Low overhead No side effect when no empty space is required (i.e. no minimum size) A trivial constructor (no parameters) A JPanel violates #2 above. A Box requires a constructor parameter (#3 above) which is really not necessary in this simple case. A JLabel works well but I worry that it may have some overhead though admittedly it is probably pretty low. An anonymous class also seems to work well (i.e. ""new JComponent() { }"") but that adds an additional .class file every time I use it. I suppose it's no more overhead than any given event handler though. Would it be worth creating a custom zero-implementation component derived from JComponent for this? Is there an existing component that I am missing? FYI GridBagLayout is one of my constraints on the team I'm part of so other layouts are not an option. I also tried an anonymous class derived from Component (rather than JComponent) and this seems to work well too. I worry a little about some possible compatibility issues with putting an AWT component in a Swing GUI (lack of double-buffering for instance) but it certainly seems like it would be a very light-weight solution. Component should be fine. Canvas would not as it will create a heavyweight peer although I believe there has been some improvement work in that area recently. You mention Box but it can be used in a ""lightweight"" fashion with the following four static methods that simply return a component. I use these all the time. They're invisible with respect to painting. In your case it looks like the glues are the way to go. A trivial constructor (like that's a bad thing!) low overhead. The side-effect when no space is required is all down to how you layout your gridbag. panel.add( Box.createHorizontalGlue() ); panel.add( Box.createVerticalGlue() ); panel.add( Box.createHorizontalStrut( int width ) ); panel.add( Box.createVerticalStrut( int width ) ); JavaDoc here: http://java.sun.com/javase/6/docs/api/javax/swing/Box.html Note the linked document recommends against using struts in favor of rigid areas for fixed sizes. (Besides rigid areas use glue for growable spacers and custom Box.Filler for control over max/min/preferred sizes.) I like this solution very much. The ""createGlue()"" method also works well for my purposes. My only qualm with this is that it's intended for BoxLayouts but I'll try to get over it and not be so picky. :) Thanks for the answer! No need for qualms - from the JavaDoc: ""Box provides several class methods that are useful for containers using BoxLayout -- even non-Box containers."""
888,A,"How to make JOptionPane.showConfirmDialog have No selected by default? I implemented a Save As dialog in Java that prompts the user if the file already exists and I want the No option to be selected by default. How do I do this? Here is my current code: JFileChooser chooser = new JFileChooser() { public void approveSelection() { File selectedFile = getSelectedFile(); if (selectedFile != null && selectedFile.exists( ) ) { int response = JOptionPane.showConfirmDialog( this ""The file "" + selectedFile.getName() + "" already exists."" + "" Do you want to replace the existing file?"" getDialogTitle() JOptionPane.YES_NO_OPTION JOptionPane.WARNING_MESSAGE); if (response != JOptionPane.YES_OPTION ) { return; } } super.approveSelection(); } }; I updated my answer. This is my solution: import java.awt.Component; import java.util.ArrayList; import java.util.Arrays; import java.util.List; import javax.swing.JDialog; import javax.swing.JFrame; import javax.swing.JOptionPane; import javax.swing.UIManager; public class NegativeDefaultButtonJOptionPane { public static int showConfirmDialog(Component parentComponent Object message String title int optionType) { List<Object> options = new ArrayList<Object>(); Object defaultOption; switch(optionType){ case JOptionPane.OK_CANCEL_OPTION: options.add(UIManager.getString(""OptionPane.okButtonText"")); options.add(UIManager.getString(""OptionPane.cancelButtonText"")); defaultOption = UIManager.getString(""OptionPane.cancelButtonText""); break; case JOptionPane.YES_NO_OPTION: options.add(UIManager.getString(""OptionPane.yesButtonText"")); options.add(UIManager.getString(""OptionPane.noButtonText"")); defaultOption = UIManager.getString(""OptionPane.noButtonText""); break; case JOptionPane.YES_NO_CANCEL_OPTION: options.add(UIManager.getString(""OptionPane.yesButtonText"")); options.add(UIManager.getString(""OptionPane.noButtonText"")); options.add(UIManager.getString(""OptionPane.cancelButtonText"")); defaultOption = UIManager.getString(""OptionPane.cancelButtonText""); break; default: throw new IllegalArgumentException(""Unknown optionType ""+optionType); } return JOptionPane.showOptionDialog(parentComponent message title optionType JOptionPane.QUESTION_MESSAGE null options.toArray() defaultOption); } }  That's the first thing that comes to my mind. //Custom button text Object[] options = {""Yes"" ""No""}; JOptionPane.showOptionDialog(this ""The file "" + selectedFile.getName() + "" already exists. Do you want to replace the existing file?"" getDialogTitle() JOptionPane.YES_NO_OPTION JOptionPane.WARNING_MESSAGE null options options[1]); But probably there's a better approach.  If you don't want to hardcode ""Yes"" and ""No"" (for instance when your app is localized for other languages) you can use UIManager resources: UIManager.getString(""OptionPane.yesButtonText"" l) UIManager.getString(""OptionPane.noButtonText"" l) @RoelSpilker OptionPane.buttonOrientation OptionPane.isYesLast etc. Or highjack BasicOptionPaneUI's whole button panel. There is still the issue of the order of the buttons. On gtk the user can actually specify the order using gtk-alternative-button-order=1. I don't know how you can find the order for the current platform and setting. And I hope that using the showConfirmDialog handles this depending on the platform look and feel :-)  For the above example it is JOptionPane.showOptionDialog Those arguments can no be passed to showConfirmDialog because it does not have them. More people might be looking for this so why not offer a ""working"" solution.  Use this constructor: JOptionPane(Object message int messageType int optionType Icon icon Object[] options Object initialValue) where options specifies the buttons and have initialValue (one of the options values) specify what the default is. Update: You can call showOptionDialog rather than showConfirmDialog. The former takes options and initialValue parameters. Unfortunately this prevents Y and N on the keyboard operating the buttons. I was frustrated by the fact that this way didn't work for the Y and N keys. And then I checked the simplest way (as in the original question with Yes as the default) and noticed that on my Sun JRE 1.6 running on Windows 7 it didn't work for the Y and N keys either. But I don't want to specify the ""Yes"" and ""No"" myself - I want the system to take its defaults. Can this be done? Also after I create a new object using this ocnstructor how do I show the modal confirm dialog? @Koen Weyn : Thanks. I guess I'll use the showOptionsDialog option as the createDialog seems cumbersome. How do I get the user selection when using createDialog? In any case I find it very strange that Swing don't have a built-in support for this. after using the constructor you call optionPane.createDialog(parent ""Title"").setVisible(true) The only other option for the initial question that I see is to override the installed OptionPaneUI. Have a look at BasicOptionPaneUI.getInitialValueIndex(). But IMO the solutions suggested above are much more simpler."
889,A,"Does JEditorPane have Charset problems when showing HTML? I have the following code: import javax.swing.JEditorPane; import javax.swing.JFrame; import javax.swing.JScrollPane; import javax.swing.ScrollPaneConstants; public class ScratchPad { public static void main(String args[]) throws Exception { String html =""<html>""+ ""<head>""+ ""<meta http-equiv=\""Content-Type\"" content=\""text/html; charset=ISO-8859-1\""/>""+ // this is the problem right here ""<title>Error 400 BAD_REQUEST</title>""+ ""</head>""+ ""<body>""+ ""<h2>HTTP ERROR: 400</h2><pre>BAD_REQUEST</pre>""+ ""<p>RequestURI=null</p>""+ ""<p><i><small><a href=\""http://jetty.mortbay.org\"">Powered by jetty://</a></small></i></p>""+ ""</body>""+ ""</html>""; JFrame f = new JFrame(); JEditorPane editor = new JEditorPane(); editor.setEditable( false ); editor.getDocument().putProperty( ""Ignore-Charset"" ""true"" ); // this line makes no difference either way editor.setContentType( ""text/html"" ); editor.setText( html ); f.add( new JScrollPane(editor ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER) ); f.pack(); f.setVisible( true ); } } If you run it you'll notice the frame is blank. However if I remove the ""; charset=ISO-8859-1"" from the meta tag the HTML shows up. Any ideas why and what I can do to prevent this (other than manually hacking the HTML string over which I have no control...). Edit #1 - putProperty( ""Ignore-Charset"" ""true"" ) makes no difference unfortunately. When I run the code I can only see the HTML text when I delete the meta line. Maybe it has something to do with character settings of the system it runs on.  Use the follow line before setText and after setContentType. editor.getDocument().putProperty(""IgnoreCharsetDirective"" Boolean.TRUE); This is one of the mystic undocumented features. setContentType create a new Document that it has no effect if you set it before."
890,A,"How to create an overlay window in Java? I'm trying to create a HUD style display for a foreign application. To do this I'd need to make a transparent overlay window that would be placed on top of the window of the foreign application. The overlay window should allow me to place widgets and draw text on it. Events should get forwarded to the underlying window if they happen on the transparent area (and otherwise allow the widgets to work as expected). I'm doing this on OSX with Java. I'd hope to do this with pure Java with portability to other platforms but if not possible I'd be fine with solutions that would just allow me to do this on OSX through Cocoa (Rococoa) or Carbon. Do you happen to have an screenshot from other app? Actually was able to figure this out myself. Seems to be easier than I expected: public class Overlay { public static void main(String[] args) { JFrame frame = new JFrame(""Transparent Window""); frame.setBackground(new Color(0 0 0 0)); frame.setUndecorated(true); frame.setAlwaysOnTop(true); // Without this the window is draggable from any non transparent // point including points inside textboxes. frame.getRootPane().putClientProperty(""apple.awt.draggableWindowBackground"" false); frame.getContentPane().setLayout(new java.awt.BorderLayout()); frame.getContentPane().add(new JTextField(""text field north"") java.awt.BorderLayout.NORTH); frame.getContentPane().add(new JTextField(""text field south"") java.awt.BorderLayout.SOUTH); frame.setVisible(true); } } don't forget to ""frame.pack()"" ! You know if this also works for Buttons? I.e. if I wan't some sort of semi-transparent Button on top of another application where the event isn't forwarded to the underlying application but to the button so I can press it?"
891,A,"What's the best way to store app settings? (MVC) I'm developing a swing app which suits the MVC pattern and I'm wondering about the best place to store settings such as width/height xml files location... Should those settings be avaiable also only through the Model? Should I use a global static class? A singleton? Thanks in advance I'd suggest java.util.prefs.Preferences. Then you don't have to invent anything.  It depends on what settings you're talking about. Width and Height sounds like properties that are only relevant to the View part of your project and should thus be stored within it. Xml file location sounds more like a Model concern. When developing in Java (which I quite rarely do...) I tend to set up a class named Settings in which I store whatever I need as private fields with getters and/or setters where it's needed. In an MVC pattern I'd have one settings class in each section and (if necessary but rather not) one ""global"" settings class. But if you're concerned with pattern conformity make sure that each setting is only available where it's needed.  I actually used the Swing Application Framework in NetBeans with great success here which deals with it in a way where you dont have to worry too much about design patterns :) Before than I'd normally store the window properties in properties files and I had a separate config model/service that I injected where it was needed to retrieve the properties when re-creating windows. I cannot see why it would need to be a Singleton. Probably an anti-pattern in this case."
892,A,How to make a JFrame have no taskbar button? I would like to have a normal JFrame with its full functionalities (decoration title icon resizing minimizing maximizing etc.) with the only thing that it wouldn't appear in the system's taskbar. (Typically there would be another program opening and managing them). Is it possible ? And if yes what is the best way to do that ? Use a non-modal JDialog instead of a JFrame. I'm not sure if I can do same with a JDialog though. If I remember I can't set a specific icon or have the minimize and maximize buttons.
893,A,"showing images on jeditorpane (java swing) I have a JEditorPane created by this way: JEditorPane pane = new JEditorPane(""text/html"" ""<font face='Arial'>"" + my_text_to_show + ""<img src='/root/img.gif'/>"" + ""</font>""); I put this pane on a JFrame. Text is shown correctly but I can't see the picture there is only a square indicating that there should be an image (i.e.: ""broken image"" shown by browsers when picture has not been found) I used this when I was working in netbeans it worked though. I think a little modification if the program should run outside of netbeans String imgsrc=""""; try { imgsrc = new File(""passport.jpg"").toURL().toExternalForm(); } catch (MalformedURLException ex) { Logger.getLogger(EntityManager.class.getName()).log(Level.SEVERE null ex); } //System.out.println(imgsrc); use this to check html = ""<img src='"" + imgsrc + ""' alt='' name='passport' width='74' height='85' /><br />""; //use the html ... if you run from the jar the image file has to be on the same directory level ... in fact the image file has to be on the same directory as your execution entry. *""if you run from the jar the image file has to be on the same directory level..""* Rot! See the sources on [this answer](http://stackoverflow.com/questions/6373621/loading-images-from-jars-for-swing-html/6373907#6373907) that demonstrates how to load images by relative references as well as how to use use the `base` element in the HTML. The base can also be set explicitly in the `JEditorPane` methods.  You have to provide type and get the resource. That's all. My tested example but I'm not sure about formating. Hope it helps: import java.io.IOException; import javax.swing.JEditorPane; import javax.swing.JFrame; public class Test extends JFrame { public static void main(String[] args) throws Exception { Test.createAndShowGUI(); } private static void createAndShowGUI() throws IOException { JFrame.setDefaultLookAndFeelDecorated(true); JFrame frame = new JFrame(""HelloWorldSwing""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); String imgsrc = Test.class.getClassLoader().getSystemResource(""a.jpg"").toString(); frame.getContentPane().add(new JEditorPane(""text/html"" ""<html><img src='""+imgsrc+""' width=200height=200></img>"")); frame.pack(); frame.setVisible(true); } } I've already tried this way and I ever get a null pointer exception :( I don't know where you got the exceptionbut you can try my example. And put a.jpg into the same directory with this class. you can compile it as javac Test.java && run java Test. And because I haven't set the size of the window you can set it larger to see image. (ClassLoader.getSystemResource is a static method. getResource would be a better choice.)  The JEditorPane is using HTMLDocument.getBase to locate relative urls as well so if you are displaying content from a directory make sure to set the base on the html document so it resolves urls relative to the base directory. Depending on where that image actually is you might want to extend HTMLEditorKit+HTMLFactory+ImageView and provide a custom implementation of ImageView which is responsible for mapping the attribute URL to the image URL too.  If you want to specify relative path to the image. Let's say your project folder structure is as following: sample_project/images sample_project/images/loading.gif sample_project/src sampler_project/src/package_name Now the image tag would look like this: ""<img src='file:images/loading.gif' width='100' height='100'>"" Yaay!  None of the above worked for me however 'imgsrc = new File(""passport.jpg"").toURL().toExternalForm();' let me to try and have each image in the html have a preceding 'file:' so that it now reads: <img src=""file:passport.jpg"" /> And that works fine for me."
894,A,BufferedImage's getSubimage performance I'm working on a Java 2D rendering program (running on 1.6.0_11) which uses external images for its UI rendering. These large images contain several UI graphics parts at the same time which I extract now with the BufferedImage.getSubimage(). Assuming an average desktop system (with our without enabling DirectX/OpenGL acceleration) my questions are: The getSubimage() is a memory efficient call as it shares the underlying image data but does this affect the rendering speed of these sub images with the Graphics2D.drawImage()? If the images use 8 bit per pixel color palette mode what would be the gain/loss of using RGBA mode (e.g. 4x memory) or relying on the palette color model (e.g conversion time)? It turns out this is a bit grey area. If the DirectX pipeline is not used extracting subimages every time takes a bit more time than having a separate image of the subimage. If the image is a tile which needs special coordinate system to render the difference is noticeable. Having DirectX on and a modern graphics card the BufferedImage becomes a managed image - lives in the video ram - and utilizes the cards hardware support. In that case there is no significant difference between the sub and non-sub images. As far as I know getSubimage(...) shouldn't have any significant effect to the rendering. Converting image data is slow and usually it is better to try to avoid doing it on the fly. With images slowness can be divided to two categories: Disk I/O Data processing And disk I/O can easily be the slowest part. If you are going to use only part of the image it would be best to be able to load only part of the image from disk. My experience is that JAI is better at doing only what is really needed than the standard library stuff. It's not the disk I/O time because the source image is fully loaded into memory. A sample of this composite image can be seen at http://karnokd.uw.hu/open-ig-starmap.png . All UI graphics components are extracted from this kind of images. I accept this answer because it states clearly - although not in detail - what I too found out since then plus suggests an alternative way of handling images. Thank you.
895,A,"Event handling with Jython & Swing I'm making a GUI by using Swing from Jython. Event handling seems to be particularly elegant from Jython just set JButton(""Push me"" actionPerformed = nameOfFunctionToCall) However trying same thing inside a class gets difficult. Naively trying JButton(""Push me"" actionPerformed = nameOfMethodToCall) or JButton(""Push me"" actionPerformed = nameOfMethodToCall(self)) from a GUI-construction method of the class doesn't work because the first argument of a method to be called should be self in order to access the data members of the class and on the other hand it's not possible to pass any arguments to the event handler through AWT event queue. The only option seems to be using lambda (as advised at http://www.javalobby.org/articles/jython/) which results in something like this: JButton(""Push me"" actionPerformed = lambda evt : ClassName.nameOfMethodToCall(self)) It works but the elegance is gone. All this just because the method being called needs a self reference from somewhere. Is there any other way around this? JButton(""Push me"" actionPerformed=self.nameOfMethodToCall) Here's a modified example from the article you cited: from javax.swing import JButton JFrame class MyFrame(JFrame): def __init__(self): JFrame.__init__(self ""Hello Jython"") button = JButton(""Hello"" actionPerformed=self.hello) self.add(button) self.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE) self.setSize(300 300) self.show() def hello(self event): print ""Hello world!"" if __name__==""__main__"": MyFrame() @JoonasPulakka : If you want to call a class method simply use `classname.method` instead of `self.method` Wow that was simple! Thanks. This approach seems to send both self reference and event to the method and it thus needs to be defined like: def nameOfMethodToCall(self evt) which is fine!"
896,A,"Best programming process for creating a graphically-complex Java Swing Application? I'm starting a fairly complex Swing application that heavily graphics-oriented with about 1000 separate jpegs 30+ different forms and timers keeping track of the rate of user-interactions throughout. My question is from a practical programming perspective after I've already written a storyboard for the entire project and got it approved by the client where's the best place (code-wise) to begin programming this massive project and in what order should I program the elements? (Example Answer: first begin coding the declare and init statements of all the necessary pieces then write skeleton versions of all the methods then deal with swing design and layout manager (gridbag) and then deal with Events and Listeners) Thanks for the advice everyone oh and btw I really love StackOverflow! I'd pick up a book on TDD and even if you're not going to write automated tests it will be full of good advice on how to approach your project. After that I'd pick a single piece of functionality that slices all the way through your application vertically and implement that end-to-end. This should allow you to get any infrastructure/frameworks in place and spot any gotcha's that may get thrown up out of your design. If your client has the time free show them each piece of functionality along the way and make sure that every piece you do adds some value to the product. --EDIT In addition I'd take a look at using a graphical designer for your screens instead of using the GridBagLayout. That will just waste time and can quickly become a maintainence nightmare when changing screens. I personally prefer the ones that work in a resource file type way where the screen is essentially ""compiled"" and you just load it into your code I'd use NetBeans + GridBagLayout  I think mad-j has the words of wisdom. Don't concentrate on the 'all'... identify sections/components/modules and deliver those. Then move on to the next and the next. This is called Iterative and Incremental Development (a response to the weaknesses of the waterfall model)! This will also allow you to create tools and frameworks which should make your development easier and faster as you move along. This will allow you to show your clients functional parts early. But a word of advice! Your client will more than likely keep changing its requirements changing the GUI changing its mind etc. I've seen entire projects fail due to these continuous changes. It is out of the scope of this question to mention any more on this but please be aware that it more than likely will happen and be prepared to deal with it! If you and the client have functional parts they can be tested immediately rather than testing one huge system. By completing functional parts iteratively will probably allow you to work at every layer on most API's using most tools and technologies. The advantage of this is that it will allow you to identify the complexities early. It is those complex areas that render this following statement true: The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time. --Tom Cargil Identifying acknowledging and understanding those complex areas will allow you to manage your risks and alter your efforts and resources more effectively. Good Luck Jeach!  Are you really sure of Swing? Eclipse RCP is much better and flexible starting from EMF and going on Anyway with Swing first I'll prepare an XSLT template of all: common code routine and other common pieces of common to bring then them in abstract and interface classes ORM patterns you use. Then I'll design a common UI scheme this ""xslize"" too. After all with ANT XSLT processor I'll prepare a complete build procedure upon your specs. P.S. I made similar projects for simple web and swing cruds just before 2001 and if you use some peculiar UI designer you can also nest or write with xslt every specs without putting dirty code in your ui raw concepts so when I make/add remove features on all or singular piece of code 30 seconds maximum for full rebuild of ALL of course you must ""XSLIZE"" all using also many xslt overrider/import.  As mentioned by MrWiggles you may want to look into using a UI builder. If you're looking at writing many forms and it looks like the form data can match nicely to some javabeans you may want to think about creating some framework panels first. If you can create some simple base classes that take care of the wiring (syncing the fields to the beans and vice-versa) it'll save you a lot of work. You may even want to set up some panels that will ""auto create"" fields based on beans. Just pass in a bean and the panel creates itself. The trick there is specifying layout for the fields and dealing with fields that have fixed values validation etc. (Fixed values can be dealt with using javabean property editors - see http://javadude.com/articles/propedit/index.html. If you're set on using Swing (eclipse RCP is nice btw) you might want to look at the Swing Application Framework (https://appframework.dev.java.net/). If not using it directly it may give you some ideas on how to set up bindings. Hope this helps a bit  I prefer writing the UI so that first I write (using TDD) the backend classes which implement the behaviour of the UI without any dependencies to the presentation of the UI (i.e. without Swing or any other UI library). After that I write a thin presentation layer with an UI library where all the event handlers etc. delegate to the UI backend (they should be just one-liners without any logic). The benefit of this is that you can easily write tests for the UI which in turn makes it easier to change and maintain the UI. See the links at http://martinfowler.com/eaaDev/ModelViewPresenter.html for more details. At a higher level first implement the features which will produce the most value to the users. Try to get something to show as early as possible so that you can get feedback from the users and improve any deficiencies in the UI. You can fake most of the background services (for example the database and business rules) so that the UI can be used even though it does not yet really do anything. Totally agree: sometimes we've even found that so-called presentational rules (i.e. show this if that kind of user has clicked buttonFoo) ought to live in a rules engine.  You're describing a ""waterfall"" development approach - completing some level of the program first then completing the next level etc. It's indeed one possible approach but many people find it so called tracer bullet approach better; first make something functional then learn from it adjust what's needed and proceed. It's especially useful if you're working with a client because by showing prototypes you can get feedback and avoid misunderstandings."
897,A,Is there a good drop-in replacement for Java's JEditorPane? I'm not happy with the rendering of HTML by Swing's JEditorPane. In particular bullets for unordered lists are hideous. Customising the rendering seems extremely difficult. Therefore I'm looking for a replacement with better HTML rendering. Does this exist? (I asked Google and found nothing except a promising dead link). Something that I looked at extensively a while back - and there are many options - however I nearly ended up using http://lobobrowser.org/cobra.jsp but then the project was cancelled so I can't tell you how it all turned out... Cobra works well for my needs. I wish the jar was a little smaller though.  Take a look at SwingBox. SwingBox is a Java Swing component that allows displaying the (X)HTML documents including the CSS support. It is designed as a JEditorPane replacement with considerably better rendering results. SwingBox is pure Java and it is using the CSSBox rendering engine for rendering the documents.  Cobra did the trick. Almost a drop-in replacement for JEditorPane with very nice HTML rendering. One complaint: it's a big jar to add to my little application. Thanks for the responses.  http://today.java.net/pub/a/today/2004/05/24/html-pt1.html
898,A,"Is there any good and free Date AND Time Picker available for Java Swing? Is there any good and free Date AND Time Picker available for Java Swing? There are a lot date pickers available but no date AND time picker. This is the closest I came across so far: Looking for a date AND time picker Anybody? Why are these questions considered off-topic if answers got from these questions are the most valuable you can get over the Internet if I ask something like this in Google I just select the first stackoverflow link and the answers usually take me in the better direction There is the FLib-JCalendar component with a combined Date and Time Picker.  As you said Date picker is easy there are many out there. As for a Time picker check out how Google Calendar does it when creating a new entry. It allows you to type in anything while at the same time it has a drop down in 30 mins increments. The drop down changes when you change the minutes. If you need to allow the user to pick seconds then the best you can do is a typable/drop down combo  Use the both combined.. that's what i did: public static JPanel buildDatePanel(String label Date value) { JPanel datePanel = new JPanel(); JDateChooser dateChooser = new JDateChooser(); if (value != null) { dateChooser.setDate(value); } for (Component comp : dateChooser.getComponents()) { if (comp instanceof JTextField) { ((JTextField) comp).setColumns(50); ((JTextField) comp).setEditable(false); } } datePanel.add(dateChooser); SpinnerModel model = new SpinnerDateModel(); JSpinner timeSpinner = new JSpinner(model); JComponent editor = new JSpinner.DateEditor(timeSpinner ""HH:mm:ss""); timeSpinner.setEditor(editor); if(value != null) { timeSpinner.setValue(value); } datePanel.add(timeSpinner); return datePanel; }  The best of the best JCalendar: http://www.toedter.com/en/jcalendar/index.html LGPL licensed. -100 jcalendar from toedter has no TIMEpicker.  You can extend the swingx JXDatePicker component: ""JXDatePicker only handles dates without time. Quite often we need to let the user choose a date and a time. This is an example of how to make use JXDatePicker to handle date and time together."" http://wiki.java.net/twiki/bin/view/Javadesktop/JXDateTimePicker EDIT: This article disappeared from the web but as SingleShot discovered it is still available in an internet archive. Just to be sure here is the full working example: import org.jdesktop.swingx.calendar.SingleDaySelectionModel; import org.jdesktop.swingx.JXDatePicker; import javax.swing.*; import javax.swing.text.DefaultFormatterFactory; import javax.swing.text.DateFormatter; import java.text.DateFormat; import java.text.ParseException; import java.util.*; import java.awt.*; /** * This is licensed under LGPL. License can be found here: http://www.gnu.org/licenses/lgpl-3.0.txt * * This is provided as is. If you have questions please direct them to charlie.hubbard at gmail dot you know what. */ public class DateTimePicker extends JXDatePicker { private JSpinner timeSpinner; private JPanel timePanel; private DateFormat timeFormat; public DateTimePicker() { super(); getMonthView().setSelectionModel(new SingleDaySelectionModel()); } public DateTimePicker( Date d ) { this(); setDate(d); } public void commitEdit() throws ParseException { commitTime(); super.commitEdit(); } public void cancelEdit() { super.cancelEdit(); setTimeSpinners(); } @Override public JPanel getLinkPanel() { super.getLinkPanel(); if( timePanel == null ) { timePanel = createTimePanel(); } setTimeSpinners(); return timePanel; } private JPanel createTimePanel() { JPanel newPanel = new JPanel(); newPanel.setLayout(new FlowLayout()); //newPanel.add(panelOriginal); SpinnerDateModel dateModel = new SpinnerDateModel(); timeSpinner = new JSpinner(dateModel); if( timeFormat == null ) timeFormat = DateFormat.getTimeInstance( DateFormat.SHORT ); updateTextFieldFormat(); newPanel.add(new JLabel( ""Time:"" ) ); newPanel.add(timeSpinner); newPanel.setBackground(Color.WHITE); return newPanel; } private void updateTextFieldFormat() { if( timeSpinner == null ) return; JFormattedTextField tf = ((JSpinner.DefaultEditor) timeSpinner.getEditor()).getTextField(); DefaultFormatterFactory factory = (DefaultFormatterFactory) tf.getFormatterFactory(); DateFormatter formatter = (DateFormatter) factory.getDefaultFormatter(); // Change the date format to only show the hours formatter.setFormat( timeFormat ); } private void commitTime() { Date date = getDate(); if (date != null) { Date time = (Date) timeSpinner.getValue(); GregorianCalendar timeCalendar = new GregorianCalendar(); timeCalendar.setTime( time ); GregorianCalendar calendar = new GregorianCalendar(); calendar.setTime(date); calendar.set(Calendar.HOUR_OF_DAY timeCalendar.get( Calendar.HOUR_OF_DAY ) ); calendar.set(Calendar.MINUTE timeCalendar.get( Calendar.MINUTE ) ); calendar.set(Calendar.SECOND 0); calendar.set(Calendar.MILLISECOND 0); Date newDate = calendar.getTime(); setDate(newDate); } } private void setTimeSpinners() { Date date = getDate(); if (date != null) { timeSpinner.setValue( date ); } } public DateFormat getTimeFormat() { return timeFormat; } public void setTimeFormat(DateFormat timeFormat) { this.timeFormat = timeFormat; updateTextFieldFormat(); } public static void main(String[] args) { Date date = new Date(); JFrame frame = new JFrame(); frame.setTitle(""Date Time Picker""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); DateTimePicker dateTimePicker = new DateTimePicker(); dateTimePicker.setFormats( DateFormat.getDateTimeInstance( DateFormat.SHORT DateFormat.MEDIUM ) ); dateTimePicker.setTimeFormat( DateFormat.getTimeInstance( DateFormat.MEDIUM ) ); dateTimePicker.setDate(date); frame.getContentPane().add(dateTimePicker); frame.pack(); frame.setVisible(true); } } This link is now gone however the [Wayback Machine](http://archive.org/web/web.php) has it [here](http://web.archive.org/web/20111118105909/http://wiki.java.net/twiki/bin/view/Javadesktop/JXDateTimePicker?TWIKISID=cc05dea1611ad043796cd67ed476d711;skin=print). I included now here the full code of this little gem :) Is there cell editor to put it to table cell?  For a time picker you can use a JSpinner and set a JSpinner.DateEditor that only shows the time value. JSpinner timeSpinner = new JSpinner( new SpinnerDateModel() ); JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(timeSpinner ""HH:mm:ss""); timeSpinner.setEditor(timeEditor); timeSpinner.setValue(new Date()); // will only show the current time wow so simple and good! Thanks your are great!"
899,A,"Help with Mud Programming in java Well i decided to make something like a mud and the practices i may use in other places too but i have one problem.. i don't know how to make it to where a user can type in the actual box instead of a Textfield i'd like to explain better but i can't really think how Ah - all of us with any MUD interest were eager to focus on that ;-). See the addition I made to my answer which hopefully will help. Okay I'll take a stab at this... do you mean that you don't know how to create a server to which one can connect with `telnet` or another MUD client? no i mean for the user input i don't know how to make it to where a user can input in the output section it is a custom gui. Muds aren't that complicated to make. I think the answer to what you are asking is that you need to use the TCP/IP telnet port. Telnet is pretty easy you just open a port and start reading data--there is lots of info on it and even a few libraries that can help you. (Telnet is just a standard port but there is this one little exception a ""Negotiation"" that goes on in the beginning it's just sending a few bytes back and forth but if you don't do it then nothing ever happens). So you write your code and start listening to a port (4444 was a common MUD port iirc). Then you run your telnet client and connect to that port. It will create a new port connection for each person calling in. You probably have a thread listening to each port that watches what you are typing handles backspaces and can send completed commands to your main mud system (To a synchronized method because many ports may send commands at once). It's actually pretty easy. Look for a telnet library for Java to start out. A quick search found JavaSSH which also handles telnet. Edit: I should point out that they are not EASY to make either! Making the maps equipment and monsters all data driven so that you don't have to rebuild for every monster takes some forethought... It's one of those things where you'll probably write your first one and use it for a month before deciding it needs to be re-written from scratch. I'm just pointing out that you may want to examine the mud source that's already out there. I found diku pretty small and easy to understand.  If you're talking about a MUD client and entering the text in the same window as the output sounds like you'd run into the same problem as when you play a MUD via bare telnet in a terminal - which is that the text you're entering scrolls away as you're typing it so you can't see to edit etc. I think having a separate field where you can edit if necessary before entering it is a good thing. You could just focus on the server instead and let users (admins too) connect via one of the MUD clients out there like zMUD. I may be interpreting your question wrong though. There's a ton of stuff involved in making a MUD so most people don't get a viable game up and running when starting from scratch - but you can still learn a lot from the effort regardless. I did that myself but just the server - never did anything with a client program or GUI interface. Editing to add after the OP's comment response: Take a look at this Sun tutorial to see if it helps: http://java.sun.com/docs/books/tutorial/uiswing/components/textarea.html The first example uses a separate field for input but scroll down to the ""TextAreaDemo"" example which may show what you need. i don't understand their example code all that well but if what i get from it is correct all there is to it is making the document read backwards from the caret position to the end of the word?? No - in the part I believe you are looking at the program is checking for words to autocomplete. Basically you work with a zero-based index into the text in the field. In the example for insert events from the user that the program is detecting that index is obtained with ev.getOffset() and when the program is itself inserting text into the field it does so with textArea.insert. In one place they're calling it an offset and in another a position but in both cases its a zero based index where the action happens. (Note too that getOffset() is returning the start of the input not the end. The ev.getLength() method is how they get the length of the input.) oh no you got my question right i was also kindof wanting to use in making my own command prompt type thing for another program i am making i am aware of the text scrolling away problem but i'd still like to know how to do it."
900,A,"Swing: how can I ignore deselection events? My custom component is composed of three JTrees inside a JPanel. Only one JTree should be selected at a time so I've added a TreeSelectionListener to each of them that calls clearSelection() on the previously selected JTree. (See here for more details). That works fine but I need to prevent the TreeSelectionListeners to trigger when a JTree is deselected. A simple way to distinguish a selection event from a deselection one would be more than enough. Thanks in advance! Just get the current selection from the tree and if it's empty return. Just as simple as ""if (selectedTree.getSelectionCount() != 0)"". I must admit I feel a little bit stupid :D Thanks!"
901,A,Copying selected text to a Swing Java app? My goal is assign a global hotkey (JIntellitype JXGrabKey) that would pass an arbitrary selected text to a java app. The initial plan is to utilize the java.awt.Robot to emulate Ctrl-C keypress and then get the value from clipboard. Probably there's a more elegant solution? EXAMPLE: Open Notepad type in some text select that text. Now that text needs to be copied into a Java app. The Robot only sends events inside your JVM. I don't know of anything to send events out to the operating system. Though there is plenty of examples out there of making JNI calls to the windows API it would then be platform specific.  I've gone with with Robot and that works just fine.  I guess you want to implement a global input monitor Java is not so straightforward to do the job. You may have to write an API hook and pack it in a DLL then invoke it via JNI.
902,A,Log4J Swing Appender I need to append log4j content to a Swing component (JTextArea or similar). Is there a common way to do this? Thanks to Google I've obviously discovered the Log4j-Swing-Appender.  You can tail logs from running application using OtrosLogViewer. It has many advance features about searching and filtering.  Instead of introducing an external library I ended up editing the log4j.properties file to include the following: log4j.rootCategory=DEBUG app log4j.appender.app=path.to.class.extending.WriterAppender Then I employed an observer pattern to post the data into my GUI's JTextArea. Did you only overwrite the WriterAppender.append() method? please post your code; I'm stuck with this problem  to make the JScrollPane wrapping the target component (e.g. JTextArea) automatically scroll down to show the latest log entries consider calling:  org.apache.log4j.lf5.viewer.LF5SwingUtils.makeVerticalScrollBarTrack(scrollPane); Thanks! It was very useful for me.
903,A,"How to programmatically close a JFrame What's the correct way to get a JFrame to close the same as if the user had hit the [x] button or pressed Alt+F4 (on windows)? I have my default close operation set the way I want via setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); and it does exactly what I want with the aforementioned controls. This question isn't about that. What I really want to do is cause the gui to behave in the same way as a press of [x] would cause it to behave. I.e. supposing I were to extend WindowAdaptor and then add an instance of my adaptor as a listener via addWindowListener(); I would like to see the same sequence of calls through windowDeactivated() windowClosing() windowClosed() as would occur with the [x]. Not so much tearing up the window as telling it to tear itself up so to speak. Whats wrong with using dispose? That's the way I've always done it. Yeah jFrame.dispose() should close the window and clean everything up? Because dispose is not 1:1 equivalent of closing the window by clicking at [x]? Yes good question I want a user click on an [x] button I explicitly supply on an undecorated override of a JFrame to act *exactly* as if the user had clicked on the OS supplied [x] button on an OS specific decorated JFrame window. How about this.dispatchEvent(wev); instead of Toolkit.getDefaultToolkit... The former is what the accepted answer suggests. If by Alt-F4 or X you mean ""Exit the Application Immediately Without Regard for What Other Windows or Threads are Running"" then System.exit(...) will do exactly what you want in a very abrupt brute-force and possibly problematic fashion. If by Alt-F4 or X you mean hide the window then frame.setVisible(false) is how you ""close"" the window. The window will continue to consume resources/memory but can be made visible again very quickly. If by Alt-F4 or X you mean hide the window and dispose of any resources it is consuming then frame.dispose() is how you ""close"" the window. If the frame was the last visible window and there are no other non-daemon threads running the program will exit. If you show the window again it will have to reinitialize all of the native resources again (graphics buffer window handles etc). dispose() might be closest to the behavior that you really want. If your app has multiple windows open do you want Alt-F4 or X to quit the app or just close the active window? The Java Swing Tutorial on Window Listeners may help clarify things for you.  If you have done this to make sure the user can't close the window: frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE); Then you should change your pullThePlug() method to be public void pullThePlug() { // this will make sure WindowListener.windowClosing() et al. will be called. WindowEvent wev = new WindowEvent(this WindowEvent.WINDOW_CLOSING); Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(wev); // this will hide and dispose the frame so that the application quits by // itself if there is nothing else around. setVisible(false); dispose(); // if you have other similar frames around you should dispose them too. // finally call this to really exit. // i/o libraries such as WiiRemoteJ need this. // also this is what swing does for JFrame.EXIT_ON_CLOSE System.exit(0); } I found this to be the only way that plays nice with the WindowListener and JFrame.DO_NOTHING_ON_CLOSE. Yes that's why I included the System.exit(0). If you look at swing source code you'll see that they also do something similar. I believe WindowEvent.WINDOW_CLOSING take care of the events that you mentioned which is also what the accepted answer suggests to do. Without the System.eξt(0)System.exit(0) your approach would not close the application. What you write in the comments is plain incorrect. Additionally you will not hit any event-handlers that are normally expected when closing a window! -1   setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  Best way to close a Swing frame programmatically is to make it behave like it would when the ""X"" button is pressed. To do that you will need to implement WindowAdapter that suits your needs and set frame's default close operation to do nothing (DO_NOTHING_ON_CLOSE). Initialize your frame like this: private WindowAdapter windowAdapter = null; private void initFrame() { this.windowAdapter = new WindowAdapter() { // WINDOW_CLOSING event handler @Override public void windowClosing(WindowEvent e) { super.windowClosing(e); // You can still stop closing if you want to int res = JOptionPane.showConfirmDialog(ClosableFrame.this ""Are you sure you want to close?"" ""Close?"" JOptionPane.YES_NO_OPTION); if ( res == 0 ) { // dispose method issues the WINDOW_CLOSED event ClosableFrame.this.dispose(); } } // WINDOW_CLOSED event handler @Override public void windowClosed(WindowEvent e) { super.windowClosed(e); // Close application if you want to with System.exit(0) // but don't forget to dispose of all resources // like child frames threads ... // System.exit(0); } }; // when you press ""X"" the WINDOW_CLOSING event is called but that is it // nothing else happens this.setDefaultCloseOperation(ClosableFrame.DO_NOTHING_ON_CLOSE); // don't forget this this.addWindowListener(this.windowAdapter); } You can close the frame programmatically by sending it the WINDOW_CLOSING event like this: WindowEvent closingEvent = new WindowEvent(targetFrame WindowEvent.WINDOW_CLOSING); Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closingEvent); This will close the frame like the ""X"" button was pressed.  This examples shows how to realize the confirmed window close operation. The window has a Window adapter which switches the default close operation to EXIT_ON_CLOSEor DO_NOTHING_ON_CLOSE dependent on your answer in the OptionDialog. The method closeWindow of the ConfirmedCloseWindow fires a close window event and can be used anywhere i.e. as an action of an menu item public class WindowConfirmedCloseAdapter extends WindowAdapter { public void windowClosing(WindowEvent e) { Object options[] = {""Yes"" ""No""}; int close = JOptionPane.showOptionDialog(e.getComponent() ""Really want to close this application?\n"" ""Attention"" JOptionPane.YES_NO_OPTION JOptionPane.INFORMATION_MESSAGE null options null); if(close == JOptionPane.YES_OPTION) { ((JFrame)e.getSource()).setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE); } else { ((JFrame)e.getSource()).setDefaultCloseOperation( JFrame.DO_NOTHING_ON_CLOSE); } } } public class ConfirmedCloseWindow extends JFrame { public ConfirmedCloseWindow() { addWindowListener(new WindowConfirmedCloseAdapter()); } private void closeWindow() { processWindowEvent(new WindowEvent(this WindowEvent.WINDOW_CLOSING)); } }  Posting what was in the question body as CW answer. Wanted to share the results mainly derived from following camickr's link. Basically I need to throw a WindowEvent.WINDOW_CLOSING at the application's event queue. Here's a synopsis of what the solution looks like // closing down the window makes sense as a method so here are // the salient parts of what happens with the JFrame extending class .. public class FooWindow extends JFrame { public FooWindow() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(5 5 400 300); // yeah yeah this is an example ;P setVisible(true); } public void pullThePlug() { WindowEvent wev = new WindowEvent(this WindowEvent.WINDOW_CLOSING); Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(wev); } } // Here's how that would be employed from elsewhere - // someplace the window gets created .. FooWindow fooey = new FooWindow(); ... // and someplace else you can close it thusly fooey.pullThePlug();  Not only to close the JFrame but also to trigger WindowListener events try this: myFrame.dispatchEvent(new WindowEvent(myFrame WindowEvent.WINDOW_CLOSING));  You have to insert the call into the AWT message queue so all the timing happens correctly otherwise it will not dispatch the correct event sequence especially in a multi-threaded program. When this is done you may handle the resulting event sequence exactly as you would if the user has clicked on the [x] button for an OS suppled decorated JFrame. public void closeWindow() { if(awtWindow_ != null) { EventQueue.invokeLater(new Runnable() { public void run() { awtWindow_.dispatchEvent(new WindowEvent(awtWindow_ WindowEvent.WINDOW_CLOSING)); } }); } }  If you want the GUI to behave as if you clicked the ""X"" then you need to dispatch a windowClosing Event to the Window. The ""ExitAction"" from Closing An Application allows you to add this functionality to a menu item or any component that uses Actions easily. In substance: `frame.dispatchEvent(new WindowEvent(frame WindowEvent.WINDOW_CLOSING));` Provided link is so helpful. Thanks... Thanks! This was what I was looking for wouldn't have guessed it on my own.  Based on the answers already provided here this is the way I implemented it: JFrame frame= new JFrame() frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // frame stuffs here ... frame.dispatchEvent(new WindowEvent(frame WindowEvent.WINDOW_CLOSING)); The JFrame gets the event to close and upon closing exits.  *setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);* Not only closes the JFrame but the shutdowns the entire application hence ""EXIT ON CLOSE"" To achieve the same result you have to effectively exit the application for that simply call  System.exit(0); The effect is exactly the same. -1: Not exactly the same: with `JFrame.EXIT_ON_CLOSE` the `WindowListener`s that have been added to the frame are called first. I use them to free up audio system resources (real example in my case). What's with the down vote? : (  setVisible(false); //you can't see me! dispose(); //Destroy the JFrame object Not too tricky. But that doesn’t call event listeners."
904,A,"Can a text widget show overflow with the ""..."" in the middle of the text instead of the end? I have a JComboBox which contains an MRU list combo-box and a for a directory tree panel. Together the two form the left hand panel of my GUI (the MRU is above the tree panel) which is a JSplitPane so the left panel is resizeable. It has a problem in that the directory text is always longer than the required width to see that directory in the tree panel so I have to size my left-hand pane much wider than is needed for the tree in order to stop the combo-box from shown a truncated directory name. The combo-box is not very useful with the end of the filename truncated but making the left-pane wide enough for the filename very often makes it obtrusively too wide for the overall window esp. if not running maximized. And it's usually only the trailing part of the filename which is of interest. If I could only cause JComboBox to somehow show ""start...end"" instead of ""start..."" my problem would be solved. UPDATE: I have a solution which works (see self-answer below) but it's not perfect. If someone knows how I can improve it that would be much appreciated. Working on the idea from Oscar of using a ListCellRenderer I have come up with something that almost works... The component value is rendered correctly but the list's values require an ugly hack. The hack is needed because for the list items the renderer's size (from getSize()) reflects the text width of the longest item not the width of the space available to render the value. I tried use the JComboBox itself but its width includes the little drop-down button so if there's a scrollbar present its width is not accounted for. The hack is to store the renderer's width if it is less than the width of the combo-box and use the stored width if the renderer's width is greater than the width of the combo box. This has a corner case where the renderer's width is between that of the internal JLabel and the width of the combo-box. Since the rendering space will be the width of the combo-box less the width of a scroll bar and insets if anyone has a suggestion as to how I can know the list has a scroll bar and how to get the scrollbar so I can extract the width I am all ears. Maybe I can do list.getParent() and expect it to be a JScrollPane (either the JComboBox or JList doco does state that it uses a scroll pane). Other suggestions to do this better are welcome. Code follows: recentDirs.setRenderer(new ComboTextRenderer(recentDirs)); ... static private class ComboTextRenderer extends DefaultListCellRenderer implements SwingConstants { JComponent parent; int renderWidth; ComboTextRenderer(JComponent par) { super(); parent=par; renderWidth=-1; } public void paint(Graphics gc) { String txt=getText(); int len=txt.length(); int wid=getSize().width; Insets ins=getInsets(); FontMetrics met=gc.getFontMetrics(); if(renderWidth==-1 || wid<parent.getSize().width) { renderWidth=wid; } else { wid=renderWidth; } wid-=(ins.left+ins.right); if(met.stringWidth(txt)>wid) { String rpl=null; for(int xa=0pfx=Math.min(15((len/2)-1))sfx=(pfx+2); pfx>0 && sfx<len; xa++) { rpl=(txt.substring(0pfx)+"" ... ""+txt.substring(sfx)); if(met.stringWidth(rpl)<=wid) { break; } rpl=null; if ((len-sfx)>15) { sfx++; } else if((xa%2)==0 ) { pfx--; } else { sfx++; } } if(rpl!=null) { setText(rpl); } } super.paint(gc); } }  mmHhh perhaps providing a custom renderer?... . I think it's listcell renderer or something like that. For what I understand the default is being wrapped when there is no enough space available by creating/or modifying the cell rendered you can know what's the component available width and modify the text to be rendered at your will. mmmhh I have not been close from that API ( the cell render stuff ) for a couple of years so I could be probably a bit confused. :) Oscar decided to post the solution as a separate self-answer in order to accept it so it shows at the top of the answers for future viewers looking for the solution; have voted up your answer since it was that which put me on the right track. I'll give that a whirl this weekend; assuming it works would you mind if I edit your answer with the renderer code and then accept it? Not at all It would be an honor for me :)... if it works .... :P You might have problems with the JScrollPane if you're using it though :("
905,A,How to include custom panel with NetBeans GUI Builder? I have written a class that extends JPanel. Is it possible to use this in the NetBeans GUI Builder and have it survive all of the automatic code generation? I have used the customised code option in the GUI builder to instantiate the object as the new class but it seems like the declaration can't be changed from JPanel so only methods that I have overridden get called I can't call new ones that are not present in JPanel. Simply drag the class from the projects tree on to the form in the GUI designer. Just like it says in stackoverflow question 691890.  Just provide a public no-arg constructor for your class. You can then add the class to the Palette by right clicking on it and selecting Add to Palette.  You can use the Palette Manager to add your component to the palette then you can use it in the GUI builder as you would any other class. See How can I use a custom subclass of a Swing component? in the NetBeans Wiki.
906,A,JMenuItem.getRootPane() workaround? It seems to be well-known there is a bug when using JMenuItem.getRootPane(). I read the bug description but i cannot figure out a workaround. Do you know work-around code for this in an Action.actionPerformed() method ? Update: I get this now but that don't work with sub-menus.  public void actionPerformed(ActionEvent e) { Component c = (Component) e.getSource(); if (c instanceof JMenuItem) { c = ((JPopupMenu)((JMenuItem)c).getParent()).getInvoker(); } Component z = SwingUtilities.getRootPane(c); } You might find it easier to initialize the Action with whatever it needs to work on and if necessary to create separate action instances for each context (each window or whatever). Certainly the code will be easier to read. :) I had this before but i don't think the code is significant easier to read and i cannot use the default Action contructor w/o arguments. Thank you.  Interesting. You can't just keep using getParent() because each sub menu has its own popup menu. So you have to find all the menus in the chain until you find a JMenu with a JMenuBar as its parent. Then you can use that menu to look up the root pane. Something like this: public JMenu getMenuBarMenu(JMenuItem item) { JMenuItem menu = null; while (menu == null) { JPopupMenu popup = (JPopupMenu)item.getParent(); item = (JMenuItem)popup.getInvoker(); if (item.getParent() instanceof JMenuBar) menu = item; } return (JMenu)menu; }  To get this workaround work with sub-menu you'll need to add a another .getParent() Example: ((JPopupMenu)((JMenuItem)((JMenuItem)c).getParent()).getParent()).getInovker();
907,A,"Problems with swing components and awt events I seem to be having problems with my java gui code and I have no idea why it's not working. What needs to happen is when the mouse is clicked on the panel or frame - for now lets just say panel; as this is just a test eventually this code will be implemented for another gui component but I'd like to get this working first - the popup menu needs to become visible and the focus needs to be set on the text field. Then when the user presses enter or the focus on the text field is lost then the popup menu needs to hide and the text reset to blank or whatever I need it to be. So this is what I wrote: public class Test { private final JFrame frame = new JFrame(); private final JPanel panel = new JPanel(); private final JPopupMenu menu = new JPopupMenu(); private final JTextField field = new JTextField(); private final Obj obj; //... constructor goes here public void test(){ frame.setSize(new Dimension(200200)); field.setColumns(10); field.addActionListener(new ActionListener(){ public void actionPerformed(ActionEvent arg0) { obj.method(field.getText()); menu.setVisible(false); field.setText(""""); } }); field.addFocusListener(new FocusListener() { public void focusLost(FocusEvent e) { menu.setVisible(false); field.setText(""""); } //... focus gained event goes here }); panel.addMouseListener(new MouseListener() { public void mouseClicked(MouseEvent e) { menu.setLocation(e.getX() e.getY()); menu.setVisible(true); field.requestFocusInWindow(); } //... other mouse events go here }); menu.add(field); frame.getContentPane().add(panel); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } } With the code as it is written here the menu automatically hides right after I click. It just flashes on screen briefly and then hides without me doing anything else. If I change the code to exclude any occurrences of menu.setVisible(false) then the text field will never gain focus. Is this due to a misuse of JPopupMenu? Where am I going wrong? Also note that I left out main or Obj. They are in another file and most likely insignificant to this problem. Obj.method() does nothing and main only calls Test's constructor and test() method. what is the purpose of the popup menu? Seems odd to me that you have a textfield in a popup menu. What's the motivation behind this approach? Perhaps there is another way to accomplish this... You should be able to do this by overriding getComponentPopupMenu to return a JPopupMenu. This should handle exactly like you want. It will allow for focus etc. EDIT: This is not strictly necessary although it does allow better for inheritance. Public JPopupMenu getComponentPopupMenu() { return getMenu(); } Oh and if you want it to show up on any mouse click add a mouse listener and call show on the popupmenu: public void processMouseEvent(MouseEvent e) { popup.show(this e.getX() e.getY()); } That will show it on any mouse click. or another option is if you have a mouse listener (calling processMouseEvent) and you only want to call on right-click: public void processMouseEvent(MouseEvent e) { if (e.isPopupTrigger()) { popup.show(this e.getX() e.getY()); } } The mouse listener would look like this: panel.addMouseListener(new MouseAdapter() { mouseClicked(MouseEvent e) { processMouseEvent(e); } } I will update my question but all i did was change setVisible to show and it works except that the focus doesn't automatically shift to the textfield. It no longer hides tho... thanks. Right and if you use the getPopupMenu or do popup.show(...) the focus is then handled by Swing and you get that behavior for free. I added a few pieces to try and make this more clear - the mouse listener calls the mouseEvent methods. Again with the popup.show you are letting the underlying framework handle focus for you. i don't really understand where to put that who's getComponentPopupMenu do i overwrite? Sorry - the getComponentPopupMenu is the ""standard"" or ""preferred"" way to add a popup menu to a component in Swing. you override the component you want to have the popup menu and have it return your menu. Then you have a mouse listener with code similar to process mouse event that calls something like get getComponentPopupMenu().show(this e.getX() e.getY()) k i tried everything you said and it works! for the most part. When I use the e.isPopupTrigger() condition I only displays a small dot on the screen.. not sure why... but it woks without it for the most part. here's the problem and it's very strange. When the popup menu overlaps with the edge of the frame the text field will not automatically gain focus. It will when the menu is entirely within the frame but when it overlaps no automatic focus... strange no? did you remove the other focus requests you had going on? I know that sometimes playing with focus can cause that problem. I just tested it with a little mini application I wrote and it worked just fine with a basic JPanel on a JFrame.  I'd like to point out that I'm discovering through usage of the suggested methods that setComponentPopupMenu() automatically adds a MouseListener to display the given PopupMenu which then consumes the right-click event. so whatever is inside the if(e.isPopupTrigger()) structure is never run on right clicks because the event is consumed. So essentially I get the behavour specified in my question just by adding panel.setComponentPopupMenu(getMenu()) but the fact that it's consuming all my right-click events not just mouseClicked is extremely limiting.  When you show a popup it should have the focus (and it probably grabs it) anything else really doesn't make to much sense. So what's probably happens is this: the Menu shows and grabs the focus. with the next command you travers the focus to the textfield. Since the popup has no focus and a popup without focus is useless it hides again. that doesn't really make sense because it only hides when I have the menu.setVisible(false) in my code whithout that - even when I have field.requestFocusInWindow() - it doesn't hide.  This code should work the way you want it to work (hopefully you follow the use of anonymous classes: public class Test { public static void main(String[] args) { Test test = new Test(); test.test(); } private JFrame frame; private JPanel panel; private JPopupMenu menu; private JTextField field; public Test() { frame = new JFrame(); frame.setSize(new Dimension(200 200)); frame.getContentPane().add(getPanel()); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } private JPanel getPanel() { if (panel == null) { panel = new JPanel(); panel.setComponentPopupMenu(getMenu()); panel.addMouseListener(new MouseAdapter() { @Override public void mouseClicked(MouseEvent e) { menu.show(panel e.getX() e.getY()); } }); } return panel; } private JPopupMenu getMenu() { if (menu == null) { menu = new JPopupMenu() { @Override public void setVisible(boolean visible) { super.setVisible(visible); if (visible) { getField().requestFocus(); } } }; menu.add(getField()); } return menu; } private JTextField getField() { if (field == null) { field = new JTextField(); field.setColumns(10); field.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { getMenu().setVisible(false); } }); } return field; } public void test() { frame.setVisible(true); } } The key things to notice are when we setup the pop-up menu: panel.setComponentPopupMenu(getMenu()); panel.addMouseListener(new MouseAdapter() { @Override public void mouseClicked(MouseEvent event) { getMenu().show(getPanel() event.getX() event.getY()); } }); And how you request focus for the text field when the pop up menu is visible which is accomplished through the text field requesting focus but not focus in window since it doesn't exist in the window only in the menu: menu = new JPopupMenu() { @Override public void setVisible(boolean visible) { super.setVisible(visible); if (visible) { getField().requestFocus(); } } }; And finally how the text field dismisses the pop up menu: field.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { getMenu().setVisible(false); } });"
908,A,"How can I add JMenuBarsJMenus and JMenuItems using IntelliJ's Swing GUI Designer? I can't find the components specified in the title anywhere in IntelliJ's Palette. I notice that the form has a JMenuBar but I don't see it and I don't know how to access it. Is there any way of using these components visually? You don't ""add"" JMenuBars to a form in Swing; you call myFrame.setJMenuBar(theMenuBar). So that's probably why you can't drag-and-drop them. Unfortunately that's all the help I can give you. Maybe you right-click on the form object or something like you do in NetBeans. In NetBeans you can drag & drop them. You can also drag them in Visual Swing 4 Eclipse so not being able to do the same thing in IntelliJ is odd. Well I think it used to be that you couldn't drag and drop them. At least that sticks in my head for some reason. Is there a tree of components like there is in NetBeans? Yes there is.In both IntelliJ and Visual Swing. JFrame is not included in the palette. Right clicking the JFrame doesn't show a JMenuBar option. Can you right-click the JFrame in the tree and select to add a JMenuBar? That's the way I've done it in NetBeans before. Creating menus like this isn't currently available in the IntelliJ designer. Their official solution is to use the JFormDesigner plugin for intelliJ. Or of course to code them by hand. Here is a link to the discussion in their forums :- IntelliJ thread Thanks jT Found an example here: http://www.exampledepot.com/egs/javax.swing/menu.html Sad to see that this is not available in IDE's yet. Just came from using Visual Studio and it's super easy there. Now using IntelliJ and it looks like it wouldn't be too hard to implement.."
909,A,Java Swing Fade Out Background I have a Swing application and I'm trying to fade out the main application and show a window saying an operation is in progress (this is for long running operations that may need to block the UI). Is there an elegant way to do this in Swing (mainly the fading out the background) or maybe some swing library to help with this (maybe from swing labs)? Thanks Jeff You can use the glass pane for this see http://java.sun.com/docs/books/tutorial/uiswing/components/rootpane.html  Kirill Grouchnikov has some excellent articles on transparent and shaped windows (sorry I'm not allowed to post proper hyperlinks yet): www.pushing-pixels.org/?p=260 www.pushing-pixels.org/?p=277 I've successfully used Kirill's Trident animation and timeline library (kenai.com/projects/trident/pages/Home) to fade out a window although you have to do a bit of mucking around to capture all the mouse enter/exit events since components displayed in the window will consume them otherwise.  The latest version supports Transparent Windows. I don't use that version but I would guess you can use a Timer to gradually change the opacity. I believe that's what I'm looking for. Thanks.
910,A,"How do I retrieve the attribute of an element using Swing's HTMLEditorKit.ParserCallback? I am extending HTMLEditorKit.ParserCallback to parse HTML. I am matching on a certain element type in an overridden method like this: @Override public void handleStartTag(Tag t MutableAttributeSet a int pos) { if (Tag.DIV.equals(t)) { String id = (String) a.getAttribute(""id""); String clazz = (String) a.getAttribute(""class""); ... After this line id and clazz are always null yet I know for a fact the element in question contains these attributes. How should I retrieve these attributes? The MutableAttributeSet uses a pre-Java 5 type-safe enum pattern to represent the key set. This means even though the attribute has the name ""class"" just inserting the String will not retrieve the value of the attribute. Instead use: @Override public void handleStartTag(Tag t MutableAttributeSet a int pos) { if (Tag.DIV.equals(t)) { String id = (String) a.getAttribute(HTML.Attribute.ID); String clazz = (String) a.getAttribute(HTML.Attribute.CLASS); ... The HTML.Attribute class contains many more attributes which can be matched on. (This confused me for a while and I didn't come across example of this usage when searching online)."
911,A,How to stop repeated keyPressed() / keyReleased() events in Swing So the problem that I am having appears to be a bug that occurs only on Linux. I'm trying to have my swing app record when a key is pressed down then to detect when that key is released. Now that shouldn't be in issue because KeyListener is supposed to handle this for me. The problem is that when I hold the key down I get lots of repeated keyPressed()/keyReleased() events instead of just the single keypressed(). Does anyone have a solution or workaround for knowing when a key is really released on linux? Thank you. This question is duplicated here. Here's a hack implemented as an AWTEventListener that can be installed at the start of the application.  So the problem that I am having appears to be a bug that occurs only on Linux Yes this is a Linux problem. On Windows when a key is held down you get multiple KeyPressed events but only a single KeyReleased event. This question is asked often and I've never seen a good solution. But I think the basis of a solution is to use a Timer. When the key is pressed you start a Timer. When you get another keyPressed you restart the Timer. So as long as the Timer interval is greater than the repeat rate of the key board the Timer will be continually reset when a key is held down. When keyPresses stop being generated the Timer will fire so you assume the key has been released. This implies you will have a delay in processing the keyReleased.  Here's the bug from Sun (includes sample work-arounds): http://bugs.sun.com/view%5Fbug.do?bug%5Fid=4153069  You can find a pretty good workaround here. Link is dead :-( +1 For useful example and restoring the link. Thanks!
912,A,"How can I manage swing UI default font sizes without quaqua? We are trying to get quaqua out of our application. We had been using a call to quaqua to set the font size to be smaller with a call like this: System.setProperty(""Quaqua.sizeStyle"" ""small""); Is there an easy to do the same sort of thing without using quaqua? Or does anyone know another good look and feel for OS X? I also had an almost similar challenge setting all font to a specific font. The code below will change the font size for all *.font properties in UIManager to a particular size private static void setFontSize() { int fontSize = 12; Hashtable defaults = UIManager.getDefaults(); Enumeration keys = defaults.keys(); while (keys.hasMoreElements()) { Object key = keys.nextElement(); if ((key instanceof String) && (((String) key).endsWith("".font""))) { FontUIResource font = (FontUIResource) UIManager.get(key); defaults.put (key new FontUIResource(font.getFontName() font.getStyle() fontSize)); } } } From a comment on answer http://stackoverflow.com/a/8120380/873282 : It easier to use deriveFont(): tree.setFont(tree.getFont().deriveFont(24f));"
913,A,"Efficient TableModel implementation My TableModel implementations typically sit on an ArrayList to allow for efficient random access performance. However ArrayList's remove(int) implementation looks fairly inefficient as it involves making a System.arrayCopy(...) call to shift all subsequent elements back by 1. What approaches to people take to implementing TableModels? Is there a better data structure I should be considering? ... perhaps a 3rd party library? Some more information: My table data can shrink and grow so any fixed-size buffer implementation isn't going to work. Thanks in advance. When implementing a TableModel you need to consider 2 things 1) creating and manipulating the model 2) rendering your table The first is alot less important performance wise then the second. You typicaly create your model once and do a tiny amount of manipulation the rendering engine behind the table continuosly queries your tablemodel. This means that the retrieval of the information from a model has to be optimal any action taken to speed up model manipulation at cost of model query is therefore to be avoided. In my case i need both heavy manipulation and fast rendering. So the choice i did was a sort of LinkedList implemenation for all manipulation combined with an array both are kept synchronous  all inserting manipulation deletion is being done through the linkedlist structure all rendering with the array structure  Your question reeks of ""Premature Optimization"". On my computer System.arrayCopy() can copy 1 million elements of data in roughly 13ms. So I suggest to measure whether this is really an issue. In the general case ArrayList is faster and has a better memory performance than any other similar data structure. Using a LinkedList would make all operations on the list (including remove()) slower since you will now have to traverse half of all list elements for each operation (on average). So most operations would go from O(1) to O(N/2). Thanks Aaron that's a good point. TBH I was going to try ArrayList before building something bespoke anyway - I just wondered whether something more efficient existed out of the box. arrayCopy is highly optimized; you won't find anything that's faster than that. In your case the copy will take 65ns on average not something you'll ever notice. That is misleading. 13ms for doing it once is ok but you definitely do not want to delete 10000 elements from that list. When you apply filters to that collection that could easily be the case When deleting many elements copying the remaining elements into a new list is more efficient than deleting them individually. That is again faster than LinkedList. The only case where a LinkedList is more efficient if you can do the filtering in a single sweep ... but usually you leave the original model alone so you need the copy step anyway.  If you need to remove elements frequently you could choose a LinkedList implementation. You pay a bit of memory for speedy removals. Unfortunately this will significantly impact my access time as LinkedList is not random access so this isn't really an option (esp. as my table is likely to contain ~10000 rows)."
914,A,How to select text in JtextField while tabbing I have a JDialog with a series of JTextFields on it I would like the text each to be selected when I tab to it. Call selectAll() in the focusGained() of the FocusListener Worked fine for me. I prefer it to the other answer. It works if you don't have a formatter installed. My suggestion would be to move this code into a helper class that you use every time when you create a field (maybe a builder or maybe extend `JTextField`). That is not enough :)  This exact question has been asked and answered check it out here. Short version: Add a focus listener to your text components and select all on focus using SwingUtilities.invokeLater to ensure all pending AWT events have been processed. I did do a search first but didn't find that thanks for pointing it out. No problem glad to help.
915,A,"Stopping default behavior of events in Swing I have the following bit of code in a method called by clicking the send button or pressing enter in the message text field in a piece of code. // In class ChatWindow private void messageTextAreaKeyPressed(java.awt.event.KeyEvent evt) { // Event handler created by Netbeans GUI designer to call this method. if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) { sendMessage(); } } public void sendMessage() { String currentMessage = messageTextArea.getText(); addMessage(""You"" currentMessage); app.sendMessage(currentMessage 1); messageTextArea.setText(""""); } The last bit of code blanks the text area. However after a message is sent by pressing the enter button rather than being empty the text box contains a newline. My guess is that after my event handler runs THEN the newline character is being added. How to I stop the newline being added? The default Action for the Enter key in a JTextArea is to insert a new line as you have seen. So the solution is to replace the default Action with a custom Action. The benefit of this approach is that this Action can also be used by the JButton (or JMenuItem etc.). An Action is basically the same as an ActionListener all you need to do is implement the actionPerformed() method. Read up on Key Bindings to see how this is done. All Swing components use Key Bindings. Seems like many people don't really help a new comer to the forums but thankx to you as you did helped me many a times in understanding my mistakes and pointing me in the right direction :-) Being new to the forum as I understand it the -2 indicates a couple of people believe the answer is wrong or missleading. Did I get the negative because I didn't explain what an Action is or for some other reason? Also should I be receiving automatic emails whenever a new solution/comment is added to the posting?  try adding evt.consume() after your call to sendMessage() private void messageTextAreaKeyPressed(java.awt.event.KeyEvent evt) { if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) { sendMessage(); evt.consume(); } }  as camickr said you should bind action to enter key;  Action sendAction = new AbstractAction(""Send""){ public void actionPerformed(ActionEvent ae){ // do your stuff here } }; textarea.registerKeyboardAction(sendAction KeyStroke.getKeyStroke(KeyEvent.VK_ENTER 0) JComponent.WHEN_FOCUSED); sendButton.setAction(sendAction); if you are more interesed I implemented Autoindent feature for textarea using this technique: here -1 for spreading dated api (registerKeyboardAction is outdated since at least jdk 1.3 wayy before 2009 ;-)"
916,A,"JRadioButton border/padding/insets/margin... whatever you call it In my Java app I am trying to create a very simple form with a label and a set of controls on each row of the form. Imagine something like this crude ASCII diagram:  Result 1: (*) pass ( ) fail Result 2: ( ) pass (*) fail Error Count: [10______] Explanation: [Operator overload___] Annoyingly the JRadioButtons don't line up with the rest of the controls as they have a large amount of padding all around pushing them to the right a couple of pixels and adding a lot of space between lines. I end up with something like this:  Result 1: (*) pass ( ) fail Result 2: ( ) pass (*) fail Error Count: [10______] Explanation: [Operator overload___] How can I get the radio buttons to stop having so much empty space so they can line up nicely with everything else? If it matters this is using the GTK L&F; I haven't tried running the program under Windows. Another solution can be to change margin (radionbuttons's setMargin method). This should do the job. The only downside is that margins/insets will be different for different LAFs.  It looks like there are two culprits: The mini-JPanel containing the two radio buttons has a FlowLayout which defaults to adding 5 pixels of padding around each component. Doing radioButton.setBorder(null) eliminates another pixel's worth of space around the buttons. It also screws up the dotted line drawn around them when they have focus though. flowlayout is generally poor on anything but lists of buttons (of the typical ""Cancel"" ""Accept"" variety) And it's no good on buttons because it gives them variable size - very untidy looking; a grid layout is better for buttons. Flow layout is pretty much useless. You are right -- there is a 1px difference between Accept vs Cancel buttons in a FlowLayout on my platform. On the other hand it centers and spaces things nicely which your typical grid layout does not.  Use a GridBagLayout and make sure to anchor cells (each label and checkbox would have its own cell) towards the left or towards the right as needed. The labels would be right-justified the checkboxes would be left-justified. Since customizing GridBagLayouts by hand is a hassle I recommend using the NetBeans GUI builder and adjusting them using its graphical ""customize"" tool. Bad advice; use a table-based layout for things where GridBag may be the only other alternative. There are a number of good table-based layout available on the net for free. GridBag *is* table-based and the poster is clearly looking for something table-like. Yes others may be easier to use but this one is included with the JDK and allows a great level of control over the results."
917,A,"Is there an easy way to change the behavior of a Java/Swing control when it gets focus? For most GUI's I've used when a control that contains text gets the focus the entire contents of the control are selected. This means if you just start typing you completely replace the former contents. Example: You have spin control that is initialized with the value zero. You tab to it and type ""1"" The value in the control is now 1. With Swing this doesn't happen. The text in the control is not selected and the carat appears at one end or another of the existing text. Continuing the above example: With a Swing JSpinner when you tab to the spin control the carat is at the left. You type ""1"" and the value in the control is now 10. This drives me (and my users) up a wall and I'd like to change it. Even more important I'd like to change it globally so the new behavior applies to JTextField JPasswordField JFormattedTextField JTextArea JComboBox JSpinner and so on. The only way I have found to do this to add a FocusAdapter to each control and override the focusGained() method to Do The Right Thing[tm]. There's gotta be an easier and less fragile way. Please? EDIT: One additional piece of information for this particular case. The form I am working with was generated using Idea's form designer. That means I normally don't actually write the code to create the components. It is possible to tell Idea that you want to create them yourself but that's a hassle I'd like to avoid. Motto: All good programmers are basically lazy. I found an solution that satisfies my needs. It's posted as an answer. I haven't tried this myself (only dabbled in it a while ago) but you can probably get the current focused component by using: KeyboardFocusManager (there is a static method getCurrentKeyboardFocusManager()) an adding a PropertyChangeListener to it. From there you can find out if the component is a JTextComponent and select all text. +1 In my experience this is the best solution if you have many controls and/or use a visual form designer.  After reading the replies so far (Thanks!) I passed the outermost JPanel to the following method: void addTextFocusSelect(JComponent component){ if(component instanceof JTextComponent){ component.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent event) { super.focusGained(event); JTextComponent component = (JTextComponent)event.getComponent(); // a trick I found on JavaRanch.com // Without this some components don't honor selectAll component.setText(component.getText()); component.selectAll(); } }); } else { for(Component child: component.getComponents()){ if(child instanceof JComponent){ addTextFocusSelect((JComponent) child); } } } } It works!  A separate class that attaches a FocusListener to the desired text field can be written. All the focus listener would do is call selectAll() on the text widget when it gains the focus. public class SelectAllListener implements FocusListener { private static INSTANCE = new SelectAllListener(); public void focusLost(FocusEvent e) { } public void focusGained(FocusEvent e) { if (e.getSource() instanceof JTextComponent) { ((JTextComponent)e.getSource()).selectAll(); } }; public static void addSelectAllListener(JTextComponent tc) { tc.addFocusListener(INSTANCE); } public static void removeSelectAllListener(JTextComponent tc) { tc.removeFocusListener(INSTANCE); } } By accepting a JTextComponent as an argument this behavior can be added to JTextArea JPasswordField and all of the other text editing components directly. This also allows the class to add select all to editable combo boxes and JSpinners where your control over the text editor component may be more limited. Convenience methods can be added: public static void addSelectAllListener(JSpinner spin) { if (spin.getEditor() instanceof JTextComponent) { addSelectAllListener((JTextComponent)spin.getEditor()); } } public static void addSelectAllListener(JComboBox combo) { JComponent editor = combo.getEditor().getEditorComponent(); if (editor instanceof JTextComponent) { addSelectAllListener((JTextComponent)editor); } } Also the remove listener methods are likely unneeded since the listener contains no exterior references to any other instances but they can be added to make code reviews go smoother.  The only way I know is to create a FocusListener and attach it to your component. If you want it this FocusListener to be global to all components in your application you might consider using Aspect Oriented Programming (AOP). With AOP is possible to code it once and apply your focus listener to all components instantiated in your app without having to copy-and-paste the component.addFocusListener(listener) code throughout your application.. Your aspect would have to intercept the creation of a JComponent (or the sub-classes you want to add this behaviour to) and add the focus listener to the newly created instance. The AOP approach is better than copy-and-pasting the FocusListener to your entire code because you keep it all in a single piece of code and don't create a maintenance nightmare once you decide to change your global behavior like removing the listener for JSpinners. There are many AOP frameworks out there to choose from. I like JBossAOP since it's 100% pure Java but you might like to take a look at AspectJ.  When I've needed this in the past I've created subclasses of the components I wanted to add ""auto-clearing"" functionality too. eg: public class AutoClearingTextField extends JTextField { final FocusListener AUTO_CLEARING_LISTENER = new FocusListener(){ @Override public void focusLost(FocusEvent e) { //onFocusLost(e); } @Override public void focusGained(FocusEvent e) { selectAll(); } }; public AutoClearingTextField(String string) { super(string); addListener(); } private void addListener() { addFocusListener(AUTO_CLEARING_LISTENER); } } The biggest problem is that I haven't found a ""good"" way to get all the standard constructors without writing overrides. Adding them and forcing a call to addListener is the most general approach I've found. Another option is to watch for ContainerEvents on a top-level container with a ContainerListeer to detect the presence of new widgets and add a corresponding focus listener based on the widgets that have been added. (eg: if the container event is caused by adding a TextField then add a focus listener that knows how to select all the text in a TextField and so on.) If a Container is added then you need to recursively add the ContainerListener to that new sub-container as well. Either way you won't need to muck about with focus listeners in your actual UI code -- it will all be taken care of at a higher level."
918,A,"Problem with Showing Records in Jtable I am using DefaultTable Model for showing my records in Jtable.But there is a problem like in the picture.When i load jtable its showing like LJava.lang.Object type. NOT in string..How can i solve this. Here is my codes ; EntityManagerFactory emf = Persistence.createEntityManagerFactory(""SwingDenemePU""); EntityManager em = emf.createEntityManager(); Query sorgu = em.createQuery(""select p from Personel p where p.personelAdSoyad like :ad""); Object[] kolonAdi = {""AD SOYAD""""ÜNVAN ADI""}; sorgu.setParameter(""ad"" jTextField1.getText()+""%""); personelList = sorgu.getResultList(); Object[][] data = new Object[personelList.size()][kolonAdi.length]; for(int m=0; m<personelList.size(); m++) for(int n=0; n<kolonAdi.length; n++) for(Personel o : personelList) { Personel personel = (Personel)o; data[m][n] = new Object[][]{ { personel.getPersonelAdSoyad() personel.getUnvanID().getUnvanAdi() } }; } DefaultTableModel def = new DefaultTableModel(); def.setDataVector(data kolonAdi); jTable1.setModel(def); You are getting this behavior because you are placing a two dimensional Object array into your data location at (m n) data[m][n] = new Object[][]{ { personel.getPersonelAdSoyad() personel.getUnvanID().getUnvanAdi() } }; If you want to have a two dimensional array at this location to get the behavior you want you will need to define a custom renderer. First I would recommend that you encapsulate this raw 2d array into a class you have designed to contain it and then define a renderer for that class. import java.awt.Component; import javax.swing.JLabel; import javax.swing.JTable; import javax.swing.table.DefaultTableCellRenderer; import javax.swing.table.TableCellRenderer; public class CustomTableCellRenderer implements TableCellRenderer { private static final TableCellRenderer defaultRenderer = new DefaultTableCellRenderer(); public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { Component renderedObject = null; if(value instanceof CustomClass){ renderedObject = new JLabel(); // put your customized rendering code here. } else { renderedObject = defaultRenderer.getTableCellRendererComponent(table value isSelected hasFocus row column); } return renderedObject; } } After defining your renderer you can set it on the table with: jTable1.setDefaultRenderer(CustomClass.class customRenderer);  I'm not 100% sure on what your data layout is from the code posted. However I can tell you where your problem is. data[m][n] = new Object[][]{{personel.getPersonelAdSoyad()personel.getUnvanID().getUnvanAdi()}} This is creating a 2-dimensional array of Object[][] objects. Or rather a m**x**n**x**1**x**2 array. If you're looking for an mx2 array you'd do (notthat this is what you're going for just by way of example [plus personel isn't in scope etc. etc.]): data[m] = new Object[]{personel.getPersonelAdSoyad()personel.getUnvanID().getUnvanAdi()}; The [[Ljava.lang.Object... text is the result of toString() on an Object[]. Which is what tells me your matrix dimensions are wrong. thanx ur solution is same as Fredrik's.  The reason it outputs [[Ljava/lang/Object@.... is simply because the values you assign to the fields seems to be of type ""Object[][]"" Are you sure this is what you want? data[m][n] = new Object[][] {}? I have not put too much effort in it but my gut feeling tells me what you really want to do is something like: for(int m=0; m<personelList.size(); m++) { Personel personel = personelList.get(m); data[m] = new Object[]{ personel.getPersonelAdSoyad() personel.getUnvanID().getUnvanAdi() }; } (I have of course not compiled or tested the above code) thanx man. u r solved my problem  The DefaultTableModel will display all values as Strings. What you are seeing is the result of the default Object.toString() implementation for the values being shown in your table. The simplest solution would be to override toString() to return a sensible value for the object your are showing in the table. However you may be better implementing your own table model that is better suited to the data you are showing. See the Swing tutorial How To Use Tables for more information on table models.  Following on from Mark's answer: Another option is to assign a javax.swing.table.TableCellRenderer with a call to either javax.swing.table.JTable.setDefaultRenderer(Class TableCellRenderer) or javax.swing.table.TableColumn.setRenderer(TableCellRenderer)  I would recommend not using DefaultTableModel but instead sub-class AbstractTableModel. That way you can still follow the approach suggested by Mark of overriding the object's toString() method or you can override getColumnClass(int column) to return the class of the object being returned and then provide a specific renderer for the class by calling JTable's setDefaultRenderer(Class<?> columnClass TableCellRenderer renderer). The main reason I never use DefaultTableModel is because it means your data is effectively stored in two places. In contrast if you sub-class AbstractTableModel you can implement it as a view onto your underlying data structue (e.g. a view onto List<MyRecord>). That's agreed - DefaultTableModel is evil and you should specialize AbstractTableModel.  Well it looks like you are getting the data from a ResultSet. You have a couple of different options depending on you actual requirements. If you don't really need to create a ""Personel"" object to hold the data then you can use a generic model which you can find in the Table From Database entry. If you do need the ""Personel"" object then you do need to create a custom model. However this can also be done in a generic way by using the ""Bean Table Model"". You can find this model by searching the blog from the above link."
919,A,"Can Swing tell me if there is an active tooltip? Is there an elegantish way in Swing to find out if there are any tooltips currently being displayed in my frame? I'm using custom tooltips so it would be very easy to set a flag in my createToolTip() method but I can't see a way to find out when the tooltip is gone. ToolTipManager has a nice flag for this tipShowing but of course it's private and they don't seem to offer a way to get to it. hideWindow() doesn't call out to the tooltip component (that I can tell) so I don't see a way there. Anyone have any good ideas? Update: I went with reflection. You can see the code here: private boolean isToolTipVisible() { // Going to do some nasty reflection to get at this private field. Don't try this at home! ToolTipManager ttManager = ToolTipManager.sharedInstance(); try { Field f = ttManager.getClass().getDeclaredField(""tipShowing""); f.setAccessible(true); boolean tipShowing = f.getBoolean(ttManager); return tipShowing; } catch (Exception e) { // We'll keep silent about this for now but obviously we don't want to hit this // e.printStackTrace(); return false; } } That's too bad. After an internal discussion ""ugly reflection"" was what we came up with as well but I was hoping someone out there had a better idea.  Since you already have your own createToolTip() maybe you can try something like this :) public JToolTip createToolTip() { JToolTip tip = super.createToolTip(); tip.addAncestorListener( new AncestorListener() { public void ancestorAdded( AncestorEvent event ) { System.out.println( ""I'm Visible!..."" ); } public void ancestorRemoved( AncestorEvent event ) { System.out.println( ""...now I'm not."" ); } public void ancestorMoved( AncestorEvent event ) { // ignore } } ); return tip; }  It appears that the isEnabled() property of the hideTipAction is directly tied to the tipShowing boolean. You could try this: public boolean isTooltipShowing(JComponent component) { AbstractAction hideTipAction = (AbstractAction) component.getActionMap().get(""hideTip""); return hideTipAction.isEnabled(); } You probably want to do some sanity checking for nulls etc. But this should get you pretty close. EDIT to your responses: Short of some ugly reflection code I don't think you have much choice. You cannot subclass ToolTipManager because of the package private constructor and the showTipWindow() and hideTipWindow() are also package private so the Adapter pattern is out as well.  It looks like that is going to require looping over all of the components to see if they have a tooltip. I'm looking for a global value. It may be that a loop is doable but it seems inefficient."
920,A,Swing & NetBeans 6.7.2 design view I could not open the swing java file in design view because *.java and *.form are in different folder. How can I link those files in Netbeans ? Ref : What is form file ? http://wiki.netbeans.org/FaqFormFormFile As of 6.7 there is no way to store the .form and .java files separately.
921,A,"Display CMD output in my GUI (java) How might I get the output from a CMD process to display in my GUI? This is the code I'm using to run the process: try { String line; Process p = Runtime.getRuntime().exec(""cmd /c \""e:\\folder\\someCommands.cmd\""""); BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream())); while ((line = input.readLine()) != null) { System.out.println(line); } input.close(); } catch (Exception err) { err.printStackTrace(); } I've tried doing this: jLabel1.setText(line); ...but the GUI is completely locked up while the process is running so nothing updates until the very end which isn't very useful. Other than that the CMD works fine. I just want to display the output in real-time. Suggest removing real-time tag from this question. See http://en.wikipedia.org/wiki/Real-time for a definition of real-time computing Is there a reason why you want to use JLabel rather and JTextArea? This answer from [""Software Monkey""](http://stackoverflow.com/users/8946/software-monkey) should do: In addition to what others have said about multithreading this - you'll also want to read the child process error stream. I believe that (in some instances) if you don't drain the error stream for the process it could cause it to hang.  You'll need to start a separate thread to run the process. The code you're using to run it can mostly just be inserted into the thread's (or Runnable's) run() method as is but to set the text in the JLabel you should use something like this: ... while ((line = input.readLine()) != null) { SwingUtilities.invokeLater(new SetTextRunnable(jLabel1 line)); } ... class SetTextRunnable implements Runnable { private String line; private JLabel jLabel1 public SetTextRunnable(JLabel jLabel1 String line) { this.jLabel1 = jLabel1; this.line = line; } public void run() { jLabel1.setText(line); } } EDIT: just noticed something: apparently the class SwingWorker was designed for this sort of thing so that's another option for you (if it exists in your version of Java). EDIT to the EDIT: so silly me I didn't notice SwingWorker was already mentioned in another answer. or just put the code to read the process' stream into a separate thread. For example you might want another thread that reads the error stream.  Did you repaint() after setting the text of the label? Anyway you should generally be hesitant to execute a long operation on the GUI event thread. Look into using a SwingWorker instead."
922,A,"Applying the MVP pattern to JDialogs I'm writing a Swing application and further to my previous question have settled on using the Model-View-Presenter pattern to separate the user interface from the business logic. When my application starts up it executes the following code: Model model = new BasicModel(); Presenter presenter = new Presenter(model); View view = new SwingView(presenter); presenter.setView(view); presenter.init(); which creates the user interface. Events are generated by the View and delegated to the Presenter. The Presenter then manipulates the Model and updates the View accordingly. In order to handle some events I need to obtain further information from the user. In the case of these events I believe it is appropriate for the Swing view to spawn a new JDialog window. One line of thinking makes me feel this might be appropriate code in the orignal Presenter: public void handlePreferences() { Preferences prefs = view.getPreferences(); model.setPreferences(prefs); } That is the contents of each JDialog should represent a distinct object that should be retrieved from the View and updated in the Model. However this leaves the question: do I create a new Model to represent the Preferences object and a new Presenter for event handling in that JDialog? It seems to me that creating a new Presenter and Model internal to the original View forces me to do a lot of work that would be harder to port if I wanted to change the UI to use JSF for example. Please feel free to add comments for clarification. No you don't need another ""model"" just for the Preferences Just pass the presenter and the mode as arguments in the constructor of the JDialog. It is easier to program a big Swing application when there is 1 model 1 controller (which itself may contain smaller ones) multiple views (but on the SAME data/model classes) Note that 1 model != 1 class. The ""model"" of a Swing application can actually be a ""tree"" of separate ""model"" classes that have a common ""root"". So in your case you need ""Global"" model ->(contains) ""Preferences"" model.  My advice would be to think about what these 'preferences' fundamentally are. Are they part of the underlying business logic? If so then they should be part of the model structre. Are they specifying the user's preferred way of interacting with the business data? Then they should be part of the view. That may seem theoretical but in my experience it saves a lot of headaches in the end. If you can't work that out then where the preferences are saved gives you another clue. if they need to be saved with the data being manipulated then they are probably part of the business logic. If they are saved in the user's personal preference file then they are not and should be considered view.  Although it is not uncommon to have ""nested"" design patterns it is not necessary in your case. Drawing on the other answers: Model  - Contains all the real data variables objects  - knows how to set its stored data values to the new values  - responds to orders (method calls)  - has method setPreferences(value1value2value3...); View  - is the IO for the application just output and input  - it can only work on its self on its state  - it maintains local variables and objects eg. it has JButtons JMenus int counters ...  - it is knows how to inform the Presenter of State Change  - its state is visible to the Presenter or revealed by method call  - responds to orders (method calls)  - knows how to get preferences from the user  - has method askForPrefs();  - has method getPrefState(); Presenter  - Responds to state changes  - does all the deciding it tells the other objects what to do (not how to do it)  - knows when preferences are needed  - knows where to get new preferences and where to put them  - has method newPrefsAvailable(); ... to obtain further information from the user. In the case of these events I believe it is appropriate for the Swing view to spawn a new JDialog window. Presenter - checks the Model determines new preferences are required Presenter - this.myView.askForPrefs(); //tells view to ask user for pref values View.askForPrefs - pops up a JDialog box retVals stored in the view as a state change View - this.myPresenter.newPrefsAvailable(); Presenter - responds with this.myModel.setPreferences (this.myView.getPrefState()); Model.setPreferences - changes the stored values to View.getPrefState() Presenter - checks the Model - determines preferences are good Presenter - continues on The JDialog is treated as just an extension of the Viewit is a member of the View just like a JButton would be. The model has the authoritative actual preference values and the view has local variables that represent the state of the JDialog. ""The JDialog is treated as just an extension of the Viewit is a member of the View just like a JButton would be"" - that says it all. Thank you. Cheers I can get rather verbose :)"
923,A,"JAVA Swing GUI Components howto RTL view? How can i make my Java Swing GUI Components [Right To Left] for Arabic language from NetBeans Desktop Application? Do yo mean how to display text in a JLabel for instance? The call of  Component.setComponentOrientation( ComponentOrientation.RIGHT_TO_LEFT ) should do the trick. But be sure to use the SwingConstants LEADING and TRAILING instead of LEFT and RIGHT in your layouts. The same goes for GridBagConstraints.LINE_START or LINE_END instead of WEST or EAST and probably some similar cases which I forgot to mention. That's a great answer the information about using the more meaningful alignment constants may not be a given to others having trouble with this.  Don't you just have to use: Component.setComponentOrientation( ComponentOrientation.RIGHT_TO_LEFT ) I believe that the swing components all already have support for RTL don't they? Not sure how/where you'd do that in regards to netbeans though. There's also Component.applyComponentOrientation(..) to change a whole component tree.  You could use alignment but that would not handle the complexities if you have English letters or numbers embedded within your text. It might be preferable to use some sort of styled text widget or even an embedded HTML/rich text viewer. I don't think that standard JLabels can handle the complexities otherwise. JLabel display unicode letters. I think they relay on the system fonts and if the system fonts can display the letter then everything it's ok. For instance in my comp I can write ""Extraño""  you could use it if you have components inside panels inside contentPane  Component[] component = contentPane.getComponents(); for(int i=0; i<component.length; i++){ component[i].applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT); Component[] cp = ((Container) component[i]).getComponents(); for(int j=0; j<cp.length; j++){ try{ ((Component) ((JComboBox) cp[j]).getRenderer()).applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT); }catch(Exception e){ continue; } } }"
924,A,Syntax colouring using Swing Is it possible to have something like a JTextArea which will color some keywords based on some mappings I have ? I am not sure because I believe JTextArea only directly supports a single font in a single color. According to SyntaxHighlighter Class article JTextPane is the way to go.  Here are a few other choices that you could try http://ostermiller.org/syntax/editor.html http://java.sun.com/products/jfc/tsc/articles/text/editor_kit/index.html http://fifesoft.com/rsyntaxtextarea/ http://code.google.com/p/jsyntaxpane/
925,A,JList select items with all mouse buttons how can i make a swing JList to have its items selected with any mousebutton not just the left one? thanks! oh just found the function  int s = list.locationToIndex(e.getPoint()); list.setSelectedIndex(s); when you do this in a mouselistener it does the job.
926,A,"Java Swing: Ctrl+F1 does not work globally but each other key combination I have a swing gui with a tabbed pane in the north. Several key events are added to its input map: InputMap paneInputMap = pane.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT); paneInputMap.put( KeyStroke.getKeyStroke( KeyEvent.VK_E KeyEvent.CTRL_MASK ) ""finish""); paneInputMap.put( KeyStroke.getKeyStroke( KeyEvent.VK_F1 KeyEvent.CTRL_MASK ) ""toggletoolbar""); If the tabbed pane or another button in a toolbar has the focus Ctrl+F1 has no function. If another component is focused (e.g. JTree) Ctrl+F1 executes the action. The problem is that it workes everywhere if I change the Keycode to e.g. VK_F2. The key F1 is'nt used anywhere else in the program. Any idea? Thanks André Edit: A full text search in the java source code gave the answer: The ToolTipManager registeres the Key Ctrl+F1 to display the tooltip text if the key combination is pressed. So if a button with a tooltip is focused Ctrl+F1 is handled by the ToolTipManager. Otherwise my action is called. May be the OS retargets the F1 key? Install a key listener and see what events are handled. BTW: It would help if you could edit your question and insert some testable code. Thanks for your answer. After a long time of searching the java-code if found the answer (see edit). The used OS only handles key events with ALT pressed ;)  So that this gets an answer here's the solution copied from your edit in the question. ;-) The ToolTipManager registeres the Key Ctrl+F1 to display the tooltip text if the key combination is pressed. So if a button with a tooltip is focused Ctrl+F1 is handled by the ToolTipManager. Otherwise my action is called. LOL answer is accepted ;)"
927,A,"How to mix java swing and java fx in swing application? i am developing a java swing application but i want to also use java fx with swing is there any resource for that told how to do that? See here. The short story is that embedding JavaFX in Swing is now possible and supported via JFXPanel but the other direction is not supported. FYI: Both link are now broken. Short and sweet. FYI: It is completely unsupported uses private APIs and almost certainly will break in the next version.  The ""JavaFX in Swing"" link given above only works with JavaFX 1.1. Here is how to do it in JavaFX 1.2 JavaFX in Swing - 1.2. However as Rastislav mentioned above this is also using private APIs and will most likely break in the next major version. JFXtras has added some classes to support this and hopefully this will insulate the developer from the underlying release changes. I think so. For now the best way how to do this is just wait."
928,A,"JDK-7 SwingWorker deadlocks? I have a small image processing application which does multiple things at once using SwingWorker. However if I run the following code (oversimplified excerpt) it just hangs on JDK 7 b70 (windows) but works in 6u16. It starts a new worker within another worker and waits for its result (the real app runs multiple sub-workers and waits for all this way). Did I use some wrong patterns here (as mostly there is 3-5 workers in the swingworker-pool which has limit of 10 I think)? import javax.swing.SwingUtilities; import javax.swing.SwingWorker; public class Swing { static SwingWorker<String Void> getWorker2() { return new SwingWorker<String Void>() { @Override protected String doInBackground() throws Exception { return ""Hello World""; } }; } static void runWorker() { SwingWorker<String Void> worker = new SwingWorker<String Void>() { @Override protected String doInBackground() throws Exception { SwingWorker<String Void> sw2 = getWorker2(); sw2.execute(); return sw2.get(); } }; worker.execute(); try { System.out.println(worker.get()); } catch (Exception e) { e.printStackTrace(); } } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { runWorker(); } }); } } Have you tried to get a stack dump? It seems it hangs on sw2.get() and there is only one swingworker- named thread in jdk7. On jdk6 I see 3-5 at once. Before JDK update 18 you could run: public static void main(String[] args) { new SwingWorker<Void Void>() { @Override protected Void doInBackground() throws Exception { System.out.println(""ok""); return null; } }.execute(); } This code doesn't work anymore simply because SwingWorkers must be executed on EDT. Therefore you can't nest SwingWorkers (sw2 will never run in you sample code in newer JDKs). I guess replacing nested swingWorkers with executorService java.util.concurrent.Future calls is a good workaround. SwingWorkers don't necessarily have to be executed on the EDT. In fact the SwingWorker Javadoc explicitly mentions the ""current thread"" which the SwingWorker is spawned from not saying anything to the note that it must be the Event Dispatch Thread.  As nobody has fired off the link yet it seems this is actually a known bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6880336 Surprisingly there are less than 100 votes for what should be a showstopper bug for most non-trivial applications. Yes and the sample program looks awfully lot like mine doesn't it?  Your SwingWorkers are executed in your SwingWorker Thread. So when you see It seems it hangs on sw2.get() and there is only one swingworker- named thread in jdk7. On jdk6 I see 3-5 at once. – kd304 This is because the SwingWorker class is not a thread but a task to be run on a thread and the default configuration for the ExecutorService for SwingWorker in Java 6 is configured different from the one in Java 7. IE your SwingWorkerExecutorService (which is defined inside the SwingWorker class) has a different value for the max number of Threads to allocate to the tasks. //From Java 6 SwingWorker private static final int MAX_WORKER_THREADS = 10; public final void execute() { getWorkersExecutorService().execute(this); } private static synchronized ExecutorService getWorkersExecutorService() { ... private static synchronized ExecutorService getWorkersExecutorService() { new ThreadPoolExecutor(0 MAX_WORKER_THREADS 1L TimeUnit.SECONDS new LinkedBlockingQueue<Runnable>() threadFactory) } You only have the one thread running the SwingWorker tasks and that first task is waiting for the completion of the second task which can't be run because the Thread the second task would be run on is waiting for the second task to complete before it will return. Making on swingworker thread dependent on the execution of another is a sure path to deadlock. You may want to look at using an ExecutorService to schedule events to be run on the SwingWorker Thread and don't make one scheduled event dependent on another scheduled event's completion. Java 7 SwingWorker Fair explanation but why has the behavior changed? I would expect to see 3 swingworker- threads started in JDK 7 as well? Then the original multi-threaded swignworker execution was the bug?  Looking at the source code for SwingWorker it looks like an ExecutorService is being used as a pool of worker threads. It's possible that the type of ExecutorService used has changed between Java 6 and Java 7. It looks like your code will deadlock if the ExecutorService only manages exactly 1 thread at a time (as you seem to have noticed). This is because your 'sw2.get()' call will block the current thread which is the same thread the sw2 will try to use. sw2 can never execute because the first worker is blocking. I think the best solution is to change your logic so that you don't call chains of Swing workers like this. Hmm it doesn't sound a compatible change - if I have multiple swingworkers executing they will always run in sequence on JDK 7 (regardless of a multicore cpu)? I guess I have to change the outer swingworker into a normal Thread for example."
929,A,"Positioning in java swing I have some troubles with positioning my label/password field. With this code they both get positioned in the center next to each other while I actually want them in the middle of my panel on top of each other. Does anyone know how I should do that? import java.awt.BorderLayout; import java.awt.FlowLayout; import javax.swing.ImageIcon; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JPasswordField; public class Paneel_Pincode extends JPanel { Paneel_Pincode() { setLayout(new FlowLayout()); JPasswordField pincode = new JPasswordField(15); pincode.setLocation(500 500); JLabel pinInvoer = new JLabel(); ImageIcon pin1 = new ImageIcon(""images/voerPincodeIn.jpg""); pinInvoer.setIcon(pin1); pinInvoer.setLocation(500700); add(pincode); add(pinInvoer); } public static void main(String[] args) { JFrame f = new JFrame(); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.setSize(10001000); f.setLocationRelativeTo(null); f.add(new Paneel_Pincode()); f.setVisible(true); } } To get the hang of layouts I'd recommend reading my article on them (http://java.sun.com/developer/onlineTraining/GUI/AWTLayoutMgr/). It's old but the concepts and how FlowLayout works are detailed. What do you mean by ""on top of each other""? If you mean like  Password <field> EDIT: I REMEMBERED AN EASIER WAY TO DO THIS (completely in the JDK/JRE)... (This is similar to what I'm doing with the BoxBeans below but you don't need the BoxBeans. I created BoxBeans to be able to use BoxLayout in a UI builder a long time ago...) JLabel label = new JLabel(""Password"") { @Override public Dimension getMaximumSize() { return super.getPreferredSize(); } }; JPasswordField field = new JPasswordField() { @Override public Dimension getMaximumSize() { return super.getPreferredSize(); } }; field.setColumns(10); Box verticalBox = Box.createVerticalBox(); verticalBox.add(Box.createVerticalGlue()); verticalBox.add(label); verticalBox.add(field); verticalBox.add(Box.createVerticalGlue()); // Box horizontalBox = Box.createHorizontalBox(); horizontalBox.add(Box.createHorizontalGlue()); horizontalBox.add(verticalBox); horizontalBox.add(Box.createHorizontalGlue()); add(horizontalBox); Previous answer for reference... I DO NOT RECOMMEND THE FOLLOWING BUT IT MAY HELP OTHER READERS WITH IDEAS You can do something like setLayout(FlowLayout()); JPanel group = new JPanel(new BorderLayout()); group.add(new JLabel(""Password"") BorderLayout.NORTH); group.add(passwordField BorderLayout.SOUTH); add(group); This will create a little panel in the top-center of the overall UI that contains the Password and field. Note that the nested BorderLayout ensures that the label and field each get their preferred size. You'll need to call setColumns on the field to the number of chars you'd like displayed. If you want to center the label/field vertically as well you could do the following setLayout(new GridBagLayout()); // add(new JLabel(""Password"") new GridBagConstraints(001111 GridBagConstraints.SOUTHGridBagConstraints.NONE new Insets(3333) 00)); field.setColumns(10); add(field new GridBagConstraints(011111 GridBagConstraints.NORTHGridBagConstraints.NONE new Insets(3333) 00)); I hate using GridBagLayout in general so I'll add a version using BoxLayout (but it's a bit trickier due to the preferred size settings)  JFrame f = new JFrame(); f.setLayout(new BorderLayout()); // JPanel stuffH = new JPanel(); f.add(stuffH BorderLayout.CENTER); stuffH.setLayout(new BoxLayout(stuffH BoxLayout.X_AXIS)); // JPanel stuffV = new JPanel(); stuffV.setLayout(new BoxLayout(stuffV BoxLayout.Y_AXIS)); // JLabel label = new JLabel(""Password""); BoxAdapter labelAdapter = new BoxAdapter(); labelAdapter.add(label); JPasswordField field = new JPasswordField(); field.setColumns(10); BoxAdapter fieldAdapter = new BoxAdapter(); fieldAdapter.add(field); // stuffV.add(new VerticalGlue()); // for vertical spacing stuffV.add(labelAdapter); stuffV.add(fieldAdapter); stuffV.add(new VerticalGlue()); // for vertical spacing // stuffH.add(new HorizontalGlue()); // for horizontal spacing stuffH.add(stuffV); stuffH.add(new HorizontalGlue()); // for horizontal spacing // f.setVisible(true); f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); A few notes on this: I'm using my BoxBeans helper classes - see http://javadude.com/tools/boxbeans. This page is based on VisualAge for Java but the jar at the bottom of the page can be used outside VAJ. I just tried it in eclipse for example. AFAICS you cannot set a jframe's layout directly to BoxLayout so I added an extra panel in between. There's a check in BoxLayout that has trouble with the automatic indirection of the content pane. I nested the BoxLayouts so there's horizontal centering (the stuffH panel) containing a vertical centering (the stuffV panel). They are centered by surrounding them with ""Glue"" components which are simply components that allow themselves to expand. I had to put the label and field in a BoxAdapter which limits their maximum size to their preferred size. If you don't want to use BoxAdapter you can acheive the same effect by using the following for the field and label: JLabel label = new JLabel(""Password"") { @Override public Dimension getMaximumSize() { return super.getPreferredSize(); } }; JPasswordField field = new JPasswordField() { @Override public Dimension getMaximumSize() { return super.getPreferredSize(); } }; Hope this proves helpful to you and anyone else! -- Scott I came here to recommend layouts but I see you've beaten me to it. +1 Yes that is what I ment with on top of eachother. And I indeed want to center them vertically as well :) Tried it with both setLocation and setBounds but both didn't work Yes this is working great :D Thanks a lot for your help and time. I've never worked with gridbag before so i'll study on it now so I can use it with my other panels as well. Again thanks a lot :) make sure to read the article I wrote -- it'll really help make layout management click for you. glad I could help! don't make me shudder... make sure you learn how to nest layouts and use combinations of simpler layouts rather than grid bag. for this example you can also use nested box layouts. I should mention that the Big Bad Evil BarfBagLayout always makes me shudder...  I would recommend the JGoodies FormLayout. Once you learn it it's quite powerful and easy to do by hand coding."
930,A,Auto complete textbox in Java Swing Is there any good ready made Java Swing component that can be used to implement auto complete textbox? A little dated but with a Java Web Start File attached which actually works: http://www.jroller.com/santhosh/date/20050620.  Here's an example on autocompletion without a drop down selection. It will only autocomplete for you when a unique match is found. The completion is auto inserted into the text field and selected. Kind of similar as to how Safari's address field works. The solution could be expanded to provide a list of options however that was not part of my requirements when doing this.  There is a claim that JIDE-OSS has the feature that you are requesting. That is what this forum claims however I have not tried it. Yes it does. http://i49.tinypic.com/72swtu.png That's pretty cool!
931,A,"Managing Swing Actions with a Registry Typically when I'm creating a Swing (or any UI) application I have various Actions that appear on menu items and buttons. I usually create an action registry and store the actions in there and then when certain things occur I disable/enable actions in the registry based on the state of the application. I wouldn't call myself an avid Swing developer although I know my way around it well enough but is this a pretty typical pattern for managing Actions? Or is there a more standard way of doing it? thanks Jeff I usually take the following approach: Register the Action with the containing Component's action map. Define a public String constant allowing the application bootstrap code to ""pull out"" the Action from the Component in required (e.g. to add it to a JToolBar JMenuBar etc.). Define a private updateActionStates() method within the Component which is called when the user performs some action (e.g. selects N rows from a JTable). This method enables / disables all bespoke actions based on the current state of the Component. Example: public class MyPanel extends JPanel { public static final String MY_ACTION_NAME = ""MyAction""; private final JTable myTable; public MyPanel() { // Create action and define behaviour. this.myAction = new AbstractAction(MY_ACTION_NAME ...); // Register with component's action map. getActionMap().put(myAction.getValue(Action.NAME) myAction); // Optionally register keyboard shortcuts using component's input map. getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(...); // Create JTable and add a call to updateActionStates when the selection changes. myTable = new JTable(...); myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() { public void valueChanged(ListSelectionEvent evt) { updateActionStates(); } }); } private void updateActionStates() { // Action will only be enabled if one table row is selected. getActionMap.get(MY_ACTION_NAME).setEnabled(myTable.getSelectedRowCount == 1); } } // Application start-up code: MyPanel pnl = new MyPanel(); JToolBar toolBar = new JToolBar(); // Pull out action from action map and add to toolbar. toolBar.add(pnl.getActionMap().get(MyPanel.MY_ACTION_NAME)); Incidentally I typically prefer Actions to ActionListeners for exposing Actions that form part of my Component's API. For Actions that merely exist within the Component (e.g. a dialog's ""Clear"" button) I typically use ActionListener. However I disagree with akf about ActionListener being the most standard approach - This may be true of smaller GUIs but not more complex Swing applications.  Jeff your approach seems like a good approach. I do the same thing. I call the registry ActionHandler and it looks like this: import com.google.common.collect.ClassToInstanceMap; import com.google.common.collect.ImmutableClassToInstanceMap; import javax.swing.*; import javax.swing.text.DefaultEditorKit; public class ActionHandler { private static final ClassToInstanceMap<Action> actionMap = new ImmutableClassToInstanceMap.Builder<Action>(). put(DefaultEditorKit.CutAction.class new DefaultEditorKit.CutAction()). put(DefaultEditorKit.CopyAction.class new DefaultEditorKit.CopyAction()). put(DefaultEditorKit.PasteAction.class new DefaultEditorKit.PasteAction()). put(RefreshAction.class new RefreshAction()). put(MinimizeAction.class new MinimizeAction()). put(ZoomAction.class new ZoomAction()). build(); public static Action getActionFor(Class<? extends Action> actionClasss) { return actionMap.getInstance(actionClasss); } } Now to disable say ZoomAction I use  ActionHandler.getActionFor(ZoomAction.class).setEnabled(false);  I'm using annotations on actions then finding them reflectively. A bit tidier and new actions get managed automatically.  From my experience the 'most' standard way of handling actions performed on a Swing GUI is to create ActionListeners and have them handle ActionEvents directly for the components with which they are registered. It is a simple design and it follows convention with other sorts of GUI events in the Swing framework (MouseListener/MouseEvent TableModelListener/TableModelEvent etc). The Action framework you describe is a powerful tool to allow for sharing of actions between many input methods (ie having a toolbar button and menu item perform the same action and therefore sharing the same Object for handling the events triggered by both etc.). This abstraction is pretty cool but Sun cautions that it is a bit heavier-weighted than the simple Observers. From the Action JavaDoc: Note that Action implementations tend to be more expensive in terms of storage than a typical ActionListener which does not offer the benefits of centralized control of functionality and broadcast of property changes. For this reason you should take care to only use Actions where their benefits are desired and use simple ActionListeners elsewhere. That all makes sense that's generally the approach I take. I guess I'm just trying to find the best away to manage the Actions when I do need to use them..."
932,A,"Java GUI creation framework Do you know any decent framework for creating Swing screens? I need to extend my application for implementors that will have to add their own screens. Possible options: Netbeans platform with Matisse editor Bean builder (very old and unsupported) Eclipse VEP (beta) Any other option? Update: I am not looking for design time tool to build my screens. I am looking for an addon or a platform to allow implementors (users of my application) to build custom screens for different clients. The screens have to be saved in some format (say xml) and will be displayed by another (view-only) application. Because of that solutions like Matisse4MyEclipse don't fit because I can't bundle their proprietary plugin with my application. Update 2: I am asking for a framework not a design-time tool. I want some kind of component to embed in my application so that users will be able to create screens by themselves. How would you wire those screens with the application? I assume those custom-made screens need some functionality as well? If you say that Bean builder is very old and unsupported forget this option ;) +1 @ammoQ - building application is not just UI... @ammoQ @David Rabinowitz: actually you can write an application with just ui look at what bean builder does... That's the whole idea of beans you write some functionality enclosed in java class and the user can visually build an application by integrating those classes as building blocks. instantiations' WindowBuilder - a commercial product Now that is was bought and open-sourced by Google I can accept the answer because I can now integrate the GUI designer into my own application. @Vitaly if you have had time to look at it I would like to hear what your experiences were. Does it allow integration of the screen editor into another application?  What do you mean by ""screens""? JFrames? JPanels? If you use the NetBeans JPanel Form it's pretty easy to add/modify components. With one JPanel per ""screen"" you can put a bunch of screens together into a wizard using tabs etc NetBeans GUI forms can be copied edited combined pretty freely. Yeah I mean putting JComponents on JPanel. I already know about netbeans but I prefer eclipse plug-in or stand alone application framework for screens editing. So what you want is just a good stand-alone GUI builder for Swing? You don't have very many options for GUI builders and Netbeans is the only good one I've seen that is free. You might be able to get some package to work with the Matisse .form files (they're just XML after all) but NetBeans really IS the easiest way. I promise.  I have used the JGoodies Form API in the past and I liked the simplicity of it. (I dislike GUI builders...) I guess it could be made configurable using Spring.  I haven't seen Matisse4MyEclipse mentioned yet. That said it's part of MyEclipse which isn't free so it seems likely to me that there are potential licensing issues here. As for having users implement screens for different clients it sounds like your users are going to be tech savvy. Perhaps you could use Groovy's SwingBuilder to define these views in an editable form. I think this is perhaps more of what you're looking for than a design-time tool. See my update above.  Oracle's Application Development Framework (ADF) running alongside JDeveloper allows you to develop Swing applications with a nearly WYSIWYG editor. ADF provides rich drag-and-drop components (widgets) that get tied to model objects which in turn are packaged by modules. The modules contain the database connection information control connection pooling and so forth. ADF also allows you to reuse the modules and models in web-based applications.  IntelliJ IDEA also has an GUI Designer."
933,A,"Why do I keep getting a NullPointerException in the Java BasicTableUI$Handler.setValueIsAdjusting? I keep getting this NPE in my application and I can't seem to get rid of it because it is not showing up in any of my source code. As you can see from the stacktrace it is not happening in my code but in the Swing plaf. Has any of you had this problem and maybe figured out what is happening here?  11:28:23273 [AWT-EventQueue-0] ERROR [is.althingi.styran.utlit.styran.StyranImpl] - uncaughtException java.lang.NullPointerException at javax.swing.plaf.basic.BasicTableUI$Handler.setValueIsAdjusting(Unknown Source) at javax.swing.plaf.basic.BasicTableUI$Handler.mouseReleased(Unknown Source) at java.awt.AWTEventMulticaster.mouseReleased(Unknown Source) at java.awt.Component.processMouseEvent(Unknown Source) at javax.swing.JComponent.processMouseEvent(Unknown Source) at java.awt.Component.processEvent(Unknown Source) at java.awt.Container.processEvent(Unknown Source) at java.awt.Component.dispatchEventImpl(Unknown Source) at java.awt.Container.dispatchEventImpl(Unknown Source) at java.awt.Component.dispatchEvent(Unknown Source) at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source) at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source) at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source) at java.awt.Container.dispatchEventImpl(Unknown Source) at java.awt.Window.dispatchEventImpl(Unknown Source) at java.awt.Component.dispatchEvent(Unknown Source) at java.awt.EventQueue.dispatchEvent(Unknown Source) at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source) at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source) at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source) at java.awt.EventDispatchThread.pumpEvents(Unknown Source) at java.awt.EventDispatchThread.pumpEvents(Unknown Source) at java.awt.EventDispatchThread.run(Unknown Source) I managed to get around the problem! The thing is that I add a ListSelectionListener to my JTable; in the valueChanged method of my listener I then call scrollRectToVisible and then updateUI which then results in my exception. What I did was to add invokeLater around the updateUI call and no more exception! Like this:  SwingUtilities.invokeLater(new Runnable() { public void run() { updateUI(); } }); Now that I have the ""answer"" to my question (though I'm not sure I still understand why the invokeLater helped?) I think my question wasn't good enough. I didn't provide enough information about my problem for anyone to be able to answer the question. Should I have researched the problem more before I asked? I don't know. Maybe it is enough that I provide the solution that helped me! I think it should be a bug from LookAndFeel When you call invokeLate() you're moving the updateUI() function call to the end of the event queue. My guess is that the updateUI() call was trying to access an object that wasn't created yet but this object is available soon after.  I never had this particular problem but when I get these kind of ""hidden"" errors I always end up looking the original source code and try to figure out the problem ... From this source you can see the function that originates the exception: private void setValueIsAdjusting(boolean flag) { table.getSelectionModel().setValueIsAdjusting(flag); table.getColumnModel().getSelectionModel(). setValueIsAdjusting(flag); } Can you confirm if your table selection model ; column model ; column selection model aren't null? How could I? There is an NPE in there isn't there? But of course the thing is that I can't seem to figure out why one of those is null because no matter where I put my debugging they are never null!!!!"
934,A,How Do You Get the Height of the Titlebar Using Java (Swing)? I am getting a MouseEvent in Java. the getPoint() method is adding the height of the title bar into the y portion of the coordinate. I was wondering how I can find the height of the title bar of the current window in order to offset the y value by the correct amount. Do you think you could post some (preferably simplified) code that exhibits this behavior? I will get on it I figured out my problem..I added the motion listener to the frame and not the panel. Oops. You can find the frame insets by calling the getInsets method (defined in Container). Frame insets are discussed at the top of the Frame API docs. See this question. Of course you could always add your mouse listener to the content pane. JFrame has some unexpected behaviour on some methods such as add and setLayout.
935,A,"Can I set the DPI resolution of my Java Swing application without changing the systems' DPI setting? I have a Java application using the Substance LookAndFeel with Windows as the the target platform and I want to increase the DPI setting of my application without changing the system setting. I want to do this because I don't want to force the user to restart Windows and because many Windows applications seem to have problems with very high DPI settings (> 120) PS: I'm aware that the Substance LaF allows to scale the font size at runtime but that way only the height of my controls are scaled not the width. I want my GUI fully scaled as it would happen if I set the system's DPI setting. +1 just was going to ask the same thing. :) Don't know if that is possible. The look&feel would have to support it and as far as I know the Windows Look&Feel does not. Here's a hack which you may consider: Iterate through all the fonts defined in your look&feel and redefine them to be slighly bigger. Here is a code snippet that does this: for (Iterator i = UIManager.getLookAndFeelDefaults().keySet().iterator(); i.hasNext();) { String key = (String) i.next(); if(key.endsWith("".font"")) { Font font = UIManager.getFont(key); Font biggerFont = font.deriveFont(2.0f*font.getSize2D()); // change ui default to bigger font UIManager.put(keybiggerFont); } } I suppose you could take this one step further and redefine scale borders proportionally as well but that gets very complicated very quickly If your `UIManager` has keys which aren't `Strings` then this will throws a `ClassCastException`. Best answer so far :)  So the actual answer seems to be: no you can't. That really is a bummer because it's a pain to test."
936,A,"List in JScrollPane painting outside the viewport I have a list each item of which has several things in it including a JProgressBar which can be updating a lot. Each time one of the items updates its JProgressBar the ListDataListener on the list tries to scroll it the visible range using /* * This makes the updating content item automatically scroll * into view if it is off the viewport. */ public void contentsChanged(final ListDataEvent evt) { if (!EventQueue.isDispatchThread()) { /** * Make sure the scrolling happens in the graphics ""dispatch"" thread. */ EventQueue.invokeLater(new Runnable() { public void run() { contentsChanged(evt); } }); } if (playbackInProgress) { int index = evt.getIndex0(); currentContentList.ensureIndexIsVisible(index); } } Note that I'm trying to make sure the scrolling is done in the dispatch thread since I thought maybe the problem was it being scrolled while it was repainting. And yet I still have a problem where if things are really active some of the list items paint outside of the viewport overwriting what's outside the JScrollPane. Forcing an exposure event will repaint those things but it's annoying. Is there anything else I need to look out for to stop these things painting outside of their clipping area? Have you tried explicitly enabling double-buffering on the JList and/or the components that it is drawing over? (with:setDoubleBuffered(boolean aFlag)) Another thought is that you might need to exit the function immediately after delegating to the EDT. The way your code is written it looks like the update will happen in both threads if ContentChanged is invoked from a non-EDT thread. Logging in the first if (or set a breakpoint in the if -- but not in the runnable -- should help determine if that is your problem. eg: public void contentsChanged(final ListDataEvent evt) { if (!EventQueue.isDispatchThread()) { log.debug(""Delegating contentsChanged(...) to EDT""); EventQueue.invokeLater(new Runnable() { public void run() { contentsChanged(evt); } }); // don't run ensureIndexIsVisible twice: return; } if (playbackInProgress) { int index = evt.getIndex0(); currentContentList.ensureIndexIsVisible(index); } }"
937,A,Is Google Web Toolkit similar to AWT and Swing I've looked breifly into GWT and like the idea that I can develop in Java and have the application compile down to HTML and JavaScript. Is the concept behind GWT and AWT and Swing the same or different? disclamer: While I do work at IT Mill this is just for information to the original poster. This isn't marketing spam. If you like the idea of being able to write Java and get a webpage out of that you might be interested in IT Mill Toolkit. It's a toolkit for making RIA software on top of a J2EE stack and it uses GWT heavily. One of the basic ideas are that the code generated by GWT is just as prone to client-side forging attacks as any other JS/Ajax-traffic. IT Mill Toolkit makes sure that the data is validated server-side too. The toolkit is also designed in such a way that if you are familiar to Swing you should have no problems picking it up.  GWT is very much similar to Swing in its usage of Widgets Panels and the EventListeners it provides. A different way to look at GWT is to think of Javascript and HTML as Assembly language and GWT as a sort of High level language which generates Javascript and HTML. With GWT its easy to develop desktop-like apps for the web using the same tools you would use for building a desktop app  AWT and Swing are for programming stand-alone applications (and to a lesser extent applets). GWT is supposed to make programming web applications similar to stand-alone apps. I wouldn't program a non-web app using GWT.  It is programmed very similarly(patterned after Swing) and the code is 100% java (compiles with a standard Java compiler without errors) but the way it works is very different. Instead of compiling into a Java app it compiles into Javascript that is sent to your browser. This ability to program good active Javascript without actually coding Javascript and HTML is pretty nice. Also since it programs much like swing you can do stuff like adding listeners that effect other controls pretty easily. Actually GTW supports only a strict subset of Java's standard libraries. There are some libraries that aren't supported simply because they can't be represented in JavaScript. For example GWT's Random is a util class with static methods while Java 1.5 uses it as an object etc...  GWT is conceptually similar to Swing but is more a replacement for JSPs than anything else. I agree. Though you still use Java on the server side.  Define concept. AWT/Swing are used for desktop Java apps or applets. They both require JVM to run. GWT is used to translate Java code to Javascript. This only runs on Javascript engines i.e. browser. The API design as stated above is similar to Swing. You get the same Panels Buttons and other Component classes as in Swing.  GWT is a javascript toolkit that allows you to write the javascript in Java. The only real similarities to Swing and AWT are that they are toolkits for creating user interfaces and they use Java. The end product is different and the real purpose for using them is different. GWT gives you the ability to generate a ajax user interface for a web browser while the other 2 give you a console (or applet) java app. In my mind the real reason for using GWT is to get a quick ajax interface up for prototyping purposes. But I dont think its really production ready- ie I dont thing Google uses it in their own webapps. A better choice for more robust ajax webapps is http://developer.yahoo.com/yui/ or http://script.aculo.us/.
938,A,"Netbeans JTree Linestyle I'm having difficulties removing the ""lineStyle"" lines in JTrees using Netbeans. In a standalone program I'm able to do this:  JTree myJTree = new JTree(); myJTree.putClientProperty(""JTree.lineStyle"" ""None""); JScrollPanel myScrollPanel = new JScrollPanel(); myScrollPanel.setViewportView(myJTree); But when I try adding that code into my Netbeans created GUI I get what appears to be a ""Windows Default"" linestyle. Any ideas on what I'm doing wrong? What's your UI set to and where do you set it? Netbeans tends to automatically assume System UI I think. But I'm not sure if it actually adds code to enforce that. You might try setting a different UI in your main. Calling the following removes the lines from JTrees globally in Swing UIManager.put(""Tree.paintLines"" Boolean.FALSE); (Not sure how this interacts with NetBeans though sorry.)  NetBeans sets it own system-wide UI. You can fix this by overriding setUI or updateUI methods on your JTree where in addition to calling super implementation method you would do your client property setting."
939,A,"Sorting JTable programmatically Is there a way to sort a JTable programmatically? I have my JTable's sort working (with setRowSorter) so that when the user presses any of the columns the table gets sorted. I know SWingX JXTable would probably work but I'd rather not go through the hassle because everything else is pretty much working now and I don't know how well NetBeans' visual editor handles JXTable etc. EDIT: The selected answer is referring to my (now removed) statement that the answer from Sun's pages didn't work for me. That was just an environment issue caused by my ignorance. can you post some code that you have tried? Check out: http://www.exampledepot.com/egs/javax.swing.table/Sorter.html I was able to pretty easily add JXTable to NetBeans 6.7 so don't rule that out as an option. Maybe make a small test project to play with it before trying in your main project. Works fine for me: import java.awt.*; import java.awt.event.*; import java.util.*; import javax.swing.*; import javax.swing.table.*; public class TableBasic extends JFrame { public TableBasic() { String[] columnNames = {""Date"" ""String"" ""Long"" ""Boolean""}; Object[][] data = { {new Date() ""A"" new Long(1) Boolean.TRUE } {new Date() ""B"" new Long(2) Boolean.FALSE} {new Date() ""C"" new Long(9) Boolean.TRUE } {new Date() ""D"" new Long(4) Boolean.FALSE} }; final JTable table = new JTable(data columnNames) { // Returning the Class of each column will allow different // renderers and editors to be used based on Class public Class getColumnClass(int column) { for (int row = 0; row < getRowCount(); row++) { Object o = getValueAt(row column); if (o != null) return o.getClass(); } return Object.class; } }; table.setPreferredScrollableViewportSize(table.getPreferredSize()); table.setAutoCreateRowSorter(true); DefaultRowSorter sorter = ((DefaultRowSorter)table.getRowSorter()); ArrayList list = new ArrayList(); list.add( new RowSorter.SortKey(2 SortOrder.ASCENDING) ); sorter.setSortKeys(list); sorter.sort(); JScrollPane scrollPane = new JScrollPane( table ); getContentPane().add( scrollPane ); } public static void main(String[] args) { TableBasic frame = new TableBasic(); frame.setDefaultCloseOperation( EXIT_ON_CLOSE ); frame.pack(); frame.setLocationRelativeTo( null ); frame.setVisible(true); } } Next time post your SSCCE when something doesn't work. You are right I had issues with my environment and was not using the latest classes from Java-side (I'm doing half Clojure/half Java-project).  easiest way I chose is storing the table's data in a Database and use a select statement with ORDER BY Keyword hope that helps."
940,A,How do I dynamically add Panels to other panels at runtime in Java? I'm trying to get into java again (it's been a few years). I never really did any GUI coding in java. I've been using Netbeans to get started with this. When using winforms in C# at work I use a usercontrols to build parts of my UI and add them to forms dynamically. Ive been trying to use JPanels like usercontrols in C#. I created a JPanel form called BlurbEditor. This has a few simple controls on it. I am trying to add it to another panel at runtime on a button event. Here is the code that I thought would work: mainPanel.add(new BlurbEditor()); mainPanel.revalidate(); //I've also tried all possible combinations of these too //mainPanel.repaint(); //mainPanel.validate(); This unfortunately is not working. What am I doing wrong? Swing/AWT components generally have to have a layout before you add things to them - otherwise the UI won't know where to place the subcomponents. BFreeman has suggested BorderLayout which is one of the easiest ones to use and allows you to 'glue' things to the top bottom left right or center of the parent. There are others such as FlowLayout which is like a textarea - it adds components left-to-right at the top of the parent and wraps onto a new row when it gets to the end. The GridBagLayout which has always been notorious for being impossible to figure out but does give you nearly all the control you would need. A bit like those HTML tables we used to see with bizarre combinations of rowspan colspan width and height attributes - which never seemed to look quite how you wanted them.  I figured it out. The comments under the accepted answer here explain it: http://stackoverflow.com/questions/121715/dynamically-added-jtable-not-displaying Basically I just added the following before the mainPanel.add() mainPanel.setLayout(new java.awt.BorderLayout());  As with all swing code don't forget to call any gui update within event dispatch thread. See this for why you must do updates like this // Do long running calculations and other stuff outside the event dispatch thread while (! finished ) calculate(); SwingUtilities.invokeLater(new Runnable(){ public void run() { // update gui here } }  mainPanel.add(new BlurbEditor()); mainPanel.validate(); mainPanel.repaint(); I think he said he tried this.  Try mainPanel.invalidate() and then if necessary mainPanel.validate(). It also might be worth checking that you're doing this all in the event dispatch thread otherwise your results will be spotty and (generally) non-deterministic. Adding the invalidate method call did not help. I am calling this from the mouseclick event generated by netbeans.  I was dealing with similar issue I wanted to change the panel contained in a panel on runtime After some testing retesting and a lot of failing my pseudo-algorithm is this: parentPanel : contains the panel we want to remove childPanel : panel we want to switch parentPanelLayout : the layout of parentPanel editParentLayout() : builds parentPanel with different childPanel and NEW parentPanelLayout every time parentPanel.remove(childPanel); editParentLayout(); parentPanel.revalidate(); parentPanel.repaint();
941,A,The Need To Restore Graphics Original State When Overwritten paint or paintComponent I realize most of the Java code to overwritten paint or paintComponent most of them doesn't restore the old state of graphics object after they had change the state of graphics object. For example setStroke setRenderingHint... I was wondering whether it is a good practice that we restore back the old state of graphics object before returning from the method. For example public void paintComponent(Graphics g) { super.paintComponet(g); Stroke oldStroke = g.getStroke(); g.setStroke(newStroke); // Do drawing operation. g.setStroke(oldStroke); } Is this a good practice? Or it is over done? You should not alter the Graphics object passed in at all rather perform all your graphics operations on a copy of it which you then dispose. There'll be no need to reset the state at all then. public void paintComponent(Graphics g1) { super.paintComponent(g1); final Graphics2D g = (Graphics2D)g1.create(); try { // ...Whole lotta drawing code... } finally { g.dispose(); } } I'm going to support this answer with the JavaDoc for JComponent that agrees: http://docs.oracle.com/javase/6/docs/api/javax/swing/JComponent.html#paintComponent%28java.awt.Graphics%29  Yes this is a very good practice to follow. You don't pay much in performance (relative to the actual painting operation) and you save yourself a mess of grief if you're making unusual changes to the graphics context. Don't overdo it though -- you probably don't need to worry about color settings for example. The alternative is to assume nothing about the graphics context and set all the necessary properties before every painting in case they're set to something wonky. Try to avoid freely creating and disposing Graphics objects for every operation. Specific properties you should always restore if modified: (because they can do Bad Things and have Unexpected Consequences): Transform - because modifications to this will stack on top of each other and get very very hard to reset. Beware: this is modified by the translate shear scale rotate and transform methods of Graphics2D. Modifying transforms should be used with CAUTION. Stroke -- because (at least in my configuration) leaving this default runs much faster than any setting even if equivalent to default. Don't ask -- it's a result of the Java2D graphics pipelines accelerating the default case using graphics hardware. Clip: will result in weird bugs where only part of the screen draws. Composite: most operations probably don't expect this to be something weird. Properties to not worry about: RenderingHints. These are things you can easy set and restore and generally you want to leave them set a certain way (antialiasing on etc) for the whole time the app is running. Changing RenderingHints will rarely break rendering of components although it might make it uglier. Background color and paint color. Most things will modify these before drawing anyway. Font: likewise. You should find that creating a Graphics object is extremely cheap. Er... yeah corrected. I still think it's not a good practice though because you never know what else is using a Graphics object and you lose your settings for RenderingHints etc.
942,A,Swing Toolbar placement I want to display a JToolbar within right side of a split pane which is also going to contain a JTabbedPane how can we do that ? wrap TabbedPane and toolbar in some component? ps: user should not be able to minimize etc in right side pane... Put a JPanel on the right side of the split pane. Give the JPanel a BorderLayout. Add the JToolbar to the NORTH of the JPanel and the JTabbedPane to the CENTER.
943,A,is there a way to embed flv files in java forms? I want to play some flash videos in my desktop application are there any tools (libraryjar file class... etc) to embed flvs in any java forms? Embedding Flash into a Java application - http://stackoverflow.com/questions/221218/embedding-flash-flex-component-into-java-app http://fobs.sourceforge.net/ is a good solution. If you want to embed please refer : http://stackoverflow.com/questions/221218/embedding-flash-flex-component-into-java-app  You may use FOBS along with JMF frameowrk for media. You can download a working sample from here. thanks it was helpful but i ve another question is there a way to embed any flash objects in jforms? (not only flvs like swf)
944,A,"How can a JComponent notified about the closed event of it's parent J(Internal)Frame? I want to write a component that monitors other activities but it's listeners are to be removed when the component's window is closed. I don't want to write this removal code many times but want the component to handle it itself. (How) can i do it? Thanks! Can you explain what you mean by ""write this removal code many times"" and ""component to handle itself""? I would write something like that class ListenToWindow extends WindowAdapter { MyInternalFrame frame; public void windowClosed(event) { this.frame.removeAllTheRequiredListeners(); } } (...) JFrame window; MyInternalFrame frame; (...) window.addWindowLister(new ListenToWindow(frame)); (...)  The JFrame class (which is the window) has a processWindowEvent callback that takes a single parameter called Windowevent Register this callback and if the parameter is of WINDOW_CLOSED you can call the removal code inside. In the end the removal code is only written once (as you want it). See the API for more details. Update: See also this How can i put this listener when i'm writing a component? I dont't have reference to the JFrame only to the parent component. You pass the JFrame reference of your application in the construction of your custom component and store it in a private variable inside the class of your component. okay maybe that's the way it should be done. i just hoped we have a way obtaining the jframe or something as your comment precedes Pierre's code you got the point"
945,A,"Why is itemStateChanged on JComboBox is called twice when changed? I'm using a JComboBox with an ItemListener on it. When the value is changed the itemStateChanged event is called twice. The first call the ItemEvent is showing the original item selected. On the second time it is showing the item that has been just selected by the user. Here's some tester code: public Tester(){ JComboBox box = new JComboBox(); box.addItem(""One""); box.addItem(""Two""); box.addItem(""Three""); box.addItem(""Four""); box.addItemListener(new ItemListener(){ public void itemStateChanged(ItemEvent e){ System.out.println(e.getItem()); } }); JFrame frame = new JFrame(); frame.getContentPane().add(box); frame.pack(); frame.setVisible(true); } So when I changed the Combo box once from ""One"" to ""Three"" the console shows: One Three Is there a way I can tell using the ItemEvent maybe that it's the second item (ie. the user selected item)? And if someone can explain why it gets called twice that would be nice too! Thanks private void dropDown_nameItemStateChanged(java.awt.event.ItemEvent evt) { if(evt.getStateChange() == ItemEvent.SELECTED) { String item = (String) evt.getItem(); System.out.println(item); } } Good Luck!  Have a look at this source: import javax.swing.*; import java.awt.*; import java.awt.event.*; public class Tester { public Tester(){ JComboBox box = new JComboBox(); box.addItem(""One""); box.addItem(""Two""); box.addItem(""Three""); box.addItem(""Four""); box.addItemListener(new ItemListener(){ public void itemStateChanged(ItemEvent e){ System.out.println(e.getItem() + "" "" + e.getStateChange() ); } }); JFrame frame = new JFrame(); frame.getContentPane().add(box); frame.pack(); frame.setVisible(true); } public static void main(String [] args) { Tester tester = new Tester(); } } Use the getStateChange to determine if an item is selected or deselected It's generally good practice to ignore the event and look to see what the actual state is.  Yo can do it like this: import java.awt.event.*; jComboBox1.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { System.out.println(""Hello""); } }); accepted of course! :D  JComboBox.setFocusable(false) will do the trick. this is not answering the question. IT still getting the same result: two event occured.  The code is: public class Tester { private JComboBox box; public Tester() { box = new JComboBox(); box.addItem(""One""); box.addItem(""Two""); box.addItem(""Three""); box.addItem(""Four""); box.addItemListener(new ItemListener() { public void itemStateChanged(ItemEvent e) { if (e.getStateChange() == 1) { JOptionPane.showMessageDialog(box e.getItem()); System.out.println(e.getItem()); } } }); JFrame frame = new JFrame(); frame.getContentPane().add(box); frame.pack(); frame.setVisible(true); } }  I wanted to get the index string after selected and set in combobox  comboBox1.addItemListener(new ItemListener() { @Override public void itemStateChanged(ItemEvent e) { if(e.getStateChange() == ItemEvent.SELECTED) { comboBox1ItemStateChanged(); } } });  According to this thread It gets tripped when you leave one result and then called again when set to another result Don't listen for itemStateChanged. Use an ActionListener instead which is good for handling events of the combo. You need a ItemStateListener if you need to separately handle deselection / selection depending on the item involved. Changing the state of the item within itemStateChanged causes itemStateChanged to be fired... this called ""reentrance"". Your answer really helped! Thank you so much! you may also take note that if : We do removeAll() method from a ComboBox the result is that it will also calling twice...."
946,A,"Cannot move JMenu to JMenuBar I'm trying to move the menu structure from a JMenu into a JMenuBar. The above code shows different menus depending on TEST. For TEST==1 i expect aa bb in the menu bar but only aa is shown ? The code shows the problem it is not my real code .... public class Test { public static void main(String[] args) { int TEST = 1; // or 2 JMenu menu = new JMenu(""a""); JMenu menu2 = new JMenu(""aa""); menu.add(menu2); menu2 = new JMenu(""bb""); menu.add(menu2); JMenuBar mbar = new JMenuBar(); if (TEST == 1) { for (int i = 0; i < menu.getItemCount(); i++) { mbar.add(menu.getItem(i)); } } if (TEST == 2) { mbar = new JMenuBar(); mbar.add(menu); } JFrame frame = new JFrame(); frame.setJMenuBar(mbar); frame.setSize(400 200); frame.setVisible(true); } } Hehe tricky one. By executing mbar.add(menu.getItem(i)); the menu that you just added to mbar is removed from menu. On the next iteration menu.getItemCount() returns 1 and you for loop is over. This one will work: if (TEST == 1) { int m = menu.getItemCount(); for (int i = 0; i < m; i++) { mbar.add(menu.getItem(0)); } } Dammned ! I think i had this years before and cannot remember. Thank you !"
947,A,"How to wrap lines in a jtable cell? I'm trying to implement a custom TableRenderer as described in this tutorial. I'd like to have the renderer line-wrap each text that is to long for the given cell. The idea is to use a TextArea as renderer as it supports line wrapping. However the following code does not behave as expected: public class LineWrapCellRenderer extends JTextArea implements TableCellRenderer { @Override public Component getTableCellRendererComponent( JTable table Object value boolean isSelected boolean hasFocus int row int column) { this.setText((String)value); this.setWrapStyleWord(true); this.setLineWrap(true); return this; } } I set this renderer with table.setDefaultRenderer(String.class new LineWrapCellRenderer()); But the cell entries stay unwrapped. If I add this.setBackground(Color.YELLOW) to the getTableCellRendererComponent() method all cells are yellow as expected but not wrapped. Any ideas? UPDATE: As Michael Borgwardt stated in the comments the problem is not the line wrap but the row height: JTables rows are fixed size so if a cell is getting higher (cause the text is now multi-lined) we have to increase the row height. But how much? I will check if this is worth another SO-question. If not I will add this solution here. Update2: The following code will determine the row height (if placed in getTableCellRendererComponent()): int fontHeight = this.getFontMetrics(this.getFont()).getHeight(); int textLength = this.getText().length(); int lines = textLength / this.getColumns() +1;//+1 cause we need at least 1 row. int height = fontHeight * lines; table.setRowHeight(row height); don't change the table state in the renderer - as in **never-ever** Dear Cleopatra!!! Please give us a working solution instead of just saying you can do this better. Hi I had your same problem but the solution I implemented is inspired by the sample available from the Java Tutorial for drawing multiline text and draws the text on the cell using the text APIs. http://java.sun.com/docs/books/tutorial/2d/text/drawmulstring.html import java.awt.Component; import java.awt.Font; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.font.FontRenderContext; import java.awt.font.LineBreakMeasurer; import java.awt.font.TextLayout; import java.text.AttributedCharacterIterator; import java.text.AttributedString; import java.text.BreakIterator; import javax.swing.JTable; import javax.swing.table.DefaultTableCellRenderer; import javax.swing.table.TableCellRenderer; public class MultilineTableCell implements TableCellRenderer { class CellArea extends DefaultTableCellRenderer { /** * */ private static final long serialVersionUID = 1L; private String text; protected int rowIndex; protected int columnIndex; protected JTable table; protected Font font; private int paragraphStartparagraphEnd; private LineBreakMeasurer lineMeasurer; public CellArea(String s JTable tab int row int columnboolean isSelected) { text = s; rowIndex = row; columnIndex = column; table = tab; font = table.getFont(); if (isSelected) { setForeground(table.getSelectionForeground()); setBackground(table.getSelectionBackground()); } } public void paintComponent(Graphics gr) { super.paintComponent(gr); if ( text != null && !text.isEmpty() ) { Graphics2D g = (Graphics2D) gr; if (lineMeasurer == null) { AttributedCharacterIterator paragraph = new AttributedString(text).getIterator(); paragraphStart = paragraph.getBeginIndex(); paragraphEnd = paragraph.getEndIndex(); FontRenderContext frc = g.getFontRenderContext(); lineMeasurer = new LineBreakMeasurer(paragraphBreakIterator.getWordInstance() frc); } float breakWidth = (float)table.getColumnModel().getColumn(columnIndex).getWidth(); float drawPosY = 0; // Set position to the index of the first character in the paragraph. lineMeasurer.setPosition(paragraphStart); // Get lines until the entire paragraph has been displayed. while (lineMeasurer.getPosition() < paragraphEnd) { // Retrieve next layout. A cleverer program would also cache // these layouts until the component is re-sized. TextLayout layout = lineMeasurer.nextLayout(breakWidth); // Compute pen x position. If the paragraph is right-to-left we // will align the TextLayouts to the right edge of the panel. // Note: this won't occur for the English text in this sample. // Note: drawPosX is always where the LEFT of the text is placed. float drawPosX = layout.isLeftToRight() ? 0 : breakWidth - layout.getAdvance(); // Move y-coordinate by the ascent of the layout. drawPosY += layout.getAscent(); // Draw the TextLayout at (drawPosX drawPosY). layout.draw(g drawPosX drawPosY); // Move y-coordinate in preparation for next layout. drawPosY += layout.getDescent() + layout.getLeading(); } table.setRowHeight(rowIndex(int) drawPosY); } } } public Component getTableCellRendererComponent( JTable table Object valueboolean isSelected boolean hasFocus int rowint column ) { CellArea area = new CellArea(value.toString()tablerowcolumnisSelected); return area; } } It resizes row heigth too but it does it well only when this renderer is used for a single column. And this is the way I used to invoke it for render my table. final int wordWrapColumnIndex = ...; myTable = new JTable() { public TableCellRenderer getCellRenderer(int row int column) { if (column == wordWrapColumnIndex ) { return wordWrapRenderer; } else { return super.getCellRenderer(row column); } } }; I'd like to use this code in my program. If I may under which license should I include this code? The most part of this code comes from a public domain tutorial that shouldn't prevent any licensing policy I suppose. -1 for changing table state in ... the paint method?? That's even worse than doing it in the getXXRendererComp which already is an absolute no-go ... and other no-goes: creating a new component on each call not implementing sizing hints .. should have more than a single vote occasionally ;-) It does the job! I know that changing cell height while painting will require a new call for paint() to the whole row but I don't know a method called before paint() where it's possible to do it. If you do why don't you provide one more answer or suggest a different solution? doing something completely wrong is ... wrong even if it appears to do the job ;-) There are enough examples for using a textArea as tableCellRenderer no need to replicate them. Just using a JTextArea will not be enough to increase/decrease row height and I haven't found samples with my research. The way that the java tutorial suggests to evaluate the exact row height for the text needs a Graphics object witch is available in the paint method as I know. Show us what you can do to do this better please!!!! Well as @kleopatra said is true (although she doesn't show how to solve it). I think you can fix the problem using InvokeLater of SwingUtilities the only thing you need to do is change `table.setRowHeight(rowIndex(int) drawPosY);` for final int height = (int) drawPosY; SwingUtilities.invokeLater(new Runnable() { @Override public void run() { table.setRowHeight(rowIndex height); } });`. With this you solve the problem of calling to change the UI layout in the paint method. @Alessandro well done you got to 1k rep! Do you by any chance feel like looking at my idea below (""New idea""...) and telling me if it has legs?  use setBounds on the renderer component (see below) import java.awt.*; import java.io.*; import java.util.*; import javax.swing.*; import javax.swing.event.*; import javax.swing.table.*; public class MultiWrapColDemo { public static void main(String[] args) throws FileNotFoundException { EventQueue.invokeLater(new ShowIt()); } } class ShowIt implements Runnable { @Override public void run() { JTable table = new JTable(); table.getColumnModel().addColumnModelListener( new WrapColListener( table ) ); table.setDefaultRenderer( Object.class new JTPRenderer() ); // examples: // table.setIntercellSpacing( new Dimension( 40 20 )); // table.setIntercellSpacing( new Dimension( 4 2 )); Vector<Vector<String>> dataVector = new Vector<Vector<String>>(); String lorem1 = ""Lorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labore""; String lorem2 = ""et dolore magna aliqua. Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident sunt in culpa qui officia deserunt mollit anim id est laborum""; for (int i = 0; i < 12; i++) { Vector<String> row = null; if (i % 4 == 0) { row = new Vector<String>(Arrays.asList(new String[] { ""iggle"" lorem1 ""poggle"" ""poke"" })); } else if (i % 4 == 1) { row = new Vector<String>(Arrays.asList(new String[] { lorem2 ""piggle"" ""poggle"" lorem1 })); } else if (i % 4 == 2) { row = new Vector<String>(Arrays.asList(new String[] { lorem1 ""piggle"" lorem2 ""poke"" })); } else row = new Vector<String>(Arrays.asList(new String[] { ""iggle"" lorem2 ""poggle"" lorem2 })); dataVector.add(row); } Vector<String> columnIdentifiers = new Vector<String>(Arrays.asList(new String[] { ""iggle"" ""piggle"" ""poggle"" ""poke"" })); table.getTableHeader().setFont(table.getTableHeader().getFont().deriveFont(20f).deriveFont(Font.BOLD)); ((DefaultTableModel) table.getModel()).setDataVector(dataVector columnIdentifiers); JFrame frame = new JFrame(""MultiWrapColTable""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JScrollPane jsp = new JScrollPane(table); frame.getContentPane().add(jsp); frame.pack(); frame.setBounds(50 50 800 500); frame.setVisible(true); } } // if the renderer on a column (or the whole table) is not a JTextComponent calculating its preferredSize will not do // any wrapping ... but it won't do any harm.... class JTPRenderer extends JTextPane implements TableCellRenderer { @Override public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { setText(value.toString()); return this; } } class WrapColListener implements TableColumnModelListener { JTable m_table; WrapColListener( JTable table ){ m_table = table; } void refresh_row_heights() { int n_rows = m_table.getRowCount(); int n_cols = m_table.getColumnCount(); int intercell_width = m_table.getIntercellSpacing().width; int intercell_height = m_table.getIntercellSpacing().height; TableColumnModel col_model = m_table.getColumnModel(); // these null checks are due to concurrency considerations... much can change between the col margin change // event and the call to refresh_row_heights (although not in this SSCCE...) if( col_model == null ) return; // go through ALL rows calculating row heights for (int row = 0; row < n_rows; row++) { int pref_row_height = 1; // calculate row heights from cell setting width constraint by means of setBounds... for (int col = 0; col < n_cols; col++) { Object value = m_table.getValueAt(row col); TableCellRenderer renderer = m_table.getCellRenderer(row col); if( renderer == null ) return; Component comp = renderer.getTableCellRendererComponent( m_table value false false row col); if( comp == null ) return; int col_width = col_model.getColumn(col).getWidth(); // constrain width of component comp.setBounds(new Rectangle(0 0 col_width - intercell_width Integer.MAX_VALUE )); // getPreferredSize then returns ""true"" height as a function of attributes (e.g. font) and word-wrapping int pref_cell_height = comp.getPreferredSize().height + intercell_height; if (pref_cell_height > pref_row_height) { pref_row_height = pref_cell_height; } } if (pref_row_height != m_table.getRowHeight(row)) { m_table.setRowHeight(row pref_row_height); } } } @Override public void columnAdded(TableColumnModelEvent e) { refresh_row_heights(); } @Override public void columnRemoved(TableColumnModelEvent e) { // probably no need to call refresh_row_heights } @Override public void columnMoved(TableColumnModelEvent e) { // probably no need to call refresh_row_heights } @Override public void columnMarginChanged(ChangeEvent e) { refresh_row_heights(); } @Override public void columnSelectionChanged(ListSelectionEvent e) { // probably no need to call refresh_row_heights } } The above works fine in this SSCCE... but in the real world with more complex fonts more text and larger tables you start to run into problems. I therefore propose below a new version of the Listener class along with a new version of the renderer (just to introduce the use of a complex font...). Substitute these into the above SSCCE if interested... /* * This class reflects the fact that 1) when you drag a column boundary using the mouse a very large number of * ChangeEvents are generated and 2) with more complex fonts more text and larger tables (""real world"") the amount * of computation in calculating the row heights becomes significant and leads to an unresponsive GUI or worse. * This ""first"" strategy to address this involves setting a pause between the detection of a change event and the * refreshing of the rows. Naturally this involves a Timer the run() method of which is not the EDT so it * must then submit to EventQueue.invokeLater... * The larger the table the more text involved and the more complex the fonts... the more ingenuity will have to * be used in coping with the potentially vast amount of computation involved in getting the ideal row heights. This * is in the nature of the beast. Ideas might involve: * 1) adjusting the row heights immediately only for rows which are visible or likely to be visible (Viewport) and * then making successive calls to EventQueue.invokeLater to deal with all the other rows * 2) giving cells a ""memory"" of their heights as a function of the allowed width. Unfortunately it will not allow * the possibility of interpolating intermediate values because the question of whether a line wraps may hinge on a * single pixel difference although an imperfect solution to this would be err on the side of caution i.e. pretend * that a column is a little thinner than it is to cause wrapping before it is strictly necessary... particularly when * cells are out of view... * ... other ideas...(?) */ class FirstRealWorldWrapColListener implements TableColumnModelListener { JTable m_table; final static long PAUSE_TIME = 50L; java.util.Timer m_pause_timer = new java.util.Timer( ""pause timer"" true ); TimerTask m_pause_task; class PauseTask extends TimerTask{ @Override public void run() { EventQueue.invokeLater( new Runnable(){ @Override public void run() { refresh_row_heights(); System.out.println( ""=== setting m_pause_task to null..."" ); m_pause_task = null; }}); } } FirstRealWorldWrapColListener( JTable table ){ m_table = table; } void queue_refresh(){ if( m_pause_task != null ){ return; } System.out.println( ""=== scheduling..."" ); m_pause_task = new PauseTask(); m_pause_timer.schedule( m_pause_task PAUSE_TIME ); } void refresh_row_heights() { int n_rows = m_table.getRowCount(); int n_cols = m_table.getColumnCount(); int intercell_width = m_table.getIntercellSpacing().width; int intercell_height = m_table.getIntercellSpacing().height; TableColumnModel col_model = m_table.getColumnModel(); // these null checks are due to concurrency considerations... much can change between the col margin change // event and the call to refresh_row_heights (although not in this SSCCE...) if( col_model == null ) return; // go through ALL rows calculating row heights for (int row = 0; row < n_rows; row++) { int pref_row_height = 1; // calculate row heights from cell setting width constraint by means of setBounds... for (int col = 0; col < n_cols; col++) { Object value = m_table.getValueAt(row col); TableCellRenderer renderer = m_table.getCellRenderer(row col); if( renderer == null ) return; Component comp = renderer.getTableCellRendererComponent( m_table value false false row col); if( comp == null ) return; int col_width = col_model.getColumn(col).getWidth(); // constrain width of component comp.setBounds(new Rectangle(0 0 col_width - intercell_width Integer.MAX_VALUE )); // getPreferredSize then returns ""true"" height as a function of attributes (e.g. font) and word-wrapping int pref_cell_height = comp.getPreferredSize().height + intercell_height; if (pref_cell_height > pref_row_height) { pref_row_height = pref_cell_height; } } if (pref_row_height != m_table.getRowHeight(row)) { m_table.setRowHeight(row pref_row_height); } } } @Override public void columnAdded(TableColumnModelEvent e) { // refresh_row_heights(); queue_refresh(); } @Override public void columnRemoved(TableColumnModelEvent e) { // probably no need to call refresh_row_heights } @Override public void columnMoved(TableColumnModelEvent e) { // probably no need to call refresh_row_heights } @Override public void columnMarginChanged(ChangeEvent e) { // refresh_row_heights(); queue_refresh(); } @Override public void columnSelectionChanged(ListSelectionEvent e) { // probably no need to call refresh_row_heights } } // if the renderer on a column (or the whole table) is not a JTextComponent calculating its preferredSize will not do // any wrapping ... but it won't do any harm.... class JTPRenderer extends JTextPane implements TableCellRenderer { Font m_default_font m_big_font m_default_alternate_font m_big_alternate_font; HashMap<AttributedCharacterIterator.Attribute Object> m_red_serif_attr_map; // JTPRenderer() { m_default_font = getFont(); m_big_font = m_default_font.deriveFont(m_default_font.getSize() * 1.5f); m_red_serif_attr_map = new HashMap<AttributedCharacterIterator.Attribute Object >(); m_red_serif_attr_map.put( TextAttribute.FAMILY Font.SERIF ); m_red_serif_attr_map.put( TextAttribute.FOREGROUND Color.RED ); m_red_serif_attr_map.put( TextAttribute.WIDTH TextAttribute.WIDTH_EXTENDED ); m_default_alternate_font = m_default_font.deriveFont( m_red_serif_attr_map ); m_big_alternate_font = m_big_font.deriveFont( m_red_serif_attr_map ); // simpler alternate font: // m_default_alternate_font = m_default_font.deriveFont( Font.BOLD | Font.ITALIC ); // m_big_alternate_font = m_big_font.deriveFont( Font.BOLD | Font.ITALIC ); } @Override public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { int rc = row + column; if( rc % 4 == 2 ) setFont( rc % 5 == 1 ? m_big_alternate_font : m_default_alternate_font ); else setFont( rc % 5 == 1 ? m_big_font : m_default_font ); setText(value.toString()); return this; } }  As noted above the row height needs to be calculated but the current solution could be improved. In fact it wasn't working for me. jtxt.getColumns() was returning zero causing a divide by zero. Here's some code I think is cleaner: // set the width on the jTextArea causing a calc of preferred height jtxt.setSize(table.getWidth() Short.MAX_VALUE); int prefH = jtxt.getPreferredSize().height; table.setRowHeight(row prefH);  Write the headers in HTML. Here is an example of one that I have. The only issue that I am experiencing is I am having a hard time having them scroll in the JPanel if I adjust the height of the headers.  myTable.getColumnModel().getColumn(1).setPreferredWidth(75); myTable.getColumnModel().getColumn(1).setHeaderValue(""<html><b>Day Of<br>Week</b></html>""); the question is not about headers ...  The problem is that the height of rows in JTable is fixed so it's not just a matter of having a renderer that wraps; I'm not sure why it doesn't but if it did the wrapped text would be cropped - or maybe that's exactly what you're seeing. To adjust row heights you need to set them individually. Link you suggest not working any more... perhaps an argument in favour of actually showing code here? That seems to be problem. After setting the row-height to a greater value the line wrap appears. Problem now: How to get the perfect new height for. Look at the article I linked to it has example code that I could easily adapt to a perfectly working solution.  You could use a JLabel as a renderer and insert the text into a HTML tag and just add <br> where appropriate How to use HTML in Swing Components Nota bene: The DefaultTableCellRenderer already is a JLabel. I know but you need the add the HTML stuff yourself..."
948,A,"Knowing when a JFrame is fully drawn I have a program that creates a JFrame and makes it visible. Is there anyway to know when the JFrame is fully drawn and visible? Right now a hacky ""wait and pray"" method is being used. Thanks for the help! to answer the ""How can yield and specifically wait for the Swing thread to execute"" question: you can use a SwingWorker. edit reading your comment once more i see a potentially problematic statement: I'm creating a JFrame in a thread then I want that thread to wait for the JFrame to appear. are you calling your frame.setVisible(true) in this thread as well? If so you should probably be reminded that Swing painting should all be handled on the AWT EventQueue. This is where the SwingWorker comes in. However what you may need for the 'yield and wait' is a wait/notify operation. In your calling thread you can wait on a shared Object: synchronized (frameShowingLock) { frameShowingLock.wait()' } then in your SwingWorker or wherever you call frame.setVisible(true) you can finish the process by using the notifyAll() method to wake up your waiting thread:  synchronized (frameShowingLock) { frameShowingLock.notifyAll()' } how specifically? I'm not exactly sure how it helps. Thank you. bingo! thank you!  You could add a WindowListener to the JFrame; then when windowOpened is fired the window should be visible. Oh wait you were probably wanting a listener or some such thing. Deleting... Its something I hate polling since I'm just moving my wait somewhere else... Changed to a listener approach (for reference the original answer suggested checking isShowing()). Ok I just realised that I am asking the wrong question. I'm creating a JFrame in a thread then I want that thread to wait for the Jframe to appear. But since that frame doesn't exist yet I have no way to grab a reference to it. (Of course I'm using reflection to create the frame just to complicate things). So I think that the real question is ""How can yield and specifically wait for the Swing thread to execute"". Should I make a new question?  You can also try overriding Component.addNotify() which I believe is called when the component is drawn. Just make sure to call super.addNotify(). public void addNotify() { super.addNotify(); // after displayed handling }"
949,A,"Java Swing: Read many images files without memory problems? I'm writing a Java Swing application that will load from disk about 1500 png images that range in size from 50kb to 75kb each. I don't need to load all of them at once but I will need to load at 50 images at a time. I've been trying to load them using the typical: new javax.swing.ImageIcon(getClass().getResource(""myimage.jpeg"") but my application freezes and I run out of memory after about the first 30 images or so. What is the best way to load these images in such a way that I will not overload the jvm and that i will be able to monitor which have loaded successfully so far? If possible and necessary I'd wouldn't mind if the application showed a ""loading..."" screen while the images loaded but I'm not sure how to do that. Is caching useful here? I don't quite understand it but I saw this question about using MediaTracker and I'm not sure how that could be implemented here. Why not create a wrapper object for each image load them on-demand and make use of WeakReferences or SoftReferences. That way the garbage collector can bin the image data when necessary and you can reload as/when the weak reference is cleared. The upside is that the memory for the images can be cleared when required for other uses. The downside is that you will have to reload the image prior to display (or whatever you're doing with the image).  If you already know how many .pngs you are going to load you may want to create an ImageIcon Array and load them one by one from the directory/directories (which would allow you to display a loading... screen). What I think you should do is increasing the min/max. HeapSize of the JVM when running the application. You can specify them by e.g. adding -Xmx256m as a parameter (this sets the max-heap to 256MB) (and maybe -Xms32m [this sets the min-heap to 32mb]) see http://docs.sun.com/source/817-2180-10/pt%5Fchap5.html#wp57033 You will either add these options when launching your app (e.g. ""java -jar myApp.jar -Xmx128m"") or to your system's jvm-configuration-file or to your project's build properties. This piece of code would load the entire directory; if you want only 50 images to be loaded just fiddle with the start and stop parameters. As already said you will have to set the max-heap (-Xmx) to something around 300M (e.g. resolution of 1280x1024 -> 1310720px -> 4 byte/pixel -> 5242880 bytes -> 50 images -> 256MB). File dir = new File(""/path/to/directory""); File[] files = dir.listFiles(); BufferedImage[] images = new BufferedImage[files.length]; for (int i = 0; i < files.length; i++) { try { images[i] = ImageIO.read(files[i]); } catch (IOException ex){} } @Tedil The question says I need to preload/cache at least 50 images at a time but I don't know how to do that. I'm trying to learn how to do actually do this If you add to your answer how to preload the images I'll mark your answer as correct @Tedil I really appreciate your answer and I'm sorry that my comment appeared as a ""bribe"" for points. I was merely explaining that your answer was insufficient to be marked ""correct"" because it did not fully answer the question. Further it's not like these points have any value outside of SO so I assume we're all here out of our love for programming and our love to help others learn how to program as well :) Yoely I'm not going to edit my answer just because you offer to mark it as correct - I'm not ""hunting""/""collecting"" correct answers for the sake of correct answers and points - but for helping people with their problems. Ok. good idea but should I still load them in a loop as ImageIcons? There has to be a better way You could load them in a loop as images using ImageIO then you know it has loaded when the call returns rather than having a separate callback to track the loading. How much memory a png image takes when loaded will depend on how many pixels it has not the size on disk. What is your heap set at? If you haven't added the flags mentioned then you may just need to add more memory at startup. Ah so it's some sort of slideshow you're heading for. I would suggest then to preload/cache e.g. 5 images display 1 image (for 4 seconds) and load the next (the sixth) image. I hope you are using a SwingWorker (or other threaded system) to load the images to prevent the application freezing. Loading images in the main thread is not a good idea. And there is a Java API which you can use to check the amount of remaining memory (see Runtime class).  What are you going to do with the images? Do you really need ImageIcon instances or will an Image do as well? In either case it may be easier for you to control the loading if you use the synchronous methods in ImageIO instead of the ImageIcon constructors. If you run into OutOfMemoryErrors already after 30 images I assume that the images may have a high resolution and/or colour depth even if they are relatively small on disk. When you load an image the image is decompressed and requires much more memory (usually 4*width*height bytes for a colour image) than the size of the compressed file. Unless the images are very small you are probably not able to cache 1500 uncompressed images within a reasonable amount of memory so you will have to implement some strategy to only load the images you currently need. I'm making a slideshow out of the images for a psychology experiment and on another thread I'm testing the reaction times to different types of shapes. Each image is shown for up to 4 seconds but if the user presses spacebar then slideshow is paused. What is the difference practically btwn using ImageIcon and Image? Which methods in ImageIO are synchronous? ImageIO.read is synchronous and will not complete until the image is read and uncompressed completely. Image is an abstract representation of an image and ImageIcon is a Swing GUI component to display images. If you create an ImageIcon with a byte array or an image source the image may not be actually loaded and prepared until it is required for displaying the component which may lead to odd behaviour if you have many images. If you have created an Image instance with ImageIO you can still create an ImageIcon instance iwth that image and prevent background loading and decompression.  As stated by Tedil you should give more memory to the app by launching with something like: java -Xmx256m -classpath yourclasspath YourMainClass To load the images with a ""please wait"" loading screen and a progress bar is tricky. It's already in the realm of Advanced Swing. If you are using Java 6 I recommend reading up the SwingWorker class. Here's a demo that shows you one approach: package com.barbarysoftware; import javax.swing.*; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.image.BufferedImage; import java.util.List; public class ImageLoadingDemo { public static void main(String[] args) { final JFrame frame = new JFrame(); frame.setPreferredSize(new Dimension(600 400)); frame.getContentPane().add(new JLabel(""I'm the main app frame"" JLabel.CENTER)); frame.pack(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLocationRelativeTo(null); frame.setVisible(true); final JDialog pleaseWaitDialog = new JDialog(frame ""Loading images"" true); final int imageCount = 50; final JProgressBar progressBar = new JProgressBar(0 imageCount); final BufferedImage[] images = loadImages(frame pleaseWaitDialog imageCount progressBar); System.out.println(""images = "" + images); } private static BufferedImage[] loadImages(JFrame frame final JDialog pleaseWaitDialog final int imageCount final JProgressBar progressBar) { final BufferedImage[] images = new BufferedImage[imageCount]; SwingWorker<Void Integer> swingWorker = new SwingWorker<Void Integer>() { @Override protected Void doInBackground() throws Exception { for (int i = 0; i < imageCount; i++) { System.out.println(""i = "" + i); publish(i); Thread.sleep(1000); // to simulate the time needed to load an image // images[i] = ImageIO.read(new File(""... path to an image file ..."")); } return null; } @Override protected void process(List<Integer> chunks) { final Integer integer = chunks.get(chunks.size() - 1); progressBar.setValue(integer); } @Override protected void done() { pleaseWaitDialog.setVisible(false); } }; JPanel panel = new JPanel(); panel.add(progressBar); panel.add(new JButton(new AbstractAction(""Cancel"") { public void actionPerformed(ActionEvent e) { System.exit(0); } })); pleaseWaitDialog.getContentPane().add(panel); pleaseWaitDialog.pack(); pleaseWaitDialog.setLocationRelativeTo(frame); swingWorker.execute(); pleaseWaitDialog.setVisible(true); return images; } }  You should be very careful with loading files through the classloader since these resources are not freed while the classloader is active. Instead use another approach to load the files directly from disk using a java.io.File object. THey can then be discarded without laying invisibly around. Class#getResource only resolves a URL from which the image (or whatever other resource) can be loaded. The class loader is not involved in actually loading the resource and is not caching anything."
950,A,"java.lang.ArrayIndexOutOfBoundsException: 0 >= 0 attempting to populate JTable I'm subclassing JTable and using a DefaultTableModel to model my table data. The following class sets up the JTable and adds one row to the model. import java.io.File; import java.util.Iterator; import java.util.Vector; import javax.swing.JTable; import javax.swing.table.DefaultTableModel; import javax.swing.table.TableColumn; public class SelectedFileTable extends JTable { Vector<File> SelectedFiles = new Vector<File>(); DefaultTableModel Model = new DefaultTableModel(); TableColumn ColumnName = new TableColumn(); TableColumn ColumnSize = new TableColumn(); TableColumn ColumnRmIcon = new TableColumn(); ImageFilenameFilter Filter = new ImageFilenameFilter(); public SelectedFileTable() { super(); this.setModel(Model); ColumnName.setHeaderValue(new String(""Name"") ); ColumnName.setMinWidth(200); ColumnSize.setHeaderValue(new String(""Size"") ); ColumnSize.setMinWidth(50); ColumnSize.setMaxWidth(100); ColumnRmIcon.setHeaderValue(new String(""Remove?"") ); ColumnRmIcon.setMaxWidth(100); ColumnRmIcon.setResizable(false); this.addColumn(ColumnName); this.addColumn(ColumnSize); this.addColumn(ColumnRmIcon); this.setShowVerticalLines(false); this.setShowHorizontalLines(true); this.setAutoCreateColumnsFromModel(true); this.addFile( new File(""C:/temp/cfk.jpg"") ); } public void addFile(File file) { System.out.println(""FileTable adding: "" + file.getName() ); if ( file.isDirectory() ) { for ( File f : file.listFiles(Filter) ) { this.addFile(f); } } else { if ( Filter.accept(file) ) { System.out.println(""Accepting file; "" + file.getName() ); SelectedFiles.add(file); { String name = file.getName(); Long size = new Long( file.length() ); String tempstr = new String(""X""); System.out.println(""RowItems before: "" + Integer.toString(Model.getRowCount()) ); Model.addRow( new Object[] { name size tempstr } ); Model.fireTableDataChanged(); System.out.println(""RowItems start : "" + Integer.toString(Model.getRowCount()) ); } System.out.println(""Done Accepting file; "" + file.getName() ); } } } public Iterator<File> iterator() { return SelectedFiles.iterator(); } } At display/visualization time the following exception is thrown: Exception in thread ""AWT-EventQueue-0"" java.lang.ArrayIndexOutOfBoundsException: 0 >= 0 at java.util.Vector.elementAt(Vector.java:432) at javax.swing.table.DefaultTableModel.getValueAt(DefaultTableModel.java:622) at javax.swing.JTable.getValueAt(JTable.java:1903) at javax.swing.JTable.prepareRenderer(JTable.java:3911) at javax.swing.plaf.basic.BasicTableUI.paintCell(BasicTableUI.java:2072) at javax.swing.plaf.basic.BasicTableUI.paintCells(BasicTableUI.java:1974) at javax.swing.plaf.basic.BasicTableUI.paint(BasicTableUI.java:1897) at javax.swing.plaf.ComponentUI.update(ComponentUI.java:142) at javax.swing.JComponent.paintComponent(JComponent.java:743) at javax.swing.JComponent.paint(JComponent.java:1006) at javax.swing.JComponent.paintChildren(JComponent.java:843) at javax.swing.JComponent.paint(JComponent.java:1015) at javax.swing.JViewport.paint(JViewport.java:728) at javax.swing.JComponent.paintChildren(JComponent.java:843) at javax.swing.JComponent.paint(JComponent.java:1015) at javax.swing.JComponent.paintChildren(JComponent.java:843) at javax.swing.JComponent.paint(JComponent.java:1015) at javax.swing.JComponent.paintChildren(JComponent.java:843) at javax.swing.JComponent.paint(JComponent.java:1015) at javax.swing.JComponent.paintChildren(JComponent.java:843) at javax.swing.JComponent.paint(JComponent.java:1015) at javax.swing.JComponent.paintChildren(JComponent.java:843) at javax.swing.JComponent.paint(JComponent.java:1015) at javax.swing.JLayeredPane.paint(JLayeredPane.java:559) at javax.swing.JComponent.paintChildren(JComponent.java:843) at javax.swing.JComponent.paintWithOffscreenBuffer(JComponent.java:4979) at javax.swing.JComponent.paintDoubleBuffered(JComponent.java:4925) at javax.swing.JComponent.paint(JComponent.java:996) at java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:21) at sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:60) at sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:97) at java.awt.Container.paint(Container.java:1709) at sun.awt.RepaintArea.paintComponent(RepaintArea.java:248) at sun.awt.RepaintArea.paint(RepaintArea.java:224) at sun.awt.windows.WComponentPeer.handleEvent(WComponentPeer.java:254) at java.awt.Component.dispatchEventImpl(Component.java:4060) at java.awt.Container.dispatchEventImpl(Container.java:2024) at java.awt.Window.dispatchEventImpl(Window.java:1791) at java.awt.Component.dispatchEvent(Component.java:3819) at java.awt.EventQueue.dispatchEvent(EventQueue.java:463) at java.awt.EventDispatchThread.pumpOneEventForHierarchy(EventDispatchThread.java:242) at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:163) at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:157) at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:149) at java.awt.EventDispatchThread.run(EventDispatchThread.java:110) I'm ripping my hair out - I haven't been able to find the root cause of this immensely simple use case. I had never seen this out-of-bounds exception message until today. Thanks for helping me debug my application! what? which of the words ""java naming conventions"" don't you understand? All of them. What exactly is your specific issue? please learn java naming conventions and stick to them @Kleopatra - explain? Another issue might be related when you use RowSorter. When you edit the model RowSorter tries to re-sort the old model. It should be automatically re-created and re-run on each changes of table model. You can fix it by tableModel = new DefaultTableModel(data columnNames); jTableSentence.setModel(tableModel); jTableSentence.setRowSorter(new TableRowSorter(tableModel)); jTableSentence.setAutoCreateRowSorter(true); -Hayri doesn't make sense to set the autoCreate property _after_ setting the model and manually installing a new rowSorter. Instead set the property to true _before_ setting the tableModel and be done.  Replace your code with the following Here you need to remove first row only that should be iterated for all the rows private void refreshTable() { int rowCount= model.getRowCount(); // System.out.println(rowCount); for(int i=0;i<rowCount;i++ ){ model.removeRow(0); //System.out.println(i); } }  From the JTable.setAutoCreateColumnsFromModel() API: ""This method calls createDefaultColumnsFromModel if autoCreateColumnsFromModel changes from false to true. "" Vector throws ArrayIndexOutOfBoundsException - if the index is out of range ( index < 0 || index >= size()) I guess the table model is missing the columns as suggested by Dmitry  Dmitry is right. Replace this.addColumn(ColumnName); this.addColumn(ColumnSize); this.addColumn(ColumnRmIcon); with Model.addColumn(ColumnName); Model.addColumn(ColumnSize); Model.addColumn(ColumnRmIcon); and now the Model knows about the columsn and won't throw an Exception anymore when you try to add a row to a model which thinks it has 0 columns  replace tabWindow.addTab(...); with SwingUtilities.invokeLater(new Runnable() { @Override public void run() { tabWindow.addTab(...); } }); Such situation can hapen when you change tabbed pane in action listener. while might be true in some contexts ... it's completely unrelated to the question  I think you need to add columns to your TableModel. Your code adds UI columns to the table but doesn't add them to the model @Chris: More specifically you should add columns to the TableModel **instead** of explicitly adding them to the JTable. It's also worth pointing out that you will get better performance from a List instead of a Vector since you're not using the synchronization (and shouldn't have to pay for the overhead) that comes with a Vector.  I ran on this issue too (with a JList and a DefaultListModel). Dmitry's answer is right. However there is another thing: this exception can also be thrown if you don't modify the model in Swing's Event Dispatch Thread. Doing the following can help you avoid this exception: SwingUtilities.invokeLater(new Runnable(){public void run(){ //Update the model here }}); http://www.javakb.com/Uwe/Forum.aspx/java-gui/3012/JList-JScrollPane-DefaultListModel-Updating +1 Although the accepted answer is correct in this case this is very important and was causing an issue for me @Séverin your answered helped me thank you for sharing it"
951,A,"Custom slider UI Swing I'm trying to create a custom extension of BasicSliderUI. I'm just trying to make the thumb a circle (note I'm in the Windows L&F). I've created a very simple implementation that just calls g.drawOval but whenever I drag it it leaves a ""trail"" behind. Any ideas why this is? thanks Jeff Can we please see an abridged version of your code? You need to call repaint on the whole thing you cant just draw the oval on top of it. Swing will by default only repaint what needs to be repainted which usually isn't the whole control. When are you drawing the circle? did you make your own look and feel make your own sliderui or override paint() or paintComponent()? Yes that seems to be the problem. I'm drawing it in the paint thumb method. I don't see repaint being called in for example the MetalSliderUI. Where does that occur? That sounds like a very good guess. Another weird thing. It seems like using g.fillOval works but g.drawOval does not (the drawOval causes the outline to hang around). I just made my own SliderUI that extends BasicSliderUI"
952,A,"JWindow alway on top not getting focus events I have a jwindow(set to be always on top) that you can click to get a pop menu. If the user right clicks the window it shows the pop menu but then if the user clicks any other window(such as firefox) pop menu does not disappear. I tried to fix it by adding FocusListener on the jwindow i implemented FocusListener and override  public void focusGained(FocusEvent e) { System.out.println(""gain"" ); } public void focusLost(FocusEvent e) { System.out.println(""lost"" ); } but there event never get called. i also tried the following  addWindowFocusListener(new WindowAdapter() { public void windowGainedFocus(WindowEvent e) { System.out.println(""gain 2"" ); } }); this event also not called. All this jwindows has is a single JLabel with a picture on it. From memory JWindow's do not receive focus/window events. yep thats the case switched to JFrame set it to undecorated solved my problem.  To be focusable a JWindow needs to be created with a parent Frame like new JWindow(parentFrame). Do that and I think you should find it will automatically get the focus when you set it to visible.  Not really sure what you are trying to do. If you are trying to hide the popup manually then you should probably use a WindowListener and handle the windowDeactivated event. i don't want to deactivate popup manually i am doing it because swing doesn't do it. just as a workaround.  You are suppose to call setFocusableWindowState(true) on a JWindow to allow it to be focusable. But that ""still"" is not enough. The JWindow must also have focusable Components and I'm still not able to get it to work. Using JFrame setUndecorated() seems the best choice.  If you really want to display a popup menu you should be using JPopupMenu not implementing it yourself."
953,A,"Java GUI alternatives I write applications in Java and I'm looking for ways to speedup GUI programming. Binding frameworks help but the particular application I'm working on now wouldn't benefit too much from that (it doesn't display a lot of data just a lot of ways to manipulate the data). I feel like I spend way too much time writing boiler-plate GUI code like adding action listeners laying out components etc. While I'm not a C# developer I've heard XAML works very well and have seen JAXX which appears to be similar to XAML. I'm also looking at the Groovy Swing Builder. It just seems like there are so many options maybe even too many. Can anyone share their thoughts on alternatives to hand writing simple Java UI code? Also I'd be interested in discussing how to migrate existing Java Swing code to use some of these options. thanks Jeff I've avoided writing Java GUI applications whenever possible due to this. I'm interested in seeing suggestions as well. I had the same feeling until I try using GUI creator of Netbeans. Also playing with JavaFX a bit and I think it can really speed up the GUI (but didn't have much time playing with it yet). I've considered using GUI creators but I guess I just feel like there is too much GUI code generated (similar to hand writing it). True the GUI creator helps speed up the process but it doesn't eliminate the boiler plate code that tends to appear all over the place (I know that under the hood things like XAML still generate the code at runtime but at least you don't have to maintain the code). You don't have to ""maintain the code"" generated by the UI builder. You maintain the XML document that Netbeans creates using its editor. Used well Netbeans can create a good easy to maintain UI. But you have to accept that the UI will be created & maintained using just the Netbeans editor. The boilerplate exists but it is collapsed and to be frank if you are looking at almost any code in the generated .java files you are using the UI builder wrong. True but I also don't like the idea of being tied into Netbeans. Not everyone here (including myself) uses it. How about using MiGLayout? It is extremely simple to learn and use. I strongly recommend it to you. In my last project it helped me to reduce much time to implement lots of GUI. MigLayout has made development very simple and easy for me. I'll check that out. thanks.  Griffon is a Groovy framework for creating Java desktop applications. Admittedly if you don't already know Groovy you'll need to learn (some parts of) a new language to use it effectively but the enhanced productivity is worth the effort in my opinion. Agree. When I wrote this question I was still somewhat new to groovy but have been writing it for the last few years. Griffon is a bit more mature now and seems like a reasonable framework to use for desktop environments. It's worth mentioning that you can build a Griffon application with pure Java too see http://griffon.codehaus.org/guide/latest/guide/tips.html#nonGroovyArtifacts for reference.  I agree with others that tying down to NetBeans seems dangerous - especially when working with other developers. I've used the (commercial) Swing Designer (by ""instantiations"") plugin for Eclipse with quite a lot of success - the thing I like about it is that it round-trips generating code that you are free to alter by hand. Not perfect but a good time-saver. But the biggest difference in my Swing programming came with the discovery of better layout managers. I went from FormLayout (good) to TableLayout (better) but now I don't use anything but MiGLayout (incredible).  I recommend using Clojure It allows you to write Java GUIs quickly without the boilerplate.  You can try ZK(the best open source Java framework for building enterprise web and mobile apps). http://www.zkoss.org/  You should definitely use an IDE with GUI builder. IntelliJ IDEA and NetBeans have very good GUI builders they allow you to automatically bind objects and would reduce tremendously the amount of effort needed to create a GUI as opposed of doing it completely by hand. As a fan of UI builders I do feel I should add - If you use one don't throw good standards out of the window. When you add a widget always name it well and avoid the double-click-auto-add-listener rubbish.  I'm no expert in GUI programming but have you tried using NetBeans as a platform for your app? It seems to be for larger applications. It might be counterproductive. See this ""intro"": http://netbeans.dzone.com/videos/free-netbeans-platform-crash  Layouts: For layouts I have abandoned the JDK Layout Managers in favor of the JGoodies Forms tool. I find it much more effective. It reads at a higher level and reduces significantly the amount of code related to layouts. Agreed. I use that as well. Definitely helps. +1 for JGoodies Forms DesignGridLayout can also help a lot for the layout aspects if you have only forms in your UI."
954,A,"ways to add invisible components into JPanel? I need to add some invisible component into a JPanel to avoid the issues with grid bag lay out.Which is the best way to add these kind of invisible components? You can use the helper methods of the Box class to create such components: Box.createHorizontalStrut(int width): Creates an invisible fixed-width component. Box.createVerticalStrut(int height): Creates an invisible fixed-height component. Adding them is done in exactly the same way as you add any other component.  Erhmmm you just add them? Like in:  jpanel.add( youInvisibleComponent ); ??? If you are having problems with the GridBagLayout you should probably consider using another layout manager :( can u suggest those kind of layouts and it shouldn't be commercial .. Yeap take a look here in the ""Know implementing classes"" section: http://java.sun.com/javase/6/docs/api/java/awt/LayoutManager.html  My first question would be ""why are you using a GridBayLayout?"" have you looked at the alternatives like GroupLayout? (I wasn't the downvoter) GroupLayout is not very helpful as it's primarily intended for software GUI builders. It therefore plays nice with software that produces code but not so with humans that write it. yes i am agree with Johannes Rössel ... I disagree completely GroupLayout and SpringLayout were both written with GUI builders in mind but are both significantly easier to work with than GridBagLayout when hand coding. If I could -1 your -1 I would. can u give some good and easy to understand code samples to work with Group layout ....since i used this layout from NetBeans and it fails with some platforms (Metal/Windows) Sun has an excellent example: http://java.sun.com/docs/books/tutorial/uiswing/layout/groupExample.html"
955,A,"Java JTree expand only level one nodes With a JTree assuming the root node is level 0 and there may be up to 5 levels below the root how can I easily expand all the level 1 nodes so that all level 1 & 2 branches and leafs are visible but levels 3 and below aren't? This should work - import javax.swing.*; import javax.swing.tree.*; import java.awt.BorderLayout; import java.awt.event.*; import java.util.*; public class Tree { public static void main(String[] args) { JPanel panel = new JPanel(new BorderLayout()); final JTree tree = new JTree(); panel.add(new JScrollPane(tree)); JButton btn = new JButton(""Press Me""); btn.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { for (Enumeration e = ((TreeNode)tree.getModel().getRoot()).children();e.hasMoreElements();) { TreeNode tn = (TreeNode)e.nextElement(); tree.expandPath(new TreePath(((DefaultTreeModel)tree.getModel()).getPathToRoot(tn))); } } }); panel.add(btn BorderLayout.SOUTH); JFrame frame = new JFrame(""""); frame.getContentPane().add(panel); frame.setSize(300 300); frame.setLocation(100 100); frame.pack(); frame.show(); } } **WARNING!** `children()` get you only one level of children. You need `breadthFirstEnumeration()`. Then it works.  Thanks for the quick response guys. However I have now found the simple solution I was looking for. For some reason I just couldn't see DefaultMutableTreeNode.getLevel() in the JavaDocs! FYI what I'm doing now is:  DefaultMutableTreeNode currentNode = treeTop.getNextNode(); do { if (currentNode.getLevel()==1) myTree.expandPath(new TreePath(currentNode.getPath())); currentNode = currentNode.getNextNode(); } while (currentNode != null); That is a good solution too: +1. You can accept your own solution if you want (and put it at the top of the answers) but know that you will not gain any rep point. +1 Nice simple answer.  You have some Tree utility classes out there which do precisely that: Like this one: public class SimpleNavigatorTreeUtil { /** * Expands/Collapse specified tree to a certain level. * * @param tree jtree to expand to a certain level * @param level the level of expansion */ public static void expandOrCollapsToLevel(JTree tree TreePath treePathint levelboolean expand) { try { expandOrCollapsePath(treetreePathlevel0expand); }catch(Exception e) { e.printStackTrace(); //do nothing } } public static void expandOrCollapsePath (JTree treeTreePath treePathint levelint currentLevelboolean expand) { // System.err.println(""Exp level ""+currentLevel+"" exp=""+expand); if (expand && level<=currentLevel && level>0) return; TreeNode treeNode = ( TreeNode ) treePath.getLastPathComponent(); TreeModel treeModel=tree.getModel(); if ( treeModel.getChildCount(treeNode) >= 0 ) { for ( int i = 0; i < treeModel.getChildCount(treeNode); i++ ) { TreeNode n = ( TreeNode )treeModel.getChild(treeNode i); TreePath path = treePath.pathByAddingChild( n ); expandOrCollapsePath(treepathlevelcurrentLevel+1expand); } if (!expand && currentLevel<level) return; } if (expand) { tree.expandPath( treePath ); // System.err.println(""Path expanded at level ""+currentLevel+""-""+treePath); } else { tree.collapsePath(treePath); // System.err.println(""Path collapsed at level ""+currentLevel+""-""+treePath); } } } Basically you need to explore the sub-nodes until your criteria (here the depth level) is met and expand all nodes until that point.  As your level 1 nodes are all children of the root node and assuming that you are using DefaultMutableTreeNode (needed for the call to getPath()) you can just iterate over the root node's children like so: Enumeration<?> topLevelNodes = ((TreeNode)tree.getModel().getRoot()).children(); while(topLevelNodes.hasMoreElements()) { DefaultMutableTreeNode node = (DefaultMutableTreeNode)topLevelNodes.nextElement(); tree.expandPath(new TreePath(node.getPath())); }  Use expand(TreePath) for all level-2 nodes. yes obviously but how would I iterate through all the nodes knowing which ones are level 2? You can do it the way you’ve already done it but you should already have the information in your data model."
956,A,Swing Reuse in Java I'm writing a Java Desktop App using NetBeans 6.5 and a Swing Patterns that keeps repeating. Each and every one of my dialogs has a Save Button and Close Button with mostly different behavior behind the Save Button and identical code behind the close button. How can I reuse this code without copying and pasting and at the same time retain the user of GUI Builder tools for the Inner panel of the dialog box? I'm not a netbeans expert but I'd suggest add a saveAction and closeAction to the dialog box constructor both of which implement Action and then just get the GUI builder code to execute the appropriate Action.  I am a C# programmer but the same concept apply. You can create an abstract class to hold the code that is always the same and an abstract method for each action. This method would be implemented by the class that inherits this new abstract class.
957,A,"Letting a Java Swing program layout itself again I always have trouble with Java layouts but the main thing bugging me now is that when the content changes in particular changes it sizes it's not laid out again properly. Take the example below: package layouttest; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JTextArea; public class LayoutTestStart extends JFrame implements ActionListener { static JButton button= new JButton(""Expand""); static JTextArea f = new JTextArea(""A medium sized text""); static LayoutTestStart lst; public static void main(String[] args) { //Schedule a job for the event-dispatching thread: //creating and showing this application's GUI. javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { createAndShowGUI(); } }); } public static void createAndShowGUI() { lst = new LayoutTestStart(); lst.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JPanel all = new JPanel(); button.addActionListener(lst); all.add(button); all.add(f); lst.getContentPane().add(all); lst.setVisible(true); lst.pack(); } @Override public void actionPerformed(ActionEvent e) { f.setText(f.getText()+""\n""+f.getText()); // this doesn't work f.invalidate(); // this does but it's cheating // lst.pack(); } } The only way I get this to work is to call lst.pack() but that's cheating since then each component should have a reference to it's JFrame which gets messy when a component is a seperate class. What's the preferred way to let this example work? Well generally users don't like the size of the frame changing every time they hit enter. The frame should be designed to accomodate growth. So you would define the text area to have a given number of row and columns. Then you add the text area to a scroll pane and add the scrollpane to the frame. Then as data is changes scrollbars will appear or disappear as required. If however you truly need to have a dynamically changing frame then you should use pack(). You can use: SwingUtilities.windowForComponent(...) where the Component is the source component of the ActionEvent to find the Window to pack(). So far this looks like my best option  revalidate instead of invalidate. invalidate just marks the container as needing a layout. revalidate does that and then schedules a validate. BTW: I suggest: avoid extending from JFrame and other components; avoid multiple inheritance of interface and avoid (mutable) statics. @Pool I'm not sure about multiple inheritance of interfaces (which seems to be half the point of interfaces in the first place). Extending components however tends to pollute your API which makes it harder for everyone to use. Instead you would want to have the component be a member of your class and provide a method like `getUI` to access it if necessary. Can you go into more detail into the last paragraph Tom? In particular why should you avoid extending components? If I change the invalidate() to revalidate() in my source code it still doensn't work -- or are you suggesting something else? I know my code is ugly (although I might not know all the suggestions you gave -- I'll have a look) as I wanted to fit my example in one class :).  First in regards to your assumption you could call pack by getting the top level anscestor (there is such a method on components) and work out calling pack. You could make a static method and call that from everywhere this is needed. That would work. Another option (perhaps the really prefered option) is to use a layout manager that accomidates this. GridBagLayout of course does it all but there are those who claim it is not intended for mortals to use. MigLayout is an open source layout manager that is a bit more sane. I've tried for some time but couldn't get it working (but I loved MigLayout from the start). If you have some time to show how to fix my example it'd be great. I used hacking similar to your first suggestion but it doesn't feel very nice. In regards to the second option: usually the field whose size changes is layered into a series of layout managers so I'd have to change them all to sane layout managers. I had a look at MigLayout and it looks great (except for the name) but I don't see how I can change my example to use MigLayout and work automatically. Dynamic layout managers (unlike the default) are made to change the position of components as they grow and shrink and as the frame grows and shrinks so that you don't have to explicitly code for it. I tried doing that but it doesn't work. I made it into JPanel all = new JPanel(new MigLayout()); but the example still doesn't work. Could you post a complete example? I don't have MigLayout setup in my current environment to test an example but what you need to do is pass string parameters to the MigLayout constructor to define that the grid the components are on can expand and how much and then in the add method on the panel you pass a string as second parameter to specify how much the component can grow. This is documented (including the content of the string) in the quick start guide. http://www.miglayout.com/QuickStart.pdf  updateUI(); should never fail! updateUI() is used for LAF changes. This is not a LAF change and should not be used.  The invalidate or validate on JTextArea alone doesn't work you have to change the size of the top frame as it doesn't update it's size automatically. For example you can do it like this (changed the code a little to remove static variables): package layouttest; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JTextArea; public class LayoutTestStart extends JFrame implements ActionListener{ private JTextArea f = new JTextArea(""A medium sized text""); public LayoutTestStart(){ setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JPanel all = new JPanel(); JButton button = new JButton(""Expand""); button.addActionListener(this); all.add(button); all.add(f); getContentPane().add(all); } @Override public void actionPerformed(ActionEvent e){ javax.swing.SwingUtilities.invokeLater(new Runnable(){ @Override public void run(){ f.setText(f.getText() + ""\n"" + f.getText()); setSize(getPreferredSize()); } }); } public static void main(String[] args){ // Schedule a job for the event-dispatching thread: // creating and showing this application's GUI. javax.swing.SwingUtilities.invokeLater(new Runnable(){ public void run(){ LayoutTestStart lst = new LayoutTestStart(); lst.setVisible(true); lst.pack(); } }); } }"
958,A,Alternative options for displaying video in Java? At the moment I use QuickTime for Java to display video in a swing application. However Apple has deprecated support for QTJava and I was wondering what options other are available right now+ for moving forward? Requirements: Must be cross platform (WIN & OSX). Must be able to support many different video formats. Must be capable of supporting large videos (i.e. Hi-Def). API must provide access to raw frames and audio tracks. +JMC could be included in Java7 whenever that turns up and at the moment you can dig it out of JavaFX... But I don't want to bundle all of JavaFX with my application right now. You most definitely want Xuggle! It's very easy to use and is a Swiss Army chainsaw of Java multimedia processing. Ohhh. Looks promising.  Something called JVLC supposedly exists; Java bindings for VideoLAN Client. However the JVLC site has been broken since spring so I'm finding it difficult to get further information. Something like this should definitely be what you're looking for though. Here's a link to someone hosting its Javadoc: http://vlc4osgi.forge.os4os.org/javadoc/org/videolan/jvlc/JVLC.html It seems you can also embed mplayer in Java using JMPlayer. VLC would be my first instinct though. Edit: Hm... The site in the last link I posted mentions Java Media Framework. With the JVLC site down is it possible to download it?  Following on from the suggestions of Gunslinger47. Also looks as though there are bindings for gstreamer.  What about JMF? I used it once and it worked quite fine (for MPEG layer2 I don't know which other formats it supports). Link: JMF Thanks for the suggestion Jack however I struggled getting JMF to work with newer more popular codecs.
959,A,"How do I determine which monitor a Swing mouse event occurs in? I have a Java MouseListener on a component to detect mouse presses. How can I tell which monitor the mouse press occurred in? @Override public void mousePressed(MouseEvent e) { // I want to make something happen on the monitor the user clicked in } The effect I'm trying to achieve is: when the user presses the mouse button in my app a popup window shows some info until the mouse is released. I want to ensure this window is positioned where the user clicks but I need to adjust the window position on the current screen so that the entire window is visible. I'm not sure it's that easy. I think you have to capture the mouse to see any clicks outside your window and I have no idea how to do that in java (Hence the comment--I have no ""Answer""). Bill you are right it is not easy. That's why I asking the collective brain that is Stack Overflow! Since Java 1.6 you can use getLocationOnScreen in previous versions you must get the location of the component that generated the event: Point loc; // in Java 1.6 loc = e.getLocationOnScreen(); // in Java 1.5 or previous loc = e.getComponent().getLocationOnScreen(); You will have to use the GraphicsEnvironment class to get the bound of the screen.  Maybe e.getLocationOnScreen(); will work? It's only for java 1.6.  Rich's answer helped me find a whole solution: public void mousePressed(MouseEvent e) { final Point p = e.getPoint(); SwingUtilities.convertPointToScreen(p e.getComponent()); Rectangle bounds = getBoundsForPoint(p); // now bounds contains the bounds for the monitor in which mouse pressed occurred // ... do more stuff here } private static Rectangle getBoundsForPoint(Point point) { for (GraphicsDevice device : GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()) { for (GraphicsConfiguration config : device.getConfigurations()) { final Rectangle gcBounds = config.getBounds(); if (gcBounds.contains(point)) { return gcBounds; } } } // if point is outside all monitors default to default monitor return GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds(); } If you want to get the default monitor see my updated answer on multi-screen systems where Windows should be centered across all displays getMaximumWindowBounds() returns the bounds of the *entire* display area.  You can get display information from java.awt.GraphicsEnvironment. You can use this to get a information about your local system. Including the bounds of each monitor. Point point = event.getPoint(); GraphicsEnvironment e = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] devices = e.getScreenDevices(); Rectangle displayBounds = null; //now get the configurations for each device for (GraphicsDevice device: devices) { GraphicsConfiguration[] configurations = device.getConfigurations(); for (GraphicsConfiguration config: configurations) { Rectangle gcBounds = config.getBounds(); if(gcBounds.contains(point)) { displayBounds = gcBounds; } } } if(displayBounds == null) { //not found get the bounds for the default display GraphicsDevice device = e.getDefaultScreenDevice(); displayBounds =device.getDefaultConfiguration().getBounds } //do something with the bounds ... This is half the solution and it helped me work out the whole solution. Thanks! It was and I voted you up!"
960,A,"progress bars + MVC in Java =? So I have this nice spiffy MVC-architected application in Java Swing and now I want to add a progress bar and I'm confused about Good Design Methods to incorporate a JProgressBar into my view. Should I: add a DefaultBoundedRangeModel to my controller's state and export it? class Model { final private DefaultBoundedRangeModel progress = new DefaultBoundedRangeModel(); public void getProgressModel() { return progress; } public void setProgressCount(int i) { progress.setValue(i); } } class Controller { Model model; int progressCount; void doSomething() { model.setProgressCount(++progressCount); } } class View { void setup(Model m) { JProgressBar progressBar = /* get or create progress bar */ ; progressBar.setModel(m.getProgressModel()); } } /* dilemma: Model allows progress to be exported so technically all of the progress state could be set by someone else; should it be put into a read-only wrapper? */ use JGoodies Binding to try to connect the JProgressBar's visual state to my model's state? class Model { private int progress; public void getProgressCount() { return progress; } public void setProgressCount(int i) { progress = i; } } class View { void setup(Model m) { ProgressBar progressBar = /* get or create progress bar */ ; CallSomeMagicMethodToConnect(m ""progressCount"" progressBar ""value""); // is there something that works like the above? // how do I get it to automatically update??? } } or something else??? edit: more specifically: could someone point me to a Good Example of realistic source for an application in Java that has a status bar that includes a progress bar and has a decent MVC implementation of it? I would say something else. The problem I have had with MVC is to define the level of abstraction of the model. Model could be some sort of objects for the UI components Model could also be some other sort of objects for the program it self. and Model could be as high as business models. In this case I would have separated model/component pairs for the progress bar and handle them in a separate controller class. This article describes swing architecture and might clarify the way it uses models inside.  No (to 1) and NOOOO (to 2). At least in my opinion. No (to 1): First DefaultBoundedRangeModel is a javax.swing class. In my opinion these classes have no place in models. For example think about the model living on the server being accessed via RMI - All of the sudden putting a javax.swing class there seems ""not right"". However the real problem is that you're giving a part of your model (the bounded model) to someone else with no control over events fired or queries made. No (to 2): Ugh. Binding is fun but (at least in my opinion) should be used to synchronize between UI model and UI components not between data model and UI model. Again think what would happen if your data model lived on a remote server accessed by RMI. So what? Well this is only a suggestion but I'd add an event listener interface and add the standard event listener subscription methods (addListner(...) removeListener(...)). I'd call these listeners from within my model when I have updates going on. Of course I'd make sure to document the calling thread (or say it cannot be determined) in order for the client (the UI in this case) to be able to synchronize correctly (invokeLater and friends). Since the listener service will be exposed by the controller this will allow the model to live anywhere (even allowing for listeners to be remotely invoked or pooled). Also this would decouple the model from the UI making it possible to build more models containing it (translators / decorators / depending models). Hope this helps. btw you should look at SwingWorker - it deals with this issue (updating progress from a background task) specifically.  In our app (MVC about 100 KLOC) we have it like that (pattern Observer actually): /** * Observer on progress changes */ public interface IProgressListener { public void setProgress(ProgressEvent e); } public class ProgressEvent extends ... { private int progressCount; // setter + getter ... } class Model { public void addProgressListener(IProgressListener l); protected void fireProgressChange(ProgressEvent e); // call .setProgress() on listeners } class Controller { private Model model; } class View extends ProgressBar implements IProgressListener { ... // IProgressListener implementation public void setProgress(ProgressEvent e) { this.setValue(e.getProgress()); } ... }"
961,A,"Getting started with Swing? I'm new to Swing programming and would like to find an Open Source Swing poject that can help me get up to speed. Any suggestions? Before jumping in and trying to understand a project why not go through the Sun Java tutorial and get some understanding of Swing then start to do some small projects on your own. Once you are familiar with the framework then you would be able to better understand some open-source projects IMO. I haven't looked at the code but this could be an enjoyable project to help with: http://ostatic.com/croftsoft +1 for Java Tutorial. Swing is rather complex.  How about OpenSwing? OpenSwing is an open-source suite of advanced graphics components based on Swing toolkit: these components are more sophisticated than those provided with Swing and can be manipulated directly inside the UI designer of the IDE. It is also a framework that provides data binding mechanism between components and data model based on the MVC paradigm. Data model is based on Java Beans (POJOs) and it is supported in all OpenSwing components such as grid control tree control or generic controls container. @Seki While this is true as the above answer points out JP could have easily added some explanation as to what the project deals with where to start with the project etc. A link-only answer can *always* be expanded to a better answer with some explanation as to what the link is to. @Seki Your edit is what this post was missing. While simple links can be useful I think you would agree this is at least a little more advantageous. The point of ""Recommending for Deletion"" is to bring the OP to attention so they know that their answer is lacking information. It also brings attention to other reviewers who might come in and edit the question much in the way you did. Thank you for the edit. @Jon: Thanks I agree. Think about removing your low-quality warning to prevent the deletion of the answer :) While this link may answer the question it is better to include the essential parts of the answer here and provide the link for reference. Link-only answers can become invalid if the linked page changes."
962,A,"Java simple String diff util I'm looking for a simple java lib/src to highlight differences between two Strings case-sensitive. A html output would be great but I would be happy to get the indexes of the diffs something like: diff(""abcd""""aacd"") > [22] diff(""maniac"" ""brainiac"") > [""man""brain""] or [03] or something like that The idea is to higlight typos or such in a swing program since the input shold follow strict conventions. I'm not looking for input validation. I'm looking for string comparison. identifying typos is a very complex problem. are you going to compare every input word with every valid word? please look up spelling suggestions etc on the web This isn't really a duplicate since you're asking for how to highlight the difference but there are some good answers on [this related question](http://stackoverflow.com/questions/132478/how-to-perform-string-diffs-in-java). The java-diff project might also be useful. This is an implementation of the longest common subsequences (LCS) algorithm for Java. The Diff#diff() method returns a list of Difference objects each of which describes an addition a deletion or a change between the two collections.  Apache Commons Lang has a class called StringUtils which has both difference and indexOfDifference which fulfills your needs. http://commons.apache.org/lang/ Check it out"
963,A,"JFrame in Java I am using a JFrame as a pop-up from a main frame where the user is supposed to enter some information and then press OK. But the problem is that once this sub-frame has opened up I want the program to ignore any other signal until the OK button is pressed similar as how it is done with JOptionPanes. As it is now you could click the button to open up the sub-frame several times thus getting several frames and this is not the intention (it causes a lot of bugs even). I could solve it with a boolean that is true once the OK button is pressed but that doesn't seem like a cool way to fix it. I feel there has to be some other way of doing it seeing as I can see the sought-after effect coming from my JOptionPanes but can't get to it. Cheers. Mats_SX from Sweden? You aren't on the Paradox forums by any chance are you? I very much am. Frequent the OT and the eu2 section :) Then you know me already (I use my first name rather than my last name there). aha! yes I do. Well see you around over there hehe :D You need a JDialog with modal = true. From the Javadocs: modal - specifies whether dialog blocks user input to other top-level windows when shown. So there is no way for me to do this with a JFrame? Not easily. But there's really no reason to use a JFrame here; a JDialog can do almost anything a JFrame can it's just not treated as a full window by the operating system. A JDialog is meant for this sort of thing (just a little window to collect some input). I shall remember that. The details to the issue is that it's a project for school and I happen to be the project manager. I haven't myself written that code I just have to deal with the bug it caused lol. So I assumed that a JFrame was what was to be used but for future encounters with similar tasks I'll use the JDialog instead then.  Just change the JFrame to a JDialog. Then in the constructor use this line: setModal(true); Your app will then block until the dialog box is closed. You might want to look into a JOptionPane.showInputDialog() if your users are simply entering a String. well they are entering three different Strings and there are some requirements on what these Strings are allowed to look like. With custom reqs like that you will probably want to make your own custom JDialog you could still do it with JOptionPane though. the ""message"" argument to JOptionPane is an Object. if a string it displays the text of the string but you can pass a JComponent to get other custom content. But i agree with the ""Use a modal JDialog that's what their for"" answer above."
964,A,"Java Mac OS X running with out a Dock Icon i have a swing application that i would like to run on os x without a dock icon. Just a system tray icon. I know about headless but if i set that property i can not create JFrames. Is it possible to run a swing application without a dock icon in java? or through JNA if there is a native way. :-))))))))))))))))) No. Next question? @Paul Tomblin: packaging it as .app (which is pretty standard for a Java app on OS X) and then doing what Matt Wilson suggested fixed the issue. So *""yes. Next useful (or is it) comment?""* ;) You'd have to package it up as a .app (Mac application package) and in the package's Info.plist set LSUIElement to 1. See http://www.cocoadev.com/index.pl?LSUIElement."
965,A,"Matisse in Eclipse I have just installed Eclipse 3.4 and found out that there is not a plugin to create Swing applications yet. I also have found that there is a Matisse implementation in MyEclipse IDE but I'd like to now whether there is such a Matisse plugin for free. Although this is not a true answer to your question you may as well look at alternative solutions in terms of layout management: Matisse and GroupLayout are neither the only way nor the best one to define your GUI forms. I would suggest you take a look at: MigLayout (very powerful and quite simple) and DesignGridLayout (quite powerful and very simple) Both are open source and have a friendly license (not GPL). A quick search on Google will give you the links immediately. Disclaimer: I am one of DesignGridLayout both project owners but I point you to it because I'm convinced it provides a better way to define Swing layouts. No problem I'll check it. I mentioned Matisse because it's the best design I've knew so far but I'm open to alternatives as long as I can still work in eclipse. :-)  there isnt one for free. myeclipse is the only way to run matisse inside eclipse.  Instatiations Swing Designer is the best in my opinion. We settled on it after trying may different Eclipse plugins. Instatiations Swing Designer is now [Google WindowBuilder Pro](https://developers.google.com/java-dev-tools/download-wbpro) ""Instatiations""? i just broke my tongue trying to pronounce that word I didn't know it. Thank you very much for the recomendation. I'll try it.  I did a quick Google search and found that you could use Netbeans Matisse and Eclipse in parallel: NetBeans Wiki: UsingNetbeansMatisseAndEclipseInParallel It seems to basically involve building the Swing GUI in Netbeans and doing the other coding tasks from within Eclipse. Yeah I have being doing this. But this is not much practical unfortunately. I'll read the article you recommended."
966,A,"Reflowing label widget for Swing Is there a widget for Swing that behaves like a JLabel that automatically reflows the text if its dimensions have changed? For example:  Large horizontal space available: +--------------+ | Foo bar baz | +--------------+ Small horizontal space available: +---------+ | Foo bar | | baz | +---------+ I am currently using JEditorPane with setContentType(""text/html"") and HTML content. This works but it does not use the System's default label font for displaying the text. Also I would rather not put HTML tags into my text - at best \n characters would be transformed into line breaks and everything else would be displayed as text. I'm not sure of this but I think it's worth a try: You can set a JLabel's text using HTML. This should take care of the font issue. Simply do something like lbl.setText(""<html><body>Foo bar baz</body></html>""); See how the text behaves then. If that works for you you can override JLabel's setText() method to convert \n into <br/> and wrap html and body tags around the text. No need for tag. Just having is enough  You can use JTextArea a multi-line plain-text widget. JavaDoc: http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JTextArea.html  JTextArea ta = new JTextArea(""A JTextArea containing a long text""); ta.setLineWrap(true); ta.setWrapStyleWord(true); ta.setOpaque(false); ta.setEditable(false); ta.setFocusable(false); setLineWrap(true) enables the wrapping setWrapStyleWord(true) changes wrapping from character- to word-based setOpaque(true) renders it opaque like a normal label setEditable(false) hides the caret and disables the user to change the text setFocusable(false) disables the user to select the text It look like a nornal JLabel but it will wrap the text whenever the width is too small. If you have borders which are not completely opaque (e.g. a rounded border) you need to over-ride paintComponent() to prevent the background from painting in the insets area. If you are using MIGLayout and you are puzzled as to why the JTextArea grows but does not shrink add ""wmin 10"" to the constraints. See [this answer](http://stackoverflow.com/questions/2475787/miglayout-jtextarea-is-not-shrinking-when-used-with-linewrap-true) for more details. And you need a layout manager that forces the width - e.g. BorderLayout (either CENTER or NORTH or SOUTH) or GridBagLayout with fill set to HORIZONTAL or BOTH etc. You should also be copying the foreground and background colours the font and the border at a bare minimum. At least in my case (Java 1.5 or Java 1.6) the line wrap does not behave as expected: it wraps the text at character level not at word lebel. So in the above example that could also produce something like ""foo bar b(newline)az"" @nd: You need to call 'setWrapStyleWord(true)' in order to get word-level line wrap. @uckleman: thanks corrected the code Oh totally overlooked the wrapStyleWord property in the documentation. Thank you.  I have made a custom UI delegate for JLabel to support multiple lines. It will wrap your text to fit the available space and also respect hard line breaks. The wrapped text should reflow when the component size changes. The UI delegate listens for changes to the component's dimension and recalculates the line breaks automatically. Using the UI delegate is as straight forward as: JLabel label = new JLabel(""Text that'll wrap if necessary""); label.setUI(MultiLineLabelUI.labelUI); Or alternatively use the custom MultiLineLabel class that in addition to wrapping text supports vertical and horizontal text alignment. Here's the project (including a webstart demo): http://samuelsjoberg.com/archive/2009/10/multiline-labels-in-swing If you try the demo it should reflow fine on OS X. If I remember correctly there's some problem with reflowing upon resizing the frame on Windows. Didn't look in to it at the time but it seemed that the resized event never propagated to the label. I can confirm there are problems on Windows in my case I had to invoke `MLL.revalidate(); MLL.repaint();` in order to get long text to actually wrap without resizing the window. Problem seems to be that the MLL must be in a visible container before it works. Very nice that is even better than I wished for (w/ shadows)"
967,A,"Changing locale at runtime in Swing I would like to be able to change the locale in my Swing application at runtime and have all the text elements on the screen update themselves with localized text from a ResourceBundle of the new locale. Can this be done without customizing swing components or creating UIDelegates for all components that handle rendering localized text? If no then what is a good solution I can consider implementing? use ResourceBundle.getBundle(BUNDLE_NAME).getString(key); to access the Strings. when updating the Default Locale e.g. via Locale.setDefault(Locale.GERMAN); clear the Resourcebundle cache: ResourceBundle.clearCache(); the next call of ResourceBundle.getBundle(BUNDLE_NAME).getString(key); should the return the localized String of the chosen Locale. Though the other is pretty good and interesting I think that´s the answer that should be really accepted In my case I also had to add this JComponent.setDefaultLocale(Locale.GERMAN);  You have a method that is used to change app locale (and probably persist the new value) and another one to get localized strings. Create an interface: interface LocaleChangeListener { void onLocaleChange(); } Implement it by UI components that need to be able to change locale at runtime and set the new values in overrides onLocaleChange(). Now have a list of listeners that will be notified on locale change by the first method. We decided to do something very similar to this. Except we are going to use a couple system properties and reflection to attempt to refresh all the components on the screen when the event occurs. The top level Jpanel is going to listen for local changes.  You may want to save the language preference out and then require a restart of the app for changes to take effect. Then you should be able to use Locale.setDefault(Locale.<desired language>); on startup prior to rendering the GUI. That should properly switch your locale which will result in the desired .properties file(s) being loaded. This is what we will do if we can't come up with something that fits into the timeline. Thanks  There's two obvious approaches I see: Instead of getting a String from the ResourceBundle get some kind of event-source String holder. Document would be the very heavy solution but anything that can handle replacing an immutable value will do. Instead of just setting the text on a label say have a method that also sets up a listener. Note this quite a ""heavy"" solution. Alternatively have a central repository of listeners that are fired on a locale change that each then go back and re-execute the relevant part of the set up code (don't duplicate). For common cases where you have say a JLabel using a resource string literally then you can combine these all into one listener with a WeakHashMap<JLabelString>. Sometimes it works out better to avoid lots of little listeners."
968,A,"Creating a custom button in Java Is there a way to create a JButton with your own button graphic and not just with an image inside the button? If not is there another way to create a custom button in java? I'm probably going a million miles in the wrong direct (but i'm only young :P ). but couldn't you add the graphic to a panel and then a mouselistener to the graphic object so that when the user on the graphic your action is preformed. This would work but I would prefer to use the standard JButton than create a my type of button if possible.  I haven't done SWING development since my early CS classes but if it wasn't built in you could just inherit javax.swing.AbstractButton and create your own. Should be pretty simple to wire something together with their existing framework.  Yes this is possible. One of the main pros for using Swing is the ease with which the abstract controls can be created and manipulates. Here is a quick and dirty way to extend the existing JButton class to draw a circle to the right of the text. package test; import java.awt.Color; import java.awt.Container; import java.awt.Dimension; import java.awt.FlowLayout; import java.awt.Graphics; import javax.swing.JButton; import javax.swing.JFrame; public class MyButton extends JButton {  private static final long serialVersionUID = 1L;  private Color circleColor = Color.BLACK;  public MyButton(String label) {  super(label);  }  @Override  protected void paintComponent(Graphics g) {  super.paintComponent(g);  Dimension originalSize = super.getPreferredSize();  int gap = (int) (originalSize.height * 0.2);  int x = originalSize.width + gap;  int y = gap;  int diameter = originalSize.height - (gap * 2);  g.setColor(circleColor);  g.fillOval(x y diameter diameter);  }  @Override  public Dimension getPreferredSize() {  Dimension size = super.getPreferredSize();  size.width += size.height;  return size;  }  /*Test the button*/  public static void main(String[] args) {  MyButton button = new MyButton(""Hello World!"");  JFrame frame = new JFrame();  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.setSize(400 400);  Container contentPane = frame.getContentPane();  contentPane.setLayout(new FlowLayout());  contentPane.add(button);  frame.setVisible(true);  } } Note that by overriding paintComponent that the contents of the button can be changed but that the border is painted by the paintBorder method. The getPreferredSize method also needs to be managed in order to dynamically support changes to the content. Care needs to be taken when measuring font metrics and image dimensions. For creating a control that you can rely on the above code is not the correct approach. Dimensions and colours are dynamic in Swing and are dependent on the look and feel being used. Even the default Metal look has changed across JRE versions. It would be better to implement AbstractButton and conform to the guidelines set out by the Swing API. A good starting point is to look at the javax.swing.LookAndFeel and javax.swing.UIManager classes. http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/LookAndFeel.html http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/UIManager.html Understanding the anatomy of LookAndFeel is useful for writing controls: Creating a Custom Look and Feel  You could always try the Synth look & feel. You provide an xml file that acts as a sort of stylesheet along with any images you want to use. The code might look like this: try {  SynthLookAndFeel synth = new SynthLookAndFeel();  Class aClass = MainFrame.class;  InputStream stream = aClass.getResourceAsStream(""\\default.xml"");  if (stream == null) {  System.err.println(""Missing configuration file"");  System.exit(-1);  }  synth.load(stream aClass);  UIManager.setLookAndFeel(synth); } catch (ParseException pe) {  System.err.println(""Bad configuration file"");  pe.printStackTrace();  System.exit(-2); } catch (UnsupportedLookAndFeelException ulfe) {  System.err.println(""Old JRE in use. Get a new one"");  System.exit(-3); } From there go on and add your JButton like you normally would. The only change is that you use the setName(string) method to identify what the button should map to in the xml file. The xml file might look like this: <synth>  <style id=""button"">  <font name=""DIALOG"" size=""12"" style=""BOLD""/>  <state value=""MOUSE_OVER"">  <imagePainter method=""buttonBackground"" path=""dirt.png"" sourceInsets=""2 2 2 2""/>  <insets top=""2"" botton=""2"" right=""2"" left=""2""/>  </state>  <state value=""ENABLED"">  <imagePainter method=""buttonBackground"" path=""dirt.png"" sourceInsets=""2 2 2 2""/>  <insets top=""2"" botton=""2"" right=""2"" left=""2""/>  </state>  </style>  <bind style=""button"" type=""name"" key=""dirt""/> </synth> The bind element there specifies what to map to (in this example it will apply that styling to any buttons whose name property has been set to ""dirt""). And a couple of useful links: http://javadesktop.org/articles/synth/ http://java.sun.com/docs/books/tutorial/uiswing/lookandfeel/synth.html  When I was first learning Java we had to make Yahtzee and I thought it would be cool to create custom Swing components and containers instead of just drawing everything on one JPanel. The benefit of extending Swing components of course is to have the ability to add support for keyboard shortcuts and other accessibility features that you can't do just by having a paint() method print a pretty picture. It may not be done the best way however but it may be a good starting point for you. Edit 8/6 - If it wasn't apparent from the images each Die is a button you can click. This will move it to the DiceContainer below. Looking at the source code you can see that each Die button is drawn dynamically based on its value. Here are the basic steps: Create a class that extends JComponent Call parent constructor super() in your constructors Make sure you class implements MouseListener Put this in the constructor: enableInputMethods(true); addMouseListener(this); Override these methods: public Dimension getPreferredSize() public Dimension getMinimumSize() public Dimension getMaximumSize() Override this method: public void paintComponent(Graphics g) The amount of space you have to work with when drawing your button is defined by getPreferredSize() assuming getMinimumSize() and getMaximumSize() return the same value. I haven't experimented too much with this but depending on the layout you use for your GUI your button could look completely different. And finally the source code. In case I missed anything. Awesome! This code is very useful. Thanks! Hi first thanks for the code! I would suggest adding a 'setActionComme(String Command)' to your code. it is one of the ways to filter events in Swing. (but then you can argue that there is 1001 things that could be added to make things slightly better :P) Can you put the whole code here."
969,A,"How to implement ""Saving..."" dialog box in Java? I want to pop up a dialog box that says ""Saving..."" and once the operation is completed it simply disappears. While the saving is in progress I dont want the user to be able to do anything. I also dont want an OK button. What is the name of the Java class that allows me to do this? You might also consider using a javax.swing.JProgressBar within your dialog so you can show progress is happening. If you have enough information during the save process to give a percentage complete you can show that and if not you can show it as indeterminate (moving back and forth until complete). Then dispose the dialog once the save process is complete -- this would be nice user experience enhancement over showing a static text message for a fixed amount of time. Here's a tutorial with demo Java code showing an example dialog: http://java.sun.com/docs/books/tutorial/uiswing/components/progress.html.  I think what you may want is a modal JDialog. They make it fairly easy to block user interaction for your whole application and you have some extra control. The code snippet you posted will potentially have issues if your save operation takes longer than 2 seconds. I'd suggest calling your save() function in the place where you currently have the Thread.sleep(). That way you know that no matter how long the save takes the UI will be blocked. thanks..for that example i just meant for it to be just an example but thanks for being thorough.  Here's the final code I found that roughly simulated what I wanted to do: // Create dialog box JDialog dialog = new JDialog(new JFrame() ""Saving...""); // IMPORTANT: setLocationRelativeTo(null) is called AFTER you setSize() // otherwise your dialog box will not be at the center of the screen! dialog.setSize(200200); dialog.setLocationRelativeTo(null); dialog.toFront(); // raise above other java windows dialog.setVisible(true); // Sleep for 2 seconds try { Thread.sleep(2000); } catch (InterruptedException ex) { Logger.getLogger(JavaDialogBox.class.getName()).log(Level.SEVERE null ex); } // Then ""close"" the dialog box dialog.dispose(); Lastly found these 3 links to be quite helpful when writing the above code: Center the dialog to screen How to create JDialog How to pause execution  I think JDialog is what you want - be sure to call setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE) on it since unlike a JFrame its default behaviour is HIDE_ON_CLOSE. thanks for pointing me to the right direction."
970,A,"Set the text color in a Java textbox How does one set the color of text in a Java Swing textbox at run-time? At startup the color is grayish and when the user enters the textbox I wish to change the color to the normal text color. I am currently using the following code: private void txtScheduleInfoFocusGained(java.awt.event.FocusEvent evt) { try { if (currentClassIsNewClass() && txtScheduleInfo.getDocument().getText(0 txtScheduleInfo.getDocument().getLength()).equals(PASTE_SI_HERE)) { txtScheduleInfo.setText(""""); txtScheduleInfo.setForeground(java.awt.SystemColor.textText); } } catch (BadLocationException ex) { JOptionPane.showMessageDialog(this ""BLE\nContact Zian"" ""Unexpected Problem"" JOptionPane.ERROR_MESSAGE); } } At this time when the code runs the text still shows up in gray. Additional Code: Declaration (as a field):  private javax.swing.JTextPane txtScheduleInfo; Instantiation: txtScheduleInfo = new javax.swing.JTextPane(); Initialization: txtScheduleInfo.setForeground(java.awt.SystemColor.textInactiveText); txtScheduleInfo.setText(""Paste schedule information here""); txtScheduleInfo.addFocusListener(new java.awt.event.FocusAdapter() { public void focusGained(java.awt.event.FocusEvent evt) { txtScheduleInfoFocusGained(evt); } public void focusLost(java.awt.event.FocusEvent evt) { txtScheduleInfoFocusLost(evt); } }); Can you post a more complete example? I've done that. Did you check that your conditions are actually true at runtime with a debugger? Yes I did. Did you make sure the JTextBox is enabled? You can call setEnabled(true) on it to make sure. Not trying to be rude that's just the most likely cause (there's code in Swing to force graying-out of disabled components). If that doesn't fix it you can also trigger a repaint by calling txtScheduleInfo.repaint() which might cause it to repaint. If neither of these things helps you could post some code so we can see what's going on. Unfortunately neither of those solutions fixed the problem. I've posted additional code.  try this instead private void txtScheduleInfoFocusGained(java.awt.event.FocusEvent evt) { try { if (currentClassIsNewClass() && txtScheduleInfo.getDocument().getText(0 txtScheduleInfo.getDocument().getLength()).equals(PASTE_SI_HERE)) { txtScheduleInfo.setForeground(java.awt.SystemColor.textText); txtScheduleInfo.setText(""""); } } catch (BadLocationException ex) { JOptionPane.showMessageDialog(this ""BLE\nContact Zian"" ""Unexpected Problem"" JOptionPane.ERROR_MESSAGE); } } (The only change is swapping the order. Now you're setting the foreground colour before clearing the text.)  Doesn't Swing normally perform this behavior (changing color when the textbox gains focus for editing)? Try disabling all your color changing code and see if it works normally. If you're willing to post your code in a compilable form on PasteBin others can actually do full debugging too. Other Things I can suggest: Check that java.awt.SystemColor.textText is really the color you want (use methods on it to get the hex color and then display it in a color picker) Remove the line txtScheduleInfo.setForeground(java.awt.SystemColor.textInactiveText); as it may somehow be overriding the default painting if your focus handler is broken. Replace if (currentClassIsNewClass() && txtScheduleInfo.getDocument().getText(0 txtScheduleInfo.getDocument().getLength()).equals(PASTE_SI_HERE)) WITH if(true) Your focus event listener may never be triggering to change colors due to a condition in that if statement. Besides you know that focus has been gained anyway when that method is called."
971,A,"Should I be using SwingWorker threading or a recursive update for this animation? As I have said in my previous questions I'm still new to Java. I'm developing a tile-based game in Java. The movement is on a grid. I'm at the stage where I'm implementing character movement. My plan was to use the code which I pasted in this question. However this didn't work and I was told I should use SwingWorker. Being a problem solver I've been thinking about this over the day and I had a thought. I could achieve the same effect by doing things a bit differently. I mentioned that I had a timer that went off every 20 milliseconds calling a repaint. My idea was that I could have a method call before the repaint in the event for the timer which would move all of the people 1 unit nearer to their destination (next square/tile). Would that sort of thing work? Later on in the game there may be 100 or so people. Would 20ms be enough time to loop through all the people and move them one unit closer to their destination? Is 20ms too short a time? Am I just making no sense at all? Your opinions / answers / thoughts are welcome :) OK first to answer the 20 millis question. You can get quite a lot of game logic done in 20ms. But I'd say it's too frequently to be updating the display. You should also bear in mind that the OS generally dishes out CPU in the order of 10-20 ms timeslices-- in other words another process at any moment could easily delay your process by about that amount of time. Have a look for example at my article on the behaviour of Thread.sleep()-- notice from the graph that as the system is moderately busy the OS can't honour the sleep time we asked for. If you need an average sleep between frames of 100ms then 20ms or so jitter here and there won't be too bad. But 20ms jitter when you asked for 20ms will probably be more noticeable... So I'd probably start at 10 frames per second (100ms pauses) and see how that looks. As far as the code is concerned if your game logic will take more or less the same amount of time each tick then I'd start with logic-repaint-sleep on each tick. Remember you need to synchronize on the things you're painting so in your game logic thread you ideally need to avoid holding on to locks for too long. Thanks Neil. I actually came across your article and read it quite a few times! It's very informative in the area of Thread.sleep() . I will try as you suggested with 100ms and see how it goes. Thanks greatly for your help! :)  I agree with pretty much everything Bill said especially the part about Swing being enigmatic (although not really much more so than other graphics environments). To give a few references 30 fps (which is what most interlaced screens produce at) is 1 frame every 33 ms. 60 fps is about the highest that humans can perceive (1 frame / 16 ms) and most LCD monitors refresh at 60 or 75 Hz which would be the absolute fastest you could actually produce. 20 ms/frame is a frame rate of 50 fps which also coincides with the electric frequency in European territories and is just noticeable by the human eye. The main thing I would recommend against is to just do everything in a tight while loop. This will cause your game speed to be highly dependent on the system on which you play. On a faster system you may get frame spewing faster than the player can react even if it plays reasonably on an older one (or you'll have the converse problem on a decrepit machine). Using a timer will allow you to be more consistent in the rate but you have to make some defensive checks in case you miss a frame deadline. This means that your timer needs to know when the calculations are finished so if another frame ticks by and it hasn't finished then it will skip the next frame. Even better you log how long actually passes between calculations and adjust the actual movement traveled by your characters accordingly. Another warning: while the drawing must be done on the AWT thread and the calculations off of it (to keep your program responsive) the state also needs to be updated on the AWT thread. If you let the thread doing the calculations update the game state then the AWT thread will see this in the middle of a repaint leading to an effect called tearing. Thus you may need to make a copy of the state to post to the AWT thread. This is what a SwingWorker is for which you'll probably use in conjunction with a Timer. Amazingly most of what I said is actually new when compared to what I posted on your other question. Thank you again James This has proved most beneficial in my understanding of how things should work. I admit I'm still confused a bit how StringWorker is used but at least now I understand why its used! I think I will go with what Neil said and keep to the single thread for now by doing logic-repaint-sleep on each tick. If later on I need to do SwingWorker I'm sure You will see my questions again. Thanks for your help! :)  This area of swing has probably the most ""Black Magic"" of anything in Java. It can be tricky and there are a lot of approaches. The most important rule is to never modify the screen unless you are in the AWT thread but don't use the AWT thread for much more than modifying the screen. Since every swing ""Callback"" (like button listener) comes in on the AWT thread you normally don't have to think about this but for an active rendering situation you have to pay close attention. Generally in a larger system like this you do an entire calculation at once (move all your data) then you redraw everything that needs to be drawn in one step. So for the most part you calculate outside your paint system altogether in a continual thread then you'd call a repaint function at a top-level component. Repaint should deliver paint events to all your components on the AWT thread so that shouldn't be a problem. Then each component should look at its' state (which is already updated) and use that info to draw itself. This is how it should be done the basics but it can be slow and there are a lot of tricks to speed it up. You might want to look for a book that involves swing programming and games. Thanks for your answer. Allowed me to think things through more in my head as to how it could be done!"
972,A,"JFileChooser.showSaveDialog(…) - preserve suggested file name after changing directory There are already some questions about how to set a default file name for a JFileChooser control. I'm having a few problems with preserving that default filename when switching directories. Right now when I do that the original filename I supplied get over overwritten by the path of the new directory itself. Is there anything can be done in order to avoid this behavior? You could add a PropertyListener to the file chooser and if you get a ""directoryChanged"" property set your default file again. For example:  JFileChooser chooser = new JFileChooser(); chooser.addPropertyChangeListener( new PropertyChangeListener() { public void propertyChange( PropertyChangeEvent evt ) { if ( evt.getPropertyName().equals( ""directoryChanged"" ) ) { JFileChooser me = (JFileChooser)evt.getSource(); me.setSelectedFile( new File( ""text.txt"" ) ); } } }); It seems like it might do what you want but is more a workaround than a proper solution. I made a few more tests today and I actually figured out what is preventing your solution from working. I was calling fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES) and it didn't work because of that. Thank you. Hey abahgat I tried this out with System and Nimbus L&F on Vista and it works OK so yeah - most likely a win7 thing as you suggest rather than a L&F thing. I will have access to a Windows 7 box on Thursday to try it out but if you get it solved before then please post a comment or something. That doesn't seem to work on Windows 7. When I execute that code the filename field is not updated with the filename I supply although the corresponding PropertyChangeEvent (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY) is fired. I was using Vista with default look and feel. What L&F are you using?"
973,A,"Sending a keyboard event from java to any application (on-screen-keyboard) I am working on developing an on-screen keyboard with java. This keyboard has a JComponent for every possible key. When a mouse down is detected on the button I want to send a specific keyboard code to the application currently on focus. The keyboard itself is within a JFrame with no decorations and set to always-on-top. I found that the Robot class can be used to simulate these keyboard events on the native queue. However in this case selecting the JComponent would mean that the key-press is received on the JFrame and I wouldn't be able to receive it in the other application How can I keep my on-screen keyboard ""Always-without-focus""? Is it maybe possible to use another approach to send the key-press? The only solution I could find so far is to make every key a JComponent (so it can not have focus) and set the following properties on the JFrame:  setUndecorated(true); setFocusableWindowState(false); setFocusable(false); enableInputMethods(false); Now when using the robot class I can send events to any focused window by clicking on the keys. The only limitation is that it only seems to work for windows that belong to the same virtual machine and it doesn't work at all with any other system window.  have you tried to call native setfocus() or setactivewindow() functions to move focus before you use robot class?  I found jnativehook when I was trying to control a gamebot with actual keyboard and mouse commands (to be more ""human-like"").  I am not aware of any way of doing this in OS independent way. I don't know about Windows but it would be possible talk with X server over the X protocol.  Apparently the only way to do this is to have a JNI layer that will make the conversion from java to native. Java has no easy way to provide such funcionality. This could be an interesting concept for a small third party library for someone who wants to learn JNI..."
974,A,"Autoupdate feature in a Java Swing desktop App I've developed a desktop Swing app and I'm thinking about the best way to provide the autoupdate feature. I know that JavaWebStart provides this but I think that It doesn't suit my needs because I need to read local files so I would need to sign the jar. Besides JWS requires extra work to deploy in the server while now I only need to upload the .jar. I've been thinking about this approach: A first JAR (which never needs updating) loads the splashscreen checks the current version in a config.xml and compares it to the server config.xml. If server version is newer ask the user whether he wants to update. In that case download the new ""main.jar"" the new ""config.xml"" and the new splash/icon check MD5SUM and replace the old files with the new ones. Launch ""main.jar"". I don't know If I'm trying to reinvent the wheel or If there's a better pattern than the one I've put above. You are revinventing the wheel and you already know so since you mention Java WebStart. The deployment on the server is minimal you only need to post a few files there is no need for an active component on the server. I suggest using a certificate rather than checking a hash from https. With the hash technique a compromised https server means compromising all autoupdating clients. / Also check that you are installing a more current version to avoid downgrade attacks. / WebStart does give a limited interface to using files although control/customisation of the file browser is limited. I think that It's not so minimal. I need to deploy it in a server not controlled by me at all. I can't change mimetypes for example. Besides as I've said It would need to access local files so I would need to sign it. Well so I can use JWS sandbox to open/save files without signing. In that case I'll try JWS again. We did a similar thing. We just got it via https and downloaded the jar. To know if you need a new one we just check the size on the stream. Theoretically that may not work but in practice it did. We got even fancier by getting the directory listing where the jars were located parsing it and downloading each jar so the name of the jar wasn't hard coded either. There are a couple of ugly points though. First was launching a new jvm process to start the new jar is a not so simple. Second you have to be sure you don't corrupt your jar if your update fails in the middle. Finally there is no way to update the bootstraping jar with this process. In case anyone looks for a example on how to do it I built pretty much that over the last few days: https://github.com/UrsKR/updates-r-simple"
975,A,"loop through JPanel In order to initialise all JTextfFields on a JPanlel when users click a ""clear button"" I need to loop through the JPanel (instead of setting all individual field to """"). Can someone please show me how to use a For Each loop in order to iterate thru the JPanel in search of JTextFields. Very much appreciated Dallag. Whilst another answer shows a direct way to solve your problem your question is implying a poor solution. Generally want static dependencies between layers to be one way. You should need to go a pack through getCommponents. Casting (assuming generics) is an easy way to see that something has gone wrong. So when you create the text fields for a form add them to the list to be cleared in a clear operation as well as adding them to the panel. Of course in real code there probably other things you want to do to them too. In real code you probably want to be dealing with models (possibly Document) rather than JComponents. +1 for the idea of having list of interresting components Hi there Thank a lot. This sounds impressive but I would not know how to implement your solution. Comcrete examples are worth a 1000 words. Very much appreciated. Dallag. And to push it further I once tried an annotation based solution for fun. I annotated my fields in the class with my @SaveContent and used a reflective approach to load/save contents of the annotated components.  for (Component c : pane.getComponents()) { if (c instanceof JTextField) { ((JTextField)c).setText(""""); } } But if you have JTextFields more deeply nested you could use the following recursive form: void clearTextFields(Container container) { for (Component c : container.getComponents()) { if (c instanceof JTextField) { ((JTextField)c).setText(""""); } else if (c instanceof Container) { clearTextFields((Container)c); } } } Edit: A sample for Tom Hawtin - tackline suggestion would be to have list in your frame class: List<JTextField> fieldsToClear = new LinkedList<JTextField>(); and when you initialize the individual text fields add them to this list: someField = new JTextField(""Edit me""); { fieldsToClear.add(someField); } and when the user clicks on the clear button just: for (JTextField tf : fieldsToClear) { tf.setText(""""); } Does that clear combo boxes too? (Might as well be static btw.) JComboBox (extends JComponent) and JTextField (extends JTextComponent which extends JComponent) are on two different paths I checked the source of JComboBox and I don't see any place where JComboBox adds its editor component to its components list. Thank you so very much kd304 it worked a treat. Just had to add import java.awt.*; import javax.swing.*; import java.awt.Component; Yes sorry. I'm too customed to CTRL+SHIFT+O in Eclipse to organize my imports."
976,A,Populating Swing JComboBox from Enum I would like to populate a java.swing JComboBox with values from an Enum. e.g. public enum Mood { HAPPY SAD AWESOME; } and have these three values populate a readonly JComboBox. Thanks! The solution proposed by @Pierre is good. Usually you use a DefaultComboBoxModel or a ComboBoxModel or bindings to the ComboBoxModel for more complex stuff. By default a JComboBox is not editable.  If you don't want to (or can't) change initialization with default constructor then you can use setModel() method: JComboBox<Mood> comboBox = new JComboBox<>(); comboBox.setModel(new DefaultComboBoxModel<>(Mood.values())); Note [*Type Inference for Generic Instance Creation*](http://docs.oracle.com/javase/7/docs/technotes/guides/language/type-inference-generic-instance-creation.html) and [generic model](http://docs.oracle.com/javase/7/docs/api/javax/swing/DefaultComboBoxModel.html) new in Java 7.  try: new JComboBox(Mood.values());
977,A,"How to add a horizontal gap with a JLabel I have a JLabel (actually it is a JXLabel). I have put an icon and text on it. Now I wand to add some spacing on the left side of the component like this: I DON'T accept suggestion to move the JLabel or add spacing by modifying the image. I just want to know how to do it with plain java code. I have found the solution! setBorder(new EmptyBorder(01000)); Thanks everyone!  If you're trying to push the label to one side of it's container you can add a glue. Something like this: JPanel panel = new JPanel(); panel.setLayoutManager(new BoxLayout(panel BoxLayout.LINE_AXIS); panel.add(new JLabel(""this is your label with it's image and text"")); panel.add(Box.createHorizontalGlue()); Though your question isn't very clear.  You dont need to modify the preferredSize of the JLabel you can use the GridBagLayout Manager to specify separations between components you only have to use the GridBagLayout in the container and add the JXLabel to it with a GridBagConstraints object specifiying the insets to the left: JPanel panel=new JPanel(new GridBagLayout()); JLabel label=new JLabel(""xxxxx""); GridBagConstraints constraints=new GridBagConstraints(); constraints.insest.left=X; // X= number of pixels of separation from the left component panel.add(labelconstraints); Note that i have omitted a lot of configuration properties in the setup of the constraints you better read the documentacion of GridBagLayout  The like this: is not very clear but you can add spacing by adding a transparent border of a certain width to the label"
978,A,"Java Page through array  Test[] array = new Test[3]; array[0] = new RowBoat(""Wood"" ""Oars"" 10); array[1] = new PowerBoat(""Fiberglass"" ""Outboard"" 35); array[2] = new SailBoat(""Composite"" ""Sail"" 40); I have the above array and I need to display the results to a swing GUI with a next button that will display the first index values and when the next button is clicked it will display the next index values and so on.  for (int i=0;; i++) { boatMaterialTextField.setText(array[i].getBoatMaterial()); boatPropulsionField.setText(array[i].getBoatPropulstion()); } I have the above code working and of course it displays the last item in the array. My question is: How would I display the first index in the array and when the user clicks next display the next item in the array as well as go to the previous index when a back button is clicked? Simply put I need to page through each index when a button is clicked. Your for loop looks like an infinite loop to me. Are you sure you typed that correctly? do you mean you only get the values 10 35 40 in display? that loop will give you ang infinite loop. because you don't have any condition that says when to stop. e.g for (int i=0;i < array.length; i++) I used a tip from here that states the length check is redundant. Is that not accurate? http://developer.sonyericsson.com/site/global/techsupport/tipstrickscode/java/p_fastiteratingarrayorvectorjava.jsp You do not need a loop. When the frame first loads you can simply display the first item in the array. You can then create a next button.  JButton nextBtn; int currentIndex; ... currentIndex = 0; //display the first item in the array. boatMaterialTextField.setText(array[currentIndex].getBoatMaterial()); boatPropulsionField.setText(array[currentIndex].getBoatPropulstion()); nextBtn = new JButton(""Next>>""); nextBtn.addActionListener(new ActionListener(){ public void actionPerformed(ActionEvent e){ if(currentIndex < array.length){ boatMaterialTextField.setText(array[++currentIndex].getBoatMaterial()); boatPropulsionField.setText(array[currentIndex].getBoatPropulstion()); } } }); You can add another button for previous that simply decrements the currentIndex each time ensuring to check that it never becomes negative. That's slick Vincent very nice. Thank You"
979,A,"Why say panel and boxlayout twice? panel.setLayout(new BoxLayout(panel BoxLayout.Y_AXIS)); panel could most likely be replaced with ""Box panel = Box.createVerticalBox();"" in this case. Well mostly because BoxLayout is an old API before they knew any better. Use MigLayout if you are interested in a good flexible modern layout manager  The panel arguement to BoxLayout is somewhat confusing. You need to specify the target that the BoxLayout instance is attached to. Further in many methods based on the LayoutManager2 Interface BoxLayout requires the panel to be passed in and it performs a check that you have passed in the right one. The Y_AXIS is a class variable that is one of two legal int values for the orientation of the BoxLayout. You could just pass in the value 0 but using the constant is much better.  The BoxLayout is easy - the argument (Y_AXIS) to the BoxLayout constructor belongs to the BoxLayout class so you need to specify that. There may well be another Y_AXIS value which would be the wrong one to use. This is the basis of encapsulation. With regards to the panel double-mention I can't be sure. But it seems plausible that the panel needs to be told what its layout manager is and the layout manager needs to know which panel it's applied to (since it needs to know the contents of the panel in order to lay them out intelligently). Not sure I'm satisified with that answer (on the panel double mention). It isn't so for other layout managers and since the setLayout() method belongs the panel object itself that should be enough just like it's done for other layout managers... Thus I prefer Gregory Mostizky's answer"
980,A,"JPopupMenu Behavior I prepared a small test case below. My problem is when i right click on the window. JPopupMenu show up but if i click anywhere outside the JWindow menu does not disappear. I have to click somewhere on the window to get rid of it which is not the expected behavior. EDIT: after reading akf's answer i switched to JFrame when frame is in focus and pop up menu is showing it disappears when you click on another window. but if the window does not have focus and you click somewhere menu does not disappear.  import javax.swing.*; import java.awt.*; import java.awt.event.*; class test { static class window extends JWindow implements MouseListener MouseMotionListener{ JPopupMenu popMenu; JPanel panel = new JPanel(); Point location; MouseEvent pressed; public window(){ addMouseListener( this ); addMouseMotionListener( this ); JLabel label = new JLabel(""JWindow"" JLabel.CENTER); initPopMenu(); add(label); setVisible(true); setAlwaysOnTop(true); setLocationRelativeTo(null); pack(); } public void initPopMenu(){ popMenu = new JPopupMenu(); JMenuItem item; item = new JMenuItem( ""Title"" ); item.setEnabled(false); popMenu.add(item); popMenu.addSeparator(); item = new JMenuItem( ""Item One"" ); popMenu.add(item); item = new JMenuItem( ""Item 2"" ); popMenu.add(item); item = new JMenuItem( ""Item 3"" ); popMenu.add(item); } public void mousePressed(MouseEvent e) { pressed = e; int nModifier = e.getModifiers(); if (((nModifier & InputEvent.BUTTON2_MASK) != 0)|| ((nModifier & InputEvent.BUTTON3_MASK) != 0)) popMenu.show( this e.getX() e.getY() ); } public void mouseClicked(MouseEvent e) { } public void mouseReleased(MouseEvent e) {} public void mouseDragged(MouseEvent me){ } public void mouseMoved(MouseEvent e) {} public void mouseEntered(MouseEvent e) {} public void mouseExited(MouseEvent e) {} } public static void main(String[] args) { window dw = new window(); } } just right click on it it shows the menu even if it does not have focus this happens on windows and mac os x. which OS and Java version are you using? I tested this on WinXP with Java 6 and after switching to JFrame if the window loses focus the popup menu disappears. I'm confused as to how you can get the popup menu to display if the window doesn't have focus... In Java 6 on Windows I cannot get the popup to even display with the code you have provided. On the other hand if I change your superclass to JFrame it works as desired with the popup going away when I click outside of the window. Is there a reason why you are using JWindow as your superclass and not JFrame? If you wish to have a border-less/title-less window you can call setUndecorated(true) on your JFrame (before you set visible and pack of course.) i switched to JFrame but same thing is happening i updated the question explaining it.  Take a look at the Java Doc for JWindow.isFocusableWindow A JWindow cannot be the focused window unless it has an owner and the owner is visible. You're using the default constructor so your JWindow has the shared owner asn is not focusable. When it is not focusable it cannot detect the loss of focus when you click somewhere else. I changed JWindow to JFrame and added a call to setUndecorated(true); before the call to setVisible and it's working for me. If these changes do not make it work for you please post the version of Java you are using: java -fullversion  What about hiding the menu if it's visible from within the MouseExited method? when other non java windows has focus they are not triggered. this is a little on always on top window where people can drag and drop things."
981,A,"Need FileDialog with a file type filter in Java I have a JDialog with a button/textfield for the user to select a file. Here's the code: FileDialog chooser = new FileDialog(this ""Save As"" FileDialog.SAVE ); String startDir = saveAsField.getText().substring( 0 saveAsField.getText().lastIndexOf('\\') ); chooser.setDirectory(startDir); chooser.setVisible(true); String fileName = chooser.getFile(); My problem is that instead of seeing an All Files filter I want to provide a custom filter e.g. for Word docs or something. I setup a custom FilenameFilter using setFilenameFilter() but it didn't seem to work. I did notice that it says in the docs that the custom filter doesn't work in Windows (this runs in Windows XP/Vista/7). Here was my implementation of the filter: chooser.setFilenameFilter( new geFilter() ); public class geFilter implements FilenameFilter { public boolean accept(File dir String name) { return name.endsWith( "".doc"" ) || name.endsWith( "".docx"" ); } } Am I doing something wrong here? Also I want a description to appear in the box like ""Microsoft Word (*.doc *.docx)"" but I'm not sure how to do that. Any and all help is appreciated. I am also trying to do that. I want to use FileDialog instead of JFileChooser. I found the answer here: http://www.rgagnon.com/javadetails/java-0247.html He says that ""on the Win platform the setFilenameFilter method don't work. We must use the setFile method instead to set a filter."" There is source code at the specified link. I tested and it works: FileDialog fd = new FileDialog((Frame) null ""Save File"" FileDialog.SAVE); fd.setFile(""*.txt""); fd.setVisible(true); String file = fd.getFile(); System.out.println(file); System.exit(0);  If you ever use JavaFX 2 the FileChooser class will do exactly what you need without any of JFileChooser/FileDialog problems. You can also embed JavaFX 2 components inside Swing applications but you need JavaFX runtime. Example:  FileChooser fc = new FileChooser(); FileChooser.ExtensionFilter filter; filter = new FileChooser.ExtensionFilter(""Text files (*.txt)"" ""*.txt""); fc.getExtensionFilters().add(filter); File f = fc.showOpenDialog(primaryStage); System.out.println(f);  You can call the native Windows Filedialog (CFileDialog) with JNI. Filters can be set for CFileDialog easily. I wrote a simple wrapper class for CFileDialog several months ago If you are interested you can get the source and binary from Xfiledialog project on google code  AWT isn't really the preferred way of writing Java GUI apps these days. Sun seems to have mostly abandoned it. The two most popular options are Swing and SWT. So I think they didn't really develop the APIs very extensively to add modern features. (err to answer your question: No you don't appear to be able to do that with AWT) Swing has the advantage that it is truly write-once-run-anywhere and it can look exactly the same everywhere. There are Look & Feels that try to make Swing look native some are better than others (Mac isn't terrible Windows is okay GTK isn't). Still if you want an app that really looks and acts EXACTLY the same everywhere Swing will let you do that. Plus it runs out-of-the-box without any extra libraries. Performance isn't great. Swing's JFileChooser will let you do what you want. Create a subclass of FileFilter and call setFileFilter on the JFileChooser. SWT takes the write-once-run-anywhere to the opposite extreme. You still have one codebase that you write against but it actually uses the native widgets on each platform so it generally looks like a native app (not perfect everywhere but still impressive). It's fast and pretty reliable in my experience. Eclipse (and other high profile software) uses SWT so it's in pretty heavy use. But it does require platform-specific JARs and DLLs. This turned out to be the correct answer for me and I even eventually figured out how to style the JFileChooser to match the rest of the app. Apparently this just isn't possible with a FileDialog... that still makes me sad.  since you are using JDialog that is a swing class why not using JFileChooser?  JFileChooser fc = new JFileChooser(""C:\\""); fc.setFileFilter(new FileNameExtensionFilter(""Microsoft Word (*.doc *.docx)"" ""doc"" ""docx"")); FileNameExtensionFilter is a nice Java 6 class that does exactly what you want. The reason I'm using FileDialog is that it perfectly matches the Windows look and feel and is also consistent with other dialogs in our application. Can I make a JFileChooser that matches?"
982,A,"How to close a modal JDialog when user clicks outside of JDialog? I have a Undecorated Modal JDialog which I want to setVisible(false) when the user clicks outside of the modal dialog. Is this possible in Swing? What I am doing is popping up a custom editor for a text field like a date selector. Is there an easier way to do what I want? EDIT Remember that modal blocks on the call to setVisible(true) so you can't just say ""don't use a modal dialog"" And I've tried focus listeners on the dialog they don't trigger when its modal. Did you try the addAWTEventListener method this should give you events for all specified event types e.g. in the example I gave below this would be all mouse events. I know you said ""so you can't just say ""don't use a modal dialog"""" presumably this is because you have code that executes straight after the setVisible call? Could you not move this into maybe a listener for when the dialog is closed? Without knowing details of your app it may provide a cleaner design especially when it comes to unit testing I like to move dialogs out into a strategy for getting user responses that way I can inject mock strategies without hanging a unit test when it runs headless or without having to mess around with creating events programatically. It's not necessary to be a modal dialog (modal means that it prevents you from using the owner window until you hide the dialog). Better try this: final JDialog dlg ... dlg.setModal(false); dlg.addWindowFocusListener(new WindowFocusListener() { public void windowLostFocus(WindowEvent e) { dlg.setVisible(false); } public void windowGainedFocus(WindowEvent e) { } });  Probably add a FocusListener and hide the dialog when it looses the focus. May be tricky if some elements in the dialog can have focus. Anyways experiment with it. Can a modal dialog (and child components) loose focus for anything other than switching to another application? Ah got what you mean you meant instead of a modal dialog! Don't know why this was voted down  Try to set the modal to false and then use windowsDeactivated() for close de dialog (dialog.dispose()) works for me.  Use a WindowListener and handle the windowDeactivated() event.  EDIT: Changed to use WindowFocusListener instead of FocusListener as well as check for descending components on the focus lost in order to not hide if a child component gains focus. A simple way would be to add a window focus listener on the dialog that hides it when focus is lost. I don't see the need for modality in this case. For example: import javax.swing.*; import java.awt.*; import java.awt.event.WindowEvent; import java.awt.event.WindowFocusListener; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; public class ClickAwayDialog extends JDialog { public ClickAwayDialog(final Frame owner) { super(owner); JPanel pnl = new JPanel(new BorderLayout()); pnl.add(new JLabel(""Click outside this dialog in the parent frame to close it"") BorderLayout.NORTH); JButton btn = new JButton(""Click Me""); btn.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { JOptionPane.showMessageDialog(ClickAwayDialog.this ""New Child Window""); } }); pnl.add(btn BorderLayout.CENTER); this.setContentPane(pnl); this.pack(); this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE); this.setLocationRelativeTo(owner); this.setAlwaysOnTop(true); this.addWindowFocusListener(new WindowFocusListener() { public void windowGainedFocus(WindowEvent e) { //do nothing } public void windowLostFocus(WindowEvent e) { if (SwingUtilities.isDescendingFrom(e.getOppositeWindow() ClickAwayDialog.this)) { return; } ClickAwayDialog.this.setVisible(false); } }); } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { JFrame parent = new JFrame(); parent.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE); parent.setSize(300 300); parent.setLocationByPlatform(true); parent.setVisible(true); ClickAwayDialog dlg = new ClickAwayDialog(parent); dlg.setVisible(true); } }); } } Yes I totally understand how one can do this without a modal dialog but the point of the question was if it was possible to do it with a modal dialog. The main advantage of using a modal dialog is it blocks when setVisible(true). My goal was to not need to restructure the program to use a non-modal dialog or write a utility to emulate the blocking nature in a non-modal dialog. Focus lost would have to ensure the component that gained the focus is not a child component of the dialog so you will need to search up the component hierarchy via `getParent()` @vickirk -- good point. I changed the example above to check for descendant components (arguably an edge case but I enhanced the example to allow creating a child window of the dialog). I also changed it to use a window focus listener.  It's not a modal dialog if you can click outside of it and ""something"" happens. All the answers are correct you should be creating a non-modal dialog and then deal with your use case via a FocusListener. This is the closest answer to ""No"". That's all I was asking. Not how I can achieve this without a non-modal dialog.  Not really a modal dialog then if clicking else where closes it maybe you want setAlwaysOnTop However something like the following should do the trick (untested). Note I would recommend moving the code into something better designed than use as provided. static JDialog dialog = ... Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener() { public void eventDispatched(AWTEvent e) { dialog.setVisible(false); SwingUtils.invokeLater(new Runnable(){ public void run(){ Toolkit.getDefaultToolkit().removeAWTEventListener(this); } }); } } AWTEvent.MOUSE_EVENT_MASK); dialog.setVisible(true);"
983,A,what is the best way to use dates with java swing what i want to do is having like the java script popup date chooser in my application. i am using java swing and would like to avoid any input mistakes by the user. specifying a format is easy to implement but not user friendly for the user. what are your suggestion ? any libraries? There are a number of date picker libraries for Swing. I have used the JXDatePicker from SwingX and JCalendar in the past.  Use a date picker like JCalendar or JDatePicker. Since users can't type raw date strings you don't have to worry about their mistakes. Edit: drhorrible is right. I've fixed the link now. I may be crazy but I don't think your JCalendar link points to JCalendar...(is this it? http://www.toedter.com/en/jcalendar/index.html)
984,A,"How to implement draggable tab using Java Swing? How do I implement a draggable tab using Java Swing? Instead of the static JTabbedPane I would like to drag-and-drop a tab to different position to rearrange the tabs. EDIT: The Java Tutorials - Drag and Drop and Data Transfer. I am interested as well! Good question! I liked Terai Atsuhiro san's DnDTabbedPane but I wanted more from it. The original Terai implementation transfered tabs within the TabbedPane but it would be nicer if I could drag from one TabbedPane to another. Inspired by @Tom's effort I decided to modify the code myself. There are some details I added. For example the ghost tab now slides along the tabbed pane instead of moving together with the mouse. setAcceptor(TabAcceptor a_acceptor) should let the consumer code decide whether to let one tab transfer from one tabbed pane to another. The default acceptor always returns true. /** Modified DnDTabbedPane.java * http://java-swing-tips.blogspot.com/2008/04/drag-and-drop-tabs-in-jtabbedpane.html * originally written by Terai Atsuhiro. * so that tabs can be transfered from one pane to another. * eed3si9n. */ import java.awt.*; import java.awt.datatransfer.*; import java.awt.dnd.*; import java.awt.geom.*; import java.awt.image.*; import javax.swing.*; public class DnDTabbedPane extends JTabbedPane { public static final long serialVersionUID = 1L; private static final int LINEWIDTH = 3; private static final String NAME = ""TabTransferData""; private final DataFlavor FLAVOR = new DataFlavor( DataFlavor.javaJVMLocalObjectMimeType NAME); private static GhostGlassPane s_glassPane = new GhostGlassPane(); private boolean m_isDrawRect = false; private final Rectangle2D m_lineRect = new Rectangle2D.Double(); private final Color m_lineColor = new Color(0 100 255); private TabAcceptor m_acceptor = null; public DnDTabbedPane() { super(); final DragSourceListener dsl = new DragSourceListener() { public void dragEnter(DragSourceDragEvent e) { e.getDragSourceContext().setCursor(DragSource.DefaultMoveDrop); } public void dragExit(DragSourceEvent e) { e.getDragSourceContext() .setCursor(DragSource.DefaultMoveNoDrop); m_lineRect.setRect(0 0 0 0); m_isDrawRect = false; s_glassPane.setPoint(new Point(-1000 -1000)); s_glassPane.repaint(); } public void dragOver(DragSourceDragEvent e) { //e.getLocation() //This method returns a Point indicating the cursor location in screen coordinates at the moment TabTransferData data = getTabTransferData(e); if (data == null) { e.getDragSourceContext().setCursor( DragSource.DefaultMoveNoDrop); return; } // if /* Point tabPt = e.getLocation(); SwingUtilities.convertPointFromScreen(tabPt DnDTabbedPane.this); if (DnDTabbedPane.this.contains(tabPt)) { int targetIdx = getTargetTabIndex(tabPt); int sourceIndex = data.getTabIndex(); if (getTabAreaBound().contains(tabPt) && (targetIdx >= 0) && (targetIdx != sourceIndex) && (targetIdx != sourceIndex + 1)) { e.getDragSourceContext().setCursor( DragSource.DefaultMoveDrop); return; } // if e.getDragSourceContext().setCursor( DragSource.DefaultMoveNoDrop); return; } // if */ e.getDragSourceContext().setCursor( DragSource.DefaultMoveDrop); } public void dragDropEnd(DragSourceDropEvent e) { m_isDrawRect = false; m_lineRect.setRect(0 0 0 0); // m_dragTabIndex = -1; if (hasGhost()) { s_glassPane.setVisible(false); s_glassPane.setImage(null); } } public void dropActionChanged(DragSourceDragEvent e) { } }; final DragGestureListener dgl = new DragGestureListener() { public void dragGestureRecognized(DragGestureEvent e) { // System.out.println(""dragGestureRecognized""); Point tabPt = e.getDragOrigin(); int dragTabIndex = indexAtLocation(tabPt.x tabPt.y); if (dragTabIndex < 0) { return; } // if initGlassPane(e.getComponent() e.getDragOrigin() dragTabIndex); try { e.startDrag(DragSource.DefaultMoveDrop new TabTransferable(DnDTabbedPane.this dragTabIndex) dsl); } catch (InvalidDnDOperationException idoe) { idoe.printStackTrace(); } } }; //dropTarget = new DropTarget(this DnDConstants.ACTION_COPY_OR_MOVE new CDropTargetListener() true); new DragSource().createDefaultDragGestureRecognizer(this DnDConstants.ACTION_COPY_OR_MOVE dgl); m_acceptor = new TabAcceptor() { public boolean isDropAcceptable(DnDTabbedPane a_component int a_index) { return true; } }; } public TabAcceptor getAcceptor() { return m_acceptor; } public void setAcceptor(TabAcceptor a_value) { m_acceptor = a_value; } private TabTransferData getTabTransferData(DropTargetDropEvent a_event) { try { TabTransferData data = (TabTransferData) a_event.getTransferable().getTransferData(FLAVOR); return data; } catch (Exception e) { e.printStackTrace(); } return null; } private TabTransferData getTabTransferData(DropTargetDragEvent a_event) { try { TabTransferData data = (TabTransferData) a_event.getTransferable().getTransferData(FLAVOR); return data; } catch (Exception e) { e.printStackTrace(); } return null; } private TabTransferData getTabTransferData(DragSourceDragEvent a_event) { try { TabTransferData data = (TabTransferData) a_event.getDragSourceContext() .getTransferable().getTransferData(FLAVOR); return data; } catch (Exception e) { e.printStackTrace(); } return null; } class TabTransferable implements Transferable { private TabTransferData m_data = null; public TabTransferable(DnDTabbedPane a_tabbedPane int a_tabIndex) { m_data = new TabTransferData(DnDTabbedPane.this a_tabIndex); } public Object getTransferData(DataFlavor flavor) { return m_data; // return DnDTabbedPane.this; } public DataFlavor[] getTransferDataFlavors() { DataFlavor[] f = new DataFlavor[1]; f[0] = FLAVOR; return f; } public boolean isDataFlavorSupported(DataFlavor flavor) { return flavor.getHumanPresentableName().equals(NAME); } } class TabTransferData { private DnDTabbedPane m_tabbedPane = null; private int m_tabIndex = -1; public TabTransferData() { } public TabTransferData(DnDTabbedPane a_tabbedPane int a_tabIndex) { m_tabbedPane = a_tabbedPane; m_tabIndex = a_tabIndex; } public DnDTabbedPane getTabbedPane() { return m_tabbedPane; } public void setTabbedPane(DnDTabbedPane pane) { m_tabbedPane = pane; } public int getTabIndex() { return m_tabIndex; } public void setTabIndex(int index) { m_tabIndex = index; } } private Point buildGhostLocation(Point a_location) { Point retval = new Point(a_location); switch (getTabPlacement()) { case JTabbedPane.TOP: { retval.y = 1; retval.x -= s_glassPane.getGhostWidth() / 2; } break; case JTabbedPane.BOTTOM: { retval.y = getHeight() - 1 - s_glassPane.getGhostHeight(); retval.x -= s_glassPane.getGhostWidth() / 2; } break; case JTabbedPane.LEFT: { retval.x = 1; retval.y -= s_glassPane.getGhostHeight() / 2; } break; case JTabbedPane.RIGHT: { retval.x = getWidth() - 1 - s_glassPane.getGhostWidth(); retval.y -= s_glassPane.getGhostHeight() / 2; } break; } // switch retval = SwingUtilities.convertPoint(DnDTabbedPane.this retval s_glassPane); return retval; } class CDropTargetListener implements DropTargetListener { public void dragEnter(DropTargetDragEvent e) { // System.out.println(""DropTarget.dragEnter: "" + DnDTabbedPane.this); if (isDragAcceptable(e)) { e.acceptDrag(e.getDropAction()); } else { e.rejectDrag(); } // if } public void dragExit(DropTargetEvent e) { // System.out.println(""DropTarget.dragExit: "" + DnDTabbedPane.this); m_isDrawRect = false; } public void dropActionChanged(DropTargetDragEvent e) { } public void dragOver(final DropTargetDragEvent e) { TabTransferData data = getTabTransferData(e); if (getTabPlacement() == JTabbedPane.TOP || getTabPlacement() == JTabbedPane.BOTTOM) { initTargetLeftRightLine(getTargetTabIndex(e.getLocation()) data); } else { initTargetTopBottomLine(getTargetTabIndex(e.getLocation()) data); } // if-else repaint(); if (hasGhost()) { s_glassPane.setPoint(buildGhostLocation(e.getLocation())); s_glassPane.repaint(); } } public void drop(DropTargetDropEvent a_event) { // System.out.println(""DropTarget.drop: "" + DnDTabbedPane.this); if (isDropAcceptable(a_event)) { convertTab(getTabTransferData(a_event) getTargetTabIndex(a_event.getLocation())); a_event.dropComplete(true); } else { a_event.dropComplete(false); } // if-else m_isDrawRect = false; repaint(); } public boolean isDragAcceptable(DropTargetDragEvent e) { Transferable t = e.getTransferable(); if (t == null) { return false; } // if DataFlavor[] flavor = e.getCurrentDataFlavors(); if (!t.isDataFlavorSupported(flavor[0])) { return false; } // if TabTransferData data = getTabTransferData(e); if (DnDTabbedPane.this == data.getTabbedPane() && data.getTabIndex() >= 0) { return true; } // if if (DnDTabbedPane.this != data.getTabbedPane()) { if (m_acceptor != null) { return m_acceptor.isDropAcceptable(data.getTabbedPane() data.getTabIndex()); } // if } // if return false; } public boolean isDropAcceptable(DropTargetDropEvent e) { Transferable t = e.getTransferable(); if (t == null) { return false; } // if DataFlavor[] flavor = e.getCurrentDataFlavors(); if (!t.isDataFlavorSupported(flavor[0])) { return false; } // if TabTransferData data = getTabTransferData(e); if (DnDTabbedPane.this == data.getTabbedPane() && data.getTabIndex() >= 0) { return true; } // if if (DnDTabbedPane.this != data.getTabbedPane()) { if (m_acceptor != null) { return m_acceptor.isDropAcceptable(data.getTabbedPane() data.getTabIndex()); } // if } // if return false; } } private boolean m_hasGhost = true; public void setPaintGhost(boolean flag) { m_hasGhost = flag; } public boolean hasGhost() { return m_hasGhost; } /** * returns potential index for drop. * @param a_point point given in the drop site component's coordinate * @return returns potential index for drop. */ private int getTargetTabIndex(Point a_point) { boolean isTopOrBottom = getTabPlacement() == JTabbedPane.TOP || getTabPlacement() == JTabbedPane.BOTTOM; // if the pane is empty the target index is always zero. if (getTabCount() == 0) { return 0; } // if for (int i = 0; i < getTabCount(); i++) { Rectangle r = getBoundsAt(i); if (isTopOrBottom) { r.setRect(r.x - r.width / 2 r.y r.width r.height); } else { r.setRect(r.x r.y - r.height / 2 r.width r.height); } // if-else if (r.contains(a_point)) { return i; } // if } // for Rectangle r = getBoundsAt(getTabCount() - 1); if (isTopOrBottom) { int x = r.x + r.width / 2; r.setRect(x r.y getWidth() - x r.height); } else { int y = r.y + r.height / 2; r.setRect(r.x y r.width getHeight() - y); } // if-else return r.contains(a_point) ? getTabCount() : -1; } private void convertTab(TabTransferData a_data int a_targetIndex) { DnDTabbedPane source = a_data.getTabbedPane(); int sourceIndex = a_data.getTabIndex(); if (sourceIndex < 0) { return; } // if Component cmp = source.getComponentAt(sourceIndex); String str = source.getTitleAt(sourceIndex); if (this != source) { source.remove(sourceIndex); if (a_targetIndex == getTabCount()) { addTab(str cmp); } else { if (a_targetIndex < 0) { a_targetIndex = 0; } // if insertTab(str null cmp null a_targetIndex); } // if setSelectedComponent(cmp); // System.out.println(""press=""+sourceIndex+"" next=""+a_targetIndex); return; } // if if (a_targetIndex < 0 || sourceIndex == a_targetIndex) { //System.out.println(""press=""+prev+"" next=""+next); return; } // if if (a_targetIndex == getTabCount()) { //System.out.println(""last: press=""+prev+"" next=""+next); source.remove(sourceIndex); addTab(str cmp); setSelectedIndex(getTabCount() - 1); } else if (sourceIndex > a_targetIndex) { //System.out.println("" >: press=""+prev+"" next=""+next); source.remove(sourceIndex); insertTab(str null cmp null a_targetIndex); setSelectedIndex(a_targetIndex); } else { //System.out.println("" <: press=""+prev+"" next=""+next); source.remove(sourceIndex); insertTab(str null cmp null a_targetIndex - 1); setSelectedIndex(a_targetIndex - 1); } } private void initTargetLeftRightLine(int next TabTransferData a_data) { if (next < 0) { m_lineRect.setRect(0 0 0 0); m_isDrawRect = false; return; } // if if ((a_data.getTabbedPane() == this) && (a_data.getTabIndex() == next || next - a_data.getTabIndex() == 1)) { m_lineRect.setRect(0 0 0 0); m_isDrawRect = false; } else if (getTabCount() == 0) { m_lineRect.setRect(0 0 0 0); m_isDrawRect = false; return; } else if (next == 0) { Rectangle rect = getBoundsAt(0); m_lineRect.setRect(-LINEWIDTH / 2 rect.y LINEWIDTH rect.height); m_isDrawRect = true; } else if (next == getTabCount()) { Rectangle rect = getBoundsAt(getTabCount() - 1); m_lineRect.setRect(rect.x + rect.width - LINEWIDTH / 2 rect.y LINEWIDTH rect.height); m_isDrawRect = true; } else { Rectangle rect = getBoundsAt(next - 1); m_lineRect.setRect(rect.x + rect.width - LINEWIDTH / 2 rect.y LINEWIDTH rect.height); m_isDrawRect = true; } } private void initTargetTopBottomLine(int next TabTransferData a_data) { if (next < 0) { m_lineRect.setRect(0 0 0 0); m_isDrawRect = false; return; } // if if ((a_data.getTabbedPane() == this) && (a_data.getTabIndex() == next || next - a_data.getTabIndex() == 1)) { m_lineRect.setRect(0 0 0 0); m_isDrawRect = false; } else if (getTabCount() == 0) { m_lineRect.setRect(0 0 0 0); m_isDrawRect = false; return; } else if (next == getTabCount()) { Rectangle rect = getBoundsAt(getTabCount() - 1); m_lineRect.setRect(rect.x rect.y + rect.height - LINEWIDTH / 2 rect.width LINEWIDTH); m_isDrawRect = true; } else if (next == 0) { Rectangle rect = getBoundsAt(0); m_lineRect.setRect(rect.x -LINEWIDTH / 2 rect.width LINEWIDTH); m_isDrawRect = true; } else { Rectangle rect = getBoundsAt(next - 1); m_lineRect.setRect(rect.x rect.y + rect.height - LINEWIDTH / 2 rect.width LINEWIDTH); m_isDrawRect = true; } } private void initGlassPane(Component c Point tabPt int a_tabIndex) { //Point p = (Point) pt.clone(); getRootPane().setGlassPane(s_glassPane); if (hasGhost()) { Rectangle rect = getBoundsAt(a_tabIndex); BufferedImage image = new BufferedImage(c.getWidth() c.getHeight() BufferedImage.TYPE_INT_ARGB); Graphics g = image.getGraphics(); c.paint(g); image = image.getSubimage(rect.x rect.y rect.width rect.height); s_glassPane.setImage(image); } // if s_glassPane.setPoint(buildGhostLocation(tabPt)); s_glassPane.setVisible(true); } private Rectangle getTabAreaBound() { Rectangle lastTab = getUI().getTabBounds(this getTabCount() - 1); return new Rectangle(0 0 getWidth() lastTab.y + lastTab.height); } public void paintComponent(Graphics g) { super.paintComponent(g); if (m_isDrawRect) { Graphics2D g2 = (Graphics2D) g; g2.setPaint(m_lineColor); g2.fill(m_lineRect); } // if } public interface TabAcceptor { boolean isDropAcceptable(DnDTabbedPane a_component int a_index); } } class GhostGlassPane extends JPanel { public static final long serialVersionUID = 1L; private final AlphaComposite m_composite; private Point m_location = new Point(0 0); private BufferedImage m_draggingGhost = null; public GhostGlassPane() { setOpaque(false); m_composite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER 0.7f); } public void setImage(BufferedImage draggingGhost) { m_draggingGhost = draggingGhost; } public void setPoint(Point a_location) { m_location.x = a_location.x; m_location.y = a_location.y; } public int getGhostWidth() { if (m_draggingGhost == null) { return 0; } // if return m_draggingGhost.getWidth(this); } public int getGhostHeight() { if (m_draggingGhost == null) { return 0; } // if return m_draggingGhost.getHeight(this); } public void paintComponent(Graphics g) { if (m_draggingGhost == null) { return; } // if Graphics2D g2 = (Graphics2D) g; g2.setComposite(m_composite); g2.drawImage(m_draggingGhost (int) m_location.getX() (int) m_location.getY() null); } }  Curses! Beaten to the punch by a Google search. Unfortunately it's true there is no easy way to create draggable tab panes (or any other components) in Swing. So whilst the example above is complete this one I've just written is a bit simpler. So it will hopefully demonstrate the more advanced techniques involved a bit clearer. The steps are: Detect that a drag has occurred Draw the dragged tab to an offscreen buffer Track the mouse position whilst dragging occurs Draw the tab in the buffer on top of the component. The above example will give you what you want but if you want to really understand the techniques applied here it might be a better exercise to round off the edges of this example and add the extra features demonstrated above to it. Or maybe I'm just disappointed because I spent time writing this solution when one already existed :p import java.awt.Component; import java.awt.Graphics; import java.awt.Image; import java.awt.Point; import java.awt.Rectangle; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import java.awt.event.MouseMotionAdapter; import java.awt.image.BufferedImage; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JTabbedPane; public class DraggableTabbedPane extends JTabbedPane { private boolean dragging = false; private Image tabImage = null; private Point currentMouseLocation = null; private int draggedTabIndex = 0; public DraggableTabbedPane() { super(); addMouseMotionListener(new MouseMotionAdapter() { public void mouseDragged(MouseEvent e) { if(!dragging) { // Gets the tab index based on the mouse position int tabNumber = getUI().tabForCoordinate(DraggableTabbedPane.this e.getX() e.getY()); if(tabNumber >= 0) { draggedTabIndex = tabNumber; Rectangle bounds = getUI().getTabBounds(DraggableTabbedPane.this tabNumber); // Paint the tabbed pane to a buffer Image totalImage = new BufferedImage(getWidth() getHeight() BufferedImage.TYPE_INT_ARGB); Graphics totalGraphics = totalImage.getGraphics(); totalGraphics.setClip(bounds); // Don't be double buffered when painting to a static image. setDoubleBuffered(false); paintComponent(totalGraphics); // Paint just the dragged tab to the buffer tabImage = new BufferedImage(bounds.width bounds.height BufferedImage.TYPE_INT_ARGB); Graphics graphics = tabImage.getGraphics(); graphics.drawImage(totalImage 0 0 bounds.width bounds.height bounds.x bounds.y bounds.x + bounds.width bounds.y+bounds.height DraggableTabbedPane.this); dragging = true; repaint(); } } else { currentMouseLocation = e.getPoint(); // Need to repaint repaint(); } super.mouseDragged(e); } }); addMouseListener(new MouseAdapter() { public void mouseReleased(MouseEvent e) { if(dragging) { int tabNumber = getUI().tabForCoordinate(DraggableTabbedPane.this e.getX() 10); if(tabNumber >= 0) { Component comp = getComponentAt(draggedTabIndex); String title = getTitleAt(draggedTabIndex); removeTabAt(draggedTabIndex); insertTab(title null comp null tabNumber); } } dragging = false; tabImage = null; } }); } protected void paintComponent(Graphics g) { super.paintComponent(g); // Are we dragging? if(dragging && currentMouseLocation != null && tabImage != null) { // Draw the dragged tab g.drawImage(tabImage currentMouseLocation.x currentMouseLocation.y this); } } public static void main(String[] args) { JFrame test = new JFrame(""Tab test""); test.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); test.setSize(400 400); DraggableTabbedPane tabs = new DraggableTabbedPane(); tabs.addTab(""One"" new JButton(""One"")); tabs.addTab(""Two"" new JButton(""Two"")); tabs.addTab(""Three"" new JButton(""Three"")); tabs.addTab(""Four"" new JButton(""Four"")); test.add(tabs); test.setVisible(true); } } You deserve a +1 for the effort :) +1! It worked but it's a little buggy. If you drag the tab too it makes a mess.  Add this to isDragAcceptable to avoid Exceptions: boolean transferDataFlavorFound = false; for (DataFlavor transferDataFlavor : t.getTransferDataFlavors()) { if (FLAVOR.equals(transferDataFlavor)) { transferDataFlavorFound = true; break; } } if (transferDataFlavorFound == false) { return false; }  Found this code out there on the tubes: class DnDTabbedPane extends JTabbedPane { private static final int LINEWIDTH = 3; private static final String NAME = ""test""; private final GhostGlassPane glassPane = new GhostGlassPane(); private final Rectangle2D lineRect = new Rectangle2D.Double(); private final Color lineColor = new Color(0 100 255); //private final DragSource dragSource = new DragSource(); //private final DropTarget dropTarget; private int dragTabIndex = -1; public DnDTabbedPane() { super(); final DragSourceListener dsl = new DragSourceListener() { public void dragEnter(DragSourceDragEvent e) { e.getDragSourceContext().setCursor(DragSource.DefaultMoveDrop); } public void dragExit(DragSourceEvent e) { e.getDragSourceContext().setCursor(DragSource.DefaultMoveNoDrop); lineRect.setRect(0000); glassPane.setPoint(new Point(-1000-1000)); glassPane.repaint(); } public void dragOver(DragSourceDragEvent e) { //e.getLocation() //This method returns a Point indicating the cursor location in screen coordinates at the moment Point tabPt = e.getLocation(); SwingUtilities.convertPointFromScreen(tabPt DnDTabbedPane.this); Point glassPt = e.getLocation(); SwingUtilities.convertPointFromScreen(glassPt glassPane); int targetIdx = getTargetTabIndex(glassPt); if(getTabAreaBound().contains(tabPt) && targetIdx>=0 && targetIdx!=dragTabIndex && targetIdx!=dragTabIndex+1) { e.getDragSourceContext().setCursor(DragSource.DefaultMoveDrop); }else{ e.getDragSourceContext().setCursor(DragSource.DefaultMoveNoDrop); } } public void dragDropEnd(DragSourceDropEvent e) { lineRect.setRect(0000); dragTabIndex = -1; if(hasGhost()) { glassPane.setVisible(false); glassPane.setImage(null); } } public void dropActionChanged(DragSourceDragEvent e) {} }; final Transferable t = new Transferable() { private final DataFlavor FLAVOR = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType NAME); public Object getTransferData(DataFlavor flavor) { return DnDTabbedPane.this; } public DataFlavor[] getTransferDataFlavors() { DataFlavor[] f = new DataFlavor[1]; f[0] = this.FLAVOR; return f; } public boolean isDataFlavorSupported(DataFlavor flavor) { return flavor.getHumanPresentableName().equals(NAME); } }; final DragGestureListener dgl = new DragGestureListener() { public void dragGestureRecognized(DragGestureEvent e) { Point tabPt = e.getDragOrigin(); dragTabIndex = indexAtLocation(tabPt.x tabPt.y); if(dragTabIndex<0) return; initGlassPane(e.getComponent() e.getDragOrigin()); try{ e.startDrag(DragSource.DefaultMoveDrop t dsl); }catch(InvalidDnDOperationException idoe) { idoe.printStackTrace(); } } }; //dropTarget = new DropTarget(glassPane DnDConstants.ACTION_COPY_OR_MOVE new CDropTargetListener() true); new DragSource().createDefaultDragGestureRecognizer(this DnDConstants.ACTION_COPY_OR_MOVE dgl); } class CDropTargetListener implements DropTargetListener{ public void dragEnter(DropTargetDragEvent e) { if(isDragAcceptable(e)) e.acceptDrag(e.getDropAction()); else e.rejectDrag(); } public void dragExit(DropTargetEvent e) {} public void dropActionChanged(DropTargetDragEvent e) {} public void dragOver(final DropTargetDragEvent e) { if(getTabPlacement()==JTabbedPane.TOP || getTabPlacement()==JTabbedPane.BOTTOM) { initTargetLeftRightLine(getTargetTabIndex(e.getLocation())); }else{ initTargetTopBottomLine(getTargetTabIndex(e.getLocation())); } repaint(); if(hasGhost()) { glassPane.setPoint(e.getLocation()); glassPane.repaint(); } } public void drop(DropTargetDropEvent e) { if(isDropAcceptable(e)) { convertTab(dragTabIndex getTargetTabIndex(e.getLocation())); e.dropComplete(true); }else{ e.dropComplete(false); } repaint(); } public boolean isDragAcceptable(DropTargetDragEvent e) { Transferable t = e.getTransferable(); if(t==null) return false; DataFlavor[] f = e.getCurrentDataFlavors(); if(t.isDataFlavorSupported(f[0]) && dragTabIndex>=0) { return true; } return false; } public boolean isDropAcceptable(DropTargetDropEvent e) { Transferable t = e.getTransferable(); if(t==null) return false; DataFlavor[] f = t.getTransferDataFlavors(); if(t.isDataFlavorSupported(f[0]) && dragTabIndex>=0) { return true; } return false; } } private boolean hasGhost = true; public void setPaintGhost(boolean flag) { hasGhost = flag; } public boolean hasGhost() { return hasGhost; } private int getTargetTabIndex(Point glassPt) { Point tabPt = SwingUtilities.convertPoint(glassPane glassPt DnDTabbedPane.this); boolean isTB = getTabPlacement()==JTabbedPane.TOP || getTabPlacement()==JTabbedPane.BOTTOM; for(int i=0;i<getTabCount();i++) { Rectangle r = getBoundsAt(i); if(isTB) r.setRect(r.x-r.width/2 r.y r.width r.height); else r.setRect(r.x r.y-r.height/2 r.width r.height); if(r.contains(tabPt)) return i; } Rectangle r = getBoundsAt(getTabCount()-1); if(isTB) r.setRect(r.x+r.width/2 r.y r.width r.height); else r.setRect(r.x r.y+r.height/2 r.width r.height); return r.contains(tabPt)?getTabCount():-1; } private void convertTab(int prev int next) { if(next<0 || prev==next) { //System.out.println(""press=""+prev+"" next=""+next); return; } Component cmp = getComponentAt(prev); String str = getTitleAt(prev); if(next==getTabCount()) { //System.out.println(""last: press=""+prev+"" next=""+next); remove(prev); addTab(str cmp); setSelectedIndex(getTabCount()-1); }else if(prev>next) { //System.out.println("" >: press=""+prev+"" next=""+next); remove(prev); insertTab(str null cmp null next); setSelectedIndex(next); }else{ //System.out.println("" <: press=""+prev+"" next=""+next); remove(prev); insertTab(str null cmp null next-1); setSelectedIndex(next-1); } } private void initTargetLeftRightLine(int next) { if(next<0 || dragTabIndex==next || next-dragTabIndex==1) { lineRect.setRect(0000); }else if(next==getTabCount()) { Rectangle rect = getBoundsAt(getTabCount()-1); lineRect.setRect(rect.x+rect.width-LINEWIDTH/2rect.yLINEWIDTHrect.height); }else if(next==0) { Rectangle rect = getBoundsAt(0); lineRect.setRect(-LINEWIDTH/2rect.yLINEWIDTHrect.height); }else{ Rectangle rect = getBoundsAt(next-1); lineRect.setRect(rect.x+rect.width-LINEWIDTH/2rect.yLINEWIDTHrect.height); } } private void initTargetTopBottomLine(int next) { if(next<0 || dragTabIndex==next || next-dragTabIndex==1) { lineRect.setRect(0000); }else if(next==getTabCount()) { Rectangle rect = getBoundsAt(getTabCount()-1); lineRect.setRect(rect.xrect.y+rect.height-LINEWIDTH/2rect.widthLINEWIDTH); }else if(next==0) { Rectangle rect = getBoundsAt(0); lineRect.setRect(rect.x-LINEWIDTH/2rect.widthLINEWIDTH); }else{ Rectangle rect = getBoundsAt(next-1); lineRect.setRect(rect.xrect.y+rect.height-LINEWIDTH/2rect.widthLINEWIDTH); } } private void initGlassPane(Component c Point tabPt) { //Point p = (Point) pt.clone(); getRootPane().setGlassPane(glassPane); if(hasGhost()) { Rectangle rect = getBoundsAt(dragTabIndex); BufferedImage image = new BufferedImage(c.getWidth() c.getHeight() BufferedImage.TYPE_INT_ARGB); Graphics g = image.getGraphics(); c.paint(g); image = image.getSubimage(rect.xrect.yrect.widthrect.height); glassPane.setImage(image); } Point glassPt = SwingUtilities.convertPoint(c tabPt glassPane); glassPane.setPoint(glassPt); glassPane.setVisible(true); } private Rectangle getTabAreaBound() { Rectangle lastTab = getUI().getTabBounds(this getTabCount()-1); return new Rectangle(00getWidth()lastTab.y+lastTab.height); } public void paintComponent(Graphics g) { super.paintComponent(g); if(dragTabIndex>=0) { Graphics2D g2 = (Graphics2D)g; g2.setPaint(lineColor); g2.fill(lineRect); } } } class GhostGlassPane extends JPanel { private final AlphaComposite composite; private Point location = new Point(0 0); private BufferedImage draggingGhost = null; public GhostGlassPane() { setOpaque(false); composite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER 0.5f); } public void setImage(BufferedImage draggingGhost) { this.draggingGhost = draggingGhost; } public void setPoint(Point location) { this.location = location; } public void paintComponent(Graphics g) { if(draggingGhost == null) return; Graphics2D g2 = (Graphics2D) g; g2.setComposite(composite); double xx = location.getX() - (draggingGhost.getWidth(this) /2d); double yy = location.getY() - (draggingGhost.getHeight(this)/2d); g2.drawImage(draggingGhost (int)xx (int)yy  null); } } Could you add link to the source? http://java-swing-tips.blogspot.com/2008/04/drag-and-drop-tabs-in-jtabbedpane.html Done. You're right good to cite the source. I actually knew about this one and I was curious about the alternatives. For now I'll accept your answer.  @Tony: It looks like Euguenes solution just overlooks preserving TabComponents during a swap. The convertTab method just needs to remember the TabComponent and set it to the new tabs it makes. Try using this:  private void convertTab(TabTransferData a_data int a_targetIndex) { DnDTabbedPane source = a_data.getTabbedPane(); System.out.println(""this=source? "" + (this == source)); int sourceIndex = a_data.getTabIndex(); if (sourceIndex < 0) { return; } // if //Save the tab's component title and TabComponent. Component cmp = source.getComponentAt(sourceIndex); String str = source.getTitleAt(sourceIndex); Component tcmp = source.getTabComponentAt(sourceIndex); if (this != source) { source.remove(sourceIndex); if (a_targetIndex == getTabCount()) { addTab(str cmp); setTabComponentAt(getTabCount()-1 tcmp); } else { if (a_targetIndex < 0) { a_targetIndex = 0; } // if insertTab(str null cmp null a_targetIndex); setTabComponentAt(a_targetIndex tcmp); } // if setSelectedComponent(cmp); return; } // if if (a_targetIndex < 0 || sourceIndex == a_targetIndex) { return; } // if if (a_targetIndex == getTabCount()) { source.remove(sourceIndex); addTab(str cmp); setTabComponentAt(getTabCount() - 1 tcmp); setSelectedIndex(getTabCount() - 1); } else if (sourceIndex > a_targetIndex) { source.remove(sourceIndex); insertTab(str null cmp null a_targetIndex); setTabComponentAt(a_targetIndex tcmp); setSelectedIndex(a_targetIndex); } else { source.remove(sourceIndex); insertTab(str null cmp null a_targetIndex - 1); setTabComponentAt(a_targetIndex - 1 tcmp); setSelectedIndex(a_targetIndex - 1); } }"
985,A,"Loading animated gif from JAR file into ImageIcon I'm trying to create a ImageIcon from a animated gif stored in a jar file. ImageIcon imageIcon = new ImageIcon(ImageIO.read(MyClass.class.getClassLoader().getResourceAsStream(""animated.gif""))); The image loads but only the first frame of the animated gif. The animation does not play. If I load the animated gif from a file on the filesystem everything works as expected. The animation plays through all the of frames. So this works: ImageIcon imageIcon = new ImageIcon(""/path/on/filesystem/animated.gif""); How can I load an animated gif into an ImageIcon from a jar file? EDIT: Here is a complete test case why doesn't this display the animation? import javax.imageio.ImageIO; import javax.swing.*; public class AnimationTest extends JFrame { public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { AnimationTest test = new AnimationTest(); test.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); test.setVisible(true); } }); } public AnimationTest() { super(); try { JLabel label = new JLabel(); ImageIcon imageIcon = new ImageIcon(ImageIO.read(AnimationTest.class.getClassLoader().getResourceAsStream(""animated.gif""))); label.setIcon(imageIcon); imageIcon.setImageObserver(label); add(label); pack(); } catch (Exception e) { e.printStackTrace(); } } } This reads gif animation from inputStream InputStream in = ...; Image image = Toolkit.getDefaultToolkit().createImage(org.apache.commons.io.IOUtils.toByteArray(in)); This is the definite answer. Thank you after researching this issue several hours. This also solves the problem with loading resources from Eclipse and from Maven in JARs. Thanks alot!  You have to use getClass().getResource(imgName); to get a URL to the image file. Check out this tutorial from Real's HowTo. EDIT: Once the image is loaded you have to set the ImageObserver property to get the animation to run. I load png images just fine from the jar file using the first section of code. And the gif loads - it's just not animated. I see your problem now. See my edit for more details. setting the ImageObserver did not help in my case. It seems that ImageIO isn't reading the animated gif properly. If I use a different constructor for the ImageIcon it works. I updated the question with a complete code example. You'll need an animated.gif in your classpath.  Hopefully it's not too late for this. I managed to get the animated gif inside my JPanel this way: private JPanel loadingPanel() { JPanel panel = new JPanel(); BoxLayout layoutMgr = new BoxLayout(panel BoxLayout.PAGE_AXIS); panel.setLayout(layoutMgr); ClassLoader cldr = this.getClass().getClassLoader(); java.net.URL imageURL = cldr.getResource(""img/spinner.gif""); ImageIcon imageIcon = new ImageIcon(imageURL); JLabel iconLabel = new JLabel(); iconLabel.setIcon(imageIcon); imageIcon.setImageObserver(iconLabel); JLabel label = new JLabel(""Loading...""); panel.add(iconLabel); panel.add(label); return panel; } Some points of this approach: 1. The image file is within the jar; 2. ImageIO.read() returns a BufferedImage which doesn't update the ImageObserver; 3. Another alternative to find images that are bundled in the jar file is to ask the Java class loader the code that loaded your program to get the files. It knows where things are. So by doing this I was able to get my animated gif inside my JPanel and it worked like a charm.  Since this thread was just linked from a more current thread that had little to do with animated GIFs but got dragged OT I thought I'd add this trivial source that 'works for me'. import javax.swing.*; import java.net.URL; class AnimatedGifInLabel { public static void main(String[] args) throws Exception { final URL url = new URL(""http://i.stack.imgur.com/OtTIY.gif""); Runnable r = new Runnable() { public void run() { ImageIcon ii = new ImageIcon(url); JLabel label = new JLabel(ii); JOptionPane.showMessageDialog(null label); } }; SwingUtilities.invokeLater(r); } } if anyone wondered how to just load image from file here is how: url = new URL(""file"" ""localhost"" ""resources/image.gif"");"
986,A,using a custom Swing JComponent in a TableCellRenderer OK I know how to make a simple custom JComponent. I know how to override a TableCellRenderer. I can't seem to combine the two. Here's a sample JComponent I created: public static class BarRenderer extends JComponent { final private double xmin; final private double xmax; private double xval; public BarRenderer(double xmin double xmax) { this.xmin=xmin; this.xmax=xmax; } @Override protected void paintComponent(Graphics g) { super.paintComponent(g); Rectangle r = g.getClipBounds(); g.drawRect(r.x r.y (int)(r.width * ((xval-xmin)/(xmax-xmin))) r.height); } public void setXval(double x) { this.xval = x; repaint(); } public double getXval() { return xval; } } It works fine as a standalone JComponent. I call setXval(something) and it updates just fine. (edit: I have a Swing Timer that updates the data periodically) But if this component is something I return in TableCellRenderer.getTableCellRendererComponent() then it only repaints when I click on the cell in question. What gives? I must be leaving out something really simple. Both of you (Russ Hayward and Andrew) helped the key was essentially to do the following: store the state to be made visible in the TableModel itself not in the renderer make sure that when the TableModel's state changes fireTableCellUpdated() is called have only one TableCellRenderer object and one JComponent for my custom column (not one per cell) within TableCellRenderer.getTableCellRendererComponent() store the cell's state for purposes of being rendering soon after (long-term storage is in the TableModel) provide that state to the JComponent return the JComponent override JComponent.PaintComponent() one convenient possibility is for a custom renderer to extend JComponent and implement TableCellRenderer then in TableCellRenderer.getTableCellRendererComponent() you store the cell's state and return this; Here's the relevant excerpt of my code that now works: class TraceControlTableModel extends AbstractTableModel { /* handle table state here */ // convenience method for setting bar value (table model's column 2) public void setBarValue(int row double x) { setValueAt(x row 2); } } // one instance of BarRenderer will be set as the // TableCellRenderer for table column 2 public static class BarRenderer extends JComponent implements TableCellRenderer { final private double xmin; final private double xmax; private double xval; public BarRenderer(double xmin double xmax) { super(); this.xmin=xmin; this.xmax=xmax; } @Override protected void paintComponent(Graphics g) { super.paintComponent(g); Rectangle r = g.getClipBounds(); g.drawRect(r.x r.y (int)(r.width * ((xval-xmin)/(xmax-xmin))) r.height); } @Override public Component getTableCellRendererComponent(JTable arg0 Object value boolean isSelected boolean hasFocus int row int col) { // save state here prior to returning this object as a component // to be painted this.xval = (Double)value; return this; } }  For performance reasons a JTable reuses renderer components to paint multiple cells - so when you see the component in the JTable it isn't actually there in the traditional sense of a Component in a Container which is present at a location. This means that calling repaint() on the renderer component does nothing. The most effective option would be to store the Integer value of the bar in your TableModel. Your TableCellRenderer would then look something like this: public class BarTableCellRenderer implements TableCellRenderer { private final BarRenderer rendererComponent = new BarRenderer(0 10); @Override public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { rendererComponent.setXval((Integer)value); return rendererComponent; } } Then you could change the Integer in your TableModel and it would trigger a repaint of the bar (you may need a TableModel.fireTableCellUpdated dependent on the TableModel implementation you are using). sounds like a possible solution... I think the TableModel.fireTableCellUpdated sounds like the key here.  If you make a table with say 3 rows each having a different Xval then does it initially renderer correctly meaning each cell has a different looking bar? When you say it does not repaint unless you click it has something happened to your underlying data that should have caused the visual display of the data (the rendered bar) to change? If the data changed but the table does not immediatley re-render then I would say that your TableModel is not working properly. underlying data changes -> TableModel changes -> fires TableModelEvent -> JTable re-renders Look at the TableModel tuturial: http://java.sun.com/docs/books/tutorial/uiswing/components/table.html#data to make sure you are doing everything correct.
987,A,"How are multi-button presses handled in swing? I'm experiencing some strange behaviour when using a stylus with swing. I am interpreting pressing the button on the side of the stylus(RIGHT) and pressing the stylus down(LEFT) as a ""Grab"" event but occasionally (more often than 0) events are just being dropped. The JavaDocs for MouseEvent are pretty explicit about how multibutton presses are handled if executed one at a time (left down right down right up left up) but say nothing about simultaneous button presses. I'm left to wonder would they be emitted as two mousePressed events or as one with the button mask set for both buttons or something else entirely? Thanks. I'd interpret the API doc as simultaneous button presses being simply not possible: When multiple mouse buttons are pressed each press release and click results in a separate event. So there should be separate events. The problems you observe could be due to errors in your code the stylus' driver the hardware or Swing (this is in decreasing order of likelihood as I see it :) I'd try to diagnose the problem by logging events at different levels if possible. Regarding the decreasing order of likelihood that's usually the assumption I go with too. Problems in my code are usually misunderstandings of the Java code. Hence this initial question after reading the docs.  Simultaneous button presses are processed as two separate mousePressed events. Run the Mouse Events Demo to see them processed separately.  As I recall there's no way to handle simultaneous button presses. What I used to do to ensure that multiple buttons being pressed at once were treated as such was I would have a boolean variable for each button and when it was pressed I would set it to true and when it was released I would set the boolean to false. Then when it came time to perform an action I would check for the boolean variables (sometimes I would have the actionlistener redirect to the method call for determining what action was to happen next after setting the booleans). This doesn't work if the only thing you want to do is them being pressed at the exact same time but if you're just trying to get combinations to work then that's how I did it. This was about 4 years ago before Java 5 so I may be wrong about that."
988,A,What will happen in Java when I use a method of the super class which has not been written? Consider the Java code below what would happen if there were no paintComponent method in JPanel class? ... import javax.swing.JPanel; public class ShapesJPanel extends JPanel { public void paintComponent( Graphics g ) { super.paintComponent( g ); //more codes here } } Simply rename paintComponent to something else (e.g. dummyMethod()) and try to compile. You will find out what happens yourself. It won't compile. If it was there at compile time but not at runtime then it will throw an Error. Is there a situation I'm not aware of where it would not be there at runtime? The compiler can must and will statically check this so there's no option to have it 'not be there' after a successful compile (or am I missing something)? Compile the ShapesJPanel class but deploy it with a different version of JPanel class which doe not have this method. Thank you matt exactly my point. OK that makes sense.  At compile time The method should present in any of the class in super class hierarchy otherwise compilation will fail The method of the class from that hierarchy ( starting from bottom) will get called At run time If method does not found it will throw an error  If that's the specific situation you're asking about then it's always there. If you're asking in general then it won't compile.  There will always be an implementation in the super class. JPanel implements paintComponent(). So you don't need to worry about it.
989,A,Is Component.getGraphicsConfiguration thread safe? There are many methods you shouldn't call if you are not on the AWT event thread. These are generally methods that manipulate the UI in some way. Is this the case with Component's getGraphicsConfiguration(...)? It is only a getter but it appears to cause a deadlock if the event thread is waiting on the thread calling this method. Whilst solving the deadlock is fairly trivial (avoid using wait or synchronize on the event thread) should I only be calling getGraphicsConfiguration in a Runnable passed to SwingUtilities.invokeLater(...) or invokeAndWait(...)? AWT thread-safety is (necessarily) broken. Just don't go anywhere near it. Stay on the straight AWT EDT Also note that just because a method is in java.awt.Component it does not mean that the object (or an object referenced by it) is not in Swing and therefore really not even pretending to be thread-safe at all. (Enough nots?) er ... so you're saying yes only use the method when I'm on the event thread? I am saying that it would be highly advisable to do so.
990,A,Replay a non-looping gif image I've got a non-looping gif that I use as ImageIcon for two JLabels but not at the same time. My problem is that when I set the second JLabel's icon to be the gif the animation has already been played so it only show the last frame of it. Do you know a way to get the animation when the gif is set to the second JLabel? Are you talking about a Swing application or web? Tagged Java using JLabel (swing component) .. Should be clear enough. On the newly created icon try using: icon.getImage().flush(); It works ! Thanks a lot. lol had the same answer ready for some time too. but only hid the save edit button just now after doing some more tests. well whatever  Ok discarded old answer. After some more searching around I found the way to do it. ImageIcon icon = ..[the animated gif without looping].. .... label1.setIcon(icon); //animation plays once .... // now time to remove icon from label1 and add it to label2 label1.setIcon(null); icon.getImage().flush(); //reset resource used by the image label2.setIcon(icon); .... Java Api: Image#flush() btw. if you leave the line label1.setIcon(null); out it will still repeat the animation of the icon only for label2. label1 stays at the last frame. First : Eclipse says : loadImage() is not visible for imageIcon. Second : doesn't work (just show the last frame). Replaced old answer with new correct answer
991,A,"Best approach for dual-state Action I have recently implemented an Action that toggles the enabled status of a business function. Whenever the user invokes the action I set a boolean flag: ""willEnable"" to determine whether the next invocation will enable or disable the function. Likewise I update the action name short description and icon to reflect the new state. Then within my actionPerformed(...) method I take a different action based on the state of willEnable. Is this the correct approach or can anyone recommend a better one (as I suspect this is a common problem)? (I can see that JToggleButton acts as a two-state button but I want this Action to be visible on a JMenuBar as well as a JButton so do not think this is appropriate). EDIT Specifically how do applications like IDEA deal with this? Would they use multi-state actions (as above) or would they swap a different Action into a given JButton using setAction(Action)? Perhaps this approach is better? When updating an action's properties can I rely on GUI components initialised with that Action (e.g. JButton) automatically repainting themselves? What if the JButton size changes as a result? Should I be revalidating the containing JPanel myself? Is changing the action's name a bad thing to do? This is the only way I can make the JButton text change but am concious that the name should probably remain constant if the action is being placed in an ActionMap. Thanks in advance. You may want to look at the State Pattern. Basically you create an interface and two (or more) implementations of it for each state. As a simple example the disable state might just implement the interface to do nothing while the enabled state does some actions. To switch state you would simply do interface IState { void doAction(); boolean isEnabled(); } class EnabledState implement IState { void doAction() { setState(new DisabledState()); // do something } boolean isEnabled() {return true;} } class DisabledState implement IState { void doAction() { setState(new EnabledState()); // do nothing } boolean isEnabled() {return false;} } private IState state = new DisabledState(); // default is disabled private PropertyChangeSupport support = new PropertyChangeSupport(this); void setState(IState state) { if (this.state != state) { IState oldState = this.state; this.state = state; support.firePropertyChange(""enabled"" oldState.isEnabled() state.isEnabled()); } } void doAction() { state.doAction(); } While it is a little overhead for a single method it certainly pays of as soon as you have several methods that change it's behavior depending on a single state. Thanks - Yes I could consider this although TBH the logic run based on the value of willEnable is only 1-2 lines of code anyway. I'm more concerned about whether there's a better solution in dealing with the UI-related side-effects of the state change and whether there's an idiomatic approach of dealing with this problem when you have multiple ""actions"" based off one button. It's a long time since I've last done Swing but can't you use the observer pattern to notify any GUI components of state changes in your controller? Well I could use PropertyChangeListener (I'd recommend avoiding Observer) to detect changes in the Action and then revalidate the JPanel. I'm just not sure if it's required. I said ""observer pattern"" not observer. `PropertyChangeListener` (and all the other listeners) follow the observer pattern. And looking at the Javadoc for `javax.swing.Action.addPropertyChangeListener(PropertyChangeListener)` seems to prove me right: ""When its enabled state or other property changes the registered listeners are informed of the change"". So your button should implement `PropertyChangeListener` and listen for changes of the enabled state. I've updated the code to fire a PropertyChangeEvent Yes that's what I thought (re. the JButton listening for changes). However I'm not sure if the containing JPanel will ... I would hope so.  I would expect that any GUI component which is created with some data ""model"" (I would include an Action as a data model) should register itself as a listener to that model. It must take appropriate erm action on a PropertyChangeEvent being fired: any other behaviour would constitute a bug in my opinion. The questionable thing here is whether it is legitimate to change the name of the action; I think that it is not legitimate. Your action logically is ToggleEnabledStatus and that does not change because the action has been invoked. Any component which needs to display any other text should register itself as a listener to the Action and then check your willEnable flag to take the appropriate erm action. Alternately you could write your own class which implemented ToggleButtonModel and Action at the same time and controlled the change events from within it. This is a lot of code however for such little benefit This is what I thought (regarding not changing the action name). However this means I need to explicitly set my JButton text to ""Enable XYZ"" or ""Disable XYZ"" each time the action is ""toggled"" as JButton uses the Action name as text by default. The alternative would be to use two different Actions and call setAction on the JButton each time. Not sure if this is better or worse ..."
992,A,JTable Scrolling to a specified row index I have a JTable that is within a JScrollPane. Rows are added to the table at runtime based on events that happen in my application. I want to have the scoll pane scroll to the bottom of the table when a new row is added to the table. For JLists There is the ensureIndexIsVisible() that forces a particular index in the list to be visible. I'm looking for the same thing but for a JTable. It looks like I might have to manually move the scrolling view on the scroll pane but I figured there had to be an easier way. JList internally use scrollRectToVisible and specify the coordinates to scroll to. I think you will have to recode a similar functionality for JTable.  The first answer works well but the selected row gets positioned at the bottom of the table. So I created this modified version: private void scrollToVisible(int rowIndex int vColIndex ) { JTable table = getTablePanel().getTable(); if (!(table.getParent() instanceof JViewport)) { return; } if (table.getRowCount()<1){ return; } JViewport viewport = (JViewport)table.getParent(); // view dimension Dimension dim = viewport.getExtentSize(); // cell dimension Dimension dimOne = new Dimension(00); // This rectangle is relative to the table where the // northwest corner of cell (00) is always (00). Rectangle rect = table.getCellRect(rowIndex vColIndex true); Rectangle rectOne; if (rowIndex+1<table.getRowCount()) { if (vColIndex+1<table.getColumnCount()) vColIndex++; rectOne = table.getCellRect(rowIndex+1 vColIndex true); dimOne.width=rectOne.x-rect.x; dimOne.height=rectOne.y-rect.y; } // '+ veiw dimension - cell dimension' to set first selected row on the top rect.setLocation(rect.x+dim.width-dimOne.width rect.y+dim.height-dimOne.height); table.scrollRectToVisible(rect); } Now the selected row gets positioned at the top of the table. no you don't need the viewport to scroll to anywhere in the table (all components have a getVisibleRect method)  See this example : http://www.exampledepot.com/egs/javax.swing.table/Vis.html update: the link is now obsolete here is the code (from http://smi-protege.stanford.edu/repos/protege/protege-core/trunk/src/edu/stanford/smi/protege/util/ComponentUtilities.java ) public static void scrollToVisible(JTable table int rowIndex int vColIndex) { if (!(table.getParent() instanceof JViewport)) { return; } JViewport viewport = (JViewport)table.getParent(); // This rectangle is relative to the table where the // northwest corner of cell (00) is always (00). Rectangle rect = table.getCellRect(rowIndex vColIndex true); // The location of the viewport relative to the table Point pt = viewport.getViewPosition(); // Translate the cell location so that it is relative // to the view assuming the northwest corner of the // view is (00) rect.setLocation(rect.x-pt.x rect.y-pt.y); table.scrollRectToVisible(rect); // Scroll the area into view //viewport.scrollRectToVisible(rect); } The link shows a blank white page.  It seems to me a lot easier to set the viewport position instead of scrolling the table. Following is my code. public void scrollCellToView(int rowIndex int vColIndex) { if (!(this.getParent() instanceof JViewport)) { return; } JViewport viewport = (JViewport) this.getParent(); Rectangle rect = this.getCellRect(rowIndex vColIndex true); Rectangle viewRect = viewport.getViewRect(); int x = viewRect.x; int y = viewRect.y; if (rect.x >= viewRect.x && rect.x <= (viewRect.x + viewRect.width - rect.width)){ } else if (rect.x < viewRect.x){ x = rect.x; } else if (rect.x > (viewRect.x + viewRect.width - rect.width)) { x = rect.x - viewRect.width + rect.width; } if (rect.y >= viewRect.y && rect.y <= (viewRect.y + viewRect.height - rect.height)){ } else if (rect.y < viewRect.y){ y = rect.y; } else if (rect.y > (viewRect.y + viewRect.height - rect.height)){ y = rect.y - viewRect.height + rect.height; } viewport.setViewPosition(new Point(xy)); }  It's very easy JTable have scroolRectToVisible method to :) If you want you can try something like this to make scrollpane go to to the bottom if new record added : jTable1.getSelectionModel().setSelectionInterval(i i); jTable1.scrollRectToVisible(new Rectangle(jTable1.getCellRect(i 0 true))); Where i is last added record. This is much simpler. I used this same method in my code. This works well as expect and functions like ensureindexisvisible() (or whatever that method is) from Jlist. The code marked as the answer did not function properly. it did not scroll all the way to the index after a 5-6 calls down a longer list and would not show the entire row every time when it did scroll. some rows were left cut off. This should be the answer. Nice and simple. By the way why do you create a new Rectangle while `getCellRect` already returns a rectangle. It works with `jTable1.scrollRectToVisible(jTable1.getCellRect(i 0 true));` @mar works great! thank you.
993,A,"Why do we need JavaFX though we have Swing? Swing is good in many ways then why do we need JavaFX? The same reason why we have silverlight even though there is Flash!! Both are there. What can we do? This is not a programmming related question until you rephrase it to something like ""what are the differences between....."" Except that Silverlight and Flash don't come from the same company whereas JavaFX and Swing do come from the same! I think Staale's answer is a good start but I would add... Use JavaFX if 1) If you're interested in developing the application for mobile or TV (note this has yet to be released) 2) If you're working with a graphic designer who is creating the appearance of the application in photoshop and you want to be able to import their look directly. 3) If making the GUI filthy rich is important to you. (so if you want a panel to fade in or out or slide upon demand) Use Swing if 1) You're creating an application mainly for the desktop. 2) Performance matters and you know what you are doing (so if you're writing an IDE Swing would be a better choice) 3) You're looking for a RPC (rich client platform) to build upon.  It is the same reason why we have Java C++ C# Python Perl Ruby... although we already have C.  There is both a technology part of JavaFX that will help design UIs and a language part that will make writing UIs easier. The JavaFX technology brings a 2d scenegraph and video capabilities. Afaik these will also be made available generally to java. They are good advancements for creating client side application with fancy and interactive graphical UIs. The 2d scenegraph should make it possible to create more graphic heavy applications that are still responsive. The JavaFX language is a much better way off creating UIs programatically. Java Swing code can get very verbose while the same JavaFX code will be smaller and easier to maintain. Closure support makes creating event handlers easier. Declerative assignment of settings makes configuration of elements easier. Native list syntax makes adding components easier. Please note that I haven't really written any JavaFX but I have read code and paid attention to what's going on. I recommend trying it yourself to find out what's cooking. I am not sure that ""fancy GUIs"" is what business enterprises need. In my company we develop enterprise apps (in various technologies Java/Swing is one of them) and I don't see how we would develop equvalent apps with JavaFX. ""Swing code can get very terse"": I don't think ""terse"" is the word you want there--just the opposite in fact. Verbose maybe? Or bloated? Verbose was what I meant. English is my 2nd language I am permitted to have some tismakes :)"
994,A,"JMenuItem accelerator not working after showing two non-modal JDialogs? (Mac only?) I have the problem that the accelerators of JMenuItems aren't working anymore after showing two JDialogs directly after one another. Please take a look at this small example that reproduces the problem: import javax.swing.*; import java.awt.*; import java.awt.event.*; public class DialogBug { public static void main(String[] args) { SwingUtilities.invokeLater(new StartupRunnable(args.length == 0)); } public static class StartupRunnable implements Runnable { private boolean both; public StartupRunnable(boolean both) { this.both=both; } public void run() { MyFrame myFrame=new MyFrame(); myFrame.setVisible(true); myFrame.startUp(both); } } public static class MyFrame extends JFrame { private MyDialog dialog1; private MyDialog dialog2; public MyFrame() { super(""MyFrame""); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); initUI(); } private void initUI() { dialog1=new MyDialog(this); dialog2=new MyDialog(this); JMenuBar menuBar=new JMenuBar(); JMenu fileMenu=new JMenu(""File""); menuBar.add(fileMenu); fileMenu.add(new JMenuItem(new OpenAction())); setJMenuBar(menuBar); setSize(200200); } public void startUp(boolean both) { dialog1.setVisible(true); if(both) { dialog2.setVisible(true); } } private class OpenAction extends AbstractAction { public OpenAction() { super(""Open""); KeyStroke accelerator = KeyStroke.getKeyStroke(""ctrl O""); putValue(Action.ACCELERATOR_KEY accelerator); } public void actionPerformed(ActionEvent e) { System.out.println(""Open executed""); } } } public static class MyDialog extends JDialog { public MyDialog(JFrame parent) { super(parent); setTitle(""Dialog""); setModal(false); add(new JButton(new OkAction())); pack(); } private class OkAction extends AbstractAction { public OkAction() { super(""Ok""); } public void actionPerformed(ActionEvent e) { setVisible(false); } } } } Compile it using javac DialogBug.java and execute it running java DialogBug. You'll see two with ""Ok""-Buttons. Dismiss both dialogs clicking them. Now press ""Ctrl-O"". This should print ""Open executed"" to the console but this won't happen. Now click the ""File"" menu. Now ""Ctrl-O"" will work as expected. If you start the app with any argument e.g. java DialogBug x then only one dialog will open and ""Ctrl-O"" will work immediately after dismissing the dialog as expected. My environment is the following: java version ""1.6.0_15"" Java(TM) SE Runtime Environment (build 1.6.0_15-b03-219) Java HotSpot(TM) 64-Bit Server VM (build 14.1-b02-90 mixed mode) But as far as I know this app behaves similar in other VMs. Please help me! I really don't have any idea what might go wrong here. If this is a Java bug (and I expect it to be one) then please let me know if you have a workaround... If you can or can't reproduce this on other systems please tell me so in the comments. Thanks a lot! Update After installing Java 1.5 on Snow Leopard (sigh) I can confirm that this happens with 1.5.0_19 too at least on Snow Leopard. Update 2 Works for me on Windows XP. java version ""1.6.0_13"" Java(TM) SE Runtime Environment (build 1.6.0_13-b03) Java HotSpot(TM) Client VM (build 11.3-b02 mixed mode sharing) java version ""1.5.0_13"" Java(TM) 2 Runtime Environment Standard Edition (build 1.5.0_13-b05) Java HotSpot(TM) Client VM (build 1.5.0_13-b05 mixed mode) Update 3 Seems to work on Windows Vista too. This makes this a Mac OS X 10.5+10.6 issue AFAIK so far. Update 4 This bug is filed under Problem ID #7240026 at Apple. Nothing yet... I asked the question on the java-dev Apple mailinglist and didn't receive any reply so far. Meh. http://sourceforge.net/apps/trac/lilith/ticket/72 is the ticket of this issue in my app. It has a link to a slightly enhanced version of the above example code. Please let me know if you find a solution! What's your configuration? Turns out my problem wasn't related to accelerators. I was using a KeyboardFocusManager to disable keyboard input when doing a long-running task in a SwingWorker and it was that code that was failing. Since I implemented them at the same time and I saw your similar problem I thought accelerators were to blame but they weren't. Good luck Ever any progress on this? I am running into a similar problem. I've tried on Leopard/10.5 and the program does not work with either: Java 5 (Apple JVM) java version ""1.5.0_20"" Java(TM) 2 Runtime Environment Standard Edition (build 1.5.0_20-b02-315) Java HotSpot(TM) Client VM (build 1.5.0_20-141 mixed mode sharing) Java 6 (SoyLatte/Open JDK BSD Port) java version ""1.6.0_03-p3"" Java(TM) SE Runtime Environment (build 1.6.0_03-p3-landonf_19_aug_2008_14_55-b00) Java HotSpot(TM) Server VM (build 1.6.0_03-p3-landonf_19_aug_2008_14_55-b00 mixed mode)  Works fine for me on XP using Java(TM) SE Runtime Environment (build 1.6.0_07-b06). For some reason I seem to think that Ctrl+O is the accelerator for changing a components orientation. Just wondering if this happens with all accelerators or only Ctrl+O? Edit: you can probably forget this suggestion. I can't seem to find/recall where I may have thought this and and can't verify this in any of my test programs. ""Ctrl-O"" is just an arbitrary example. No accelerators are working at all. (You know you need to be running JRE 1.6.0 with at least update 6u15 or 6u16 to have all the latest security patches?) I don't do any real work with it I just use it to play around.  I ran it without problem on my mac that has OS X 10.4 and Java version ""1.5.0_19"". I'm wondering if after you close the two modal dialogs the main frame has the focus. I have not used accelerators in a long while but I think that maybe there has been some recent change regarding accelerators registered in the menu bar and accelerators registered in the frame (like shortcuts). Good luck with it. Thanks. This is getting stranger and stranger. It misbehaves like described on Leopard too. I believe that it shows the same malfunction on Windows Vista but I'm waiting for a confirmation... Nope it seems to work on Vista too.  Replace the actionPerformed method of the OkAction class in the MyDialog class with the following: public void actionPerformed(ActionEvent e) { setVisible(false); MyDialog.this.getParent().requestFocus(); } For some reason (maybe because the dialogs aren't modal) OS X is not returning the focus to your MyFrame. The focus returns to MyFrame naturally if you dismiss the dialogs by closing them but there might be something with simply hiding the dialogs. Thanks a lot!! This works!"
995,A,Swing JLayeredPane.getLayer() - Documentation error or actual side effect? I'm trying to figure something out about JLayeredPane in Swing. If anyone has used this class feedback would be appreciated. The documentation for getLayer(JComponent c) states: Gets the layer property for a JComponent it does not cause any side effects like setLayer(). (painting add/remove etc) Normally you should use the instance method getLayer(). Clearly there is some mistake here since this is the instance method getLayer() (there aren't overloaded versions) Is there actually a different call that should be made here or was somebody just too eager in copying from putLayer(): Sets the layer property on a JComponent. This method does not cause any side effects like setLayer() (painting add/remove etc). Normally you should use the instance method setLayer() in order to get the desired side-effects (like repainting). Like many things in Swing the answer to your question is revealed in the swing source code. From JLayeredPane.java: public static int getLayer(JComponent c) { Integer i; if((i = (Integer)c.getClientProperty(LAYER_PROPERTY)) != null) return i.intValue(); return DEFAULT_LAYER.intValue(); } public int getLayer(Component c) { Integer i; if(c instanceof JComponent) i = (Integer)((JComponent)c).getClientProperty(LAYER_PROPERTY); else i = (Integer)getComponentToLayer().get((Component)c); if(i == null) return DEFAULT_LAYER.intValue(); return i.intValue(); } It looks like the reason you are seeing some differences here is that the layer of a JComponent instance is stored as a property of the JComponent instance but the layer of a Component instance is stored within a hashtable of JLayeredPane. Hence getLayer(JComponent c) can be static while getLayer(Component c) cannot. As you might imagine this is just the start of the strangeness of this class. Validating and painting JLayeredPane and contents can get complicated quickly.
996,A,"why isn't my Jlabels or Jpanels showing? i've added a title to my Jframe and now its blocked everything else what have I done?? public class addressbook { public JFrame frame; public JButton btnadd btndelete btnsave btnprev btnnext; public JPanel panel pTitle; public JTextField txtname txtaddress txthomeno txtmobno; public JLabel JlbName  JlbHtn JlbMtn JlbAddress lblTitle; public addressbook() { //sets window frame = new JFrame(); frame.setTitle(""Address Book""); frame.setSize(450 580); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //sets up panel panel = new JPanel(); panel.setLayout(null); frame.getContentPane().add(panel); pTitle = new JPanel(); pTitle.setLayout(new FlowLayout(FlowLayout.CENTER)); lblTitle = new JLabel(""Bournemouth University Address Book""); pTitle.add(lblTitle); frame.add(pTitle); //Labels JlbName = new JLabel(""Name:""); JlbName.setBounds(10 50 100 20); panel.add(JlbName); JlbHtn = new JLabel(""Home Number:""); JlbHtn.setBounds(10 90 150 20); panel.add(JlbHtn); JlbMtn = new JLabel(""Mobile Number:""); JlbMtn.setBounds(10 130 200 20); panel.add(JlbMtn); JlbAddress = new JLabel(""Address:""); JlbAddress.setBounds(10 170 250 20); panel.add(JlbAddress); //Text Fields txtname = new JTextField(""Name""); txtname.setBounds(120 50 200 20); panel.add(txtname); txthomeno = new JTextField(""Home Number""); txthomeno.setBounds(120 90 200 20); panel.add(txthomeno); txtmobno = new JTextField(""Mob Number""); txtmobno.setBounds(120 130 200 20); panel.add(txtmobno); txtaddress = new JTextField(""Address""); txtaddress.setBounds(120 170 250 20); panel.add(txtaddress); frame.setVisible(true); //Buttons && Button Functions btnadd = new JButton(""Add"" new ImageIcon(""../files/add.png"")); btnadd.setBounds(180 350 100 50); btnadd.addActionListener(new ActionListener() {public void actionPerformed(ActionEvent event) { }}); panel.add(btnadd); btndelete = new JButton(""Delete"" new ImageIcon(""../files/delete2.png"")); btndelete.setBounds(180 450 100 50); btndelete.addActionListener(new ActionListener() {public void actionPerformed(ActionEvent event) { }}); panel.add(btndelete); btnsave = new JButton(""Save"" new ImageIcon(""../files/save.png"")); btnsave.setBounds(180 400 100 50); btnsave.addActionListener(new ActionListener() {public void actionPerformed(ActionEvent event) { }}); panel.add(btnsave); btnprev = new JButton(new ImageIcon(""../files/left.png"")); btnprev.setBounds(180 300 100 50); btnprev.addActionListener(new ActionListener() {public void actionPerformed(ActionEvent event) { }}); panel.add(btnprev); btnnext = new JButton(new ImageIcon(""../files/right.png"")); btnnext.setBounds(180 250 100 50); btnnext.addActionListener(new ActionListener() {public void actionPerformed(ActionEvent event) { }}); panel.add(btnnext); frame.setVisible(true); panel.setVisible(true); } Classnames should be uppercase; Does this code run in the EDT? Because it should. What does ""its blocked everything else"" mean? its only showing my title panel everything else isn't showing You should also try to pick a variable naming convention and stick to it. Right now you have all lowercase camel case (with the first letter as upper and lower case) and aren't consistent with if you want the J there for your abbreviation for a Jlabel. yeah I know that but at the moment my problem is that none of the Jlabels or Jpanels are showing up Add the label to the panel don't create a new Panel for it lblTitle = new JLabel(""Bournemouth University Address Book""); lblTitle.setBounds(100 0 400 20); panel.add(lblTitle);  You have to set a LayoutManager for your frame: frame = new JFrame(); frame.getContentPane().setLayout(FooLayout());  If you are not using a LayoutManager on purpose (and it looks that way) make sure that you set a location and a size for your component. pTitle.setLocation(100 100); pTitle.setSize(100 100); But you should rather remove this line panel.setLayout(null); and replace it with something like this: panel.setLayout(new BorderLayout()); Also don’t forget to add your pTitle to panel. i'm sorry im not following i'm a novice at this Then follow Erkan’s advice and read a tutorial please: http://java.sun.com/docs/books/tutorial/uiswing/start/compile.html  I think you need to start here. This will give you an idea about how you must implement your GUI as simple as possible.  Try adding your JPanel pTitle to frame.getContentPane() or to the JPanel panel Edit Instead of frame.add(pTitle); do: frame.getContentPanel().add(pTitle); If this very quick fix doesn't help stick with the answer you've already accepted. can you explain i'm really sorry but i really dont understand java thanks i can't get it to work so im scrapping it!"
997,A,close window event in java I added an window state listener as follow: this.addWindowStateListener(new WindowAdapter() { public void windowClosing(WindowEvent e) { ExitAction.getInstance().actionPerformed(null); } }); But when I'm using the X close button the event is not called. I think it's something to do with netbean jdesktop framework. But I can't find what could be the problem. Thanks for your help. As others have pointed out the WindowListener is what you are after... but you should do this from now on when overriding a method: this.addWindowStateListener( new WindowAdapter() { @Overrides public void windowClosing(WindowEvent e) { ExitAction.getInstance().actionPerformed(null); } }); Then the compiler will tell you when you are not actually overriding a method and are instead adding a new method (that in this case will never be called). WindowAdapter is both a WindowListener and a WindowStateListener. The problem here is that it's being added as a WindowStateListener so the methods it has as a WindowListener are not called. ah true I didn't know it implemented more than WindowListener. How odd... apparently they added that in 1.4. Before 1.4 if Java had annotations what I said would have worked :-) (not deleting the answer since it is valid as a general rule just not in this specific case)  Not answering your question directly (since an answer has already been given) but I assume you want to quit your program (or just hide a window) on exit. There is a shorter solution for these situations: window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  As the Java documentation says to actually close the window the listener should invoke the window's dispose or setVisible(false) method.  Just debugged a similar problem in my Swing program. It turned out to be a Java bug that kills the system UI events when ImageIO is called before the Swing UI is created. See here for a minimal example - OSX-specific/New Java UI bug? Reproducable Java ImageIO + Close Window event bug This bug stops the system UI events such as window-close from being delivered to Java.  windowClosing is part of the WindowListener interface. Use addWindowListener instead of addWindowStateListener. +1. note that a `WindowStateListener` is used to handle events that are triggered when the window is minimized or maximized etc but not closed.  Normally you use a WindowListener for this. Check out Closing an Application for an approach I use although I must admit I've never tried it with Netbeans since I don't use an IDE.  Thank you everyone for helping me solve the problem. I don't fully understend it but the following code solve the problem:  Frame[] frames = Frame.getFrames(); for(Frame f: frames){ f.addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent e) { ExitAction.getInstance().actionPerformed(null); } }); } It look as if the framework add additional frames. Thanks
998,A,"questions on ""virtual trees"" (custom TreeModel) in Swing OK I couldn't really find a decent example for a custom TreeModel in Swing that uses more than the basic features so I wrote my own (code follows below) so I can ask questions about it rather than about a more complicated application that's the one I really want to write when I understand how to write it. Apologies for the fact that there are multiple related questions here it's hard to ask these Q's in a vacuum w/o an example to refer to and I figure it's better to put up the example once in one post than to separate out my questions. My real application is not infinite just large (state stored in a database) so a custom TreeModel seems appropriate. package com.example.test.gui; import java.awt.Color; import java.awt.Component; import java.awt.Font; import java.awt.event.ItemEvent; import java.awt.event.ItemListener; import java.awt.event.MouseEvent; import java.util.EventObject; import java.util.HashMap; import java.util.Map; import javax.swing.AbstractCellEditor; import javax.swing.JCheckBox; import javax.swing.JFrame; import javax.swing.JScrollPane; import javax.swing.JTree; import javax.swing.UIManager; import javax.swing.event.TreeModelListener; import javax.swing.tree.TreeCellEditor; import javax.swing.tree.TreeCellRenderer; import javax.swing.tree.TreeModel; import javax.swing.tree.TreePath; /* * GUI rendering of the ancestry of hailstone numbers * (see http://mathworld.wolfram.com/CollatzProblem.html) * * This is an infinite tree model. * * each node in the tree is a Long number * each node has 1 or 2 children: * all nodes N have a child 2N * any node N = 3k+1 where k > 0 has a second child k * * checkboxes are present just to see custom rendering * - nodes N where N is divisible by 7 are editable the rest are not * - editable nodes override their default state (stored in a hashmap) * - default state of a node N is checked if N is divisible by 5 * unchecked otherwise */ class HailstoneTreeModel implements TreeModel { final private Map<LongBoolean> modifiedCheckState = new HashMap<LongBoolean>(); @Override public Object getChild(Object parent int index) { if (!(parent instanceof Long)) return null; if (index < 0 || index > 1) return null; final long l = ((Long)parent).longValue(); if (index == 0) { return (l*2); } else if ((l > 1) && (l-1)%3 == 0) { return (l-1)/3; } else return null; } @Override public int getChildCount(Object parent) { if (!(parent instanceof Long)) return 0; final long l = ((Long)parent).longValue(); if ((l > 1) && (l-1) % 3 == 0) return 2; return 1; } @Override public int getIndexOfChild(Object parent Object child) { if (parent instanceof Long && child instanceof Long) { final long p = ((Long)parent).longValue(); final long c = ((Long)child).longValue(); if (p*2 == c) return 0; if (p == 3*c+1) return 1; } return -1; } @Override public Object getRoot() { return 1L; } @Override public boolean isLeaf(Object arg0) { return false; } @Override public void addTreeModelListener(TreeModelListener arg0) { // TODO Auto-generated method stub } @Override public void removeTreeModelListener(TreeModelListener arg0) { // TODO Auto-generated method stub } @Override public void valueForPathChanged(TreePath arg0 Object arg1) { // !!! what is typically done here and when does this get called? } public boolean isEditable(TreePath path) { if (path != null) { Object node = path.getLastPathComponent(); // only the nodes divisible by 7 are editable if (node instanceof Long) { return ((Long)node) % 7 == 0; } } return false; } private void _setState(Long value boolean selected) { this.modifiedCheckState.put(value selected); System.out.println(value+"" -> ""+selected); } public void setState(Object value boolean selected) { if (value instanceof Long) { _setState((Long)value selected); } } private boolean _getState(Long value) { Boolean b = this.modifiedCheckState.get(value); if (b != null) { return b.booleanValue(); } return (value.longValue() % 5 == 0); } public boolean getState(Object value) { if (value instanceof Long) { return _getState((Long) value); } return false; } public void toggleState(Object value) { if (value instanceof Long) { _setState((Long)value !_getState((Long)value)); } } } // adapted from http://www.java2s.com/Code/Java/Swing-JFC/CheckBoxNodeTreeSample.htm class CheckBoxNodeRenderer implements TreeCellRenderer { final private JCheckBox nodeRenderer = new JCheckBox(); final private HailstoneTreeModel model; private Long currentValue = null; // value currently being displayed/edited final private Color selectionBorderColor selectionForeground selectionBackground textForeground textBackground; protected JCheckBox getNodeRenderer() { return this.nodeRenderer; } public CheckBoxNodeRenderer(HailstoneTreeModel model) { this.model=model; Font fontValue; fontValue = UIManager.getFont(""Tree.font""); if (fontValue != null) { this.nodeRenderer.setFont(fontValue); } Boolean booleanValue = (Boolean) UIManager .get(""Tree.drawsFocusBorderAroundIcon""); this.nodeRenderer.setFocusPainted((booleanValue != null) && (booleanValue.booleanValue())); this.selectionBorderColor = UIManager.getColor(""Tree.selectionBorderColor""); this.selectionForeground = UIManager.getColor(""Tree.selectionForeground""); this.selectionBackground = UIManager.getColor(""Tree.selectionBackground""); this.textForeground = UIManager.getColor(""Tree.textForeground""); this.textBackground = UIManager.getColor(""Tree.textBackground""); } public Component getTreeCellRendererComponent(JTree tree Object value boolean selected boolean expanded boolean leaf int row boolean hasFocus) { Component returnValue = this.nodeRenderer; String stringValue = tree.convertValueToText(value selected expanded leaf row false); this.nodeRenderer.setText(stringValue); this.nodeRenderer.setSelected(false); this.nodeRenderer.setEnabled(tree.isEnabled()); if (selected) { this.nodeRenderer.setForeground(this.selectionForeground); this.nodeRenderer.setBackground(this.selectionBackground); } else { this.nodeRenderer.setForeground(this.textForeground); this.nodeRenderer.setBackground(this.textBackground); } if (value instanceof Long) { this.currentValue = (Long) value; } this.nodeRenderer.setSelected(this.model.getState(value)); returnValue = this.nodeRenderer; return returnValue; } public Long getCurrentValue() { return this.currentValue; } } class CheckBoxNodeEditor extends AbstractCellEditor implements TreeCellEditor { final CheckBoxNodeRenderer renderer; final HailstoneTreeModel model; public CheckBoxNodeEditor(HailstoneTreeModel model) { this.model = model; this.renderer = new CheckBoxNodeRenderer(model); ItemListener itemListener = new ItemListener() { public void itemStateChanged(ItemEvent itemEvent) { Object cb = itemEvent.getItem(); if (cb instanceof JCheckBox && itemEvent.getStateChange() == ItemEvent.SELECTED) { Long v = CheckBoxNodeEditor.this.renderer.getCurrentValue(); CheckBoxNodeEditor.this.model.toggleState(v); } // !!! the following 3 lines are important because... ? if (stopCellEditing()) { fireEditingStopped(); } } }; this.renderer.getNodeRenderer().addItemListener(itemListener); } public Object getCellEditorValue() { JCheckBox checkbox = this.renderer.getNodeRenderer(); return checkbox; } @Override public boolean isCellEditable(EventObject event) { boolean returnValue = false; Object source = event.getSource(); if (event instanceof MouseEvent && source instanceof JTree) { MouseEvent mouseEvent = (MouseEvent) event; TreePath path = ((JTree)source).getPathForLocation(mouseEvent.getX() mouseEvent.getY()); returnValue = this.model.isEditable(path); } return returnValue; } public Component getTreeCellEditorComponent(JTree tree final Object value boolean selected boolean expanded boolean leaf int row) { Component editor = this.renderer.getTreeCellRendererComponent(tree value true expanded leaf row true); return editor; } } public class VirtualTree1 { public static void main(String[] args) { HailstoneTreeModel model = new HailstoneTreeModel(); // Create a JTree and tell it to display our model JTree tree = new JTree(model); tree.setCellRenderer(new CheckBoxNodeRenderer(model)); tree.setCellEditor(new CheckBoxNodeEditor(model)); tree.setEditable(true); // The JTree can get big so allow it to scroll JScrollPane scrollpane = new JScrollPane(tree); // Display it all in a window and make the window appear JFrame frame = new JFrame(""Hailstone Tree Demo""); frame.getContentPane().add(scrollpane ""Center""); frame.setSize(400600); frame.setVisible(true); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } } See the first comment (should be visible above) for what this is showing. It's a custom TreeModel displaying an infinite tree something that would not be possible in a ""regular"" tree where all nodes in the tree need to actually exist in memory but is possible using custom TreeModels since the only parts that are displayed/instantiated are the ones the user clicks on which is inherently finite. :-) I have a few miscellaneous questions. An accepted answer for this post will be given for the best answer to my question #4. 1) TreeModel listeners -- am I correct in assuming that this is for classes that want to receive events for updates from my TreeModel? (whether I write them or someone else does) What are typical use cases? 2) TreeModel.valueForPathChanged() -- when does this get called and what would I typically do about it? 3) (this has to do with TreeCellEditor / TreeCellRenderer) -- the lines in the example I adapted had the following call: if (stopCellEditing()) { fireEditingStopped(); } what's this for? 4) as far as class organization -- is there a better way to structure this sort of thing? I figure I should have a separation between the TreeModel (M = Model in MVC) and the TreeCellEditor / TreeCellRenderer (V = view or C = controller I'm not sure) but they vaguely need to know about each other and I wasn't sure which should contain a reference to which. Right now I have the TreeModel as an independent object and the editor/renderer has a reference to the TreeModel so it can query/mutate the model as necessary. Also I'm wondering if maybe the custom TreeCellEditor and TreeCellRenderer should really be one class that implements both interfaces. My itemStateChanged() method in CheckBoxNodeEditor seems kind of weird... I get an item listener event when the checkbox gets clicked and then I kind of assume this event comes from the renderer and toggle the appropriate value since I can't seem to figure out how to determine if the check box is presently checked or unchecked selection in this checkbox object seems to be whether the mouse has been clicked or let go rather than the checkbox state. There's probably more than one way to restructure this so it seems like a better more modularized approach but right now I'm not sure how to do this so any suggestions are appreciated. 5) Directed Acyclic Graphs (DAG) displayed as a tree hierarchy -- If you run the application then expand the nodes 1248163264128 you'll see a second ""1"" which is really the same node as the first ""1"" since node values in this example application are just Long objects. If you expand this second ""1"" to 1248163264128 you will now see two ""21"" nodes. The ""21"" node can be checked/unchecked as necessary. But in an ideal world both ""21""s would update their checked state when I click on one of them. Is there any way to do this automatically? Or do I have to keep track of all the multiple paths for a single node that are currently displayed at the same time? (alternatively all the paths for a single node that exist -- possible in a finite DAG not possible in an infinite DAG) This is only an issue with DAGs where there are multiple paths to reach the same node... I have to deal with this in my application. 1 Yes. The JTree (or TreeUI) installs TreeModel listeners that trigger re-layouts of the JTree when data changes. Sometimes just updating single nodes (when a node's value changed) sometime performing a re-layout of the entire tree. 2 see below 3 I believe a better name for stopCellEditing is shouldStopCellEditing. For instance If the user hit escape. Why it is not directly bound I don't know. 4 IIRC TreeCellEditor and TreeCellRenderer do not need to know about the model. They get the data needed to display as the value object in the getTreeCellXXX method. Roughly it works like this: For each node in the tree: Get the tree's TreeCellRenderer and call getTreeCellRendererComponent(this currNode...) Use SwingUtilities paintComponent methods to draw the above component on the JTree If you are editing the node instead use the TreeCellEditor. When editing is finished get the new value from the editor. This could be ANY object. The model is updated (getModel().valueForPathChanged( path_to_changed_node newvalue )) That last step is where you would need to (in your treemodel): a. update your db b. fireTreeNodesChanged on all your tree nodes that are aliases to this data. My Solution. I would design a TreeNode (or sublcass DefaultMutableTreeNode) that holds a key describing what data it represents. Make sure it has not children initially. Have the model install a TreeWillExpandListener on the tree and when a node WILL expand load it's children at this time. This allows for lazy loading of the children and you will only need as many tree nodes in memory as visible nodes on the tree. As a bonus in a cyclic graph you have a a-cyclic tree since each repeated node is a unique alias for the same spot in the graph. Since children are loaded (and maybe unloaded) by your TreeWillExpandListener you can traverse the tree looking for equivalent aliases or register each nodes with some sort of key=>list of nodes map.  @Jason avoid long questions it makes it very painful to read. If your problem is not ""super complicated"" and you're pasting too much details it means that you want ""US"" to work for you. Try explaining your problem with few sentences. If you understand your problems correctly then there's no need to write a journal or a blog post summarize it with keywords."
999,A,"How do I easily edit the style of the selected text in a JTextPane? How do I easily edit the style of the selected text in a JTextPane? There doesn't seem to be many resources on this. Even if you can direct me to a good resource on this I'd greatly appreciate it. Also how do I get the current style of the selected text? I tried styledDoc.getLogicalStyle(textPane.getSelectionStart()); but it doesn't seem to be working. I'd recommend taking a look at Sun's Java Tutorial about editor panes.  The easiest way to manipulate text panels is using editor kits and their associated actions. You can find a demo of this in the JDK samples (under jdk\demo\jfc\Stylepad). Sample code that installs a StyledEditorKit and uses a FontSizeAction to manipulate the text:  public static void main(String[] args) { // create a rich text pane JTextPane textPane = new JTextPane(); JScrollPane scrollPane = new JScrollPane(textPane JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); // install the editor kit StyledEditorKit editorKit = new StyledEditorKit(); textPane.setEditorKit(editorKit); // build the menu JMenu fontMenu = new JMenu(""Font Size""); for (int i = 48; i >= 8; i -= 10) { JMenuItem menuItem = new JMenuItem("""" + i); // add an action menuItem .addActionListener(new StyledEditorKit.FontSizeAction( ""myaction-"" + i i)); fontMenu.add(menuItem); } JMenuBar menuBar = new JMenuBar(); menuBar.add(fontMenu); // show in a frame JFrame frame = new JFrame(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(600 400); frame.setJMenuBar(menuBar); frame.setContentPane(scrollPane); frame.setVisible(true); } (Tip: if you want to use a FontFamilyAction have a look at GraphicsEnvironment.getAvailableFontFamilyNames() and logical font family names.)  Take a look at the following code in this pastebin: http://pbin.oogly.co.uk/listings/viewlistingdetail/d6fe483a52c52aa951ca15762ed3d3 The example is from here: http://www.java2s.com/Code/Java/Swing-JFC/JTextPaneStylesExample3.htm It looks like you can change the style using the following in an action listener: final Style boldStyle = sc.addStyle(""MainStyle"" defaultStyle); StyleConstants.setBold(boldStyle true); doc.setCharacterAttributes(0 10 boldStyle true); It sets the style of the text between the given offset and length to a specific style. See the full pastebin for more details. That should fix your problem though. I just visited the java2s link and wow lots of examples.  Here's a code snippet to insert a formatted ""Hello World!"" string in a JEditorPane: Document doc = yourEditorPane.getDocument(); StyleContext sc = new StyleContext(); Style style = sc.addStyle(""yourStyle"" null); Font font = new Font(""Arial"" Font.BOLD 18); StyleConstants.setForeground(style Color.RED); StyleConstants.setFontFamily(style font.getFamily()); StyleConstants.setBold(style true); doc.insertString(doc.getLength() ""Hello World!"" style); I don't know why this was down-voted because it is the most correct answer here!  Ok wow. Hard question. So I have not found a way to get the style of a given character. You can however get the MutableAttributeSet for a given character and then test to see if the style is in that attribute set.  Style s; //your style Element run = styledDocument.getCharacterElement( textPane.getSelectionStart() ); MutableAttributeSet curAttr = ( MutableAttributeSet )run.getAttributes(); boolean containsIt = curAttr.containsAttributes( s ); One problem with getting the Style for a range of characters is that there may be more than one style applied to that range (example: you may select text where some is bold and some is not). To update the selected text you can:  Style s; //your style JTextPane textPane; //your textpane textPane.setCharacterAttributes( s false ); Oh and it appears that the function getLogicalStyle doesn't work because it's returning the default style (or maybe just the style) for the paragraph that contains p rather than the the style of the character at p."
1000,A,"Sync JMenu ButtonGroups with JToolbar ButtonGroups Imagine I'm making a simple Word Processor with Java Swing. I've got a set of Actions written to perform text justification. On the MenuBar I've got a menu:  View Left Justify Center Jusitfy Right Justify This consists of JRadioButtonMenuItems and a ButtonGroup to ensure only one item is selected at any one time. Also imagine I've got an equivalent toolbar consisting of JToggleButtons and again a ButtonGroup to ensure only only button can be active at any one time. The ""Left Justify"" JRadioButtonMenu and JToggleButton are initialised using the same Action and so on with the other items. My question is this: what is the best method for syncronizing the two groups? If I click ""Right Justify"" icon on the toolbar I want the group in the Menu to be updated accordingly and vice versa. On the other hand (me again) you could just write 1 listener in an external class. A listener for the menu and for the toolbar. When 1 changes the listener set them both to the new value.  Take a look at the Mediator Design Pattern Thanks. But it does seem like an awful lot of refactoring required in order to apply this pattern. It seems that if I did this I'd have to code specifically for each of the items. I was hoping that there is a smarter way to determine this automatically given that the menu items and the toolbar items share the same actions.  If you are using the Swing Actions the components should be disabled/enabled automatically if the action itself is. You can register yourself as a propertyListener to an action as well to monitor other changes. Look at http://java.sun.com/javase/6/docs/api/javax/swing/Action.html for detailed list of which properties are available.  Observer pattern my friend. The menu bar observe the toolbar and the toolbar observe the menu bar. They will both be observer and observable. Each one has his own listener which on a change event notify the observer (the other one) with the new value in parameter. One of the great advantage of the observer pattern is that there is very low coupling so you don't need a lot of refactoring to implement the linking to modify it or to remove it in the future.  I after a lot of searching I found information here. Basically you can add this to your action's actionPerformed method: action.putValue(Action.SELECTED_KEY Boolean.TRUE); And this will do all the work for you! Unfortunately the official Sun tutorials don't cover this aspect (or at least I didn't spot it) hence the difficulty in spotting such a simple approach to resolving my problem. This only works in Java 6 though."
1001,A,how do i clear my frame screen in java? I am making a brick game. I want the screen to get clear after every 0.1 second so that i can redraw every thing on the frame screen. Is there any way to directly clear the frame screen without any event occurence?? If you want something to happen every X milliseconds you can use a javax.swing.Timer which takes an ActionListener. As for the actual clearing action the first thing that comes to mind is Graphics.clearRect() but I suspect there may be a better way.  You should override public void paint(Graphics g) and do all your drawing in there. Then you start a timer which calls repaint(); Here is a basic example: public class MainFrame extends JFrame { int x = -1; int inc; public MainFrame() { Timer timer = new Timer(10 new ActionListener() { public void actionPerformed(ActionEvent arg0) { MainFrame.this.repaint(); } }); timer.start(); } public void paint(Graphics g) { // don't call super.paint(g) we do all the painting if(x > getWidth()) inc = -5; if(x < 0) inc = 5; x += inc; // here we clear everything g.setColor(Color.BLACK); g.fillRect(0 0 getWidth() getHeight()); g.setColor(Color.BLUE); g.drawLine(x 0 getWidth()-x getHeight()); } public static void main(String[] args) { MainFrame mainFrame = new MainFrame(); mainFrame.setSize(800 600); mainFrame.setVisible(true); } } I don't see how this could happen. Have you tried to run a copy of my example without changing anything to see if that works? Maybe you could post the relevant parts of your code? I did its not working here. I mean the new rectangle is getting over written on the previous one. resulting in a complete mess. I want my paint mehthod to first clear all the previous drawings and then redraw it.. Its not happening here...  Do what Peter suggested but override paintComponent instead of paint. I also suspect that you will find that this will flicker pretty badly (redrawing the whole screen constantly). You might want to find a better way to do that... unfortunately that isn't an area I know too much about. Here is a simple bouncing ball demo that might help. Excellent link to the sun earticle! I would override paintComponent if I would like to have the border painted by Swing. Since that's not what I wanted I used paint to increase performance. The flickering you refer to can be avoided by double-buffering (described in the sun article).
1002,A,Hide certain actions from Swing's undo manager I am trying to write a JTextPane which supports some sort of coloring: as the user is typing the text I am running some code that colors the text according to a certain algorithm. This works well. The problem is that the coloring operations is registered with the undo manager (a DefaultDocumentEvent with EventType.CHANGE). So when the user clicks undo the coloring disappears. Only at the second undo request the text itself is rolled back. (Note that the coloring algorithm is somewhat slow so I cannot color the text as it is being inserted). If I try to prevent the CHANGE events from reaching the undo manager I get an exception after several undo requests: this is because the document contents are not conforming to what the undoable-edit object expects. Any ideas? How are you trying to prevent the CHANGE events from reaching the undo manager? Can you not send the UndoManager a lastEdit().die() call immediately after the CHANGE is queued?  I have just been through this problem. Here is my solution: private class UndoManagerFix extends UndoManager { private static final long serialVersionUID = 5335352180435980549L; @Override public synchronized void undo() throws CannotUndoException { do { UndoableEdit edit = editToBeUndone(); if (edit instanceof AbstractDocument.DefaultDocumentEvent) { AbstractDocument.DefaultDocumentEvent event = (AbstractDocument.DefaultDocumentEvent) edit; if (event.getType() == EventType.CHANGE) { super.undo(); continue; } } break; } while (true); super.undo(); } @Override public synchronized void redo() throws CannotRedoException { super.redo(); int caretPosition = getCaretPosition(); do { UndoableEdit edit = editToBeRedone(); if (edit instanceof AbstractDocument.DefaultDocumentEvent) { AbstractDocument.DefaultDocumentEvent event = (AbstractDocument.DefaultDocumentEvent) edit; if (event.getType() == EventType.CHANGE) { super.redo(); continue; } } break; } while (true); setCaretPosition(caretPosition); } } It is an inner class in my custom JTextPane so I can fix the caret position on redo.  You could intercept the CHANGE edits and wrap each one in another UndoableEdit whose isSignificant() method returns false before adding it to the UndoManager. Then each Undo command will undo the most recent INSERT or REMOVE edit plus every CHANGE edit that occurred since then. Ultimately I think you'll find that the styling mechanism provided by JTextPane/StyledDocument/etc. is too limited for this kind of thing. It's slow it uses too much memory and it's based on the same Element tree that's used to keep track of the lexical structure of the document. It's okay (I guess) for applications in which the styles are applied by the user like word processors but not for a syntax highlighter that has to update the styles constantly as the user types. There are several examples out there of syntax-highlighting editors based on custom implementations of the Swing JTextComponent View and Document classes. Some like JEdit re-implement practically the whole javax.swing.text package but I don't think you need to go that far.  I can only assume how you are doing the text colouring. If you are doing it in the StyledDocuments change character attribute method you can get the undo listener and temporarily deregister it from the document for that operation and then once the colour change has finshed then you can reregister the listener. Should be fine for what you are trying to do there. hope that helps
1003,A,Making a JDialog button respond to the Enter key I have a JQueryDialog with a text field an OK button and a cancel button. I want to be able to hit the enter key after filling in the text fields and have it do the same action as when I click the OK button. What happened to the code? Are JQueryDialog(in question) and JDialog(in title) surely the same things? The code is almost correct. I would change the if comparison and use the correct method as noted below. if (KeyEvent.VK_ENTER == event.getKeyCode()) { yourButton.doClick(); } Where do you see the code? It looks like the original code that I responded to is missing.  In your dialog call getRootPane().setDefaultButton(okButton).
1004,A,"Java: Difference between the setPreferredSize() and setSize() methods in components Ok I read the Java Documentation and I just can't figure out what is the main difference between those two methods. Sometimes I used setSize() sometimes setPreferredSize() sometimes one does what I want sometimes the other. So what is the main difference between the two? Which one should I use for JFrames and JPanels? Thanks setSize() or setBounds() can be used when no layout manager is being used. However if you are using a layout manager you can provide hints to the layout manager using the setXXXSize() methods like setPreferredSize() and setMinimumSize() etc. And be sure that the component's container uses a layout manager that respects the requested size. The FlowLayout GridBagLayout and SpringLayout managers use the component's preferred size (the latter two depending on the constraints you set) but BorderLayout and GridLayout usually don't.If you specify new size hints for a component that's already visible you need to invoke the revalidate method on it to make sure that its containment hierarchy is laid out again. Then invoke the repaint method.  The short answer is: it's complicated. The slightly longer answer is: use setSize() if your component's parent has no layout manager and setPreferredSize() and its related setMinimumSize and setMaximumSize if it does. setSize() probably won't do anything if the component's parent is using a layout manager; the places this will typically have an effect would be on top-level components (JFrames and JWindows) and things that are inside of scrolled panes. You also must call setSize() if you've got components inside a parent without a layout manager. As a general rule setPreferredSize() should do the ""right thing"" if you've got a layout manager; most layout managers work by getting the preferred (as well as minimum and maximum) sizes of their components and then using setSize() and setLocation() to position those components according to the layout's rules. So (as an example) a BorderLayout will try to make the bounds of its ""north"" region equal to the preferred size of its north component - they may end up larger or smaller than that depending on the size of the jframe the size of the other components in the layout and so on. My recommendation is to always use a layout manager. SetSize() should be thought of as something that the layout manager calls - not something that you call. I thought a component was using a layout manager by default (BorderLayout?) so if I don't explicitly set a layout manager does that mean I should use setSize() instead of setPreferredSize()? I believe JPanels use BorderLayout by default but JComponent has no default layout. Most of the time you're better off setting a layout manager if you'll be adding something instead of using setSize(). @Sbodd - JPanels have a FlowLayout by default. JFrame.getContentPane() has a BorderLayout by default.  setSize will resize the component to the specified size. setPreferredSize sets the preferred size. The component may not actually be this size depending on the size of the container it's in or if the user re-sized the component manually. Can you show a full example of setPreferredSize(...). I think that this would be helpful.  IIRC ... setSize sets the size of the component. setPreferredSize sets the preferred size. The Layoutmanager will try to arrange that much space for your component. It depends on whether you're using a layout manager or not ... and what if I add two jpanels to a jframe without specifying a layout manager explicitly for the jframe? what method should i used to set the size of the jpanels? Content panes use BorderLayout by default (http://java.sun.com/docs/books/tutorial/uiswing/layout/using.html). So the JFrame's contentpane has a LayoutManager so setPreferredSize _should_ work .. Sounds good that means I should use setSize for the JFrame and setPreferredSize for the components inside According to the docs i'd say so ... You would generally use frame.pack() to take advantage of the calculated preferred size of all the child components. Otherwise if you just randomly use frame.setSize() then the components added to the content pane will expand/contract to fit the space available which means the preferred size of each component may be overridden."
1005,A,How to design interface for a game in Java We're a team of a designer and a programmer. Me the programmer is hopeless on design of all sorts so the user interface of the game must be created by the designer. We were thinking of a main screen where the character walks around a small minimap in the top an inventory section etc. All these things would have to be designed in a way that looks pretty i.e nice graphics/buttons/colors etc. I'm assuming that the designer will create an outline of this interface in photoshop/illustrator then send me the file in .png or .jpeg format and I'll implement it into the program making sure the buttons all work etc. My question is is this the correct method for doing this? Should he send me the interface's layout in a .png/.jpeg format or send me only the buttons and I have to code the rest of the interface manually in java putting the buttons/icons where they need to be etc. If so how can I do this? Any classes/frameworks that do this? Any guidelines at all will be helpful. Thanks! The designer will also have to learn something about game development how to produce textures that will work fine at different resolutions if it's a platformer to create sprites that lend themselves properly to animation and so on and so forth. Answering your question he'll probably need to do both (send you buttons sprites etc. and a global view to see how it all fits together). I suggest you both check http://www.gamedev.net/reference/ and http://www.gamasutra.com  take a look at this: http://www.cs.qub.ac.uk/~P.Hanna/CSC207/lectures/lectures.htm the link is not working anymore. :( anyone knows about resources related to this class?  You've described one of the primary use cases stated for JavaFX. There's at least one visual design tool already out for it as well. I've also seen articles on this blog that address the idea of taking visual assets from a graphic designer and working with them in an app. And of course you can drop into Java for the heavy lifting at any point.  It really depends on a few things..Is it for J2ME or are you considering this for desktop (OpenGL/JOGL)? For J2ME you have to really know a bit about making games for devices with constrained memory. J2ME comes with its own GameCanvas and Sprite related classes that you can utilise. I Would recommend you read up on J2ME game development either through google or buy a book. While there are 3D libraries for the J2ME environment I have never been impressed by it. For a desktop based game I would recommend using some form of accelerated hardware based libraries for 2D or 3D based games. Bit of a steep learning curve but better in the long run. Plenty of libraries out there to help you get started(Jogl and JAva3D for example) You should look into using some called a scene graph which will help you provide a good foundation to start from. Once again steep learning curve but much easier to maintain and develop with. In regards to your design/implementation question it seems you dont have much experience in this area.Generally graphic designers/UI interaction designer will have a better understanding of how to provide an interface for the game. They will generally develop a mock of some sortyou will implement it a test will be done with user's and feedback will determine where you go from there. If you dont have some form of interaction designer you or your designers will need to read up on it. Interaction through an interfaceespecially for games is not an easy thing and can make or break your game. But it seems that you should definitely do some reading up on game architectures before proceeding to implementation phase if you do not have experience in this area. It will help you understand some theory and get a foundation before going ahead and building something which inevitably turns out to be completely wrong.  I suggest you look at java games which do this already for examples of how this is done. e.g. http://sourceforge.net/projects/freecol/#item3rd-2 http://sourceforge.net/projects/megamek/#item3rd-2 http://sourceforge.net/project/screenshots.php?group_id=1111 +1 attaching similar reference: http://www.brackeen.com/javagamebook/  Think up some weird XML format that completely describes the interface and make him create it. :)
1006,A,"Gui - Best way to navigate between windows? I try to build a gui (Swing) for a simple java application. The application should have a start window like a menu. From there I would like to navigate to several other windows. My question is what is the best-practice to achieve such a navigation? Should I build several JFrames and switch the visibility of them on/off when navigating OR should I better have one JFrame and add/remove JPanels in this single frame to navigate between the windows? Thanks. Multiple JFrames sounds like a better idea to me. Much more OO.  You must find a balance between these goals: Not too many things in one ""window"" The user must quickly be able to find the correct window to do the next step of work All relevant information must be visible at any time Eclipse solves this by creating many small editors where each editor shows some specific information and allows to modify it. Editors are then arranged within one OS window in tabs and ""views"". A view is always completely visible and they can be arranged. Think of a view as a way to cut an existing editor in half (horizontal or vertical) and then being able to replace one of the halves with another editor. Between each half you have a splitter so you can adjust the sizes. Arrangements of views are then saved in ""perspectives"". This allows every user to create a perspective which contains all the necessary editors at the same time arrange them as they need it and work effectively.  I recommend Do not do a MDI application with sub-frames like those found in the old Windows days. They suck as they make the matter confusing. Do design a tabbed interface. The welcome page/menu will be displayed on a first tab that is always created on the start. All cool kids do that nowadays: Visual Studio Eclipse Firefox  If each of your windows correspond to different task (possibly nested) you could present your application as a SDI with on the left a task panel like: Each of the task would display one JFrame with the associated window. Other solution: a table of content like this picture on the left side (note: it actually also displays a task panel in this example on the bottom right) @WChargin one from an old (2007) project 'l2fprod': http://www.l2fprod.com/common/learn.php What LaF is the first screenshot using?"
1007,A,"Running a Jar file alone Hai I have an application which is designed in netbeans6.0.1 where i need to display an image as an logo.My coding is as below mLogo = new JLabel(); URL lUrlLogo = getclass().getResource(""/com/images/image.gif""); Image lLogoimage = Toolkit.getDefaultToolkit().getImage(lUrlLogo); ImageIcon licon = new ImageIcon(lLogoimage); mLogo.setIcon(licon); My code works fine when i execute it in netbeans but when I try to run my jar file which is created by netbeans in dist folderit gives me an exception Uncaught error fetching image: java.lang.NullPointerException at sun.awt.image.URLImageSource.getConnection(Unknown Source) at sun.awt.image.URLImageSource.getDecoder(Unknown Source) at sun.awt.image.InputStreamImageSource.doFetch(Unknown Source) at sun.awt.image.ImageFetcher.fetchloop(Unknown Source) at sun.awt.image.ImageFetcher.run(Unknown Source) Whats the problem with my jar Can some one help me to run my jar Thanking u Your jar file will need to include the image. See this tutorial or this one for instructions for how to do that. Basically if you include the file in a source folder (with the appropriate path) it should be okay. If you think you've already got the image there run jar tvf file.jar to show the contents. Make sure everything's where you expect it to be in terms of directories. EDIT: As per the comments the problem turned out to be due to case sensitivity. Finding resources in a jar file is always case-sensitive whereas loading them from a file system is only case-sensitive if the file system is. So if your file is image.GIF but you're looking for image.gif then it'll work when you're loading from the file system in Windows but not in the jar file. yes i have the image inside my jar and in the location where i need it but still its not working If you call getResourceAsStream() instead of getResource() what happens? If that returns null then it sounds like the file *isn't* there or in the right place. Do you have it correct in terms of casing? Even if your normal file system is case-insensitive resource lookup in the jar file won't be. Thank u I got it its casesensitive with in extension i have changed it and its working Okay will edit my answer to make this clear.  And you have checked that the JAR file contains the path ""/com/images/image.gif""? Also I'm not really sure about the leading slash I always used relative paths to access resources (but I guess it should work anyways). As an example from class it.lapo.example.Main I use getClass().getResource(""resources/logo.png"") and in the JAR files are this way: it/lapo/example/Main.class it/lapo/example/resources/logo.png I know... not much different from your own example but it does work... so I guess yours is quite close to being correct too. I have used relativepaths and I found my image in specified path but still its not working"
1008,A,"How to center a Window in Java? What's the easiest way to centre a java.awt.Window such as a JFrame or a JDialog? The title should be ""in Swing"" not ""in Java"" it would be more clear that way. @Joe `setLocation()` `setLocationRelativeTo()` and `setLocationByPlatform()` or all AWT not Swing. ;) frame.setLocationRelativeTo(null); Full example:  public class BorderLayoutPanel { private JFrame mainFrame; private JButton btnLeft btnRight btnTop btnBottom btnCenter; public BorderLayoutPanel() { mainFrame = new JFrame(""Border Layout Example""); btnLeft = new JButton(""LEFT""); btnRight = new JButton(""RIGHT""); btnTop = new JButton(""TOP""); btnBottom = new JButton(""BOTTOM""); btnCenter = new JButton(""CENTER""); } public void SetLayout() { mainFrame.add(btnTop BorderLayout.NORTH); mainFrame.add(btnBottom BorderLayout.SOUTH); mainFrame.add(btnLeft BorderLayout.EAST); mainFrame.add(btnRight BorderLayout.WEST); mainFrame.add(btnCenter BorderLayout.CENTER); // mainFrame.setSize(200 200); // or mainFrame.pack(); mainFrame.setVisible(true); //take up the default look and feel specified by windows themes mainFrame.setDefaultLookAndFeelDecorated(true); //make the window startup position be centered mainFrame.setLocationRelativeTo(null); mainFrame.setDefaultCloseOperation(mainFrame.EXIT_ON_CLOSE); } }  Actually frame.getHeight() and getwidth() doesnt return values  check it by System.out.println(frame.getHeight()); directly put the values for width and height then it will work fine in center. eg: as below Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize(); int x=(int)((dimension.getWidth() - 450)/2); int y=(int)((dimension.getHeight() - 450)/2); jf.setLocation(x y); both 450 is my frame width n height -1 a frame's size is zero before ... sizing it :-) Preferably by pack or at least by manually setting its size to anything else than zero _before_ calling setLocationRelative will allow its internal correct calculation  setLocationRelativeTo(null) should be called after you either use setSize(xy) or use pack(). this worked for me in JDK 1.7  The following doesn't work for JDK 1.7.0.07: frame.setLocationRelativeTo(null); It puts the top left corner at the center - not the same as centering the window. The other one doesn't work either involving frame.getSize() and dimension.getSize(): Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize(); int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2); int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2); frame.setLocation(x y); The getSize() method is inherited from the Component class and therefore frame.getSize returns the size of the window as well. Thus subtracting half the vertical and horizontal dimensions from the vertical and horizontal dimensions to find the xy coordinates of where to place the top-left corner gives you the location of the center point which ends up centering the window as well. However the first line of the above code is useful ""Dimension..."". Just do this to center it: Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize(); JLabel emptyLabel = new JLabel(""""); emptyLabel.setPreferredSize(new Dimension( (int)dimension.getWidth() / 2 (int)dimension.getHeight()/2 )); frame.getContentPane().add(emptyLabel BorderLayout.CENTER); frame.setLocation((int)dimension.getWidth()/4 (int)dimension.getHeight()/4); The JLabel sets the screen-size. It's in FrameDemo.java available on the java tutorials at the Oracle/Sun site. I set it to half the screen size's height/width. Then I centered it by placing the top left at 1/4 of the screen size's dimension from the left and 1/4 of the screen size's dimension from the top. You can use a similar concept. Neither does the other one. These codes put the top left corner of the screen in the center. -1 can't reproduce - or more precisely: happens only if the setLocationRelative is called _before_ sizing the frame (by pack or manual setSize). For a zero-sized frame it's top-left corner is the same location as .. its center :-) -1. See Dzmitry Sevkovich answer  On Linux the code  setLocationRelativeTo(null) Put my window to random location each time I launched it in a multi display environment. And the code  setLocation((Toolkit.getDefaultToolkit().getScreenSize().width - getSize().width) / 2 (Toolkit.getDefaultToolkit().getScreenSize().height - getSize().height) / 2); ""cut"" the window in half with placing it to the exact center which is between my two displays. I used the following method to center it: private void setWindowPosition(JFrame window int screen) { GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] allDevices = env.getScreenDevices(); int topLeftX topLeftY screenX screenY windowPosX windowPosY; if (screen < allDevices.length && screen > -1) { topLeftX = allDevices[screen].getDefaultConfiguration().getBounds().x; topLeftY = allDevices[screen].getDefaultConfiguration().getBounds().y; screenX = allDevices[screen].getDefaultConfiguration().getBounds().width; screenY = allDevices[screen].getDefaultConfiguration().getBounds().height; } else { topLeftX = allDevices[0].getDefaultConfiguration().getBounds().x; topLeftY = allDevices[0].getDefaultConfiguration().getBounds().y; screenX = allDevices[0].getDefaultConfiguration().getBounds().width; screenY = allDevices[0].getDefaultConfiguration().getBounds().height; } windowPosX = ((screenX - window.getWidth()) / 2) + topLeftX; windowPosY = ((screenY - window.getHeight()) / 2) + topLeftY; window.setLocation(windowPosX windowPosY); } Makes the window appear right at the center of the first display. This is probably not the easiest solution. Works properly on Linux Windows and Mac.  Note that both the setLocationRelativeTo(null) and Tookit.getDefaultToolkit().getScreenSize() techniques work only for the primary monitor. If you are in a multi-monitor environment you may need to get information about the specific monitor the window is on before doing this kind of calculation. Sometimes important sometimes not... See GraphicsEnvironment javadocs for more info on how to get this. This helped me immensely! Thanks!  From this blog: If you are using Java 1.4 or newer you can use the simple method setLocationRelativeTo(null) on the dialog box frame or window to center it. As @kleopatra said on another answer setLocationRelativeTo(null) has to be called after pack() in order to work. As explained below setLocationRelativeTo(null) has to be called after any call of pack() or setSize(). Well pack() sets the correct size based on the contents and layout and you can't centre something unless you know its size so it is indeed odd that the tutorial had you packing it after centering it. @Eusebius Odd I followed a tutorial that made me set it before `pack()` and it put the topleft corner of the frame at the center of my screen. After moving the line to below `pack()` it got properly centered. You learn something new every day.  This should work in all versions of Java public static void centreWindow(Window frame) { Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize(); int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2); int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2); frame.setLocation(x y); }"
1009,A,Image slider I want to create something like this http://flowplayer.org/tools/demos/scrollable/index.html but in Java Swing. I dont need all those effects just scrolling of thumbnail images. Is good aproach to use toolbar and ImageIcons and then on click load image on some JPanel. Is there any common practice for this ? Use a JPanel with a GridLayout containing a JLabel for each image. Then you can add the panel to a scrollpane. You can turn off the scrollbars so they are not visible. You can then use the technique described in Action Map Action to create buttons to do the scrolling. Hm. that is exactly what I need. Thank you very much for your answer.  Check out Kirill Grouchnikov's Trident animation library in particular Project Onyx which looks like it might do what you need. (Edit: It's probably not an out-of-the-box solution but the library itself looks nice and you could probably adapt some of the example application to suit your needs).
1010,A,"Detecting keyboard direction keys using keyPressed G'day all After learning on here that the Java console doesn't support keyboard input a great deal I switched to Swing and AWT. My problem now is how to detect when the keyboard direction keys (non-numeric keypad) are used. My code (below) does not do more than print a ""small box"" character when pressing the down up left right keys. This small box character is no different from the character used by the CTRL and ALT keys for example. Does anyone know what the identity of the keyboard direction keys actually is so that I can code for them in my application? import java.awt.*; import java.awt.event.*; import javax.swing.*; public class KeyChecker extends JFrame { JLabel keyLabel = new JLabel(""Hit any key""); public KeyChecker() { super(""Hit a Key""); setSize(300 200); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setLayout(new FlowLayout(FlowLayout.CENTER)); KeyMonitor monitor = new KeyMonitor(this); setFocusable(true); addKeyListener(monitor); add(keyLabel); setVisible(true); } public static void main(String[] arguments) { new KeyChecker(); } } class KeyMonitor extends KeyAdapter { KeyChecker display; KeyMonitor(KeyChecker display) { this.display = display; } public void keyPressed(KeyEvent event) { display.keyLabel.setText("""" + event.getKeyChar()); display.repaint(); } } What you should do is look at the virtual key code rather than the key character in keyPressed. Like so: public void keyPressed(KeyEvent event) { switch (event.getKeyCode()) { case KeyEvent.VK_UP: // up arrow break; case KeyEvent.VK_DOWN: // down arrow break; case KeyEvent.VK_RIGHT: // right arrow break; case KeyEvent.VK_LEFT: // left arrow break; } } See http://java.sun.com/javase/6/docs/api/java/awt/event/KeyEvent.html for full information. Excellent. Thanks David much appreciated."
1011,A,Transparent Swing Windows I have a little JWindow with a logo on it that users can drag stuff to. I develop my application mainly on OS X. To get a transparent window i use setBackground(new Color(0000)); On a mac this works beautifully but i can't get the same effect on windows. Is there any way to get a transparent window without using 1.6 specific features. i need 1.5 compatibility. Sadly windows (previous to Vista at least) doesn't do this kind of compositing. There is however a workaround. Example code can be found at http://rabbit-hole.blogspot.com/2007/02/non-rectangular-windows-update.html AWTUtilities setWindowOpacity works fine for me in XP. JNA (http://github.com/twall/jna) provides this functionality in a utility class.  As of 1.5 Java does not support transparent windows. This feature is introduced as part of 1.6.10 release. See AWTUtilities class for more details.
1012,A,"Why does JDialog 'jump' on setLocationRelativeTo()? Have a class that extends JDialog. It's initialized entirely on EDT (just in case). Now public PropsDialog (JFrame parentFrame) { super(parentFrame); // boring pack(); setLocationRelativeTo(getParent()); setVisible(true); } results in dialog appearing in the leftmost corner and then jumping to it's intended position. Am I doing smth wrong? What happens when you call pack() after setLocationRelativeTo()? Jumps from the very same corner and ends up not correctly centered against the parent frame (which is correct). Seems like a bug as I'm getting this behavior on built-in LaFs only. Synth works as expected. How about calling setVisible(false) just before setLocationRelativeTo()? Really appreciate your effort. Thanks. Unfortunately that doesn't change a thing. I think I'll end up checking on different JDKs under Win Linux & Mac to see if the behavior is the same. Could you provide a working example and more information? For example on what operating system are you testing on? Swing has some differences between some e.g. JDialogs without a parent getting an entry in the gnome panel but not in the windows taskbar and things like that. Secondly I would guess that your JDialog is visible before you call setLocationRelativeTo maybe through somewhat within the part you commented out as ""boring"". I would suggest you punch a quick System.out.println(isVisible()); into your code just before setLocationRelativeTo just in case... You were close :). Refactoring the dialog to extend JDialog i missed out the show() call on it. This method previously fired a call to JOptionPane that in turn displayed a JDialog and been removed during refactoring. But as class extends JDialog now the show() call actually sets it visible."
1013,A,"Multi-line tooltips in Java? I'm trying to display tooltips in Java which may or may not be paragraph-length. How can I word-wrap long tooltips? Please provide a code example. Don't tool tips automatically word-wrap if they're wrapped in HTML tags? I'm not sure so I'm not putting this in as an answer. Paul: Only if you have explicit line-breaks. Tooltip text which starts with ""<html>"" will be treated as HTML. Of course that might be very wide HTML. You can override JComponent.createTooltip to replace the tooltip with your own component which can display whatevee you like. +1 for explaining how to replace the default tooltip  You can subclass JToolTip which is a Component and override createToolTip() on the component.  Here is a version which I have used before it works well if you are loading your tool tips from ResourceBundles: import javax.swing.JComponent; import javax.swing.JToolTip; import javax.swing.LookAndFeel; import javax.swing.UIManager; import javax.swing.plaf.ComponentUI; import javax.swing.plaf.ToolTipUI; import java.awt.Dimension; import java.awt.FontMetrics; import java.awt.Graphics; import java.util.regex.Pattern; /** * A tooltip that wraps multi-line text. */ public final class MultiLineToolTipUI extends ToolTipUI { private static final int INSET = 2; private static final Pattern LINE_SPLITTER = Pattern.compile(""$"" Pattern.MULTILINE); private static final MultiLineToolTipUI SHARED_INSTANCE = new MultiLineToolTipUI(); /** * Install the multi-line tooltip into the UI manager. */ public static void installUI() { String toolTipUI = MultiLineToolTipUI.class.getName(); UIManager.put(""ToolTipUI"" toolTipUI); UIManager.put(toolTipUI MultiLineToolTipUI.class); } @SuppressWarnings(""UnusedDeclaration"") public static ComponentUI createUI(JComponent c) { return SHARED_INSTANCE; } private MultiLineToolTipUI() {} @Override public Dimension getMaximumSize(JComponent c) { return getPreferredSize(c); } @Override public Dimension getMinimumSize(JComponent c) { return getPreferredSize(c); } @Override public Dimension getPreferredSize(JComponent c) { String[] lines = LINE_SPLITTER.split(((JToolTip) c).getTipText()); if (lines.length == 0) { return new Dimension(2 * INSET 2 * INSET); } FontMetrics metrics = c.getFontMetrics(c.getFont()); Graphics g = c.getGraphics(); int w = 0; for (String line : lines) { w = Math.max(w (int) metrics.getStringBounds(line g).getWidth()); } int h = lines.length * metrics.getHeight(); return new Dimension(w + 2 * INSET h + 2 * INSET); } @Override public void installUI(JComponent c) { LookAndFeel.installColorsAndFont(c ""ToolTip.background"" ""ToolTip.foreground"" ""ToolTip.font""); LookAndFeel.installBorder(c ""ToolTip.border""); } @Override public void paint(Graphics g JComponent c) { int w = c.getWidth() h = c.getHeight(); g.setColor(c.getBackground()); g.fillRect(0 0 w h); g.setColor(c.getForeground()); g.drawRect(0 0 w h); String[] lines = LINE_SPLITTER.split(((JToolTip) c).getTipText()); if (lines.length != 0) { FontMetrics metrics = c.getFontMetrics(c.getFont()); int height = metrics.getHeight(); int y = INSET + metrics.getAscent(); for (String line : lines) { g.drawString(line INSET y); y += height; } } } @Override public void uninstallUI(JComponent c) { LookAndFeel.uninstallBorder(c); } } And you would use it by calling this method before your UI is created: MultiLineToolTipUI.installUI(); Then in your properties files just insert newlines to wrap your tool tips as desired.  This could be improved somewhat but my approach was a helper function called before setting tooltip that split the tooltip text at provided length but adjusted to break words on space where possible. import java.util.ArrayList; import java.util.List; /** * */ public class MultiLineTooltips { private static int DIALOG_TOOLTIP_MAX_SIZE = 75; private static final int SPACE_BUFFER = 10; public static String splitToolTip(String tip) { return splitToolTip(tipDIALOG_TOOLTIP_MAX_SIZE); } public static String splitToolTip(String tipint length) { if(tip.length()<=length + SPACE_BUFFER ) { return tip; } List<String> parts = new ArrayList<>(); int maxLength = 0; String overLong = tip.substring(0 length + SPACE_BUFFER); int lastSpace = overLong.lastIndexOf(' '); if(lastSpace >= length) { parts.add(tip.substring(0lastSpace)); maxLength = lastSpace; } else { parts.add(tip.substring(0length)); maxLength = length; } while(maxLength < tip.length()) { if(maxLength + length < tip.length()) { parts.add(tip.substring(maxLength maxLength + length)); maxLength+=maxLength+length; } else { parts.add(tip.substring(maxLength)); break; } } StringBuilder sb = new StringBuilder(""<html>""); for(int i=0;i<parts.size() - 1;i++) { sb.append(parts.get(i)+""<br>""); } sb.append(parts.get(parts.size() - 1)); sb.append((""</html>"")); return sb.toString(); } } Use like jComponent.setToolTipText(MultiLineTooltips.splitToolTip(TOOLTIP));  Use HTML tooltips and manually break your lines (a simple word tokenizer with a fixed line length should do it). Just make sure your tooltop text starts with ""<HTML>"". Break lines with ""<BR/>"" or ""<P>"". I realize it's not the most clean solution and Java's HTML support is horrible but it should get things done.  I know this one is quite old but i found a quite simple solution using HTML code! Just use a HTML Paragraph with a fixed width: setToolTipText(""<html><p width=\""500\"">"" +value+""</p></html>""); What if I want to display text that is much shorter than tooltip size? ""max-width"" tag doesn't work here  Example: jTextField1.setToolTipText(""<html>"" + ""Line One"" +""<br>"" + ""Line 2"" + ""</html>""); This does not answer the asker's question. He was asking about wrapping when it is displayed not in source code. @Thelema Ah so in that case I'd've formatted it as `jTextField1.setToolTipText(""Line One Line 2"");` @ArtB this example code does give a two-line tooltip as asked.  If you wrap the tooltip in <html> and </html> tags you can break lines with <br> tags. See http://www.jguru.com/faq/view.jsp?EID=10653 for examples and discussion. Or you can use the JMultiLineToolTip class that can be found many places on the net including http://code.ohloh.net/search?s=jmultilinetooltip +1 for diligence for finding resources that I was too lazy to find I used the JMultiLineToolTip class you suggested. Once I used setFixedWidth() to limit the tooltip to a reasonable size it worked great. Thanks!"
1014,A,"How to select first item in JPopupMenu? In the past when one made a JPopupMenu visible it's first item would get selected by default: http://weblogs.java.net/blog/alexfromsun/archive/2008/02/jtrayicon_updat.html Nowadays the default behavior is to pop up the menu without any item selected. I would like create a JPopupMenu with a single item that will pop up selected and centered under the mouse pointer. I have managed to get the item to pop up centered under the mouse but I the JMenuItem refuses to render as if it is selected. If I move the mouse out of the item and back in it selects properly. Any ideas? Here is my testcase: import java.awt.Component; import java.awt.Point; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import javax.swing.JFrame; import javax.swing.JMenuItem; import javax.swing.JPopupMenu; public class Test extends JFrame { public static void main(String[] args) { JFrame frame = new JFrame(); frame.setSize(800 600); frame.getContentPane().addMouseListener(new MouseAdapter() { @Override public void mousePressed(MouseEvent e) { if (e.isPopupTrigger()) popupTriggered(e); } @Override public void mouseReleased(MouseEvent e) { if (e.isPopupTrigger()) popupTriggered(e); } private void popupTriggered(MouseEvent e) { JPopupMenu menu = new JPopupMenu(); final JMenuItem item = new JMenuItem(""This is a JMenuItem""); menu.add(item); Point point = e.getPoint(); int x = point.x - (item.getPreferredSize().width / 2); int y = point.y - (item.getPreferredSize().height / 2); menu.show((Component) e.getSource() x y); } }); frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); frame.setVisible(true); } } I found some inconsistent behavior too (see my updated answer). Can you confirm this? I reported this as a bug to Sun. I'll let you know what they write back. Here is the associated bug report: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6799989 MenuSelectionManager.defaultManager() is indeed a good solution but it won't work when you'll try to pre-select your JPopupMenu's sub menus (it will hide the parent menu). Also it messes up other keyboard navigation behaviors (you can't press left to hide the sub-menu etc.) Unfortunatelly there's no good solution for this question in Swing... My solution is ugly but sadly does the job perfect: public static void setMenuSelectedIndex(final JPopupMenu popupMenu final int index) { SwingUtilities.invokeLater(new Runnable(){public void run() { for (int i=0; i < index+1; i++) { popupMenu.dispatchEvent(new KeyEvent(popupMenu KeyEvent.KEY_PRESSED 0 0 KeyEvent.VK_DOWN '\0')); } }}); } As you can see I'm basically simulating 'Down' Keyboard Key-Presses on the popupmenu... A better solution might be not to Hardcodedly simulate VK_DOWN but to read the Popup's input map and determine which KeyCode means ""select next menu item"" - but I think most of us will get along with this hack... You might also want to look at this method which selects a menu's item once it gets selected It utilizes the previous method public static void setSelectedIndexWhenVisible(final JMenu menu final int index) { menu.getPopupMenu().addPopupMenuListener(new PopupMenuListener() { @Override public void popupMenuWillBecomeVisible(PopupMenuEvent e) { PopupUtils.setMenuSelectedIndex(menu.getPopupMenu() index); menu.getPopupMenu().removePopupMenuListener(this); } @Override public void popupMenuWillBecomeInvisible(PopupMenuEvent e) { } @Override public void popupMenuCanceled(PopupMenuEvent e) { } }); } aside from that the solution of simulating the down arrow keypress does work. er what's PopupUtils? Doesn't seem to be part of my JDK.  Nowadays the default behavior is to pop up the menu without any item selected. Actually I would argue that this is the correct behavior at least in Windows. Other non-Java applications do this too. I don't think it's worth breaking this convention even if there is only one item in the menu. If you feel otherwise you can set the selection index as in sean.bright's answer. So I finally got the chance to try it out on Java 1.6.0_11 and found some inconsistent behavior: If the popup menu juts out of the parent frame the item is automatically selected; if the popup menu appears entirely within the parent frame nothing is selected. Sounds like a Swing bug which at least warrants an RFE for consistent behavior. +1: The right behavior is whatever the particular platform does for other (non-Java) programs. Zach I agree with your general assessment but unfortunately this doesn't answer my question. I *want* to break away from the conventional behavior but I'm finding it impossible to do so. I'm trying to find out if this is a Swing bug or user error. I filed a bug report with Sun: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6799989  Secret turns out to be MenuSelectionManager.defaultManager().setSelectedPath(new MenuElement[]{menu ...}); import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import javax.swing.JFrame; import javax.swing.JMenuItem; import javax.swing.JPopupMenu; import javax.swing.MenuElement; import javax.swing.MenuSelectionManager; import javax.swing.SwingUtilities; /** * Demonstrates programmatic {@link JMenuItem} selection; * specifically how to make the first item selected by default */ public class TestPopup extends JFrame { public static void main(String[] args) { final JFrame frame = new JFrame(""TestPopup""); frame.setSize(640 480); frame.getContentPane().addMouseListener(new MouseAdapter() { @Override public void mousePressed(MouseEvent e) { if (e.isPopupTrigger()) { popupTriggered(e); } } private void popupTriggered(MouseEvent e) { final JPopupMenu menu = new JPopupMenu(); final JMenuItem item0 = new JMenuItem(""JMenuItem 0""); final JMenuItem item1 = new JMenuItem(""JMenuItem 1""); menu.add(item0); menu.add(item1); menu.pack(); // use invokeLater or just do this after the menu has been shown SwingUtilities.invokeLater(new Runnable() { public void run() { MenuSelectionManager.defaultManager().setSelectedPath(new MenuElement[]{menu item0}); } }); int x = (int) ((int) (frame.getSize().width - (menu.getPreferredSize().width / 2.)) / 2.); int y = (int) ((int) (frame.getSize().height - (menu.getPreferredSize().height / 2.)) / 2.); menu.show(frame x y); // doesn't work: //item0.setSelected(true); // doesn't work: //menu.getSelectionModel().setSelectedIndex(0); // bingo; see also MenuKeyListener / MenuKeyEvent // MenuSelectionManager.defaultManager().setSelectedPath(new MenuElement[]{menu item0}); } }); frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); frame.setLocationRelativeTo(null); frame.setVisible(true); } }  This is weird. I tried it with Windows and with Java 1.5.0_08 and even 1.6.0_07 the first Element is selected automatically as you expected it to be. So I tried it with 1.6.0_11 and it does not work any more the first element is not selected initially. Selecting the element in the selectionModel does not seem to help. One workaround (that I'm not at all proud of) is to move the mouse automatically after displaying the popup menu using the coordinates of the MouseEvent. Maybe someone's got a better idea? import java.awt.AWTException; import java.awt.Robot; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import javax.swing.JFrame; import javax.swing.JMenuItem; import javax.swing.JPopupMenu; public class SelectedPopupMenu extends JFrame { public SelectedPopupMenu() { addMouseListener(new MouseAdapter() { public void mouseClicked(final MouseEvent e) { JPopupMenu popupMenu = new JPopupMenu(); popupMenu.add(new JMenuItem(""Test-Item"")); popupMenu.add(new JMenuItem(""Test-Item-2"")); // do not care to really hit the center of the popup popupMenu.show(SelectedPopupMenu.this e.getX() - 30 e.getY() - 10); try { // shake mouse so that first element is selected even in Java 1.6.0_11 Robot robot = new Robot(); robot.mouseMove(e.getX() + 1 e.getY()); robot.mouseMove(e.getX() e.getY()); } catch (AWTException ex) { ex.printStackTrace(); } } }); } public static void main(String[] args) { JFrame frame = new SelectedPopupMenu(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(800 600); frame.setVisible(true); } }"
1015,A,"Have setMnemonic underline a character other than the first occurrence In a re-implementation of an existing program I would like to keep the message text that users are familiar with. One of the enhancements I'd like to add is a good keyboard-only interface including mnemonics. But using the intuitive mnemonic character with the existing text gives some ugly results. For example:  useUpperCheckBox = new JCheckBox(""Use UPPERCASE letters""); useUpperCheckBox.setMnemonic(KeyEvent.VK_U); underlines the ""U"" in ""Use"" rather than the ""U"" in ""UPPERCASE"". Since the user's eye is naturally drawn to ""UPPERCASE"" looking for a mnemonic the default location of the decoration is a bit unintuitive. Yes I've read the docs and the tutorials that say that the first instance of the mnemonic character is underlined but that isn't what I want. It comes up often enough that I can't believe I'm the only one frustrated by this. Surely someone smarter than me has figured out how to place the decoration somewhere different than the default location. I think what you are looking for is: setDisplayedMnemonicIndex(int index)  I realise this isn't the situation here but it is related: If you are using AbstractAction try putValue(DISPLAYED_MNEMONIC_INDEX_KEY index);.  Use the source Luke. Looking at the source code of setMnemonic() led me quickly to AbstractButton.setDisplayedMnemonicIndex(): Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic. Perfect! Thanks for the pointer. +1 for teaching how to find the answer rather just giving the answer."
1016,A,"In Java Swing how can you manage a list of panels allowing multiple panels to be selected? I’m working on an in-house app that tracks a bunch of tasks. I wanted to have a simple task monitor that would list the task name and the task’s status. I need this to look just a little nice I’m no designer so whatever I do is going to suck but a basic text display won’t work for the project requirements. What I am essentially attempting to do is show something similar to the Firefox download window the I-Tunes download window and well I could name more but they all look basically the same. In each of these apps each of the ‘progress panels’ is selectable. So to implement this I thought it would be simple to just use a list of JPanels each with a JProgressBar and a JLabel each of which can just accept focus to determine if it and others are selected. I thought this was going to be an easy task but if I use a JList it just displays text. I then just figured I would show all the task panels in a larger panel but I cannot get the inner panels to recognize focus. Is there a pattern for this? Is there a rolled standard solution that I just have not found? Or is there a better method for doing this? I don’t want to re-invent the wheel but I thought this was just going to be simple. It sounds like what you may be looking for is an JList. You can add your items to the JList's by first adding your ""task"" to the JList object's ListModel (see the Create a Model section from The Java Tutorials) and then you'll want to assigned a custom ListCellRenderer which will accept your ""task"" and render on the JList as a JPanel in the list itself. The key here is to make your custom ListCellRenderer be able to display your ""task"" in the JList the way you want to have it show on the JList. Take a look into the Writing a Custom Cell Renderer section from the How to Use Lists page of The Java Tutorials. It will describe how to make your custom ListCellRenderer so you can represent your ""task"" as anything you want. To keep it short you will implement the ListCellRenderer interface by implementing the getListCellRendererComponent which will return a Component which is the representation of your task in the JList. You'll probably want to either construct or instantiate your JPanel in this method and return it as the Component. Here's some simple code showing how to render JPanels in a JList as alluded to in the answer: http://www.rgagnon.com/javadetails/java-0203.html  How about a JTable (which you can set to allow multiple rows to be selected) with an internal JPanel occupying the single cell in each row which contains a JProgressBar and a JLabel. Or you could use a JList with the same structure as I just described.  The standard way of doing this kind of things is to use JTable (or JList) as a container. You don't have to use default renderes fot table cells but you can specify your own renderer for specific cells. Take a look at CellRenderer"
1017,A,"How to enable events on components in JList I'm using custom renderer on JList but none of components rendered are accessible. list.setCellRenderer(new ListCellRenderer() { public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { JCheckBox c = new JCheckBox(); JButton b = new JButton(""My Button!""); JPanel p = new JPanel(new FlowLayout()); p.add(c); p.add(b); if (isSelected) { p.setBackground(Color.LIGHT_GRAY); } return p; } }); Clicking on checkbox or button doesn't do anything. I've also tried to add ActionListener to buttons but it didn't fire while clicked. The only thing that works is background color while selected item (see screenshot). There is not even the ""click animation"" when I click the button. So my question is do I have to do something else to enable evens on rendered components? FYI it's never a good idea to create new components insider of renderer. Think of the renderer as a rubber stamp. The list alters the contents based on list items and then stamps the renderer onto the graphics area. If you create a new one everytime you're wasting memory and making the garbage collector unhappy Same as for Tables really. A renderer component is not actually a real component. It just like a template used to draw a fake component. Why don't you try sticking your components in either a JScrollPane or make them into a one column JTable and implement the appropriate renderer/editors instead? Yeah renderers pretty much do what they say : render. They're not to be used to convey any logic."
1018,A,How to select nodes in Netbeans Visual Library? I create a graph based visual applicaion using a Netbens Visual Library. Can somebody post a code sample that enables a selection of nodes with mouse clicks (and Ctrl key fo multiple selection) ? Thanks in advance. same link but test.object.MultiMoveActionTest is a more relevant example.  http://graph.netbeans.org/examples.html contains many well written examples. Don't miss test.action.SelectLockedActionTest!
1019,A,"Override JComboBox Default Colors I'm trying to override the defaults colors used by JComboBox when the L & F is Metal. I have overridden the following in UIManager to custom colors; ComboBox.font ComboBox.selectionBackground ComboBox.buttonShadow ComboBox.buttonHighlight ComboBox.disabledBackground and control controlDkShadow controlHighlight controlLtHighlight controlShadow I'm however not able to remove a light blue rectangle around the text Any ideas how i can change this? still have this issue and its driving me mad If you are talking about the light blue border surrounding the whole combobox(button and text). You can achieve this by setting the property ""Combobox.border"" in the UIManager to either null or another border. If you want to look further at the subject you can take a look at javax.swingx.BasicComboBoxUI. This is where the border is installed in the first place. Search for the method ""installDefaults"" which uses a static call to javax.swing.LookAndFeel to install the border.  To do that you'd have to replace ComboBoxUI in your Look and Feel. Not everything is controlled by colors in UIDefaults. *UI classes do actual drawing."
1020,A,"How to add hyperlink in JLabel Which is the best way to add a hyperlink in jLabel? I can get the view using html tags but how to open the browser when the user clicks on it? [http://sourceforge.net/projects/jhyperlink/](http://sourceforge.net/projects/jhyperlink/) Maybe use JXHyperlink from SwingX instead. It extends JButton. Some useful links: Class JXHyperlink SwingX: Consider JXHyperlink As An Alternative To Buttons  You can do this using a JLabel but an alternative would be to style a JButton. That way you don't have to worry about accessibility and can just fire events using an ActionListener.  public static void main(String[] args) throws URISyntaxException { final URI uri = new URI(""http://java.sun.com""); class OpenUrlAction implements ActionListener { @Override public void actionPerformed(ActionEvent e) { open(uri); } } JFrame frame = new JFrame(""Links""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(100 400); Container container = frame.getContentPane(); container.setLayout(new GridBagLayout()); JButton button = new JButton(); button.setText(""<HTML>Click the <FONT color=\""#000099\""><U>link</U></FONT>"" + "" to go to the Java website.</HTML>""); button.setHorizontalAlignment(SwingConstants.LEFT); button.setBorderPainted(false); button.setOpaque(false); button.setBackground(Color.WHITE); button.setToolTipText(uri.toString()); button.addActionListener(new OpenUrlAction()); container.add(button); frame.setVisible(true); } private static void open(URI uri) { if (Desktop.isDesktopSupported()) { try { Desktop.getDesktop().browse(uri); } catch (IOException e) { /* TODO: error handling */ } } else { /* TODO: error handling */ } } This was so helpfull and cool I always wondered how to do this thanks a million :) +1 Alternately use a `JTextField` as shown in [this answer](http://stackoverflow.com/a/13871898/418556). +1 great job done man :)  I wrote an article on how to set a hyperlink or a mailto on a jLabel. So just try it : I think that's exactly what you're searching for. Here's the complete code example : /** * Example of a jLabel Hyperlink and a jLabel Mailto */ import java.awt.Cursor; import java.awt.Desktop; import java.awt.EventQueue; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import java.io.IOException; import java.net.URI; import java.net.URISyntaxException; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; /** * * @author ibrabelware */ public class JLabelLink extends JFrame { private JPanel pan; private JLabel contact; private JLabel website; /** * Creates new form JLabelLink */ public JLabelLink() { this.setTitle(""jLabelLinkExample""); this.setSize(300 100); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); this.setLocationRelativeTo(null); pan = new JPanel(); contact = new JLabel(); website = new JLabel(); contact.setText(""<html> contact : <a href=\""\"">YourEmailAddress@gmail.com</a></html>""); contact.setCursor(new Cursor(Cursor.HAND_CURSOR)); website.setText(""<html> Website : <a href=\""\"">http://www.google.com/</a></html>""); website.setCursor(new Cursor(Cursor.HAND_CURSOR)); pan.add(contact); pan.add(website); this.setContentPane(pan); this.setVisible(true); sendMail(contact); goWebsite(website); } /** * @param args the command line arguments */ public static void main(String args[]) { /* * Create and display the form */ EventQueue.invokeLater(new Runnable() { @Override public void run() { new JLabelLink().setVisible(true); } }); } private void goWebsite(JLabel website) { website.addMouseListener(new MouseAdapter() { @Override public void mouseClicked(MouseEvent e) { try { Desktop.getDesktop().browse(new URI(""http://www.google.com/webhp?nomo=1&hl=fr"")); } catch (URISyntaxException | IOException ex) { //It looks like there's a problem } } }); } private void sendMail(JLabel contact) { contact.addMouseListener(new MouseAdapter() { @Override public void mouseClicked(MouseEvent e) { try { Desktop.getDesktop().mail(new URI(""mailto:YourEmailAddress@gmail.com?subject=TEST"")); } catch (URISyntaxException | IOException ex) { //It looks like there's a problem } } }); } } now that is what you call cool!!  You might try using a JEditorPane instead of a JLabel. This understands basic HTML and will send a HyperlinkEvent event to the HyperlinkListener you register with the JEditPane.  I know I'm kinda late to the party but I made a little method others might find cool/useful. public static JLabel linkify(final String text String URL String toolTip) { URI temp = null; try { temp = new URI(URL); } catch (Exception e) { e.printStackTrace(); } final URI uri = temp; final JLabel link = new JLabel(); link.setText(""<HTML><FONT color=\""#000099\"">""+text+""</FONT></HTML>""); if(!toolTip.equals("""")) link.setToolTipText(toolTip); link.setCursor(new Cursor(Cursor.HAND_CURSOR)); link.addMouseListener(new MouseListener() { public void mouseExited(MouseEvent arg0) { link.setText(""<HTML><FONT color=\""#000099\"">""+text+""</FONT></HTML>""); } public void mouseEntered(MouseEvent arg0) { link.setText(""<HTML><FONT color=\""#000099\""><U>""+text+""</U></FONT></HTML>""); } public void mouseClicked(MouseEvent arg0) { if (Desktop.isDesktopSupported()) { try { Desktop.getDesktop().browse(uri); } catch (Exception e) { e.printStackTrace(); } } else { JOptionPane pane = new JOptionPane(""Could not open link.""); JDialog dialog = pane.createDialog(new JFrame() """"); dialog.setVisible(true); } } public void mousePressed(MouseEvent e) { } public void mouseReleased(MouseEvent e) { } }); return link; } It'll give you a JLabel that acts like a proper link. In action: public static void main(String[] args) { JFrame frame = new JFrame(""Linkify Test""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(400 100); frame.setLocationRelativeTo(null); Container container = frame.getContentPane(); container.setLayout(new GridBagLayout()); container.add(new JLabel(""Click "")); container.add(linkify(""this"" ""http://facebook.com"" ""Facebook"")); container.add(new JLabel("" link to open Facebook."")); frame.setVisible(true); } If you'd like no tooltip just send a null. Hope someone finds this useful! (If you do be sure to let me know I'd be happy to hear.)  Use a JEditorPane with a HyperlinkListener.  I didn't really like the way the @McDowell's code works (but thanks for the answer it helped me!) since text other than the hyperlink is clickable and it still looks like a button even though some of the UI stuff has been changed/hidden. I'm no usability expert but I'm sure it wouldn't be terribly hard to make a JLabel work correctly according to whatever standards there are - the linked Wikipedia article wasn't terribly clear about the exact problems or solutions but I'd be happy to try to implement them if pointed in the right direction. So I threw together my own class extending JLabel from McDowell's code. IMHO it works quite nicely and feels more like a link: public class SwingLink extends JLabel { private static final long serialVersionUID = 8273875024682878518L; private String text; private URI uri; public SwingLink(String text URI uri){ super(); setup(texturi); } public SwingLink(String text String uri){ super(); URI oURI; try { oURI = new URI(uri); } catch (URISyntaxException e) { // converts to runtime exception for ease of use // if you cannot be sure at compile time that your // uri is valid construct your uri manually and // use the other constructor. throw new RuntimeException(e); } setup(textoURI); } public void setup(String t URI u){ text = t; uri = u; setText(text); setToolTipText(uri.toString()); addMouseListener(new MouseAdapter() { public void mouseClicked(MouseEvent e) { open(uri); } public void mouseEntered(MouseEvent e) { setText(textfalse); } public void mouseExited(MouseEvent e) { setText(texttrue); } }); } @Override public void setText(String text){ setText(texttrue); } public void setText(String text boolean ul){ String link = ul ? ""<u>""+text+""</u>"" : text; super.setText(""<html><span style=\""color: #000099;\"">""+ link+""</span></html>""); this.text = text; } public String getRawText(){ return text; } private static void open(URI uri) { if (Desktop.isDesktopSupported()) { Desktop desktop = Desktop.getDesktop(); try { desktop.browse(uri); } catch (IOException e) { JOptionPane.showMessageDialog(null ""Failed to launch the link "" + ""your computer is likely misconfigured."" ""Cannot Launch Link""JOptionPane.WARNING_MESSAGE); } } else { JOptionPane.showMessageDialog(null ""Java is not able to launch links on your computer."" ""Cannot Launch Link""JOptionPane.WARNING_MESSAGE); } } } You could also for instance change the link color to purple after being clicked if that seemed useful. It's all self contained you simply call: SwingLink link = new SwingLink(""Java"" ""http://java.sun.com""); mainPanel.add(link);  If <a href=""link""> doesn't work then: Create a JLabel and add a MouseListener (decorate the label to look like a hyperlink) Implement mouseClicked() event In the implementation of mouseClicked() event perform your action Have a look at java.awt.Desktop API for opening a link using the default browser (this API is available only from Java6).  I'd like to offer yet another solution. It's similar to the already proposed ones as it uses HTML-code in a JLabel and registers a MouseListener on it but it also displays a HandCursor when you move the mouse over the link so the look&feel is just like what most users would expect. If browsing is not supported by the platform no blue underlined HTML-link is created that could mislead the user. Instead the link is just presented as plain text. This could be combined with the SwingLink class proposed by @dimo414. public class JLabelLink extends JFrame { private static final String LABEL_TEXT = ""For further information visit:""; private static final String A_VALID_LINK = ""http://stackoverflow.com""; private static final String A_HREF = ""<a href=\""""; private static final String HREF_CLOSED = ""\"">""; private static final String HREF_END = ""</a>""; private static final String HTML = ""<html>""; private static final String HTML_END = ""</html>""; public JLabelLink() { setTitle(""HTML link via a JLabel""); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); Container contentPane = getContentPane(); contentPane.setLayout(new FlowLayout(FlowLayout.LEFT)); JLabel label = new JLabel(LABEL_TEXT); contentPane.add(label); label = new JLabel(A_VALID_LINK); contentPane.add(label); if (isBrowsingSupported()) { makeLinkable(label new LinkMouseListener()); } pack(); } private static void makeLinkable(JLabel c MouseListener ml) { assert ml != null; c.setText(htmlIfy(linkIfy(c.getText()))); c.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR)); c.addMouseListener(ml); } private static boolean isBrowsingSupported() { if (!Desktop.isDesktopSupported()) { return false; } boolean result = false; Desktop desktop = java.awt.Desktop.getDesktop(); if (desktop.isSupported(Desktop.Action.BROWSE)) { result = true; } return result; } private static class LinkMouseListener extends MouseAdapter { @Override public void mouseClicked(java.awt.event.MouseEvent evt) { JLabel l = (JLabel) evt.getSource(); try { URI uri = new java.net.URI(JLabelLink.getPlainLink(l.getText())); (new LinkRunner(uri)).execute(); } catch (URISyntaxException use) { throw new AssertionError(use + "": "" + l.getText()); //NOI18N } } } private static class LinkRunner extends SwingWorker<Void Void> { private final URI uri; private LinkRunner(URI u) { if (u == null) { throw new NullPointerException(); } uri = u; } @Override protected Void doInBackground() throws Exception { Desktop desktop = java.awt.Desktop.getDesktop(); desktop.browse(uri); return null; } @Override protected void done() { try { get(); } catch (ExecutionException ee) { handleException(uri ee); } catch (InterruptedException ie) { handleException(uri ie); } } private static void handleException(URI u Exception e) { JOptionPane.showMessageDialog(null ""Sorry a problem occurred while trying to open this link in your system's standard browser."" ""A problem occured"" JOptionPane.ERROR_MESSAGE); } } private static String getPlainLink(String s) { return s.substring(s.indexOf(A_HREF) + A_HREF.length() s.indexOf(HREF_CLOSED)); } //WARNING //This method requires that s is a plain string that requires //no further escaping private static String linkIfy(String s) { return A_HREF.concat(s).concat(HREF_CLOSED).concat(s).concat(HREF_END); } //WARNING //This method requires that s is a plain string that requires //no further escaping private static String htmlIfy(String s) { return HTML.concat(s).concat(HTML_END); } /** * @param args the command line arguments */ public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { new JLabelLink().setVisible(true); } }); } } not doing the connecting on the EDT is an excellent catch! Need to fix SwingX HyperlinkAction to not doing it as well :-) filed an issue in SwingX: http://java.net/jira/browse/SWINGX-1530 - thanks for bringing this up :-) @kleopatra You're welcome :) It seems you couldn't reproduce the blocking behaviour of Desktop.browse - on my slow machine it does block for sure most notably if the browser is not open yet. good point! added your comment to the issue - nearly tended to close as won't fix your comment saved me :-) This is an interesting solution. I like how it extends JLabel - this means that GroupLayout is more likely to position it like a label not like a button. I have noticed that using buttons seems to increase the spacing you get between components..."
1021,A,"ToolTip on second monitor is displayed at the edge of the monitor I have got a component. The ToolTip of the component is set by the setToolTipText() method. On the first monitor everything works fine. Now when I move the frame to the second monitor the tooltips are displayed at the edge of the monitor (on the side to the firt monitor). This happens only with tooltips of this component. The problem appeares on other machines too. Yet I've only tested it with Vista. Why is this? Is this a bug in Swing? How can I fix it? The tooltip-text depends on the mouse cursor location. Therefore I may edit the code and override the getToolTipText(MouseEvent e) method. It would be realy nice to know whats the reason for this problem before starting to change the code. Thanks in advance. There are several bug tickets in the Java bug database which seem to relate to this e.g. Tooltip issue when using dual monitor (dual head) configuration. JToolTip in JApplet will place tooltip in wrong monitor Problem with Action button tooltips with some multiple monitor configurations On is closed as duplicate of another one claims to be fixed and another has fix-understood set. One workaround posted by some user is frame.pack(); frame.setLocation(location); frame.setLocation(new Point(0 0)); frame.setLocation(location); kieron.wilkinson The reason this works is that setLocation() eventually calles Component.reshape() which in turn calls a method called Component.notifyNewBounds(boolean resized boolean moved) which transverses the component hierarchy setting each components bounds. By default this is done ""lazyily"" but they are not set before the window is moved. The above code forces them to be set. This is also why the tooltips start working properly after dragging the window from one screen to another. Thanks I think you had some work to research this. I tried to change the code to getToolTipText which works fine after first tests. Well a couple of google search and reading the three bug reports + postings on them. Then writing the answer. no problem"
1022,A,What methods get called when you resize a JFrame? I'm using a JFrame in which the CENTER portion of the BorderLayout is occupied by a JScrollPane that wraps around a JPanel. What I'm finding is that when I initiate the action that actually causes the JPanel to be displayed the display doesn't change. But when I resize the JFrame the new JScrollPane has now magically appeared. So what methods are called when you resize a JFrame? If I know then I can call it in the code and avoid having to resize the frame just to see the results of the operation. Its been a little bit since I've done swing but from memory calling validate() on the panel should do the trick. This will cause it and its children to have their layout calculated which is when the scrollbars decision is made. If that doesn't work try calling validate on the frame's content pane. This is a little more costly but may be needed if other components are being considered. Calling validate() on the content pane was the ticket. Thanks so much!
1023,A,"Is JOptionPane.showMessageDialog thread safe? JOptionPane.showMessageDialog is supposed to be a useful utility for getting user feedback as it blocks your current thread while you wait. I would expect therefore that it would be thread-safe and that you wouldn't need to wrap the call in an invokeLater or an invokeAndWait. Is this the case? There is a related discusion in the answers and comments of [this question](http://stackoverflow.com/q/4750128/741249). One argument is that even though it isn't thread safe in practice this isn't a problem and there is no need to run it on the EDT. Taken from the javax.swing package description: Swing's Threading Policy In general Swing is not thread safe. All Swing components and related classes unless otherwise documented must be accessed on the event dispatching thread. Typical Swing applications do processing in response to an event generated from a user gesture. For example clicking on a JButton notifies all ActionListeners added to the JButton. As all events generated from a user gesture are dispatched on the event dispatching thread most developers are not impacted by the restriction. Where the impact lies however is in constructing and showing a Swing application. Calls to an application's main method or methods in Applet are not invoked on the event dispatching thread. As such care must be taken to transfer control to the event dispatching thread when constructing and showing an application or applet. The preferred way to transfer control and begin working with Swing is to use invokeLater. The invokeLater method schedules a Runnable to be processed on the event dispatching thread. JOptionPane does not document that it is thread safe so you have to use invokeLater(). JOptionPane is never used outside the event queue thread If you attempt modifying or anything then it'd be thread unsafe.  You should only be calling this method from the event dispatch thread as this is the only thread that should interact with Swing components. If you wish to pause background processing whilst awaiting user feedback I suggest you use a SwingWorker implementation whereby the doInBackground() method periodically calls publish() allowing process() to be called on the Swing thread. doInBackground() can then potentially block until some action is taken within process(). For example: new SwingWorker<Void Void>() { private volatile boolean done; // Called on background thread public void doInBackground() { for (int i=0; i<1000000; ++i) { // Do work if (i % 1000 == 0) { publish(); // Will cause process() to be called on Event Dispatch thread. synchronized(this) { wait(); } if (done) { System.err.println(""Background thread stopping.""); return null; } } } } // Called on Event dispatch thread. protected void process(List<Void> chunks) { if (JOptionPane.showConfirmDialog(getFrame() ""Do you want to quit?"" ""Confirm Quit"" JOptionPane.YES_NO_OPTION JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) { done = true; } synchronized(this) { notifyAll(); } } }.execute(); Thanks I am familiar with SwingWorker. No problem ... although it's arguable whether you want to actually pause your background thread whilst displaying the dialog; it probably makes more sense for it to keep processing until the user makes a decision.  No this is not the case. The blocking behavior is very specifically coded into the event queue (by pushing a new queue so that further events can get processed and blocking this one). As with all swing components they can only be used in the event queue."
1024,A,Eclipse SWING app: breakpoint hit only after an uncaught exception is thrown I have a really strange issue. I am working on a Java SWING application in Eclipse. I set a breakpoint somewhere in my code then run the debug. I execute the piece of code containing the breakpoint but it is always skipped. As soon as I run some code that throws an uncaught exception the breakpoints start being hit again without changing anything else. The code that throws the exception and the one containing the breakpoint are not related. I tried to set the breakpoints in several places but they never get hit until the exception is thrown. I have this problem only for this one specific application. My debugger works fine for other SWING apps. Can you think of any reason causing this? For downloading java6u13 (previous release before the current 14 one) you can go to: http://java.sun.com/products/archive/j2se/6u13/index.html What exact version of eclipse and Java are you running? Are you aware of this question? (bug 279137: Breakpoints fail to hit under JDK 1.6.0_14 ) As gojomo remarks in the comments that bug (279137) now (July 21 2009) mentions: The bug is now visible in the sun bug database: bug 6862295. We have listed a workaround for this problem which can be used while we investigate a fix for the bug. Work Around Using the option -XX:+UseParallelGC makes the failure not reproducible with either the Client VM or the Server VM. (Option yo add to the eclipse.ini) I would recommend that you use the 'watch this bug' feature so you can be notified when there are updates to the bug. Here is the link to watch this specific bug FIXED As the release note of the jdk6_u16 (late August 2009) mentions that bug has been fixed Bug fixed in this release: 6862295 JDWP threadid changes during debugging session (leading to ignored breakpoints) I experienced this a lot. Thank you for the bug report link. @Andrea: For downloading java6u13 (previous release before the current 14 one) you can go to: http://java.sun.com/products/archive/j2se/6u13/index.html I think this may be the reason. I tried to download the 1.6.0_13 but I cannot find it anywhere. Does anyone have a link? Thanks a lot! This seems to have solved the problem. @AndreAC glad to hear it. I hope java6u15 will fix this issue. Do not forget you can launch your eclipse with java6u14 (for latest Hotspot optimizations and a speedier eclipse) but declared within eclipse as default JRE a jdk6u13 (for compilation and running your programs) The bug now mentions another workaround for 6u14: use the JVM option: -XX:+UseParallelGC The fix for bug 6862295 has been released in Java 6 update 16 @spdenne: thank you for this reminder (I knew about this release I just had forgotten about this answer!). This post has now been updated.  Have you started the GUI in a seperate thread? I don't recognize your particular problem but a lot of strange problems disappeared once I started to use this code from the java tutorials : SwingUtilities.invokeLater(new Runnable() { public void run() { createAndShowGUI(); } }); Ahhhh...the good ol' invokelater. I remember the time when I superstitiously used it any time I ever had any Swing problems. I even had a nested call to it once.
1025,A,"What's wrong with JSplitPanel (or JTabbedPane)? I have two panels that i wish to display to the user. I decided to add them to a JTabbedPane. I also want to allow the user to have a side by side view of them both at the same time. So I added the two panels to my JTabbedPane and then i created a JSplitPanel as such :  tabs.addTab(""Align Image Points"" imageControlPanel); tabs.addTab(""Align Map Points"" mapControlPanel); JSplitPane splitPane = new JSplitPane( JSplitPane.HORIZONTAL_SPLIT true imageControlPanel mapControlPanel); tabs.addTab(""Side by side view"" splitPane); The resulting JTabbedPane only has one tab! When i remove the JSplitPane everything works ok. Two tabs. I then tried simplifying the problem to post here and i came up with this : import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JSplitPane; import javax.swing.JTabbedPane; public class Test { public static void main(String[] args) { JFrame f = new JFrame(""Test""); JButton b1 = new JButton(""First""); JButton b2 = new JButton(""Second""); JSplitPane s = new JSplitPane(JSplitPane.HORIZONTAL_SPLITtrueb1b2); JTabbedPane tabs = new JTabbedPane(); tabs.addTab(""First"" b1); tabs.addTab(""Second"" b2); tabs.addTab(""Both"" s); f.getContentPane().add(tabs); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); f.setVisible(true); } } This gave me another problem! It displays 3 tabs but the third tab's split pane displays no buttons! So my question is What is wrong with JSplitPanel? You can't have it display objects that are already displayed in another tab? It makes no sense. Please help me. (Note: i don't want to duplicate the components that i am about to display as i want them to be the same reference) I had the same problem that you had. what I had resolved for this issue I made the each GUI as MVC pattern(Model-view-controller) that controller knows how to iterative with gui components. I created a new instance of GUIs(View) on each Tab;however I injected the same instance of controller for that GUI as constructor parameter since the controller knows how to handle GUI flow and behaviors. for example  GUIView1Controller controller1 = new GUIView1Controller(); GUIView2Controller controller2 = new GUIView2Controller(); // Add new instance GUI ; however  use the same instance of controller JSplitPane s = new JSplitPane(JSplitPane.HORIZONTAL_SPLITtrue new GUIView1(controller1) new GUIView2(controller2)); JTabbedPane tabs = new JTabbedPane(); tabs.addTab(""First"" new GUIView1(controller1)); tabs.addTab(""Second"" new GUIView2(controller2)); tabs.addTab(""Both"" s ); GUIView1 and GUIView2 will register all GUI listeners to the controller so the controller will be notified and take an action for the listeners. whatever the GUIView1 on ""First"" tab is changed the GUIView1 on ""Both"" tab also is updated as the same behaviors of the GUIView1 on ""First"" tab. The drawback was you have to create a new instance of the GUIView on the tab and JSplitPane; however the controller can control and share all gui events and behaviors. I hope it helps. Tiger. Yes I like the banjollity idea that you can add ""addChangeListener"" on the tab you can only create one instance of GUIView and based on that change listner you can switch the gui components back and forth. Thanks for the answer. It seems right (since you solved this problem yourself) but i found another GUI design for my program that is actually better for my case so i wont need to implement this.  Swing UIs are hierarchical and you can only add a component to the hierarchy once. If you add a component to more than one container you'll get unpredictable results. You are correct to not want to duplicate the components but you'll need a listener on the JTabbedPane to add and remove each component from the tab or the JSplitView as the selection of the tabs changes. tabs.addChangeListener( new ChangeListener() { public void stateChanged(ChangeEvent e) { // Reorganise the display based on the current tab selection. } }"
1026,A,"java GUI programming tools? which is one is the best java GUI generating tool NetBeans Jigloo Please suggest me if you have any other choices. I need the following functionalities: Drag and drop feature able to add code manually after some point of time code readability need to rename variables. I'm not a JBuilder lover but it does have a rather good GUI Editor. I aged 10 years trying to sort out GRIDBAG JBuilder saved me a load of grey hair! But JBuilder is commercial .. i need opensource ... Then add that as one of your requirements.  There's also Visual editor for Eclipse. Matisse has a better designer but VE works better with existing code. Thanks Soufinane Hassou Matiese has been ported and shown to work in Eclipse. Its rather funny that Eclipse has to import this functionality :P  cloudgarden for eclipse. yes you are talking about Jigloo GUI Builder  NetBeans' Matisse is very good and flexible. You can rename variables the generated code is relatively readable Drag and Drop is supported and you can always manipulate the screen manually (although you cannot (or better - shouldn't) touch the generated code. Thanks Bozho .. i am using Netbean's only.But here i design the GUI and get the file outside and added my application logic after i am not able to copy this file to the original file which is present in NetBeans .. how to do this? Netbeans does have a nice GUI builder but after a certain point in the development process I often have to ""break"" the connection between the GUI builder and the code. The GUI code in the IDE is regenerated based on "".form"" file associated with the Java file. You can just erase the "".form"" file and you will be able to do whatever you want with the Java source. You just won't be able to use the GUI builder with that file again."
1027,A,"How to copy styled text in JTextPane I'm trying to create a WYSIWYG editor using JTextPane. I'm using DefaultEditorKit.CopyAction to copy text in the editor. But this method does not preserve the style of the text. Can someone tell me how to copy the text in JTextPane and preserve the style please ? The book publisher Manning offers a free download of the first edition of ""Swing"" by Matthew Robinson and Pavel Vorobiev at http://www.manning.com/robinson2. (Scroll down the page looking for the link ""Download Complete Swing Book (MS Word 97)."") Chapter 20 talks about developing a WYSIWYG RTF editor using a JTextPane as part of the editing component. The new version of the book is revised and describes the creation of a WYSIWYG HTML editor but it is not free. (Despite what the page at the link says the paper copy of the new edition does not appear to be available but the eBook is if you're interested.) This was a great resource for me when I was trying to do something similar. Example in the first edition ""perform clipboard operations using plain text without any attributes"". The point of the question is to do this in a styled manner.  I have a class that uses the following code to copy all the text out of the StyledDocument into the user's clipboard; it appears to preserve attributes like color bold and underline (haven't tested it with anything else). Note that ""this.doc"" is a StyledDocument. No guarantees that this is the best method.  try { Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard(); RTFEditorKit rtfek = new RTFEditorKit(); ByteArrayOutputStream baos = new ByteArrayOutputStream(); rtfek.write( baos this.doc 0 this.doc.getLength() ); baos.flush(); DataHandler dh = new DataHandler( baos.toByteArray() rtfek.getContentType() ); clpbrd.setContents(dh null); } catch ( IOException | BadLocationException e ) { e.printStackTrace(); } If you want to only copy a subsection of the document I think you want to modify this line: rtfek.write( baos this.doc int startPosition int endPosition ) Edit: It turns out that whoever created RTFEditorKit decided that they did not need to adhere to their API. Essentially the startPosition and endPosition above have no effect. /** * Write content from a document to the given stream * in a format appropriate for this kind of content handler. * * @param out The stream to write to * @param doc The source for the write. * @param pos The location in the document to fetch the * content. * @param len The amount to write out. * @exception IOException on any I/O error * @exception BadLocationException if pos represents an invalid * location within the document. */ public void write(OutputStream out Document doc int pos int len) throws IOException BadLocationException { // PENDING(prinz) this needs to be fixed to // use the given document range. RTFGenerator.writeDocument(doc out); }  http://java-sl.com/tip_merge_documents.html You can use this. If you need part of the document just select desired fragment of the source pane."
1028,A,"java swing app with a custom titlebar? Is there a way to write a Java Swing application with a custom chrome? Please take a look* at the frame for Microsoft's Zune 4.0 software. I realize that colors the shape of scroll bars etc. are controlled by skins or looks and feels. Right now I'm trying to tackle the native window which houses the java components--the title bar mainly. Thanks (*) http://www.winsupersite.com/zune/zune4%5Fshots.asp No part of a Swing component's look and feel is ""native"" in any way. Swing components are ""lightweight"" which means they are entirely drawn on the Java side and not at all on the windowing system side. To create custom ""chrome"" you create the UI delegates for one or more components. In yor case you'd want to muck around with the delegates for JRootPane and JInternalFrame.  The Look and Feel of Swing apps are pluggable..that is it can change on the fly. You can create your own look and feel but its not a simple undertaking. To get started this tutorial explains. This article does a little more. This project demonstrates what could be done. So its up to your imagination.  By default the frame of a JFrame is native. This can be removed by calling Frame.setUndecorated. The Sun Window PL&F does not provide a title bar. You could hack a JInternalFrame so that it draws the frame although that probably isn't going to be as easy as it may seem. Of course if you are going the full custom route you can draw whatever you want. From 6u10 Sun's JRE also provides APIs to make windows transparent and non-rectangular."
1029,A,"How to combine repaints in Swing? I am calling repaint a bunch of times from a listeners but the way I designed my paint function is only one repaint is required. I generate a bunch of repaints since it hooked into my mouse motion listener. Is there a way to cancel all pending repaints for a certain component? I can't just start ignoring repaints since some are valid like when you resize the frame or restore it from minimize. Why do I care? Because my paint code is very heavy and I can't do full repaints at a very high FPS. I hear what your saying. You can indeed repaint only a section of area. In the ""Performing Custom Painting Examples"" on the Sun website I found a useful example which shows how to draw a dragged rectangle and then only repaint that area when the mouse is moving or released. Here is the relevant section of code... public void mouseDragged(MouseEvent e) { updateSize(e); } public void mouseReleased(MouseEvent e) { updateSize(e); } /* * Update the size of the current rectangle * and call repaint. Because currentRect * always has the same origin translate it * if the width or height is negative. * * For efficiency (though * that isn't an issue for this program) * specify the painting region using arguments * to the repaint() call. * */ void updateSize(MouseEvent e) { int x = e.getX(); int y = e.getY(); currentRect.setSize(x - currentRect.x y - currentRect.y); updateDrawableRect(getWidth() getHeight()); Rectangle totalRepaint = rectToDraw.union(previousRectDrawn); repaint(totalRepaint.x totalRepaint.y totalRepaint.width totalRepaint.height); } This code is subject to copyright (see here for full code and copyright notice) See here for further example listings Truth be told I'm having a similar issue on FPS but that may be due to my currently poor code! I've learnt so much over the past few months that I can now make my code so more efficient. Hopefully I can overcome the FPS issue when more than 2 ""people"" slow down my graphics! Hummmm... I have only implemented the above code for the same section in my code and not others but by all means give it a try!  Swing will combine repaints for you: see ""Painting in AWT and Swing"" on Sun's website. If you schedule a number of repaints in rapid succession they'll get combined into a single call to paintImmediately().  My understanding is that repaint() simply schedules a repaint by adding a region of the component to the repaint queue. If a repaint has already been requested on a component the new repaint region will just be unioned with the previously requested regions. The repaint is not actually executed until all other events in the event queue are handled. So your additional repaints may not make much of a difference i.e. your painting code will only be executed once. See JComponent.repaint and RepaintManager.addDirtyregion.  I've hacked something similar together to improve how JFreechart decides to paint when it makes lots of calls to repaint. Essentially I do the following: Create a ScheduledExecutorService as a field in the class Receive first repaint request and and submit it to the executor to run on the EDT in say 50ms getting back the future Receive second request - test to see if the previous repaint has finished (fut.isDone()) and if so to schedule the next repaint; otherwise do nothing. This way you should get at most 20 repaint request per second. I've done similar things for batching up the number of calls to fireDataTableChanged when lots of changes are occuring at the same time.  Frequent repaint requests are automatically collapsed into one. The best way to optimize this is not to repaint the whole thing but call repaint with coordinates of specific area. This means you repaint only the area which actually changed."
1030,A,How to remove the active title bar of a frame? I have a JFrame which displays a title bar. Active title bar as it's called in Windows desktop properties. How to remove this bar? You can use setUndecorated(boolean undecorated) method in JFrame. Note: This method can only be called while the frame is not displayable. So it's not possible to hide title bar on click of any button or any other event on screen.  frames have titlebars windows do not check out http://academicjava.com/Java%5Fhelp/Tutorial%5FExamples%5FSwing%5F5.html for examples
1031,A,How do I control the display of a JComponent's Tooltip? I have a JComponent that's painting various shapes on itself. I'm detecting whenever the mouse enters one of these shapes and changing the tooltip accordingly. The problems I'm having are: The tooltip doesn't follow the mouse as the user tracks the mouse across the shape. It stays where it was first set and then only jumps whenever another shape changes the tooltip. It takes about a second for the tooltip to appear but I'd like it to appear immediately. Can someone suggest a way of getting these behaviours without writing a custom tooltip mechanism? To solve your first issue of where the tooltip doesn't follow the mouse if you override the getToolTipLocation(MouseEvent e) in JComponent you can return the point for where you want to the display the tooltip. The MouseEvent will allow you to retrieve the x and y.  Take a look at the ToolTipManager. You can register your component with that manager and then adjust a number of settings. Its pretty straight forward to use. That at least can solve your initialdelay problem. For your first problem you can overide the createTooltip command from your component to get a hold of the JTooltip instance. and then its easy make the position change whenever you move your mouse(aka follow your mouse) as its a subclass of the JComponent class.
1032,A,"Dynamically refresh JTextArea as processing occurs? I am trying to create a very simple Swing UI that logs information onto the screen via a JTextArea as processing occurs in the background. When the user clicks a button I want each call to: textArea.append(someString + ""\n""); to immediately show up in the UI. At the moment the JTextArea does not show all log information until the processing has completed after clicking the button. How can I get it to refresh dynamically? You'll need multithreading for this. Ready to take the plunge? I've got my hard hat on. So yes.  I ran into the same issue with my application. I had a ""Run"" button my application that performed some actions and outputted the results to a JTextArea. I had to call the method from a Thread. Here is what I did. I have several radio buttons of actions that can be done and then one ""Run"" button to execute that particular action. I have an action called Validate. So when I check that radio button and click the ""Run"" button it calls the method validate(). So I first placed this method into an inner class that implemented Runnable class ValidateThread implements Runnable { public void run() { validate(); } } I then called this thread in the ActionListener of the ""Run"" button as so runButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { // Some code checked on some radio buttons if(radioButton.isSelected()) { if(radioButton.getText().equals(""VALIDATE"")) { Runnable runnable = new ValidateThread(); Thread thread = new Thread(runnable); thread.start(); } } } }); Voila! The output is now sent to the JTextArea. Now you will notice that the JTextArea will not scroll down with the text. So you need to set the caret position like textArea.setCaretPosition(textArea.getText().length() - 1); Now when the data is added to the JTextArea it will always scroll down. Why not use EventQueue.invokeLater(runnable)?  Try this: jTextArea.update(jTextArea.getGraphics()); it is perfect. Thank you :)  As others have said this requires multithreading. Have a look at Concurrency in Swing. One solution would be to implement the processing using a SwingWorker. The doInBackground method would implement the processing and you would invoke the publish method with the String to be appended as the argument. Your SwingWorker would then override the process method to take a String argument and append it to the text area.  I'm sorry for replying to this question that was posted 4 years ago but I have another solution that worked for me. I just used pointers to update the JTextAreaas such: //JScrollPane variable pane initialized with JTextArea area //We will update area with new text JTextArea temp = (JTextArea) pane.getViewPort().getView(); //new text to add JTextArea c = new JTextArea(); c.append(""text \n)""; //update through pointers temp = c; pane.validate();  If it's multithreading you need try this! http://www.devarticles.com/c/a/Java/Multithreading-in-Java/"
1033,A,JComboBox Selection Change Listener? I'm trying to get an event to fire whenever a choice is made from a JComboBox. The problem I'm having is that there is no obvious addSelectionListener() method. I've tried to use actionPerformed() but it never fires. Short of overriding the model for the JComboBox I'm out of ideas. How do I get notified of a selection change on a JComboBox? Edit: I have to apologize it turns out I was using a misbehaving subclass of JComboBox but I'll leave the question up since your answer is good. Commence the vote down. :) Yeah it's still a good question for the people. Excellent question since I've noticed that actionPerformed fires on loading a combobox but NOT on selecting when one would expect it. Here is creating a Combo Box & action of item change JComboBox comboBox = new JComboBox();  comboBox.setBounds(84 45 150 20); contentPane.add(comboBox); JComboBox comboBox_1 = new JComboBox(); comboBox_1.setBounds(84 97 150 20); contentPane.add(comboBox_1); comboBox.addItemListener(new ItemListener() { public void itemStateChanged(ItemEvent arg0) { //Do Something } }); } this answers enhances previous answers in that ... ? Please don't duplicate! Unrelated: never-ever do any manual sizing/locating of components that's the exclusive task of a suitable LayoutManager  I was recently looking for this very same solution and managed to find a simple one without assigning specific variables for the last selected item and the new selected item. And this question although very helpful didn't provide the solution I needed. This solved my problem I hope it solves yours and others. Thanks. HOW TO: Get Previous \ Last Item JComboBox  I would try the itemStateChanged() method of the ItemListener interface if jodonnell's solution fails.  int selectedIndex = myComboBox.getSelectedIndex(); -or- Object selectedObject = myComboBox.getSelectedValue(); -or- String selectedValue = myComboBox.getSelectedValue().toString(); I know why this was downvoted but I believe those downvotes should be reconsidered... If you check the selected index in the actionPerformed method you'll find that this works. It does fire and excluding -1 events will allow you to exclude the false firing on start. Solved my problem!  Code example of ItemListener implementation class ItemChangeListener implements ItemListener{ @Override public void itemStateChanged(ItemEvent event) { if (event.getStateChange() == ItemEvent.SELECTED) { Object item = event.getItem(); // do something with object } } } Now we will get only selected item. Then just add listener to your JComboBox addItemListener(new ItemChangeListener());  It should respond to ActionListeners like this: combo.addActionListener (new ActionListener () { public void actionPerformed(ActionEvent e) { doSomething(); } }); @John Calsbeek rightly points out that addItemListener() will work too. You may get 2 ItemEvents though one for the deselection of the previously selected item and another for the selection of the new item. Just don't use both event types! Vyacheslav's answer is the correct one. I'd prefer ItemListener (just make sure to check the ItemEvent to see whether it is a selection or deselection even). The ActionListener can be fired even if the selection hasn't changed (i.e. if the user clicks on the already selected item). This may or may not be what you want.
1034,A,"JDialog Not Displaying When in Fullscreen Mode I have an application that runs in fullscreen mode and has been working fine. Now I need to add a simple undecorated dialog and I'm running into trouble. If I run the application maximized but not in fullscreen the dialog displays and functions as expected. When I switch back to fullscreen the dialog will not display. The dialog extends JDialog and only contains a JSlider and a couple of buttons. It is undecorated and not modal. (I disabled modality for testing purposes -- it was a pain to force exit the app every time the dialog blocked input.) I'm entering full screen mode using setFullScreenWindow() passing in the main JFrame for the app. It doesn't make a difference if I set that very JFrame as the owner of the JDialog or not. Nor does it seem to help if I call toFront() on the dialog. The dialog seems to be active -- especially since it blocks input if I make it modal -- but just not showing or being hidden. So is there any obvious trick to displaying a JDialog in fullscreen mode? Something I might be overlooking or omitting? If there's no obvious solution I can post some code later. Unfortunately I don't have time right now. Uh oh. This doesn't bode well for me: ""Windows cannot overlap the full-screen window. All other application windows will always appear beneath the full-screen window in the Z-order."" From the API for GraphicsDevice: http://java.sun.com/j2se/1.4.2/docs/api/java/awt/GraphicsDevice.html#setFullScreenWindow%28java.awt.Window%29 And in fact as M1EK alluded in his answer and I mentioned in a comment Java applications in full screen mode will not allow other windows to show over them. The Javadoc API for GraphicsDevice reads: Windows cannot overlap the full-screen window. All other application windows will always appear beneath the full-screen window in the Z-order. In the end I reconfigured my application so that it doesn't enter full screen mode until a bit later. This still gives me a fairly class presentation at the start and allows my JDialog to function as it should. The transition to full screen mode is quick and smooth even in the ""middle"" of my app.  Try to us this. Is not an exclusive full screen but it is close enough. setExtendedState(JFrame.MAXIMIZED_BOTH); setUndecorated(true);  Do you really want to be in full-screen mode for this app? That's more of a gaming feature - to get more direct access to the frame-buffer I always thought. Have you read this tutorial: http://java.sun.com/docs/books/tutorial/extra/fullscreen/index.html Really seems to me not to be the best choice for a Swing app with child windows. Currently mandatory for my client spec as well. If you are working in any kind of production environment having this to add to your toolbox is useful. Good stuff to think about but yes fullscreen mode is mandatory as per client spec. This dialog will be the only child window so it's nothing really complex.  JOptionPane.showInternalXXXDialog() methods render dialogs as JInternalFrames. Maybe you could consider using a JIternaFrame to simulate the dialog box. Worked nicely for me."
1035,A,"Scheduling Swingworker threads I have a 2 processes to perform in my swing application one to fill a list and one to do operations on each element on the list. I've just moved the 2 processes into Swingworker threads to stop the GUI locking up while the tasks are performed and because I will need to do this set of operations to several lists so concurrency wouldn't be a bad idea in the first place. However when I just ran fillList.execute(); doStuffToList.execute(); the doStuffToList thread to ran on the empty list (duh...). How do I tell the second process to wait until the first one is done? I suppose I could just nest the second process at the end of the first one but i dunno it seems like bad practice. Sounds like a BlockingQueue might possibly be helpful (http://java.sun.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html ). To perform two processes sequentially traditionally you just call one method after the other(!). fillList(); doStuffToList(); Or perhaps something like: doStuffToList(fillList()); If you are processing one at a time you might want two threads with a BlockingQueue between. You might go further by having multiple do-stuff threads. As far as the AWT Event Dispatch Thread (EDT) is concerned it's just spun off an action without blocking and will get notified later. This misses the point that SwingWorker#execute returns immediately. The OP clearly knows how to call one function after another in general.  Something like this would do it I think? boolean listIsFull=false; class FillListWorker extends SwingWorker<FooBar> { ... protected void done() { synchronized (listYouveBeenFilling) { listIsFull=true; listYouveBeenFilling.notifyAll(); } } ... } class DoStuffToListListWorker extends SwingWorker<FooBar> { ... protected Foo doInBackground() { synchronized (listYouveBeenFilling) { while (!listIsFull) { try { listYouveBeenFilling.wait(); } catch (InterruptedException ie) { // Don't worry we'll just wait again } } } } ... } I like this solution the most of the ones posted but it won't work for me because `listIsFull` must be made final since it is accessed from an inner class... which makes it impossible to modify the value of later as you are attempting to do. It only needs to be `final` if you're defining it within a method. If you define it as a member field of the outer class all will be well.  How do I tell the second process to wait until the first one is done? I suppose I could just nest the second process at the end of the first one but i dunno it seems like bad practice. Have you looked into using callables & futures instead? They sound like a good match for this sort of thing (letting the doStuffToList work on a Future.get() instead of the actual list so it'll be ready when get is called) apart from the whole swingworker business.. (Consider this a suggestion rather than an answer) This could be exactly what I want I'm looking into it now thanks  We have something like this: private SwingWorkerExecutor swingWorkerExecutor; //... protected void runChain(List<SwingWorker<Void>> chainWorkers final SwingWorkerExecutor.RunAfter<Void> runAfter final SwingWorkerExecutor.RunOnError runOnError) { final List<SwingWorker<Void>> remainingWorkers = chainWorkers.subList(1 chainWorkers.size()); SwingWorkerExecutor.RunAfter<Void> chainRunAfter; if (chainWorkers.size() > 1) { chainRunAfter = new SwingWorkerExecutor.RunAfter<Void>() { @Override public void run(Void value) { runChain(remainingWorkers runAfter runOnError); } }; } else { chainRunAfter = runAfter; } currentWorker = chainWorkers.get(0); swingWorkerExecutor.execute(currentWorker chainRunAfter runOnError); } This is pretty simple IMO because in our case the SwingWorkerExecutor actually contains all the hard to understand stuff: public class DefaultSwingWorkerExecutor implements SwingWorkerExecutor { @Override public <T> void execute(SwingWorker<T ?> worker RunAfter<T> after RunOnError onError) { worker.addPropertyChangeListener( new RunAfterHandler<T>(worker after onError)); worker.execute(); } private static class RunAfterHandler<T> implements PropertyChangeListener { private final SwingWorker<T ?> worker; private final RunAfter<T> after; private final RunAfter<Throwable> onError; protected RunAfterHandler(SwingWorker<T ?> worker RunAfter<T> after RunOnError onError) { this.worker = worker; this.after = after; this.onError = onError; } @Override public void propertyChange(PropertyChangeEvent evt) { if (""state"".equals(evt.getPropertyName()) && evt.getNewValue() == SwingWorker.StateValue.DONE) { if (worker.isCancelled()) { return; } try { after.run(worker.get()); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } catch (ExecutionException e) { onError.run(e); } } } } } There are some missing interfaces which should be pretty straight-forward to write without seeing them here. Our real deployment SwingWorkerExecutor executes using an injected ExecutorService instead of the default one (this reduces the number of thread pools we need for a single app.) But the real reason we introduced SwingWorkerExecutor was that it simplifies and standardises the handling of SwingWorker success and error conditions and also allows replacing the logic for unit tests (which as I'm sure you know are a lot simpler if they are single threaded.) As you can see there is a bunch of boilerplate you would normally need for every single SwingWorker inside done() so instead of doing that we move the done() work into a callback. The side-benefit is that things like running multiple Swing workers in a chain become pretty easy to implement."
1036,A,"How do I add a separator to a JComboBox in Java? I have a JComboBox and would like to have a separator in the list of elements. How do I do this in Java? A sample scenario where this would come in handy is when making a combobox for font-family-selection; similar to the font-family-selection-control in Word and Excel. In this case I would like to show the most-used-fonts at the top then a separator and finally all font-families below the separator in alphabetical order. Can anyone help me with how to do this or is this not possible in Java? You can use a custom ListCellRenderer which would draw the separator items differently. See docs and a small tutorial.  By the time I wrote and tested the code below you probably got lot of better answers... I don't mind as I enjoyed the experiment/learning (still a bit green on the Swing front). [EDIT] Three years later I am a bit less green and I took in account the valid remarks of bobndrew. I have no problem with the key navigation that just works (perhaps it was a JVM version issue?). I improved the renderer to show highlight though. And I use a better demo code. The accepted answer is probably better (more standard) mine is probably more flexible if you want a custom separator... The base idea is to use a renderer for the items of the combo box. For most items it is a simple JLabel with the text of the item. For the last recent/most used item I decorate the JLabel with a custom border drawing a line on its bottom. import java.awt.*; import javax.swing.*; @SuppressWarnings(""serial"") public class TwoPartsComboBox extends JComboBox { private int m_lastFirstPartIndex; public TwoPartsComboBox(String[] itemsFirstPart String[] itemsSecondPart) { super(itemsFirstPart); m_lastFirstPartIndex = itemsFirstPart.length - 1; for (int i = 0; i < itemsSecondPart.length; i++) { insertItemAt(itemsSecondPart[i] i); } setRenderer(new JLRenderer()); } protected class JLRenderer extends JLabel implements ListCellRenderer { private JLabel m_lastFirstPart; public JLRenderer() { m_lastFirstPart = new JLabel(); m_lastFirstPart.setBorder(new BottomLineBorder()); // m_lastFirstPart.setBorder(new BottomLineBorder(10 Color.BLUE)); } @Override public Component getListCellRendererComponent( JList list Object value int index boolean isSelected boolean cellHasFocus) { if (value == null) { value = ""Select an option""; } JLabel label = this; if (index == m_lastFirstPartIndex) { label = m_lastFirstPart; } label.setText(value.toString()); label.setBackground(isSelected ? list.getSelectionBackground() : list.getBackground()); label.setForeground(isSelected ? list.getSelectionForeground() : list.getForeground()); label.setOpaque(true); return label; } } } Separator class can be thick with custom color etc. import java.awt.*; import javax.swing.border.AbstractBorder; /** * Draws a line at the bottom only. * Useful for making a separator in combo box for example. */ @SuppressWarnings(""serial"") class BottomLineBorder extends AbstractBorder { private int m_thickness; private Color m_color; BottomLineBorder() { this(1 Color.BLACK); } BottomLineBorder(Color color) { this(1 color); } BottomLineBorder(int thickness Color color) { m_thickness = thickness; m_color = color; } @Override public void paintBorder(Component c Graphics g int x int y int width int height) { Graphics copy = g.create(); if (copy != null) { try { copy.translate(x y); copy.setColor(m_color); copy.fillRect(0 height - m_thickness width - 1 height - 1); } finally { copy.dispose(); } } } @Override public boolean isBorderOpaque() { return true; } @Override public Insets getBorderInsets(Component c) { return new Insets(0 0 m_thickness 0); } @Override public Insets getBorderInsets(Component c Insets i) { i.left = i.top = i.right = 0; i.bottom = m_thickness; return i; } } Test class: import java.awt.*; import java.awt.event.*; import javax.swing.*; @SuppressWarnings(""serial"") public class TwoPartsComboBoxDemo extends JFrame { private TwoPartsComboBox m_combo; public TwoPartsComboBoxDemo() { Container cont = getContentPane(); cont.setLayout(new FlowLayout()); cont.add(new JLabel(""Data: "")) ; String[] itemsRecent = new String[] { ""ichi"" ""ni"" ""san"" }; String[] itemsOther = new String[] { ""one"" ""two"" ""three"" }; m_combo = new TwoPartsComboBox(itemsRecent itemsOther); m_combo.setSelectedIndex(-1); cont.add(m_combo); m_combo.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { String si = (String) m_combo.getSelectedItem(); System.out.println(si == null ? ""No item selected"" : si.toString()); } }); // Reference to check we have similar behavior to standard combo JComboBox combo = new JComboBox(itemsRecent); cont.add(combo); } /** * Start the demo. * * @param args the command line arguments */ public static void main(String[] args) { // turn bold fonts off in metal UIManager.put(""swing.boldMetal"" Boolean.FALSE); SwingUtilities.invokeLater(new Runnable() { public void run() { JFrame demoFrame = new TwoPartsComboBoxDemo(); demoFrame.setTitle(""Test GUI""); demoFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); demoFrame.setSize(400 100); demoFrame.setVisible(true); } }); } } @bobndrew: hey! As I wrote I was a newbie at the time (3 years already!). Among sins you don't point out I probably used some Swing test template I found and even worse I didn't use SwingUtilities.invokeLater! The code I have currently uses it at least (but it is still a JFrame subclass...). And m_lastRecentIndex is more local... But most of your criticism is about a quickly made test class which isn't really production code. Today I pay more attention to such code as newbies can take inspiration from it... :-) Also you are right about highlighting hovered elements and selection. TODO Your variable-naming is not the worst thing here: You're breaking the whole combobox-item-selection: the selection is not painted anymore and the first-letter-key-jumps are broken. And you should define `m_combo` and `m_renderer` in the smallest possible scope (in `public TestGui()`). And should not use a glooooobal `m_lastRecentIndex` for the Renderer **and** the 'TestGui' class (which should be a lonely Main class not a 'JFrame' subclass). But I like the braces-style! Note: I edited the code above for a more modern / correct version. One advantage of my approach is that it is more flexible (in look at least) than JSeparator and it doesn't take a slot. C++ braces traitor! ;) :-D Not really C++ specific actually. I first used K&R style when I read their C book years ago then I chose to align braces for better readability (for me question of taste) and never came back (except on projects requiring them of course).  There is a pretty short tutorial with an example that shows how to use a custom ListCellRenderer on java2s http://www.java2s.com/Code/Java/Swing-Components/BlockComboBoxExample.htm Basically it involves inserting a known placeholder in your list model and when you detect the placeholder in the ListCellRenderer you return an instance of 'new JSeparator(JSeparator.HORIZONTAL)' The `BlockComboBoxExample` example breaks the cursor-key and the first-letter-key navigation. Santhosh Kumar's [example](http://www.jroller.com/santhosh/entry/jcombobox%5Fitems%5Fwith%5Fseparators) seems to work better."
1037,A,"Change the Ctrl + click behaviour on a JTable Is there an easy way to manipulate the controls on a JTable to give different functionality when there is a keyboard button pressed (ie. CTRL button) and a row is selected? I've been asked to create a table where the CTRL + Click (mouse click) on a row will only deselect a selected row never select a row. If the user CTRL + Clicks an unselected row nothing will happen. I've been able to create a table and disable functions like CTRL + A (select all) and i've been able to check if the control button is pressed when a MouseEvent is generated but I can't seem to figure out how the CTRL + Click can be adjusted. Here's some code: package nicky; import javax.swing.*; import java.awt.Dimension; import java.awt.GridLayout; import java.awt.event.*; public class TableTester extends JPanel { public TableTester() { super(new GridLayout(10)); final String[] columnNames = {""First Name"" ""Last Name"" ""Sport"" ""# of Years"" ""Vegetarian""}; final Object[][] data = { {""Tom"" ""Roberts""""Athletic"" new Integer(5) new Boolean(false)} {""Sarah"" ""Watt"" ""Football"" new Integer(3) new Boolean(true)} {""Laura"" ""Brown"" ""Swimming"" new Integer(2) new Boolean(false)} {""Simon"" ""Smith"" ""Tennis"" new Integer(20) new Boolean(true)} {""Paul"" ""Jones"" ""Rugby"" new Integer(10) new Boolean(false)} }; JTable table = new JTable(data columnNames); table.setPreferredScrollableViewportSize(new Dimension(500 100)); table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION); table.addMouseListener(new MouseListener(){ public void mouseEntered(MouseEvent me){} public void mouseExited(MouseEvent me){} public void mouseReleased(MouseEvent me){} public void mouseClicked(MouseEvent me){} public void mousePressed(MouseEvent me){ if (me.isControlDown()){ System.out.println(""This is working ""); } } }); InputMap inputMap = table.getInputMap(JTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT); KeyStroke keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_A InputEvent.CTRL_MASK); inputMap.put(keyStroke ""none""); JScrollPane scrollPane = new JScrollPane(table); add(scrollPane); } private static void createAndShowGUI() { JFrame.setDefaultLookAndFeelDecorated(true); JFrame frame = new JFrame(""TableTester""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); TableTester newContentPane = new TableTester(); newContentPane.setOpaque(true); frame.setContentPane(newContentPane); frame.pack(); frame.setVisible(true); } public static void main(String[] args) { javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { createAndShowGUI(); } }); } } In the mousePressed method I've played around with getting all the selected rows from the table and was then going to check if the newly clicked row was in the selectedRows... However I'm not sure if there is a way to see which row is associated with the MouseEvent. (Also I know expected behaviour such as this shouldn't be played around with too much but it's to replicate a legacy system in the company) Any ideas/suggestions would be appreciated! I had success with the following although I am not sure that's the best method... class SpecialTable extends JTable { boolean bIsControlDown; int clickedRow; SpecialTable(Object[][] data String[] columnNames) { super(data columnNames); // setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION); getSelectionModel().addListSelectionListener(this); addMouseListener(new MouseInputAdapter() { public void mousePressed(MouseEvent me) { bIsControlDown = me.isControlDown(); clickedRow = rowAtPoint(me.getPoint()); } }); } public void valueChanged(ListSelectionEvent evt) { super.valueChanged(evt); if (bIsControlDown) { if (!evt.getValueIsAdjusting()) { // System.out.println(evt); // System.out.println(""=> "" + clickedRow); getSelectionModel().removeSelectionInterval(clickedRow clickedRow); } } } } Replace the lines defining table in your code with only:  JTable table = new SpecialTable(data columnNames); table.setPreferredScrollableViewportSize(new Dimension(500 100)); When you control-click an unselected row it is briefly selected then unselected. Thanks for that. Unfortunately it's going to work for my problem however. As soon as a row is selected it fires off message so the quick select-deselect action will still send off that message. I feared that. An alternative is to avoid the call to super.valueChanged() and fully handle the multiple interval selection yourself (can even copy Java's code and alter it your way I think). True - thanks I think I'll give that a go  OK second take (I left the first one as it might interest somebody for some other usage who know? Say it is there for educational purpose... :-)). I had a look at the source code of JTable and found out that mouse events are handled by the look and feel. Knowing how it handles the control key I could safely override the changeSelection method to do what you need. I find requirements a bit strange (you can still use Shift+click no?) but I don't know context. class SpecialTable extends JTable { SpecialTable(Object[][] data String[] columnNames) { super(data columnNames); // That's already the default // setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION); } /** * Called by javax.swing.plaf.basic.BasicTableUI.Handler.adjustSelection(MouseEvent) * like: table.changeSelection(pressedRow pressedCol e.isControlDown() e.isShiftDown()); */ @Override public void changeSelection(int rowIndex int columnIndex boolean toggle boolean extend) { if (toggle && !isRowSelected(rowIndex)) return; // Don't do the selection super.changeSelection(rowIndex columnIndex toggle extend); } } Much simpler and exactly what you need! BTW thanks for providing such simple good test case I might have not tried if I had to write it myself... :-D It was an interesting and learning challenge. Woohoo! It worked! Thanks :) And yes I think requirements are crazy... and this isn't even the half of it!"
1038,A,"Java Swing Table size problem I'm having problems with JTables. I'm adding two tables to a panel the tables are within a scrollpane but when the app shows up the tables always occupy more space than the number of rows wasting my available space. I'm using groovy and swingbuilder to create the tables here's the code: scrollPane(){ panel(layout: new MigLayout('wrap 3')) { //main title label(text: '<html><h1>blah</h1></html>'constraints: 'span 3') //title //tables def data = [[text: ""ABC"" combo: ""abc""] [text: ""DEF"" combo: ""def""]] def items = ['abc' 'def' 'ghi' 'jkl'] def tableModelListener = { e -> println ""${e.firstRow} ${e.column} ${e.type}"" } as TableModelListener scrollPane(constraints: 'span 3' ) { table(id: 'serviceTable') { current.setFillsViewportHeight(false) tableModel(list: data) { current.addTableModelListener(tableModelListener) propertyColumn(header: 'Text' propertyName: 'text') propertyColumn(header: 'Combo' propertyName: 'combo') } } } scrollPane(constraints: 'span 3' ) { table(id: 'groupsTable') { tableModel(list: data) { current.addTableModelListener(tableModelListener) propertyColumn(header: 'Text2' propertyName: 'text') propertyColumn(header: 'Combo2' propertyName: 'combo') } } } } } And here's the result: What I want is to make the table height according to the number of rows and if possible I'd like the table to occupy full width also. I think my problem is related to the parent panels but I cannot find the cause. Thanks Yes that's a known problem with JTables. By default it displays 20 rows whatever the actual content. If you want to change that you have to use code like follows: static public void setTableHeight(JTable table int rows) { int width = table.getPreferredSize().width; int height = rows * table.getRowHeight(); table.setPreferredScrollableViewportSize(new Dimension(width height)); } Then just call setTableHeight(5); if you want 5 rows visible by default. Note: this is Java you may have to adapt it slightly to Groovy. This is something I described in my blog last month (item #7).  @jfpoilpret is correct in that the preferredScrollableViewpoet size needs to be managed. The groovy way would be to bind it to the preferred size of the table. So if this was added inside of the outer scrollPane element it would automatically track the size: [serviceTable groupsTable].each { table -> bind(source:table sourceProperty:'preferredSize' target:table targetProperty:'preferredScrollableViewportSize' converter: { ps -> [ps.width + 100 (table.rowCount > 20 ? 20: table.rowCount) * table.rowHeight] }) } We can also do neat things with the binding like adding a converter that will limit the height to 20 rows (or whatever you want it to be limited to) so we still get scrollbars when the table gets too long. Thanks it's always good to learn something new :)"
1039,A,"Dynamically added JTable not displaying Java Newbie here. I have a JFrame that I added to my netbeans project and I've added the following method to it which creates a JTable. Problem is for some reason when I call this method the JTable isn't displayed. Any suggestions? public void showFromVectors(Vector colNames Vector data) { jt = new javax.swing.JTable(data colNames); sp = new javax.swing.JScrollPane(jt); //NB: ""this"" refers to my class DBGridForm which extends JFrame this.add(spjava.awt.BorderLayout.CENTER); this.setSize(640480); } The method is called in the following context: DBGridForm gf = new DBGridForm(); //DBGridForm extends JFrame DBReader.outMatchesTable(gf); gf.setVisible(true); ... where DBReader.outMatchesTable() is defined as static public void outMatchesTable(DBGridForm gf) { DBReader ddb = new DBReader(); ddb.readMatchesTable(null); gf.showFromVectors(ddb.lastRsltColNames ddb.lastRsltData); } My guess is I'm overlooking something either about the swing classes I'm using or about Java. Any ideas? ""this"" in your context is unclear. Is it inside an applet? a JFrame? You may be having a layout issue make sure you've called setLayout on your class with a new borderlayout. In a swing application you'd want to use getRootContentPane().add() instead of a raw add() depending on the version. Java tutorial on adding top-level content: http://java.sun.com/docs/books/tutorial/uiswing/components/toplevel.html Default layout is a flowlayout I think. ""this"" refers to the DBGridForm which extends JFrame. I thought that was obvious when I said that I (paraphrasing) ""created a JFrame with netbeans and added the following method to it"". Looks like it wasnt as obvious as I had thought OK calling ""this.setLayout(new java.awt.BorderLayout());"" before adding the scroll pane did the trick. I think the default layout added by netbeans must be something different - this is really the first time I've used netbeans all previous experience was doing things from scratch...  If you are not running on the event thread it could be a problem--I've seen that cause stuff not to display. If this code is called in response to an AWT event (mouse click button press ...) then that's not the problem but if it's still the same thread that started your app or this code is running off a timer could very well be. You can use the java event thread to fire off things asynchronously. http://java.sun.com/products/jfc/tsc/articles/threads/threads1.html"
1040,A,Problems using Graphics with Panels in the Java Swing Library Hey everyone I am trying to run the following program but am getting a NullPointerException. I am new to the Java swing library so I could be doing something very dumb. Either way here are my two classes I am just playing around for now and all i want to do is draw a damn circle (ill want to draw a gallow with a hangman on it in the end). package hangman2; import java.awt.*; import javax.swing.*; public class Hangman2 extends JFrame{ private GridLayout alphabetLayout = new GridLayout(2255); private Gallow gallow = new Gallow(); public Hangman2() { setLayout(alphabetLayout); setSize(1000500); setVisible( true ); } public static void main( String args[] ) { Hangman2 application = new Hangman2(); application.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); } } package hangman2; import java.awt.*; import javax.swing.*; public class Gallow extends JPanel { private Graphics g; public Gallow(){ g.fillOval(10 20 40 25); } } The NullPointerException comes in at the g.fillOval line. Thanks in advance Tomek A couple of things: Don't forget to add the panel to the JFrame. And override the paint() method of JPanel for your custom painting. You do not need to declare a Graphics object since the JPanel's paint method will have a reference to one in any case. package hangman2; import java.awt.*; import javax.swing.*; public class Hangman2 extends JFrame{ private GridLayout alphabetLayout = new GridLayout(2255); private Gallow gallow = new Gallow(); public Hangman2() { setLayout(alphabetLayout); add(gallow BorderLayout.CENTER);//here setSize(1000500); setVisible( true ); } public static void main( String args[] ) { Hangman2 application = new Hangman2(); application.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); } } package hangman2; import java.awt.*; import javax.swing.*; public class Gallow extends JPanel { public Gallow(){ super(); } public void paint(Graphics g){ g.fillOval(10 20 40 25); } } You should override paintComponent not paint  You're getting NPE because g is not set therefore it's null. Furthermore you shouldn't be doing the drawing in the constructor. Overload paintComponent(Graphics g) instead. public class Gallow extends JPanel { public paintComponent(Graphics g){ g.fillOval(10 20 40 25); } } I'd also look into BufferedImage. I see so im guessing the paintComponent is called each time a JPanel is created. Actually it's called each time the component is redrawn. Swing doesn't remember the appearance of each component rather each component is responsible for drawing and redrawing itself as needed.
1041,A,embed a java code editor with limited scope in a swing application? Here's what I want to do. I want to store code objects in my hibernate driven java swing application. I want to allow the user to create code objects that can affect the data with a limited scope like in a function with only access to members of that member's class. I'd even really like to have a full on little ide (though scaled down with all the irrelevencies hidden) in there which would allow auto-completion and have a button to compile and check then have all that wrapped so I can drop the thing in my database and schedule it's execution. Anyone have a good idea know a good component or way to use eclipse or some such to accomplish this without having a roll out a solution myself? To achieve code highlighting and some simple auto complete functionality it would be worth looking at the jsyntaxpane component. It's pretty simple and easy to use but you're not going to get the compile functionality from that. That looks like a neat project it might do for what I want. Thanks!  you may use Eclipse RCP editor it has lots of functionality available for reuse. e.g. text highlighting pair constructions highlighting text hovers completion assist etc. its a lot more powerful but a lot heavier. and RCP is not only editor... I am so using that for my next application that's exactly what I want to do. Then I have access to other eclipse plugins perfecto! Perfect answer! glad it helped!
1042,A,"Unknown source of ClassCastException (in JTables) I'm presently refactoring a JTable which displays a multitude of different types of data. The primary reason for this refactoring is that there a few ClassCastExceptions (the author/friend who wrote the code is off on hiatus) and I can't seem to find where these are originating from. Due to the large codebase I'm at a loss as to where to start. Does anyone have any suggestions? I realize and apologize for the ambiguity of this question! I've included the stack trace below. Thanks!!  Exception in thread ""AWT-EventQueue-0"" java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Boolean at javax.swing.JTable$BooleanRenderer.getTableCellRendererComponent(Unknown Source) at javax.swing.JTable.prepareRenderer(Unknown Source) at javax.swing.plaf.basic.BasicTableUI.paintCell(Unknown Source) at javax.swing.plaf.basic.BasicTableUI.paintCells(Unknown Source) at javax.swing.plaf.basic.BasicTableUI.paint(Unknown Source) at javax.swing.plaf.ComponentUI.update(Unknown Source) at javax.swing.JComponent.paintComponent(Unknown Source) at javax.swing.JComponent.paint(Unknown Source) at javax.swing.JComponent.paintToOffscreen(Unknown Source) at javax.swing.BufferStrategyPaintManager.paint(Unknown Source) at javax.swing.RepaintManager.paint(Unknown Source) at javax.swing.JComponent._paintImmediately(Unknown Source) at javax.swing.JComponent.paintImmediately(Unknown Source) at javax.swing.RepaintManager.paintDirtyRegions(Unknown Source) at javax.swing.RepaintManager.paintDirtyRegions(Unknown Source) at javax.swing.RepaintManager.seqPaintDirtyRegions(Unknown Source) at javax.swing.SystemEventQueueUtilities$ComponentWorkRequest.run(Unknown Source) at java.awt.event.InvocationEvent.dispatch(Unknown Source) at java.awt.EventQueue.dispatchEvent(Unknown Source) at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source) at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source) at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source) at java.awt.EventDispatchThread.pumpEvents(Unknown Source) at java.awt.EventDispatchThread.pumpEvents(Unknown Source) at java.awt.EventDispatchThread.run(Unknown Source) I would love to but the code is all over the place. Very much a nightmare. I've come across what I think is the root problem though. I should have mentioned that these exceptions occur when the contents of a row are sorted by a `TableRowSorter`. The problem is that the `JTable` columns (or rather one column) has multiple `CellRender`s it can select from and when the sorting occurs the `CellRender`s don't change. I have a method which changes them accordingly now but I'm not sure how to invoke a method after a sort. A `RowSorterListener` listens for the sort but unfortunately it invokes the code before the sort occurs effecitvely making it useless. So I guess my current issue is figuring out how to invoke a method after a sort is finished. Any ideas? Thanks for all the help very much appreciated :) Can we see some of the table creation code? It looks like there's some place where there is a string but the table expects a boolean. To debug this problem you may want to consider biting the bullet and putting a breakpoint in the JTable$BooleanRenderer.getTableCellRendererComponent() on the line that makes the cast setSelected((value != null && ((Boolean)value).booleanValue())); (from JTable.java 1.288 06/11/15) and check the class type of value. when you find a String you can identify the offending column and row from your model. That will at least give you a start on identifying the problem. This was very helpful in finding the culprit thanks!  Probably the table contains a checkbox (when the column model states that the column contains type Boolean) and the renderer tries to convert the contents into a boolean. But probably the contents are just strings. The solution is to change the data in the table or to create your own renderer. Bruno The contents weren't just Strings - which was my problem unfortunately. My column was containing all sorts of datatypes in addition to individual renderers. I didn't mention that explicitly so that was my bad but your idea would definitely have worked otherwise. Thanks for your help.  This error which is occurring in BooleanRenderer is because it is expecting that the value that is from the table's model is of type Boolean and tries to cast to it (akf's answer has the exact line of code where it occurs). My guess is that initially it was expected that the model would return Boolean values for the given column but at one point it is returning strings instead. Therefore I would concentrate on what model is being used for this given table (is it a custom model? Is it the default model where it is adding values to it?) and see where it may be getting a String instead of a Boolean. Avrom you're absolutely right - thanks. If you have a moment/if you're interested see my above comment to mmeyers on the cause of the issue.  Sorry to dig up an old question but I ran into this issue myself & this post came up in a search and this is what I ran into. I had JUnits tests fail (and actually throwing runtime exceptions) but I continued to run add/removes on my JTable (in the JUnit test) which put the GUI application in a bad state and I would see the ClassCastException come up exactly as Chris had described. So the ""fix"" for me was to make sure that all unit tests catch their exceptions and return failure instead of proceeding to run more unit tests.  I had the same problem and the cause was exactly as Avrom specified. In my case I had the getValueAt implemented as: @Override synchronized public Object getValueAt(int row int col) { if (row < m_rows.size()) { return m_rows.get(row).getValueAt(col); } else { return """"; // THIS IS THE BUG } } The problem here is that is a row does not exist a String is returned for every column. However some of my columns has the class type Boolean and hence the exception: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Boolean at javax.swing.JTable$BooleanRenderer.getTableCellRendererComponent(JTable.java:5409) at javax.swing.JTable.prepareRenderer(JTable.java:5736) The solution was simply to change the return value to: return null;  I think the problem comes from your TableModel (jtable.getModel()) It said somewhere (..) public Class<?> getColumnClass(int column) { switch(column) { (...) case XX: return Boolean.class; } } but the value in your model in this column is a String public Object getValueAt(int rowint column) { (..) switch(column) { (...) case XX: return (a String); } } Yep it was - this helped a lot. Thanks :)  Because the problem has now taken a slightly different tune I feel that a new question might make more sense. Thanks for all your help it's extremely appreciated. For those interested the question is now located here."
1043,A,"Make JScrollPane display scrollbars when JList inside is changed I'm trying to change a JList inside a JScrollPane dynamically using myList.setListData(someArray); After this I would expect the JScrollPane to show Scrollbars as needed but this doesn't happen. Googling the issue was not very helpful. I tried various combinations of the following methods with little success (basically poking through the api docs): myScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); myList.validate(); myScrollPane.validate(); myScrollPane.setPreferredSize(Dimension someDimension); myScrollPane.setViewportView(moduleList); myScrollPane.setLayout(...); When using the first method a scrollbar appears but it doesn't get activated by the model change. I also hooked into the PropertyChangeEvent and validated that the JList fires and event when the model changed. What am I missing here? What method do I have to use to make this work or even better what property would make this work out of the box? Not sure this will help but make sure your call to setListData(...) occurs on the event thread. All sorts of nasty things can happen if you mutate a UI object on a different thread. Also have you looked at JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED? Its not exactly clear what you mean by ""actived by model change"". This looks wrong: jsp.getViewport().add(list); Instead use: jsp.setViewportView(list); or new JScrollPane(list); and the list will be added correctly to the scrollpane. Adding it this way tells the scrollpane to listen to it for changes.  if the preferredSize is set on JList even if (0 0) then JScrollPane doesn't work - ensure that it is unset setPreferredSize(null) if necessary see mrtextminer as follows The solution to this problem is to not setting the preferredSize of the JList (removing the setting statement). In Netbeans IDE 5.5.1 unsetting the preferredSize of the JList can be achieved by right clicking on the preferredSize property of the JList and then selecting “restoring default value”. In conclusion set preferredSize of the JScrollPane only. Do not set the preferredSize of the JList. That actually fixed a long-standing bug in one of my applications. Thank you. :)  just wrote a little sample app to test this behaviour and it works out of the box. when you modify the list data vertical and horizontal scrollbars are added to the scrollpane as needed by default. public class Frametest { private JList list; public Frametest() { JFrame f = new JFrame(""Scrollable JList""); f.setSize(200 300); JScrollPane jsp = new JScrollPane(); list = new JList(); jsp.getViewport().add(list); f.getContentPane().setLayout(new BorderLayout()); f.getContentPane().add(jsp BorderLayout.CENTER); JButton button = new JButton(""update""); button.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent arg0) { Object[] objects = new Object[20]; for(int i=0; i<20; i++) { objects[i] = ""foo foo foo foo foo foo foo foo foo foo foo foo ""+i; } list.setListData(objects); } }); f.getContentPane().add(button BorderLayout.SOUTH); f.setVisible(true); } public static void main(String[] args) { new Frametest(); }} Yes I'm pretty much doing exactly what you did but your code works for me - I'll have a closer look of what I'm NOT doing ... I suspect it could be something with the layout - thanks! I suspect he might be adding the data AFTER the list has been made visible since he is talking about model change... Yes that's working in the example! When you hit the update button (list has already been made visible) the model is changed and the scrollbars are adjusted.  if you still need this try removing the validate methods and if you have a setpreferredsize on the list remove it that was how mine got messed up I removed resultList.setPreferredSize(resultList.getPreferredSize()); and it's done  Have you tried calling the validate or revalidate method of the JList upon making changes to the list data? myList.setListData(someArray); myList.revalidate(); Just for your information I just did a quick investigation of the difference between validate and revalidate and it seems to be that validate will the layout for the component the method was called on and its children while revalidate will go all the way up to its highest parent and then perform layout changes and such to all its children. Calling revalidate on myList will not only validate the list itself but it will also validate the scroll pane as well therefore affecting the visibility of the scroll bar depending on the items being drawn in the list. Yeah I tried both but with no effect ..."
1044,A,"How do you name a SwingWorker thread? Open to code or best practices I'm trying to debug a horrible exception that is occurring in a SwingWorker thread. If I could name my SwingWorker threads then I could better interpret the stack traces I am receiving. It doesn't seem possible to name a SwingWorker thread (is it?). I'm looking for any best practices or 'tricks' to help me properly identify my worker threads short of just peppering my code w/ log statements. The Thread used by SwingWorker is from an Executors.defaultThreadFactory which means it's from a pool. So naming the thread could be misleading if ""MyXYZThread"" gets reused for another SwingWorker in the system that fails to rename the thread. I'd extend the SwingWorker to include a name and log that name when throwing an exception. Note: I'd rather not make the caller responsible for handling the exception but I don't see a way to do it without altering the contract of SwingWorker. private static abstract class MySwingWorker<X Y> extends SwingWorker<X Y> { private final String taskName; public MySwingWorker(String name) { this.taskName = name; } public String getTaskName() { return taskName; } } Usage: new MySwingWorker<ObjectObject>(""my task"") { protected Object doInBackground() { try { return someCall(); } catch(Exception e) { Logger.getLogger(getClass().getName()).log(Level.SEVERE ""Exception in "" + getTaskName() e); throw e; } } }.execute();  You should be able to use reflection to get the thread and call setName as well. You would need to make use of the setAccessible method to do that and some digging around to find the names of the variables you need to access. I would not prefer this method but it may be just as ""hacky"" as any other way...  The best practice would be to use the already mentioned Thread.currentThread().setName(String). A ""trick"" would be setting the ThreadFactory for SwingWorkers: sun.awt.AppContext context = sun.awt.AppContext.getAppContext(); int maxWorkers = 10; ThreadFactory factory = ... ExecutorService executor = Executors.newFixedThreadPool(maxWorkers factory); context.put(SwingWorker.class executor); This uses a class from the sun.awt package so you've been warned. sun packages and ""best practices"" is a contradiction in itself :-) The ""best practice"" was using Thread.setName(String). Using the sun package was a ""trick"".  While you don't have access to the ThreadFactory that SwingWorker is using you can call Thread.currentThread().setName() in your run() or call() method of whatever class the SwingWorker is running. Just be sure that you're setting that value when the thread is actually executing the code Nice answer. Simple and direct."
1045,A,"GroupLayout: Is it worth learning? I'm relatively new to java (specifically swing) and have recently been making some fairly simple applications learning as I go. The latest one has lots of form components such as JLabels JTextFields JButtons etc etc. All were placed in NetBeans using a visual builder. I have to say I'm not really taking to NetBeans and have really just been designing the GUI and copying the code straight to Eclipse. My question is: Is it worth getting a very good understanding of GroupLayout and coding by hand (and therefore having more control over my GUI) or just continuing on as is? GroupLayout wasn't really designed for hand-coding; it's much much more verbose than any other layout manager (except possibly GridBagLayout). Since you say you're new to Swing I suggest starting with the basic layout managers (BorderLayout and FlowLayout); you can use them in NetBeans by right-clicking the panel or frame and choosing ""Set Layout"". After you're familiar with those I suggest you check out MiGLayout. To answer your other question: I think of NetBeans form designer as similar to a calculator; it's a wonderful tool if you already know the basics but you'll never learn anything if you just use it as a crutch. I think SpringLayout is even more verbose. ;) I've used the GroupLayout that comes with LWUIT and it was not too bad but not easy either. I liked JGoodies FormLayout and since MiG Layout is its successor I warmly recommend MiG. Anyways it's good to know also the basic layouts. I am already familiar with BorderLayout - but practically GroupLayout is what I think is best for the application I'm currently building. As for using NetBeans as a crutch - I merely don't like the IDE and find it needlessly over-complicated in some parts  GroupLayout is worth learning to use programmatically. I use GroupLayout as my default layout on nearly every panel I create which uses standard Swing components. I find that the results are always very pleasing to the eye and resize very well. I always set these options: groupLayout.setAutoCreateGaps(true); groupLayout.setAutoCreateContainerGaps(true); Using this layout repeatedly has not only given me great-looking layouts but it gives me the low-level experience required to be able to put together some complicated panels with a number of components that is unknown at compile time. I also find when the number of components is dynamic that I can lay out all the components and then turn them on and off with setVisible(boolean) without recreating the horizontal and vertical groups.  I'd say it's worth taking some time to understand GroupLayout if only because it's always a good idea to understand what your IDE is doing. Knowing what goes on behind the scenes actually makes you more flexible because if you wind up in a situation where you don't have access to Netbeans you'll know how to replicate the layout it would have produced for you. Besides after you've gotten a decent amount of experience you'll probably wind up saving time overall. You can often develop a simple GUI faster by hand than by using a visual editor especially considering the time it takes you to copy and paste the code from Netbeans to Eclipse. And of course learning how to use GroupLayout by hand will also make it easier for you to transition to any of the other layout managers Java offers which in turn can lead to simpler code and even more time saved. I'm thinking this too; I may be in a situation where I don't have the convenience of copying code from NetBeans but where I need to make a relatively complex GUI -- and in the cases where I need to make a simpler GUI I need not turn to NetBeans rather build it on a simpler layout manager.  If you are inclined to a VB Program Style you spend time on GroupLayouts. Otherwise try to understand GridBagLayout Manager with suitable examples. It is the best for those who want every gui component should be under our pen control(We should write and not the IDE). A good java developer should spend time in gui objects and business objects and must know how to separate them. L.Sankaranarayanan.  Most of the more complicated layout managers are not meant to be hand-coded. You can do it but you'll likely have trouble understanding your own layout a few months from now. GroupLayout is no exception worse it's not intuitive at all you have to contort your mind forcing your layout into GroupLayout terms. It's my opinion that these layout managers are not worth learning. GridBagLayout is the worst of all. It has more options than you can possibly figure out and they never seem to do what you think they do. MiGLayout is very powerful reasonably intuitive and mostly does what you think it does but I'll still argue that it's too powerful and too complicated for its and the programmer's own good. GroupLayout is not as powerful not as intuitive and not worth the trouble. My advice from years of laying out Java GUI and maintaining them is to learn and use the most powerful layout manager you can master in two hours and that you'll never forget then layout your GUI with nested containers using this layout manager and the basic BorderLayout/GridLayout/FlowLayout/BoxLayout. -1 GroupLayout seems very intuitive to me. Sure it's verbose but this is Java we're talking about. Just read the documentation and follow [this example](http://download.oracle.com/javase/tutorial/uiswing/layout/group.html). After that start using it on ""real life"" GUI projects. I think you'll find it's really not as bad as it looks at first. -1 I agree with @bcat. I would also like to take direct issue to the advice in the last paragraph. The best results always come from mastery that takes longer than two hours. I will never forget how to use `GroupLayout` as long as I keep using it. I also don't understand how `GroupLayout` could possibly be any more complicated than using **nested containers**. This is how I'd do it if someone told me to make it complicated. http://madbean.com/anim/totallygridbag/"
1046,A,"Jlabel HTML formatting I have a JLabel which has an e-mail address in it. I used HTML formatting on the JLabel so it appears as a link. However you are not able to click the link. In fact you cannot select any of the text in the label. Is there a property that I can set on the JLabel to allow the user to at least select the text of the e-mail and preferably to click on the e-mail address the way they would on a webpage? My code for my JLabel is essentially: JLabel l = new JLabel(""<html><a href=\""mailto:bob@bob.com\"">bob@bob.com</a>""); The default JLabel doesn't allow you to do this. If you really want to use a JLabel you could add a mouse listener to it to capture clicks and react to them. Another way would be to use a non-editable JEditorPane and call addHyperlinkListener on it to add your HyperlinkListener."
1047,A,"Adding a child component to a JButton Is it possible to place a child component inside a JButton and make it transparent to a subset of mouse events so that: The child component receives MouseMotionEvents (so it can respond by modifying a displayed image) Clicking still depresses the JButton ""behind"" the child component If you add the child component to the button but make no other changes clicking in the area occupied by the child does not activate the button. I know this can be achieved by creating a new class that extends JButton but I would prefer to use a child component which has already been written. Note: this is purely for cosmetic reasons. The child component only changes its own appearance. It does not perform any other actions in response to clicks. There is just one Action triggered by the button in the normal way. JXLayer is just the thing you need. Check out https://jxlayer.dev.java.net/ The project site has several good articles about JXLayer's usage for many different use cases.  Yes it is possible but probably there are better ways to change the appearance of a JButton on mouse over. You can extend a ButtonUI to do that. However if you want to drop a component over a JButton you should pass other mouse events (e.g clicks) to the underlying JButton. I used SwingUtilities.convertMouseEvent to pass unwanted events to the button which gives the desired effect."
1048,A,"Java Swing BasicUI update error what can I do? My program uses Swing JPanel JList JScrollPane ... It runs fine but generated the following error message and yet in the message it didn't say which line of my program caused the error what can I do ? ========================================================================= Exception in thread ""AWT-EventQueue-0"" java.lang.ArrayIndexOutOfBoundsException: 3 at javax.swing.plaf.basic.BasicListUI.updateLayoutState(BasicListUI.java:1356) at javax.swing.plaf.basic.BasicListUI.maybeUpdateLayoutState(BasicListUI.java:1299) at javax.swing.plaf.basic.BasicListUI.getPreferredSize(BasicListUI.java:566) at javax.swing.JComponent.getPreferredSize(JComponent.java:1632) at javax.swing.ScrollPaneLayout.layoutContainer(ScrollPaneLayout.java:769) at java.awt.Container.layout(Container.java:1398) at java.awt.Container.doLayout(Container.java:1387) at java.awt.Container.validateTree(Container.java:1485) at java.awt.Container.validate(Container.java:1457) at javax.swing.RepaintManager.validateInvalidComponents(RepaintManager.java:670) at javax.swing.SystemEventQueueUtilities$ComponentWorkRequest.run(SystemEventQueueUtilities.java:127) at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209) at java.awt.EventQueue.dispatchEvent(EventQueue.java:597) at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269) at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184) at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:174) at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169) at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161) at java.awt.EventDispatchThread.run(EventDispatchThread.java:122) ===================================================================================== I do have various .validate() and .repaint() statements in my program to make sure it runs correctly. Because my program looks fine does that mean I can ignore the error ? Anything I can do to avoid the error message ? ===================================================================================== Here is more details: <1> Java version jdk1.6.0_11 <2> How I init the list: for (int Selector_Id=0;Selector_Id<6;Selector_Id++) { Stock_Symbol_Data[Selector_Id]=new DefaultListModel(); Stock_Symbol_List[Selector_Id]=new JList(Stock_Symbol_Data[Selector_Id]); Stock_Symbol_ScrollPane[Selector_Id]=new JScrollPane(Stock_Symbol_List[Selector_Id]); } ... Stock_Symbol_Data[A_Selector_Id].clear(); if (Selected_Symbols_Vector.size()>0) for (int i=0;i<Selected_Symbols_Vector.size();i++) Stock_Symbol_Data[A_Selector_Id].addElement(Selected_Symbols_Vector.elementAt(i)); Yishai is right since my program needs to init a very long list which requires about a minute. I can't wait to see the UI before the init is finished so I put it in a ""SwingWorker"" class and let it do the init after the app UI window opens; that way I can see the progress from within the UI rather then wait for the first window to open. It seems to me it's the PC's slowness that's messing up the UI update process; if I later on move to a faster machine Swing should straighten this out or am I right about this? I tried to use the ""(wrap the change in a Runnable and call SwingUtilities.invokeLater)"" approach but it didn't work as I expected. It waits till all the list is filled in then opens the first window; that means I have to look at empty screen for one minute before the first UI shows up. With SwingWorker it now shows the error message randomly--sometimes here sometimes there other times not at all. My SwingWorker looks like this : class Update_Selection_Worker extends SwingWorker<IntegerInteger> // Look into SwingWorkerDemo in Fit for details { int Selector_Id; boolean Update_Only_This_Selector; Stock_Image_Scanner Stock_image_scanner; public Update_Selection_Worker(int Selector_Idboolean Update_Only_This_SelectorStock_Image_Scanner Stock_image_scanner) { this.Selector_Id=Selector_Id; this.Update_Only_This_Selector=Update_Only_This_Selector; this.Stock_image_scanner=Stock_image_scanner; } @Override protected Integer doInBackground() throws Exception { // Out("" In Update_Selection_Worker Selector_Id=""+Selector_Id); if (Update_Only_This_Selector) // Only need to update from Rules_Panel_Id eariler ones haven't changed { Stock_image_scanner.Update_Selector_List(Selector_Id); Thread.sleep(5); publish(Selector_Id); } else for (int i=Selector_Id;i<Stock_image_scanner.Rules_Panel_Count;i++) { Stock_image_scanner.Update_Selector_List(i); Thread.sleep(5); publish(i); } return 1; } @Override protected void process(java.util.List<Integer> chunks) // As the worker thread executes it can publish results of V type. Override the process method to work with intermediate results. { for (final int i : chunks) { SwingUtilities.invokeLater(new Runnable() { public void run() { Stock_image_scanner.Selector_Total_Label[i].setText(Stock_image_scanner.Stock_Symbol_Data[i].getSize()+""""); Stock_image_scanner.Stock_Symbol_List[i].revalidate(); Stock_image_scanner.Stock_Symbol_List[i].repaint(); Stock_image_scanner.Stock_Symbol_ScrollPane[i].revalidate(); Stock_image_scanner.Stock_Symbol_ScrollPane[i].repaint(); Stock_image_scanner.Selector_Panel[i].revalidate(); Stock_image_scanner.Selector_Panel[i].repaint(); } }); } } @Override protected void done() { } public static void out(String message) { System.out.print(message); } public static void Out(String message) { System.out.println(message); } } Getting random errors when you're multithreading is a sure sign that you're doing it wrong. Can you post the SwingWorker? Can you post the code that creates/initializes your JList? Never ignore errors that Java throws at you (or any programming language for that matter). You may not notice anything wrong but usually an error like this is a cause for concern and may affect you down the road. It's better to just take care of it now while it's fresh in your head and you haven't written a lot of code on top of this. which version of java are you using? The obvious cause for concern here is that you modifying your Model in a different thread and not in the Swing event queue. If that is the case you do have a problem with your code that you should address (wrap the change in a Runnable and call SwingUtilities.invokeLater if nothing else). If not I have certainly seen cases where you just see a swing bug and it is not worth crashing your application over. But given the nature of this stack trace I would say that is not likely the more likely cause is threading and the event queue).  I think Yishai is right. I had a similar behaviour and wrapping it into ...EventQueue.invokeLater... solved my problem. java.awt.EventQueue.invokeLater(new Runnable() { @Override public void run() { listModel.addElement(book); jListBooks = new JList(listModel); jListBooks.setCellRenderer(new RobotBookListRenderer()); jScrollPane1.setViewportView(jListBooks); jListBooks.updateUI(); } }); `SwingUtilities.invokeLater` should work as well  How are you setting up your data model? The UI component is being told that you have at least 4 items in the dataModel but the model doesnt have that many.  I guess too the exception is because the concurrent modification of some swing object array. SwingWorker has the option for 'in progress events'. You need to override process(List<V> chunks) protected method and use the void publish(V... chunks) method to send status update to the UI. In your processing case this means submit your partial results periodically so the user doesn't get bored. Yes you are exactly right although I've been using SwingWorker I've never used the publish() and process() methods this is the first time to learn how to use it."
1049,A,How do I include JavaHelp with my Eclipse project? I am writing some applications that require to have a Help Contents system tied to it. I came across JavaHelp which seems perfect for what I need. The issue I am having is that when you download JavaHelp it comes with its own bin folder which looks like you are suppose to use separately. However I am pretty sure if I just copy some of the JAR files I should be able to just place them in the hierarchy in my Eclipse and use it in the project. What JAR(s) would I need to copy so I can use JavaHelp in my application? Update I got JavaHelp working rather easily. I had issues with the built in Eclipse Help though. But I appreciate both of your answers! If anyone is interested in knowing how to add JavaHelp to your project (doesn't have to be Eclipse specific) I will be more than happy to provide the answer here. While JavaHelp is a good api Eclipse has its own api for help and (IMO) it's a much better option for SWT based applications. See this developerworks article on developing help using the Eclipse help system. If you're actually creating a swing application and want to package java help with it you'll need to create the help documents (help topics helpset file map file TOC index full-text search db) and then package those files into a jar for distribution with your application. See the JavaHelp Users Guide for details. For running the help viewer from the Eclipse IDE (and from your application at runtime) all you need is the jar file jhall.jar from the JavaHelp distribution.  The JavaHelp README details the redistributable jar files that are supplied in the download. Select the jar that suits your needs and add it to your Eclipse project.
1050,A,"threading issues with java swing and web start EDIT: After fixing a few issues the bigger issue that I am having is being caused by Apache POI which I am using. I am working on figuring that out now. Apparently it is being restricted by the Sandbox. I'm very new to Swing and created a small Swing app that I now need to have run via web start. I'm trying to use the FileOpenService and update a Text display. I think I am running into threading issues because the FileOpenService dialog never appears and my text display is not getting updated. I can't really find any examples where they are doing anything different than I am right now. Ideas? Thanks! Edit: I now have the FileOpenService dialog appearing. I changed my main to this: public static void main(String[] args) throws Exception { javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { new MainFrame(); } }); } However I still can't get my display to update. This is where I am doing the update:  Runnable r = new Runnable() { public void run() { for (final String s : Logger.getMessages()) append(s + ""\n""); } }; try { if (SwingUtilities.isEventDispatchThread()) r.run(); else SwingUtilities.invokeAndWait(r); } and my append method: private void append(Color c String s) {// throws Exception { StyleContext sc = StyleContext.getDefaultStyleContext(); AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY StyleConstants.Foreground c); int len = _textPaneLog.getDocument().getLength(); try { _textPaneLog.getDocument().insertString(len s aset); } catch (BadLocationException e) { e.printStackTrace(); } } Without a brief code sample that illustrates what you're doing nobody could begin to guess where you're going wrong. I think I might be able to provide something. Just a few minutes. Have you created any new threads? If so... what are they for? If not what makes you think it is a threading issue? It could just as easily be a typo. `FileOpenService` should work on or off the EDT (when on the EDT it behaves as if it were a modal dialog box in fact it may be implemented using one). It currently displays a dialog box before the file open dialog (nasty evil UI). @Mark I am pretty sure it is a threading issue because when I step though in the debugger the code is executed but I never see anything. No exceptions or any other errors. You are calling *.openFileDialog(foobar) right? FileOpenService fos = (FileOpenService)ServiceManager.lookup(""javax.jnlp.FileOpenService""); FileContents fc = fos.openFileDialog(null null); Sorry if this is a dumb question but until you update your question with source I can't think of much else.  The problem I was having had nothing to do with any of this. In another part of my code right near where I was trying to do this I was causing an application exit. It was a hold over from something else I was trying out that got missed when I was working on implementing this."
1051,A,JTable RowFilter Is is possible to some how get the index of the selection corresponding to the non filtered table? After the table is filter using a regexFilter. JTable getSelectedRow returns the index of the filtered table? If you are using the built in TableRowSorter functionality from 1.6 you can use the convertRowIndexToModel() on the table. This is give you the unfiltered index of the selected row. The javadoc for JTable gives a description of this: Coordinate conversions will be necessary when using the row based methods of JTable with the underlying TableModel. All of JTables row based methods are in terms of the RowSorter which is not necessarily the same as that of the underlying TableModel. For example the selection is always in terms of JTable so that when using RowSorter you will need to convert using convertRowIndexToView or convertRowIndexToModel.  store the row id in your datamodel when you get the selected row from jtable query that rows ID.
1052,A,"Animated Swing effect to display full-resolution image I've got an editor with lots of image thumbnails. I'd like a double-click on an image to display the full resolution image using a modal undecorated dialog. Ideally this would be animated to show the image zooming up to full resolution on the center of the screen then any click would make the image go away either zooming back out or fading away. I'm not concerned with establishing an exact behavior I just want something slick. I've found plenty of JavaScript examples for this but is there anything built for Swing? This seems like a good candidate for a generic reusable component. Is anyone aware of one? This isn't really an answer to your question but for a great article on image scaling in general I recommend Chris Campbell's article ""The Perils of Image.getScaledInstance"" (http://today.java.net/pub/a/today/2007/04/03/perils-of-image-getscaledinstance.html) Hi Ash familiar with that article came in very handy for another project. Sounds like I'll need to write my own component for this stuff. Digging up TimingFramework and getting to work... You may also want to check out the open source animation app ""Project Onyx"" (http://www.pushing-pixels.org/?p=1231). The third demo movie looks something like what you're after This piece of code does more or less the trick... There is still a problem in the way I'm setting the dialog's location... Hope it helps. import java.awt.BorderLayout; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.geom.AffineTransform; import java.awt.image.BufferedImage; import java.io.File; import java.lang.reflect.InvocationTargetException; import javax.imageio.ImageIO; import javax.swing.JButton; import javax.swing.JDialog; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.SwingUtilities; public class OpenImageZooming { private static final int NB_STEPS = 30; private static final long OPENING_TOTAL_DURATION = 3000; public static void main(String[] args) { OpenImageZooming me = new OpenImageZooming(); me.openImage(args[0]); } private JFrame frame; private JDialog dialog; private JPanelZooming panelZooming; private void openImage(final String imagePath) { SwingUtilities.invokeLater(new Runnable() { public void run() { frame = new JFrame(); frame.setTitle(""Open image with zoom""); JPanel p = new JPanel(new BorderLayout()); p.add(new JLabel(""click on button to display image"") BorderLayout.CENTER); JButton button = new JButton(""Display!""); frame.setContentPane(p); button.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Thread t = new Thread() { @Override public void run() { displayImaggeWithProgressiveZoom(imagePath); } }; t.start(); } }); p.add(button BorderLayout.SOUTH); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(300 100); frame.setLocationRelativeTo(null); frame.setVisible(true); } }); } protected void displayImaggeWithProgressiveZoom(String imagePath) { try { final BufferedImage image = ImageIO.read(new File(imagePath)); for (int i = 0; i < NB_STEPS; i++) { displayDialog(i NB_STEPS image); Thread.sleep(OPENING_TOTAL_DURATION / NB_STEPS); } } catch (Exception e) { // TODO Auto-generated catch block e.printStackTrace(); } } private void displayDialog(final int i final int nbSteps final BufferedImage image) { try { SwingUtilities.invokeAndWait(new Runnable() { public void run() { if (dialog == null) { dialog = new JDialog(frame); dialog.setUndecorated(true); dialog.setModal(false); panelZooming = new JPanelZooming(image); dialog.setContentPane(panelZooming); dialog.setSize(0 0); dialog.setLocationRelativeTo(frame); dialog.setVisible(true); } int w = (i + 1) * image.getWidth() / nbSteps; int h = (i + 1) * image.getHeight() / nbSteps; panelZooming.setScale((double) (i + 1) / nbSteps); dialog.setSize(w h); dialog.setLocationRelativeTo(null); } }); } catch (InterruptedException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (InvocationTargetException e) { // TODO Auto-generated catch block e.printStackTrace(); } } @SuppressWarnings(""serial"") public static class JPanelZooming extends JPanel { private BufferedImage image; private double scale = 1.0d; public JPanelZooming(BufferedImage image) { this.image = image; } @Override protected void paintComponent(Graphics g) { super.paintComponent(g); Graphics2D g2 = (Graphics2D) g; AffineTransform at = g2.getTransform(); AffineTransform oldTransform = (AffineTransform) at.clone(); at.scale(scale scale); g2.setTransform(at); g2.drawImage(image 0 0 image.getWidth() image.getHeight() null); g2.setTransform(oldTransform); } public void setScale(double scale) { this.scale = scale; } } } Thanks for the code Laurent. The dialog animation is pretty choppy and disappears and reappears between animations (on OS X). I tried using the animation framework and it's a bit better but still choppy. Maybe results would be better using the glass pane and a component instead of a dialog? So to clarify how can I draw a custom component on the full window? Do I need a transparent glassPane on the JRootPane? That doesn't seem to fill in the entire window only the top frame. Or should I use a transparent undecorated JDialog that takes up the entire window? I've seen that technique used before and it seems like a hack. Because the dialog can't be completely transparent it seems.  You can create a custom control that displays the image at the scale you want. 1) Create a BufferedImage from the image file you want using ImageIO.read(file) (you can also create it from an InputStream) 2) Extend the JComponent or Canvas class and overload the paint function to draw the animated image using Graphics.DrawImage() and set the width and height based on how long the window has been open. Set a timer or use another thread to repeatedly have the component redraw itself for however long you want the animation to play. I haven't done much with customized modal dialogs (I mostly find them annoying) but you can use a JDialog and and your component to it. @Chad: If the zoomed-in image should be larger than the JFrame of my app how would I accomplish that? Should I use an undecorated JFrame or JDialog and set the size and position for each iteration of the animation? Uh... I've always used paint and it works fine. There's also update() or you can just call getGraphics() and draw on a component without even overriding it. -- There are a lot of ways to draw on components. It doesn't make that much difference. -- If you read the documentation for JComponent.paint() it actually calls paintComponent() so unless you have child elements there's no reason to override paintComponent() rather then paint() Paint does a whole lot more than just call paintComponent including setting clip regions applying a repaint manager (if the component is using one) and painting the border as well. Custom painting is done by overrideing the paintComponent() method NOT the paint() method."
1053,A,"Changing ""Favorites"" Tooltip in Java Help In my helpset file I'm declaring a favorites view using <view> <name>Lesezeichen</name> <label>Lesezeichen</label> <type>javax.help.FavoritesView</type> <data></data> </view> This automatically adds an appropriate button to the toolbar (in the swing application). Unfortunately the tooltip of the button reads ""Add to favorites"". I would like to replace this by my own text but didn't find anything about this in the documentation or using a google search. Any ideas or pointers? Disclaimer: I already posted this question to JavaRanch didn't get an answer yet though. If you extract the src.jar (rename it to src.zip and extract) and open the java class jh2.0/src/src/javax/help/resources/Constants.java you will notice that in the section // Tooltips for Actions is located entry for localization: { ""tooltip.FavoritesAction"" ""Add to Favorites""} This constant is missing from the jh2.0/src/src/javax/help/resources/Constants_de.java which is used in your case. Just add the right translation compile the source or just this class and add it to the jh.jar (you may treat the jar as a simple zip archive) Yes I know this is dirty hack but generally JavaHelp is quite useful  Now this sounds weird. The ResourceBundle mechanism supports to ""override"" the class resource content by using a .properties file with the resource bundle. Try placing the looked up resource bundle as a properties file in the respective folder denoted by the bundle name. E.g. if HelpUtilities looks after javax.help.resources.Constants by calling ResourceBundle.getBundle(""javax.help.resources.Constants"" locale); you'd be placing your file in a folder structure at /javax/help/resources/Constants_de_DE.properties. This must be located in your applications ""working directory""."
1054,A,JTable updates not appearing I have a JTable with a custom TableModel called DataTableModel. I initialized the table with a set of column names and no data as follows: books = new JTable(new DataTableModel(new Vector<Vector<String>>() title2)); JScrollPane scroll1 = new JScrollPane(books); scroll1.setEnabled(true); scroll1.setVisible(true); JSplitPane jsp1 = new JSplitPane(JSplitPane.VERTICAL_SPLIT scroll1 scroll2); JSplitPane jsp2 = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT inventory jsp1); myPanel.add(jsp2 BorderLayout.CENTER); I later want to update books with a set of data and use the following: DataTableModel d = (DataTableModel)books.getModel(); d.setValues(bookList); books.setModel(d); where bookList is a Vector<Vector<String>> that definitely has data. However although all this code is being executed it is not displaying on the screen. The code for the setValues() method is: public void setValues(Vector<Vector<String>> v) { values = v; fireTableDataChanged(); } Am I missing something here? The class and methods for my DataTableModel are (these methods are all implemented to return correct results): public class DataTableModel extends AbstractTableModel { public DataTableModel(Vector<Vector<String>> v Vector<String> c) {} public int getColumnCount() { if (values != null && values.size() > 0) return values.elementAt(0).size(); else return 0; } public int getRowCount() { if (values != null && values.size() > 0) return values.size(); else return 0; } public Object getValueAt(int arg0 int arg1) {} public void setValues(Vector<Vector<String>> v) {} public Vector<Vector<String>> getValues() {} public void setColumnNames(Vector<String> columns) {} public String getColumnName(int col) {} } mhhh nope.. I think your model and your table are not connected. Can you post your actual code.. ? Set model should be enough. . Did you code that DataTableModel your self? Yes I did. And when I examine the DataTableModel it seems to have the correct data. This is weird problem. You said that DataTableModel implements TableModel. So. If you does not use abstract class the problem should be in the way how you are handling the events. Are listeners really registered and then notified? If you can please send link to source of DataTableModel. But before verify that you are correctly handling listeners registered into this model. I've debugged the code. The update code is really being called as is the updateValues() method. So the fireTableDataChanged() method is also being called with no errors but the display is not changing.  Have you implemented the other methods for TableModel? If so how does your implementation look? Maybe you should post your table model code to let us inspect it? BTW: My main error when implementing TableModel was to override getRowCount() and getColumnCount() to return 0. This will tell the table that there is no data to display... EDIT: So you seem to be using something like an AbstractTableModel or a DefaultTableModel right? Have you overridden some of the methods? EDIT2: You should call fireTableStructureChanged instead of fireTabeDataChanged() because initially your table model is returning 0 for getColumnCount(). EDIT3: To further optimize your model you should consider returning a fixed value for getColumnCount() if you have data that has the same number of columns every time. Then you can call the fireTabeDataChanged() which just loads the new data instead of completely building up the table and data (fireTableStructureChanged()) every time. ahhh.... crap. I'll post in a little while if that worked. That fixed it! Thanks!
1055,A,How do I switch panels inside a frame depending on a button action? I have created an application that has a toolbar menubar and content area. I have added the menu and toolbar to the application window but I am stuck with displaying the panel in content area based on the button action (like add display) which is clicked through the toolbar. Is this a right way to do this? Is there any better way to do this? If I understand correctly you want to have multiple JPanels only one of which is shown at a time? If that's the case it sounds like a CardLayout is what you need. You basically add all your JPanels to it with unique names and then you can tell the CardLayout which of them to show. thank you this sounds like good idea and I will give it a try. I never thought of this i was trying assign a Jpanal variable to a content area pane and then change the value of Jpanel variable on the basis of button pressed.  I think CardLayout is probably what you want but if something like memory usage is a concern and you really want to remove and add a new JPanel/Component you need to remove the old JPanel and add the new one (with proper constraints and/or index depending on the layout). You'll have to validate() the content pane after you make the switch.
1056,A,"GUI: Changing panels based on value of combo box I have a question about GUI design specifically with Java Swing and creating clean separation between presentation and model. It's a bit difficult to describe but essentially we have lots of reference data in our system (i.e. that would correspond to lookup tables in the DB). We want people to be able to edit them all from one screen. So in an ideal world what we'd like is a combo box in the top-left corner with a list of 'types' of reference data (so each corresponding to one table in the DB). Then when selected a list of the data is populated below also a filter (or search box). When one of these items is selected the panel to the right is activated which will allow the actual data to be edited. Now here's the problem: each type of data we need to edit is different so it has different fields etc. We could go with a generic solution but I'm not really a fan of them - there are lots of different validation rules for each etc even for different clients and it would be a nightmare to manage. We're using the Presentation Model pattern to achieve some degree of separation between GUI code and the model but I can't think of a clean way of doing this which doesn't somehow blur the line of responsibilities a bit. What are the ways you have solved problems like this? [Note: apologies for the long question hope it's understandable I can re-phrase if necessary] You could use the Factory Pattern to create a UI widget for the element that you are selecting. You could also use it to create a validation rule object depending on the type. This would give you some of the flexibility you desire. So you can have something like: IWidget widget = UIFactory.createFor(myObject.getType()) That can be invoked on the selection event to create the right widget to edit the selected element. The IWidget could have methods such as: validateData() refreshData() setDataElement(IDataElement element) That would allow you to treat all UI widgets generically but still have a special UI widget for each element type. I am assuming that the elements that you are selecting from the table all implement some IDataElement interface that contains the getType() method. I used this solution tied together with the Eclipse Extension mechanism to plug-in new UI elements into my ""base"" solution to have an extensible core and a high level of reuse. You could achieve something similar by injecting types and widgets into your factory either manually or with Spring. Thanks that was useful! :)  If you dont want to go down the generic path you could have your model hold a mapping of combobox item -> panel name for use with a CardLayout. You could then create custom panels for the editing each of the reference data types. When the combo box selection is changed you can save the current state in your model request the panel name of the current selection prepare your next panel for display and then have your CardLayout show it."
1057,A,How to do a check before allowing editing of a given row in a JTable The problem is quite basic. I have a JTable showing cached data from a database. If a user clicks in a cell for editing I want to attempt a lock on that row in the database. If the lock does not succeed I want to prevent editing. But I can't seem to find any clean way to accomplish this. Am I missing something? Oracle has a nice way of handling this but I don't know how universally applicable it is. In Oracle you can use FOR UPDATE on a SELECT statement to lock a record as you read it. For example if you are fetching a row for display: select * into v_row from my_table where my_table_id = 1 for update; This will allow reads but prevent updates. If another transaction has a lock your transaction will wait until it becomes available (or timeout eventually). If you want the statement to throw an exception if you try to lock you add NOWAIT. select * into v_row from my_table where my_table_id = 1 for update nowait; If the row is already locked you will get: ORA-00054: resource busy and acquire with NOWAIT specified. Hope that helps.  Before editing/setting value the table model is asked via TableModel.isCellEditable(rowcol) whether this cell is editable. Here you can implement your lock. and after TableModel.setValue(rowcolval) you should unlock this. BUT. The lock operation should take a lot of time and makes your UI un-responsible. And it si BAD. Try different approach. What about lazy fail? You lock the row check for validity of data and fail if data are newer. If data are OK you put them down. UNLOCK.  Instead you could wait until the user actually changes something then override JTable.editingStopped to do the work there (you could even check to see if the value changed) That way no locking is done until the user actually changes something.  Because you have to test on the click you can't use the model's way of doing this so you should try overriding the JTable's public void changeSelection(int rowIndex int columnIndex boolean toggle oolean extend) method. If the row is locked then don't call super.changeSelection and it should leave the row unselected. Actually I'd still want the rows selectable (since I have a function for exporting selected rows which shouldn't require a lock) but your answer gave me the right idea. :) I'm overriding editCellAt() on the JTable instead and otherwise does just as you recommended. cell selection and editability is not related. In the mentioned isTableCellEditable method you can return false and the JTable will not start editing. But holding a lock on a row until the editing is as also mentioned not a good diea
1058,A,"JTree gives ArrayIndexOutOfBoundsException? I try to dynamically add nodes to a Java Swing JTree and the user should be able to browse and to collapse hierarchy while nodes are constantly added. When I add a Thread.sleep(10) in my loop it works fine; but this is a dirty hack... Here is the stripped down code that triggers this problem. Whenever I run this and doubleclick on the root node to expand/collapse it (while nodes are added) I get an ArrayIndexOutOfBoundsException. When I add a Thread.sleep(10) this does not happen. I guess this is a threading issue but I have no idea how to synchronize this? Any hints would be greatly appreciated! public static void main(String[] args) throws InterruptedException { final JFrame frame = new JFrame(); frame.setSize(600 800); frame.setVisible(true); MutableTreeNode root = new DefaultMutableTreeNode(""root""); final DefaultTreeModel model = new DefaultTreeModel(root); final JTree tree = new JTree(model); frame.add(new JScrollPane(tree)); while (true) { MutableTreeNode child = new DefaultMutableTreeNode(""test""); model.insertNodeInto(child root root.getChildCount()); tree.expandRow(tree.getRowCount() - 1); // uncommenting this to make it work // Thread.sleep(10); } } I want to use this for a search-on-typing application so giving (almost) instant results is essential for me. EDIT: Thanks for the quick answers! SwingUtilities.invokeLater() solves the problem. I now do this: Add 100 items within SwingUtilities.invokeLater(); After 100 items I run this so that the GUI can get updated: // just wait so that all events in the queue can be processed SwingUtilities.invokeAndWait(new Runnable() { public void run() { }; }); This way I have a very responsive GUI and it works perfectly. Thanks! Swing is thread-hostile so do your Swing manipulation in the AWT Event Diaptch Thread (EDT). The infinite loop is nonsense so difficult to come up with a suggestion. The best equivalent I can think of is iterating posting an even to run the code again. Because there are certain priorities in the event queue I'm not sure even that works. public static void main(String[] args) throws InterruptedException { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { runEDT(); }}); } private static void runEDT() { assert java.awt.EventQueue.isDispatchThread(); final JFrame frame = new JFrame(); frame.setSize(600 800); frame.setVisible(true); final MutableTreeNode root = new DefaultMutableTreeNode(""root""); final DefaultTreeModel model = new DefaultTreeModel(root); final JTree tree = new JTree(model); frame.add(new JScrollPane(tree)); frame.validate(); new Runnable() { public void run() { final MutableTreeNode child = new DefaultMutableTreeNode(""test""); model.insertNodeInto(child root root.getChildCount()); tree.expandRow(tree.getRowCount() - 1); final Runnable addNode = this; // Inner class confusion... java.awt.EventQueue.invokeLater(addNode); }}.run(); } (Disclaimer: Not compiled or tested.)  tree.expandRow needs to be done in the event thread so change the loop as follows: while (true) { MutableTreeNode child = new DefaultMutableTreeNode(""test""); model.insertNodeInto(child root root.getChildCount()); final int rowToExpand = tree.getRowCount() - 1; // ? does this work ? SwingUtilities.invokeLater(new Runnable() { public void run() { tree.expandRow(rowToExpand); } }); } While you're at it you probably need to make sure whatever list your tree model is using is synchronized so you don't insert into the collection while the tree is being traversed by the paint thread. Wouldn't you need to go ahead and save tree.getRowCount() - 1 considering there may have been 50 rows inserted before that Runnable finally kicks off? @Richard good point.  You may want to have the tree.expandRow command run from a TreeModelListener's treeNodesInserted event so that it only runs after the model is updated. I have just tried this now but I get exactly the same result."
1059,A,"What is the correct way of manipulating Swing components at program startup? I'm creating an application in Swing using NetBeans. I would like to be able to manipulate some components during its startup (just once) after the window's made visible for example update a progress bar. To this end I have the app's main class called MainWindow: public class MainWindow extends JFrame { public MainWindow() { initComponents(); // NetBeans GUI builder-generated function for setting // up the window components } public void Init() { loadLabel.setText(""Loading....""); loadProgressBar.setValue(20); doSomething(); loadProgressBar.setValue(40); doSomething(); loadProgressBar.setValue(80); doSomething(); loadProgressBar.setValue(100); loadLabel.setVisible(false); loadProgressBar.setVisible(false); } /* .... */ public static void main(String args[]) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { mainHandle = new MainWindow(); mainHandle.setVisible(true); mainHandle.Init(); } }); } } The problem is that the effect of the statements for updating the progress bar (or manipulating any other GUI component) within the Init() function can't be observed. If the Init() function is called from within main() as shown above the window appears but is empty the Init() function executes and returns only afterwards the window draws its contents but any changes made by Init() aren't visible because the window was empty and inactive the whole time. I also tried calling init from the windowOpened() AWT event which executes after the window is fully drawn but amazingly putting any statements for manipulating components there seems to have no effect or rather they are put in a queue and executed rapidly at some point in succession so only the effect of the last one (hiding of the elements) can be observed. The only way I managed to get it working was to remove the whole invokeLater(new Runnable()...) mantra and put the new MainWindow() setVisible() Init() sequence directly in main() which I guess is very ugly and breaks the concept of the gui running in a threaded manner. What is the right way to do this? Where do I put code to be executed first thing when the gui is ready to be manipulated execute the statements once and return control to the main event loop? I guess at the moment this is working in such a way that while the Init() function is operating any operations on the gui components are suspended (the drawing thread isn't separate and waits for Init() to finish before the manipulations are executed). Maybe I should make Init() a new thread... only how and what kind? Thanks. You could change the EventQueue.invokeLater() to invokeAndWait() and move the call to init() out to a second EventQueue.invokeLater() call. If (as looks to be the case) doSomething() takes a noticable amount of time a better idea is to move the Init code into the body of a SwingWorker. This could be executed from the MainWindow() constructor or after the setVisible() call in main and is the idiomatic way to have a responsive GUI (in case the user gets bored waiting and wants to quit) and display some visible signs of progress. See the process and publish methods for details on how to update the progress bar between doSomething() calls. You may also want to look into ProgressMonitors for another alternative that would deal with the dialog box etc for you.  There are several things you can do: For windows (such as JFrame or JDialog) you can attach WindowListener and do your manipulations in windowOpened method. Override addNotify method and do your control manipulations there. Attach HierarchyListener and do your manipulations whenever displayability of component changed. Always make sure your do your component manipulations on EDT. Use SwingUtilities.invokeLater for simple UI updates or SwingWorker for long running tasks Ad 1.: I may be not getting something but it seems to me that I remarked about trying that and it didn't work. You can try any of 3 different methods I offered. I would use #2 in your case and simply call init from addNotify( don't forget to call super.addNotify )"
1060,A,Is QT Jambi dead? I know they announced in February that it was going to transition to a community-developed model over the next year... but right now I can't find it on their website at all let alone version 4.5 that was supposed to be released this month. I am about to embark on the GUI portion of a major project and while I had considered using QT Jambi I am hesitant to create a major dependency on a product that has apparently been abandoned. Does anyone know the real status of this? Should I give up and use Swing? There is a mailing list for Jambi that appears to still be active. You can view some recent posts about this topic in the archives. There is one response that appears to be from a trolltech employee about the future of Jambi but It doesn't really seem to say much more than their press release does. Tue Mar 10 14:37:29 CET 2009: We are hoping that a community of contributors will develop for the coming year and will try to help make that happen. After that year has gone by neither of us will be able to spend time on this project at work. But if there is a thriving community at that point I wouldn't expect either of us to disappear completely either :-) We have spent some time on this project and we definitely wish to see it succeed out in the wild. But as you say we cannot commit to anything beyond what we have spare time for. A year is a long time in terms of spare time so right now I'll only say that I hope there's still interest in a year and I hope I get the chance to help out. :-) -- Eskil There is another post where they mention that they are still expecting a release soon. The latest code can be found here.  There are very recent commits at the activities page of their git repository. https://qt.gitorious.org/qt-jambi/qtjambi-community/activities
1061,A,How to convert from a mouse position to a character position in a JEditorPane in Java Swing I'm currently trying to solve a problem where I need to find the position in a piece of text in a JEditorPane based on where the mouse was clicked. Basically when the user right-clicks over a word I need to find out what the word is. To do this I need to find out which position in the text the user has clicked on. I know I can easily get the mouse position from the MouseEvent which is passed into the mousePressed method and I am told that you can convert this to get the character index in the piece of text - however I can't figure out how to do this. I have tried the viewToModel() method on JEditorPane however this is giving me back the wrong position in the text so either I'm using it wrong or it doesn't work in this way. Any ideas? I've solved this problem on my own. It turns out viewToModel() is exactly what I should be using here the problem was that I was passing in the wrong Point to it. From the MouseEvent I was using the getLocationOnScreen() method to work out the point when in fact I should have been using the getPoint() method. Thanks to anyone who read this question.  Invoking viewToModel() is the correct way to do this: public void mouseClicked(MouseEvent e) { JEditorPane editor = (JEditorPane) e.getSource(); Point pt = new Point(e.getX() e.getY()); int pos = editor.viewToModel(pt); // whatever you need to do here } @ChssPly76 Can this somehow be used for a JTable instead? The method viewToModel() is already provided by the more general class JTextComponent. For a JTable there are other methods that would first return the Cell and then one would need to call an appropriate method depending on the Cell renderer/editor. Thanks I've set your answer to be the accepted one as you will see from my answer below this is almost exactly what I have done.
1062,A,Android convertPointFromScreen Is there an equivalent of the convertPointFromScreen method from the SwingUtilities class in the Anrdoid SDK ? I don't know of a built-in function to do it but here's one using View.getLocationOnScreen(). protected static void convertPointFromScreen( int[] point View v ) { final int v_location[] = new int[2]; v.getLocationOnScreen(v_location); point[0] -= v_location[0]; point[1] -= v_location[1]; } Before you call this function you must make sure that the view has already been laid out on screen. The best way to do that is to post the invocation to the parent view's handler eg:  final View v = findViewById(R.id.my_view); ((View)v.getParent()).post( new Runnable() { public void run() { final int location[] = { 100 400 }; convertPointFromScreen(location v ); } });
1063,A,In Swing use an InputVerifier to check dates and time I'm currently working on a Swing app and I've got a few JTextAreas that are going to be parsed turned into dates and then added to a MySQL database. One is a Date field the others are DateTime what I'm trying to do is use InputVerifier to make sure they're entered correctly. I've created an InputVerifier that tries to turn the text into a date useing DateFormat.parse() and that mostly works however there are two flaws: Firstly it can't check if I only have a Date rather than a date and time Secondly it can't check if I have both a date and time rather than just one of them. Is there any way around this? Or a better way to validate date fields in Swing I'm not aware off? Swing has support for entering dates into text fields using a JFormattedTextField with a DateFormatter. With a DateFormatter you can specifiy a DateFormat object so can have either a date only field or a date and time field. Have a look at How To Use Formatted Text Fields in the Swing tutorial as an introduction.  Just a thought: you could consider using a SpinnerDateModel with a JSpinner instead of a text field. Maybe you could handle the date-only field by calling setCalendarField(Calendar.DAY) - never done it myself though so I'm not sure. +1 for only selecting the Day field. Not perfect but it helps
1064,A,"Custom Cursor in a Swing JDialog I have a Java Swing application developed on Mac OS X 10.5 using Java 1.5. I'm trying to make a custom cursor appear when the user moves the mouse over some text in a dialog. The cursor never changes though. When I don't use a JFrame instead of a JDialog the cursor does change. But then I'll have to write all the dialog code myself. How can I get the cursor to appear? Here's the simplest code I could create to demonstrate the problem: import javax.swing.*; import java.awt.*; public class CursorTest { public static void main(String[] args) { JLabel label = new JLabel(""Move mouse here for hand cursor""); label.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); JOptionPane pane = new JOptionPane(label); pane.setOptions(new Object[]{""OK""}); JDialog dialog = pane.createDialog(null ""Test Dialog""); dialog.setVisible(true); } } Looks like it is a bug in Java 1.5: I first tried with Java 1.6.0_07 and it worked as expected (on Windows XP). Then I recompiled with Java 1.5.0_06 and indeed the cursor remains in default state. Knowing the difficulties of Java 1.6 on MacOS I see it will be hard to fix that... Bug ID: 5079694 JDialog doesn't respect setCursor They give a workaround... [EDIT] Tested workaround: public class CursorTest extends JFrame { private CursorTest() { } private void ShowDialog() { JLabel label = new JLabel(""Move mouse here for hand cursor""); label.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); JOptionPane pane = new JOptionPane(label); pane.setOptions(new Object[] { ""OK"" } ); JDialog dialog = pane.createDialog(this ""Test Dialog""); dialog.setVisible(true); } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { CursorTest testFrame = new CursorTest(); testFrame.setTitle(""Test GUI""); testFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); testFrame.setSize(500 300); testFrame.setVisible(true); testFrame.ShowDialog(); } }); } } Works fine with my JDK & system.  Thanks PhiLho that Sun bug report gave me the solution. The owner (parent frame) must be non-null and showing. For the record here's a modified version of my example code that does show a hand cursor. import javax.swing.*; import java.awt.*; public class CursorTest { public static void main(String[] args) { JLabel label = new JLabel(""Move mouse here for hand cursor""); label.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); JOptionPane pane = new JOptionPane(label); pane.setOptions(new Object[]{""OK""}); JFrame parent = new JFrame(); parent.setVisible(true); JDialog dialog = pane.createDialog(parent ""Test Dialog""); dialog.setModal(false); dialog.setVisible(true); } } non null? What variable that you gave a null anyway? ~ sorry I'm trying to understand ur thread... :("
1065,A,"How does Swing handle consecutive changes to the same component? I'm a little confused about the Swing painting model. Suppose that I have a JComponent comp and I do something like: c.setBackground(Color.RED); c.setBackground(Color.YELLOW); Obviously the end result is that the color is yellow. How does Swing handle this? Does the first call trigger an immediate repaint so there'll be a short flicker of red before the yellow? Is this sequence significantly slower than just a paint of yellow? If I was running this from outside the Swing Event thread I would assume that in most cases (though a race condition is possible) by the time the Swing EDT comes visiting the property is already set to yellow so there'll never be any red painted. However my understanding is that I should make these calls from inside a Runnable in the Swing EDT. Is that correct? In that case it would seem like the EDT would have to fully perform each change without any ""lookahead""? First of all you should not make such calls outside of EDT. The results can be unpredictable. Since all Swing components are double-buffered you will see no flicker when doing this. In addition to that all consecutive repaint requests are joined into one when possible. Overall you shouldn't see any issues at all when doing this as long as it is done on EDT  The area of the window is marked dirty immediately. A paint request will later come back on the EDT. The OS or the event queue mechanism (or even the component) may merge repaint events (strictly a quality of implementation matter but in practice repaints in the same window will be merged even if they do not intersect). Methods on Swing components should be called on the EDT. The Event Dispatch Thread belongs to AWT not Swing. Tom I'm a little confused. If I am running these two commands inside an invokeLater() or an invokeAndWait() doesn't each one of them occur immediately? Or does Swing add extra invokeLaters() with its own instructions on the EDT? Also is the EDT and the AWT dispatch thread the same thing? if you are running inside invokeLater the whole block of code (in Runnable) will be executed on EDT. See my response above If you use `invokeLater`/`invokeAndWait` the command get queued and executed on the same thread as the paints. `invokeLater`/`invokeAndWait` just add an `InvocationEvent` onto the AWT `EventQueue`."
1066,A,Unit testing a Swing component I am writing a TotalCommander-like application. I have a separate component for file list and a model for it. Model support listeners and issues a notification for events like CurrentDirChanged etc. in following manner:  private void fireCurrentDirectoryChanged(final IFile dir) { if (SwingUtilities.isEventDispatchThread()) for (FileTableEventsListener listener : tableListeners) listener.currentDirectoryChanged(dir); else { SwingUtilities.invokeLater(new Runnable() { public void run() { for (FileTableEventsListener listener : tableListeners) listener.currentDirectoryChanged(dir); } }); } } I've written a simple test for this:  @Test public void testEvents() throws IOException { IFile testDir = mockDirectoryStructure(); final FileSystemEventsListener listener = context.mock(FileSystemEventsListener.class); context.checking(new Expectations() {{ oneOf(listener).currentDirectoryChanged(with(any(IFile.class))); }}); FileTableModel model = new FileTableModel(testDir); model.switchToInnerDirectory(1); } This does not work because there is no EventDispatchThread. Is there any way to unit test this inside the headless build? unit-testing java swing jmock I think the problem with testing is revealing a problem with the code. It shouldn't really be the model's job to decide whether it's running in the dispatch thread that's too many responsibilities. It should just do its notification job and let a calling component decide whether to call it directly or to invokeLater. That component should be in the part of the code that knows about Swing threads. This component should only know about files and such.  I've only been working with jMock for two days... so please excuse me if there is a more elegant solution. :) It seems like your FileTableModel depends on SwingUtilities... have you considered mocking the SwingUtilities that you use? One way that smells like a hack but would solve the problem would be to create an interface say ISwingUtilities and implement a dummy class MySwingUtilities that simply forwards to the real SwingUtilities. And then in your test case you can mock up the interface and return true for isEventDispatchThread. @Test public void testEventsNow() throws IOException { IFile testDir = mockDirectoryStructure(); final ISwingUtilities swingUtils = context.mock( ISwingUtilities.class ); final FileSystemEventsListener listener = context.mock(FileSystemEventsListener.class); context.checking(new Expectations() {{ oneOf( swingUtils ).isEventDispatchThread(); will( returnValue( true ) ); oneOf(listener).currentDirectoryChanged(with(any(IFile.class))); }}); FileTableModel model = new FileTableModel(testDir); model.setSwingUtilities( swingUtils ); // or use constructor injection if you prefer model.switchToInnerDirectory(1); } This is basically how we do it. We replace SwingUtilities with OurSwingUtilities.getInstance() and then in tests we have an alternative implementation (we don't use jMock for it because a lot of tests can more conveniently share a single class.) We do this for SwingWorker.execute() as well as a whole lot of utilities which are static in the Java library.  Look this http://code.google.com/p/fest/ Sorry not to accept your answer but I don't really want to test GUI I only want to test my model without problems. Looks interesting.  Check the uispec4j project. That's what I use to test my UIs. www.uispec4j.org  Note generally speaking unit testing on UI stuff is always difficult because you have to mock out a lot of stuff which is just not available. Therefore the main aim when developing applications (of any type) is always to try to separate UI stuff from the main application logic as much as possible. Having strong dependencies here make unit testing really hard a nightmare basically. This is usually leveraged by using patterns like a MVC kind of approach where you mainly test your controller classes and your view classes do nothing than constructing the UI and delegating their actions and events to the controllers. This separates responsibilities and makes testing easier. Moreover you shouldn't necessarily test things which are provided by the framework already such as testing whether events are correctly fired. You should just test the logic you're writing by yourself. I wrote this co and I want to test that it fires events when it should and with correct parameters. I guess what I am doing wrong here is to ensure GUI thread inside a model. Model is not a Swing component it does not have to fire events inside a GUI thread. Am I thinking correctly here?
1067,A,"Editable JTable Tutorial Are there any good books or website that go over creating a JTable? I want to make one column editable. I would like to actually put a inherited JCheckBox component (that we created here) into one of the table columns instead of just having the table put JCheckBox in based on it being an editable boolean field. I have the JFC Swing Tutorial Second Edition book but I just would like to know if there are other examples I could look at and learn how to deal with the tables better. The book seems to just take the java 'trail' online and put it in the book. I am re-reading the stuff though just curious if anyone has found something that might help out more. This tutorial from the java lobby is easy to follow. The online Swing trail for JTable that you reference indicates that it has been updated. Did you scan through the whole thing for possible better (isn't newer always better) information?  The class you want to look into extending to create your own behavior is DefaultTableModel. That will allow you to define your own behavior. A decent tutorial can be found on sun's site. yeah thats the trail I am currently looking at :) We have extended AbstractTableModel here before and I know I have to override getColumnClass & isCellEditable and all that I am just having trouble grasping dealing with all this on editable cells :(  If you are trying to use a simple JTable with 1 column editable and you know the column location you could always use default table model and overload the isCellEditable call. something like myTable.setModel(new DefaultTableModel(){ @Override public boolean isCellEditable(int row int column) { if (column == x) { return true; } else return false; } }); And for the check box create a renderer class MyCheckBoxRenderer extends JCheckBox implements TableCellRenderer  To make a column editable you have to override the isCellEditable method in the TableModel. Creating a TableModel is fairly easy if you inherit AbstractTableModel and I'd recommend it for all but the most simple JTables. However adapting the TableModel is only part of what you need to do. To actually get a custom component in the JTable you need to set a custom cell renderer. To use an interactive custom component you need to set a custom cell editor. In some cases it's enough to use slightly modificated versions of the default classes for this. Editors If you already have got a custom component is easily done using delegation: Create a new class implementing TableCellEditor and return a new instance of the component in the getCellEditorComponent method. The paramaters to this method include the current value as well as the cell coordinates a link back to the table and wether or not the cell is selected. The TableCellEditor also has a method that is called when the user commits a change to the cell contents (where you can validate user input and adjust the model) or cancels an edit. Be sure to call the stopEditing() method on your editor if you ever programmatically abort editing otherwise the editor component will remain on screen -- this once took me like 2 hours to debug. Note that within a JTable editors and only editors receive events! Displaying a button can be done using a renderer. But to get a functioning button you need to implement an editor with the correct EventListeners registered. Registering a listener on a renderer does nothing. Renderers Implementing a renderer is not strictly necessary for what you describe in your question but you typically end up doing it anyway if only for minor modifications. Renderers unlike editors are speed critical. The getTableCellRendererComponent of a renderer is called once for every cell in the table! The component returned by a renderer is only used to paint the cell not for interaction and thus can be ""reused"" for the next cell. In other words you should adjust the component (e.g. using setText(...) or setFont(...) if it is a TextComponent) in the renderer you should not instantiate a new one -- that's an easy way to cripple the performance. Caveats Note that for renderers and editors to work you need to tell the JTable when to use a certain renderer/editor. There are basically two ways to do this. You can set the default cell renderer/editor for a certain type using the respective JTable methods. For this way to work your TableModel needs to return exactly this type in the getColumnClass(...) method! The default table model will not do this for you it always returns Object.class. I'm sure that one has stumped a lot of people. The other way to set the editor/renderer is by explicitly setting it on the column itself that is by getting the TableColumn via the getTableColumn(...) method of the JTable. This is a lot more elaborate however it's also the only way to have two different renderers/editors for a single class. E.g. your model might have two columns of class String which are rendered in entirely different ways maybe once using a JLabel/DefaultRenderer and the other using a JButton to access a more elaborate editor. JTable with its custom renderers and editors is extremely versatile but it is also a lot to take in and there are a lot of things to do wrong. Good luck! How to Use Tables in The Swing Tutorial is mandatory reading for anyone customising JTables. In particular read and reread Concepts: Editors and Renderers because it typically takes a while for it to ""click"". The examples on custom renderers and editors are also very worthwhile. A couple years late but great answer. Thanks! wow lots of info. thanks.  Some useful classes are: Package javax.swing.table : TableModel - Interface for a tablemodel AbstractTableModel - Nice class to extend for creating your own table with custom data structures DefaultTableModel - Default table model which can deal with arrays[] and Vectors To disable editing on any cell you need to override the isCellEditable(int row int col) method"
1068,A,"Java: Linebreaks in JLabels? I'm trying to make a Swing JLabel with multiple lines of text. It's added just fine but the line breaks don't come through. How do I do this? Alternatively can I just specify a maximum width for a JLabel and know that the text would wrap like in a div?  private void addLegend() { JPanel comparisonPanel = getComparisonPanel(); //this all displays on one line JLabel legend = new JLabel(""MMM FFF MMM FFFO O OOM M MMMM.\nMMM FFF MMM FFFO O OOM M MMMM.\nMMM FFF MMM FFFO O OOM M MMMM.\n""); comparisonPanel.add(legend); } You can get automatic line break if you set the paragraph width in html.  label.setText(""<html><p style=\""width:100px\"">""+paragraph+""</p></html>"");  By default Swing does not wrap text. If you specify a size on the JLabel it will only paint the part of the text that fits and then add ""..."" to the end. As suggested you can use HTML to enable line wrapping. However I've actually created a custom Swing UI delegate not long ago to achieve this and even more: MultiLineLabelUI. It will wrap your text to fit the available space and also respect hard line breaks. If you choose to try it out it is as simple as: JLabel label = new JLabel(""Text that'll wrap if necessary""); label.setUI(MultiLineLabelUI.labelUI); Or alternatively use the custom MultiLineLabel class that in addition to wrapping text supports vertical and horizontal text alignment. Internally you use HTML too? @Pacerier: No couldn't do that because I needed to paint effects on the wrapped text. I guess you could say it's breaking the text in similar ways as a JTextArea.  Use HTML in setText e.g. myLabel.setText(""<html><body>with<br>linebreak</body></html>""); Or if you want it more dynamically then you can use the width css or width attribute inside the html see [HERE](http://stackoverflow.com/questions/2420742/make-a-jlabel-wrap-its-text-by-setting-a-max-width/3194997#3194997)  What about using the wrapping feature in a JTextArea?  String text = ""some really long string that might need to""+ ""be wrapped if the window is not wide enough""; JTextArea multi = new JTextArea(text); multi.setWrapStyleWord(true); multi.setLineWrap(true); multi.setEditable(false); JLabel single = new JLabel(text); JPanel textpanel = new JPanel(new GridLayout(21)); textpanel.add(multi); textpanel.add(single); JFrame frame = new JFrame(); frame.add(textpanel); frame.pack(); frame.setVisible(true); Nice idea but there is only one drawback: Formatted text is not possible.  Simpleuse HTML. Java Swing components though does not provide a 'fantastic' support for the HTML you can use it for such simple purposes. label.setText(""<html>This is first line.<br/>This is second line.</html>"");  You can put HTML inside of a JLabel and use the linebreak tag to achieve this.  I did not manage to specify a maximum width for a label but you can specify a concrete width. By measuring the current width of a JLabel we can only apply the new fixed with if the JLabels's width is higher that our maxWidth: JLabel label = new JLabel(""<html>"" + myVeryLongMessage + ""<html>""); int maxWidth = 400; Dimension size = label.getPreferredSize(); if (size.width > maxWidth) { // Estimate the number of lines int lineCount = (int) Math.ceil(((double) size.width) / maxWidth); lineCount += 1; // Add one extra line as reserve size.width = maxWidth; // Apply the maximum width // Increase the height so that all lines will be visible size.height *= lineCount; label.setPreferredSize(size); }"
1069,A,"can't run swing from the command line i use the command line in windows to compile and then execute my java programs. i've gone to http://java.sun.com/docs/books/tutorial/uiswing/start/compile.html and tried compiling the HelloWorldSwing.java class. it worked but when i try ""java HelloWorldSwing"" it gives me a bunch of erros and says something along the lines of Exception in thread ""main"" java.lang.NoClassDefFoundError: HelloWorldSwing (wrong name: start/HelloWorldSwing) i try running with java start/HelloWorldSwing and it says noClassDefFoundError. i get no errors with javac either. here's the code from the tutorial: import javax.swing.*; public class HelloWorldSwing { /** * Create the GUI and show it. For thread safety * this method should be invoked from the * event-dispatching thread. */ private static void createAndShowGUI() { //Create and set up the window. JFrame frame = new JFrame(""HelloWorldSwing""); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //Add the ubiquitous ""Hello World"" label. JLabel label = new JLabel(""Hello World""); frame.getContentPane().add(label); //Display the window. frame.pack(); frame.setVisible(true); } public static void main(String[] args) { //Schedule a job for the event-dispatching thread: //creating and showing this application's GUI. javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { createAndShowGUI(); } }); } } EDIT: used javaw window pops up ""a java exception has occurred"" another window ""error: could not find the main class. error: a jni error has occurred please check your installation and try again."" never had any problems running any java programs am i missing something? is there a way to know what it is? i'm also running the command in the same path where the .java and .class are. there is no folder start in the path where i compiled the program. EDIT2 I tried both start/HelloWorldSwing and HelloWorldSwing with java. I don't get any errors with javac also. I get 2 pop up windows with the messages I've typed previously when I use javaw and java gives me the NoClassDefFoundException then talks about the ClassLoaders and whatnot. EDIT3 I got it to work by removing the ""package start;"" line. what would i have to do to make it work with that? javaw also works now that I removed the package line. Could you paste the output of your console starting where you type ""javac etc etc"" continuing where you type javac etc.etc ? The code that you linked to is not the same as the code that you included in your question. It has this line at the top: package start; In Java the package structure must be mirrored by the directory structure. So if your classes are in a package called 'start' the compiled class files must be in a directory called 'start'. So make sure that HelloWorldSwing.class is in the 'start' directory and run the following form the parent directory: java start.HelloWorldSwing  Yep. That page has a slight bug: The class uses a package but in the run instructions the package is not used You can do two things: a) Drop the package name (delete the line pacakge start;) and run as indicated: Or b) Leave the package start; line in the code and append the -d option to javac and use the full class name as follows: I hope this helps.  Just add a line: import java.awt.*;  Try this: java HelloWorldSwing Rather than: java start/HelloWorldSwing The argument to the java compiler ( javac ) is a file ( that's why start/HelloWorldSwing.java probably worked ) but the argument to the Java interpreter ( java ) is a class name. That's why you don't append the .class in the command line and since there is no class named start/HelloWorldSwing You get that error message ( NoClassDefFoundError ) that reads ""There is not class definition found with that name ). To keep thing easier compile and run your first programs from the same directory where your .java files are. He did; see the first paragraph of the question. @mmyers. I didn't noticed.  Tried the code works fine make sure your in the same directory as the Java file and do javac HelloWorldSwing.java java HelloWorldSwing  Where are you invoking the java command from? From your description HelloWorldSwing.class is in the folder ""start"" but is not in a package. This is likely the source of the error. Try: cd start java HelloWorldSwing EDIT: The code from the tutorial does have a ""package start;"" declaration in it. Did you remove it? If not put HelloWorldSwing into the folder ""start"" and run java start.HelloWorldSwing from the current folder. See also the package tutorial. Not if the class contains a package directive. @Pourquoi Litytestdata: What doesn't happen? @mmyers:Yeap probably the error is there in the start package. :)"
1070,A,"How to draw a rectangle on a java applet using mouse drag event and make it stay I have my program that can draw rectangles. I have two problems I can't solve. After I draw the rectangle it won't stay. The only code I have that clears the canvas in under paint repaint is only called on mouse drag. Why when I mouse release or mouse move does my canvas clear. The second thing isn't as much a problem but something I can't figure out when either the height or width of my rectangle is negative the rectangle is filled in black. package pracpapp2; import java.awt.*; import java.awt.event.*; import javax.swing.*; public class MouseTracker4July extends JFrame implements MouseListener MouseMotionListener { private static final long serialVersionUID = 1L; private JLabel mousePosition; int x y; int x1 x2 y1 y2; int w h; private JLabel recStart; private JLabel recStop; private JLabel cords; // set up GUI and register mouse event handlers public MouseTracker4July() { super( ""Rectangle Drawer"" ); mousePosition = new JLabel(); mousePosition.setHorizontalAlignment(SwingConstants.CENTER); getContentPane().add( mousePosition BorderLayout.CENTER ); JLabel text1 = new JLabel(); text1.setText( ""At the center the mouse pointer's coordinates will be displayed."" ); getContentPane().add( text1 BorderLayout.SOUTH ); recStart = new JLabel(); getContentPane().add(recStart BorderLayout.WEST); recStop = new JLabel(); getContentPane().add(recStop BorderLayout.EAST); cords = new JLabel(); getContentPane().add(cords BorderLayout.NORTH); addMouseListener( this ); // listens for own mouse and addMouseMotionListener( this ); // mouse-motion events setSize( 800 600 ); setVisible( true ); } // MouseListener event handlers // handle event when mouse released immediately after press public void mouseClicked( MouseEvent event ) { mousePosition.setText( ""Clicked at ["" + event.getX() + "" "" + event.getY() + ""]"" ); } // handle event when mouse pressed public void mousePressed( MouseEvent event ) { mousePosition.setText( ""Pressed at ["" +(x1 = event.getX()) + "" "" + (y1 = event.getY()) + ""]"" ); recStart.setText( ""Start: ["" + x1 + "" "" + y1 + ""]"" ); } // handle event when mouse released after dragging public void mouseReleased( MouseEvent event ) { mousePosition.setText( ""Released at ["" +(x2 = event.getX()) + "" "" + (y2 = event.getY()) + ""]"" ); recStop.setText( ""End: ["" + x2 + "" "" + y2 + ""]"" ); } // handle event when mouse enters area public void mouseEntered( MouseEvent event ) { mousePosition.setText( ""Mouse entered at ["" + event.getX() + "" "" + event.getY() + ""]"" ); } // handle event when mouse exits area public void mouseExited( MouseEvent event ) { mousePosition.setText( ""Mouse outside window"" ); } // MouseMotionListener event handlers // handle event when user drags mouse with button pressed public void mouseDragged( MouseEvent event ) { mousePosition.setText( ""Dragged at ["" + (x = event.getX()) + "" "" + (y = event.getY()) + ""]"" ); // call repaint which calls paint repaint(); } // handle event when user moves mouse public void mouseMoved( MouseEvent event ) { mousePosition.setText( ""Moved at ["" + event.getX() + "" "" + event.getY() + ""]"" ); } public void paint(Graphics g) { super.paint(g); // clear the frame surface g.drawString(""Start Rec Here"" x1 y1); g.drawString(""End Rec Here"" x y); w = x1 - x; h = y1 - y; w = w * -1; h = h * -1; g.drawRect(x1 y1 w h); cords.setText( ""w = "" + w + "" h = "" + h); } public static void main( String args[] ) { MouseTracker4July application = new MouseTracker4July(); application.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); } } // end class MouseTracker If you don't care some display information just delete every ""mousePosition.setText(...)"" in the mouse listeners they will result the unnecessary repaint() callings. Then add two fields: ""int rx ry;"" add/modify several methods as below:  public void mouseDragged(MouseEvent event) { // mousePosition.setText(""Dragged at ["" + (x = event.getX()) + "" "" // + (y = event.getY()) + ""]""); // call repaint which calls paint x = event.getX(); y = event.getY(); compRectPos(); repaint(); } private void compRectPos() { rx = x1; ry = y1; w = x - x1; h = y - y1; if ( w < 0) rx += w; if (h < 0) ry += h; w = Math.abs(w); h = Math.abs(h); } public void paint(Graphics g) { super.paint(g); // clear the frame surface g.drawString(""Start Rec Here"" x1 y1); g.drawString(""End Rec Here"" x y); g.drawRect(rx ry w h); cords.setText(""w = "" + w + "" h = "" + h); } The only problem I found is that the rectangle doesn't appear when first drawn.  Read up on these two Custom Painting Approaches. One approach is described above and the second approach shows how to use a BufferedImage. The example used for both approaches allows you to add multiple Rectangles to the frame.  You need to store your drawn items in some data structure and ensure that each item in the structure is painted to the canvas on repaint. Also you need to add repaint to each of your mouse events. Like this: (this assumes you want to keep ALL rect's) - you can go with a single rect by eliminating the arraylist and replacing with a single rect instance. import java.awt.BorderLayout; import java.awt.Graphics; import java.awt.Rectangle; import java.awt.event.MouseEvent; import java.awt.event.MouseListener; import java.awt.event.MouseMotionListener; import java.util.ArrayList; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.SwingConstants; public class MouseTracker4July extends JFrame implements MouseListener MouseMotionListener { private static final long serialVersionUID = 1L; private final JLabel mousePosition; int x1 x2 y1 y2; int w h; private final JLabel recStart; private final JLabel recStop; private final JLabel cords; // set up GUI and register mouse event handlers private final ArrayList< Rectangle > rectangles = new ArrayList< Rectangle >(); private boolean isNewRect = true; public MouseTracker4July() { super( ""Rectangle Drawer"" ); this.mousePosition = new JLabel(); this.mousePosition.setHorizontalAlignment( SwingConstants.CENTER ); getContentPane().add( this.mousePosition BorderLayout.CENTER ); JLabel text1 = new JLabel(); text1.setText( ""At the center the mouse pointer's coordinates will be displayed."" ); getContentPane().add( text1 BorderLayout.SOUTH ); this.recStart = new JLabel(); getContentPane().add( this.recStart BorderLayout.WEST ); this.recStop = new JLabel(); getContentPane().add( this.recStop BorderLayout.EAST ); this.cords = new JLabel(); getContentPane().add( this.cords BorderLayout.NORTH ); addMouseListener( this ); // listens for own mouse and addMouseMotionListener( this ); // mouse-motion events setSize( 800 600 ); setVisible( true ); } // MouseListener event handlers // handle event when mouse released immediately after press public void mouseClicked( final MouseEvent event ) { this.mousePosition.setText( ""Clicked at ["" + event.getX() + "" "" + event.getY() + ""]"" ); repaint(); } // handle event when mouse pressed public void mousePressed( final MouseEvent event ) { this.mousePosition.setText( ""Pressed at ["" + ( this.x1 = event.getX() ) + "" "" + ( this.y1 = event.getY() ) + ""]"" ); this.recStart.setText( ""Start: ["" + this.x1 + "" "" + this.y1 + ""]"" ); repaint(); } // handle event when mouse released after dragging public void mouseReleased( final MouseEvent event ) { this.mousePosition.setText( ""Released at ["" + ( this.x2 = event.getX() ) + "" "" + ( this.y2 = event.getY() ) + ""]"" ); this.recStop.setText( ""End: ["" + this.x2 + "" "" + this.y2 + ""]"" ); Rectangle rectangle = getRectangleFromPoints(); this.rectangles.add( rectangle ); this.w = this.h = this.x1 = this.y1 = this.x2 = this.y2 = 0; this.isNewRect = true; repaint(); } private Rectangle getRectangleFromPoints() { int width = this.x1 - this.x2; int height = this.y1 - this.y2; Rectangle rectangle = new Rectangle( width < 0 ? this.x1 : this.x2 height < 0 ? this.y1 : this.y2 Math.abs( width ) Math.abs( height ) ); return rectangle; } // handle event when mouse enters area public void mouseEntered( final MouseEvent event ) { this.mousePosition.setText( ""Mouse entered at ["" + event.getX() + "" "" + event.getY() + ""]"" ); repaint(); } // handle event when mouse exits area public void mouseExited( final MouseEvent event ) { this.mousePosition.setText( ""Mouse outside window"" ); repaint(); } // MouseMotionListener event handlers // handle event when user drags mouse with button pressed public void mouseDragged( final MouseEvent event ) { this.mousePosition.setText( ""Dragged at ["" + ( this.x2 = event.getX() ) + "" "" + ( this.y2 = event.getY() ) + ""]"" ); // call repaint which calls paint repaint(); this.isNewRect = false; repaint(); } // handle event when user moves mouse public void mouseMoved( final MouseEvent event ) { this.mousePosition.setText( ""Moved at ["" + event.getX() + "" "" + event.getY() + ""]"" ); repaint(); } @Override public void paint( final Graphics g ) { super.paint( g ); // clear the frame surface g.drawString( ""Start Rec Here"" this.x1 this.y1 ); g.drawString( ""End Rec Here"" this.x2 this.y2 ); Rectangle newRectangle = getRectangleFromPoints(); if ( !this.isNewRect ) { g.drawRect( newRectangle.x newRectangle.y newRectangle.width newRectangle.height ); } for( Rectangle rectangle : this.rectangles ) { g.drawRect( rectangle.x rectangle.y rectangle.width rectangle.height ); } this.cords.setText( ""w = "" + this.w + "" h = "" + this.h ); } public static void main( final String args[] ) { MouseTracker4July application = new MouseTracker4July(); application.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); } } // end class MouseTracker This is my first time programming graphically. How could I store the entire rectangle. I already have the rectangle parts (x y w h) stored as int then the rectangle is being drawn but it's my integers are constantly updating I'm not sure how to store them to something static that can be held on the canvas. Custom painting should be done on a JPanel or JComponent not on the actual JFrame and the paintComponent() method should be overriden not the paint() method. @camickr - I agree but for sake of understanding the problem I don't know that it will help Tyler in this insance (in the long run yes). @Tyler: Look at the example I reposted. It has an arraylist of rect's to draw - this will allow the rect's to be stored. If you only want 1 rect then get rid of the list and keep a single rect. OR - you can keep just the xywh stuff - depends on what you want to do. Thanks I checked out your example I know it works I'm just trying to figure out how everything works (new java programmer). Anyways I appreciate the help but it's late and code is starting to melt my brain. I'll hit it back up tomorrow. Thanks again.  Ok after re-reading your question it seems you could care less to have multiple rectangles :) Here is a solution with only one at a time (which is close to what you had to begin with): import java.awt.BorderLayout; import java.awt.Graphics; import java.awt.event.MouseEvent; import java.awt.event.MouseListener; import java.awt.event.MouseMotionListener; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.SwingConstants; public class MouseTracker4July extends JFrame implements MouseListener MouseMotionListener { private static final long serialVersionUID = 1L; private final JLabel mousePosition; int x1 x2 y1 y2; int x y w h; private final JLabel recStart; private final JLabel recStop; private final JLabel cords; // set up GUI and register mouse event handlers boolean isNewRect = true; public MouseTracker4July() { super( ""Rectangle Drawer"" ); this.mousePosition = new JLabel(); this.mousePosition.setHorizontalAlignment( SwingConstants.CENTER ); getContentPane().add( this.mousePosition BorderLayout.CENTER ); JLabel text1 = new JLabel(); text1.setText( ""At the center the mouse pointer's coordinates will be displayed."" ); getContentPane().add( text1 BorderLayout.SOUTH ); this.recStart = new JLabel(); getContentPane().add( this.recStart BorderLayout.WEST ); this.recStop = new JLabel(); getContentPane().add( this.recStop BorderLayout.EAST ); this.cords = new JLabel(); getContentPane().add( this.cords BorderLayout.NORTH ); addMouseListener( this ); // listens for own mouse and addMouseMotionListener( this ); // mouse-motion events setSize( 800 600 ); setVisible( true ); } // MouseListener event handlers // handle event when mouse released immediately after press public void mouseClicked( final MouseEvent event ) { this.mousePosition.setText( ""Clicked at ["" + event.getX() + "" "" + event.getY() + ""]"" ); repaint(); } // handle event when mouse pressed public void mousePressed( final MouseEvent event ) { this.mousePosition.setText( ""Pressed at ["" + ( this.x1 = event.getX() ) + "" "" + ( this.y1 = event.getY() ) + ""]"" ); this.recStart.setText( ""Start: ["" + this.x1 + "" "" + this.y1 + ""]"" ); this.isNewRect = true; repaint(); } // handle event when mouse released after dragging public void mouseReleased( final MouseEvent event ) { this.mousePosition.setText( ""Released at ["" + ( this.x2 = event.getX() ) + "" "" + ( this.y2 = event.getY() ) + ""]"" ); this.recStop.setText( ""End: ["" + this.x2 + "" "" + this.y2 + ""]"" ); repaint(); } // handle event when mouse enters area public void mouseEntered( final MouseEvent event ) { this.mousePosition.setText( ""Mouse entered at ["" + event.getX() + "" "" + event.getY() + ""]"" ); repaint(); } // handle event when mouse exits area public void mouseExited( final MouseEvent event ) { this.mousePosition.setText( ""Mouse outside window"" ); repaint(); } // MouseMotionListener event handlers // handle event when user drags mouse with button pressed public void mouseDragged( final MouseEvent event ) { this.mousePosition.setText( ""Dragged at ["" + ( this.x2 = event.getX() ) + "" "" + ( this.y2 = event.getY() ) + ""]"" ); // call repaint which calls paint repaint(); this.isNewRect = false; repaint(); } // handle event when user moves mouse public void mouseMoved( final MouseEvent event ) { this.mousePosition.setText( ""Moved at ["" + event.getX() + "" "" + event.getY() + ""]"" ); repaint(); } @Override public void paint( final Graphics g ) { super.paint( g ); // clear the frame surface g.drawString( ""Start Rec Here"" this.x1 this.y1 ); g.drawString( ""End Rec Here"" this.x2 this.y2 ); int width = this.x1 - this.x2; int height = this.y1 - this.y2; this.w = Math.abs( width ); this.h = Math.abs( height ); this.x = width < 0 ? this.x1 : this.x2; this.y = height < 0 ? this.y1 : this.y2; if ( !this.isNewRect ) { g.drawRect( this.x this.y this.w this.h ); } this.cords.setText( ""w = "" + this.w + "" h = "" + this.h ); } public static void main( final String args[] ) { MouseTracker4July application = new MouseTracker4July(); application.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); } } // end class MouseTracker That's exactly what I needed I knew I was close I just couldn't figure out how to finish the thing. The math.abs is cool because it keeps my width and height positive . Thanks a ton. One more question is all the ""this."" good form or personal preference? I'm just curious because since I'm only using one JFrame isn't it redundant? Thanks again. There is a lot of flicker every time I drag the mouse around which is caused by overriding the paint() method of the frame as I suggested earlier. Personally I would say that the 'this' usage is a bit of preference - there are others who would militantly disagree. Glad to help."
1071,A,"Rotate a Swing JLabel I am currently trying to implement a Swing component inheriting from JLabel which should simply represent a label that can be oriented vertically. Beginning with this: public class RotatedLabel extends JLabel { public enum Direction { HORIZONTAL VERTICAL_UP VERTICAL_DOWN } private Direction direction; I thought it's be a nice idea to just alter the results from getPreferredSize():  @Override public Dimension getPreferredSize() { // swap size for vertical alignments switch (getDirection()) { case VERTICAL_UP: case VERTICAL_DOWN: return new Dimension(super.getPreferredSize().height super .getPreferredSize().width); default: return super.getPreferredSize(); } } and then simply transform the Graphics object before I offload painting to the original JLabel:  @Override protected void paintComponent(Graphics g) { Graphics2D gr = (Graphics2D) g.create(); switch (getDirection()) { case VERTICAL_UP: gr.translate(0 getPreferredSize().getHeight()); gr.transform(AffineTransform.getQuadrantRotateInstance(-1)); break; case VERTICAL_DOWN: // TODO break; default: } super.paintComponent(gr); } } It seems to work—somehow—in that the text is now displayed vertically. However placement and size are off: Actually the width of the background (orange in this case) is identical with the height of the surrounding JFrame which is ... not quite what I had in mind. Any ideas how to solve that in a proper way? Is delegating rendering to superclasses even encouraged? missed ""("" in `gr.translate0 getPreferredSize().getHeight());` I got it to work now with a little help of a coworker. Basically I now have a field that indicates whether to swap height/width which is only active for the time when the original JLabel does its painting. private boolean needsRotate; @Override public Dimension getSize() { if (!needsRotate) { return super.getSize(); } Dimension size = super.getSize(); switch (getDirection()) { case VERTICAL_DOWN: case VERTICAL_UP: return new Dimension(size.height size.width); default: return super.getSize(); } } @Override public int getHeight() { return getSize().height; } @Override public int getWidth() { return getSize().width; } @Override protected void paintComponent(Graphics g) { Graphics2D gr = (Graphics2D) g.create(); switch (getDirection()) { case VERTICAL_UP: gr.translate(0 getSize().getHeight()); gr.transform(AffineTransform.getQuadrantRotateInstance(-1)); break; case VERTICAL_DOWN: gr.transform(AffineTransform.getQuadrantRotateInstance(1)); gr.translate(0 -getSize().getWidth()); break; default: } needsRotate = true; super.paintComponent(gr); needsRotate = false; } See http://hypftier.de/dump/RotatedLabel.java – the license mentioned is a pretty liberal one modeled after the BSD (though the license text is only available in German so far). Could you provide the full class?  I think it is off because you are translating about the wrong point. the size of the object depends on what container you have this in so while your preferred size might be what you want your actual size isn't? if you have this label in the CENTER of a BorderLayout the size is always the full size of the container (minus north+south height minus east+west width) so don't you have to translate about the actual size not preferred size? Hmm ... not ... quite. Placement is a little off because the label's vertical (now horizontal) alignment is centered but the size is now exactly square. Could it be that the superclass doesn't care about my overridden getPreferredSize method and thus draws itself not in respect to my boundaries?  I've had a play with this it wasn't working very well initially because the label bounds were exactly square and caused components to the right of the label to shift and become obscured. But I then realised that it was because I am using JGoodies FormLayout. If you use this layout manager make sure you set the column size to ""preferred"" not ""default"". HTH.  I don't know if it is relevant by now But while searching for the same thing i found a very good implementation in the web http://macdevcenter.com/pub/a/mac/2002/03/22/vertical_text.html Check it out it is an implementation over the TabbedPane with vertical text See if it suites you purposes."
1072,A,What Java versions does Griffon support? I want to write a Swing application in Griffon but I am not sure what versions of Java I can support. The only reason I asked this question was to create the griffon tag. Is there a better way? According to the Griffon website 1.5 or higher. http://groovy.codehaus.org/Installing+Griffon
1073,A,"Problem with Painting in Java Swing App in Java 1.6 I'm working on a Swing application (currently running on Java 1.6 update 11) which has some intermittent paint refresh problems (e.g. there are artifacts etc.). This only happens to some users of our application but not others. After doing some research I found that setting the property sun.java2d.d3d to false may help and in fact it helped for one of our users. Now that some other users are complaining about the issue I'm thinking of setting the property to false for all users. My basic questions are the following: What exactly is the cause of this? Is it the video card? Is it the driver? Is it a bug from Sun? (such as http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6635462) Combination of all three? In other words is is best to simply turn this property off or is it affecting only certain video cards in which an update to the latest driver would fix? This issue frequently occurs when running Java inside VMWare. Are all painting and model changing operations execute on EDT (e.g. changing TableModel etc.)?  Java introduced in R6 update 10 a pipeline that renders graphics based on Direct3D. According to the release description here it supports only NVidia and ATI cards which means anyone not using those cards may have a problem. Since it is a recent innovation I would suggest that anyone using old drivers for those cards may also have problems. Upgrading a video driver will probably fix the first case but not the last. If you set sun.java2d.d3d to false the worst that can happen is that some users will not achieve the performance that they theoretically could. You will have to balance whether this is preferable to the issues that you are seeing at the moment. The user who first had the issue had an ATI Radeon XPress 200 but I did not check whether they had the latest driver. The application is a pretty ""standard"" Swing app i.e. no 3D operations or ""out of the ordinary"" paint operations. One would think that it would auto turn off for unsupported video cards assuming that were possible."
1074,A,How to expand JTree nodes (in advance) but keep them invisible I seems to me that when i call JTree.expandPath( path ) That by default all its parents are expanded as well. But what i actually want to do is set up specific invisible children to be expanded in advance. So that when a node is expanded that its complete sub-tree pops-out. I've found that internally in JTree expandedState.put(path Boolean.TRUE); records the expanded nodes but i can't get access to it. (p.s. i don't want to use reflection :) Installing listener for the expansion event would result in a lot of run-time updates beeing fired. That's why i prefer to let JTree record the expanded states. Hope that there are other ways of doing it. Any help is appreciated? Accepted the Listener solution. Option 2 Option 1 Overriding : One nasty drawBack..it is depending on the implementation of setExpandedState() private boolean cIsExpandingHidden = false; private TreePath cExpandingPath; public void expandBranchHidden(DefaultMutableTreeNode node) { TreeNode[] mPathSections = mNode.getPath(); TreePath mPath = new TreePath(mPathSections); // if (!cTree.isVisible(mPath)){ cIsExpandingHidden = true; } cExpandingPath = mPath; try{ expandPath(mPath); }finally{ cExpandingPath = null; cIsExpandingHidden = false; } } @Override public boolean isExpanded(TreePath path) { // override the questions whether the node parents of // 'the currently expanded node' to return TRUE if (cIsExpandingHidden){ if (path.isDescendant(cExpandingPath)){ return true; // just claim it doesn't need expanding } } return super.isExpanded(path); } @Override public void fireTreeExpanded(TreePath path) { // the treeUI must not to know.. bad luck for any other listeners if (!cIsExpandingHidden){ super.fireTreeExpanded(path); } } Option 2 Listener /* code where new nodes are received */ { // only if direct parent is expanded.. else expansionListener will pick it up if (cTree.isExpanded(mCreator.getParentTreeNode())){ for (TreeNode mNode : mAddNodes) { if (mNode.isDefaultExpanded()) { cTree.expandBranch(mNode); mNode.setDefaultExpanded(false); } } } } /* expansion listener */ { if (cRecursiveExpand){ return; } // walk through children expand and clear its preference cRecursiveExpand = true; IExtendedTreeNode[] mNodes = cTree.getChildrenOfCurrentNode(); for (IExtendedTreeNode mNode : mNodes) { TreeNode mTreeNode = (TreeNode)mNode; if (mTreeNode.isDefaultExpanded()){ cTree.expandBranch(mTreeNode); mTreeNode.setDefaultExpanded(false); } } cRecursiveExpand = false; } You'll have an easier time calling addTreeExpansionListener(TreeExpansionListener tel) When the treeExpanded(TreeExpansionEvent event) method in your TreeExpansionListener gets called you can check to see if you should recursively expand all children for the newly expanded TreePath. This is true but the question specifically mentions this approach and is asking if there is an alternative that would let the tree record the states vs firing lots of updates when things expand. The overhead of firing these TreeExpansionEvents is going to be very minimal and they'll only be fired when a node is expanded or collapsed. The code would likely be more concise as well. Works out pretty nice actually.. i've included the Listener solution in my question as well Is actually less time consuming :) Since i only have to visit the direct children of the newly expanded node instead of ALL incoming/created treeNodes. Still is a valid answer. Could be that he's been down my path.. Sam have you?  One easy way of doing it is subclass JTree and override the method setExpandedState(TreePath path boolean state) In this method instead of expanding all parents expand only the subpaths that you want to expand. That's exactly why the method is protected :) Ok here you go :) Although your solution is not exactly what i needed. I agree that this would be handy since it is protected but. the 'expandedState' variable is private :( But... I think i could escape its upward recursive expansion by Also overriding the 'isExpanded()' since this is used for building up the to-do stack :) So where's my upvote ;) have to test it first :) private static class MyTree extends JTree { int rows[]; public MyTree(int rows[]) { this.rows = rows; } protected void setExpandedState(TreePath path boolean state) { TreePath []paths = new TreePath[rows.length]; for (int i = 0; i < rows.length; i++) { paths[i] = this.getPathForRow(rows[i]); if (paths[i].isDescendant(path)) { super.setExpandedState(path state); } else { // do nothing } } } } Ok...now you should give me that vote :)
1075,A,Java gridlayout with empty cells I want to show the status of some files in a Java GUI. Each file has a label and a button the colour of the button represents the status of the file and clicking performs various operations. All this is working the problem is that they are not showing correctly. I want it to appear as [Label 1] [File 1] [File 2] [Label 2] [Label 3] [File 3] [File 4] [Label 4] etc. To do this I have made a panel with a GridLayout  new JPanel(new GridLayout((list.size() + 1) /2433)); This works unless there is an odd number of files. Then the grid resizes itself for example with 3 files I will get a 2x3 grid so label 2 shows on the next line. If I check for an odd number and then add 2 new JPanels after all the other controls it shows correctly but I was wondering if there is a better way of doing this. Thanks I was wondering if there is a better way of doing this. Yes use MiGLayout. Sorry not really an option. Firstly the website is blocked by my work's firewalls and I don't have the permissions to install it anyway. It would have to be something in the standard java libraries. My condolences for your working conditions...  Looking at the JavaDoc for GridLayout.setColumns it appears that not specifying the row count will cure your ills. Sets the number of columns in this layout to the specified value. Setting the number of columns has no affect on the layout if the number of rows specified by a constructor or by the setRows method is non-zero. In that case the number of columns displayed in the layout is determined by the total number of components and the number of rows specified. (my emphasis) Try this: new JPanel(new GridLayout(0433)); Thanks that solved it.
1076,A,"Reading HTML file to view in JEditorPane I have a Java program which prints to a HTML file. Another method reads in this file and prints it to the editor pane. My problem is that the color orange doesn't work. My code is as follows: print.println(""<html><p><br><font color=\""orange\"">""); When I pass this html file into the editor pane all the colors are right. Red yellow and blue all work but orange doesn't (I have also tried replacing orange with pink etc but no luck). If I change the orange to say blue it works fine. When I open it up as a HTML file on the web the text that I want in orange is in orange and works fine. Help? Also all the indenting is fine but when it gets near the end it moves to the right. For Example: abc 0 bcd 1 vde 1 def 2 ... swe 7 dfr 8 ..................................................... ert 3 Where ert 3 is the last string that needs to be printed. But it manages to fit all the text in the box. Edit: Thanks for the help for the first part. Any ideas about the bottom part? HTML in swing is not up to standard. Take a look at this component https://xhtmlrenderer.dev.java.net/  The JEditorPane does not support all the things a modern browser supports. Soon there will be a JWebPane component which will provide full WebKit-based HTML support.  Orange is not working because its not a default html word http://www.handleidinghtml.nl/divers/kleuren/schermafdrukken/16kleuren.gif show the 16 default colors. Most browsers however support other colors but java only supports HTML 3.2 read all on HTMl and swing in http://java.sun.com/docs/books/tutorial/uiswing/components/html.html Thanks for you help. Have you any idea why the indenting get messed up at the end though? It fits all of the strings in the pane but the last string is like this sampleString 4 So that it just fits on screen."
1077,A,"What is the name of the design pattern used in AWT/Swing that handles events? I have heard that there are 2 ways that we can set the PLAF in Swing. What is the real meaning of PLAF and what are those 2 ways? That question title doesn't match the question. To answer the question in your title: Observer is the design pattern that Swing employs. PLAF is a 'Pluggable Look And Feel'. Here is a reference for PLAF in Java. The title regarding the Event Listeners and the PLAF are not related. The former has to do with the processing of events - more closely associated with the C in MVC while the latter is generally associated with the View aspect of MVC. PL&F are also involved with the controller aspect hence the F. The design is not strong.  Observer Pattern. Some of the most notable implementations of this pattern: The Java Swing library makes extensive use of the observer pattern for event management. What's the real difference between Observers and standard publish subscribe? I'd say that Observer is applied to software design situations (a software design pattern) whilst publish/subscribe is more general and refers to a messaging paradigm that is commonly implemented in middleware.  PLAF = Pluggable Look and Feel. Basically the same UI can have different skins with very little work. Check out this site for a detailed description of L&F. In short there are actually 3 ways to set up your PLAF. 1) Via command line: java -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel MyApp or java -Dswing.defaultlaf=com.sun.java.swing.plaf.windows.WindowsLookAndFeel MyApp 2) Via swing.properties file in your java lib. swing.defaultlaf=com.sun.java.swing.plaf.windows.WindowsLookAndFeel 3) Programatically with either: //At the beginning of your program UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName()); //Another option UIManager.setLookAndFeel(""com.sun.java.swing.plaf.motif.MotifLookAndFeel""); //And another UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); //Or during your program - UIManager.setLookAndFeel(lnfName); SwingUtilities.updateComponentTreeUI(frame); frame.pack(); The above link also has code examples to demonstrate how to change your look and feel. Hope that helps!"
