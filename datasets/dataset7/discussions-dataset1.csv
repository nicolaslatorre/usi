313916,A,"Custom Cursor in a Swing JDialog I have a Java Swing application developed on Mac OS X 10.5 using Java 1.5. I'm trying to make a custom cursor appear when the user moves the mouse over some text in a dialog. The cursor never changes though. When I don't use a JFrame instead of a JDialog the cursor does change. But then I'll have to write all the dialog code myself. How can I get the cursor to appear? Here's the simplest code I could create to demonstrate the problem: import javax.swing.*; import java.awt.*; public class CursorTest { public static void main(String[] args) { JLabel label = new JLabel(""Move mouse here for hand cursor""); label.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); JOptionPane pane = new JOptionPane(label); pane.setOptions(new Object[]{""OK""}); JDialog dialog = pane.createDialog(null ""Test Dialog""); dialog.setVisible(true); } } Looks like it is a bug in Java 1.5: I first tried with Java 1.6.0_07 and it worked as expected (on Windows XP). Then I recompiled with Java 1.5.0_06 and indeed the cursor remains in default state. Knowing the difficulties of Java 1.6 on MacOS I see it will be hard to fix that... Bug ID: 5079694 JDialog doesn't respect setCursor They give a workaround... [EDIT] Tested workaround: public class CursorTest extends JFrame { private CursorTest() { } private void ShowDialog() { JLabel label = new JLabel(""Move mouse here for hand cursor""); label.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); JOptionPane pane = new JOptionPane(label); pane.setOptions(new Object[] { ""OK"" } ); JDialog dialog = pane.createDialog(this ""Test Dialog""); dialog.setVisible(true); } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { CursorTest testFrame = new CursorTest(); testFrame.setTitle(""Test GUI""); testFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); testFrame.setSize(500 300); testFrame.setVisible(true); testFrame.ShowDialog(); } }); } } Works fine with my JDK & system.  Thanks PhiLho that Sun bug report gave me the solution. The owner (parent frame) must be non-null and showing. For the record here's a modified version of my example code that does show a hand cursor. import javax.swing.*; import java.awt.*; public class CursorTest { public static void main(String[] args) { JLabel label = new JLabel(""Move mouse here for hand cursor""); label.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); JOptionPane pane = new JOptionPane(label); pane.setOptions(new Object[]{""OK""}); JFrame parent = new JFrame(); parent.setVisible(true); JDialog dialog = pane.createDialog(parent ""Test Dialog""); dialog.setModal(false); dialog.setVisible(true); } } non null? What variable that you gave a null anyway? ~ sorry I'm trying to understand ur thread... :(",java swing jdialog joptionpane custom-cursor
71842,A,"How can I detect from a Swing app that the PC is being shut-down? Well behaved windows programs need to allow users to save their work when they are shutting the PC down. How can I make my app detect the shutdown event? Any solution should allow the user to abort the shutdown if user selects say ""Cancel"". The normal Swing window closing hook doesn't work nor does adding a shutdown hook. On testing the methods of WindowListener (windowClosingwindowClosed etc) do not get called. The answer I have accepted requires the use of platform specific code (JNI to register for WM_QUERYENDSESSION ). Isn't this a bug on Swing? See http://forums.sun.com/thread.jspa?threadID=481807&messageID=2246870 Are you using the shutdown hook from java.lang.runtime ? Write some JNI code to WM_QUERYENDSESSION message. You can get details for this from the MSDN documentation or by googling it. If you don't want to write too much C++ code to do this I can recommend the JNA library click here. Which gives you some nice Java abstractions for C code.  Look for signal handling in java. when Windows closes it will send a signal to the application asking it to terminate most likely a sigterm see here for more about this (I am not the owner of the website)  The above seems to be the better answer. I can't find any good information on detecting window shutdown events. I guess the best possible method would be to detect weather your application is trying to close using a window closing event or the like then ask the question. http://www.javalobby.org/java/forums/t17933  how-do-i-get-my-java-application-to-shutdown-nicely-in-windows That might be of help",java swing operating-system
149153,A,"Loading animated gif from JAR file into ImageIcon I'm trying to create a ImageIcon from a animated gif stored in a jar file. ImageIcon imageIcon = new ImageIcon(ImageIO.read(MyClass.class.getClassLoader().getResourceAsStream(""animated.gif""))); The image loads but only the first frame of the animated gif. The animation does not play. If I load the animated gif from a file on the filesystem everything works as expected. The animation plays through all the of frames. So this works: ImageIcon imageIcon = new ImageIcon(""/path/on/filesystem/animated.gif""); How can I load an animated gif into an ImageIcon from a jar file? EDIT: Here is a complete test case why doesn't this display the animation? import javax.imageio.ImageIO; import javax.swing.*; public class AnimationTest extends JFrame { public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { AnimationTest test = new AnimationTest(); test.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); test.setVisible(true); } }); } public AnimationTest() { super(); try { JLabel label = new JLabel(); ImageIcon imageIcon = new ImageIcon(ImageIO.read(AnimationTest.class.getClassLoader().getResourceAsStream(""animated.gif""))); label.setIcon(imageIcon); imageIcon.setImageObserver(label); add(label); pack(); } catch (Exception e) { e.printStackTrace(); } } } You have to use getClass().getResource(imgName); to get a URL to the image file. Check out this tutorial from Real's HowTo. EDIT: Once the image is loaded you have to set the ImageObserver property to get the animation to run. I load png images just fine from the jar file using the first section of code. And the gif loads - it's just not animated. I see your problem now. See my edit for more details. setting the ImageObserver did not help in my case. It seems that ImageIO isn't reading the animated gif properly. If I use a different constructor for the ImageIcon it works. I updated the question with a complete code example. You'll need an animated.gif in your classpath.  Since this thread was just linked from a more current thread that had little to do with animated GIFs but got dragged OT I thought I'd add this trivial source that 'works for me'. import javax.swing.*; import java.net.URL; class AnimatedGifInLabel { public static void main(String[] args) throws Exception { final URL url = new URL(""http://i.stack.imgur.com/OtTIY.gif""); Runnable r = new Runnable() { public void run() { ImageIcon ii = new ImageIcon(url); JLabel label = new JLabel(ii); JOptionPane.showMessageDialog(null label); } }; SwingUtilities.invokeLater(r); } } if anyone wondered how to just load image from file here is how: url = new URL(""file"" ""localhost"" ""resources/image.gif"");  Hopefully it's not too late for this. I managed to get the animated gif inside my JPanel this way: private JPanel loadingPanel() { JPanel panel = new JPanel(); BoxLayout layoutMgr = new BoxLayout(panel BoxLayout.PAGE_AXIS); panel.setLayout(layoutMgr); ClassLoader cldr = this.getClass().getClassLoader(); java.net.URL imageURL = cldr.getResource(""img/spinner.gif""); ImageIcon imageIcon = new ImageIcon(imageURL); JLabel iconLabel = new JLabel(); iconLabel.setIcon(imageIcon); imageIcon.setImageObserver(iconLabel); JLabel label = new JLabel(""Loading...""); panel.add(iconLabel); panel.add(label); return panel; } Some points of this approach: 1. The image file is within the jar; 2. ImageIO.read() returns a BufferedImage which doesn't update the ImageObserver; 3. Another alternative to find images that are bundled in the jar file is to ask the Java class loader the code that loaded your program to get the files. It knows where things are. So by doing this I was able to get my animated gif inside my JPanel and it worked like a charm.  This reads gif animation from inputStream InputStream in = ...; Image image = Toolkit.getDefaultToolkit().createImage(org.apache.commons.io.IOUtils.toByteArray(in)); This is the definite answer. Thank you after researching this issue several hours. This also solves the problem with loading resources from Eclipse and from Maven in JARs. Thanks alot!",java swing animated-gif javax.imageio
401598,A,"How can I get the length of a JTextField's contents as the user types? JTextField has a keyTyped event but it seems that at the time it fires the contents of the cell have not yet changed. Because of that .length() is always wrong if read here. There must be a simple way of getting the length as it appears to the user after a key stroke? Use this code: public void jTextField6KeyReleased(java.awt.event.KeyEvent evt) { System.out.println(jTextField6.getText().length()); } Consider expanding your answer to explain to the asker why this achieves the desired result possibly linking to documentation. As is this is only marginally useful.  KeyEvents are low-level events that are not appropriate here [that sounds familiar]. How does the JTextField system know that a character has been typed? Through a key typed event (IIRC done through the PL&F). Does the event get dispatched to the system listener before your listener? It might or might not do. In this case you probably want to go to the Document and add a higher-level listener. With Swing it's a good idea to go for the model early - the 'J' class interfaces are incoherent. If you are intercepting input data then you probably want a custom model (or in the case of Document a DocumentFilter).  This may be related to this ""bug"" (or rather ""feature"") The listeners are notified of the key events prior to processing them to allow the listeners to ""steal"" the events by consuming them. This gives compatibility with the older awt notion of consuming events. The ""typed"" event does not mean text was entered into the component. This is NOT a bug it is intended behavior. A possible solution is to listen to an associated Document // Listen for changes in the text myTextField.getDocument().addDocumentListener(new DocumentListener() { public void changedUpdate(DocumentEvent e) { // text was changed } public void removeUpdate(DocumentEvent e) { // text was deleted } public void insertUpdate(DocumentEvent e) { // text was inserted } }); Note this works no matter how the text gets changed; via a clipboard cut/paste progamatic ""setText()"" on the TextField or the user typing into the field on the UI.  This is probably not the optimal way (and it's been a while) but in the past I have added a DocumentListener to the JTextField and on any of the events (insert update remove) I: evt.getDocument().getLength() Which returns the total length of text field's contents.",java swing events
283967,A,How do I control the display of a JComponent's Tooltip? I have a JComponent that's painting various shapes on itself. I'm detecting whenever the mouse enters one of these shapes and changing the tooltip accordingly. The problems I'm having are: The tooltip doesn't follow the mouse as the user tracks the mouse across the shape. It stays where it was first set and then only jumps whenever another shape changes the tooltip. It takes about a second for the tooltip to appear but I'd like it to appear immediately. Can someone suggest a way of getting these behaviours without writing a custom tooltip mechanism? Take a look at the ToolTipManager. You can register your component with that manager and then adjust a number of settings. Its pretty straight forward to use. That at least can solve your initialdelay problem. For your first problem you can overide the createTooltip command from your component to get a hold of the JTooltip instance. and then its easy make the position change whenever you move your mouse(aka follow your mouse) as its a subclass of the JComponent class.  To solve your first issue of where the tooltip doesn't follow the mouse if you override the getToolTipLocation(MouseEvent e) in JComponent you can return the point for where you want to the display the tooltip. The MouseEvent will allow you to retrieve the x and y.,java swing
176150,A,"Swing: Is there a way to differentiate between a user-caused ItemEvent and an application-caused one? I'm working with a combobox in a Swing-based application and I'm having a hard time figuring out what to do to differentiate between an ItemEvent that is generated from a user event vs one caused by the application. For instance Lets say I have a combobox 'combo' and I'm listening for itemStateChanged events with my ItemListener 'listener'. When either a user changes the selection to item 2 or I execute the line (pseudocode): combo.setSelection(2) .. it seems like I'm not able to tell these events apart. That said I'm no Swing expert by any means so I thought I would ask. Thanks! @awied: you also need to worry about the situation in which a user accessibility application is driving your program. I'm not following this. Why would you generate events programmatically and then want them to be different from normal events? I'm not generating events exactly. I have listeners that ""do things"" which are attached to the combobox. When the user performs the action the application works properly. However when I need to update the combo it still causes the events but I need it handled differently. You can set a flag in your code before you set the selection and then check for this flag in the listener (and unset the flag if it is set)... There may be a better way since Java 6 but this is the way I always used to do it... [Edit]: As David points out you will need to set the flag (and update the combo) in the EDT using SwingUtilities.invokeLater or similar (you should do this anyway as you are changing a UI control)  So I'm guessing you want the user selection to perform some action rather than just a plain old direct state change. This is an issue caused by limited flexibility (flexibility is always going to be limited particularly if you have flexibility in other directions). My suggestion: Firstly always go straight to using model in Swing. The widgets are way to complicated and you want different concerns to be split up. Fortunately Swing is already there with its models. A common pattern is to have delegation between models. So in this case you have the ""real"" default model that holds your data. Insert between the JComboBox and real ComboBoxModel and delegating ComboBoxModel that performs actions on state change instructions. Your application code should ignore the JComboBox and go straight for the real ComboBoxModel bypassing the delegating model. So in a diagram:  User -- JComboBox -- ActionComboBoxModel -- DefaultComboBoxModel -- Application code  Whether the user selects Item 2 or the API calls setSelection(2) the event will appear the same. The solution to your problem might be in re-thinking what you want the itemStateChanged code to do when the selection changes. Why would your app work differently under each condition? Maybe there are similarities that you can use to your advantage. Be careful when using flags. The itemStateChanged event will occur on the Event Dispatch Thread which is a different thread than the one on which you'd set the state of the flag. This would mean that using a flag may not be 100% reliable.  If you need to tell the events apart then there is probably something about your design that needs a rethink. The whole point of MVC is to decouple changes to the model from the actual mouse clicks of the user. Perhaps you should restate the question in terms of why you would ever want to differentiate between these two situations. We could then provide some guidance on a different way of achieving the goal.  The Action and Reaction law is quite clear :). If you try to react on change there is no need to distinguish between user and application. I can imagine only one use case where you need to ""distinguish"". The case where application is displaying some data. In this case you have probably data model for your application. And also there are some change listener in this model and application GUI will react by setting values to components. And also. If user selects anything into GUI component. The data model will react by changing value. In this case it is easy to set up some sort of read-only state on data model which will notify model to ignore ANY event coming from observed objects. This notification set should run in EDT and there is no problem with flagging. Small example: class ApplicationDataModel { private Flag current = Flag.RW; public void setData(ApplicationData data) { current = Flag.RO; setDataImpl(data); notifyObservers(); current = Flag.RW; } public void reaction(Event e) { if (flag = Flag.RO) return; ... } } Be careful with flagging and don't forget about threading. If you are calling setData from another thread then EDT you are going into trouble. Of course. The extraction of ApplicationData object has to be run in different thread ;). In general rethink design of your application.",java swing events combobox listeners
482041,A,"How to select first item in JPopupMenu? In the past when one made a JPopupMenu visible it's first item would get selected by default: http://weblogs.java.net/blog/alexfromsun/archive/2008/02/jtrayicon_updat.html Nowadays the default behavior is to pop up the menu without any item selected. I would like create a JPopupMenu with a single item that will pop up selected and centered under the mouse pointer. I have managed to get the item to pop up centered under the mouse but I the JMenuItem refuses to render as if it is selected. If I move the mouse out of the item and back in it selects properly. Any ideas? Here is my testcase: import java.awt.Component; import java.awt.Point; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import javax.swing.JFrame; import javax.swing.JMenuItem; import javax.swing.JPopupMenu; public class Test extends JFrame { public static void main(String[] args) { JFrame frame = new JFrame(); frame.setSize(800 600); frame.getContentPane().addMouseListener(new MouseAdapter() { @Override public void mousePressed(MouseEvent e) { if (e.isPopupTrigger()) popupTriggered(e); } @Override public void mouseReleased(MouseEvent e) { if (e.isPopupTrigger()) popupTriggered(e); } private void popupTriggered(MouseEvent e) { JPopupMenu menu = new JPopupMenu(); final JMenuItem item = new JMenuItem(""This is a JMenuItem""); menu.add(item); Point point = e.getPoint(); int x = point.x - (item.getPreferredSize().width / 2); int y = point.y - (item.getPreferredSize().height / 2); menu.show((Component) e.getSource() x y); } }); frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); frame.setVisible(true); } } I found some inconsistent behavior too (see my updated answer). Can you confirm this? I reported this as a bug to Sun. I'll let you know what they write back. Here is the associated bug report: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6799989 Secret turns out to be MenuSelectionManager.defaultManager().setSelectedPath(new MenuElement[]{menu ...}); import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import javax.swing.JFrame; import javax.swing.JMenuItem; import javax.swing.JPopupMenu; import javax.swing.MenuElement; import javax.swing.MenuSelectionManager; import javax.swing.SwingUtilities; /** * Demonstrates programmatic {@link JMenuItem} selection; * specifically how to make the first item selected by default */ public class TestPopup extends JFrame { public static void main(String[] args) { final JFrame frame = new JFrame(""TestPopup""); frame.setSize(640 480); frame.getContentPane().addMouseListener(new MouseAdapter() { @Override public void mousePressed(MouseEvent e) { if (e.isPopupTrigger()) { popupTriggered(e); } } private void popupTriggered(MouseEvent e) { final JPopupMenu menu = new JPopupMenu(); final JMenuItem item0 = new JMenuItem(""JMenuItem 0""); final JMenuItem item1 = new JMenuItem(""JMenuItem 1""); menu.add(item0); menu.add(item1); menu.pack(); // use invokeLater or just do this after the menu has been shown SwingUtilities.invokeLater(new Runnable() { public void run() { MenuSelectionManager.defaultManager().setSelectedPath(new MenuElement[]{menu item0}); } }); int x = (int) ((int) (frame.getSize().width - (menu.getPreferredSize().width / 2.)) / 2.); int y = (int) ((int) (frame.getSize().height - (menu.getPreferredSize().height / 2.)) / 2.); menu.show(frame x y); // doesn't work: //item0.setSelected(true); // doesn't work: //menu.getSelectionModel().setSelectedIndex(0); // bingo; see also MenuKeyListener / MenuKeyEvent // MenuSelectionManager.defaultManager().setSelectedPath(new MenuElement[]{menu item0}); } }); frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); frame.setLocationRelativeTo(null); frame.setVisible(true); } }  This is weird. I tried it with Windows and with Java 1.5.0_08 and even 1.6.0_07 the first Element is selected automatically as you expected it to be. So I tried it with 1.6.0_11 and it does not work any more the first element is not selected initially. Selecting the element in the selectionModel does not seem to help. One workaround (that I'm not at all proud of) is to move the mouse automatically after displaying the popup menu using the coordinates of the MouseEvent. Maybe someone's got a better idea? import java.awt.AWTException; import java.awt.Robot; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import javax.swing.JFrame; import javax.swing.JMenuItem; import javax.swing.JPopupMenu; public class SelectedPopupMenu extends JFrame { public SelectedPopupMenu() { addMouseListener(new MouseAdapter() { public void mouseClicked(final MouseEvent e) { JPopupMenu popupMenu = new JPopupMenu(); popupMenu.add(new JMenuItem(""Test-Item"")); popupMenu.add(new JMenuItem(""Test-Item-2"")); // do not care to really hit the center of the popup popupMenu.show(SelectedPopupMenu.this e.getX() - 30 e.getY() - 10); try { // shake mouse so that first element is selected even in Java 1.6.0_11 Robot robot = new Robot(); robot.mouseMove(e.getX() + 1 e.getY()); robot.mouseMove(e.getX() e.getY()); } catch (AWTException ex) { ex.printStackTrace(); } } }); } public static void main(String[] args) { JFrame frame = new SelectedPopupMenu(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(800 600); frame.setVisible(true); } }  Nowadays the default behavior is to pop up the menu without any item selected. Actually I would argue that this is the correct behavior at least in Windows. Other non-Java applications do this too. I don't think it's worth breaking this convention even if there is only one item in the menu. If you feel otherwise you can set the selection index as in sean.bright's answer. So I finally got the chance to try it out on Java 1.6.0_11 and found some inconsistent behavior: If the popup menu juts out of the parent frame the item is automatically selected; if the popup menu appears entirely within the parent frame nothing is selected. Sounds like a Swing bug which at least warrants an RFE for consistent behavior. +1: The right behavior is whatever the particular platform does for other (non-Java) programs. Zach I agree with your general assessment but unfortunately this doesn't answer my question. I *want* to break away from the conventional behavior but I'm finding it impossible to do so. I'm trying to find out if this is a Swing bug or user error. I filed a bug report with Sun: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6799989  MenuSelectionManager.defaultManager() is indeed a good solution but it won't work when you'll try to pre-select your JPopupMenu's sub menus (it will hide the parent menu). Also it messes up other keyboard navigation behaviors (you can't press left to hide the sub-menu etc.) Unfortunatelly there's no good solution for this question in Swing... My solution is ugly but sadly does the job perfect: public static void setMenuSelectedIndex(final JPopupMenu popupMenu final int index) { SwingUtilities.invokeLater(new Runnable(){public void run() { for (int i=0; i < index+1; i++) { popupMenu.dispatchEvent(new KeyEvent(popupMenu KeyEvent.KEY_PRESSED 0 0 KeyEvent.VK_DOWN '\0')); } }}); } As you can see I'm basically simulating 'Down' Keyboard Key-Presses on the popupmenu... A better solution might be not to Hardcodedly simulate VK_DOWN but to read the Popup's input map and determine which KeyCode means ""select next menu item"" - but I think most of us will get along with this hack... You might also want to look at this method which selects a menu's item once it gets selected It utilizes the previous method public static void setSelectedIndexWhenVisible(final JMenu menu final int index) { menu.getPopupMenu().addPopupMenuListener(new PopupMenuListener() { @Override public void popupMenuWillBecomeVisible(PopupMenuEvent e) { PopupUtils.setMenuSelectedIndex(menu.getPopupMenu() index); menu.getPopupMenu().removePopupMenuListener(this); } @Override public void popupMenuWillBecomeInvisible(PopupMenuEvent e) { } @Override public void popupMenuCanceled(PopupMenuEvent e) { } }); } aside from that the solution of simulating the down arrow keypress does work. er what's PopupUtils? Doesn't seem to be part of my JDK.",java swing jmenupopup
282539,A,"Java actionListener for a nameless JButton? I was wondering if there is a way to implement an action listener for a Jbutton without a name. For example I have the following for loop that creates a button for each letter of the alphabet. for (int i = 65; i < 91; i++){ alphabetPanel.add(new JButton(""<html><center>"" + (char)i)); } Is there a way that I can add an action listener for each of those buttons without getting rid of my for loop and hard coding each JButton and then creating an action listener for each? Thanks in advance Tomek Your question is a little vague. it would be trivial to modify the loop to add a listener inside the loop: ActionListener listener = something; for (int i = 65; i < 91; i++){ JButton button = new JButton(""<html><center>"" + (char)i); button.addActionListener( listener ); alphabetPanel.add(button); } if you can't modify the loop you could iterate over all of the panel's children and add listeners to any of the children that are jbuttons. also why are you using html to center the text? isn't that overkill? doesn't jbutton already center text? you could use setHorizontalAlignement(SwingConstants.CENTER) to do it too. for some reason I thought that te way action listener works is that after it is created it somehow stops there in the code until an action is performed but I guess that defeats the entire purpose of it. I changed it and it worked exactly as I wanted it to. Thanks! P.S. html was overkill  It is possible to add ActionListener to anonymous components like below: new JButton().addActionListener(new ActionListener(){ @Override public void actionPerformed(ActionEvent arg0) { // TODO your action } }); However in your case where you try to add the anonymous JButton to your panel this approach will not work because the return type of addActionListener method (which is void) will be taken instead of JButton's constructor as shown below: for (int i = 65; i < 91; i++){ alphabetPanel.add(new JButton(""<html><center>"" + (char)i).addActionListener(new ActionListener(){ @Override public void actionPerformed(ActionEvent arg0) { // TODO your action } })); } The above code complains about invalid argument for panel.add() method. So in your case you will have to create a named instance of the JButton. Hope this clarifies. Best Regards Suresh  What is the problem of doing this? for (int i = 65; i < 91; i++){ JButton button = new JButton(""<html><center>"" + (char)i)); button.addActionListener( new ButtonListener()); alphabetPanel.add(button); } ... class ButtonListener implements ActionListener { ButtonListener() { } public void actionPerformed(ActionEvent e) { //TODO: } } Also if the button's text doesn't identify the button you could set the button's name with the letter of the alphabet. button.setName((char)i)); // or button.setName(i);  By named you seem to mean storing the button instance in a local variable of your immediate method. Attempting to avoid that is likely to make your code more difficult to read. But to answer your question: The most obvious way is to use the old but newly-popular double-brace idiom. alphabetPanel.add(new JButton(""<html><center>"" + (char)i) {{ addActionListener(new ActionListener() { public void actionPerformed(ActionEvent event) { ... } }); }}); Note in this case as i is not final it will not be usable from the anonymous inner class. Either assign it to another (final) variable or reformulate the loop. Another route would be to go via an Action. (Usually I'd suggest avoiding Actions as they are jsut a poor man's Hashtable. ButtonModel is ""good"" though.) alphabetPanel.add(new JButton(new AbstractAction(""<html><center>"" + (char)i) { public void actionPerformed(ActionEvent event) { ... } })); Then of course there is the application specific library way: Form alphabetForm = new Form(alphabetPanel); for (char c='A'; c <= 'Z'; ++c) { alphabetForm.button(""<html><center>"" + c new ActionListener() { public void actionPerformed(ActionEvent event) { ... } }); }",java swing jbutton actionlistener
334397,A,"Detect whether FocusEvent of component is lost or gained I implementing a EventQueue and get notified when AWTEvents are send. I wait till instances of FocusEvent are send to the dispatchEvent methode. The FocusEvent by itself does not have a methode to ask if the focus of the component is gained or lost. The methode paramString returns a String in which the information is placed but i dont want to hack or pars the String. A contains call can give me the answer but the returnes String is no constant so it could change in the future. The paramString methode of FocusEvent is like:  switch(id) { case FOCUS_GAINED: typeStr = ""FOCUS_GAINED""; break; case FOCUS_LOST: typeStr = ""FOCUS_LOST""; break; default: typeStr = ""unknown type""; } return typeStr + (temporary ? ""temporary"" : ""permanent"") + ""opposite="" + getOppositeComponent(); Do you know another solution for this issue. What's wrong with ""evt.getID()""? It returns FOCUS_LOST or FOCUS_GAINED? when you want to implement something during the last minutes in the office you sometimes get crazy. Thanks a lot. @Markus - I know that feeling well. Glad to help.",java swing events awt
309675,A,"How can I make a swing JButton repeat its action when it is held down? I am creating an touch screen application using Swing and have a request to change one of buttons so that it will behave like a keyboard when the button is held down. (First of all I am not sure that the touch screen will allow the user to ""hold down"" the button but pretend that they can for now) I was going to go down the path of starting a loop when mousePressed was called and then ending the loop when mouseReleased was called. This will involve starting a thread and having to deal with synchronization as well as invokeLater() to get events back on the EventQueue. Is there a very simple way to do what I want? I hope I am just not seeing the API to do it. There is no simple way. I think what you outlined with a thread doing timed sleeps and polling the button is the only way. I went with the java.swing.Timer since it will automatically post back to the Swing EventQueue and that is what I am looking for. Thanks for the help.  I would do it like this: Listen to mousePressed and schedule a java.util.Timer to be launched at a later time. The Timer does the action and set itself to schedule again. Listen to mouseReleased to cancel the Timer.  javax.swing.Timer is your friend. And here's an article with some more info. @Christopher updated thanks That article link is stale.",java swing
407506,A,Is Google Web Toolkit similar to AWT and Swing I've looked breifly into GWT and like the idea that I can develop in Java and have the application compile down to HTML and JavaScript. Is the concept behind GWT and AWT and Swing the same or different? AWT and Swing are for programming stand-alone applications (and to a lesser extent applets). GWT is supposed to make programming web applications similar to stand-alone apps. I wouldn't program a non-web app using GWT.  It is programmed very similarly(patterned after Swing) and the code is 100% java (compiles with a standard Java compiler without errors) but the way it works is very different. Instead of compiling into a Java app it compiles into Javascript that is sent to your browser. This ability to program good active Javascript without actually coding Javascript and HTML is pretty nice. Also since it programs much like swing you can do stuff like adding listeners that effect other controls pretty easily. Actually GTW supports only a strict subset of Java's standard libraries. There are some libraries that aren't supported simply because they can't be represented in JavaScript. For example GWT's Random is a util class with static methods while Java 1.5 uses it as an object etc...  disclamer: While I do work at IT Mill this is just for information to the original poster. This isn't marketing spam. If you like the idea of being able to write Java and get a webpage out of that you might be interested in IT Mill Toolkit. It's a toolkit for making RIA software on top of a J2EE stack and it uses GWT heavily. One of the basic ideas are that the code generated by GWT is just as prone to client-side forging attacks as any other JS/Ajax-traffic. IT Mill Toolkit makes sure that the data is validated server-side too. The toolkit is also designed in such a way that if you are familiar to Swing you should have no problems picking it up.  GWT is very much similar to Swing in its usage of Widgets Panels and the EventListeners it provides. A different way to look at GWT is to think of Javascript and HTML as Assembly language and GWT as a sort of High level language which generates Javascript and HTML. With GWT its easy to develop desktop-like apps for the web using the same tools you would use for building a desktop app  GWT is conceptually similar to Swing but is more a replacement for JSPs than anything else. I agree. Though you still use Java on the server side.  GWT is a javascript toolkit that allows you to write the javascript in Java. The only real similarities to Swing and AWT are that they are toolkits for creating user interfaces and they use Java. The end product is different and the real purpose for using them is different. GWT gives you the ability to generate a ajax user interface for a web browser while the other 2 give you a console (or applet) java app. In my mind the real reason for using GWT is to get a quick ajax interface up for prototyping purposes. But I dont think its really production ready- ie I dont thing Google uses it in their own webapps. A better choice for more robust ajax webapps is http://developer.yahoo.com/yui/ or http://script.aculo.us/.  Define concept. AWT/Swing are used for desktop Java apps or applets. They both require JVM to run. GWT is used to translate Java code to Javascript. This only runs on Javascript engines i.e. browser. The API design as stated above is similar to Swing. You get the same Panels Buttons and other Component classes as in Swing.,java swing gwt awt
73000,A,"Modal dialogs in IE gets hidden behind IE if user clicks on IE pane I have to write an applet that brings up a password dialog. The problem is that dialog is set to be always on top but when user clicks on IE window dialog gets hidden behind IE window nevertheless. And since dialog is modal and holds all IE threads IE pane does not refresh and dialog window is still painted on top of IE (but not refreshed). This behaviour confuses users (they see dialog on top of IE but it looks like it has hanged since it is not refreshe). So I need a way to keep that dialog on top of everything. But any other solution to this problem would be nice. Here's the code:  PassDialog dialog = new PassDialog(parent); /* do some non gui related initialization */ dialog.pack(); dialog.setLocationRelativeTo(null); dialog.setAlwaysOnTop(true); dialog.setVisible(true); Resolution: As @shemnon noted I should make a window instead of (null Frame Applet) parent of modal dialog. So good way to initlialize parent was: parent = javax.swing.SwingUtilities.getWindowAncestor(theApplet); Make a background Thread that calls toFront on the Dialog every 2 seconds. Code that we use (I hope I got everything): class TestClass { protected void toFrontTimer(JFrame frame) { try { bringToFrontTimer = new java.util.Timer(); bringToFrontTask = new BringToFrontTask(frame); bringToFrontTimer.schedule( bringToFrontTask 300 300); } catch (Throwable t) { t.printStackTrace(); } } class BringToFrontTask extends TimerTask { private Frame frame; public BringToFrontTask(Frame frame) { this.frame = frame; } public void run() { if(count < 2) { frame.toFront(); } else { cancel(); } count ++; } private int count = 0; } public void cleanup() { if(bringToFrontTask != null) { bringToFrontTask.cancel(); bringToFrontTask = null; } if(bringToFrontTimer != null) { bringToFrontTimer = null; } } java.util.Timer bringToFrontTimer = null; java.util.TimerTask bringToFrontTask = null; } Its a bit to brute force to me. But it's the easiest choice.  This is a shot in the dark as I'm not familiar with applets but you could take a look at IE's built-in window.showModalDialog method. It's fairly easy to use. Maybe a combination of this and Noah's suggestion?  You might try launching a modal from JavaScript using the JavaScript integration (see http://www.raditha.com/java/mayscript.php for an example). The JavaScript you would need would be something like: function getPassword() { return prompt(""Enter Password""); } And the Java would be: password = jso.call(""getPassword"" new String[0]); Unfortunately that means giving up all hope of having a nice looking modal. Good luck!  What argument are you using for the parent? You may have better luck if you use the parent of the Applet. javax.swing.SwingUtilities.getWindowAncestor(theApplet) Using the getWindowAncestor will skip the applet parents (getRoot(component) will return applets). In at least some versions of Java there was a Frame that was equivalent to the IE window. YMMV. Well I did something like JOptionPane.getRootFrame. I'll look into it first thing tommorow. Worked - thanks.",java internet-explorer swing applet modal-dialog
100123,A,"Application wide keyboard shortcut - Java Swing I would like to create an application wide keyboard shortcut for a Java Swing application. Looping over all components and adding the shortcut on each has focus related side effects and seems like a brute force solution. Anyone has a cleaner solution? For each window use JComponent.registerKeyboardAction with a condition of WHEN_IN_FOCUSED_WINDOW. Alternatively use: JComponent.getInputMap(WHEN_IN_FOCUSED_WINDOW).put(keyStroke command); JComponent.getActionMap().put(commandaction); as described in the registerKeyboardAction API docs. +1 The best easiest answer I have found. I will upvote this x1000 x1001 would be better that way he'd at least get an upvote. @Epaga Or 999 times  For people wondering (like me) how to use KeyEventDispatcher here is an example that I put together. It uses a HashMap for storing all global actions because I don't like large if (key == ..) then .. else if (key == ..) then .. else if (key ==..) .. constructs. /** map containing all global actions */ private HashMap<KeyStroke Action> actionMap = new HashMap<KeyStroke Action>(); /** call this somewhere in your GUI construction */ private void setup() { KeyStroke key1 = KeyStroke.getKeyStroke(KeyEvent.VK_A KeyEvent.CTRL_DOWN_MASK); actionMap.put(key1 new AbstractAction(""action1"") { @Override public void actionPerformed(ActionEvent e) { System.out.println(""Ctrl-A pressed: "" + e); } }); // add more actions.. KeyboardFocusManager kfm = KeyboardFocusManager.getCurrentKeyboardFocusManager(); kfm.addKeyEventDispatcher( new KeyEventDispatcher() { @Override public boolean dispatchKeyEvent(KeyEvent e) { KeyStroke keyStroke = KeyStroke.getKeyStrokeForEvent(e); if ( actionMap.containsKey(keyStroke) ) { final Action a = actionMap.get(keyStroke); final ActionEvent ae = new ActionEvent(e.getSource() e.getID() null ); SwingUtilities.invokeLater( new Runnable() { @Override public void run() { a.actionPerformed(ae); } } ); return true; } return false; } }); } The use of SwingUtils.invokeLater() is maybe not necessary but it is probably a good idea not to block the global event loop. Not the simplest solution but definitely the most elegant and reliable one.  Install a custom KeyEventDispatcher. The KeyboardFocusManager class is also a good place for this functionality. KeyEventDispatcher  Use the following piece of code ActionListener a=new ActionListener(){ public void actionPerformed(ActionEvent ae) { // your code } }; getRootPane().registerKeyboardAction(aKeyStroke.getKeyStroke(""ctrl D"")JComponent.WHEN_IN_FOCUSED_WINDOW); Replace ""ctrl D"" with the shortcut you want. @kleopatra Hmm. Thanks for the comment. I want to know the reason. I didn't find it! don't quite understand - reason for what? Why is registerKeyboardAction() obselete that's a question for the swing team 10+ years ago :-) There used to be an article (old swingconnection?) introducing keyBindings that also argued the why .. don't have a reference though sorry. no that's outdated api (superceded by actionMap/inputMap since jdk 1.2 or 1.3 - way back in stone age) Please see the javadoc (JComponent.registerKeyboardAction(java.awt.event.ActionListener java.lang.String javax.swing.KeyStroke int)): This method is now obsolete please use a combination of getActionMap() and getInputMap() for similiar behavior.  When you have a menu you can add global keyboard shortcuts to menu items:  JMenuItem item = new JMenuItem(action); KeyStroke key = KeyStroke.getKeyStroke( KeyEvent.VK_R KeyEvent.CTRL_DOWN_MASK); item.setAccelerator(key); menu.add(item);",java swing shortcut keystroke
272124,A,"Best way to implement tooltips for JTree? since JTree & TreeModel don't provide tooltips straight out-of-the-box what do you think what would be the best way to have item-specific tooltips for JTree? Edit: (Answering my own question afterwards.) @Zarkonnen: Thanks for the getTooltipText idea. I found out another (maybe still a bit nicer) way with overriding DefaultTreeCellRenderer and thought to share it: public class JTreeWithToolTips { private static class OwnRenderer extends DefaultTreeCellRenderer { @Override public Component getTreeCellRendererComponent(JTree tree Object value boolean sel boolean expanded boolean leaf int row boolean hasFocus) { setToolTipText(""foobar"" + row); return super.getTreeCellRendererComponent(tree value sel expanded leaf row hasFocus); } } public static void main(String[] args) { JTree tree = new JTree(new Object[] { ""foo"" ""bar"" ""foobar"" }); tree.setCellRenderer(new OwnRenderer()); ToolTipManager.sharedInstance().registerComponent(tree); JFrame frame = new JFrame(); frame.getContentPane().add(tree); frame.pack(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } } Your answer should be in an answer so people can vote on it. DefaultTreeCellRenderer#getTreeCellRendererComponent is called a lot and making this too heavyweight can make stuff not work as expected. Like tooltips that should show up but don't. Overriding JTree#getToolTipText(MouseEvent e) is only called when needed and as such is a much better solution! See getTooltipText on JTree. This should allow you to show tooltips depending on what in the tree is being hovered over. (Do read the docs though you need to register the JTree with the ToolTipManager.)  Yeah you can use onMouseMoved and then use a method (I don't remember the name) that tells you in which node you are over. If you get null obviously then you are not over a node. Since it's not mentioned elsewhere: the methods linking mouse position to tree node are `getPathForLocation(int int)` and `getRowForLocation(int int)`. As suggested by other answers implementing custom renderer or overriding `getToolTipText(MouseEvent)` is cleaner than adding a `MouseListener`.",java swing tooltip jtree
201287,A,"How do I get which JRadioButton is selected from a ButtonGroup I have a swing application that includes radio buttons on a form. I have the ButtonGroup however looking at the available methods I can't seem to get the name of the selected JRadioButton. Here's what I can tell so far: From ButtonGroup I can perform a getSelection() to return the ButtonModel. From there I can perform a getActionCommand but that doesn't seem to always work. I tried different tests and got unpredictable results. Also from ButtonGroup I can get an Enumeration from getElements(). However then I would have to loop through each button just to check and see if it is the one selected. Is there an easier way to find out which button has been selected? I'm programing this in Java 1.3.1 and swing. Java 1.3.1? As in only supported on vintage Solaris 8 and no bugs from April? Yeah I know. The desktop machines that I'm developing this for have older applications that still run on this version and I don't want to mess with that. I suggest going straight for the model approach in Swing. After you've put the component in the panel and layout manager don't even bother keeping a specific reference to it. If you really want the widget then you can test each with isSelected or maintain a Map<ButtonModelJRadioButton>.  I got similar problem and solved with this: import java.util.Enumeration; import javax.swing.AbstractButton; import javax.swing.ButtonGroup; public class GroupButtonUtils { public String getSelectedButtonText(ButtonGroup buttonGroup) { for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) { AbstractButton button = buttons.nextElement(); if (button.isSelected()) { return button.getText(); } } return null; } } It returns the text of the selected button. I love making custom methods for tasks. Nicely done. This method is EXACTLY what I needed. I thank you very much! I wish I could give you 999 ups. This should probably be in Java in the first place...  I would just loop through your JRadioButtons and call isSelected(). If you really want to go from the ButtonGroup you can only get to the models. You could match the models to the buttons but then if you have access to the buttons why not use them directly? It does look like this is the only way thanks. please consider this reading : http://www.javaworld.com/article/2077509/core-java/java-tip-142--pushing-jbuttongroup.html what could possibly be the point of button group then? @Thufir : ButtonGroup tells Java that only on of the JRadioButtons of the group should be selected. without that all of them could be selected simultaneously.  Use the isSelected() method. It will tell you the state of your radioButton. Using it in combination with a loop(say for loop) you can find which one has been selected. Isn't this the same as the accepted answer?  The following code displays which JRadiobutton is selected from Buttongroup on click of a button. It is done by looping through all JRadioButtons in a particular buttonGroup.  JRadioButton firstRadioButton=new JRadioButton(""Female""true); JRadioButton secondRadioButton=new JRadioButton(""Male""); //Create a radio button group using ButtonGroup ButtonGroup btngroup=new ButtonGroup(); btngroup.add(firstRadioButton); btngroup.add(secondRadioButton); //Create a button with text ( What i select ) JButton button=new JButton(""What i select""); //Add action listener to created button button.addActionListener(this); //Get selected JRadioButton from ButtonGroup public void actionPerformed(ActionEvent event) { if(event.getSource()==button) { Enumeration<AbstractButton> allRadioButton=btngroup.getElements(); while(allRadioButton.hasMoreElements()) { JRadioButton temp=(JRadioButton)allRadioButton.nextElement(); if(temp.isSelected()) { JOptionPane.showMessageDialog(null""You select : ""+temp.getText()); } } } } hmm ... this differs from earlier answers in that .. ?  You could use getSelectedObjects() of ItemSelectable (superinterface of ButtonModel) which returns the list of selected items. In case of a radio button group it can only be one or none at all. I tried this but I was getting a NPE. I did a little research and found this: http://java.sun.com/javase/6/docs/api/javax/swing/DefaultButtonModel.html#getSelectedObjects() Since JRadioButton's button model is JToggleButton.ToggleButtonModel it will always return null.  import javax.swing.Action; import javax.swing.ButtonGroup; import javax.swing.Icon; import javax.swing.JRadioButton; import javax.swing.JToggleButton; public class RadioButton extends JRadioButton { public class RadioButtonModel extends JToggleButton.ToggleButtonModel { public Object[] getSelectedObjects() { if ( isSelected() ) { return new Object[] { RadioButton.this }; } else { return new Object[0]; } } public RadioButton getButton() { return RadioButton.this; } } public RadioButton() { super(); setModel(new RadioButtonModel()); } public RadioButton(Action action) { super(action); setModel(new RadioButtonModel()); } public RadioButton(Icon icon) { super(icon); setModel(new RadioButtonModel()); } public RadioButton(String text) { super(text); setModel(new RadioButtonModel()); } public RadioButton(Icon icon boolean selected) { super(icon selected); setModel(new RadioButtonModel()); } public RadioButton(String text boolean selected) { super(text selected); setModel(new RadioButtonModel()); } public RadioButton(String text Icon icon) { super(text icon); setModel(new RadioButtonModel()); } public RadioButton(String text Icon icon boolean selected) { super(text icon selected); setModel(new RadioButtonModel()); } public static void main(String[] args) { RadioButton b1 = new RadioButton(""A""); RadioButton b2 = new RadioButton(""B""); ButtonGroup group = new ButtonGroup(); group.add(b1); group.add(b2); b2.setSelected(true); RadioButtonModel model = (RadioButtonModel)group.getSelection(); System.out.println(model.getButton().getText()); } }  Add the radiobuttons to a button group then: buttonGroup.getSelection().getActionCommand not answering the question (which was to get the selected _JRadioButton_ vs. its actionCommand)  you must add setActionCommand to the JRadioButton then just do String entree = entreeGroup.getSelection().getActionCommand(); ex  java = new JRadioButton(""Java""); java.setActionCommand(""Java""); c = new JRadioButton(""C/C++""); c.setActionCommand(""c""); System.out.println(""Selected Radio Button: "" + buttonGroup.getSelection().getActionCommand());  jRadioOne = new javax.swing.JRadioButton(); jRadioTwo = new javax.swing.JRadioButton(); jRadioThree = new javax.swing.JRadioButton(); ... then for every button: buttonGroup1.add(jRadioOne); jRadioOne.setText(""One""); jRadioOne.setActionCommand(ONE); jRadioOne.addActionListener(radioButtonActionListener); ...listener ActionListener radioButtonActionListener = new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { radioButtonActionPerformed(evt); } }; ...do whatever you need as response to event protected void radioButtonActionPerformed(ActionEvent evt) { System.out.println(evt.getActionCommand()); } That confuses input events and state changes. Other code may change the state. It also takes responsibility away from the button group model.",java swing
378161,A,"In Java Swing how can you manage a list of panels allowing multiple panels to be selected? I’m working on an in-house app that tracks a bunch of tasks. I wanted to have a simple task monitor that would list the task name and the task’s status. I need this to look just a little nice I’m no designer so whatever I do is going to suck but a basic text display won’t work for the project requirements. What I am essentially attempting to do is show something similar to the Firefox download window the I-Tunes download window and well I could name more but they all look basically the same. In each of these apps each of the ‘progress panels’ is selectable. So to implement this I thought it would be simple to just use a list of JPanels each with a JProgressBar and a JLabel each of which can just accept focus to determine if it and others are selected. I thought this was going to be an easy task but if I use a JList it just displays text. I then just figured I would show all the task panels in a larger panel but I cannot get the inner panels to recognize focus. Is there a pattern for this? Is there a rolled standard solution that I just have not found? Or is there a better method for doing this? I don’t want to re-invent the wheel but I thought this was just going to be simple. The standard way of doing this kind of things is to use JTable (or JList) as a container. You don't have to use default renderes fot table cells but you can specify your own renderer for specific cells. Take a look at CellRenderer  It sounds like what you may be looking for is an JList. You can add your items to the JList's by first adding your ""task"" to the JList object's ListModel (see the Create a Model section from The Java Tutorials) and then you'll want to assigned a custom ListCellRenderer which will accept your ""task"" and render on the JList as a JPanel in the list itself. The key here is to make your custom ListCellRenderer be able to display your ""task"" in the JList the way you want to have it show on the JList. Take a look into the Writing a Custom Cell Renderer section from the How to Use Lists page of The Java Tutorials. It will describe how to make your custom ListCellRenderer so you can represent your ""task"" as anything you want. To keep it short you will implement the ListCellRenderer interface by implementing the getListCellRendererComponent which will return a Component which is the representation of your task in the JList. You'll probably want to either construct or instantiate your JPanel in this method and return it as the Component. Here's some simple code showing how to render JPanels in a JList as alluded to in the answer: http://www.rgagnon.com/javadetails/java-0203.html  How about a JTable (which you can set to allow multiple rows to be selected) with an internal JPanel occupying the single cell in each row which contains a JProgressBar and a JLabel. Or you could use a JList with the same structure as I just described.",java swing
88434,A,"How can I detect if caps lock is toggled in Swing? I'm trying to build a better username/password field for my workplace and would like to be able to complain when they have their caps lock on. Is this possible? And if so I'd like to have it detected before the client types their first letter. Is there a non-platform specific way to do this? In addition to Nick's answer to react to this condition before the user presses a key you can listen to the focus event of your text entry component and test the caps-lock as the component receives focus.  here is some info on the class http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Toolkit.html#getLockingKeyState(int)  Try this from java.awt.Toolkit returns a boolean: Toolkit.getDefaultToolkit().getLockingKeyState(KeyEvent.VK_CAPS_LOCK) Short and to the point perfect! Except that it doesn't work on all platforms. For instance it throws a UnsupportedException under OpenJDK-6 in Linux. :( JDK 1.7 i have compile time error with this keycode as others have pointed out this throws an error on Linux. Interestingly there must be an internal way to do it in Linux as Gnome displays the message ""You have the caps lock key on."" when it is on and the screen is locked. Perhaps OS has APIs but java has not implemented them? using jdk 1.6 and fedora 14",java swing
147802,A,Why does Swing in my Java Applet flicker on fast mouse over? I made a Java Applet with some Standard GUI Components on it. I used the MigLayout Manager. If I move the mouse slowly over the various GUI Components everything appears to be fine but if I move the mouse fast it flickers. What could make that nasty ugly redraw? (Core 2 Duo 6300 2GB Ram Windows XP) One thought would be to check your code (and/or the MigLayout code) for unnecessary repaint() operations. Custom UIs and layouts can cause weird problems sometimes... You're right. Thanks. I found out that I used a custom component which registered a MouseListener.  I found the bugger: I used a custom ClosableTabbedPaint Class.  you could use double buffering in java applet to improve screen refreshing speed. ask more if details needed.. According to http://java.sun.com/products/jfc/tsc/articles/painting/ double buffering is ENABLED BY DEFAULT for all Swing components.,java swing applet
207557,A,"What's the best way to add a self-update feature to a Java Swing application? I'm trying to figure out a way to add a self-update feature to a Java/Swing application I'm working on. Basically I've got a bunch of jar files with extra functionality to be re-deployed to the installed users when they change. Nothing complicated just check if a new version has been released download them over HTTP and then optionally offer to restart the app to the user. I had a look at webstart and it could work. But this particular app does some funky stuff with classloading and GC memory settings that don't look like they are supported via webstart or will at least complicate matters. (It's a tweaked build of JMeter) I also went down the road of adding in this plugin handler http://swing-fx.blogspot.com/2008/06/add-auto-update-and-plugins-to-your.html but it is very alpha and tries to do too much with the usual bugs you get with alpha stuff. Updates plugins separation of concern etc. are exactly what OSGi is about - you might want to take a look at this. It won't come free (read: with a steep initial learning curve especially when you are currently using classloading tricks) at least there are good open source implementations (felix - see felix.apache.org equinox - see www.eclipse.org and others) For these implementations autoupdaters are available - if you write your modules correctly it's possible to update at runtime without restarting.  I would definitely first try out Webstart. We've had lots of success launching even the early Eclipse RCP apps using Webstart and you can probably not get more funky classloading issues than with the OSGI framework (Eclipse Equinox). Could you perhaps give some more detail in your question about you classloading approach? Regarding the GC and other VM settings: these are easy to specify in your JNLP (Java Network Launching Protocol) files used by Webstart for launching apps. Could you give a link to an RCP app? Do you mean a RCP app that can be webstarted? The one's I worked on are all for intranet type enterprise applications so not available on the web.  The Java Web Start is good choice. The GC stuff is not important. Classloading could be problem. But when you got trusted by user you can grant AllPermisions and you will be able to do custom classloading. Maybe it will be good to reconsider funky stuff with classloading. It is really necessary? Or look at NetBeans. There should be found inspiration for auto-update.  I did the exact same thing. But that was long back so there are probably better tools today. What I found out I needed was a loader. The loader main program did not have the app jars in classpath. It first downloaded an update if required and then created a custom classloader with the app jars in class path and invoked the main method of the application main class. It is not very complicated. IIRC I needed to do this because the jars could not be overwritten in windows if they were already in classpath. Hope this helps. That seemed to be the easiest way all round. I kept an XML file on the server and a replica of it locally listing all the files to be updated and a version number. Quick and simple but does the trick.  we had a swing app 6 years ago that had self-update. like you suggested 1)it downloaded the latest jars over http 2) copied them to a folder. 3) since the swing app is launched using a .BAT file after user said YES we would shut down the swing app and look for any files in the update folder. if yes launch another .BAT file to copy the NEW JARs to the required directory. 4) then re launch the swing app.  I believe you should look again at Java WebStart or at least detail the ""funky classloading"" which you think is going to cause problems (as it might also cause problems with any solution proposed here). IIRC you can set command line parameters using Java WebStart ( http://java.sun.com/j2se/1.5.0/docs/guide/javaws/developersguide/syntax.html#resources ).",java swing
491323,A,"Is it safe to construct Swing/AWT widgets NOT on the Event Dispatch Thread? I've been integrating the Substance look and feel into my application and ran into several problems regarding it's internal EDT (Event Dispatch Thread) checking routines. Substance absolutely refuses to construct UI classes outside of the EDT. I've done plenty of Swing/AWT and I know most of the rules regarding the EDT. I use SwingWorker SwingUtilties.invokeLater to modify components. I always though that components could be CONSTRUCTED outside of the EDT but must be realized and manipulated on the EDT. In other words you can construct and setup defaults in the background but the call to pack/setVisible must be EDT as well as any subsequent calls to manipulate the component. The reason I ask is that I have a particularly ""beefy"" window to construct involving many widgets state and resources (lots of icons). Previously I constructed the window on the background method of a SwingWorker and made the window visible in the done method. Never had a single problem. Upon switching to Substance the internal EDT checking bites me. I've been able to refactor code to get around this. I can construct on the EDT which isn't a good solution since the entire application will block. I can also refactor even more and try my best to load all of the extra resources outside of the EDT. Wrapping it up ... Is it safe to construct Swing/AWT widgets NOT on the Event Dispatch Thread? No. Simple reason is that even the EDT likes to deadlock in some rare cases and in general it's easy to deadlock the UI when using Swing (or so I've been told). I suggest you read these three articles from Kirill's (the Substance dev) blog: New article on Swing EDT violations Unwritten rule of working with Swing’s EDT Stricter checks on EDT violations in Substance  Sun has changed the rules in 2004 -- before you were allowed to create the components outside the EDT and only had to move into the EDT once the component had been realized. The new rule now reads: To avoid the possibility of deadlock you must take extreme care that Swing components and models are created modified and queried only from the event-dispatching thread. this blog post of mine gives more details including links to other related articles. note that all official Sun examples have been rewritten and are very strict about this. historically it probably was the increasing availability of multi-core computers as desktop machines that motivated the re-formulation of the rule -- threading issues became more and more apparent on the client stack and by being very strict on EDT guidelines a lot of them can be prevented from the start. sneaky sneaky ... thanks for the concrete evidence I was craving. Time to refactor! It's more race conditions than deadlocks that cause the problem. @tom: sorry i missed that the quote explicitly mentions the deadlocks -- but as said before i agree with you that it's more the race conditions... @tom: i agree about the race conditions -- never claimed it were the deadlocks have i (just referred to 'threading issues')?",java multithreading gui swing awt
422956,A,"Java Swing or Java Qt? Can someone with extensive experience with both Qt and Java Swing please discuss whether you would use Swing or Qt under Java and why? Secondly what is the business impact of using Qt? Is it reasonably popular or will I have a hard time finding experienced Qt developers? Are there any other business impacts I should be aware of? UPDATE: I am more interested in the technical and business impacts of Swing vs Qt than the license type/fee since in my case the cost is not a concern. I agree with Jason. This issue is quite subjective. I accepted an answer favoring Qt but I personally still favor Swing. @HaveAGuess: because at the time the question was posed Qt was a rising star. There are plenty of questions discussing other frameworks. This question focuses solely on the differences between Swing and Qt. Can I ask why we are disregarding Netbeans/Eclipse RCP and even Gtk? Qt Jambi has been picked by community though: http://qt-jambi.org It is licenced under LGPL and approaching 4.7 release. And now Qt will become LGPL as of Qt 4.5 Qt Jambi too ;-) http://www.qtsoftware.com/about/news/lgpl-license-option-added-to-qt As far as Qt vs Java PDF Deepak has presented it clearly was written many years ago. Since then Java's virtual machine has improved tremendously so memory and performance issues are not an issue anymore. The article discusses even the validity of using garbage collector which I find hilarious! It’s also old when it comes to Qt: The Qt toolkit follows a similar approach; like Swing it only relies on the native libraries only for very basic things and handles the drawing of GUI components itself. This is not true anymore Qt now uses native widgets. It no longer emulates them.  As far as Qt vs Java PDF Deepak has presented it clearly was written many years ago. Since then Java's virtual machine has improved tremendously so memory and performance issues are not an issue anymore. The article discusses even the validity of using garbage collector which I find hilarious! Next discussing programming models signal-slot model has been presented as superiour to MVC with only measurement being number of the lines of the code required to achieve same effect! What was overlooked in that document is that Java's code is clearly self-documenting unlike Qt's. I'm not saying that Qt is worse than Swing. I'm just saying that that document should NOT be used as an argument. First two answers give the best description of both frameworks discussing it's strenghts and weakness alone without comparing programming models and pulling conlusions out of a thin air.  Qt is far better than AWT/Swing. I have been using Qt for past three years and have found absolutely no issues in application development. Compared to Qt(C++) Swing(Java) loses out in run time efficiency and memory efficiency. You may get a lot of Java/Swing resources easily they are hundred a penny but if you can hire a good Qt/C++ application developer thats the best choice I say. No offence to Java developers but you have to accept the facts. Qt is available with LGPL licensing. I did not see anybody mention about its cross platform support and the way it is implemented. There is tremendous advantage for Qt there. Great documentation Qt's own intuitive IDE(QtCreator) lotsa examples and a great and fast growing community out there for support! Regarding shipping extra files - there are packaging solutions available. Read more here link text Questionable. How is Qt more cross-platform than Swing? How is LGPL better than ""GPL with classpath exception"" which Swing ships with? All the Qt applications I have seen look horrible especially on OSX whereas Java on OSX is quite reasonable  I don't know much about swing but I'd like to react to Adeel's answer regarding Qt. I don't think finding experienced developer in Qt should be a showstopper : it is very easy and fast to learn Qt. The documentation is very good (that's maybe the best part of Qt : its documentation). IMHO the Qt community is great and I always found the help needed when I had problems. There is many forums (QtCenter.org QtForum.org and others) and Trolltech is running a very active mailing list. I didn't say that it is a showstopper. I just made a point to consider. As the original question mentioned it clearly. Would you down-vote the question too. Kidding. I didn't made any point regarding documentation. Its great I must admit. But I forgot to include it and now I did. By not so strong community I meant number of developers strength. Just go to any Java forum Suns JavaRanch Stackoverflow you would find much help. Of course your list is specific to Qt where else you will find help then if not there.  To correct Adeel's comments; You can ship your software commercially - you just have to include the source. There are thousands of developers with Qt experience (KDE). Qt is standard (used by KDE Nasa ESA Adobe Skype etc) There's a large Qt community and many books and the Qt Jambi product is quite new so it's not surprising it's not that well known yet. And thats what we are talking about Qt Jambi not Qt. I admit Qt is quite common even I am using KDE and quite a no. of applications built on top of Qt. By Commercially I meant closed source. I said it wrong sorry for that. Now correction is made.  Pete's comment is right on. For those who need a more powerful swing based toolkit check out Jide http://www.jidesoft.com/.  Be aware that Qt Jambi will be discontinued shortly. http://www.qtsoftware.com/about/news/preview-of-final-qt-jambi-release-available. My interpretation of this is that following the March 4.5 release Jambi will be in the same boat as Qt bindings for other languages - up to the community to maintain. Regarding your questions I have a few years of Swing experience and I've been working with Qt Jambi for the past month and I'm pretty mixed. On one hand I'm particularly disappointed with Qt's model/view paradigm. Creating an editable tree in Swing by contrast using a completely non-Swing model is a breeze. A couple of hours work. After a week of struggling I've come to the conclusion that it's just not possible to do such a thing in Jambi 4.4. (Dunno about 4.5) The only solution I can find in Qt is to tie data to the Qt model classes by subclassing QStandardItemModel and QStandardItem. (While QAbstractItemModel is very capable in C++ Qt it's literally unusable in Qt Jambi.) On the other hand Qt Jambi gives me access to the amazing QGraphicsView drawing tools and I don't know of a Java library that can compare. To me that's the power of Qt Jambi - it gives you access in Java to excellent 2D and GL drawing tools that really aren't available in Java otherwise. My advice is that if you need to build an application that uses only standard UI widgets like tables trees menus etc. then just use Swing. Layout in Swing is not that hard really especially with tools like NetBeans. However if you need GL or a canvas to paint on Qt Jambi might be worth looking into.  I think the most important factor you should consider is that Jambi QT is going to be discontinued from active development. Swing isn't that of a recent product as well. You should also definitely consider SWT since in my opinion it generally looks better than Swing. There are not production quality designers for SWT Eclipse comes built in with Windows Builder Pro now (or actually at the time of writing an available download that was suppose to be included into the Indigo release).  From my experience (one year Qt several years of Swing). Swing: Pro: Available on any Java installation. No need to ship any additional code You can write your own custom widgets in Java Contra: Swing is old. There haven't been any updates on the core for years and there won't ever be. If you plan to use Swing get a good wrapper which will make using Swing much more simple. Swing is hard to understand and use especially if you're used to UI programming on Windows. (One word: Layouts). Not many powerful widgets in the core set. You'll especially miss a good data grid. For a good look&feel you need an extra library Qt: Pro: Comprehensive set of powerful widgets Easy to use and learn Good documentation Good support Active development Uses native widgets and wraps them in a common API across all platforms Contra: You need to ship extra files Qt is written in C++ so you're accessing it via a wrapper library. If you need to implement a complex custom component things can get hairy. If you can hire a seasoned Swing developer give it a try. If you can't and if you have to start from scratch I suggest against Swing. With Qt you'll have results within hours and with only little hair pulling. Swing is powerful but it makes no attempt to hide this fact. So you'll find yourself struggling a lot with the API and the defaults which have made sense in 1996 but not anymore today. Qt has a much steeper learning curve and the API is much more consistent not to mention that Qt has been improved the last seven years while Swing hasn't (see below). KDE is based on Qt so there are lot of people out there using it and most of them have only little time (say a few hours here and there) and most can handle Qt after a short time. Which you simply can't say for Swing. There is a lot of Swing documentation but most only covers the common cases which you can figure out yourself from the Javadoc. If you need something more complex and if you're looking for a bird's eye view something which gives you a feeling how to combine things to achieve the desired result I haven't seen anything free and I also can't recommend a book for Swing book because I have stopped looking at them five years ago. If you look at Java 7 then you'll find that Sun is thinking about working on the Swing API. But: Java 7 is due in two years there is no commitment for this work items and last but not least: Can you switch to Java 7 when it will be available? Update: It seems that there won't be any Swing updates for Java 7 after all. Which is a pity. It will leave us with a built-in UI framework from the late 90's which just isn't on top of the times anymore. Being an old Amiga lover I know how it feels to be abandoned. Thanks Swing it's been a nice time. yeah because playing with AWT to generate a custom swing component is not a pain. Do you think in Swing we don't have good documentation good support. Come on I can come up with 10 or more times more article tutorials and books. Your pro and con stuff is just plain wrong. Swing has a lot more documentation tutorials and other resources available than there will ever be for QT. Swing is a very flexible framework which allows you to do whatever you want granted that makes it sometimes a bit complicated. At least it is free. I strictly disagree with your pros and cons. Completely disagree with all of your Swing cons. If you want to list pros and cons you must draw a line somewhere. Yeah there is a lot of Swing docs. They explain the basic stuff pretty well and then the air gets thin quick. So the Qt docs are better. Swing is flexible but it is also old. That's why I said it's more simple to write custom widgets in Swing *in Java* but Qt is easier to use and understand. From my experience Swing was good seven years ago and it stayed that way while everything else improved. It's sad :( Adeel: Ok I call. give me the URL of a good documentation of JTextPane which explains how to build your own custom editor with syntax hl spell checking everything you expect from an editor today. Dan: Since you give no reasons I can only ignore your comment :) Completely disagree with the entire answer quite frankly. Details in my answer below. It should also be pointed out that Swing widgets are non-native and ass ugly while Qt widgets are native and beautiful. Qt for Java i.e. Jambi will be officially abandoned as announced by Nokia. @Xolve: Last I heard is that Jambi > 4.5 will become OSS (just like Qt). Please either post a link if you have new information or stop spreading FUD. @Monkey: Please read the question again. This is not an argument against Swing it's whether he'll likely find developers. Qt is easier to learn than Swing. Plus Swing has been abandoned by Sun so no updates for Java 7 :( Gili: URL? As I heard it the Swing JSR will be part of the OpenJDK; that doesn't mean it will be in Java 7 :( FYI: Sun just announced that Swing Application Framework will be part of Java 7. To be completely clear Aaron's update about Swing updates not being issued past Java 7 is purely simply wrong. The Swing Application Framework (JSR 296) was (IMO) a relatively unambitious compromise effort to provide a unified foundation for building GUI apps but it only addressed the least interesting plumbing and infrastructure bits (e.g. resource mgmt bootstrapping session state etc). These are all capabilities that every Java app framework (including NetBeans and Eclipse) have done well for *years* so it's absolutely no loss (again IMO) that JSR 296 has been shelved. @Chas Emerick: I'm sure most readers will understand that my complaint is that Sun didn't put any effort into Swing for years not even something as JSR 296. I didn't say anything about JSR 296 itself. Qt widgets are _not_ native. It draws them itself just as Swing with native L&F does. It's just that Qt native L&F is somewhat better than Swing. Qt has themes that use native widget drawing mechanisms even if it does everything else itself so you can get a native ""look"" even if the ""feel"" is implemented in Qt. Aaron care to comment on this now one year later and with the changes in QT? Please include a @yar in your answer as I THINK that SO will inform me that way. Thanks! @yar: Well ... in one sentence: Swing still sucks a lot C++ Qt sucks a bit less than last year Java Qt sucks much more. I haven't used Qt Jambi for anything serious last year so I can't comment on its state but at least there is an open repository with the code and TrollTech tries to build a community to support it which is more than Sun does for Swing. Interesting. I got burned answering a few questions SO recently because I said that Swing does NOT give you native look and feel. People said ""get with it! That's no longer true! Swing is now near perfect."" I don't know myself... QT does NOT look like it's got much of a community behind it judging from random googling. So uh if Swing goes away what else can we use that's ""native""? Java would be left with no UI? Would we be stuck with either doing command line or web pages? @Brian: My experience is that Qt is much more simple to learn and use then Swing. This doesn't mean you *must not use Swing*. That would be silly. If you have a choice by all means use Qt. If you *don't* have a choice (because Qt just isn't available) well there is no point in arguing which is better is there? @Aaron Qt is fine except that it's not native. You have to go out of your way to use it. It adds complexity to the project and I don't even know if it's readily available in a stable version on all the platforms that Swing is. That's my concern right there. Qt is the basis for the Unix GUI environment KDE. Millions of lines of example code. And in my time maybe 10 years ago very well and extensively documented in the standard documentation. And the Qt philosophy matches QUI development very well which makes it easy to learn. ""If you plan to use Swing get a good wrapper which will make using Swing much more simple."" Which wrappers would you suggest? I've removed the part about Qt not being free for commercial apps. Qt is LGPL'd now. @Alexey: Try Swingx http://swingx.java.net/ +1 for the Amiga lover. I have FIVE. ;-)  I completely disagree with Aaron Digulla's entire answer as it pertains to Swing. I have found Swing to be while not the best design and a little convoluted reasonably simple and workable and ultimately quite well thought out. Further it most definitely is capable of what is required for almost all GUI app's. Using the native LAF the application will look and function enough like a native application to receive a passing grade (IMO). As to the bit about layouts... it's true that the Swing layout's are a little hard to use and need nesting (sometimes a fair amount thereof) to get the desired results but the concept of Layouts are one of the best things about doing GUI's in Java. Take the time to understand what they do for you and get yourself a good table-based layout (e.g. MatrixLayout TableLayout JGoodies FormLayout or MigLayout) which will eliminate 99% of the nesting. A table-based layout will also make your GUI simpler and will make the code better reflect the end visual result. So my advice is that if QT does things in a way in which you would prefer or provides functionality that Swing doesn't then by all means look into it - provided that you are happy with distributing it's Java and native components with your app and that it targets the platforms on which you want to run (or may want to run in the future). Otherwise it's hard to beat Swing's flexibility the fact that it's baked into every Java install and it's ability for you to easily tailor look and behavior. Oh and to be fair I have not looked at QT before - But I have about 6 10 years of active Swing and AWT development comprising 1 commercially deployed AWT application and 3 such (non-trivial) Swing applications plus a number of personal Swing apps. Perhaps more important is that I have implemented a fully-functional lightweight GUI toolkit on top of AWT very much analogous to Swing but with a completely different component and event architecture which has been successfully deployed commercially. Give a try to Qt ;) @Massimo: Last time I check QT for Java was abandoned or discontinued. You should give a try to C++ Qt Dude half year of Qt and 2 years of Swing and AWT here and if you say such things about Swing than you should definitely try Qt...",java qt gui swing
476721,A,"Merging cells in JTable Is it possible to merge some cells of a JTable object? If it's not possible through JTable what is the best approach. Thanks. You could implement a JTable using a TableModel merging two columns of the original TableModel. class Model2 extends AbstractTableModel { private TableModel delegate; public Model2(TableModel delegate) { this.delegate= delegate; } public int getRowCount() { return this.delegate.getRowCount();} public int getColumnCount() { return this.delegate.getColumnCount()-1;} public Object getValueAt(int row int col) { if(col==0) return """"+delegate.getValueAt(rowcol)+delegate.getValueAt(rowcol+1); return delegate.getValueAt(col+1); } (...) } I said merging 'cells' not columns.  Not out-of-the-box. Here is an example that supports merging arbitrarty cells. This page has several examples of tables with spanning cells. Of course it's old and you get what you pay for. If paid software is an option JIDE Grids has some really nice Swing table support including custom cell spans. 3 out of 4 of those URLs are 404. :(",java swing jtable cell html
276254,A,"How to disable (or hide) the close (x) button on a JFrame? I have a window (derived from JFrame) and I want to disable the close button during certain operations which are not interruptible. I know I can make the button not do anything (or call a handler in a WindowListener) by calling setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE); but I would like to make it clear visually that it is pointless to click it. I agree with Josh. At the very least map close to a popup that says ""Operation in Progress..."" with a ""Cancel"" (hides popup) and ""Close Anyway"" (forces quit) button. When the background operation completes the app closes if that popup is still visible (i.e. they haven't clicked Cancel) Just a suggestion you might want to consider avoiding such GUI behavior due to poor usability. For those coming to this later than 2008 there has been a change making it possible to do this. See this link Second response from the bottom shows how to do it by name. Like many other things in Swing this too is a complete PITA.  If I understand it correctly this bug report indicates that this is currently not possible.  This is probably the best you are going to get: setUndecorated(true); getRootPane().setWindowDecorationStyle(JRootPane.NONE); This will remove the entire titlebar java doesn't really specify a way to remove individual components of the titlebar edit: There may be a way check out these threads: link 1 link 2",java windows swing
74171,A,"Java Compilation - Is there a way to tell the compiler to ignore parts of my code? I maintain a Java Swing application. For backwards compatibility with java 5 (for Apple machines) we maintain two codebases 1 using features from Java 6 another without those features. The code is largely the same except for 3-4 classes that uses Java 6 features. I wish to just maintain 1 codebase. Is there a way during compilation to get the Java 5 compiler to 'ignore' some parts of my code? I do not wish to simply comment/uncomment parts of my code depending on the version of my java compiler. Not really but there are workarounds. See http://forums.sun.com/thread.jspa?threadID=154106&messageID=447625 That said you should stick with at least having one file version for Java 5 and one for Java 6 and include them via a build or make as appropriate. Sticking it all in one big file and trying to get the compiler for 5 to ignore stuff it doesn't understand isn't a good solution. HTH -- nikki --  Keep one ""master"" source root that builds under JDK 5. Add a second parallel source root that has to build under JDK 6 or higher. (There should be no overlap i.e. no classes present in both.) Use an interface to define the entry point between the two and a tiny bit of reflection. For example: ---%<--- main/RandomClass.java // ... if (...is JDK 6+...) { try { JDK6Interface i = (JDK6Interface) Class.forName(""JDK6Impl"").newInstance(); i.browseDesktop(...); } catch (Exception x) { // fall back... } } ---%<--- main/JDK6Interface.java public interface JDK6Interface { void browseDesktop(URI uri); } ---%<--- jdk6/JDK6Impl.java public class JDK6Impl implements JDK6Interface { public void browseDesktop(URI uri) { java.awt.Desktop.getDesktop().browse(uri); } } ---%<--- You could configure these as separate projects in an IDE using different JDKs etc. The point is that the main root can be compiled independently and it is very clear what you can use in which root whereas if you try to compile different parts of a single root separately it is too easy to accidentally ""leak"" usage of JDK 6 into the wrong files. Rather than using Class.forName like this you can also use some kind of service registration system - java.util.ServiceLoader (if main could use JDK 6 and you wanted optional support for JDK 7!) NetBeans Lookup Spring etc. etc. The same technique can be used to create support for an optional library rather than a newer JDK.  You can do all of your compiling exclusively on Java6 and then use System.getProperty(""java.version"") to conditionally run either the Java5 or the Java6 code path. You can have Java6-only code in a class and the class will run fine on Java5 as long as the Java6-only code path is not executed. This is a trick that is used to write applets that will run on the ancient MSJVM all the way up to brand-new Java Plug-in JVMs.  This will make all the Java purists cringe (which is fun heh heh) but i would use the C preprocessor put #ifdefs in my source. A makefile rakefile or whatever controls your build would have to run cpp to make a temporary files to feed the compiler. I have no idea if ant could be made to do this. While stackoverflow looks like it'll be the place for all answers you could wehn no one's looking mosey on over to http://www.javaranch.com for Java wisdom. I imagine this question has been dealt with there prolly a long time ago.  I think the best approach here is probably to use build scripts. You can have all your code in one location and by choosing which files to include and which not to include you can choose what version of your code to compile. Note that this may not help if you need finer-grained control than per file.  A simple solution could be: Place the divergent classes outside of your normal classpath. Write a simple custom classloader and install it in main as your default. For all classes apart from the 5/6 ones the cassloader can defer to its parent (the normal system classloader) For the 5/6 ones (which should be the only ones that cannot be found by the parent) it can decide which to use via the 'os.name' property or one of your own.  Assuming that the classes have similar functionality with 1.5 vs. 6.0 differences in implementation you could merge them into one class. Then without editing the source to comment/uncomment you can rely on the optimization that the compiler always do. If an if expression is always false the code in the if statement will not be included in the compilation. You can make a static variable in one of your classes to determine which version you want to run: public static final boolean COMPILED_IN_JAVA_6 = false; And then have the affected classes check that static variable and put the different sections of code in a simple if statement if (VersionUtil.COMPILED_IN_JAVA_6) { // Java 6 stuff goes here } else { // Java 1.5 stuff goes here } Then when you want to compile the other version you just have to change that one variable and recompile. It might make the java file larger but it will consolidate your code and eliminate any code duplication that you have. Your editor may complain about unreachable code or whatever but the compiler should blissfully ignore it. Is that a documented behaviour of Java compilers? This answer seems incorrect. I did a quick Java app that used java.io.Console and the above approach. The compiler failed in 1.5 with an error like the following: Test.java:8: cannot find symbol: method console() location: class java.lang.System I could see how you could compile in 1.6 and exclude certain runtime features when running in a 1.5 JVM. Of course you would also need to re-compile into 1.5 JVM bytecode format to avoid the ""invalid minor version 49.0"" error. For that approach this solution could work. This answer *is* incorrect. The Java 5 compiler will fail to compile the ""Java 6 stuff goes here"" block so you haven't fixed the problem. A better solution would be to have two implementations of an interface one for Java 5 and one for Java 6. Your build tool can then include the right implementation at compile time. Ant could do this easily by using a build property.  You can probably refactor your code so that conditional compile really isn't needed just conditional classloading. Something like this: public interface Opener{ public void open(File f); public static class Util{ public Opener getOpener(){ if(System.getProperty(""java.version"").beginsWith(""1.5"")){ return new Java5Opener(); } try{ return new Java6Opener(); }catch(Throwable t){ return new Java5Opener(); } } } } This could be a lot of effort depending on how many version-specific pieces of code you have.  It depends on what Java 6 features you want to use. For a simple thing like adding row sorters to JTables you can actually test at runtime: private static final double javaVersion = Double.parseDouble(System.getProperty(""java.version"").substring(0 3)); private static final boolean supportsRowSorter = (javaVersion >= 1.6); //... if (supportsRowSorter) { myTable.setAutoCreateRowSorter(true); } else { // not supported } This code must be compiled with Java 6 but can be run with any version (no new classes are referenced). EDIT: to be more correct it will work with any version since 1.3 (according to this page).  You can use reflection API. put all your 1.5 code in one class and 1.6 api in another. In your ant script create two targets one for 1.5 that won't compile the 1.6 class and one for 1.6 that won't compile the class for 1.5. in your code check your java version and load the appropriate class using reflection that way javac won't complain about missing functions. This is how i can compile my MRJ(Mac Runtime for Java) applications on windows.  The suggestions about using custom class loaders and dynamically commented code are a bit incredulous when it comes to maintenance and the preservation of the sanity of whichever poor soul picks up the project after you shuffle to pastures new. The solution is easy. Pull the affected classes out into two separate independent projects - make sure the package names are the same and just compile into jars that you can then consume in your main project. If you keep the package names the same and the method signatures the same no problems - just drop whichever version of the jar you need into your deployment script. I would assume you run separate build scripts or have separate targets in the same script - ant and maven can both easily handle conditionally grabbing files and copying them. Independent projects are overkill separate source folders and a custom build script will do just fine. Use source folders for src/main with the common codebase and say src/java5 and src/java6 for features dependent on each version.  The public static final solution mentioned above has one additional benefit the author didn't mention--as I understand it the compiler will recognize it at compile time and compile out any code that is within an if statement that refers to that final variable. So I think that's the exact solution you were looking for.  You can get conditional compile but not very nicely - javac will ignore unreachable code. Thus if you structured your code properly you can get the compiler to ignore parts of your code. To use this properly you would also need to pass the correct arguments to javac so it doesn't report unreachable code as errors and refuse to compile :-)  There is no pre-compiler in Java. Thus no way to do a #ifdef like in C. Build scripts would be the best way. He's suggesting to use s C compiler to run the actual C pre-processor which would output modified source files then run the Java compiler on those. Most if not all C compilers have a switch to run the pre-processor only.",java swing compilation
397500,A,How to design interface for a game in Java We're a team of a designer and a programmer. Me the programmer is hopeless on design of all sorts so the user interface of the game must be created by the designer. We were thinking of a main screen where the character walks around a small minimap in the top an inventory section etc. All these things would have to be designed in a way that looks pretty i.e nice graphics/buttons/colors etc. I'm assuming that the designer will create an outline of this interface in photoshop/illustrator then send me the file in .png or .jpeg format and I'll implement it into the program making sure the buttons all work etc. My question is is this the correct method for doing this? Should he send me the interface's layout in a .png/.jpeg format or send me only the buttons and I have to code the rest of the interface manually in java putting the buttons/icons where they need to be etc. If so how can I do this? Any classes/frameworks that do this? Any guidelines at all will be helpful. Thanks! You've described one of the primary use cases stated for JavaFX. There's at least one visual design tool already out for it as well. I've also seen articles on this blog that address the idea of taking visual assets from a graphic designer and working with them in an app. And of course you can drop into Java for the heavy lifting at any point.  It really depends on a few things..Is it for J2ME or are you considering this for desktop (OpenGL/JOGL)? For J2ME you have to really know a bit about making games for devices with constrained memory. J2ME comes with its own GameCanvas and Sprite related classes that you can utilise. I Would recommend you read up on J2ME game development either through google or buy a book. While there are 3D libraries for the J2ME environment I have never been impressed by it. For a desktop based game I would recommend using some form of accelerated hardware based libraries for 2D or 3D based games. Bit of a steep learning curve but better in the long run. Plenty of libraries out there to help you get started(Jogl and JAva3D for example) You should look into using some called a scene graph which will help you provide a good foundation to start from. Once again steep learning curve but much easier to maintain and develop with. In regards to your design/implementation question it seems you dont have much experience in this area.Generally graphic designers/UI interaction designer will have a better understanding of how to provide an interface for the game. They will generally develop a mock of some sortyou will implement it a test will be done with user's and feedback will determine where you go from there. If you dont have some form of interaction designer you or your designers will need to read up on it. Interaction through an interfaceespecially for games is not an easy thing and can make or break your game. But it seems that you should definitely do some reading up on game architectures before proceeding to implementation phase if you do not have experience in this area. It will help you understand some theory and get a foundation before going ahead and building something which inevitably turns out to be completely wrong.  Think up some weird XML format that completely describes the interface and make him create it. :)  take a look at this: http://www.cs.qub.ac.uk/~P.Hanna/CSC207/lectures/lectures.htm the link is not working anymore. :( anyone knows about resources related to this class?  I suggest you look at java games which do this already for examples of how this is done. e.g. http://sourceforge.net/projects/freecol/#item3rd-2 http://sourceforge.net/projects/megamek/#item3rd-2 http://sourceforge.net/project/screenshots.php?group_id=1111 +1 attaching similar reference: http://www.brackeen.com/javagamebook/  The designer will also have to learn something about game development how to produce textures that will work fine at different resolutions if it's a platformer to create sprites that lend themselves properly to animation and so on and so forth. Answering your question he'll probably need to do both (send you buttons sprites etc. and a global view to see how it all fits together). I suggest you both check http://www.gamedev.net/reference/ and http://www.gamasutra.com,java swing 2d
356671,A,"JFileChooser.showSaveDialog(...) - how to set suggested file name The bloated JFileChooser seems to be missing one feature: a way to suggest the file name when saving a file (the thing that usually gets selected so that it would get replaced when user starts typing). Is there a way around this? Great! Works perfectly in Windows too with Java 1.6.35. Only a little change in my case: FileChooserUI fcUi = jFileChooser.getUI(); Class<? extends FileChooserUI> fcClass = fcUi.getClass(); Method setFileName = fcClass.getMethod(""setFileName"" String.class); setFileName.invoke(fcUi defaultDirectoryName);  setSelectedFile doesn't work with directories as mentioned above a solution is  try { FileChooserUI fcUi = fileChooser.getUI(); fcUi.setSelectedFile(defaultDir); Class<? extends FileChooserUI> fcClass = fcUi.getClass(); Method setFileName = fcClass.getMethod(""setFileName"" String.class); setFileName.invoke(fcUi defaultDir.getName()); } catch (Exception e) { e.printStackTrace(); } Unfortunately the setFileName is not included in the UI interface thus the need to call it dynamically. Only tested on mac. Work for me in a Mac 10.3.4 / Java 1.4.2  If I understand you correctly you need to use the setSelectedFile method. JFileChooser jFileChooser = new JFileChooser(); jFileChooser.setSelectedFile(new File(""fileToSave.txt"")); jFileChooser.showSaveDialog(parent); The file doesn't need to exist. EDIT: If you pass a File with an absolute path JFileChooser will try to position itself in that directory (if it exists).  If that doesn't work here is a workaround: dialog.getUI().setFileName( name ) But you should check whether the selection mode is FILES_ONLY or FILES_AND_DIRECTORIES. If it's DIRECTORIES_ONLY then setSelectedFile() will strip the file name. I would copy the method. How would you access the dialog though? It's private created on the spot in `showSaveDialog()` and disposed immediately after it was shown still inside that function.",java swing jfilechooser
407343,A,"Where are Swing applications used? Are Swing applications really used nowadays? I don't find a place where they are used. Is it okay to skip the AWT and Swing package (I learned a bit of the basics though)? Related: http://stackoverflow.com/questions/2994304/is-java-swing-still-in-use/2994324#2994324 You may checkout Swing Sightings. This website is hosted by SUN and it is dedicated to sw projects that use Swing. There are a lot of projects using Swing ... http://java.sun.com/products/jfc/tsc/sightings/ While I don't doubt Swing has it's place even today (and at the same time being an ugly and complex beast to get started with) the last sightings issue is from 2005 - so it cannot really prove that Swing is used _today_ ;) LandlordMax (http://www.LandlordMax.com) is a current desktop application that's based on Swing. I can assure you the Swing community is very alive! FYI: It was feature on Swing Sightings years ago.  Are you skipping it for an exam/interview? Besides really good apps like IntelliJ IDEA and NetBeans there are lots of Swing like frameworks [SWT (Eclipse) GWT etc.] which you can learn faster with Swing knowledge...  Hmmmm... how about NetBeans? You know the IDE? It uses Swing. oh thanks for the info ya i know and also eclipse While Eclipse is great IDE it doesn't use Swing but SWT.  Whenever you want to write a desktop GUI app for non-Windows OS you use Swing as the only sane and guaranteed cross-platform GUI framework. Besides Swing has a very good design. I recommend to learn it anyways to make yourself a better programmer.  You should probably be looking at JavaFX for future work. As the FAQ states Sun is not replacing Swing with JavaFX Script. Instead JavaFX Script makes Swing easier to use. Using/learning it will give you a very good understanding of the important Swing concepts and how they fit in with ""the future"". I haven't used JavaFX yet but heard very good things about it.  Skip AWT and Swing? To jump where? SWT? Web-based development? In the broader sense I have a number of Java applications although I am not too sure if they use Swing or SWT. Lot of database tools like SQuirreL SQL Client are written in Java. I think SQuirrel uses stuff from Netbean which is of course Swing based. yEd is written in Java probably Swing. A number of P2P softwares are written in Java including Frostwire (I see no trace of SWT there but I can just miss it). And this list is far from exhaustive! Lol! I forgot to mention the software suite made by the company I work for! It is quite specialized used by mobile phone companies to monitor health of their network nodes (superficially looks like a spreadsheet). Totally Swing based. Open Office is *not* written in Java (it's slow for other reasons ;)). Ah? Somebody already told me but before posting I checked and found lot of jar files (in program/classes). It has lot of DLL and exe files too indeed. Confusing at least. OpenOffice is written in C++ and supports Java plug-ins somehow.  If you are writing for the web exclusively you can probably skip Swing but otherwise you're absolutely going to run into it. I've never worked on a non-trivial Java app without a Swing GUI. Also Swing is one of the better APIs to use. If you use most others you are going to find them more difficult to use and/or platform incompatible. (If anyone reading this is aware of exceptions to this please leave comments I haven't looked for a while and am kind of curious if anything better has become available) Other JVM languages like JRuby and Jython are often used because of their access to Swing.  AWT I never actually learnt in full as swing is just a more sophisticated version knowing swing is very important if you have any intention of ever making a Java GUI application. will it be ever used for enterprise application development ?  There is no universal question to whether it is ok to skip something or not. It's a matter of priorities. While Swing has a lot to teach you (and it is too heavily infused with AWT) if you're never going to be writing GUIs you may be better off investing in something else. Swing while ugly as hell is still used in many places. A quick search on ""java swing"" in Indeed or dice would reveal many jobs and industries that require it. i find that the file choosers are very slow in swing - i hate them Swing while not great in many ways is far from ""ugly as hell"". It has many nice concepts and is quite good to use after a bit of experience is gained. And with recent font improvements makes it quite possible to write a GUI which is indistinguishable from a native app. Indistinguishable except that it resizes properly that is. You can write something pretty in every language but in my experience the vast majority of applications written with similar effort in Swing compared to other APIs tend to be clunkier less aesthetic and less robust. I always put the following right at the top of my `main` method to reduce the ugly-ness: `UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());` (with the necessary try/catch). It's still not as beautiful as you might want it to be but it helps a lot.  You should certainly write Swing for desktop Java only using AWT to the degree that Swing demands it. I'm sure people can come up with examples of very good Swing apps besides SQL Squirrel and IntelliJ. I think that RIA technologies like Flex Silverlight etc. are ascendant because the web and services are taking mindshare from desktops. It's not just Swing that's losing out. ""certainly"" perhaps not there is at least the SWT alternative (which I didn't learn). I wouldn't consider SWT as a viable alternative but that's my personal choice.  IIRC jEdit is also a Swing app. Quite a popular text editor.  Check out Filthy Rich Clients. It explains some of the history of AWT and Swing. Swing being a lightweight alternative (successor) to most of the AWT classes.  While Swing has some cross-platform look-and-feel deficiencies and it would be nice if it was updated to support generics it is still well designed and quite usable. I have always been a fan of the sheer amount of customization offered. SWT is nice and is more native but you give up some power and control with that as well. In addition it seems simpler to use which can be a plus since Swing can be overly complex due to its flexibility.  Geertjan Wielenga often blogs about applications based on the NetBeans platform and therefore Swing. The applications range across the board from rather small esoteric applications to very large mission-critical systems (Boeing Aircraft comes to mind). Many of the enterprise-level applications that Geertjan misses are mentioned on Planet NetBeans. It seems like every few weeks there is an announcement or description of such a program. As noted above lots of tools use Swing including the IntelliJ IDEA IDE a favorite. I'm surprised no one else mentioned it. Sun also used to maintain a Swing Sightings web site but it hasn't been updated in a few years. Where I work Swing is used in the presentation layer for a very large document management system. In my own development experience I've used Swing for desktop applications in the areas of image processing device control (video motors etc.) math statistics and medical devices. BTW I agree about the slowness of file choosers. But there are lots of alternatives that will use the native file chooser. It can just be a bit jarring if the L&F's don't match up very well. EDIT: Oh and as others have mentioned it's very easy to use Swing from other languages on the JVM. With Clojure for example it is even easier to use than in Java in my opinion.  Swing is heavily used in business specific (vertical)/internal application development.  Swing applications are used in most cases where a Java app runs on the desktop. Sometimes you don't even know - for example LimeWire is a Java Swing application. When learning Swing you'll find that you will come to know those parts of AWT that are still important such as Event LayoutManager Graphics Font Color etc. Yes Azureus is an Eclipse RCP i.e. it uses SWT. azureus was developed in swing ? wow .. thanks for the info pal :) I believe that Azureus uses SWT toolkit (from of Eclipse) not Swing. OK edited my answer to fix that. Sorry for the mistake. I tend to agree. You won't even realize you're running Swing apps when they're done right. Unless you really look there's no way to tell our app (http://www.landlordmax.com) is a Swing app. No Azureus/Vuze is NOT Eclipse RCP based but on SWT.",java swing
31127,A,"Java Swing: Displaying images from within a Jar When running a Java app from eclipse my ImageIcon shows up just fine. But after creating a jar the path to the image obviously gets screwed up. Is there a way to extract an image from the jar at runtime so I can then open it up? Or is there a better way to do this? I'd like to distribute a single jar file if possible. The ""Tom Hawtin - tackline"" answer is much better it just showed up a little late. Please consider changing your selected answer. You can try something like: InputStream stream = this.getClass().getClassLoader().getResourceAsStream(""/images/image.jpg""); In your JAR file you might have a directory structure of: MyJAR.jar - com (class files in here) - images ----image.jpg  This is working for me to load and set the content pane background image: jar (or build path) contains:  - com - img ---- bg.png java contains: JFrame f = new JFrame(""Testing load resource from jar""); try { BufferedImage bg = ImageIO.read(getClass().getResource(""/img/bg.png"")); f.setContentPane(new ImagePanel(bg)); } catch (IOException e) { e.printStackTrace(); } Tested and working in both jar and unjarred (is that the technical term) execution. BTW getClass().getClassLoader().getResourceAsStream(""/img/bg.png"") - which I tried first - returned me a null InputStream.  To create an ImageIcon from an image file within the same jars your code is loaded: new javax.swing.ImageIcon(getClass().getResource(""myimage.jpeg"")) Class.getResource returns a URL of a resource (or null!). ImageIcon has a constructors that load from a URL. To construct a URL for a resource in a jar not on your ""classpath"" see the documentation for java.net.JarURLConnection.",java swing image
344969,A,Making a JDialog button respond to the Enter key I have a JQueryDialog with a text field an OK button and a cancel button. I want to be able to hit the enter key after filling in the text fields and have it do the same action as when I click the OK button. What happened to the code? Are JQueryDialog(in question) and JDialog(in title) surely the same things? In your dialog call getRootPane().setDefaultButton(okButton).  The code is almost correct. I would change the if comparison and use the correct method as noted below. if (KeyEvent.VK_ENTER == event.getKeyCode()) { yourButton.doClick(); } Where do you see the code? It looks like the original code that I responded to is missing.,java gui swing
145972,A,"How can I setup LookAndFeel Files in Java? I need to setup LookAndFeel Files in JDK 1.6. I have two files: napkinlaf-swingset2.jar napkinlaf.jar How can I set this up and use it? I would like a GTK look and feel OR Qt look and feel Are they available? Can you please be more clear? These 2 files do you have the source or are they just binaries you have? This page explains how the work with Look&Feels: http://java.sun.com/docs/books/tutorial/uiswing/lookandfeel/plaf.html You can do it commandline: java -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel MyApp Or in code: UIManager.setLookAndFeel(""javax.swing.plaf.metal.MetalLookAndFeel""); You need to make sure the jars containing the look&feel are on the application classpath. How this works depends on the application. A typical way would be to put it in a lib folder. Look&Feels that are available by default in the JDK are: com.sun.java.swing.plaf.gtk.GTKLookAndFeel com.sun.java.swing.plaf.motif.MotifLookAndFeel com.sun.java.swing.plaf.windows.WindowsLookAndFeel Quioting the link above: The GTK+ L&F will only run on UNIX or Linux systems with GTK+ 2.2 or later installed while the Windows L&F runs only on Windows systems. Like the Java (Metal) L&F the Motif L&F will run on any platform. i know how to use LAF  but i want install LAF files . and the GTK LAF not installed by default . @Waseem -- Then I suggest you elaborate in your question.  The Qt look and feel is available from Trolltech as the product Jambi which IS Qt for Java. this is no look and feel. it is the whole toolkit.  The class name for Naplin is net.sourceforge.napkinlaf.NapkinLookAndFeel. So to set it as default on the command line use: java -Dswing.defaultlaf=net.sourceforge.napkinlaf.NapkinLookAndFeel To install it add napkinlaf.jar to the lib/ext direction and the lines: swing.installedlafs=napkin swing.installedlaf.napkin.name=Napkin swing.installedlaf.napkin.class=net.sourceforge.napkinlaf.NapkinLookAndFeel to lib/swing.properties within your Java installation (you'll probably have to create the file). See the Napkin wiki page it's work now  thank you nice LookAndFeel",java swing qt gtk look-and-feel
461112,A,"Panel with line wrapping and line breaking in Java Swing How to implement a panel that would support line wrapping and line breaking? I would only add textual labels and line breaks to this panel. The labels should flow from left to right wrapping to the next ""line"" if needed. The line breaks would cause a jump to the next line. I would also like to make the panel vertically scrollable. The solution should work in Java 5. SwingX can be used. Clarification: The textual labels are actually JXHyperlinks (from SwingX) i.e. the panel contains clickable labels. This is the reason I cannot just use JTextArea. Although it may not be a solution you're in search of but from the requirements you have it seems like a custom LayoutManager may be able to achieve what you are after. By designing and assigning a custom Layout Manager which allows line breaks to a Container (such as Panel) it should be possible to have a Panel which allows line breaks. The Laying Out Components Within a Container article from The Java Tutorials will provide general information on how Layout Managers work in Java and in particular the Creating a Custom Layout Manager will provide information on how to make a custom Layout Manager to apply to an Container. The behavior of the FlowLayout (the default Layout Manager for Panel) seems fairly close to the behavior you may be after. Adding functionality to line break seems like the missing piece. Suggestion: Perhaps the custom Layout Manager can have the ability to add a line break by having a Component that represents a line break which can be added to a Container by using the add() method. For example have a class constant Component in the custom Layout Manager such as (a hypothetical) LineBreakLayout.LINE_BREAK and adding that to the Container can tell the custom layout manager to move to the next line. Perhaps an implementation can be like: Panel p = new Panel(new LineBreakLayout()); p.add(new Label(""First Line"")); p.add(LineBreakLayout.LINE_BREAK); p.add(new Label(""Second Line"")); The above hypothetical LineBreakLayout will then render the first Label in one line and the second Label in the second line.  I found JTextPane which I had overlooked before for some reason. This class does what I need. Thanks for your help though. :)  UPDATE: I missed the request for hyperlink support. Don't know how to do that w/o using the EditorPane. JTextArea does exactly what you've described. JTextArea textArea = new JTextArea(); JScrollPanel sPane = new JScrollPane(textArea); I want to make the labels clickable so that they could behave like hyperlinks. Could I do it with TextArea? (I don't want to use the JEditorPane with HTML.) Any reason against the JEditorPane (I'm just curious)? Seemed to be slow and an overkill. Also I couldn't figure out how to store a Java object with each hyperlink on the page so that clicking on the link would do some action based on the object. The Hyperlink event listener calls back with the Element and URL from anchor tag which caused the hyperlink. You could probably create some sort of mapping from URL->Object to take actions Right I currently have something like that. I'm just wondering if there is a better solution without such a mapping table. ahhh good deal. Now you've got me interested in the solution ;) Do you really don't know how to store an object for the hiperlink? In java there is a data structure named: ""Map"" with various subclasses. You can have map.put( aLink anObject ); and get the object when some link is used. It seems to me very straight forward.  This sample is not from a panel that is a container but from a JLabel that is intended to show content. You could use HTML in your content and use a <br> on each break. You should programmatically calculate the breaks according with your rules on component resize. Here's the code: import javax.swing.*; import java.awt.*; public class Wrap { public static void main( String [] args ) { JFrame frame = new JFrame(""Wrap test""); String text = ""<html>This<br>is<br>a<br>multiline<br>label</html>""; frame.add( new JLabel( text ) ); frame.pack(); frame.setVisible( true ); } } Yes I don't feel like implementing a map that would map strings to objects. I can use JXHyperlink (from SwingX) to store an object ""into the link"" and have an action performed on the object when the link is clicked. The problem is only how to layout the links so that they wrap in a scrollable pane. As per the hyperlinks you can have the by using a mouse listener. You can get where the object has been clicked and use a map to execute the action. But as reading your comments on basszero answer I think you just don't feel like program it.",java gui swing
440745,A,"JSeparator with Title Do somebody knows a (free) horizontal JSeparator with a title label? Something like that: --- Title XYZ -------------------- Thank you in advance! Best Regards Thomas Hmm… without any testing and completely from the top of my head: JPanel panel = new JPanel(); panel.setBorder(new TitledBorder(""Title"")); menu.add(panel); Most Swing containers eat anything so that might even work. Another approach would be to create a custom component (maybe with a horizontal BoxLayout) and add a JSeparator a JLabel and another JSeparator to it then add it to the menu.  I found a solution: SwingX JXTitledSeparator. We already use SwingX in our project. I didn't know that SwingX provides a titled separator. @Bombe Thank you for your help.",java gui swing
339821,A,"Find composite location on screen I am implementing a on screen keyboard in Java for SWT and AWT. One important thing is to move the keyboard to a position where the selected text field can show and is not lying behind the on screen keyboard. For AWT i can detect the position of the current selected component with Component owner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner(); if (owner == null) { return; } Point ownerLocation = owner.getLocationOnScreen(); Dimension ownerSize = owner.getSize(); How can i implement the same logic in SWT? I get the current selected widget by adding a focuslistener to the SWT event queue. But when i call Point location = new Point(mTextWidget.getLocation().x mTextWidget.getLocation().y); Dimension dimension = new Dimension(mTextWidget.getSize().x mTextWidget.getSize().y); I will get the position relativ to the parent composite. How can i get the location of a special widget relativ to the complete screen? I believe the method Control.toDisplay() should be able to translate your coordinates into ones relative to the screen. This snippet may illustrate what you are after: package org.eclipse.jface.snippets; import org.eclipse.swt.SWT; import org.eclipse.swt.events.SelectionAdapter; import org.eclipse.swt.events.SelectionEvent; import org.eclipse.swt.graphics.Rectangle; import org.eclipse.swt.widgets.Button; import org.eclipse.swt.widgets.Display; import org.eclipse.swt.widgets.Shell; import org.eclipse.swt.widgets.Text; public class Bla { public static void main(String[] args) { Display display = new Display(); Shell shell = new Shell(display); final Text t = new Text(shellSWT.BORDER); t.setBounds(new Rectangle(101020030)); System.err.println(t.toDisplay(1 1)); Button b = new Button(shellSWT.PUSH); b.setText(""Show size""); b.setBounds(new Rectangle(2201010020)); b.addSelectionListener(new SelectionAdapter() { public void widgetSelected(SelectionEvent e) { System.err.println(t.toDisplay(1 1)); } }); shell.open(); while (!shell.isDisposed()) { if (!display.readAndDispatch()) display.sleep(); } display.dispose(); } } Perfect this is what im looking for. thanks @Mario: You are welcome. Glad I could help. Thank you buddy! Your answer brought an end to a morning of pain. @VonC: omg didn't realise that;) well sadly SWT/RCP still lives on through RAP. I'm longing for JavaFX as a desktop/web client crossover framework though... works perfectly thanks for bringing up toDisplay()! It will also accept a Point which is handy when translating component locations. I used it to translate event coordinates during a Drag&Drop session: composite.toDisplay(composite.getLocation()) @Gregor Nice to know this answer is still helpful... more than 5 years later.",java swing plugins swt awt
145863,A,Best Java/Swing browser component? What's the best cross platform Java Swing browser component at least able to play nicely in a swing interface (lightweight component ?) and able to run on MacOSX and Windows ? Things like : FlyingSaucer JDIC maybe others ? Highweight browser based http://code.google.com/p/jbrowser/. It use Canvas component. based on Mozilla 2.x  The Lobo Browser could be what you're looking for: http://lobobrowser.org/index.jsp It's GPL and renders JavaFX as well as HTML Edit JavaFX 2.0 comes with a Browser component: http://docs.oracle.com/javafx/2/webview/jfxpub-webview.htm Lobo is almost useless in that too many websites don't render right.  i belive this could help: http://djproject.sourceforge.net/ns/index.html I tried them all DJ is the best Well their webstart doesn't demo doesn't launch! Boo. isnt this windows only? It runs on Mac OS as well even on new Lion. I could not find a method to integrate it into netbeans so it seems useless.  you can go for Mozswing which have all the features that mozilla firefox 3.0 supports .. but the same is heavy. Mozswing has been dead for quite a while and only supports 32 bit.  We (@ WebRenderer) believe we have the best Java browser SDK - http://www.webrenderer.com/ WebRenderer is Swing based using Firefox as the underlying engine and supports HTML5 SVG etc on both 32 and 64bit systems. Welcome to Stack Overflow! Thanks for posting your answer! Please be sure to read the [FAQ on Self-Promotion](http://stackoverflow.com/faq#promotion) carefully. Thank you Andrew for your contribution. I checked the FAQ before posting my response and hence made sure to identify my association with WebRenderer. Whilst we are on this topic you may however wish to look at Vladimirs (of JXBrowser) posts (user #459345 and user#241010) above. Secondary I decided to post WebRenderer as it is not only relevant to the discussion but also for completeness. WebRenderer was previously posted on this Question as an answer back in 2009 by Lukasz (last name withheld) – http://goo.gl/8263M Lukasz Drukarz posted a link-only answer on July 1 09 and it was deleted because it was only a link. (as a 10k user I can see deleted posts). I saw Vladimir's post and would have left a comment for him as well but he has not been on the site for quite some time (over 2 years). This type of question and the answers that it generates are not generally preferred around here and this question has been protected and flagged for closure. This question is in fact quite problematic most'best to do this' question are since they (naturally) just attract links. The accepted answer to this question is in fact a link. Deleting self promotional answers on a question basically _asking_ for them is not going to help so I have closed this instead.,java swing browser
437413,A,How can jFrames be used inside of JavaFX? I just saw a article on Swing being used in JavaFX. How can an application that uses a jFrame to display graphics be ported into JavaFX? Also will the jButtons and jSliders work in the normal manner? I know this is a generic question but I know little of JavaFX and am curious about porting some desktop applications to the web via the JavaFX package. javafx file: import javax.swing.JComponent; import javafx.ext.swing.SwingComponent; class NewFxComponent extends SwingComponent { var comp: JComponent; public override function createJComponent():JComponent { return new OldJComponent(); } },java swing web-applications javafx
99626,A,"What's the definitive Java Swing starter guide and reference? Obviously the Java API reference but what else is there that you all use? I've been doing web development my entire career. Lately I've been messing around a lot with Groovy and I've decided to do a small application in Griffon just to experiment more with Groovy and also break some ground in desktop development. The only thing is I'm totally green when it comes to desktop apps. So world where's a good place to start? The Swing Tutorial is very good. Apart from that the Swing API is obviously the reference however it's also a treasure trove of fairly good source code! Add the API source to your IDE and you can jump directly to the implementation to all the Swing classes. This is a great way to explore the functionality see how various Swing components work and learn a good Swing ""style"". Furthermore it's great to be able to step through the API classes if things don't seem to work and you have no idea why! Adding the API source to the IDE has the additional benefit that you get all the JavaDocs along with it although all modern IDEs can also pull them from the net -- you do not want to program desktop Java without the documentation available from within the IDE! NetBeans and other IDEs do make the creation of IDEs very easy but be aware that there is a lot more to Swing than just containers and layout managers. In fact containers and layout managers are among the easier things and I'd recommend learning to use them by hand too. There is nothing at all wrong with using a GUI builder but in some cases it's overkill and then it's nicer to just quickly whip up a GUI from source. In other cases you need to be able to create a GUI dynamically and then GUI builders are no use at all! For creating very complex layouts from source I recommend FormLayout which has its own set of quirks but which does scale (in terms of programming effort) to very big frames and layouts. If you've only done Groovy so far you'll be surprised how well documented Swing and the rest of the Java API is and how well everything is integrated. It might also take some getting used to a different style of programming using the debugger more often and println-debugging less etc. There might also be some ""boiler-plate"" code that will be very annoying. ;) Enjoy. I've actually been doing a lot of Java development but all with a web front end (mostly Struts) so I'm very familiar with debugging and the usefulness of IDEs. I guess I'm looking for more of a refcard type resource that I can use to help until I become more familiar with the components and widets  When it comes to developing java desktop applications I would highly recommend using the IDE environment Netbeans. Especially when it comes to the development of Swing based applications.  The Sun Java tutorials are pretty good. I cannot vouch specifically for the Swing one as it has been ages since I've done any Swing development and I have not read it myself. Creating a GUI with JFC/Swing  I recommend you to play around with netbeans. It will allow you to build complete GUIs using only your mouse. Once you get familiar with Swing components start using the Java API. Thats how I started.  The O'Reilly Swing Book is a pretty good reference it has a good overview of general Swing concepts and covers each of the major classes. I used it recently when I had to refresh my memory on Swing.",java swing groovy griffon
286674,A,Remoting from a Swing app to GWT server To put it simple I've written a JSE Swing app that needs to talk to a GWT server I've written earlier. I absolutely love the way GWT does remoting between it's javascript and server sides and wish I could utilize this mechanism. Has anyone managed to use GWT-RPC this way? Should I just go Restlet instead? If you are doing Java-to-Java communication RMI would be simpler and more expedient. Serializing data to/from some XML or URL-based format doesn't add a lot of value. With EJB3 it is dead simple to deploy remote objects and to call them. You can then turn those EJBs into web services if you need to later but for Java-to-Java I can't think of a good reason to not use some sort of RMI-based communication. RMI does not work at the moment on AppEngine. I'm not sure if Google will fix that,java swing gwt remoting restlet
7269,A,"How can I identify in which Java Applet context I'm running without passing an ID? I'm part of a team that develops a pretty big Swing Java Applet. Most of our code is legacy and there are tons of singleton references. We've bunched all of them to a single ""application context"" singleton. What we now need is to create some way to separate the shared context (shared across all applets currently showing) and non-shared context (specific to each applet currently showing). However we don't have an ID at each of the locations that call to the singleton nor do we want to propagate the ID to all locations. What's the easiest way to identify in which applet context we're running? (I've tried messing with classloaders thread groups thread ids... so far I could find nothing that will enabled me to ID the origin of the call). Singletons are evil what do you expect? ;) Perhaps the most comprehensive approach would be to load the bulk of the applet in a different class loader (use java.net.URLClassLoader.newInstance). Then use a WeakHashMap to associate class loader with an applet. If you could split most of the code into a common class loader (as a parent of each per-applet class loader) and into the normal applet codebase that would be faster but more work. Other hacks: If you have access to any component you can use Component.getParent repeatedly or SwingUtilities.getRoot. If you are in a per-applet instance thread then you can set up a ThreadLocal. From the EDT you can read the current event from the queue (java.awt.EventQueue.getCurrentEvent()) and possibly find a component from that. Alternatively push an EventQueue with a overridden dispatchEvent method. This is (by far) the best collection of ideas I saw on the subject. I especially like the ""push a customized eventqueue"" - and I'm going to try it.  If I understand you correctly the idea is to get a different ""singleton"" object for each caller object or ""context"". One thing you can do is to create a thread-local global variable where you write the ID of the current context. (This can be done with AOP.) Then in the singleton getter the context ID is fetched from the thread-local to use as a key to the correct ""singleton"" instance for the calling context. Regarding AOP there should be no problem using it in applets since depending on your point-cuts the advices are woven at compile time and a JAR is added to the runtime dependencies. Hence no special evidence of AOP should remain at run time.  @Hugo regarding threadlocal: I thought about that solution. However from experiments I found two problems with that approach: Shared thread (server connections etc) are problematic. This can be solved though by paying special attention to these thread (they're all under my control and are pretty much isolated from the legacy code). The EDT thread is shared across all applets. I failed to find a way to force the creation of a new EDT thread for each applet. This means that the threadlocal for the EDT would be shared across the applets. This one I have no idea how to solve. Suggestions? You should be able to get a new EDT thread by using a different value for the archive tag. I think you can just add a random jar name to the end even if it does exist.",java swing applet
294813,A,Embedding web browser window in Java Does anyone know a way to open up an instance of the platform's (Windows/Linux/Mac) browser within a Swing window that is integrated into a Java application. No other actions would be preformed other than opening a given URL. Currently we open a new browser window because the Java embedded browsers have been insufficient. However from a user interaction standpoint this is less than desirable. I'm curious if a solution for this was part of the 1.6 Java release. So far my google-foo has not turned up anything of note. Are there any closed-source libraries that do this? Anything? WebRenderer is a commercial product that does this and does it well. However the last time I checked it was also pretty expensive (they wanted a $2 per-client fee for a large number of client and a several $1000 support contract).  JDIC Your link is broken. Although I am using Chrome so if it isn't it's only my problem. Downloaded from here: http://www.java2s.com/Code/Jar/j/Downloadjdic092jar.htm Documentation was here: 1) http://www.aswinanand.com/2006/03/two-minute-web-browser-in-java/  MozSwing it is free or JxBrowser or JExplorer ($500)  use JEditorPane A text component to edit various kinds of content. By default the following types of content are known: text/plain text/html and text/rtf or Lobo Lobo is an open source web browser that is written completely in Java. The OP asked about opening the platform browser.  We use JDIC as well and it works for us in Windows; however configuring it to work in *nix/OS X can be a pain as it simply utilizes a platform-native browser (supports IE and Mozilla) while on Linux/Mac you may have neither - that's the problem.,java swing browser embed
473540,A,"Correct way to use Actions to create menus toolbars and other components in Java The naive way of writing building a menu in a Java Swing app is to do something like: JMenu fileMenu = new JMenu(""File""); JMenuItem openItem = new JMenuItem(""Open...""); openItem.addActionListener(new ActionListener() { /* action listener stuff */ } ) fileMenu.addMenuItem(openItem); A more experienced developer will recognize that actions can be accessed through a variety of mechanisms - menus toolbar buttons maybe even other workflows in the system. That person is more likely to write: Action openAction = new AbstractAction(); openAction.setName(""Open...""); openAction.addActionListener(new ActionListener() { /* action listener stuff */ } ) ... JMenuItem openItem = new JMenuItem(openAction); My question is what is the best way to manage these Action objects so they can be used across menus toolbars etc? Create a factory class that returns specific actions? Declare all of the actions as private static final Action in some utility class? Take advantage of a Java application framework? Something else? Duplicate of http://stackoverflow.com/questions/448179/organizing-actions-in-a-swing-application#448195  as pointed out by Dave Ray. Action is a bad abstraction - an ActionListener welded to a poor man's Map. Certainly do not assign them to a static as they are mutable and also need some context to operate usefully. My general advice for GUI programming is to note that it is actually much the same as any other area of programming. Follow the usual good practices. Notably layering separation of concerns use (implementation) inheritance rarely and don't write a big ball of mud.  You can group all your abstractAction using the dedicated Map javax.swing.actionmap . See http://java.sun.com/javase/6/docs/api/javax/swing/ActionMap.html Moreover each JComponent has an internal actionMap (getActionMap()). class MyComponent extends JPanel { public static final String ACTION_NAME1=""my.action.1""; public MyComponent() { AbstractAction action= new AbstractAction() { ... } getActionMap().put(ACTION_NAME1action); ... menu.add(getActionMap().get(ACTION_NAME1)); } } Hope it helps  Create a base action for your application; this will help you IMMENSELY later on Do create actions as you have in your code instead favor subclasses of your base action To organize them it will depend on what you are doing with them and you may have some actions organized one way and others created a different way. It will all depend. What you want is to have a consistent way to locate/create an action in your code. Depending on your UI you may need to differentiate between ""static"" actions (i.e. stuff that's always available in your app such as the menu system) and dynamic actions that are created only on certain screens or in certain locations. In any case using concrete subclasses of your specialized base action will help you keep these things organized. What you don't want is to be specifying things like labels mnemonics and icons all over the place in your code.  Applications that I have developed that need to use that same actions across menus toolbars and other buttons have been done using Swing Application Framework. Swing Application Framework This framework will allow you to have a resource file where you can define all menu text tooltips and ICONS. I think the icons are the key you do not have to load them yourself. Also if you have any actions that you need to enable/disable you can override the method to control its state. The website is worth the read.  Also see this question which is pretty much the same as what you're asking.  Edit: I got the feeling people didn't believe this was possible or easy so I did it--took about an hour from scratch--would have taken 40 mins if I'd just used a single method as a target instead of reflecting it out to separate methods for each menu item. Here's the Tested source code. It works but is one big method and ugly--refactor it if you use it. I may fix it up a little over the next few days I've always wanted to have a copy of this to keep around to reuse. --- original post First of all remember to separate your code from data. That means you should NEVER type: new Menu(""File...""); The string ""File..."" is data. If you start thinking this way you will find that your question answers itself. First you need to build up some data. You need to get ""File..."" and ""Save"" into menus. I generally start off with a string array (which you can easily move to a file) new String[]{""File...""""+Save""""Load""...} This is one of the simpler patterns I've started out with. Then you can parse out the + sign and use it to mean ""Drop down a level in the menu when you add this one"" This is just a silly convention invent your own if you don't like it. The next step is binding that to code to run. You could have them all call the same method but what a pain in the ass (Giant switch statement). One possibility is to use reflection to bind a method name while you are reading in the data. Here's one solution (again it might not fit your tastes) new String[]{""File...[fileMenu]""""+Save[saveMenu]""""Load[loadMenu]""...} Then you parse out the thing in square braces reflectively hook it up to a method in your current class and you are set. There is a temptation I ALWAYS have at this point and I've learned to fight it because it NEVER works out. The temptation is to use the first set of data (""File..."") and manipulate it to fit some pattern and auomatically bind to your code (in this case remove all non-alpha chars make the first letter lower case and append ""Menu"" to get the correct method name). Feel free to try this it's very attractive and seems slick but be ready to abandon it when it doesn't meet some need (such as two menu items with the exact same name in different sub-menus). Another way would be if your language supports closures then you could actually create the file name and closure in the same place.. Anyway once you start coding like this you'll find that ALL your menu construction is in a single 10 line method and you can alter it to suit your needs. I had a case where I had to change a set of menus to a button hierarchy and I did it in 2 minutes. In the end you can use this pattern to set up the action objects easily and change how they are used easily (in a single location single line of code) so you experiment with them. There are many ways to use them but if you don't do what I'm recommending here you will end up having to re-implement across every menu item for every change which is really annoying--after a single change you will have wasted more time than if you had just implemented a data-driven solution in the first place. This really isn't hard code should take like an hour or two then you never have to write new Menu(""... again. Trust me this kind of tooling is just about always worth it. edit: I just about always code data-driven these days. Usually I'll prototype a few things the normal way recognize the pattern and refactor--and if you are refactoring correctly the data just about always factors out and what you're left with is beautiful tight and maintainable. I could do what I suggested above in less than 1/2 an hour (maybe an hour to do the reflective version). This is almost always just as long as it would do to use the unfactored version and from then on your savings multiply for every change. This is very similar to what people like about ruby except with ruby they seem to insert even more data into their code (which makes it awfully hard to extract your data from the code completely which is always a nice goal for internationalization). Hmm did I mention that if you're good at extracting your data like this i18n is virtually free? I suggest you just give it a try sometime and see what you think. Embedding the control in the strings is unnecessary if it makes you uncomfortable. I tend to use string/object arrays just because they are really easy to enter are still in the file while you are coding and are trivial to externalize later but if you like YML or XML or properties files use whatever you're comfortable with--just abstract your data from your code! You really code your GUI's like this? :| How can your GUI be fully factored without being data driven? There is so much repetitiveness. By the way String.split (used to be StringTokenizer) can help a lot with parsing these items. A string like ""File...|*|fileMethod"" can be parsed in a second (the * means ""top level"" in this case--you can make up your ""language"" on the fly--very like a Ruby DSL but easier)",java gui swing
160315,A,"How to check for key being held down on startup in Java I'm trying to write a resolution selection dialog that pops up when a program first starts up. To prevent boring the user I want to implement the fairly standard feature that you can turn off that dialog with a checkbox but get it back by holding down the alt key at startup. Unfortunately there is no obvious way to ask java whether a given key is currently being pressed. You can only register to be informed of new key presses via a KeyListener but that doesn't help if the keypress starts before the app launches. I don't know much about Java (mostly code in C#) but what about having a small loader program written in C or something that then launches your Java app with some parameters (like whether or not a certain key is down)? A difficult solution in that the program wants to run on Mac/Windows/Linux and that I don't know enough C. @Zarkonnen Does it have JVM bundled with the installer? If the answer is yes then the `KeyboadUtils.isPressed` would work on Windows Mac and Linux  public class LockingKeyDemo { static Toolkit kit = Toolkit.getDefaultToolkit(); public static void main(String[] args) { System.out.println(""caps lock2 = "" + kit.getLockingKeyState(KeyEvent.VK_CAPS_LOCK)); } } where should I import the Toolkit class from? has this solution overcome the problems described in this blog post? It kind of describes this method as unreliable but it's old.... http://weblogs.java.net/blog/2007/11/02/log-me-log-me-out  The original question seems to be not answered. The proposed method determines the locking key state like CapsLock ScrollLock etc. So it would not work for Alt pressed state. Consider the following code: com.sun.jna.platform.KeyboardUtils.isPressed(java.awt.event.KeyEvent.VK_ALT); The only problem is that this class is an internal Sun's JDK class and not likely to be available in any other JVM. Depend on your project it may or may not be acceptable. Internally it calls into User32.DLL on Windows: User32.INSTANCE.GetAsyncKeyState(...)  Well there are two types of key press detection: event based and polling. If you poll the keyboard for KEY_PRESSED on startup (through a loop with a sleep.thread(timeInMs) constantly checking if your key is down) then you can detect if it's already pressed on startup.  import java.awt.*; import java.awt.event.*; import javax.swing.JFrame; public class LockingKeyDemo { static Toolkit kit = Toolkit.getDefaultToolkit(); public static void main(String[] args) { JFrame frame = new JFrame(); frame.addWindowListener(new WindowAdapter() { public void windowActivated(WindowEvent e) { System.out.println(""caps lock1 = "" + kit.getLockingKeyState(KeyEvent.VK_CAPS_LOCK)); try { Robot robot = new Robot(); robot.keyPress(KeyEvent.VK_CONTROL); robot.keyRelease(KeyEvent.VK_CONTROL); } catch (Exception e2) { System.out.println(e2); } System.out.println(""caps lock2 = "" + kit.getLockingKeyState(KeyEvent.VK_CAPS_LOCK)); } }); frame.addKeyListener(new KeyAdapter() { public void keyReleased(KeyEvent e) { System.out.println(""caps lock3 = "" + kit.getLockingKeyState(KeyEvent.VK_CAPS_LOCK)); } }); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(200 200); frame.setLocationRelativeTo(null); frame.setVisible(true); } }  So it appears that you can do this but only for caps lock et al. Hence I've switched to using caps lock for this purpose. Not perfect but OK.",java swing keyboard key awt
210214,A,"Learning Java Swing? I am a veteran C/C++ programmer who has used Win32 MFC and WTL to write Windows apps for many years. I have some very basic Java experience but haven't done anything with a UI. I want to start learning how to write desktop apps in Java and from what I can gather Swing is the way to go. My question is: where do I start? Can anyone recommend any decent books? (I do like a good programming book). I've played with Netbeans a little in the past (and was impressed with what I saw) so I'd like to use that as my Java IDE of choice if that makes any difference. You should definitely see the SwingSet2 demo which comes with jdk. You can see the sources there and it is a great reference as an ""how-to"" about Swing objects. If I start to use a new Swing object in my application I just check those sources to see my options.  Once you get your feet wet I highly recommend the book ""Swing Hacks"" to harness the full power of swing.  I also like the O'Reilly Java Swing book; it's been useful to me. Good descriptions of concepts good references clear concise and to the point. That would be my recommendation. It's the first book I get when searching amazon for ""java swing"". Also amusingly that search will get you a porch swing made from wood from the island of Java...  That's exactly how I came to Java/Swing from C++/MFC etc. I have to agree that Swing is the only way to go there's a lot to learn in terms of concepts but if you know MFC inside out it will help (because the fundamentals aren't that different they're both event driven windowing systems except one of them is a bag of spanners held together with string)... I started with a copy of an IDE (Jbuilder in my case) and worked through the Sun Java Swing Tutorials Also this beginner's guide is pretty useful for the big picture.  This question and this question is very similar to yours. There are a ton of good answers here too.  The Swing Tutorial is very nice. That's how I taught myself swing.  Netbeans is a decent environment. Check out the O'Reilly Java Swing (Marmoset on cover) for a pretty good look at the ins and outs. However My edition is 2001 and I don't know if the more current ones are any good or not. The big gotcha in Swing is: Don't do any significant work in the listeners. And don't access swing components from any thread other than the EDT (SwingUtilities.invoke* and SwingWorker are your friends) +1 jsight. Even seemingly ""safe"" calls such as ""setVisible()"" on a top-level frame are not necessarily safe from outside the EDT.  If your intention is to use NetBeans and its powerful GUI building capabilities I'd recommend trying to do a lot of hand coding to start with. When I conduct interview we get a lot of people who might be able to use a GUI builder but that is not quite the same thing as 'knowing' Swing.  If you really want a good book and not an eBook or a pdf Java : The complete reference by Herbert Schildt is the best. It is like an encyclopedia and explains a lot of concepts including swing clearly.  You can start to learn it by doing simple apps using Netbeans GUI editor which gives you a quick view on your app. Meanwhile Swing is very flexible and powerful. Since you can do almost anything in Swing this advantage leads to somehow deeper learning curve. To learn more you need some good book (like java swing or sun's swing tutorial on their web) and good understanding of MVC design pattern Java bean style event handling customerized rendered etc. Anyway Swing is of much better OOP and MVC than the old age mixed MFC library. You should be able to learn a bit on how to design a clean a extensible app through the learning of Swing.  I wrote a site as part of a project whilst at University that taught students how to learn Swing through example and exercises (with a bunch of screenshots). Although I don't have personal access to it any longer Heriot Watt University still host it. You can find the link here.. The Guidebook - Lessons in Swing Might get you started at least :)  Once you have mastered the basics the de-facto standard book for top notch swing GUIs is Filthy Rich Clients. I think your link is not what you think. Corrected thanks for the heads up.  I'm sorry but what I'd recommend is to stay clear of Swing altogether X-) From my point of view it's veeery verbose (even for Java) but more than anything it has a confusing and unintuitive API (repaint()/refresh() comes to mind) that will haunt you with subtle bugs every day. I'd try SWT instead.. Clearer better looking and has better performance too. What are your credentials? How big applications have you build in Swing and SWT? Are you talking about the core APIs or about certain RCP layers on top of them? Hi :) I've been a Java dev for 3yrs my team was to build a rich client designed to manage small-to-mid retail stores at every level. Eventually we dropped it and went for a web UI instead (management decision). I knew my answer would be downvoted I just had to share the pain Swing did to us :D  Just another book recommendation: Java Swing by Matthew Robinson und Pavel Vorobiev It's the only book i read on Swing so far so i can't compare it to the other ones. On the other hand it's the only book i needed so far so it can't be bad.",java swing
115103,A,"How do you implement position-sensitive zooming inside a JScrollPane? I am trying to implement position-sensitive zooming inside a JScrollPane. The JScrollPane contains a component with a customized 'paint' that will draw itself inside whatever space it is allocated - so zooming is as easy as using a MouseWheelListener that resizes the inner component as required. But I also want zooming into (or out of) a point to keep that point as central as possible within the resulting zoomed-in (or -out) view (this is what I refer to as 'position-sensitive' zooming) similar to how zooming works in google maps. I am sure this has been done many times before - does anybody know the ""right"" way to do it under Java Swing?. Would it be better to play with Graphic2D's transformations instead of using JScrollPanes? Sample code follows: package test; import java.awt.*; import java.awt.event.*; import java.awt.geom.*; import javax.swing.*; public class FPanel extends javax.swing.JPanel { private Dimension preferredSize = new Dimension(400 400); private Rectangle2D[] rects = new Rectangle2D[50]; public static void main(String[] args) { JFrame jf = new JFrame(""test""); jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); jf.setSize(400 400); jf.add(new JScrollPane(new FPanel())); jf.setVisible(true); } public FPanel() { // generate rectangles with pseudo-random coords for (int i=0; i<rects.length; i++) { rects[i] = new Rectangle2D.Double( Math.random()*.8 Math.random()*.8 Math.random()*.2 Math.random()*.2); } // mouse listener to detect scrollwheel events addMouseWheelListener(new MouseWheelListener() { public void mouseWheelMoved(MouseWheelEvent e) { updatePreferredSize(e.getWheelRotation() e.getPoint()); } }); } private void updatePreferredSize(int n Point p) { double d = (double) n * 1.08; d = (n > 0) ? 1 / d : -d; int w = (int) (getWidth() * d); int h = (int) (getHeight() * d); preferredSize.setSize(w h); getParent().doLayout(); // Question: how do I keep 'p' centered in the resulting view? } public Dimension getPreferredSize() { return preferredSize; } private Rectangle2D r = new Rectangle2D.Float(); public void paint(Graphics g) { super.paint(g); g.setColor(Color.red); int w = getWidth(); int h = getHeight(); for (Rectangle2D rect : rects) { r.setRect(rect.getX() * w rect.getY() * h rect.getWidth() * w rect.getHeight() * h); ((Graphics2D)g).draw(r); } } } Added bounty to see if I can get a full answer (ideally: the code snippet that when added above answers the question). Tested this seems to work... private void updatePreferredSize(int n Point p) { double d = (double) n * 1.08; d = (n > 0) ? 1 / d : -d; int w = (int) (getWidth() * d); int h = (int) (getHeight() * d); preferredSize.setSize(w h); int offX = (int)(p.x * d) - p.x; int offY = (int)(p.y * d) - p.y; setLocation(getLocation().x-offXgetLocation().y-offY); getParent().doLayout(); } Update Here is an explanation: the point p is the location of the mouse relative to the FPanel. Since you are scaling the size of the panel the location of p (relative to the size of the panel) will scale by the same factor. By subtracting the current location from the scaled location you get how much the point 'shifts' when the panel is resized. Then it is simply a matter of shifting the panel location in the scroll pane by the same amount in the opposite direction to put p back under the mouse cursor. Exactly what I was looking for. Thanks!  Your MouseWheelListener also has to locate the cursor move it to the center of the JScrollPane and adjust the xmin/ymin and xmax/ymax of the content to be viewed. Yes that is true - it is also what I was trying to do in the first place (the cursor is located at 'p' and adjusting those bounds correctly is what I do not know how to do).  I think smt like this should be working...  private void updatePreferredSize(int n Point p) { double d = (double) n * 1.08; d = (n > 0) ? 1 / d : -d; int w = (int) (getWidth() * d); int h = (int) (getHeight() * d); preferredSize.setSize(w h); // Question: how do I keep 'p' centered in the resulting view? int parentWdt = this.getParent( ).getWidth( ) ; int parentHgt = this.getParent( ).getHeight( ) ; int newLeft = p.getLocation( ).x - ( p.x - ( parentWdt / 2 ) ) ; int newTop = p.getLocation( ).y - ( p.y - ( parentHgt / 2 ) ) ; this.setLocation( newLeft newTop ) ; getParent().doLayout(); } EDIT: Changed a couple things. Your code does not keep the point 'p' centered in the resulting view (for an example try zooming near the bottom-right corner) even after changing `int newTop = p.y - w / 2;` to `int newTop = p.y - h / 2;`. Please test code before proposing it as an answer. The updated code seems to zoom into the top-left corner (java 6 on XP) not into wherever the mouse pointer is pointing. I am using the same test program listed in the question.  Here's a minor refactoring of @Kevin K's solution: private void updatePreferredSize(int wheelRotation Point stablePoint) { double scaleFactor = findScaleFactor(wheelRotation); scaleBy(scaleFactor); Point offset = findOffset(stablePoint scaleFactor); offsetBy(offset); getParent().doLayout(); } private double findScaleFactor(int wheelRotation) { double d = wheelRotation * 1.08; return (d > 0) ? 1 / d : -d; } private void scaleBy(double scaleFactor) { int w = (int) (getWidth() * scaleFactor); int h = (int) (getHeight() * scaleFactor); preferredSize.setSize(w h); } private Point findOffset(Point stablePoint double scaleFactor) { int x = (int) (stablePoint.x * scaleFactor) - stablePoint.x; int y = (int) (stablePoint.y * scaleFactor) - stablePoint.y; return new Point(x y); } private void offsetBy(Point offset) { Point location = getLocation(); setLocation(location.x - offset.x location.y - offset.y); }",java swing user-interface zoom
178667,A,"Does JEditorPane have Charset problems when showing HTML? I have the following code: import javax.swing.JEditorPane; import javax.swing.JFrame; import javax.swing.JScrollPane; import javax.swing.ScrollPaneConstants; public class ScratchPad { public static void main(String args[]) throws Exception { String html =""<html>""+ ""<head>""+ ""<meta http-equiv=\""Content-Type\"" content=\""text/html; charset=ISO-8859-1\""/>""+ // this is the problem right here ""<title>Error 400 BAD_REQUEST</title>""+ ""</head>""+ ""<body>""+ ""<h2>HTTP ERROR: 400</h2><pre>BAD_REQUEST</pre>""+ ""<p>RequestURI=null</p>""+ ""<p><i><small><a href=\""http://jetty.mortbay.org\"">Powered by jetty://</a></small></i></p>""+ ""</body>""+ ""</html>""; JFrame f = new JFrame(); JEditorPane editor = new JEditorPane(); editor.setEditable( false ); editor.getDocument().putProperty( ""Ignore-Charset"" ""true"" ); // this line makes no difference either way editor.setContentType( ""text/html"" ); editor.setText( html ); f.add( new JScrollPane(editor ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER) ); f.pack(); f.setVisible( true ); } } If you run it you'll notice the frame is blank. However if I remove the ""; charset=ISO-8859-1"" from the meta tag the HTML shows up. Any ideas why and what I can do to prevent this (other than manually hacking the HTML string over which I have no control...). Edit #1 - putProperty( ""Ignore-Charset"" ""true"" ) makes no difference unfortunately. Use the follow line before setText and after setContentType. editor.getDocument().putProperty(""IgnoreCharsetDirective"" Boolean.TRUE); This is one of the mystic undocumented features. setContentType create a new Document that it has no effect if you set it before.  When I run the code I can only see the HTML text when I delete the meta line. Maybe it has something to do with character settings of the system it runs on.",java html swing jeditorpane
113464,A,"Java User Interface Specification Java supplies standard User Interface guidelines for applications built using Java Swing. The basic guidelines are good but I really feel the look and feel is really boring and outdated. Is anyone aware of a publicly available Java User Interface Guide that has better look & feel guidelines than the Sun provided guidelines? the apple developer guide has a human computer interface guide - http://developer.apple.com/documentation/UserExperience/Conceptual/AppleHIGuidelines/XHIGIntro/chapter_1_section_1.html#//apple_ref/doc/uid/TP30000894-TP6 . Even though its targeted at the mac platform you could learn something from it - its the reason why so many mac apps are pleasant to use as well as aesthetically pleasing!  Along the line of Chii's answer I would recommend taking a look at the Windows Vista User Experience Guidelines for general tips on making user interfaces. Although the name (""Windows Vista User Experience Guidelines"") and source (Microsoft) may suggest that it only contains Windows-centric tips and advice it does offer good general tips and directions that can be used when designing interfaces for non-Windows applications as well. The Design Principles sections address some points to keep in mind when designing an effective user interface. For example bullet three of How to Design a Great User Experience says: Don't be all things to all people Your program is going to be more successful by delighting its target users than attempting to satisfy everyone. These are the kinds of tips that apply to designing user interfaces on any platform. Of course there are also Windows-specific guidelines as well. I believe one of the biggest reasons why look and feel of Swing applications seems ""boring"" and ""outdated"" is due to the platform-independent nature of Java. In order for the graphical user interfaces to work on several different platforms Java needs to have facilities to adapt the user interface to the different host operating systems. For example various platforms have various sizes for windows buttons and other visual components so absolute positioning does not work too well. To combat that problem Swing uses Layout Managers which (generally) use relative positioning to place the visual components on the screen. Despite these ""limitations"" of building graphical user interfaces for Java I think that using tips from guidelines that are provided by non-Sun sources and non-Java-specific sources can still be a good source of information in designing and implementing an user interface that is effective. After all designing an user interface is less about programming languages and more about human-machine interaction.  I don't think there are any other complete guidelines. But if you are not talking about the spacing/positioning of components (I don't think that part of Look And Feel Design Guidelines is outdated) but only about the look and feel good starting points are singlabx / swingx: http://swinglabs.org http://swinglabs.org/docs/presentations/2007/DesktopMatters/FilthyRichClients.pdf http://parleys.com/display/PARLEYS/Home#slide=1;talk=7643;title=Filthy%20Rich%20Clients and JGoodies: http://www.jgoodies.com/articles/index.html http://www.jgoodies.com/articles/efficient%20swing%20design.pdf  You have many LNF (Look And Feel) displayed here but they have not exactly a 'Java User Guide' Provided. However MigLayout does follow closely the main User Interface standards that exist out there (including some obcure points of button order): For instance the OK and Cancel buttons have different order on Windows and Mac OS X. While other layout managers use factories and button builders for this it is inherently supported by MigLayout by just tagging the buttons. One just tags the OK button with ""ok"" and the Cancel button with ""cancel"" and they will end up in the correct order for the platform the application is running on if they are put in the same grid cell. Example on Mac:",java swing user-interface
128016,A,Java Swing: how do I set the maximum width of a JTextField? I'm writing a custom file selection component. In my UI first the user clicks a button which pops a JFileChooser; when it is closed the absolute path of the selected file is written to a JTextField. The problem is absolute paths are usually long which causes the text field to enlarge making its container too wide. I've tried this but it didn't do anything the text field is still too wide: fileNameTextField.setMaximumSize(new java.awt.Dimension(450 2147483647)); Currently when it is empty it is already 400px long because of GridBagConstraints attached to it. I'd like it to be like text fields in HTML pages which have a fixed size and do not enlarge when the input is too long. So how do I set the max size for a JTextField ? It may depend on the layout manager your text field is in. Some layout managers expand and some do not. Some expand only in some cases others always. I'm assuming you're doing filedNameTextField = new JTextField(80); // 80 == columns If so for most reasonable layouts the field should not change size (at least it shouldn't grow). Often layout managers behave badly when put into JScrollPanes. In my experience trying to control the sizes via setMaximumSize and setPreferredWidth and so on are precarious at best. Swing decided on its own with the layout manager and there's little you can do about it. All that being said I have no had the problem you are experiencing which leads me to believe that some judicious use of a layout manager will solve the problem.  I solved this by setting the maximum width on the container of the text field using setMaximumSize. According to davetron's answer this is a fragile solution because the layout manager might disregard that property. In my case the container is the top-most and in a first test it worked. Yeah that is unfortunately how it goes with Swing. It's a nice toolkit in many ways but the unpredictability of the components in different layout managers is really annoying.  Don't set any of the sizes on the text field. Instead set the column size to a non-zero value via setColumns or using the constructor with the column argument. What is happening is that the preferred size reported by the JTextComponent when columns is zero is the entire amount of space needed to render the text. When columns is set to a non-zero value the preferred size is the needed size to show that many standard column widths. (for a variable pitch font it is usually close to the size of the lower case 'm'). With columns set to zero the text field is requesting as much space as it can get and stretching out the whole container. Since you already have it in a GridBagLayout with a fill you could probably just set the columns to 1 and let the fill stretch it out based on the other components or some other suitably low number. I recommend this approach when using `FlowLayout`.,java swing
271888,A,"Best practice for handling null strings from database (in Java) In my database application I sometimes have to deal with null strings in the database. In most cases this is fine but when it comes do displaying data in a form the Swing components - using JTextField for example - cannot handle null strings. (.setText(null) fails) (EDIT: I just noticed that JTextField actually accepts a null string but the question remains for all other cases where unexpected null values can lead to problems.) The null values have no special meaning they can (must) be treated as empty strings. What is the best practice to deal with this problem? Unfortunatly I cannot change the database. Checking every value if it is null before calling setText()? Adding a try-catch handler to every setText() call? Introducing a static method which filters all null strings? Replace all null values to empty strings immediatly after reading from the database? ... [your suggestions] You could extend or wrap JTextField and overwrite the setText() method to replace NULL with an empty String. Yes but actually ""NULL"" can be legal value in DB ;> Indeed that is why you would wrap setText() & getText() so you can interchange null with """" for setText and vice versa for getText.  Use Beans Binding API to bind values from your entity objects to your SWING Widgets. Beanins Binding will transparently handle null values and will not replace the null with an empty string.  As Ruben said I would extend the JTextField to overwrite the setText() method and replace NULL with the empty string. However I would also overwrite the getText() method to overwrite empty string with NULL so that when you are saving back into the database you do not overwrite a null value in there with the empty string.  From a SQL angle try: select ISNULL(column_name'') from ... Someone just marked this answer down :(. While I accept that the question asks about Java. This solution can be used to handle ALL unexpected null values from a database. and as the question states ""unfortunately I can't change the database"" it implies that non java answers are also acceptable.  I think all your answers are reasonable but since you tagged this ""best practices"" I'd like to remind you of the null object design pattern. Wherever it seems worth the effort for whatever class need the protection write special instantiation code for a ""null"" object of that class. The idea is this ""null"" object is real and can behave appropriately no matter what you ask it to do. Your null ""String"" object could provide whatever you want as it's value. This pattern also means you can get rid of lots of null checks and the code is more robust. It does use up a bit of CPU sending messages to nulls and having them do nothing so it is less desirable when a large percentage of objects are expected to be null.  If you are using any ORM tool or somehow you map your DB fields to Java bean you can allways have:  public void setFoo(String str) { this.foo = str != null ? str : """"; } On Oracle i don't believe this is an issue. It may depend on settings but our 10g implementation interprets empty strings as nulls. Other DBMS's and perhaps other configurations may vary. You do have to be careful when writing back the data to the DB since you will be inserting an empty String instead of the NULL value! I think that's the best solution but I will change the getter. (I guess that's what you meant all along) I think Marko ment the setter since that is used by most ORM tools e.g. hibernate to put the values from the database into the instances. When using the getter you still need to be carefull for side effects in the database when using an ORM tool. FWIW I'd flip the inequality to an equality test. Just another best practice (or opinion depending on how you look at it). public void setFoo(String str) { this.foo = str == null ? """" : str; } Then how would you check whether the value is empty in the DB or NULL from your Entity object?  If you can add a default value - empty string - for a field in DB . Yes that would be best but unfortunatly I cannot do that :(",java database swing
299495,A,"How to add an image to a JPanel? I have a JPanel to which I'd like to add JPEG and PNG images that I generate on the fly. All the examples I've seen so far in the Swing Tutorials specially in the Swing examples use ImageIcons. I'm generating these images as byte arrays and they are usually larger than the common icon they use in the examples at 640x480. Is there any (performance or other) problem in using the ImageIcon class to display an image that size in a JPanel? What's the usual way of doing it? How to add an image to a JPanel without using the ImageIcon class? Edit: A more careful examination of the tutorials and the API shows that you cannot add an ImageIcon directly to a JPanel. Instead they achieve the same effect by setting the image as an icon of a JLabel. This just doesn't feel right... I'm doing something very similar in a private project I'm working on. Thus far I've generated images up to 1024x1024 without any problems (except memory) and can display them very quickly and without any performance problems. Overriding the paint method of JPanel subclass is overkill and requires more work than you need to do. The way I do it is: Class MapIcon implements Icon {...} OR Class MapIcon extends ImageIcon {...} The code you use to generate the image will be in this class. I use a BufferedImage to draw onto then when the paintIcon() is called use g.drawImvge(bufferedImage); This reduces the amount of flashing done while you generate your images and you can thread it. Next I extend JLabel: Class MapLabel extends Scrollable MouseMotionListener {...} This is because I want to put my image on a scroll pane I.e. display part of the image and have the user scroll around as needed. So then I use a JScrollPane to hold the MapLabel which contains only the MapIcon. MapIcon map = new MapIcon (); MapLabel mapLabel = new MapLabel (map); JScrollPane scrollPane = new JScrollPane(); scrollPane.getViewport ().add (mapLabel); But for your scenario (just show the whole image every time). You need to add the MapLabel to the top JPanel and make sure to size them all to the full size of the image (by overriding the GetPreferredSize()).  JLabel imgLabel = new JLabel(new ImageIcon(""path_to_image.png""));  You can avoid rolling your own Component subclass completely by using the JXImagePanel class from the free SwingX libraries. Download  I think there is no need to subclass of anything. Just use a Jlabel. You can set an image into a Jlabel. So resize the Jlabel then fill it with an image. Its OK. This is the way I do. Simpler by a long shot.  If you are using JPanels then are probably working with Swing. Try this: BufferedImage myPicture = ImageIO.read(new File(""path-to-file"")); JLabel picLabel = new JLabel(new ImageIcon(myPicture)); add(picLabel); The image is now a swing component. It becomes subject to layout conditions like any other component. +1 Excellent code. +1 that. clean. Nice just used that code myself. +1. Nice one.. Just used this code.. +1 how to scale the image according to the size of the JLabel? Nice code! I'm not much experienced with Swing but I can't get it work. Does anybody tried it in jdk 1.6.0_16? @ATorras I know you asked this a while back but if any other newbies had my issues remember to picLabel.setBounds();  JPanel is almost always the wrong class to subclass. Why wouldn't you subclass JComponent? There is a slight problem with ImageIcon in that the constructor blocks reading the image. Not really a problem when loading from the application jar but maybe if you're potentially reading over a network connection. There's plenty of AWT-era examples of using MediaTracker ImageObserver and friends even in the JDK demos.  There shouldn't be any problem (other than any general problems you might have with very large images). If you're talking about adding multiple images to a single panel I would use ImageIcons. For a single image I would think about making a custom subclass of JPanel and overriding its paintComponent method to draw the image. (see 2)  Fred Haslam's way works fine. I had trouble with the filepath though since I want to reference an image within my jar. To do this I used: BufferedImage wPic = ImageIO.read(this.getClass().getResource(""snow.png"")); JLabel wIcon = new JLabel(new ImageIcon(wPic)); Since I only have a finite number (about 10) images that I need to load using this method it works quite well. It gets file without having to have the correct relative filepath.  Here's how I do it (with a little more info on how to load an image): import java.awt.Graphics; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.util.logging.Level; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.JPanel; public class ImagePanel extends JPanel{ private BufferedImage image; public ImagePanel() { try { image = ImageIO.read(new File(""image name and path"")); } catch (IOException ex) { // handle exception... } } @Override protected void paintComponent(Graphics g) { super.paintComponent(g); g.drawImage(image 0 0 null); // see javadoc for more info on the parameters } } Opps... put the example together a little to quick... @Dutow - Good call I edited the answer. Thanks. I tried using this with some custom buttons on top and found that there were strange redrawing issues. Fred Haslam's answer below did not suffer from this problem. -1 for invalid implementation of paintComponent (@Dogmatixed most probably that's why you are having those redrawing issues) - it _must_ garantee to cover its complete area if it reports being opaque (which is the default) easiest achieved by calling super.paintComponent @kleopatra Thanks I didn't realize that... according to the javadoc: ""Further if you do not invoker super's implementation you must honor the opaque property that is if this component is opaque you must completely fill in the background in a non-opaque color. If you do not honor the opaque property you will likely see visual artifacts."" I'll update the answer now. thanks for the edit reverted my vote :-) Please always respect the `Principle of Encapsulation` while overriding methods of the Super Class the Access Specifier of the `paintComponent(...)` method is `protected` and not `public` :-) How do you handle errors in this implementation? I mean if an error is thrown in the constructor not only will you have to deal not just with that but you'll also have to deal with `NullPointerException`s that paintComponent() will throw (and will throw as many times as it is called). Wait nevermind. `drawImage()` doesn't throw a NPE when `img` is null.  You can subclass JPanel - here is an extract from my ImagePanel which puts an image in any one of 5 locations top/left top/right middle/middle bottom/left or bottom/right: protected void paintComponent(Graphics gc) { super.paintComponent(gc); Dimension cs=getSize(); // component size gc=gc.create(); gc.clipRect(insets.leftinsets.top(cs.width-insets.left-insets.right)(cs.height-insets.top-insets.bottom)); if(mmImage!=null) { gc.drawImage(mmImage(((cs.width-mmSize.width)/2) +mmHrzShift)(((cs.height-mmSize.height)/2) +mmVrtShift)null); } if(tlImage!=null) { gc.drawImage(tlImage(insets.left +tlHrzShift)(insets.top +tlVrtShift)null); } if(trImage!=null) { gc.drawImage(trImage(cs.width-insets.right-trSize.width+trHrzShift)(insets.top +trVrtShift)null); } if(blImage!=null) { gc.drawImage(blImage(insets.left +blHrzShift)(cs.height-insets.bottom-blSize.height+blVrtShift)null); } if(brImage!=null) { gc.drawImage(brImage(cs.width-insets.right-brSize.width+brHrzShift)(cs.height-insets.bottom-brSize.height+brVrtShift)null); } }",java image swing jpanel
103179,A,"How do I set an Application's Icon Globally in Swing? I know I can specify one for each form or for the root form and then it'll cascade through to all of the children forms but I'd like to have a way of overriding the default Java Coffee Cup for all forms even those I might forget. Any suggestions? Extend the JDialog class (for example name it MyDialog) and set the icon in constructor. Then all dialogs should extend your implementation (MyDialog).  There is another way but its more of a ""hack"" then a real fix.... If you are distributing the JRE with your Application you could replace the coffee cup icon resource in the java exe/dll/rt.jar wherever that is with your own icon. It might not be very legit but it is a possibility... Agreed. It'd work but I'm not feeling that desperate. :) If it's the only way it doesn't matter if you're desperate or not :) My company does it through InstallAnywhere's `executableIcon` property. I think it does it by replacing `JavaCup.png` in `jre/lib/resources.jar`.  Also if you have one ""main"" window and set its icon properly as long as you use that main window as the ""parent"" for any Dialog classes they will inherit the icon. Any new Frames need to have the icon set on them though. as Paul/Andreas said subclassing JFrame is going to be your best bet.  You can make the root form (by which I assume you mean JFrame) be your own subclass of JFrame and put standard functionality in its constructor such as:  this.setIconImage(STANDARD_ICON); You can bundle other standard stuff in here too such as memorizing the frame's window metrics as a user preference managing splash panes etc. Any new frames spawned by this one would also be instances of this JFrame subclass. The only thing you have to remember is to instantiate your subclass instead of JFrame. I don't think there's any substitute for remembering to do this but at least now it's a matter of remembering a subclass instead of a setIconImage call (among possibly other features). Not ideal but it works. There should be a way of doing this for all forms in an app. Some forms might be spawned by third party tools etc. Yes there *should* be a way but sun hasn't provided one. Its probably a sev3 enhancement in bugparade somewhere...  There may be a way of doing it using the Look and Feel overriding the UIDefaults. I'm just not sure which index would do.",java swing
354866,A,Swing JButton: Icon above Text How can I create a JButton in Swing with the icon above the text? just do this:   button.setVerticalTextPosition(SwingConstants.BOTTOM); button.setHorizontalTextPosition(SwingConstants.CENTER);,java swing jbutton
188944,A,Java/Swing: How to draw a simple bar graph in a custom renderer for a JLabel I would like to dynamically create a minimal transparent bar graph to display over a canvas. I was thinking of using a custom renderer for a JButton or a JLabel; but how do I draw my bar graph in this renderer? The standard way would be to create a subclass (possibly an anonymous one if you prefer) of JLabel or JPanel and overload the paintComponent(Graphics g) method. You can then use the passed Graphics object to draw whatever rectangles (and so forth) that you need. For more information on that part of it refer to the Java 2D Graphics Trail. EDIT: Does that answer the question? I just re-read it and now I'm not sure. Your answer is OK... I was thinking of a custom renderer as for table cells but this may not exist for JLabel &/or JButtons. thanks julien Okay. And no there isn't a custom renderer for JLabel or JButton (at least not in standard Swing; there might be third-party libraries which offer something similar). To add any JComponent to a JTable you can extend the DefaultTableCellRenderer and over ride the getTableCellRendererComponent. Just return an instance of your BarGraph object. You have to set the cellRenderder on the JTable also to your subclassed DefaultTableCellRenderer.,java swing custom-renderer
386792,A,"In Java Swing how do you get a Win32 window handle (hwnd) reference to a window? In Java 1.4 you could use ((SunToolkit) Toolkit.getDefaultToolkit()).getNativeWindowHandleFromComponent() but that was removed. It looks like you have to use JNI to do this now. Do you have the JNI code and sample Java code to do this? I need this to call the Win32 GetWindowLong and SetWindowLong API calls which can be done via the Jawin library. I would like something very precise so I can pass a reference to the JDialog or JFrame and get the window handle. Swing transparency using JNI may be related. You don't have write any C/JNI code. From Java: import sun.awt.windows.WComponentPeer; public static long getHWnd(Frame f) { return f.getPeer() != null ? ((WComponentPeer) f.getPeer()).getHWnd() : 0; } Caveats: This uses a sun.* package. Obviously this is not public API. But it is unlikely to change (and I think less likely to break than the solutions above). This will compile and run on Windows only. You would need to turn this into reflection code for this to be portable. mike rodent asked "" Thanks this looks really good... but with WComponentPeer I'm getting: ""Access restriction on required library rt.jar"" - rt.jar is part of my OpenOffice API imports. Given that sun.awt.windows classes aren't public how do you use them like this?"" @mike: reflection might help: http://comments.gmane.org/gmane.comp.video.mplayer.user/58067 @Jared you might be able to compile it in windows just then never run that particular code in other OS's and it might work.  Both of the above methods work just fine but both return a HWND as a java int (32bits). this is fine for a 32 bit platform but it will be unlikely that your application will be functional on a 64bit platform. I would change the return types to longs (64bits) as this will behave correctly on both 64 and 32bit systems (you'll only need to recompile the DLL) Thank you very much.  The following code lets you pass a Component to get the window handle (HWND) for it. To make sure that a Component has a corresponding window handle call isLightWeight() on the Component and verify that it equals false. If it doesn't try it's parent by calling Component.getParent(). Java code: package win32; public class Win32 { public static native int getWindowHandle(Component c); } Header file main.h: /* DO NOT EDIT THIS FILE - it is machine generated */ #include <jni.h> /* Header for class win32_Win32 */ #ifndef _Included_win32_Win32 #define _Included_win32_Win32 #ifdef __cplusplus extern ""C"" { #endif /* * Class: win32_Win32 * Method: getWindowHandle * Signature: (Ljava/awt/Component;Ljava/lang/String;)I */ JNIEXPORT jint JNICALL Java_win32_Win32_getWindowHandle (JNIEnv * jclass jobject); #ifdef __cplusplus } #endif #endif The C source main.c: #include<windows.h> #include <jni.h> #include <jawt.h> #include <jawt_md.h> HMODULE _hAWT = 0; JNIEXPORT jint JNICALL Java_win32_Win32_getWindowHandle (JNIEnv * env jclass cls jobject comp) { HWND hWnd = 0; typedef jboolean (JNICALL *PJAWT_GETAWT)(JNIEnv* JAWT*); JAWT awt; JAWT_DrawingSurface* ds; JAWT_DrawingSurfaceInfo* dsi; JAWT_Win32DrawingSurfaceInfo* dsi_win; jboolean result; jint lock; //Load AWT Library if(!_hAWT) //for Java 1.4 _hAWT = LoadLibrary(""jawt.dll""); if(!_hAWT) //for Java 1.3 _hAWT = LoadLibrary(""awt.dll""); if(_hAWT) { PJAWT_GETAWT JAWT_GetAWT = (PJAWT_GETAWT)GetProcAddress(_hAWT ""_JAWT_GetAWT@8""); if(JAWT_GetAWT) { awt.version = JAWT_VERSION_1_4; // Init here with JAWT_VERSION_1_3 or JAWT_VERSION_1_4 //Get AWT API Interface result = JAWT_GetAWT(env &awt); if(result != JNI_FALSE) { ds = awt.GetDrawingSurface(env comp); if(ds != NULL) { lock = ds->Lock(ds); if((lock & JAWT_LOCK_ERROR) == 0) { dsi = ds->GetDrawingSurfaceInfo(ds); if(dsi) { dsi_win = (JAWT_Win32DrawingSurfaceInfo*)dsi->platformInfo; if(dsi_win) { hWnd = dsi_win->hwnd; } else { hWnd = (HWND) -1; } ds->FreeDrawingSurfaceInfo(dsi); } else { hWnd = (HWND) -2; } ds->Unlock(ds); } else { hWnd = (HWND) -3; } awt.FreeDrawingSurface(ds); } else { hWnd = (HWND) -4; } } else { hWnd = (HWND) -5; } } else { hWnd = (HWND) -6; } } else { hWnd = (HWND) -7; } return (jint)hWnd; } Sorry to bump a very old topic here but I keep getting an `EXCEPTION_ACCESS_VIOLATION` in `jvm.dll` whenever I try to get the drawing surface (`GetDrawingSurface`) of a component (in my case a `java.awt.Cavas`). I made sure it is _not_ lightweight and it is already visible on the screen. Has anything changed in Java 1.6 or is there anything else you need to do before you can get the drawing surface? No idea. Try asking a new question to get more eyes on the issue. pdinklag were you able to deal with that issue calling GetDrawingSurface? I experience the same problem now and jvm crashes in DSGetDrawingSurface. Tried with several jvms (1.6 and 1.7) - still crashes.  In JNA library we see that using Native AWT in Java 5 and 6 UnsatisfiedLinkError when run headless so use dynamic linking. See the method Java_com_sun_jna_Native_getWindowHandle0 in https://github.com/twall/jna/blob/master/native/dispatch.c.  This little JNI method accepts a window title and returns the corresponding window handle. JNIEXPORT jint JNICALL Java_JavaHowTo_getHwnd (JNIEnv *env jclass obj jstring title){ HWND hwnd = NULL; const char *str = NULL; str = (*env)->GetStringUTFChars(env title 0); hwnd = FindWindow(NULLstr); (*env)->ReleaseStringUTFChars(env title str); return (jint) hwnd; } UPDATE: With JNA it's a little bit easier. I made a small example which find the handle and use it to bring the program to front. This is not precise enough. I'd rather not hope that the window title is not in use by another window. just be sure to set the window title to something really really unique before the call (so you don't accidentally pick up the hwnd for another window with the same title - the FindWindow call is not process specific) You can replace the ""NULL"" with a class name to make the search more precise. You determine the window class name with a special tool like SPY++ or WinID. Small example is awesome  I found this: http://jna.java.net/javadoc/com/sun/jna/Native.html#getWindowID(java.awt.Window) JNA lets you call native libraries without having to write jni native code. Turns out the library itself has a method that takes a Window and produces an int presumably a handle (or pointer?) that hopefully works on all platforms. Actually getWindowPointer() is for Windows. According to their docs the method getWindowID() is for X11.  This is the same as Jared MacD's answer but it uses reflection so that the code can compile and load on a non-Windows computer. Of course it will fail if you try to call it. import java.awt.Frame; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class WindowHandleGetter { private static final Logger log = LoggerFactory.getLogger(WindowHandleGetter.class); private final Frame rootFrame; protected WindowHandleGetter(Frame rootFrame) { this.rootFrame = rootFrame; } protected long getWindowId() { try { Frame frame = rootFrame; // The reflection code below does the same as this // long handle = frame.getPeer() != null ? ((WComponentPeer) frame.getPeer()).getHWnd() : 0; Object wComponentPeer = invokeMethod(frame ""getPeer""); Long hwnd = (Long) invokeMethod(wComponentPeer ""getHWnd""); return hwnd; } catch (Exception ex) { log.error(""Error getting window handle""); } return 0; } protected Object invokeMethod(Object o String methodName) throws IllegalAccessException IllegalArgumentException InvocationTargetException { Class c = o.getClass(); for (Method m : c.getMethods()) { if (m.getName().equals(methodName)) { Object ret = m.invoke(o); return ret; } } throw new RuntimeException(""Could not find method named '""+methodName+""' on class "" + c); } }",java winapi swing jni hwnd
496233,A,"What are your best Swing design patterns and tips? I'm writing a GUI for an application using Swing and in the interests of code maintenance and readability I want to follow a consistent pattern throughout the whole system. Most of the articles and books (or at least book sections) that I've read appear to provide plenty of examples on how to create and arrange various components but ignore the bigger picture of writing a full GUI. What are your best tips for application GUI design and what patterns do you follow when designing or refactoring a GUI application? here are my four babys : http://blue-walrus.com/swing-design-patterns/ Make heavy use of the MVC pattern. Here's a simple example of what I mean: class Person { String firstName; String lastName; // and getters and setters... } class PersonSwingModel { private Person person; private javax.swing.text.PlainDocument firstName; private javax.swing.text.PlainDocument lastName; // and getters and setters... // Create some method like init() that initializes PlainDocument values // to attributes in model. } class SavePersonAction extends AbstractAction { private PersonSwingModel model; // and getters and setters... } class PersonSwingView extends JFrame { private PersonSwingModel model; private javax.swing.JTextField firstName; private javax.swing.JTextField lastName; private SavePersonAction savePersonAction; // hook up to JButton/JMenuItem // and getters and setters... // Create some method like init() which binds PlainDocument to JTextField // and Actions to JButtons or JMenuItems } I see some people disagree with extending JFrame or JPanel. I don't. Works for me. Also use LayoutManagers. GridBagLayout is very powerful. If you use it define some GridBagConstraints constants (like LABEL_GBC and FIELD_GBC) and keep reusing them.  I think a good working knowledge of concurrency is often understated. You really need to be familiar with Swing's threading policy and general synchronization techniques to build a responsive GUI and an efficient backend.  Definitely put the GUI in one class and the logic in another class or multiple classes -- to the greatest extent possible. If you use the MVC (Model-View-Controller) pattern this will happen automatically. If you don't do this the GUI will quickly become unmaintainably complicated.  Avoid inherit when composition would be easier. For instance I have seen a lot like this: public class CustomerSupportApp extends JFrame { JList<Customer> customers; OtherBusinessComponent importantComponent; etc. etc } This is mixing business logic with presentation. It only makes changes from difficult to impossible. Better is: public class CustomerSupportApp { JList<Customer> customers; OtherBusinessComponent importantComponent; // The app HAS-A frame but not IS-A frame JFrame frame; etc. etc } In your case it is obvious because application != frame but there are other examples e.g. `FooFrame extends BarFrame` where inheritance also is not appropriate e.g. because they have too less in common.  Karsten Lentzsch's JGoodies has been very helpful to me for architectural design especially with regard to the Presentation Model pattern bindings and validation. Check out his articles and libraries. Use an MVC-like pattern. I say ""like"" because the goal is really to separate the view from the model not to conform to a specific flavor of MVC. I prefer using Presentation Model myself. MiGLayout - I use it for everything unless a basic layout manager will do. Modularize and reuse as much as you can. WindowBuilder Pro for Eclipse - The best visual designer because it works with existing/edited code and doesn't lock you in. And it's free now! I have no issue with using designers because the view should be separate from the rest of the code. Netbeans Platform (RCP) - The only real Swing framework. I hope to learn and use this when I have time because part of a framework's job is to address concerns like yours. JavaBuilders - Cool project that allows declarative UIs but I'm not sure it's mature enough to risk it especially with an existing project. However it's interesting to read their PDF book if only to understand the problems they're trying to solve.  Avoid using GUI layout designers (builders). Later on it will make your code much cleaner and easier to maintain. It's true that if you start your GUI with a builder you are pretty much committed to using that builder throughout the whole life of the GUI. This is sometimes acceptable sometimes not. Yes it's true. Different builders store metadata in different formats which are not mutually compatibel. The only exception is Instantiations Swing Designer which works with the code directly. All of them create code which is not meant to be edited by hand (unreadable) which will bite you later. I disagree. If you know Swing well any code generated by a GUI builder will be readable enough. Problem is that by using a GUI builder you will not get to know Swing well. Good separation is of course necessary. WindowBuilder Pro does a good job with generated code. Check it out: https://developers.google.com/java-dev-tools/wbpro/?hl=fr  Get into the habit of having your callbacks spawn off threads to do the actual work and then you won't be having frozen GUIs when one of your callbacks turns into a time consuming monster. Better yet use SwingWorker. Yes SwingWorker is one of many ways to spawn off a thread. Dont forget SwingUtilities invoker later if that thread needs to update the GUI afterwards :) Take a look at FoxTrot: http://foxtrot.sourceforge.net/  I think that the main problem you are going to be faced with is testability of your gui application. So regarding maintainability and ease of unit testing I am leaning towards the ""Presenter first"" idiom instead of Model View Controller (MVC) and other derivatives that instruct you to have the view knowing of the actual application logic (Model). The best resource is the web site of the group that introduced it as a thought. Since using an approach like that is going to take a lot of boilerplate code to initialize the various elements of your application I would also suggest in using a dependency injection framework. I have settled with Guice.  Avoid spawning too many threads when user clicks action button multiple times. Disable button on first click spawn your action in background thread and when done enable button again. This may not be problem for short running tasks.  Try not to code the text into your app. Swing guis can be pretty easily written to be data driven consider defining your GUI in an xml file (including the component names and positions/layout attributes). I worked on systems that had a LOT of property sheets (which are just piles of controls page after page of them)--without making it data driven it's virtually impossible to maintain or internationalize. If you decide to use a GUI builder never modify the code it outputs if you can possibly avoid it--it's better to bind to the GUI from an external class. Think about what will happen if you have to do it without the builder--will it be difficult to port? Impossible? Understand the gotchas in swing--only modifying GUI components from the AWT thread returning the AWT thread as quickly as possible (spawn a new thread if you have to do anything that takes over 100ms) Try your best to keep your code DRY--It can be a real programming challenge with Swing GUIs--Again data driven code is the only way I've found to not constantly repeat code like new JButton(""...""); If your data is property-sheet based seriously consider creating a binding mechanism to tie your controls to your data. A good goal for DRY code would be 0 (ZERO) control-specific lines of code per control to get a piece of data from your database to your GUI have the user edit it and get it back to your DB. This means that you should be able to add a new control by doing nothing but modifying your data.  Have a look at the application framework API ( https://appframework.dev.java.net/ and http://java.sun.com/developer/technicalArticles/javase/swingappfr/. It's a great API to build your swing application. e.g. : all the styles (color fonticons...) are defined in a simple config file.  mvc is your friend.  This is a more abstract high-level answer about what your GUI represents not the mechanics of it.. Depending on your task it may be kind of difficult to make it so your user can conceptually grasp what the GUI is doing. I've done some pretty tricky work involving GUIs and my most successful approaches have been those that took a complex set of controls and put them into a layout that the user expected. For instance I wrote a system to manage 2 devices one at either end of a T1 line (kinda like modems). The controls were really hard to comprehend--fields like ""create loopback test far end signal test near end bit patterns sending various bit patterns ..."" (this is a huge oversimplification it was a lot worse than this) I had to really understand the problem so I went to a Tech Support rep who helped customers with this problem all the time. He showed me a diagram in the manual and stepped me through what the different controls did on that diagram. I took the diagram re-created it using graphics (just a simple line-drawing for the most part but it showed both ends and the connections between them) then used regions of the graphics to represent controls AND feedback (color changes). You could visually see that a signal was going out. When you turned on a loopback at the far end you could see that the line looped the signal back to it's outgoing line then you could see the color change as your near-end started getting the pattern that it was sending out it's other line. The ""Controls"" were significantly more convoluted than this but the GUI reduced it to EXACTLY what the customer needed to understand the problem. After this we had customers coming back to us telling us that they had never been able to figure this stuff out before but now they totally get it! This presentation was infinitely more important than the wiring of the GUI implementation.  Never derive from JDialog JFrame or JInternalFrame for defining your forms dialogs... Rather derive from JPanel. This will bring you the follwing advantages: possibility to later change from a JFrame to a JDialog for instance (because user changed his mind) you can reuse one panel instance from one JDialog to another (JDialog are generally not reusable because they are constructed with a reference to their ""parent"" a frame or another dialog) you can later on change replace JDialog with a more functional subclass from a 3rd-party framework. Along with this I would define a 'view' interface. What should your 'view' interface do?  Use layout managers. You might think it's simpler just to position everything with hard coded positions now (especially if you use a graphical layout tool) but when it comes time to update the gui or internationalize it your successors will hate you. (Trust me on this I was the guy saying to use the layout managers from the start and the successor to the guy who ignored me.)  You're not supposed to extend JFrame JDialog JPanel JButton Janything classes (although certain extensions to table behaviour are only available if you extend it). You can extend JComponent if you feel like doing custom component. If are supposed to implement models (e.g. by extending abstract models) listeners (e.g. by extending adapters) but that's it. You don't need/have to extend swing components usually and you better not do it as it makes your code tied to implementation of superclass.",java gui design-patterns swing
138793,A,"How do I add a separator to a JComboBox in Java? I have a JComboBox and would like to have a separator in the list of elements. How do I do this in Java? A sample scenario where this would come in handy is when making a combobox for font-family-selection; similar to the font-family-selection-control in Word and Excel. In this case I would like to show the most-used-fonts at the top then a separator and finally all font-families below the separator in alphabetical order. Can anyone help me with how to do this or is this not possible in Java? By the time I wrote and tested the code below you probably got lot of better answers... I don't mind as I enjoyed the experiment/learning (still a bit green on the Swing front). [EDIT] Three years later I am a bit less green and I took in account the valid remarks of bobndrew. I have no problem with the key navigation that just works (perhaps it was a JVM version issue?). I improved the renderer to show highlight though. And I use a better demo code. The accepted answer is probably better (more standard) mine is probably more flexible if you want a custom separator... The base idea is to use a renderer for the items of the combo box. For most items it is a simple JLabel with the text of the item. For the last recent/most used item I decorate the JLabel with a custom border drawing a line on its bottom. import java.awt.*; import javax.swing.*; @SuppressWarnings(""serial"") public class TwoPartsComboBox extends JComboBox { private int m_lastFirstPartIndex; public TwoPartsComboBox(String[] itemsFirstPart String[] itemsSecondPart) { super(itemsFirstPart); m_lastFirstPartIndex = itemsFirstPart.length - 1; for (int i = 0; i < itemsSecondPart.length; i++) { insertItemAt(itemsSecondPart[i] i); } setRenderer(new JLRenderer()); } protected class JLRenderer extends JLabel implements ListCellRenderer { private JLabel m_lastFirstPart; public JLRenderer() { m_lastFirstPart = new JLabel(); m_lastFirstPart.setBorder(new BottomLineBorder()); // m_lastFirstPart.setBorder(new BottomLineBorder(10 Color.BLUE)); } @Override public Component getListCellRendererComponent( JList list Object value int index boolean isSelected boolean cellHasFocus) { if (value == null) { value = ""Select an option""; } JLabel label = this; if (index == m_lastFirstPartIndex) { label = m_lastFirstPart; } label.setText(value.toString()); label.setBackground(isSelected ? list.getSelectionBackground() : list.getBackground()); label.setForeground(isSelected ? list.getSelectionForeground() : list.getForeground()); label.setOpaque(true); return label; } } } Separator class can be thick with custom color etc. import java.awt.*; import javax.swing.border.AbstractBorder; /** * Draws a line at the bottom only. * Useful for making a separator in combo box for example. */ @SuppressWarnings(""serial"") class BottomLineBorder extends AbstractBorder { private int m_thickness; private Color m_color; BottomLineBorder() { this(1 Color.BLACK); } BottomLineBorder(Color color) { this(1 color); } BottomLineBorder(int thickness Color color) { m_thickness = thickness; m_color = color; } @Override public void paintBorder(Component c Graphics g int x int y int width int height) { Graphics copy = g.create(); if (copy != null) { try { copy.translate(x y); copy.setColor(m_color); copy.fillRect(0 height - m_thickness width - 1 height - 1); } finally { copy.dispose(); } } } @Override public boolean isBorderOpaque() { return true; } @Override public Insets getBorderInsets(Component c) { return new Insets(0 0 m_thickness 0); } @Override public Insets getBorderInsets(Component c Insets i) { i.left = i.top = i.right = 0; i.bottom = m_thickness; return i; } } Test class: import java.awt.*; import java.awt.event.*; import javax.swing.*; @SuppressWarnings(""serial"") public class TwoPartsComboBoxDemo extends JFrame { private TwoPartsComboBox m_combo; public TwoPartsComboBoxDemo() { Container cont = getContentPane(); cont.setLayout(new FlowLayout()); cont.add(new JLabel(""Data: "")) ; String[] itemsRecent = new String[] { ""ichi"" ""ni"" ""san"" }; String[] itemsOther = new String[] { ""one"" ""two"" ""three"" }; m_combo = new TwoPartsComboBox(itemsRecent itemsOther); m_combo.setSelectedIndex(-1); cont.add(m_combo); m_combo.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { String si = (String) m_combo.getSelectedItem(); System.out.println(si == null ? ""No item selected"" : si.toString()); } }); // Reference to check we have similar behavior to standard combo JComboBox combo = new JComboBox(itemsRecent); cont.add(combo); } /** * Start the demo. * * @param args the command line arguments */ public static void main(String[] args) { // turn bold fonts off in metal UIManager.put(""swing.boldMetal"" Boolean.FALSE); SwingUtilities.invokeLater(new Runnable() { public void run() { JFrame demoFrame = new TwoPartsComboBoxDemo(); demoFrame.setTitle(""Test GUI""); demoFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); demoFrame.setSize(400 100); demoFrame.setVisible(true); } }); } } C++ braces traitor! ;) :-D Not really C++ specific actually. I first used K&R style when I read their C book years ago then I chose to align braces for better readability (for me question of taste) and never came back (except on projects requiring them of course). @bobndrew: hey! As I wrote I was a newbie at the time (3 years already!). Among sins you don't point out I probably used some Swing test template I found and even worse I didn't use SwingUtilities.invokeLater! The code I have currently uses it at least (but it is still a JFrame subclass...). And m_lastRecentIndex is more local... But most of your criticism is about a quickly made test class which isn't really production code. Today I pay more attention to such code as newbies can take inspiration from it... :-) Also you are right about highlighting hovered elements and selection. TODO Your variable-naming is not the worst thing here: You're breaking the whole combobox-item-selection: the selection is not painted anymore and the first-letter-key-jumps are broken. And you should define `m_combo` and `m_renderer` in the smallest possible scope (in `public TestGui()`). And should not use a glooooobal `m_lastRecentIndex` for the Renderer **and** the 'TestGui' class (which should be a lonely Main class not a 'JFrame' subclass). But I like the braces-style! Note: I edited the code above for a more modern / correct version. One advantage of my approach is that it is more flexible (in look at least) than JSeparator and it doesn't take a slot.  You can use a custom ListCellRenderer which would draw the separator items differently. See docs and a small tutorial.  There is a pretty short tutorial with an example that shows how to use a custom ListCellRenderer on java2s http://www.java2s.com/Code/Java/Swing-Components/BlockComboBoxExample.htm Basically it involves inserting a known placeholder in your list model and when you detect the placeholder in the ListCellRenderer you return an instance of 'new JSeparator(JSeparator.HORIZONTAL)' The `BlockComboBoxExample` example breaks the cursor-key and the first-letter-key navigation. Santhosh Kumar's [example](http://www.jroller.com/santhosh/entry/jcombobox%5Fitems%5Fwith%5Fseparators) seems to work better.",java swing
446056,A,"Can I use two different look and feels in the same Swing application? I'm using the Flamingo ribbon and the Substance Office 2007 look and feel. Of course now every control has this look and feel even those on dialog boxes. What I want is something like in Office 2007 where the ribbons have their Office 2007 look but other controls keep their native Vista/XP look. Is it possible to assign certain controls a different look and feel? Perhaps using some kind of chaining or a proxy look and feel? Here is a library which will automaticaly change the look and feel. I am not sure it this will done for every component in a different way but you should take a look at it. pbjar.org This book should be useful if you want to go deep into look and feel /java-look-and-feel-design-guidelines-second-edition I would be glad to see some code example if someone can write it feel free to get starting. EDIT: In this forum thread Thread i found the following description Swing uses a Look & Feel (a PLAF). PLAFs aren't attached on a per-JFrame level. They are attached on a per-VM level. It is almost impossible to mix PLAFs within one application. I have seen a few attempts all failed. It's actually per-AppContext. You should be able to have applets on different sites having different PL&Fs installed.  Swing unfortunately does lots of ""psuedo-global"" things behind the scenes. AFAIK the only way to do it consistently is to use the private AppContext API. Each AppContext has its own event dispatch thread and other ""psuedo-globals"".  I just discovered: Since Substance 5.0 the SKIN_PROPERTY is available. It allows assigning different skins to different JRootPanes (i.e. JDialog JFrame JInternalFrame) A little trick: I override JInternalFrame to remove the extra border and the title pane so that it looks just like a borderless panel. That way it is possible to create the impression that different parts of a form/dialog have different looks.",java swing look-and-feel substance
218155,A,"How do I change JPanel inside a JFrame on the fly? To put it simple there's a simple java swing app that consists of JFrame with some components in it. One of the components is a JPanel that is meant to be replaced by another JPanel on user action. So what's the correct way of doing such a thing? I've tried panel = new CustomJPanelWithComponentsOnIt(); parentFrameJPanelBelongsTo.pack(); but this won't work. What would you suggest? I suggest you to add both panel at frame creation then change the visible panel by calling setVisible(true/false) on both. When calling setVisible the parent will be notified and asked to repaint itself.  frame.setContentPane(newContents()); frame.revalidate(); // frame.pack() if you want to resize. Remember Java use 'copy reference by value' argument passing. So changing a variable wont change copies of the reference passed to other methods. Also note JFrame is very confusing in the name of usability. Adding a component or setting a layout (usually) performs the operation on the content pane. Oddly enough getting the layout really does give you the frame's layout manager. Tom thanks for your reply. I'm not aiming to replace the contentpane just a jpanel placed on it (like frame.add(jpanel1) frame.add(jpanel2) frame.add(jpanel3)). Could you plz suggest a sane solution in code? Hey John Your use case seems perfect for CardLayout. http://java.sun.com/docs/books/tutorial/uiswing/layout/card.html In card layout you can add multiple panels in the same place but then show or hide one panel at a time. @swapnonil: Make that an answer so I can vote it up. :) You may run into problems when using the setContentPane() method. I had cases where all (custom) cursors not showing up anymore after calling it.  1) Setting the first Panel: JFrame frame=new JFrame(); frame.getContentPane().add(new JPanel()); 2)Replacing the panel: frame.getContentPane().removeAll(); frame.getContentPane().add(new JPanel()); Also notice that you must do this in the Event's Thread to ensure this use the SwingUtilities.invokeLater or the SwingWorker  class Frame1 extends javax.swing.JFrame { remove(previouspanel); //or getContentPane().removeAll(); add(newpanel); //or setContentPane(newpanel); invalidate(); validate(); // or ((JComponent) getContentPane()).revalidate(); repaint(); //DO NOT FORGET REPAINT } Sometimes you can do the work without using the revalidation and sometimes without using the repaint.My advise use both.  The other individuals answered the question. I want to suggest you use a JTabbedPane instead of replacing content. As a general rule it is bad to have visual elements of your application disappear or be replaced by other content. Certainly there are exceptions to every rule and only you and your user community can decide the best approach.  I was having exactly the same problem!! Increadible!! The solution I found was: Adding all the components (JPanels) to the container; Using the setVisible(false) method to all of them; On user action setting setVisible(true) to the panel I wanted to show. // Hiding all components (JPanels) added to a container (ex: another JPanel) for (Component component : this.container.getComponents()) { component.setVisible(false); } // Showing only the selected JPanel the one user wants to see panel.setVisible(true); No revalidate() no validate() no CardLayout needed.  On the user action: // you have to do something along the lines of myJFrame.getContentPane().removeAll() myJFrame.getContentPane().invalidate() myJFrame.getContentPane().add(newContentPanel) myJFrame.getContentPane().revalidate() Then you can resize your wndow as needed.  Your use case seems perfect for CardLayout. In card layout you can add multiple panels in the same place but then show or hide one panel at a time. When using CardLayout keep in mind that the preferred size for the panel that uses it will be the size of the LARGEST panel in the layout. If you want the space to be reclaimed you will want to use setVisible(false) and setPreferredSize( new Dimension( 00 ) ) to hide a component. I hadn't heard of CardLayout before. Thanks - was perfect for something I needed to do.  Hope this piece of code give you an idea of changing jPanels inside a JFrame. public class PanelTest extends JFrame { Container contentPane; public PanelTest() { super(""Changing JPanel inside a JFrame""); contentPane=getContentPane(); } public void createChangePanel() { contentPane.removeAll(); JPanel newPanel=new JPanel(); contentPane.add(newPanel); System.out.println(""new panel created"");//for debugging purposes validate(); setVisible(true); } }  Problem: My component does not appear after I have added it to the container. You need to invoke revalidate and repaint after adding a component before it will show up in your container. Source: http://docs.oracle.com/javase/tutorial/uiswing/layout/problems.html  Just call the method pack() after setting the ContentPane (java 1.7 maybe older) like this: JFrame frame = new JFrame(); JPanel panel1 = new JPanel(); JPanel panel2 = new JPanel(); .... frame.setContentPane(panel1); frame.pack(); ... frame.setContentPane(panel2); frame.pack(); ...  It all depends on how its going to be used. If you will want to switch back and forth between these two panels then use a CardLayout. If you are only switching from the first to the second once and (and not going back) then I would use telcontars suggestion and just replace it. Though if the JPanel isn't the only thing in your frame I would use remove(java.awt.Component) instead of removeAll. If you are somewhere in between these two cases its basically a time-space tradeoff. The CardLayout will save you time but take up more memory by having to keep this whole other panel in memory at all times. But if you just replace the panel when needed and construct it on demand you don't have to keep that meory around but it takes more time to switch. Also you can try a JTabbedPane to use tabs instead (its even easier than CardLayout because it handles the showing/hiding automitically)",java swing jpanel layout-manager cardlayout
416947,A,"Swing components are light-weight? Whenever I read about Swing they say they are light weight components. So I just googled Swing and found that it means Swing does not depend on native peers. Is that why they are called ""light weight""? I mean by light weight I thought maybe the Swing components occupy less memory than the AWT components. Isn't that so? Lightweight vs heavyweight is a question of how the UI components are implemented. Heavyweight components wrap operating system objects lightweight components don't. They are implemented strictly in the JDK. what can you say about the memory the components occupy pal ? do the swing components occupy less memory ? It's hard to say. Lightweight components may occupy more simply because the operating system handles some of the stuff with heavyweight components. Or the overhead of OS objects might be huge. Or simply interfacing those objects might have a huge overhead. In addition to this it highly depends on the LAF (Look & Feel) you use. This is one other advantage of Swing: you can change LAF in just a few lines of code.  Swing is considered lightweight because it is fully implemented in Java without calling the native operating system for drawing the graphical user interface components. On the other hand AWT (Abstract Window Toolkit) is heavyweight toolkit as it merely makes calls to the operating system in order to produce its GUI components. The Evolution of the Swing Paint System section from the Painting in AWT and Swing article explains the difference between lightweight and heavyweight: When the original AWT API was developed for JDK 1.0 only heavyweight components existed (""heavyweight"" means that the component has it's own opaque native window). This allowed the AWT to rely heavily on the paint subsystem in each native platform. [...] With the introduction of lightweight components in JDK 1.1 (a ""lightweight"" component is one that reuses the native window of its closest heavyweight ancestor) the AWT needed to implement the paint processing for lightweight components in the shared Java code. As Swing is implemented in Java it does have some performance disadvantage however I hear that performance has improved in recent releases of Java. The advantage of Swing is that it has many more components available such as JTable and JList which are more graphical and extensible than the components provided in AWT allowing for more graphics-rich applications to be developed. i agree that there are too many cool things with swing - especially the tooltips and icons . In Java 6 the Windows look-and-feel delegates to the OS to draw the lightweight components (see http://weblogs.java.net/blog/chet/archive/2006/02/these_are_some.html).",java swing awt
297938,A,"""Always on Top"" Windows with Java In Java is there a way to have a window that is ""Always on top"" regardless if the user switches focus to another application? I've searched the web and all of the solutions lean to some sort of JNI interface with native bindings. Truly this can't be the only way to do it?.. or is it? Try this method of the Window class: Window.setAlwaysOnTop(boolean) It works the same way as the default in the Windows TaskManager: switch to another app but it shows always on top. This was added in Java 1.5 Sample code: import javax.swing.JFrame; import javax.swing.JLabel; public class Annoying { public static void main(String[] args) { JFrame frame = new JFrame(""Hello!!""); // Set's the window to be ""always on top"" frame.setAlwaysOnTop( true ); frame.setLocationByPlatform( true ); frame.add( new JLabel("" Isn't this annoying?"") ); frame.pack(); frame.setVisible( true ); } } Window remains on top even when is not active you would think a simple search for ""java application always on top"" on would have this answer but it couldn't find it. Thanks. Guess what. Now it does!! :) It brings you here! http://www.google.com/search?&q=java+application+always+on+top This is simple and awesome. I was also looking for something like this but didn't know they implemented this in Java 1.5. Thanks for posting. Unfortunately this does not work for me when running a full screen application such as a video game. Anyone know of a way to force it to the top in that situation? @Dream lane I'd probably ask that as a new question This works for a login dialog box but my main application window then goes to the background. I'm open to suggestions. +1 for nothing more than the ""Isn't this annoying"" quip. @MMJZ haha true. Actually I'm surprised I didn't do it for the `args` declaration. I **always** use space after parenthesis. This is a very very old habit that I develop back in the days I used notepad to program. Double clicking on a word would select the parenthesis if there is no space between which was very annoying because I had to delete them afterwards if what I intended to do was re-use the variable somewhere else. This is like the first code I've seen anywhere ever that pads out boolean parameters with spaces.  From my observation I found that AlwaysOnTop privilege is given to the latest process which requested to be always on top. So if you have an application which setAlwaysOnTop(true) and later another application uses this option the privilege is given to the second application. In order to work around this I have set the setAlwaysOnTop(false) and again setAlwaysOnTop(true) whenever any window comes on top of the current window. I've checked it with wordweb in windows. WordWeb is one of the applications which uses AlwaysOnTop option from the OS I'm not sure about if it works properly with your game scenario. Warning: I'm not aware of the side effects. Here is the code example: import java.awt.event.*; import javax.swing.*; public class MainWindow extends JFrame implements WindowFocusListener { public MainWindow() { addWindowFocusListener(this); setAlwaysOnTop(true); this.setFocusable(true); // this.setFocusableWindowState(true); panel = new JPanel(); //setSize(WIDTHHEIGHT); setUndecorated(true); setLocation(XY); setExtendedState(MAXIMIZED_BOTH); setVisible(true); } public void windowGainedFocus(WindowEvent e){} public void windowLostFocus(WindowEvent e) { if(e.getNewState()!=e.WINDOW_CLOSED){ //toFront(); //requestFocus(); setAlwaysOnTop(false); setAlwaysOnTop(true); //requestFocusInWindow(); System.out.println(""focus lost""); } } private JPanel panel; private static final int WIDTH = 200; private static final int HEIGHT = 200; private static final int X = 100; private static final int Y = 100; public static void main(String args[]){ new MainWindow();} }",java gui swing awt
295649,A,Adding rows to a JTable We have a simple project where we read data from a socket and we want to populate a table with the coming data but we can't find a way to add rows to a yet created JTable object we can only find how to add rows at creation time of the table. Is it possible to add rows dynamically to a JTable or there is a better alternative object to deal with this way of showing data? EDIT: Thanks a lot for your answers. All three of them look very promising but I have to choose only one and I think the best is Guillaume's. You should create a custom TableModel. A JTable doesn't actually store the rows it always delegates that to a TableModel. To help you implementing it you should make use of AbstractTableModel. Don't forget to call fireTableRowsInserted() every time you add rows. For better performances if you add a lot of rows try to batch the updates and add many rows at a time.  If you use the default table model for a JTable then you can add rows with following code  if ( dest+1 < table.getRowCount()-1 ) ( (DefaultTableModel) table.getModel() ).insertRow(dest+1 getValuesForNewRow()); else ( (DefaultTableModel) table.getModel() ).addRow(getValuesForNewRow()); It's best to just keep hold of the DefaultTableModel before passing it to the JTable constructor. Then you don't need to touch the JTable or do any casting.  Once you start dynamically adding and removing elements from a JTable you really need to start using a TableModel. See the Java Tutorial for more details.,java swing
225108,A,Resize a JPanel in line with a JDialog I've got a JDialog which contains a series of JPanels in a CardLayout. Some of these panels contain JTables which I would like to be resized in line with any resizing of the JDialog. I am not sure how to achieve this and any help would be greatly appreciated. At present the tables simply remain their current size and do not scale. I'm sure its something simple but I'm having trouble locating the exact approach needed. Many thanks in advance. I will provide any more information if required. edit: The JDialog is used as a wizard so only one of the panels is being displayed at any one time hence the use of CardLayout. I would ideally like to keep this is layout manager although if it is the source of the problems then obviously I would rethink! You can keep the CardLayout but you need to do the following: 1. set the layout of your JDialog to BorderLayout and add a new JPanel (contentPanel) to the JDialog 2. now set this contentPanel layout to be CardLayout 3. add your other panels to the cardlayout as required. 4. Also make sure off the layouts you use on each of the panels you're adding to the CardLayout. By default JPanel uses FlowLayout I think and this is not ideal for a JTable. So you might need to play around with the layout of the panel containing the table as well; try out BoxLayout or BorderLayout for that as well.,java swing resize jdialog
354745,A,"JAVA Swing GUI Components howto RTL view? How can i make my Java Swing GUI Components [Right To Left] for Arabic language from NetBeans Desktop Application? Do yo mean how to display text in a JLabel for instance? you could use it if you have components inside panels inside contentPane  Component[] component = contentPane.getComponents(); for(int i=0; i<component.length; i++){ component[i].applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT); Component[] cp = ((Container) component[i]).getComponents(); for(int j=0; j<cp.length; j++){ try{ ((Component) ((JComboBox) cp[j]).getRenderer()).applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT); }catch(Exception e){ continue; } } }  Don't you just have to use: Component.setComponentOrientation( ComponentOrientation.RIGHT_TO_LEFT ) I believe that the swing components all already have support for RTL don't they? Not sure how/where you'd do that in regards to netbeans though. There's also Component.applyComponentOrientation(..) to change a whole component tree.  You could use alignment but that would not handle the complexities if you have English letters or numbers embedded within your text. It might be preferable to use some sort of styled text widget or even an embedded HTML/rich text viewer. I don't think that standard JLabels can handle the complexities otherwise. JLabel display unicode letters. I think they relay on the system fonts and if the system fonts can display the letter then everything it's ok. For instance in my comp I can write ""Extraño""  The call of  Component.setComponentOrientation( ComponentOrientation.RIGHT_TO_LEFT ) should do the trick. But be sure to use the SwingConstants LEADING and TRAILING instead of LEFT and RIGHT in your layouts. The same goes for GridBagConstraints.LINE_START or LINE_END instead of WEST or EAST and probably some similar cases which I forgot to mention. That's a great answer the information about using the more meaningful alignment constants may not be a given to others having trouble with this.",java swing right-to-left
477663,A,Is it possible to set a TitledBorder opaque on Swing? Is it somehow possible on Swing to set a TitledBorder transparent so that a background image shines through? Thanks for the hint got confused within my own thoughts :) Strange - TitledBorder.isBorderOpaque() supposedly returns false so it should already work. Maybe the problem is just that the component you're putting the border on just doesn't paint the background image over the border insets?  Found the answer. Use the method setOpaque(false) on the underlying panel.,java swing opacity titled-border
242896,A,Problem with Swing GUI on Macintosh I am new to Swing. Are there any specific issues related to customizing the paint operation on the Mac? I have developed a sample application using NetBeans + Swing on Windows. It is working fine. But if I run the same application on a Mac panels' buttons' labels don't appear on the screen. Only when the mouse over operation is performed on particular component does it get displayed on the screen. Kindly can anyone help me out in solving this issue? Thanks in advance. sakkiharry Since Swing paints all UI itself it is not really influenced by Mac OS. There are exceptions though. If you allow Java to use a native menu the menu will behave like any other Swing menu but it is in fact translated to native menu functions (so it will be displayed on top of screen and behave like a native Mac OS X menu... nothing you as programmer need to care about but great for Mac users who hate menus to appear elsewhere). I guess your issue is probably something else but it's hard to guess if I have no code to work with. Can you break down the issue into an ultra minimal test case? E.g. can you just draw a JFrame add a singe one of your custom buttons there that shows the problematic behavior and just use as much code as is necessary to paint this minimal UI and expose the problem? If you'd post this code here I'd take a closer look into it and will try to find out what causes the issue and how to resolve it (I'm a graduated Java programmer but I also have years of Mac OS X development experience; so these are two fields of knowledge I should know really well but I usually don't combine them as I don't develop in Java for Mac OS X).,java osx swing netbeans
33708,A,"My (Java/Swing) MouseListener isn't listening help me figure out why So I've got a JPanel implementing MouseListener and MouseMotionListener: import javax.swing.*; import java.awt.*; import java.awt.event.*; public class DisplayArea extends JPanel implements MouseListener MouseMotionListener { public DisplayArea(Rectangle bounds Display display) { setLayout(null); setBounds(bounds); setOpaque(false); setPreferredSize(new Dimension(bounds.width bounds.height)); this.display = display; } public void paintComponent(Graphics g) { Graphics2D g2 = (Graphics2D)g; if (display.getControlPanel().Antialiasing()) { g2.addRenderingHints(new RenderingHints(RenderingHints.KEY_ANTIALIASING RenderingHints.VALUE_ANTIALIAS_ON)); } g2.setColor(Color.white); g2.fillRect(0 0 getWidth() getHeight()); } public void mousePressed(MouseEvent event) { System.out.println(""mousePressed()""); mx1 = event.getX(); my1 = event.getY(); } public void mouseReleased(MouseEvent event) { System.out.println(""mouseReleased()""); mx2 = event.getX(); my2 = event.getY(); int mode = display.getControlPanel().Mode(); switch (mode) { case ControlPanel.LINE: System.out.println(""Line from "" + mx1 + "" "" + my1 + "" to "" + mx2 + "" "" + my2 + "".""); } } public void mouseEntered(MouseEvent event) { System.out.println(""mouseEntered()""); } public void mouseExited(MouseEvent event) { System.out.println(""mouseExited()""); } public void mouseClicked(MouseEvent event) { System.out.println(""mouseClicked()""); } public void mouseMoved(MouseEvent event) { System.out.println(""mouseMoved()""); } public void mouseDragged(MouseEvent event) { System.out.println(""mouseDragged()""); } private Display display = null; private int mx1 = -1; private int my1 = -1; private int mx2 = -1; private int my2 = -1; } The trouble is none of these mouse functions are ever called. DisplayArea is created like this: da = new DisplayArea(new Rectangle(CONTROL_WIDTH 0 DISPLAY_WIDTH DISPLAY_HEIGHT) this); I am not really a Java programmer (this is part of an assignment) but I can't see anything glaringly obvious. Can someone smarter than I see anything? I don't see anywhere in the code where you call addMouseListener(this) or addMouseMotionListener(this) for the DisplayArea in order for it to subscribe to those events.  The implements mouselistener mousemotionlistener just allows the displayArea class to listen to some to be defined Swing component's mouse events. You have to explicitly define what it should be listening at. So I suppose you could add something like this to the constructor: this.addMouseListener(this); this.addMouseMotionListener(this);  I don't see any code here to register to the mouse listeners. You have to call addMouseListener(this) and addMouseMotionListener(this) on the DisplayArea.",java swing
309023,A,"How to bring a window to the front? We have a Java-application that needs to be brought to the foreground when a telecontrol mechanism activates something in the application. In order to get this we have realised in the called method of the Class which represents the Frame of our application (extension of a JFrame) following implementation: setVisible(true); toFront(); Under Windows XP this works the first time it is called on the second time only the tab in the taskbar flashes the frame doesn't come to the front anymore. Same goes for Win2k. On Vista it seems to work fine. Anyone ideas? do you have a sample for this behavior? The proper answer is to call `toFront()` on the EDT using `invokeLater`. There is a simple answer included below but it is not the accepted answer. It does work though. Perfectly. I know this is old but this also happens on OSX I'm experiencing this problem but none of the answers below seems to solve it. I'm sure it's caused by windows not allowing me to 'Steal' Focus for my first window in the application. Here's a method that REALLY works (tested on Windows Vista) :D  frame.setExtendedState(JFrame.ICONIFIED); frame.setExtendedState(fullscreen ? JFrame.MAXIMIZED_BOTH : JFrame.NORMAL); The fullscreen variable indicates if you want the app to run full screen or windowed. This does not flash the task bar but bring the window to front reliably. Thanks for the setExtendedState tip. I used it along with the toFront() and repaint() solution to bring the window to the foreground even if it was minimized. Confirmed: this solution works in WindowsXP using toFront results in flashing message in task bar. Thanks!  Simplest way I've found that doesn't have inconsistency across platforms: setVisible(false); setVisible(true); causes some blinking though doesn't it? nice and simple though :) did not work for my background process. Also window comes up white for the first refresh if called from foreground process. Can't use for screen grabs.  Windows has the facility to prevent windows from stealing focus; instead it flashes the taskbar icon. In XP it's on by default (the only place I've seen to change it is using TweakUI but there is a registry setting somewhere). In Vista they may have changed the default and/or exposed it as a user accessible setting with the out-of-the-box UI. Preventing windows from forcing themselves to the front and taking focus is a feature since Windows 2K (and I for one am thankful for it). That said I have a little Java app I use to remind me to record my activities while working and it makes itself the active window every 30 minutes (configurable of course). It always works consistently under Windows XP and never flashes the title bar window. It uses the following code called in the UI thread as a result of a timer event firing: if(getState()!=Frame.NORMAL) { setState(Frame.NORMAL); } toFront(); repaint(); (the first line restores if minimized... actually it would restore it if maximized too but I never have it so). While I usually have this app minimized quite often it's simply behind my text editor. And like I said it always works. I do have an idea on what your problem could be - perhaps you have a race condition with the setVisible() call. toFront() may not be valid unless the window is actually displayed when it is called; I have had this problem with requestFocus() before. You may need to put the toFront() call in a UI listener on a window activated event. 2014-09-07: At some point in time the above code stopped working perhaps at Java 6 or 7. After some investigation and experimentation I had to update the code to override the window's toFront method do this (in conjunction with modified code from what is above): setVisible(true); toFront(); requestFocus(); repaint(); ... public @Override void toFront() { int sta=super.getExtendedState()&~JFrame.ICONIFIED&JFrame.NORMAL; super.setExtendedState(sta); super.setAlwaysOnTop(true); super.toFront(); super.requestFocus(); super.setAlwaysOnTop(false); } As of Java 8_20 this code seems to be working fine. +1 for supporting not allowing windows to steal the focus. I hate when that happens when I'm typing in a document. I completely agree with you against stealing focus but in this precise case the user expects the application to come to the front. But it would uncool to change the registry settings and change the complete windows behavior.  This simple method worked for me perfectly in Windows 7:  private void BringToFront() { java.awt.EventQueue.invokeLater(new Runnable() { @Override public void run() { if(jFrame != null) { jFrame.toFront(); jFrame.repaint(); } } }); }  Hj all methods of yours are not working for me in Fedora KDE 14. I have a dirty way to do bring a window to front while we're waiting for Oracle to fix this issue. import java.awt.MouseInfo; import java.awt.Point; import java.awt.Robot; import java.awt.event.InputEvent; public class FrameMain extends javax.swing.JFrame { //... private final javax.swing.JFrame mainFrame = this; private void toggleVisible() { setVisible(!isVisible()); if (isVisible()) { toFront(); requestFocus(); setAlwaysOnTop(true); try { //remember the last location of mouse final Point oldMouseLocation = MouseInfo.getPointerInfo().getLocation(); //simulate a mouse click on title bar of window Robot robot = new Robot(); robot.mouseMove(mainFrame.getX() + 100 mainFrame.getY() + 5); robot.mousePress(InputEvent.BUTTON1_DOWN_MASK); robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK); //move mouse to old location robot.mouseMove((int) oldMouseLocation.getX() (int) oldMouseLocation.getY()); } catch (Exception ex) { //just ignore exception or you can handle it as you want } finally { setAlwaysOnTop(false); } } } //... } And this works perfectly in my Fedora KDE 14 :-) I love it. Thanks for this one. A little hacky works for us but only for the first call :-). (Kubuntu 12.04) - other solution did fail  The rules governing what happens when you .toFront() a JFrame are the same in windows and in linux : -> if a window of the existing application is currently the focused window then focus swaps to the requested window -> if not the window merely flashes in the taskbar BUT : -> new windows automatically get focus So let's exploit this ! You want to bring a window to the front how to do it ? Well : Create an empty non-purpose window Show it Wait for it to show up on screen (setVisible does that) When shown request focus for the window you actually want to bring the focus to hide the empty window destroy it Or in java code : // unminimize if necessary this.setExtendedState(this.getExtendedState() & ~JFrame.ICONIFIED); // don't blame me blame my upbringing // or better yet blame java ! final JFrame newFrame = new JFrame(); newFrame.add(new JLabel(""boembabies is this in front ?"")); newFrame.pack(); newFrame.setVisible(true); newFrame.toFront(); this.toFront(); this.requestFocus(); // I'm not 100% positive invokeLater is necessary but it seems to be on // WinXP. I'd be lying if I said I understand why SwingUtilities.invokeLater(new Runnable() { @Override public void run() { newFrame.setVisible(false); } }); Didn't work on Win7 both windows flash (if I don't hide the 2nd). Creative. Didn't work for my background process on Win7 when covered. New frame does not come up on top. Older JDK 6u21.  A possible solution is: java.awt.EventQueue.invokeLater(new Runnable() { @Override public void run() { myFrame.toFront(); myFrame.repaint(); } }); +1 WORKS! Simple to the point. Perhaps one should start ALL the UI code inside invokeLater in first place? ;) Did not work for me in Java 7 on KDE 4.9.5 the window would still hide below other programs. What helped me was changing the order of bringing windows to the front. Instead of hiding one window and show the second window show the second window and then hide the first window (JFrame).  I tested your answers and only Stefan Reich's one worked for me. Although I couldn't manage to restore the window to its previous state (maximized/normal). I found this mutation better: view.setState(java.awt.Frame.ICONIFIED); view.setState(java.awt.Frame.NORMAL); That is setState instead of setExtendedState.  There are numerous caveats in the javadoc for the toFront() method which may be causing your problem. But I'll take a guess anyway when ""only the tab in the taskbar flashes"" has the application been minimized? If so the following line from the javadoc may apply: ""If this Window is visible brings this Window to the front and may make it the focused Window.""  I had the same problem with brining a frame to the front under Ubuntu (Java 1.6.0_10). And the only way I could resolve it is by providing a window listener. Specifically I had to set frame to always stay on top whenever toFront is invoked and provide windowDeactivated event handler to setAlwaysOnTop(false). So here is the code that could be placed into a base frame which is used to derive all application frames. @Override public void setVisible(final boolean visible) { // make sure that frame is marked as not disposed if it is asked to be visible if (visible) { setDisposed(false); } // let's handle visibility... if (!visible || !isVisible()) { // have to check this condition simply because super.setVisible(true) invokes toFront if frame was already visible super.setVisible(visible); } // ...and bring frame to the front.. in a strange and weird way if (visible) { int state = super.getExtendedState(); state &= ~JFrame.ICONIFIED; super.setExtendedState(state); super.setAlwaysOnTop(true); super.toFront(); super.requestFocus(); super.setAlwaysOnTop(false); } } @Override public void toFront() { super.setVisible(true); int state = super.getExtendedState(); state &= ~JFrame.ICONIFIED; super.setExtendedState(state); super.setAlwaysOnTop(true); super.toFront(); super.requestFocus(); super.setAlwaysOnTop(false); } Whenever frame should be displayed or brought to front call frame.setVisible(true). Since I moved to Ubuntu 9.04 there seems to be no need in having a window listener for invoking super.setAlwaysOnTop(false) -- as can be observed this code was moved to methods toFront and setVisible. Pls note that method setVisible should always be invoked on EDT. Worked under all circumstances so I accepted this one. Thanks! Also related is this question: http://stackoverflow.com/questions/2315560/how-do-you-force-a-java-swt-program-to-move-itself-to-the-foreground +1 Was very helpful Thanks! @ka3ak This is a protected setter that could be introduced in the suggested JFrame-base class in order to track the situation with frame being disposed. Method dispose() would need to be overridden with a call to setDisposed(true). This is not strictly speaking needed for everyone. It doesn't compile by me because of setDisposed() method. Can't be found. The `.setAlwaysOnTop(true);` was the only one that worked for me when using a JWindow. This may be the greatest the most important the most happy-making answer I've ever encountered on stack Overflow. Thanks for your service to mankind. This has been driving me NUTS.",java windows swing awt
304874,A,What are good docking frameworks for Java/Swing? I'm looking for a good lightweight Java docking framework. I know that Netbeans and Eclipse can be used as RCP but I'm looking for something a little bit more lightweight. See a comprehensive list (with links) of over 10 docking frameworks here. Raven Docking Apache 2; 0.2 MB MyDoggy LGPL; only JARs: 0.7 MB; Dec 2010 VLDocking LGPL; 0.4 MB NetBeans CDDL/GPL; 4.6 MB (platform.zip) Eclipse CPL or EPL ? only swt (?) InfoNode GPL or Commercial Sanaware GPL or Commercial full zip 0.3MB Docking Frames LGPL; 3 MB Jide commercial; <3MB FlexDock MIT; 0.4 MB; Nov 2011 Inactive projects SwingDocking seems to me fully functional and fast; Apache license 2; Oct 2007 XUI will be further developed here?; MPL; 1.6 MB (XUI-jdk15.zip); Feb 2008 JDocking CDDL; 1.3 MB (v0.8.zip) the docking part of netbeans JRichClient GPL; derivation of flexdock; Nov 2007 [Infonode](http://www.infonode.net/index.html?idw); GPL or Commercial Flexdock 1.1 is actually 433 KB 1.6 MB is for the demo package (see the [download page](http://java.net/projects/flexdock/downloads)) Docking Frames is actually 3 MB these days only the oldest versions are anywhere near 0.7 MB.  See the infonode docking windows. They have a gpl version and a commercial version but the licenses are not that expensive. Robust and good looking if you select the right skin (we use the ShapedGradientDockingTheme which looks a little like eclipse). Do you know if it is actively developed? The last release is from over a year now... Well the company is still there so I think they are. I haven't seen increases in version numbers for a while though. Not expensive? A commercial Infonode docking license costs $6000! $6000 is for a site license single user is $300.  I've just released another docking framework. It's really lightweight and available under the Apache 2.0 license. Raven Docking: http://raven.java.net/ravenDocking/index.html  We use VLDocking from vlsolutions (http://vldocking.com) quite successfully in 3 of our products. They have some open-source license compatible with GPL.  JIDE has quite a few components including a docking framework. The core of JIDE is open source but they also have several commercial libraries. The docking framework is commercial. http://www.jidesoft.com/products/component.htm  I have successfully used FlexDock in the past but it seems not well supported and it is quite hard to start with (this is a quite complex framework for docking). FlexDock is open source. Besides more recently I have enjoyed using MyDoggy which is well supported and quite easy to use (very well documented with enough examples and tutorials). Its main drawback (for me) is the difficulty to adapt its look when using 3rd-party LAFs (like Substance for instance). But in general I really like it. If I remember correctly it is quite a lightweight library. I would recommend it for any use (it is open source and free to use) for its good API.  I once evaluated several docking frameworks (including the already mentioned flexdock and mydoggy and jdocking. Finaly I came to Docking Frames which I can really recommend. It is easy to use but still feature rich + good documentation and quick support from developer via forum. +1 docking frames is quite nice and its still supported updated just a few weeks ago After reviewing the list above and testing a few of the frameworks I decided to give Docking Frames a shot mainly because it seems like the most active project.,java swing frameworks docking
260574,A,"Matisse in Eclipse I have just installed Eclipse 3.4 and found out that there is not a plugin to create Swing applications yet. I also have found that there is a Matisse implementation in MyEclipse IDE but I'd like to now whether there is such a Matisse plugin for free. I did a quick Google search and found that you could use Netbeans Matisse and Eclipse in parallel: NetBeans Wiki: UsingNetbeansMatisseAndEclipseInParallel It seems to basically involve building the Swing GUI in Netbeans and doing the other coding tasks from within Eclipse. Yeah I have being doing this. But this is not much practical unfortunately. I'll read the article you recommended.  there isnt one for free. myeclipse is the only way to run matisse inside eclipse.  Instatiations Swing Designer is the best in my opinion. We settled on it after trying may different Eclipse plugins. I didn't know it. Thank you very much for the recomendation. I'll try it. Instatiations Swing Designer is now [Google WindowBuilder Pro](https://developers.google.com/java-dev-tools/download-wbpro) ""Instatiations""? i just broke my tongue trying to pronounce that word  Although this is not a true answer to your question you may as well look at alternative solutions in terms of layout management: Matisse and GroupLayout are neither the only way nor the best one to define your GUI forms. I would suggest you take a look at: MigLayout (very powerful and quite simple) and DesignGridLayout (quite powerful and very simple) Both are open source and have a friendly license (not GPL). A quick search on Google will give you the links immediately. Disclaimer: I am one of DesignGridLayout both project owners but I point you to it because I'm convinced it provides a better way to define Swing layouts. No problem I'll check it. I mentioned Matisse because it's the best design I've knew so far but I'm open to alternatives as long as I can still work in eclipse. :-)",java eclipse swing eclipse-3.4 matisse
396156,A,"Automatically size JPanel inside JFrame I have a JPanel subclass on which I add buutons labels tables etc. To show on screen it I use JFrame: MainPanel mainPanel = new MainPanel(); //JPanel subclass JFrame mainFrame = new JFrame(); mainFrame.setTitle(""main window title""); mainFrame.getContentPane().add(mainPanel); mainFrame.setLocation(100 100); mainFrame.pack(); mainFrame.setVisible(true); mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); But when I size the window size of panel don't change. How to make size of panel to be the same as the size of window even if it was resized? If the BorderLayout option provided by our friends doesnot work try adding ComponentListerner to the JFrame and implement the componentResized(event) method. When the JFrame object will be resized this method will be called. So if you write the the code to set the size of the JPanel in this method you will achieve the intended result. Ya I know this 'solution' is not good but use it as a safety net. ;)  You can set a layout manager like BorderLayout and then define more specifically where your panel should go: MainPanel mainPanel = new MainPanel(); JFrame mainFrame = new JFrame(); mainFrame.setLayout(new BorderLayout()); mainFrame.add(mainPanel BorderLayout.CENTER); mainFrame.pack(); mainFrame.setVisible(true); This puts the panel into the center area of the frame and lets it grow automatically when resizing the frame.  From my experience I used GridLayout.  thePanel.setLayout(new GridLayout(abcd)); a = row number b = column number c = horizontal gap d = vertical gap. For example if I want to create panel with: unlimited row (set a = 0) 1 column (set b = 1) vertical gap= 3 (set d = 3) The code is below:  thePanel.setLayout(new GridLayout(0103)); This method is useful when you want to add JScrollPane to your JPanel. Size of the JPanel inside JScrollPane will automatically changes when you add some components on it so the JScrollPane will automatically reset the scroll bar.  As other posters have said you need to change the LayoutManager being used. I always preferred using a GridLayout so your code would become: MainPanel mainPanel = new MainPanel(); JFrame mainFrame = new JFrame(); mainFrame.setLayout(new GridLayout()); mainFrame.pack(); mainFrame.setVisible(true); GridLayout seems more conceptually correct to me when you want your panel to take up the entire screen. What about BorderLayout.CENTER?.I think it can used mainly for these kind of cases.  You need to set a layout manager for the JFrame to use - This deals with how components are positioned. A useful one is the BorderLayout manager. Simply adding the following line of code should fix your problems: mainFrame.setLayout(new BorderLayout()); (Do this before adding components to the JFrame) Further reading . The important thing in this case is that a JFrame's default layout manager is FlowLayout.",java swing size jframe jpanel
357562,A,"Java based Swing Browser should support JavaScript In my company I am implementing a java based html browser. I found a lot of tools to generate complete browsers only in Swing which are looking like Mozilla. But I was not able to find a browser which supports JavaScript. The browser I will implement should execute JavaScript inside the HTML sides. Do you know of a tool that supports this? Or do you know of a parser which pairs the javascript to something I can use inside the html browser? I know that the eclipse plugins can handle javascript but I can not use AWT in my project. Thanks for your help. I'd look at Lobo. It sounds like just want you want. It has a HTML Renderer and parser and some support for Javascript. If it's missing a feature of Javascript that you need it seems like it would easier to contribute to Lobo instead of reinventing the wheel. That sounds like a good solution. I will test this. Thanks Will you please tell me that how to implement this?  It will be available. I hope pretty soon. Its name is JWebPane and it is based on WebKit afaik. The interesting question is ""When"" Here's the link: http://weblogs.java.net/blog/ixmal/archive/2008/05/introducing_jwe.html News today: http://weblogs.java.net/blog/alex2d/archive/2008/12/jwebpane_projec.html  In my company I am implementing a java based html browser. Good God why? That said this page at java.net discusses some options; you could search it more extensively.  You don't want to build this yourself. Fortunately there are a number of open source javascript engines you might be able to adapt. add the moment the html sides are shown by using C++ and a firefox plugin but i should use the existing html sides which including javascript. I have no choice i have to show html with javascript. I'm not saying don't do it: I'm saying find someone else that's already done it and use that.",java javascript swing swt
115277,A,"Fast search in java swing applications? I'm wandering myself what component is the best for displaying fast search results in swing. I want to create something like this make a text field where user can enter some text during his entering I'll improve in back end fast search on database and I want to show data bellow the text box and he will be able to browse the results and on pres enter result will be displayed in table. So my question is is there any component which already have this logic for displaying? Or is it's not what is the best way to implement that. This search will be something what ajax gives me on web same logic same look and feel if it's possible on desktop application. You will have to first attach a listener to the JTextFields Document to be notified whenever the user types in the field (or changes it). From there you can fire off any server-side code you need. The results of that can be used to update a listbox. A few things to keep in mind: The code to do the search against the backend must be in another thread The code that updates the list box should update the list box's model You will need to manage all your backend search results so that you only update the listbox with the most recent result (e.g. user types 'A' backenf searches for that. Meanwhile user has typed 'C' kicking off a backend search for 'AC'. You need to ensure the results from the 'A' search dont' make it to the listbox if the 'AC' search results are available).  It is possible of course. It is simple too. For drop down list of terms just use popup menu. This is simple. The background processing of entered text is simple too. Enjoy!  Use Hibernate Search. The SwingHack (http://oreilly.com/catalog/9780596009076/) book has an example of this.  In the interest of killing two birds with one stone: have a separate indexing thread. This will: Improve the speed of searches whenever they are executed. Improve the responsiveness of the UI since indexing is happening in a separate thread. Of course exactly how you perform the indexing will vary widely depending on your particular application. Here is a good place to start researching: Search Indexing. And please ignore the reference to Web 3.0 [sic].  Are you looking for something like an AutoComplete component for Java Swing? SwingX has such a component. See here for the JavaDoc. It has a lot of utility methods to do various things i.e. auto-completing a text box from the contents of a JList. Thanks for the tip. I downloaded the swingx classes and I tried: ArrayList nums = new ArrayList(); numsadd(new StringBuffer(""4000"")); nums.add(new StringBuffer(""5000"")); autoCompleteAdaptor = new TextComponentAdaptor(numsInputnums); where numsInput is a JTextField. I don't know what do I need to setup next. Do you happen to know where I can find a sample to get started ?  I strongly strongly recommend that you take a look at Glazed Lists - this is one of the finer open source Java libraries out there and it makes the bulk of what you are asking about super easy.",java swing search
491726,A,can I build swing applications on eclipse? I used to work on netbeans to build Java applications but now: i am using eclipse. I was was wondering if there a a free good plug-in to help me with swing windows.?? I'm assuming you want a GUI designer. The best plug-in for this is the excellent Swing Designer. Definitely worth a look. Nope sorry. But it is worth the license. it is not free ??  Jigloo - CloudGarden(free non-commercial) Visual Editor Project AND JForm (pay) I think your third link is wrong. It looks like a domain parking site... cheers looks like they forgot to pay there bill...  JForm designer is a good swing designer but it is not free.  Jigloo is free for non-commercial use. There are others on the UI category at Eclipse Plugin Central.,java eclipse swing
408820,A,"What is the difference between swing and awt? Can someone please explain me what's the difference between swing and awt? Are there any cases where awt is more useful/advised to use than swing or vice-versa? Related: http://stackoverflow.com/questions/2994304/is-java-swing-still-in-use/2994324#2994324 Swing: Swing is part of the java foundation classes. Swing components are platform-independent. Swing components are lightweight components because swing sits on the top of awt. AWT: AWT is called the abstract window tool. AWT components are platform-dependent. AWT components are heavyweight components.  As far as when AWT may be more useful than Swing - you may be targeting an older JVM or platform that doesn't support Swing. This used to really come into play if you were building Applets - you wanted to target the lowest common denominator so people wouldn't have to install a newer Java plugin. I'm not sure what the current most widely installed version of the Java plugin is - this may be different today. some people prefer the native look of AWT over Swing's 'not quite there' platform skins. (There are better 3rd party native looking skins than Swing's implementations BTW) Lots of people preferred using AWT's FileDialog over Swing's FileChooser because it gave the platform file dialog most people were used to rather than the 'weird' custom Swing one. But for the last one we can also create a FileChooser that pretty much looks like windows file dialog (but with no autocomplete) http://stackoverflow.com/q/17630055/2534090  swing component provide much flexible user interface because it follow model view controller(mvc). awt is not mvc based. swing works faster. awt does not work faster. swing componets are light weight. awt componentsare heavy weight. swing occupies less memory space. awt occupies more memory space. swing component is platform independent. awt is platform dependent. swing require javax.swing package. awt require javax.awt package. I don't think swing works faster than AWT because AWT uses native code (the gui code) that was already there in the OS but swing builds every component from the scratch. So AWT might be faster. Could you say me what is your point of view in saying **swing works faster**? Thanks.  Several consequences result from this difference between AWT and Swing. AWT is a thin layer of code on top of the OS whereas Swing is much larger. Swing also has very much richer functionality. Using AWT you have to implement a lot of things yourself while Swing has them built in. For GUI-intensive work AWT feels very primitive to work with compared to Swing. Because Swing implements GUI functionality itself rather than relying on the host OS it can offer a richer environment on all platforms Java runs on. AWT is more limited in supplying the same functionality on all platforms because not all platforms implement the same-looking controls in the same ways. Swing components are called ""lightweight"" because they do not require a native OS object to implement their functionality. JDialog and JFrame are heavyweight because they do have a peer. So components like JButton JTextArea etc. are lightweight because they do not have an OS peer. A peer is a widget provided by the operating system such as a button object or an entry field object. Great answer. Especially the **peer** no one discussed this. Thank you :)  AWT is a Java interface to native system GUI code present in your OS. It will not work the same on every system although it tries. Swing is a more-or-less pure-Java GUI. It uses AWT to create an operating system window and then paints pictures of buttons labels text checkboxes etc. into that window and responds to all of your mouse-clicks key entries etc. deciding for itself what to do instead of letting the operating system handle it. Thus Swing is 100% portable and is the same across platforms (although it is skinnable and has a ""pluggable look and feel"" that can make it look more or less like how the native windows and widgets would look). These are vastly different approaches to GUI toolkits and have a lot of consequences. A full answer to your question would try to explore all of those. :) Here are a couple: AWT is a cross-platform interface so even though it uses the underlying OS or native GUI toolkit for its functionality it doesn't provide access to everything that those toolkits can do. Advanced or newer AWT widgets that might exist on one platform might not be supported on another. Features of widgets that aren't the same on every platform might not be supported or worse they might work differently on each platform. People used to invest lots of effort to get their AWT applications to work consistently across platforms - for instance they may try to make calls into native code from Java. Because AWT uses native GUI widgets your OS knows about them and handles putting them in front of each other etc. whereas Swing widgets are meaningless pixels within a window from your OS's point of view. Swing itself handles your widgets' layout and stacking. Mixing AWT and Swing is highly unsupported and can lead to ridiculous results such as native buttons that obscure everything else in the dialog box in which they reside because everything else was created with Swing. Because Swing tries to do everything possible in Java other than the very raw graphics routines provided by a native GUI window it used to incur quite a performance penalty compared to AWT. This made Swing unfortunately slow to catch on. However this has shrunk dramatically over the last several years due to more optimized JVMs faster machines and (I presume) optimization of the Swing internals. Today a Swing application can run fast enough to be serviceable or even zippy and almost indistinguishable from an application using native widgets. Some will say it took far too long to get to this point but most will say that it is well worth it. Finally you might also want to check out SWT (the GUI toolkit used for Eclipse and an alternative to both AWT and Swing) which is somewhat of a return to the AWT idea of accessing native Widgets through Java. :) .. please check my edited question Um... having done some pretty extensive Swing across multiple platforms I can tell you that it very much is not the same across platforms. Similar? Sure. Same? No way. thanks a lot skiphoppy... The heavyweight/leightweight problems will disappear with Java 6 update 12 (see http://java.dzone.com/news/a-farewell-heavyweightlightwei). Wow. I can't believe they can fix it and I still can't believe mixing lightweight and heavyweight components would ever be desirable. But it's incredible that they can fix it. Just forget about both. Have a look at WPF. :)  AWT 1 . AWT occupies more memory space 2 . AWT is platform dependent 3 . AWT require javax.awt package swings 1 . Swing occupies less memory space 2 . Swing component is platform independent 3 . Swing requires javax.swing package Could you say me how does AWT occupies more memory space? Because it uses native code? awt requires java.awt.*  Swing vs AWT. Basically AWT came first and is a set of heavyweight UI components (meaning they are wrappers for operating system objects) whereas Swing built on top of AWT with a richer set of lightweight components. Any serious Java UI work is done in Swing not AWT which was primarily used for applets. are there any cases where awt is more useful/ advised to use then swing? Samiksha make that another question instead of trying to have a discussion thread in these comments. :) It used to be relevant... 10 years ago. @Pacerier he was talking about AWT not SWT  The base difference that which already everyone mentioned is that One is heavy weight and other is light weight. Let me explain bacially what the term heavy weight means is that when you are using the awt components the native code used for getting the view component is generated by the Operating System thats why it the look and feel changes from OS to OS. Where as in swing components its the responsibility of JVM to generate the view for the components. Another statement which i saw is that swing is MVC based and awt is not. actually Swing uses a Model-Delegate approach which is derived from the MVC approach where in the View and Controller are combined for a Delegate structure +1 for more simpler explanation",java swing awt
378754,A,"Java swing UI crash debugging I am trying to debug a problem where a user clicks on the button and the UI just dies. I know good luck. The logs just end after the user clicks the button so i'm thinking there may be some exception/error that we are not logging. Maybe an OutOfMemoryError. Any suggestions on how to proceed? to get more information. Java command setting etc. Thanks for any help rich i was able to find the jvm error file. Looks like something happened while in the ""AWT-Windows"" native thread. =>0x02acf000 JavaThread ""AWT-Windows"" daemon [_thread_in_native id=3616 stack(0x02eb00000x02f00000)] siginfo: ExceptionCode=0xc0000005 writing address 0xe2789280 Registers: EAX=0x234f099c EBX=0x00001400 ECX=0x00000100 EDX=0xe2789280 ESP=0x02eff4a4 EBP=0x00000400 ESI=0x234f099c EDI=0xe2789280 EIP=0x6d02bcbd EFLAGS=0x00010206 Top of Stack: (sp=0x02eff4a4) 0x02eff4a4: 02eff500 00000100 02eff584 00000100 0x02eff4b4: 6d0a5697 00000400 00000400 00000100 0x02eff4c4: 00000100 02eff700 02eff500 00000000 0x02eff4d4: 00000000 00000100 041ac3a0 00000100 0x02eff4e4: 00182620 00000400 e2789280 00000000 0x02eff4f4: 00000000 00000100 00000100 00000000 0x02eff504: 00000000 00000100 00000100 00000000 0x02eff514: 00000000 00000004 00000400 00000000 Instructions: (pc=0x6d02bcbd) 0x6d02bcad: 00 00 00 8b 4c 24 14 8b e9 c1 e9 02 8b f0 8b fa 0x6d02bcbd: f3 a5 8b cd 83 e1 03 f3 a4 8b 74 24 18 8b 4c 24 Stack: [0x02eb00000x02f00000] sp=0x02eff4a4 free space=317k Native frames: (J=compiled Java code j=interpreted Vv=VM code C=native code) C [awt.dll+0x2bcbd] [error occurred during error reporting (printing native stack) id 0xc0000005] Java frames: (J=compiled Java code j=interpreted Vv=VM code) j sun.awt.windows.WToolkit.eventLoop()V+0 j sun.awt.windows.WToolkit.run()V+69 j java.lang.Thread.run()V+11 v ~StubRoutines::call_stub  Try redirecting standard output - you'll probably see the exception stack trace there.  I don't know what you mean by ""just dies"". Does the UI still redraw itself if you drag it outside your screen edge and then back in? Does the entire process eventually terminate unexpectedly? Does the entire process immediately terminate unexpectedly? Assuming the UI is still there when you click a button and nothing seems to be happening another easy way to diagnose what might be going wrong is to monitor that process' CPU and memory usage. Task Manager (or better Process Explorer) if you're in Windows; ps if you're some flavor of Unix (and probably Mac as well). Check how much CPU that process is using first. If it's 0% then you probably have something benign like the button having no listener (and hence clicking it has no effect whatsoever). If it's 100% then you probably have some business logic running like mad possibly in an infinite loop. Two things to look at: one check memory usage and see whether it's going up; a bug could be causing large numbers of objects to be created and you'll eventually run out of memory. It's impossible to say for sure without knowing what the code does. The second thing is mentioned above: drag the UI offscreen and then back. Java's EDT (Event Dispatch Thread) is responsible for handling all UI events including redrawing the UI when it is made visible; if it doesn't do that then you know something is running in the EDT that shouldn't be keeping it from getting around to doing things like redraws. For all I know the business logic is working just fine but merely takes a while and is hogging the EDT. (If it's just under 50% 33% 25% etc. then you're on a multiple-CPU machine; see 100% above...) From your description however (namely ""the logs just end"") it sounds like your UI or business logic is waiting on something that'll never come so you'll have 0% CPU on that process. Worth checking anyway since it's quick and can head off a needless bug hunt in the wrong place.  You must have an event listener waiting for the mouse clicked event. Did you trace through that code to a specific line? The code must at least reach the first line I can't see the event listener not working. You'll need to break it down a bit. And if it's only got one line then you need to drill into that code until you have more than one line or until you can isolate it some more...  the application is running on java 1.6. and the entire process immediately terminate unexpectedly. One other piece of information is that the swing app is started using webstart. i'm are looking through code based on the last line in the log to see if i can figure out what's happening. unfortunately this has happened before and each time at a different point so i haven't been able to reproduce. we'll probably end up eventually using the Thread.setDefaultUncaughtExceptionHandler() suggestion and see if we can get more info. any more thought are welcome. thanks so much for the help  Which version of java and what machine? In any case here's the scoop: the event queue thread runs somewhat separately from the main thread. In Java < 5 there was a bug that made it difficult to capture events from that thread so some exceptions just went away. In Java 5 there's a new method Thread.setDefaultUncaughtExceptionHandler() that will let you set up an exception handler for anything that might otherwise have gone uncaught. Add a handler there and catch all Throwables and log them. This is also a good hack for dealing with things you might otherwise call System.exit() for as well; have a normalExit Throwable; throw that anywhere you'd call exit in the GUI and make sure all gets cleaned up. Charlie: I think of myself as pretty Java savant and this is one new feature of the language I definitely didn't know about. Thanks for sharing it! Well it happened in part because I complained about the difficulty when I was a Java Architect at Sun. System.exit() basically just shoots the process in the head; I wanted an orderly shutdown.",java swing
211051,A,"Find ""real"" height/width of Swing/AWT object Because Canvas3D doesn't have the ability to resize dynamically with the parent frame I would like to be able to track when a user resizes a window and then resize it manually myself. (If this ends up crashing Canvas3D as some docs suggest I will simply destroy and recreate it when the user resizes their window). Part of this procedure involves being able to accurately tell how big the container panel is to begin with. The two methods I've tried: panel.getHeight(); panel.getPreferredSize().height; Don't seem to accurately report things: getHeight() is invariably zero and getPreferredSize() returns numbers that don't actually have anything to do with the actual size of the panel. Any ideas? Edit: So I took a debugger to the panel object and manually inspected the non-object properties and I didn't see anything that resembled width/height. Granted there are sub-objects that I didn't look at. Also maybe the window has to be visible (it isn't at the point I'm interfacing the object) when I query for height/object? Edit 2: So Swing classes are subclasses of AWT classes so I imagine if you're able to find the height/width of those the approach would generalize. I've amended the title accordingly. I found out that if you extend by JFrame this code can be used also to save time effort and space. int windowWidth = getWidth(); int windowHeight = getHeight(); I know you already got an answer but if you ever need an alternative here it is.  To determine the size of a component you have to either: have set it manually at some point run the layout manager responsible for layouting the component Generally you get the exact size of a component via the getSize() method which returns a Dimension object containing width and height but getWidth/Height() should work too. But this can only work if one of the two preconditions are met. If a window has never been made visible has no layout manager or the component (you want to know the size of) has been added after the window/container has been made visible the size usually is zero. So to get the correct size you have to make the container/frame visible (after you have added the component) or call validate() or doLayout() on the container to recalculate the layout if you added the component after the last layout was done. Another thing to keep in mind is setting and probably configuring a layout manager on the container. If no layout manager ist set (null) even making a container visible oder calling validate() does not set a size on its children. The minimumSize/preferredSize/maximumSize properties are hints to the layout manager how the component should be sized but it does not have to obey them (most layout managers don't). Edit 2: After I read your other question about the same subject I think you should read Using Layout Managers from The Java Tutorials Edit: I don't know if you already figured that out but to react to the resizing of the window you can do something like this: public class WindowResizeTest extends JFrame { public static void main(String[] args) { new WindowResizeTest(); } public WindowResizeTest() { this.setSize(640 480); JPanel panel = new JPanel(); panel.setBackground(Color.RED); this.add(panel); this.addComponentListener(new ComponentListener() { public void componentResized(ComponentEvent e) { System.out.println(e.getComponent().getSize()); } public void componentHidden(ComponentEvent e) {} public void componentMoved(ComponentEvent e) {} public void componentShown(ComponentEvent e) {} }); this.setVisible(true); } } Thank you so much for the well thought out answer. I will try it out promptly! Thanks for the response. Saved my life! Thanks nice work!",java swing
156472,A,Is there a good drop-in replacement for Java's JEditorPane? I'm not happy with the rendering of HTML by Swing's JEditorPane. In particular bullets for unordered lists are hideous. Customising the rendering seems extremely difficult. Therefore I'm looking for a replacement with better HTML rendering. Does this exist? (I asked Google and found nothing except a promising dead link). Something that I looked at extensively a while back - and there are many options - however I nearly ended up using http://lobobrowser.org/cobra.jsp but then the project was cancelled so I can't tell you how it all turned out... Cobra works well for my needs. I wish the jar was a little smaller though.  Cobra did the trick. Almost a drop-in replacement for JEditorPane with very nice HTML rendering. One complaint: it's a big jar to add to my little application. Thanks for the responses.  http://today.java.net/pub/a/today/2004/05/24/html-pt1.html  Take a look at SwingBox. SwingBox is a Java Swing component that allows displaying the (X)HTML documents including the CSS support. It is designed as a JEditorPane replacement with considerably better rendering results. SwingBox is pure Java and it is using the CSSBox rendering engine for rendering the documents.,java swing jeditorpane
213378,A,"Open-source improvements or replacements for Swing components I develop a number of desktop Java applications using Swing and while Swing is quite powerful (once you get the hang of it) there are still a lot of cases where I wish some advanced component was available right out of the box. For example I'd really like to see easy-to-use components (without writing them myself which I could do given enough time) like: Multi-line label Windows File Explorer-like Icons or Thumbnails view Drop-down button (like Firefox's old Back button) 5-star rating widget Combo box with automatic history (like the text field on Google) An Outlook-style accordion-style bar and so on I know of a couple of sources of free Swing components like SwingLabs home of JXTable JXDatePicker and a few others. Where do you go for Swing components beyond those included with Java itself? Multi-line labels are built into Swing because you can use HTML in JLabels: http://stackoverflow.com/questions/685521/multiline-text-in-jlabel The following are worth a look: swingX Glazed lists Substance look'n'feel Flamingo components Ken Orr's Mac Widgets Jide's open source components Your first link has too many http's in it.  Hey There I know you can get an awesome wrapping labe and an accordion from javaswingcomponents however they are not open source implementations. Otherwise Jide and SwingX are great choices.  As for: ""Windows File Explorer-like Icons or Thumbnails view"" They are built in in swing. File explorer icons are accessed through FileSystemView class ( it is used by JFileChooser ) when the L&F is Windows of course. FileSystemView.getFileSystemView(); Icon driveIcon = fsv.getSystemIcon( new File(""C:\\"")); And the Thumbnails icon can be retrieved with the sun.com class that are discouraged by Sun sun.awt.shell.ShellFolder getIcon( boolean largeIcon ) But this one may not perform very well some times ( due to native resources handling I think ). I realize that... I was thinking about lists that look like Explorer views but aren't used for the file system. For example a thumbnail list of photos or some other type of icon.",java swing components
281478,A,"Jlabel HTML formatting I have a JLabel which has an e-mail address in it. I used HTML formatting on the JLabel so it appears as a link. However you are not able to click the link. In fact you cannot select any of the text in the label. Is there a property that I can set on the JLabel to allow the user to at least select the text of the e-mail and preferably to click on the e-mail address the way they would on a webpage? My code for my JLabel is essentially: JLabel l = new JLabel(""<html><a href=\""mailto:bob@bob.com\"">bob@bob.com</a>""); The default JLabel doesn't allow you to do this. If you really want to use a JLabel you could add a mouse listener to it to capture clicks and react to them. Another way would be to use a non-editable JEditorPane and call addHyperlinkListener on it to add your HyperlinkListener.",java swing
438508,A,"How to securely trigger a Swing-Action in a restricted applet? I simply want to call a swing action from my own popup menu. But since there is a security manager I need a solution to invoke this action without calling it directly. For instance the paste action of a text component will fail because sun.swing.SwingUtilities2 cannot be loaded if there is any of my classes in the call stack. Is there any way to enqueue an event to the event thread? JComponent.dispatchEvent doesn't do the job because it processes the event itself. Short answer: you can't without signing the applet. Long answer: If you could without permissions you could queue all kind of interesting messages. Your example paste or in long form: have access to something the client has copied before is an action the client needs to know about and authorize. Think about a rouge applet monitoring the clipboard ""pasting"" everything and sending it over the wire to a remote server. Your PIN for example. The solution is to sign your applet thereby telling the client ""It is in (your name here) responsibility that this applet is not evil."" and asking the user if he/she believes you. If yes the security manager will no longer block you. If not - well the user distrusts you why should the JVM do otherwise? See http://java.sun.com/developer/onlineTraining/Programming/JDCBook/signed.html",java security swing applet action
421381,A,"Swing buttons don't react immediately! How can I change that? I've built a form with Netbeans's visual editor. When I press one of the buttons it should do the following : set it to disabled perform a task that takes some time when the task finishes the button will be enabled again However the following happens: the button remains in a pressed state until the task finishes when the task finishes the enabling/disabling of buttons will be very fast (they will happen but you won't notice them) This behaviour is not something I want. I tried using repaint on the JButton on the JFrame and even on the JPanel containing the button but I can't seem to get it to do what I want. Some hints? You need to do the task that takes some time in a different thread. The reason the button is blocking is because the work is being done in the same thread that draws the button. Once the work is done the button can do the rest of what you tell it to. If you use a different thread the thread will go do the task while the drawing code can continue drawing the form.  When you do work in a button callback you are stalling the GUI painting thread until it completes. What you need to do is spawn a thread to do the long running task and then have that thread use SwingUtilities.invokeLater() to update the UI when it completes. Not using invokeLater is not thread safe and is generally bad mojo. A basic example is: button.setEnabled(false); new Thread(new Runnable() { public void run() { // Do heavy lifting here SwingUtilies.invokeLater(new Runnable() { public void run() { button.setEnabled(true); } }); } }).start(); The part with ""button.setEnabled(true)"" is taking place in the thread that does the work ? Should I pass the button to the thread ( in case I don't want to use anonymous classes ) ? It's taking place in the GUI Thread. See http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/SwingUtilities.html#invokeLater(java.lang.Runnable) As for how much you dislike anonymous classes that's up to you. You might want to put a try-finally in there too. Also it's more robust to calculate the new button state (in the EDT) rather than firing delayed messages with old state about the place. I forgot the run methods. Thanks Tom. Goes to show you how dependent I am of my IDE :) Sothe answer's yes? :) This answer is lacking in explanation - feel free to copy some of the explanation from my answer. Done. Thanks Paul. Made it community while I was at it. You might as well consider using SwingWorker (part of Java6 but exists as Open Source library for Java5) which will make the source code ligher (threading and EDT issues are handled by SwingWorker itself).  The Concurrency in Swing tutorial from Sun is well worth a read. Excellent explanation and background reading including the event dispatching thread using worker threads etc  When you do things in a button callback you are essentially stalling the gui painting thread - not just for the button but for ANY gui painting. (Try covering the interface with another window and then exposing it again - it won't repaint until the task is finished!) What you need to do is spawn a thread to do the long running task and then have that thread use SwingUtilities.invokeLater() to do the enabling of the button. invokeLater forces the button enable to happen in the gui painting thread. You may want to set a busy cursor or otherwise lock the interface while the long-running thread is operating. Too bad we can't merge answers. @Allain the important thing is making sure the accepted answer is as good as we can make it.",java swing
481379,A,Java: Handle logoff or shutdown on Windows and Linux Is there a way for a Java GUI application to respond to system shutdown or logoff events other than to use JNI? (On Windows the JNI would use WM_QUERYENDSESSION on Linux?) The method should allow the program to prompt users to save etc. and then continue the logoff process. You can schedule a Thread to be run on JVM shutdown - see http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Runtime.html#addShutdownHook(java.lang.Thread)  This doesn't answer the question but addresses part of it. In a Unix GUI session I consider the right way to handle the logoff event is to save the document to a temporary file and save the information in the session state. During the session recovery the program can reload the temporary file and take up where it left off. No need to ask the user about saving or not. I just wish more software did transparent session save and recovery. Too many programs reopen with empty document windows because the GUI framework used does that much but none of the rest of the work has been done to actually handle any meaningful program state.  I think that Runtime.getRuntime().addShutdownHook should provide the functionality you need.  As far as I know there's no way in Java to catch the system shutdown or logoff events. You can however catch when the JVM is terminating by adding a shutdown hook. AWT's WindowAdapter also has a windowClosing event that you can override and hook to a window that you want to monitor. Swing inherits this; I believe SWT does as well. Be aware that you MUST manually dispose of the window if you override this event! I believe that MS Windows will fire these events as it is closing. I believe a SIGTERM on Linux/UNIX does the same although Linux will SIGKILL an app shortly afterwords if this is during shutdown. Beware AWT's WindowAdapter will only hook to events on the window. If the environment is terminated using shutdown the windowClosing or windowClosed events will not fire!,java windows linux swing
95767,A,"How can I catch AWT thread exceptions in Java? We'd like a trace in our application logs of these exceptions - by default Java just outputs them to the console. There is a distinction between uncaught exceptions in the EDT and outside the EDT. Another question has a solution for both but if you want just the EDT portion chewed up... class AWTExceptionHandler { public void handle(Throwable t) { try { // insert your exception handling code here // or do nothing to make it go away } catch (Throwable t) { // don't let the exception get thrown out will cause infinite looping! } } public static void registerExceptionHandler() { System.setProperty('sun.awt.exception.handler' AWTExceptionHandler.class.getName()) } } Three years old but still a very useful answer. Thanks! No need to catch throwable. There will be no infinite looping. java.awt.EventDispatchThread.handleException is catching any exceptions for you. There saids `classs AWTExceptionHandler`  There are two ways: /* Install a Thread.UncaughtExceptionHandler on the EDT */ Set a system property: System.setProperty(""sun.awt.exception.handler""MyExceptionHandler.class.getName()); I don't know if the latter works on non-SUN jvms. -- Indeed the first is not correct it's only a mechanism for detecting a crashed thread. Using Thread.UncaufhtExceptionHandler won't catch EDT exceptions. The EDT class catches all throwables and prints them out rather than letting them unwind the whole thread. You are also missing details about what is needed in the second option the MyExceptionHandler class must have a handle(Throwable) instance method accessable and a no-args constructor accessable.  A little addition to shemnons anwer: The first time an uncaught RuntimeException (or Error) occurs in the EDT it is looking for the property ""sun.awt.exception.handler"" and tries to load the class associated with the property. EDT needs the Handler class to have a default constructor otherwise the EDT will not use it. If you need to bring a bit more dynamics into the handling story you are forced to do this with static operations because the class is instantiated by the EDT and therefore has no chance to access other resources other than static. Here is the exception handler code from our Swing framework we are using. It was written for Java 1.4 and it worked quite fine there: public class AwtExceptionHandler { private static final Logger LOGGER = LoggerFactory.getLogger(AwtExceptionHandler.class); private static List exceptionHandlerList = new LinkedList(); /** * WARNING: Don't change the signature of this method! */ public void handle(Throwable throwable) { if (exceptionHandlerList.isEmpty()) { LOGGER.error(""Uncatched Throwable detected"" throwable); } else { delegate(new ExceptionEvent(throwable)); } } private void delegate(ExceptionEvent event) { for (Iterator handlerIterator = exceptionHandlerList.iterator(); handlerIterator.hasNext();) { IExceptionHandler handler = (IExceptionHandler) handlerIterator.next(); try { handler.handleException(event); if (event.isConsumed()) { break; } } catch (Throwable e) { LOGGER.error(""Error while running exception handler: "" + handler e); } } } public static void addErrorHandler(IExceptionHandler exceptionHandler) { exceptionHandlerList.add(exceptionHandler); } public static void removeErrorHandler(IExceptionHandler exceptionHandler) { exceptionHandlerList.remove(exceptionHandler); } } Hope it helps.",java swing exception-handling awt
304663,A,"How can I validate parameters without creating a separate dialog? I'm going to make an application (in Swing) that uses a tree to visualize a data structure (JTree). A tree will be on the left side of a window. The user will be able to browse a tree. The parameters of every tree node will be displayed on the right side of the window. The example windows will be looking like this =========================== | tree panel | data panel | | | | | | | | | | --------------------------- The problem arises when a user wants to change that data. when should I validate them ? The easy approach is to open a new modal dialog (JDialog) and let the user to change this data in it. Validation of data would take place in an ""ok"" button listener method but this is a little clunky. I would like to allow the user to edit those data right in the data panel. In that case when should I validate them? Is there a pattern of such solution in Swing? Or any online tutorial how to do it? Thanks in advance. what about ""save"" button in data panel? ;) I'm not totally sure what you're after but.. You could maybe add this ""ok"" button (or ""commit changes"" or whatever) to data panel and when the button would be pressed you would validate the data and save the changes if the changes are valid? (So you'd have editable components at the data panel) Edit: if this wasn't good could you clarify me a bit: Is the data panel showing data for one item of the tree at time? What kind of data is there to change (and to validate) Anyway if you want to validate straight the changes made to an edit component (for example JTextField) you can use for example Formatted text fields see How to Use Formatted Text Fields For more general validating see InputVerifier More ideas see Validating Numerical Input in a JTextField (concentrates of numerical input but usable for other purposes also)  Dialogs are bad. Immediately discard any complete nonsense input immediately. For instance typing a letter in the numerical field (use Document filters). Don't beep. Don't require any particular commit step. You may have retain partially entered data.",java validation swing
227526,A,"Bus or listeners/delegates in client-side Swing application? Building a client-side swing application what should be notified on a bus (application-wide message system similar in concept to JMS but much simpler) and what should be notified using direct listeners? When using a bus I always have an unescapable feeling of ""I have no idea who uses that and where"". Also no set order hard to veto events hard to know exactly what's going on at a set time. On the other hand using listeners means either directly referencing the source object (coupling) or passing the reference through myriad conversions (A--b_listener-->B B--c_listener-->C only because a needs to know something only C can to tell but B has no interest in). So are there any rule of the thumb regarding this? Any suggestion how to balance? In my experience trying to make Swing do something it wasn't designed for or doesn't want you to do is extremely painful. I would go with the simplest thing that would work; keep your code clean do it the ""Swing Way"" until you start seeing problems.  Well I can imagine the approach where models are updated using BUS like system and events from models are delegated using listeners. Simple scenario: I got server side which represents producer of data. Then on client side a got consumer interface which consumes all incoming messages and transform them into my internal messages/DTOs and push them into bus which distributes them into application model(s). These model process incoming messages and decide to notify interested components using listeners.  Event buses are very very useful tools for providing decoupling in certain architectures. Listeners are easy to implement but they have significant limitations when your object and dependency graph gets large. Listeners tend to run into problems with cyclic dependencies (events can 'bounce' in odd ways and you wind up having to play games to ensure that you don't get stuck. Most binding frameworks do this for you but there's something distasteful about knowing that listener events are shooting off into a million places). I make this kind of decision based on project size and scalability. If it's a big app or there are aspects of the app that can by dynamic (like plugin modules etc...) then a bus is a good way to keep the architecture clean (OSGI-like module containers are another approach but heavier weight). If you are considering a bus architecture I recommend that you take a look at the Event Bus project - it works very well with Swing and provides a robust out of the box solution for what you are asking about. Link [Event Bus](https://eventbus.dev.java.net/) is dead. Are you referring to [EventBus](http://www.eventbus.org/) or [simpleeventbus](http://code.google.com/p/simpleeventbus/) or something else? Whew - the code at EventBus looks the same as what I pointed at back in 2008 but I haven't followed the project that closely...  The convention in Java Swing is to use listeners heavily. Sticking with the convention improves maintainability but stifles innovation. I've not encountered the bus approach in Swing but I find it interesting.",java swing events architecture
320682,A,Do I need to free Swing components before letting them get garbage collected? Wnen I use external resources such as files or DB connection I need to close them before I let them go. Do I need to do the same thing with Swing components ? If yes then how ? Objects are automatically garbage collected if there are no references to them. You do not have to treat Swing components the same way that you do external resources. However if you have a component that you are not going to need later you can set any references to that component to null. JPanel p = new JPanel(); p = null; Setting p to null does not delete the object but it removes any references to the object so the next time the garbage collector passes it gets picked up. You will have to be careful though that other reference to the component do not exist. p = null is rarely needed. See http://stackoverflow.com/questions/271530/cross-references-and-garbage-collection But swing components use external resources (eg window handles I gues) what about them ?  Normally you don't need to dispose of objects when you are done with them (although setting the references to them to null may allow them to be GCed sooner). However AWT and Swing objects allocate some amount of native resources that need to be freed. Furthermore the AWT thread treats the windows as top-level objects preventing them from being garbage collected and the JVM from terminating. Thus when you are done with your window you need to dispose of it which frees the native resources that it has allocated. One way to do this is to call Window.dispose() on it. However a better option would be to call JFrame.setDefaultCloseOperation() when you initialize each of your root windows. If you pass it DISPOSE_ON_CLOSE it will take care of disposing itself when the user closes the window. When the last such window closes the AWT thread will stop blocking and allow the JVM to close (assuming you don't have any other aberrant threads running). Alternatively you can pass it EXIT_ON_CLOSE which will cause your window to call System.exit() which tells the JVM that your application is done and to gracefully terminate. An what if I only get rid of a JPanel lith some controls in order to put there someting else ? Withount closing the entire window. What then ?  Windows (including dialogs and frames) should be disposed. If you create (AWT) Graphics objects then they should be disposed of too (but usually locally within say a paintComponent method). If you have a listener to update a short lived target from a long lived source then you should remove it before discarding the target. There's a neat hack where the listener uses a WeakReference to the target so that it can deregister when the reference goes away (and an event is fired).  At one point it was taught that you had to disconnect all the listeners because otherwise they'd act as references to the Swing component. But I'm told that this is no longer a problem.,java swing
97586,A,Has anyone got an example of aerith style swing mixed with GUI maintainability of SWT editing? My boss loves VB (we work in a Java shop) because he thinks it's easy to learn and maintain. We want to replace some of the VB with java equivalents using the Eclipse SWT editor because we think it is almost as easy to maintain. To sell this we'd like to use an aerith style L&F. Can anyone provide an example of an SWT application still being able to edit the GUI in eclipse but having the Aerith L&F? SWT doesn't support look & feels. You can get different L&F's by altering your OS native L&F. The only exception is to using the eclipse forms toolkit. It still has the OS native feel but strives for a web-browser-like look. It does this mostly by setting everything to SWT.FLAT and using white backgrounds on everything. Occassionally they have to manually draw outlines around controls that don't natively support it. If you're looking for custom L&F's that will appear across platforms you really want Swing.  Like Heath Borders said SWT doesn't support L&Fs so you have to use Swing for that. Aerith however does not base on a look and feel but on custom painting on the components with a lot of gradients. If you are looking for a Swing GUI Editor that is (nearly) as easy to use as VB try the Matisse GUI Builder in NetBeans. There is also a version for Eclipse but it is shipped with the commercial MyEclipse. If you want to learn more about writing apps with cool a cool GUI have a look at the Filthy Rich Clients book by Chet Haase and Romain Guy. If this does not convince your boss try to resize the VB GUI and then resize the Swing GUI. ;-) And I would say a VB is really not very good to maintain in the long run...,java eclipse swing swt lf
32529,A,"How do I restrict JFileChooser to a directory? I want to limit my users to a directory and its sub directories but the ""Parent Directory"" button allows them to browse to an arbitraty directory. How should I go about doing that? The solution of Allain is almost complete. Three problems are open to solve: Clicking the ""Home""-Button kicks the user out of restrictions DirectoryRestrictedFileSystemView is not accessible outside the package Starting point is not Root Append @Override to DirectoryRestrictedFileSystemView public TFile getHomeDirectory() { return rootDirectories[0]; } set class and constructor public Change JFileChooser fileChooser = new JFileChooser(fsv); into JFileChooser fileChooser = new JFileChooser(fsv.getHomeDirectory()fsv); I use it for restricting users to stay in a zip-file via TrueZips TFileChooser and with slight modifications to the above code this works perfectly. Thanks a lot.  No need to be that complicated. You can easily set selection mode of a JFileChooser like this JFileChooser fc = new JFileChooser(); fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); fc.setMultiSelectionEnabled(false); You can read more reference here How to Use File Choosers This limits them to directories in general but not to a specific directory which is the OP's question.  You can probably do this by setting your own FileSystemView. how do you get the default filesystemview (e.g. to delegate to it)? @Jason S - probably via static method `getFileSystemView()` Just if someone could need it here is an exact example of what OP wanted: http://tips4java.wordpress.com/2009/01/28/single-root-file-chooser/  Incase anyone else needs this in the future: class DirectoryRestrictedFileSystemView extends FileSystemView { private final File[] rootDirectories; DirectoryRestrictedFileSystemView(File rootDirectory) { this.rootDirectories = new File[] {rootDirectory}; } DirectoryRestrictedFileSystemView(File[] rootDirectories) { this.rootDirectories = rootDirectories; } @Override public File createNewFolder(File containingDir) throws IOException { throw new UnsupportedOperationException(""Unable to create directory""); } @Override public File[] getRoots() { return rootDirectories; } @Override public boolean isRoot(File file) { for (File root : rootDirectories) { if (root.equals(file)) { return true; } } return false; } } You'll obviously need to make a better ""createNewFolder"" method but this does restrict the user to one of more directories. And use it like this: FileSystemView fsv = new DirectoryRestrictedFileSystemView(new File(""X:\\"")); JFileChooser fileChooser = new JFileChooser(fsv); or like this: FileSystemView fsv = new DirectoryRestrictedFileSystemView( new File[] { new File(""X:\\"") new File(""Y:\\"") }); JFileChooser fileChooser = new JFileChooser(fsv); Doesn't work @Allain",java swing jfilechooser
292279,A,"Populate JTable from a Hashtable in Java I have a function which gets a key from the user and generates a Hashtable (on a pattern specified by the key). After creating a Hashtable I would like to populate a JTable so that each each column represents a key and every rows represents the values associated with the key. I tried everything but couldn't get this work. I'm not creating the table from within the constructor as I need to get input from the user. See How to Use Tables: Creating a Table Model. The JTable constructor used by SimpleTableDemo creates its table model with code like this: new AbstractTableModel() { public String getColumnName(int col) { return columnNames[col].toString(); } public int getRowCount() { return rowData.length; } public int getColumnCount() { return columnNames.length; } public Object getValueAt(int row int col) { return rowData[row][col]; } public boolean isCellEditable(int row int col) { return true; } public void setValueAt(Object value int row int col) { rowData[row][col] = value; fireTableCellUpdated(row col); } } You basically have to wrap your hashtable in the above manner. Here's an example. package eed3si9n.hashtabletable; import java.awt.BorderLayout; import java.util.Enumeration; import java.util.Hashtable; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JScrollPane; import javax.swing.JTable; import javax.swing.table.AbstractTableModel; import javax.swing.JButton; import java.awt.Dimension; public class MainForm extends JFrame { private static final long serialVersionUID = 1L; private JPanel jContentPane = null; // @jve:decl-index=0:visual-constraint=""2338"" private JScrollPane m_scrollPane = null; private JTable m_table = null; private Hashtable<String String> m_hash = null; private JButton m_btnAdd = null; /** * This is the default constructor */ public MainForm() { super(); initialize(); m_hash = new Hashtable<String String>(); m_hash.put(""Dog"" ""Bow""); } private void onButtonPressed() { m_hash.put(""Cow"" ""Moo""); m_table.revalidate(); } /** * This method initializes this * * @return void */ private void initialize() { this.setSize(409 290); this.setTitle(""JFrame""); this.setContentPane(getJContentPane()); } /** * This method initializes jContentPane * * @return javax.swing.JPanel */ private JPanel getJContentPane() { if (jContentPane == null) { jContentPane = new JPanel(); jContentPane.setLayout(new BorderLayout()); jContentPane.setSize(new Dimension(500 500)); jContentPane.setPreferredSize(new Dimension(500 500)); jContentPane.add(getM_scrollPane() BorderLayout.NORTH); jContentPane.add(getM_btnAdd() BorderLayout.SOUTH); } return jContentPane; } /** * This method initializes m_scrollPane * * @return javax.swing.JScrollPane */ private JScrollPane getM_scrollPane() { if (m_scrollPane == null) { m_scrollPane = new JScrollPane(); m_scrollPane.setViewportView(getM_table()); } return m_scrollPane; } /** * This method initializes m_table * * @return javax.swing.JTable */ private JTable getM_table() { if (m_table == null) { m_table = new JTable(); m_table.setModel(new AbstractTableModel(){ private static final long serialVersionUID = 1L; public int getColumnCount() { return 2; } public int getRowCount() { return m_hash.size(); } public String getColumnName(int column) { if (column == 0) { return ""Animal""; } else { return ""Sound""; } } public Object getValueAt(int rowIndex int columnIndex) { if (columnIndex == 0) { return getKey(rowIndex); } else { return m_hash.get(getKey(rowIndex)); } // if-else } private String getKey(int a_index) { String retval = """"; Enumeration<String> e = m_hash.keys(); for (int i = 0; i < a_index + 1; i++) { retval = e.nextElement(); } // for return retval; } }); } return m_table; } /** * This method initializes m_btnAdd * * @return javax.swing.JButton */ private JButton getM_btnAdd() { if (m_btnAdd == null) { m_btnAdd = new JButton(); m_btnAdd.setPreferredSize(new Dimension(34 30)); m_btnAdd.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent e) { onButtonPressed(); } }); } return m_btnAdd; } public static void main(String[] args) { //Schedule a job for the event-dispatching thread: //creating and showing this application's GUI. javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { MainForm frame = new MainForm(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(500 500); frame.setVisible(true); } }); } } // @jve:decl-index=0:visual-constraint=""1010""  Firstly avoid Hashtable go straight for Map. In this case there two potential standard implementations you mights want: LinkedHashMap can retain the order that the entries were added; TreeMap a SortedMap/NavigableMap will sort the results (order of which can be determined by a Comparator. Alternatively you might want a form of Map that fire events or also provides a TableModel. If you want a one time conversion from the Map to table then it's pretty straightforward. public static TableModel toTableModel(Map<??> map) { DefaultTableModel model = new DefaultTableModel( new Object[] { ""Key"" ""Value"" } 0 ); for (Map.Entry<??> entry : map) { model.addRow(new Object[] { entry.getKey() entry.getValue() }); } return model; } Then just create the JTable with this pre-populated model. (Disclaimer: I've not tested or so much as compiled this code.) To keep the Map and TableModel synchronized is more code. Generally it's best to avoid duplicating state whereever possible. Write a class that exposes itself as both a Map and a TableModel. You could go more disjoint by having a Map that fires events and a TableModel that adapts the Map (although note that Map does not have random access based on index so you'll need to be iether clever or slow for large maps). Going the other way a simpler approach would be to add the data straight to a DefaultTableModel and not using a Map at all.",java swing hashtable jtable
329506,A,"Is there a multiple input JOptionPane in Java? I was wondering if there is a JOptionPane where you can get multiple inputs from a user instead of just one? If not how could i accomplish this using some type of prompt. I am creating Battleship and wanted to prompt the user to specify locations to place each ship. Thanks Tomek The object that you pass in as the message to the JOptionPane can be graphical components so something like this should work: JPanel panel = new JPanel(); // Populate your panel components here. int ret = JOptionPane.showConfirmDialog(parent panel ""Title"" JOptionPane.YES_NO_OPTION); if ( ret == JOptionPane.YES_OPTION ) { // Read component values. }",java swing input jdialog joptionpane
210998,A,Canvas3D not appearing in Swing window I am attempting to insert a Canvas3D object inside a Swing JPanel but the code doesn't seem to be working (i.e. nothing happens):  Canvas3D canvas = new Canvas3D(SimpleUniverse.getPreferredConfiguration()); SimpleUniverse universe = new SimpleUniverse(canvas); BranchGroup root = new BranchGroup(); root.addChild(new ColorCube()); universe.addBranchGraph(root); universe.getViewingPlatform().setNominalViewingTransform(); canvasPanel.add(canvas); What am I missing? The JPanel was created using NetBean's Visual Editor. Probably you have to set a layout manager on the panel which automatically expands the child components to the full area. A JPanel has a FlowLayout by default which does not expand the child components. You could try a BorderLayout instead by calling: canvasPanel.setLayout(new BorderLayout()); Ah that worked perfectly. Thank you!  Canvas3D needs a size passed to it; setting the preferred configuration from SimpleUniverse is not enough. In my case that meant this code:  // 3D canvas initialization Canvas3D canvas = new Canvas3D(SimpleUniverse.getPreferredConfiguration()); SimpleUniverse universe = new SimpleUniverse(canvas); BranchGroup root = new BranchGroup(); root.addChild(new ColorCube()); universe.addBranchGraph(root); universe.getViewingPlatform().setNominalViewingTransform(); canvas.setSize(100 100); canvasPanel.add(canvas);,java swing java-3d
241342,A,Is it possible to display Swing components in a JSP? I was wondering if I could pop up JOptionPanes or other Swing components from within a browser using JSP. You may also want to consider GWT which enables you to develop a web interface in Java code (the Java code is converted to HTML & JavaScript by the GWT compiler). Although you don't program to the Swing API directly when writing GWT applications the GWT API is very similar in style to Swing programming.  If you embed an applet. But I don't think that's what you want. Swing is for desktop apps. JSP web pages. If you want components try looking into JSF or some of the many AJAX Javascript frameworks like prototype.  Assuming you're familiar with Swing you may want to introduce yourself to Apache Wicket which is very similar to the way you build web pages as Swing is to building GUI:s. That is in Wicket you add new instancef of Label Button DataTable etc. etc. to page and link those to bean property data which is then ultimately transformed to fully functioning web page. As for the actual question you really can't do it as-is. If choosing a new/different/another web framework to help you isn't possible the only proper way I can think of is doing what sblundy suggested.,java swing jsp
143341,A,Are there any frameworks for handling database requests in swing applications? I believe any programmer who has been dealing with database requests in a gui application has run into some or all of the following problems: Your GUI freezes because you call database layer from within the event dispatch thread When you have multiple windows/panels/jframes where user can start a db request your performance degrades because you don't have any control about the threads your user creates User may be able to lock down the application and even the database because he calls any action many times before the first action has been finished What I'd like to know about: are there any frameworks that handle the requirements of handling an ordered set of long running actions (including but not limited to database calls i.e. calculations) outside the event dispatch thread? Note: I know of SwingWorker ;-) Such a thing should be found in Netbeans for example. See RequestProcessor. But in simpler cases this is not required. Last time I need something like thread scheduling and control I simply used new concurrency packages included in J5 (I used J6). With its ExecutorFactory-ies you can simply achieve basic control over tasks. You can also use some queues. This PDF can help. The PDF is written in Slovak language but the Single/Multiple task workers are there written in Java ;)  Naked Objects facilitate a clean domain model and they also have a GUI 2 DB mapping layer -- http://www.nakedobjects.org/home/index.shtml  I doubt you will find something specific for database requests. You can try to reuse existing generic task scheduling libraries. An example is the Eclipse jobs API. This does not depend on the IDE. See http://www.eclipse.org/articles/Article-Concurrency/jobs-api.html That has been my impression at the time too. We've developed a kind of queue where you could add SwingWorker instances that would execute in scheduled order.,java database multithreading swing
248353,A,"Java GUI LayoutManagers I'm busy with an asignment where i have to make a graphical interface for a simple program. But i'm strugling with the layout. This is the idea: What is the easiest way to accomplish such a layout? And what method do you use to make layouts in java. Just code it or use an IDE like netbeans? I build everything by hand. Like Christian I've had bad experiences with GUI builders; they always either refused to configure a couple of components quite right or they generated huge amounts of unnecessary code which made later maintenance impractical or both. I used to do build a lot of UIs using GridBagLayout but for years I've never seen an office-environment UI that couldn't be built with nested BorderLayouts GridLayouts and the occasional BoxLayout or FlowLayout. About 98% of the stuff I've seen is doable with nested BorderLayouts. In your case the layout organization will be as bmeck says. Speaking from memory using CENTER for the JTable (remember to put it in a JScrollPane!) and NORTH for everything else ensures that if you resize your JFrame the JTable will get all of the extra space and that should be exactly what you want. For the top labels and fields the nested GridLayouts should ensure that each ""column"" of labels and fields will take up equal horizontal space. (They'll get only enough vertical space to be completely visible and no more since the JTable is taking up everything else.) Everything else is just a matter of adding borders and setting the GridLayout padding reasonably.  I've used GUI layout generating tools for super rapid development (maybe get the first 2 or 3 iterations of an interface out of the way). I've ultimately found that using a simple fixed layout (no layout manager) with these tools is the best approach. Once we are starting to hone in on a design we switch to manual layout. Whenever I've tried to use GUI generators to create code for layout managers I've almost always been bitten eventually where the layout would just stop working and I spent more time debugging the impossible to read auto-generated code than if I'd done the layout by hand anyway. For what it's worth when we are doing the early phase of layouts we use the Jigloo plugin for Eclipse. It's very inexpensive and does a good job. I'm a big fan of MiGLayout. I've found that it is incredibly easy to use for simple layouts and is capable of doing extremely complicated layouts. All without the need to resort to nested panels etc... JGoodies Forms is also good but harder to use.  And what method do you use to make layouts in java. Just code it or use an IDE like netbeans? NetBeans for GUI developers is like a calculator for grade schoolers: you really shouldn't use it until you know how to do things without it but then it will save you a lot of time. (I'd love to answer your primary question but the firewall I'm behind is blocking the picture.)  Well considering how simple the layout is I would suggest you use a BorderLayout with NORTH set to the top section in a container and the JTable in the CENTER of the BorderLayout. For the Top it appears to be a simple BorderLayout again with NORTH as the Instruction: south as the black box (possibly in a container with a FlowLayout). The center of the top pane appears to be 2 Containers of GridLayouts with 2 rows and 2 columns so put thos in another container with a GirdLayout. So in pseudo: Container(BorderLayout) { @NORTH Container(BorderLayout) { @NORTH Label(Instruction); @CENTER Container(GridLayout(21)) { Container(GirdLayout(22)) { Label() TextField() Label() TextField() } Container(GirdLayout(22)) { Label() TextField() Label() TextField() } } @SOUTH Container(FlowLayout()) { JButton() //shaded thing? } } @CENTER { JTable } }  Use GroupLayout :) All the alignments are pretty easy to do  For myself gui-builders for swing or swt never worked that well that's why i code layouts myself using layout managers. Your question doesn't mention which gui-system you are using but i assume you want to use swing. If that's the case I would recommend to use GridBagLayout for your layout. It is not that easy to use in the beginning but as soon as you know how it works you can do most layouts in the way you want it to be and i think it is also the layoutmanager of choice for the layout you want to do.  I used to love Motif's XmForm for this sort of thing. In Java I usually put Boxes inside of boxes. So I have a vertical box. First row of the box contains a JLabel for the Instruction. Second row contains something for the label/result stuff possibly some sort of grid. Third row contains whatever that blacked out thing Fourth row contains the JTable. Then I'd spend some time to try to figure out how to do the lable/result stuff. Then I'd probably end up saying ""dammit"" and doing it as a GridBagLayout.  I wrote an article a while back on layout managers: http://developer.java.sun.com/developer/onlineTraining/GUI/AWTLayoutMgr It describes how nesting (as bmeck above demonstrates) can be used very effectively for many UI designs.  Try table layout. Works great. https://tablelayout.dev.java.net/",java swing gui
370259,A,"Java GUI Swing Model Explanation I've been working with Java GUI for a while now but the whole model/structure of JFrames paint() super etc is all murky in my mind. I need a clear explanation or link that will explain how the whole GUI system is organized. Thanks everyone some more answers would be better but this is great! I've found that simply browsing around in the source code (ctrl-click on a name if you're using NetBeans) has been really helpful. If I see a method appear in the completion dialog that I'm not familiar with I'll just click ""Go to source"" and look around until I'm comfortable with it.  If after reading the Swing tutorial you find your interest lies in more advanced topics you may also wish to look at Swing Second Edition by Robinson and Vorobiev.  The same happened to me. Actually to this day I don't quite get 100% how all it works. Swing is a very flexible framework--perhaps too flexible. With flexibility comes a lot of abstraction and with abstraction comes confusion. :) I've found the following articles worth reading. They helped me to better understand the big picture of Swing. http://web.archive.org/web/20110413222135/http://java.sun.com/products/jfc/tsc/articles/architecture/ http://www.oracle.com/technetwork/java/architecture-142923.html (original links now broken) http://java.sun.com/products/jfc/tsc/articles/architecture/ http://java.sun.com/products/jfc/tsc/articles/architecture/ui_install/index.html They explain quite well how the model and the delegate work. It always drives me mad when I see those JLabel LabelUI ui.update etc. I hope this helps. Very useful link - had not seen that before; bookmarked for a closer look later. Yeahh ... I don't remember how I came to that link. I didn't found it until after several years. I don't know the ""google search"" to produce it either so I have it in my bookmarks too. @OscarRyz links are dead. do you have the copy? i need those for my students. thanks. @OscarRyz Cool thanks! @ihsan Unfortunately the site in Oracle has broken images:http://www.oracle.com/technetwork/java/architecture-142923.html Fortunately we have the wayback machine: http://web.archive.org/web/20110413222135/http://java.sun.com/products/jfc/tsc/articles/architecture/  Since this question is tagged with JFrame I'll suggest a few links for understanding how JFrames and other top-level Swing containers work. I also found that Swing was (and still is) quite involved and taking a look at the documentation provided by Sun is required every once in a while -- Every time I check I seem to learn something new. First the basics: JFrame class from the Java API Specifications. The Java API Specifications often provide good detailed information about the classes. In this instance you'll notice that there are several links such as How to Make Frames section from The Java Tutorials. Aside from that I'll also recommend looking at the Lesson: Using Swing Components from The Java Tutorials. The lesson provides instructions on how to use the components provided in Swing along with some useful examples. For more specifics parts that I've found confusing when I started with Swing was all the different types of panes such as the ContentPane RootPane GlassPane. The Using Top-Level Containers section provides information and helpful diagrams on the container hierarchy of the top-level containers. The How to Use Root Panes section gets into the details about the Glass Layered and Content Panes with plenty of examples.  Filthy Rich Clients by Chet Haase and Romain Guy is a great book about Java UI. It covers some more advanced stuff too but introduction and few first chapters explain fundamental things well.  I found Swing Explorer to be a precious tool to understand the hierarchy of components (particularly in complex GUIs) and look at properties (alas read-only: we get used to Firebug convenience!). It has an Eclipse plugin.  Have you looked at the Java Swing Tutorial (click here)? It does a pretty good job of covering the basics of developing Swing applications.",java swing gui jframe
258099,A,"How to close a Java Swing application from the code What is the proper way to terminate a Swing application from the code and what are the pitfalls? I'd tried to close my application automatically after a timer fires. But just calling dispose() on the JFrame didn't do the trick - the window vanished but the application did not terminate. However when closing the window with the close button the application does terminate. What should I do? Please post up a code snippet of your timer. May be the safe way is something like:  private JButton btnExit; ... btnExit = new JButton(""Quit""); btnExit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e){ Container frame = btnExit.getParent(); do frame = frame.getParent(); while (!(frame instanceof JFrame)); ((JFrame) frame).dispose(); } }); Pretty bad style to name a variable `Frame` with a capital letter exactly like the name of a class…  Try: System.exit(0); Crude but effective. System.exit(0) isn't just crude it's evil. Check all frames call dispose. If that fails run a debugger and see what non-daemon threads are still alive. Unfortunately this is too crude for me. I want the window closing events to be processed for some cleanup actions. OK I could do a System.exit with a SwingUtils.invokeLater but I'd rather do the proper thing. There's been plenty of bugs even within the JDK that leave the process about. So +1 to exit() but you might want to disable it in debug builds.  In response to other comments DISPOSE_ON_CLOSE does not seem to properly exit the application - it only destroys the window but the application will continue running. If you want to terminate the application use EXIT_ON_CLOSE. Can't remember how I tested this now. This response suggests the exact opposite of James Schek's answer. Which one is correct? (when I test with a simple application both seem to work ...)  I guess a EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); before System.exit(0) is better since you can write a Window Listener to make some cleaning operations before actually leaving the app. That window listener allows you to defined: public void windowClosing(WindowEvent e) { displayMessage(""WindowListener method called: windowClosing.""); //A pause so user can see the message before //the window actually closes. ActionListener task = new ActionListener() { boolean alreadyDisposed = false; public void actionPerformed(ActionEvent e) { if (frame.isDisplayable()) { alreadyDisposed = true; frame.dispose(); } } }; Timer timer = new Timer(500 task); //fire every half second timer.setInitialDelay(2000); //first delay 2 seconds timer.setRepeats(false); timer.start(); } public void windowClosed(WindowEvent e) { //This will only be seen on standard output. displayMessage(""WindowListener method called: windowClosed.""); }  Take a look at the Oracle Documentation. Starting from JDK 1.4 an Application terminates if: There are no displayable AWT or Swing components. There are no native events in the native event queue. There are no AWT events in java EventQueues. Cornercases: The document states that some packages create displayable components without releasing them.A program which calls Toolkit.getDefaultToolkit() won't terminate. is among others given as an example. Also other Processes can keep AWT alive when they for what ever reason are sending events into the native event queue. Also I noticed that on some Systems it takes a coupple of seconds before the Application actually terminates.  Your JFrame default close action can be set to ""DISPOSE_ON_CLOSE"" instead of EXIT_ON_CLOSE (why people keep using EXIT_ON_CLOSE is beyond me). If you have any undisposed windows or non-daemon threads your application will not terminate. This should be considered a error (and solving it with System.exit is a very bad idea). The most common culprits are java.util.Timer and a custom Thread you've created. Both should be set to daemon or must be explicitly killed. If you want to check for all active frames you can use Frame.getFrames(). If all Windows/Frames are disposed of then use a debugger to check for any non-daemon threads that are still running. In my case I discovered with the debugger that I had a Swingworker still active. I called its cancel(true) method in the WindowClose Eventlistener and the program terminates now. Thanks! Note that you may have to call dispose on each frame and typically that is ""enough"" (though setting the default close action to EXIT_ON_CLOSE is probably not a bad idea either). First window should add itself to as a listener to the second window and take appropriate action. What if you have one window opening another but not disposing itself so that you can use it for a `back` window? If the second window is then closed and you use `DISPOSE_ON_CLOSE` the programme doesn't terminate because the first window is still ""undisposed""... is there a way to solve that _without_ using `DISPOSE_ON_CLOSE`? This response suggests the exact opposite of Bizorke's answer. Which one is correct? (when I test with a simple application both seem to work ...) Using EXIT_ON_CLOSE will forcibly terminate the application. If you need to take action before the program exits (such as saving working data) then you have to tap into the JVM event handlers instead of just using the normal swing event handlers. Both will ""work"" but the EXIT_ON_CLOSE will cause problems for more complex apps. An example in support of graceful shutdown: I needed to ensure my finally block was executed so network connections were closed gracefully. This would not happen with a System.exit call (EXIT_ON_CLOSE).  I think the idea is here the WindowListener - you can add any code there that you'd like to run before the thing shuts down  If I understand you correctly you want to close the application even if the user did not click on the close button. You will need to register WindowEvents maybe with addWindowListener() or enableEvents() whichever suits your needs better. You can then invoke the event with a call to processWindowEvent(). Here is a sample code that will create a JFrame wait 5 seconds and close the JFrame without user interaction. import javax.swing.*; import java.awt.*; import java.awt.event.*; public class ClosingFrame extends JFrame implements WindowListener{ public ClosingFrame(){ super(""A Frame""); setSize(400 400); //in case the user closes the window setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setVisible(true); //enables Window Events on this Component this.addWindowListener(this); //start a timer Thread t = new Timer(); t.start(); } public void windowOpened(WindowEvent e){} public void windowClosing(WindowEvent e){} //the event that we are interested in public void windowClosed(WindowEvent e){ System.exit(0); } public void windowIconified(WindowEvent e){} public void windowDeiconified(WindowEvent e){} public void windowActivated(WindowEvent e){} public void windowDeactivated(WindowEvent e){} //a simple timer class Timer extends Thread{ int time = 10; public void run(){ while(time-- > 0){ System.out.println(""Still Waiting:"" + time); try{ sleep(500); }catch(InterruptedException e){} } System.out.println(""About to close""); //close the frame ClosingFrame.this.processWindowEvent( new WindowEvent( ClosingFrame.this WindowEvent.WINDOW_CLOSED)); } } //instantiate the Frame public static void main(String args[]){ new ClosingFrame(); } } As you can see the processWindowEvent() method causes the WindowClosed event to be fired where you have an oportunity to do some clean up code if you require before closing the application. windowClosed should call dispose() not System.exit(0).  The following program includes code that will terminate a program lacking extraneous threads without explicitly calling System.exit(). In order to apply this example to applications using threads/listeners/timers/etc one need only insert cleanup code requesting (and if applicable awaiting) their termination before the WindowEvent is manually initiated within actionPerformed(). For those who wish to copy/paste code capable of running exactly as shown a slightly-ugly but otherwise irrelevant main method is included at the end. public class CloseExample extends JFrame implements ActionListener { private JButton turnOffButton; private void addStuff() { setDefaultCloseOperation(DISPOSE_ON_CLOSE); turnOffButton = new JButton(""Exit""); turnOffButton.addActionListener(this); this.add(turnOffButton); } public void actionPerformed(ActionEvent quitEvent) { /* Iterate through and close all timers threads etc here */ this.processWindowEvent( new WindowEvent( this WindowEvent.WINDOW_CLOSING)); } public CloseExample() { super(""Close Me!""); addStuff(); } public static void main(String[] args) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { CloseExample cTW = new CloseExample(); cTW.setSize(200 100); cTW.setLocation(300300); cTW.setVisible(true); } }); } }",java swing
476678,A,"Tabs with equal (constant) width in JTabbedPane I'm trying to get a JTabbedPane where all tabs (the actual tabs not the components) have the same width (either the minimum width needed for the widest label or a constant width). I've tried to override BasicTabbedPaneUI.getTabBounds(int tabIndex Rectangle dest) but apparently this method isn't used by the painting methods of BasicTabbedPaneUI instead it uses a rects array to determine the tabs size. My next approach would be to override JTabbedPane.insertTab(String title Icon icon Component component String tip int index) and setting the preferred size of the label component but this doesn't seem very elegant and I'm not even sure it would work at all. Is there a way to achieve this? The answer is simple. When we put the name for the tab just format the name using html. say tp - JTabbedPane object tp.addTab(""<html><body><table width='150'>Name</table></body></html>""Componentobject) This sounds very good. I've seen other situations where html was the only way to achieve something in swing (e.g. line wrap on tooltips). I'll definitely give it a try.  I think it's not as complicated as you've done. Just use setTabComponentAt() with a JLabel on which you've set preferred size. That works thanks. Unfortunately I have to set all other parameters of the label component (color font size etc.) myself. I thought of retrieving the label via getTabComponentAt() but it returns null all the time. Yep that's because the getter only gets a label that was previously set (I think the doco specifically mentions that).  I've tried the following: tabPane.setUI(new javax.swing.plaf.metal.MetalTabbedPaneUI() { @Override protected int calculateTabHeight(int tabPlacement int tabIndex int fontHeight) { return super.calculateTabHeight(tabPlacement tabIndex fontHeight) + 12; } }); This seems to work fine for me. But if your using a different L&F you'll end up rendering it with the 'metal' regardless. I guess you could get the default UI and do an 'instanceof' on it to determine which is being used and instantiate it accordingly. For example: TabbedPaneUI ui = tabPane.getUI(); if (ui instanceof WindowsTabbedPaneUI) { // Create the windows rendition } else if (ui instanceof MetalTabbedPaneUI) { // Create the metal rendition } else if (ui instanceof MotifTabbedPaneUI) { // Create the motif rendition } else if (ui instanceof SynthTabbedPaneUI) { // Etc... } Thanks but this is only affecting the tab height not the width right? @Ole: That's right I don't know how I came to read width and end up giving a height example. Ah well now there for others who may need it I guess.  this is worked for me.  JLabel lab = new JLabel(); lab.setPreferredSize(new Dimension(200 30)); jTabbedPane1.setTabComponentAt(0 lab); // tab index jLabel or try this change to all tab component in same sizes (called in main method) UIManager.getLookAndFeelDefaults().put(""TabbedPane:TabbedPaneTab.contentMargins"" new Insets(10 100 0 0));",java swing jtabbedpane
457463,A,"Putting JComboBox into JTable I want to put individual JComboBoxes into each cells of a JTable. ie. The JComboBox content is not identical for each cell. I basically would like to be able to just call the following code to add a row of JComboBox into the JTable. Anyone has any idea? Thanks JComboBox cb1 = new JComboBox(...); JComboBox cb2 = new JComboBox(...); model.addRow(new Object[] {""Row name"" cb1 cb2} ); JComboBox cb3 = new JComboBox(...); JComboBox cb4 = new JComboBox(...); model.addRow(new Object[] {""Row name 2"" cb3 cb4} ); This is the resultant view if I do the above. http://www.freeimagehosting.net/uploads/a6292e08ee.png The closest example code I can find is as follows. But it is for where JComboBox content is identical for the individual column. Not the solution I need. TableColumn col = table.getColumnModel().getColumn(vColIndex); col.setCellEditor(new MyComboBoxEditor(values)); where public class MyComboBoxEditor extends DefaultCellEditor { public MyComboBoxEditor(String[] items) { super(new JComboBox(items)); } } You need to create a subclass of JTable to override the method TableCellEditor getCellEditor(int row int column). This enables you to set arbitrary cell editors for any row and column combination. The default way is to set the cell editor for an entire column. (You can also set individual cell renderers by overriding getCellRenderer.)  I am sure this will solve your problem. Mention in which column you need to set the combo box in .getColumn(int column) private void addComboToTable(JComboBox combo) { TableColumn gradeColumn = YourTable.getColumnModel().getColumn(0); JComboBox comboBox = combo; comboBox.removeAllItems(); try { comboBox.addItem(""Item 1""); comboBox.addItem(""Item 2""); comboBox.addItem(""Item 3""); } catch (NullPointerException e) { } catch (Exception e) { e.printStackTrace(); } gradeColumn.setCellEditor(new DefaultCellEditor(comboBox)); }  There is a tutorial on a pattern of embedding components into JTables here: http://ivolo.mit.edu/post/A-Simple-Pattern-for-Embedding-Components-into-a-Swing-JTable.aspx  @Override public TableCellEditor getCellEditor(int row int column) { Object value = super.getValueAt(row column); if(value != null) { if(value instanceof JComboBox) { return new DefaultCellEditor((JComboBox)value); } return getDefaultEditor(value.getClass()); } return super.getCellEditor(row column); } And then override the toString method from JComboBox. This actually repeats [another answer](http://stackoverflow.com/a/946949/572834) yet it adds one point: use a customized `JComboBox` so that its `toString()` method returns the selected value. In this case you could use the default `TableCellRenderer` implementation.  The easiest way is to implement your own TableModel public class MyModel extends AbstractTableModel { List rows; public int getRowCount() { return rows.size(); } public int getColumnCount() { return 4; } public Object getValueAt(int row int column) { return rows.get(row).getCol(col); //assuming your row ""Object"" has a getCol() } public Class<?> getColumnClass(int col) { return Boolean.class; } public void setValueAt(Object aValue int rowIndex int columnIndex) { rows.get(rowIndex).getCol(columnIndex).setValue(aValue); } } Load this into you JTable. If you haven't replaced the default cell renderer for Boolean's all you cells will be rendered as check boxes thanks to you implementation of getColumnClass(). All user input to these check boxes is collected with our setValueAt(). Err he asked about a JComboBox not JCheckBox. How did this answer even get accepted? @SarelBotha Because OP was last seen at Jan 31 '09 and the correct answer is from Jun 3 '09. Apparently no one thinks this is a problem. See [meta](http://meta.stackexchange.com/questions/161946/rethinking-sort-order-of-answers).  The JComboBox content is render identical for each row selection because the JTable does not offer the capability to have more than one editor per column. You have to extend the JTable class to support an additional selection for rows. This article explains it very well: http://www.javaworld.com/javaworld/javatips/jw-javatip102.html  In addition to cellEditor it is necessary to do the cellRenderer to paint the combobox in the cell look at this:  public void example(){ TableColumn tmpColum =table.getColumnModel().getColumn(1); String[] DATA = { ""Data 1"" ""Data 2"" ""Data 3"" ""Data 4"" }; JComboBox comboBox = new JComboBox(DATA); DefaultCellEditor defaultCellEditor=new DefaultCellEditor(comboBox); tmpColum.setCellEditor(defaultCellEditor); tmpColum.setCellRenderer(new CheckBoxCellRenderer(comboBox)); table.repaint(); } /** Custom class for adding elements in the JComboBox. */ class CheckBoxCellRenderer implements TableCellRenderer { JComboBox combo; public CheckBoxCellRenderer(JComboBox comboBox) { this.combo = new JComboBox(); for (int i=0; i<comboBox.getItemCount(); i++){ combo.addItem(comboBox.getItemAt(i)); } } public Component getTableCellRendererComponent(JTable jtable Object value boolean isSelected boolean hasFocus int row int column) { combo.setSelectedItem(value); return combo; } }  You need to override: Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) ...in TableCellEditor. The value passed in to this method is what you can put in your JComboBox. That means that the 'value' for that particular cell needs to be something that can be translated into a collection. It could potentially just be a List of objects or it could be a POJO with fields that could be made into a JComboBox. So just edit MyComboBoxEditor to override that method and change your model to allow for an Object that actually represents several other objects.  This page might help you although it seems you are restricted to having the same combobox in all the cells in a column.  Extend JTable with this code: @Override public TableCellEditor getCellEditor(int row int column) { Object value = super.getValueAt(row column); if(value != null) { if(value instanceof JComboBox) { return new DefaultCellEditor((JComboBox)value); } return getDefaultEditor(value.getClass()); } return super.getCellEditor(row column); } This will create a unique JComboBox cell editor for each combo box you get the a value for. +1 -- one should also should set a custom `TableCellRenderer` on the `TableColumnModel` of the corresponding column in order to ensure that the selected value is drawn instead of a string `javax.swing.JCombobox[...]` while the cell is not being edited. This `TableCellRenderer` should implement `getTableCellRendererComponent(..)` and could return a `JLabel` with the value of `JComboBox.getSelectedItem().toString()` (after checking for null pointers).",java swing jtable jcombobox
110016,A,"JTable Sort I know that Jtable can sort by a single column. But is it possible to allow for multiple column sort or do i need to write the code myself? Thanks in advance You should be able to set the TableRowSorter and the Comparator associated with it. Example: TableModel myModel = createMyTableModel(); JTable table = new JTable(myModel); TableRowSorter t = new TableRowSorter(myModel); t.setComparator(column that the comparator works against Comparator<?> comparator); table.setRowSorter(new TableRowSorter(myModel)); unrelated to multi-column sorts  You can sort by multiple columns by specifying more than one sort key when calling setSortKeys in the RowSorter you're using. a pity this isn't available in java5  ""I know that Jtable can sort by a single column. But is it possible to allow for multiple column sort or do i need to write the code myself? "" Table sorting and filtering is managed by a sorter object. The easiest way to provide a sorter object is to set autoCreateRowSorter bound property to true; JTable table = new JTable(); table.setAutoCreateRowSorter(true); This action defines a row sorter that is an instance of javax.swing.table.TableRowSorter. _no_ is wrong - a JTable definitely supports multi-column sorts (see setSortKeys as mentioned in another answer) only the visual clue is showing on the primary sort column only  ETable from the netbeans collection. It is part of org-netbeans-swing-outline.jar A google search aught to turn it up. The ETable is primarily a foundation for Outline (a TreeTable) but it has multi-column ordering built in as well as many other nice features  Look into JXTable. JXTable is an extension of JTable that supports multi-column sorting as well as other functions that JTable doesn't provide. It's freely available from JDNC / SwingLabs. Are you sure there? Actually the JXTable API states: ""Sorting support is single column only."" Ok but it works with filters. you just have to put shuttlesorters into a filterpipeline",java swing
286727,A,"Java KeyListener for JFrame is being unresponsive? I'm trying to implement a KeyListener into my JFrame. On the constructor I'm using this code: System.out.println(""test""); addKeyListener(new KeyListener() { public void keyPressed(KeyEvent e) { System.out.println( ""tester""); } public void keyReleased(KeyEvent e) { System.out.println(""2test2""); } public void keyTyped(KeyEvent e) { System.out.println(""3test3""); } }); When I run it the test message comes up in my console. However when I press a key I don't get any of the other messages as if the KeyListener was not even there. I was thinking that it could be because the focus is not on the JFrame and so they KeyListener doesn't recieve any events but I'm pretty sure it is. Is there something that I am missing? I got the same problem until i read that the real problem is about FOCUS the your JFrame has already added Listeners but tour frame is never on Focus because you got a lot of components inside your JFrame that also are focusable so try: JFrame.setFocusable(true); Good Luck Great!This is the right answer! I found that this works only until I use something that is on my JFrame then the KeyListener no longer responds  You must add your keyListener to every component that you need. Only the component with the focus will send these events. For instance if you have only one TextBox in your JFrame that TextBox has the focus. So you must add a KeyListener to this component as well. The process is the same: myComponent.addKeyListener(new KeyListener ...); Note: Some components aren't focusable like JLabel. For setting them to focusable you need to: myComponent.setFocusable(true); yea you were right when the program starts you can slightly see that the focus is on the button A. adding a keylistener to each button fixed this. thats a little weird i would think that adding a keylistener to the JFrame would work but i guess not. Thanks!  This should help  yourJFrame.setFocusable(true); yourJFrame.addKeyListener(new java.awt.event.KeyAdapter() { @Override public void keyTyped(KeyEvent e) { System.out.println(""you typed a key""); } @Override public void keyPressed(KeyEvent e) { System.out.println(""you pressed a key""); } @Override public void keyReleased(KeyEvent e) { System.out.println(""you released a key""); } });  InputMaps and ActionMaps were designed to capture the key events for the component it and all of its sub-components or the entire window. This is controlled through the parameter in JComponent.getInputMap(). See How to Use Key Bindings for documentation. The beauty of this design is that one can pick and choose which key strokes are important to monitor and have different actions fired based on those key strokes. This code will call dispose() on a JFrame when the escape key is hit anywhere in the window. JFrame doesn't derive from JComponent so you have to use another component in the JFrame to create the key binding. The content pane might be such a component. InputMap inputMap; ActionMap actionMap; AbstractAction action; JComponent component; inputMap = component.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW); actionMap = component.getActionMap(); action = new AbstractAction() { @Override public void actionPerformed(ActionEvent e) { dispose(); } }; inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE 0) ""dispose""); actionMap.put(""dispose"" action);  You could have custom JComponents set their parent JFrame focusable. Just add a constructor and pass in the JFrame. Then make a call to setFocusable() in paintComponent. This way the JFrame will always receive KeyEvents regardless of whether other components are pressed. -1 definitely not - that's complete in more than one respect: a) indecent subclassing b) indecent reference passing c) inappropriate state change while painting d) ..  lol .... all you have to do is make sure that addKeyListener(this); is placed correctly in your code. You should really explain the ""correct place"" to make this a helpful answer.  If you don't want to register a listener on every component you could add your own KeyEventDispatcher to the KeyboardFocusManager: public class MyFrame extends JFrame { private class MyDispatcher implements KeyEventDispatcher { @Override public boolean dispatchKeyEvent(KeyEvent e) { if (e.getID() == KeyEvent.KEY_PRESSED) { System.out.println(""tester""); } else if (e.getID() == KeyEvent.KEY_RELEASED) { System.out.println(""2test2""); } else if (e.getID() == KeyEvent.KEY_TYPED) { System.out.println(""3test3""); } return false; } } public MyFrame() { add(new JTextField()); System.out.println(""test""); KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager(); manager.addKeyEventDispatcher(new MyDispatcher()); } public static void main(String[] args) { MyFrame f = new MyFrame(); f.pack(); f.setVisible(true); } } KeyboardFocusManager is application wide if you have multi frames you will get trouble? So this should work something like: foreach(""focusable components in the frame"" as _){ _.addkeylistener(frameKeylistener);}  in order to capture key events of ALL text fields in a JFrame one can employ a key event post processor. Here is a working example after you add the obvious includes. public class KeyListenerF1Demo extends JFrame implements KeyEventPostProcessor { public static final long serialVersionUID = 1L; public KeyListenerF1Demo() { setTitle(getClass().getName()); // Define two labels and two text fields all in a row. setLayout(new FlowLayout()); JLabel label1 = new JLabel(""Text1""); label1.setName(""Label1""); add(label1); JTextField text1 = new JTextField(10); text1.setName(""Text1""); add(text1); JLabel label2 = new JLabel(""Text2""); label2.setName(""Label2""); add(label2); JTextField text2 = new JTextField(10); text2.setName(""Text2""); add(text2); // Register a key event post processor. KeyboardFocusManager.getCurrentKeyboardFocusManager() .addKeyEventPostProcessor(this); } public static void main(String[] args) { JFrame f = new KeyListenerF1Demo(); f.setName(""MyFrame""); f.pack(); f.setVisible(true); } @Override public boolean postProcessKeyEvent(KeyEvent ke) { // Check for function key F1 pressed. if (ke.getID() == KeyEvent.KEY_PRESSED && ke.getKeyCode() == KeyEvent.VK_F1) { // Get top level ancestor of focused element. Component c = ke.getComponent(); while (null != c.getParent()) c = c.getParent(); // Output some help. System.out.println(""Help for "" + c.getName() + ""."" + ke.getComponent().getName()); // Tell keyboard focus manager that event has been fully handled. return true; } // Let keyboard focus manager handle the event further. return false; } } For a working example you might consider adding the imports. I usually add 'package imports' to keep them short. Otherwise +1. Interesting technique.  Deion (and anyone else asking a similar question) you could use Peter's code above but instead of printing to standard output you test for the key code PRESSED RELEASED or TYPED. @Override public boolean dispatchKeyEvent(KeyEvent e) { if (e.getID() == KeyEvent.KEY_PRESSED) { if (e.getKeyCode() == KeyEvent.VK_F4) { dispose(); } } else if (e.getID() == KeyEvent.KEY_RELEASED) { if (e.getKeyCode() == KeyEvent.VK_F4) { dispose(); } } else if (e.getID() == KeyEvent.KEY_TYPED) { if (e.getKeyCode() == KeyEvent.VK_F4) { dispose(); } } return false; }  Hmm.. what class is your constructor for? Probably some class extending JFrame? The window focus should be at the window of course but I don't think that's the problem. I expanded your code tried to run it and it worked - the key presses resulted as print output. (run with Ubuntu through Eclipse): public class MyFrame extends JFrame { public MyFrame() { System.out.println(""test""); addKeyListener(new KeyListener() { public void keyPressed(KeyEvent e) { System.out.println(""tester""); } public void keyReleased(KeyEvent e) { System.out.println(""2test2""); } public void keyTyped(KeyEvent e) { System.out.println(""3test3""); } }); } public static void main(String[] args) { MyFrame f = new MyFrame(); f.pack(); f.setVisible(true); } } I get all of the messages output also. Run in Windows command line. You get all the messages because in this example the JFrame has the focus. try adding a TextBox component to the JFrame and see what happens.  I have been having the same problem. I followed Bruno's advice to you and found that adding a KeyListener just to the ""first"" button in the JFrame (ie on the top left) did the trick. But I agree with you it is kind of an unsettling solution. So I fiddled around and discovered a neater way to fix it. Just add the line myChildOfJFrame.requestFocusInWindow(); to your main method after you've created your instance of your subclass of JFrame and set it visible.  KeyListener is low level and applies only to a single component. Despite attempts to make it more usable JFrame creates a number of component components the most obvious being the content pane. JComboBox UI is also often implemented in a similar manner. It's worth noting the mouse events work in a strange way slightly different to key events. For details on what you should do see my answer on Application wide keyboard shortcut - Java Swing.",java swing jframe keylistener
316454,A,"Can you set a permanent size for a JPanel inside of a JFrame? My current problem is that I have a JFrame with a 2x2 GridLayout. And inside one of the squares I have a JPanel that is to display a grid. I am having a field day with the java swing library... take a look Image Java is automatically expanding each JLabel to fit the screen. I want it to just be those blue squares (water) and the black border and not that gray space. Is there a way I can just set the size of that JPanel permanently so that I don't have to go through changing the size of the JFrame a million times before I get the exact dimension so that the gray space disappears? I also would like to set the size of those buttons so they are not so huge (BorderLayout is being used for the buttons and TextField) GridBagLayout is what you really want to use. The GridLayout will force the same size for each component in the layout no matter what size constraints you put on them. GridBagLayout is a lot more powerful and a lot more complicated. Study up on the API page for it. Using GridBagLayout the components won't fill the whole grid space if you don't want them to and can even stay the size that you ask it to be. To keep a component's size from changing I would set all three available size constraints: water.setPreferredSize(new Dimension(20 20)); water.setMinimumSize(new Dimension(20 20)); water.setMaximumSize(new Dimension(20 20)); For your buttons I would definitely use an inner panel as Bryan mentions. You could use either a GridLayout like he suggests or a FlowLayout if you don't want all the buttons to be the same size. Add all your buttons to that inner panel instead of the main one.  If you can setResizeable( false ) on the top level frame you can then set your layout manager to null and hard code each location and size via setBounds. This is how I would do it (contingent on resizing of course).  I have had success solving problems like these using TableLayout which is a third party layout manager. You will need to download it and read the tutorial but the key would be to set the justification to CENTER when adding the JButtons to their positions in the layout.  If you want the two checkerboards to stay the same size then you'll need to have them each contained in their own JPanel. Set each of those parent JPanel's to have a layout type of GridBagLayout. Set the preferedSize for each checkerboard component and then add them to their respective containers. GridBagLayout should by default lay each board out in the center of the parent JPanel. So as the window is resized the JPanel parent area will get larger or smaller but the checkerboard components inside will remain the same size. Alternatively you could have your blue squares scale to the right size as the window is resized by having each checkboard square be a JPanel with a BorderLayout layout manager and adding the JLabel (with a blue background color) to its BorderLayout.CENTER location. As for your buttons try something like this: JPanel theButtonPanel = new JPanel(new BorderLayout()); JButton button1 = new JButton(""Fire""); JButton button2 = new JButton(""Pass""); JButton button3 = new JButton(""Forfiet""); JPanel innerButtonContainer = new JPanel(new Grid(1 3 8 8)); innerButtonContainer.add(button1); innerButtonContainer.add(button2); innerButtonContainer.add(button3); theButtonPanel.add(innterButtonContainer); Lastly consider using a design tool for your Swing user interface. Netbeans has an excellent UI designer built into it. Download Netbeans here.",java swing size jlabel grid-layout
112603,A,"What is 'JNI Global reference' I am using jProfiler to find memory leaks in a Java swing application. I have identified instances of a JFrame which keeps growing in count. This frame is opened and then closed. Using jProfiler and viewing the Paths to GC Root there is only one reference 'JNI Global reference'. What does this mean? Why is it hanging on to each instance of the frame? A JNI global reference is a reference from ""native"" code to a Java object managed by the Java garbage collector. Its purpose is to prevent collection of an object that is still in use by native code but doesn't appear to have any live references in the Java code. A JFrame is a java.awt.Window and is associated with a ""native"" Window object. When you are completely finished with a particular JFrame instance you should invoke its dispose() method to clean up. I am not sure if any native code is creating a global reference to the JFrame but it seems likely. If it does this will prevent the JFrame from being garbage collected. If you are creating many Windows (or subclasses) and seeing that they are never collected make sure that they are disposed. If the code is only Java this is the most likely explanation. I've had problems with global pointers but I've been working with JNI.  Wikipedia has a good overview of Java Native Interface essentially it allows communication between Java and native operating system libraries writen in other languages. JNI global references are prone to memory leaks as they are not automatically garbage collected and the programmer must explicitly free them. If you are not writing any JNI code yourself it is possible that the library you are using has a memory leak. edit here is a bit more info on local vs. global references and why global references are used (and how they should be freed) Wikipedia is a secondary source. The primary source and official document is the [JNI Specification](http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/jniTOC.html).",java swing jprofiler
458817,A,"Java Swing: Libraries Tools Layout Managers What libraries/tools do you have in your Java Swing Tool set? XUL Layout Managers Packagers/Installers Books etc..... Two useful Swing related libraries: The Swing Application Framework is a light framework that simplifies the creation and maintaining of small- to medium-sized Java desktop applications. The framework consists of a Java class library that supports constructs for things such as the following: Remembering state between sessions. Easier managing of actions including running as background tasks and specifying blocking behavior. Enhanced resource management including resource injection for bean properties. Here's an article about it. It's been integrated with Netbeans 6.0 and later. EventBus is a Swing-oriented publisher-subscriber framework that I've found very useful for updating GUIs.  Not really a tool but I've been working on annotating important things in the JavaDocs for Swing (and several other APIs). Too many methods contain surprises like ""don't call this if you want a refresh call X instead"". I use a tool that I built for my PhD to access that kind of info (it highlights calls in the source code to methods that have those sort of things). IMHO the JavaDocs for swing are difficult to use because they combine information that is meant for people using an object and people subclassing existing classes. Sounds interesting. Anything that you are going to make available to the rest of us? Right now it only supports Eclipse. I've still got to do some cleanups and update the annotations database before I am presenting it at Eclipsecon at the end of March but if you want to try it out visit http://emoose.cs.cmu.edu or contact me and I'll gladly help you with the install.  Here is what I use: ""Framework"": Swing Application Framework does not do much but does it quite well (if you use it you may want to take a look at one presentation I did last year) JTables: handling tables is often a pain (lots of boilerplate code...); I generally use GlazedLists which simplifies the work a lot (and brings many improvements) EventBus: this was mentioned in another answer LayoutManager: DesignGridLayout (shameless plug this is one of my open source projects) Look & Feel: Substance is very good in some situations where you don't want to use the system look and feel Docking library: if your application needs docking you will find MyDoggy useful (and it has a well-written API). One problem it has is a bad integration with some third-party look and feels (like Substance) All these libraries above are open source. In addition to that I have my own set of utility classes that among other things help integrating the GUI with a Dependency Injection library: I have a set of utilities for HiveMind container (for the few developers that know it and still use it) and another -in preparation soon open sourced- for Guice. I have read no specific book about Swing development but I have used Swing for about 10 years now (not continuously however). Hence I have no recommendation in terms of books (unfortunately because I admit that this is one weak point of Swing). ""Filthy Rich Clients"" book is useful only if: you know Swing well you want to build ""fancy"" GUIs  For books take a look at the answers to Swing Programming Books.  Netbeans with the GUI WYSIWYG editor. It makes creating Java 6 Swing forms very easy. I subclass the forms to add functionality to ensure continued tool support. I've also used SwingX for widgets like date pickers and collapsible panels. Plus there's always SwingWorker in the JRE for running background jobs that update the UI.  I pretty much only use GridBagLayout for production code unless the GUI is so simple that I can get away with a BorderLayout. I sometimes look into other LayoutManagers but never really found the need to change since GridBagLayout can do pretty much anything I need. The installer I use for my own stuff is izPack and works for me so far. It has been a long time since I really read any Swing books now. Obviously the Java Swing one from O'Reilly is the de facto bible :) When it comes to books on design I do have a lot of recommendations but that might be off topic? Totally Gridbag - http://madbean.com/anim/totallygridbag/ @Ran Biron that is the best comment I have seen on SO thus far. That is so reminiscent of my GridBagLayout experiences. At one point I even wrote a GridBagLayout wrapper for most of the stuff I do but it's hard to really grok. +1 for this answer so more people see this comment :)  Spring Rich Client and JGoodies are the base of my team's GUI applications; Spring remoting for connecting to server and Java Web Start for deployement.",java swing devtools
491059,A,"Can a layout manager spawn several JPanels? I have to build a rather large form with many controls. The controls are divided in basic controls/settings and extended controls/settings. The user can decide if he wants to see only the basic or both basic and extended controls. I've dropped all extended controls onto their own JPanel so that I can easily switch between the two views by showing or hiding this panel. Currently I'm using GroupLayout and what happens is that the controls on different panels are not aligned: Label aaa: Text field Label a: Text field Label aaaaaa: Text field ---------------------------- Label b: Text field Label bbb: Text field Label bb: Text field Unfortunatly I found now way to ""synchronize"" the layouts of the two panels (except using AbsoluteLayout and fixed control coordinates) Is there any way to achive this? Is my whole design flawed? EDIT: If it is possible I would like to keep the GroupLayout manager. If you want to keep them in separate panels with separate layouts: Iterate over all of the labels that you add and find the maximum preferred width of each. Iterate a second time and set the preferred size to that each label's preferred height but the maximum width.  I think there is no way to do it with the standard layout managers. You'll probably have to write your own layout manager but it shouldn't be too hard if you subclass GroupLayout.  This is the explanation of th GridLayout. This will set every component to the size you expect it. With the GridData object you can specify how the components are ordere. Examples  Probably the easiest (good) way to do it is to add all the components to the main panel. Set the subpanels to non-opaque and add the also to the main panel. The main panel the needs optimised drawing to be switched off. Another technique is to add a spacer component. To the bottom panel add a component in the same column as the labels which dynamically takes the width component of its various size methods from the top labels. Do the same in reverse to the top panel.  You could use GridLayout instead of GroupLayout which will give you uniform spacing between the columns  As far as I know no Swing LayoutManager (from JRE or open source) can span several panels. I am currently working on such a feature (which I called ""layouts synchronization"") for my DesignGridLayout project but it is not something easy to implements (I have started about 2 weeks ago and I still don't see exactly if and when I will get to something interesting but I still have high hope for it;-)) One option you could check would be to add all components to the same panel (with just one GroupLayout then) and hide/show them based on user's selection. Hopefully GroupLayout will adapt the size to the situation (after calling pack()). If GroupLayout behaves well then it would just be a matter of calling pack() each time after user changes his selection to show/hide extended fields. Else you would have to manually set the size of your panel every time the user changes his selection.",java swing netbeans netbeans6.5 layout-manager
328698,A,How can I turn off anti-aliasing for one specific JLabel? How can I turn off anti-aliasing for one specific JLabel? It uses a very small font which might look better without anti-aliasing. If important I'm using Java 1.5 on Mac OS X. Have you tried overriding paint(Graphics g) or paintComponent(Graphics g) setting rendering hints for text AA on the graphics object and calling the super method? see RenderingHints: http://java.sun.com/j2se/1.4.2/docs/api/java/awt/RenderingHints.html#VALUE_TEXT_ANTIALIAS_OFF  I think you'll have to override the paint(Graphics g) method and draw the text yourself.,java swing jlabel antialiasing
254212,A,"Preserve JTable selection across TableModel change We're seeing JTable selection get cleared when we do a fireTableDataChanged() or fireTableRowsUpdated() from the TableModel. Is this expected or are we doing something wrong? I didn't see any property on the JTable (or other related classes) about clearing/preserving selection on model updates. If this is default behavior is there a good way to prevent this? Maybe some way to ""lock"" the selection before the update and unlock after? The developer has been experimenting with saving the selection before the update and re-applying it. It's a little slow. This is Java 1.4.2 on Windows XP if that matters. We're limited to that version based on some vendor code we use. I was facing same issue and when tried to search the reason I got this question but it seems a bug in Java SDK. http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4276786 WORK AROUND A temporary work-around is available. It should be removed once this bug is fixed as it's suitability has NOT been tested against fixed releases. Use this subclass of JTable. Note: This is for the MetalLookAndFeel. If using other look and feels the inner FixedTableUI subclass will have to extend the TableUI subclass for that look and feel. import java.awt.*; import java.awt.event.*; import javax.swing.*; import javax.swing.table.*; import javax.swing.event.*; import javax.swing.plaf.basic.*; public class FixedTable extends JTable { private boolean isControlDownInDrag; public FixedTable(TableModel model) { super(model); setUI(new FixedTableUI()); } private class FixedTableUI extends BasicTableUI { private MouseInputHandler handler = new MouseInputHandler() { public void mouseDragged(MouseEvent e) { if (e.isControlDown()) { isControlDownInDrag = true; } super.mouseDragged(e); } public void mousePressed(MouseEvent e) { isControlDownInDrag = false; super.mousePressed(e); } public void mouseReleased(MouseEvent e) { isControlDownInDrag = false; super.mouseReleased(e); } }; protected MouseInputListener createMouseInputListener() { return handler; } } public void changeSelection(int rowIndex int columnIndex boolean toggle boolean extend) { if (isControlDownInDrag) { ListSelectionModel rsm = getSelectionModel(); ListSelectionModel csm = getColumnModel().getSelectionModel(); int anchorRow = rsm.getAnchorSelectionIndex(); int anchorCol = csm.getAnchorSelectionIndex(); boolean anchorSelected = isCellSelected(anchorRow anchorCol); if (anchorSelected) { rsm.addSelectionInterval(anchorRow rowIndex); csm.addSelectionInterval(anchorCol columnIndex); } else { rsm.removeSelectionInterval(anchorRow rowIndex); csm.removeSelectionInterval(anchorCol columnIndex); } if (getAutoscrolls()) { Rectangle cellRect = getCellRect(rowIndex columnIndex false); if (cellRect != null) { scrollRectToVisible(cellRect); } } } else { super.changeSelection(rowIndex columnIndex toggle extend); } } } Note Curtsey to http://bugs.sun.com  This is default behavior. If you call fireTableDataChanged() the entire table is rebuild from scratch as you set entirely new model. In this case the selection is naturally lost. If you call fireTableRowsUpdated() the selection is also cleared in general cases. The only way is to remember selection and then set this. Unfortunately there is no guarantee that the selection will be still valid. Be careful if restoring selection.  If I recall correctly saving selection and re-applying it is what we have done too...  I had the same issue in an application. In my case the model in the table was a list of objects where the object properties where mapped to columns. In that case when the list was modified I retrieved the selected index and stored the object that was selected before updating the list. After the list is modified and before the table is updated I would calculate the position of the selected object. If it was still present after the modification then I would set the selection to the new index. Just setting the selected index in the table after the modification will not work because the object may change position in the list. As a side note I found that working with GlazedLists makes life much easier when dealing with tables.  You can automatically preserve a table's selection if the STRUCTURE of that table hasn't changed (i.e. if you haven't add/removed any columns/rows) as follows. If you've written your own implementation of TableModel you can simply override the fireTableDataChanged() method:  @Override public void fireTableDataChanged() { fireTableChanged(new TableModelEvent(this //tableModel 0 //firstRow getRowCount() - 1 //lastRow TableModelEvent.ALL_COLUMNS //column TableModelEvent.UPDATE)); //changeType } and this should ensure that your selection is maintained provided that only the data and not the structure of the table has changed. The only difference between this and what would be called if this method weren't overridden is that getRowCount() - 1 is passed for the lastRow argument instead of Integer.MAX_VALUE the latter of which acts a signifier that not only has all the data in the table changed but that the number of rows may have as well. You mean columns and/or rows right? And by inserts/deletes do you mean the addition of columns and/or rows or something else? Sorry guess I'm still a bit confused but it sounds like what you're saying here is really important for me to understand Wouldn't that be a structureChanged then? yeah the api doc of which event to fire isn't overly clear: to understand we have to read carefully those of both AbstractTableModel.fireXX methods and TableModelEvent ;-) A tableModel's structure == set of columns so whenever a column is removed/inserted (or even moved) structureChanged must be fired. The insert/remove/update for single bounded ranges are obvious. A change which includes hard-to-express (in terms of single blocks) inserts/removes must fire a dataChanged no a structureChanged is when the columns are changed along with the data beware: doing so might backfire - a dataChanged may include inserts/deletes. If that's the case listeners might be severely misled  You need to preserve the selection and then re-apply it. First of all you will need to get a list of all the selected cells. Then when you re-load the JTable with the new data you need to programmatically re-apply those same selections. The other point I want to make is if the number or rows or columns in your table are increasing or decreasing after each table model reload then please don't bother preserving the selection. The user could have selected row 2 column 1 having a value say ""Duck"" before model updation. But after model updation that same data can now occur in row 4 column 1 and your original cell row 2 column 1 could have new data such as ""Pig"". Now if you forcibly set the selection to what it was before the model updation this may not be what the user wanted. So programmatically selecting cells could be a double edged sword. Don't do it if you are not sure.",java swing
305527,A,"How to disable a container and its children in Swing I cannot figure out a way to disable a container AND its children in Swing. Is Swing really missing this basic feature? If I do setEnabled(false) on a container its children are still enabled. My GUI structure is pretty complex and doing a traversion of all elements below the container is not an option. Neither is a GlassPane on top of the container (the container is not the entire window). JXLayer might be what you're looking for according to this post: Wrap your container with the JXLayer and call JXLayer.setLocked(true) after that - all components inside will be disabled Good alternative. +1 However this is only viable when you only want to block user interactions. Actually all programming calls including ui-robot calls (such as doClick) can still pass thru and trigger corresponding events.  As VonC's answer there's no simple solution existed. So i recommend you to program with a supporting infrastructure from the start. A simple infrastructure is likely to be for example using delegated listeners that do a ""event enabled"" check from a super container's flag before actual event-respond: class ControlledActionListener extends ActionListener { ... public void actionPerformed( ActionEvent e ) { if( !container.isEnabled() ) return; doYourBusinessHere(); } } Or even better you can use the APT to automatically inject the boilerplate code for you. This works well all the time. It's the clean way to block both user interaction and programming calls with a single effort. Even though it costs you some codes to support the underlying functionality you get simplicity usablity and stability in return. PS. i'd like to see better solution to this problem.  This is what I came up with. Component[] comps = myPanel.getComponents(); for (Component comp:comps){ comp.setEnabled(false); }  This is the code I use. It recursively visits the component tree maintaining a counter for each component. Only weak references are kept on the components preventing any memory leak. You say that traversing all the elements is not an option but my experience is that this code works well for quite complex GUIs. By the way if Swing had this feature natively there would be no other way than traversing the component tree anyway. Example usage (parenthesis means disabled) :  a / \ b c / \ d e setMoreDisabled(c) a / \ b (c) / \ (d) (e) setMoreDisabled(a) (a) / \ b (c) / \ (d) (e) setMoreEnabled(a) a / \ b (c) / \ (d) (e) Now the code : import java.awt.Component; import java.awt.Container; import java.util.Map; import java.util.WeakHashMap; public class EnableDisable { private static final Map<Component Integer> componentAvailability = new WeakHashMap<Component Integer>(); public static void setMoreEnabled(Component component) { setEnabledRecursive(component +1); } public static void setMoreDisabled(Component component) { setEnabledRecursive(component -1); } // val = 1 for enabling val = -1 for disabling private static void setEnabledRecursive(Component component int val) { if (component != null) { final Integer oldValObj = componentAvailability.get(component); final int oldVal = (oldValObj == null) ? 0 : oldValObj; final int newVal = oldVal + val; componentAvailability.put(component newVal); if (newVal >= 0) { component.setEnabled(true); } else if (newVal < 0) { component.setEnabled(false); } if (component instanceof Container) { Container componentAsContainer = (Container) component; for (Component c : componentAsContainer.getComponents()) { setEnabledRecursive(cval); } } } } } That's right the ""enable"" state of the components must be fully controlled by these two methods. If I am not mistaken using this class would require that anytime one wants to enable/disable a component they use this class vs calling the component's setEnabled() method. If not then this class could unintentionally enable/disable a component it should not because it does not know the ""native"" state of child components when one of the setMore*() methods are invoked.  To add to mmyers's answer disabling children is not an easy task (see this thread) The problem is near-to unsolvable in the general case. That's why it is not part of core Swing. Technically the disable-and-store-old-state followed by a enable-and-restore-to-old-state might look attractive. It even might be a nice-to-have in special cases. But there are (at least probably a bunch more) two issues with that. Compound components The recursion must stop on a ""compound component"" (or ""single entity""). Then the component is responsible for keeping dependent's state. There's no general way to detect such a component - examples are JComboBox JXDatePicker (which as related issue) To make things even more complicated dependents don't need to be under the hierarchy of the ""compound component"" f.i. JXTable takes care of the ColumnControl's (and header's) enabled state. Trying to tackle both would require to have a) a property on the compound: ""don't touch my children"" and b) a property on the uncontained dependents: ""don't touch me"" Binding to enabled enable-and-update-to-old might break application state if the enabled status is bound to a (presentation or other) model property and that property changed in-the-meantime - now the old-state is invalid. Trying to tackle that would require to have c) a ""real"" stored-old-enabled-due-to-view-concerns property d) bind the presentation model property to both the enabled and the stored-old-enabled JXRadioGroup has a variant of that problem: On disabling - the group itself or the general controller - keeps track of the old-enabled of every button. Button's enabled is controlled by the Action - if there is an Action. So the enabled controller needs to restore to old-enabled or to action's enabled. During group's disabled (as-group) a problem looms if the Action's enabled was false on storing and changed to true. Another if actions are added. Now imagine the complexity of state transitions when overloading a)-- d)  I would suggest you to write a recursive method which finds all the java.awt.Container instances in your java.awt.Container and sets its components enabled/disabled. This is how I solved such a problem in my extended JFrame class: @Override public void setEnabled(boolean en) { super.setEnabled(en); setComponentsEnabled(this en); } private void setComponentsEnabled(java.awt.Container c boolean en) { Component[] components = c.getComponents(); for (Component comp: components) { if (comp instanceof java.awt.Container) setComponentsEnabled((java.awt.Container) comp en); comp.setEnabled(en); } }",java swing
482547,A,"How can I travese to a next / previous page in a swing GUI I am new to Swing. I am trying to develop an application using Swing. I have managed to create the first page of my application. Now what I want to do is to traverse to a new page using the next button. But am not able to find a way to do it using Swing. Also if I click the previous button would I be able to get the data that I had entered in the text boxes or selected using radio buttons on the previous page. I think this can be done pretty easily in Struts but how is this to be achieved using Swing. Please do help. Thanks a lot. Would be helpful to get some details about what you are actually trying to do. -Pages? -Which ""Next Button""? -...? This one is old but might just get you started: http://java.sun.com/developer/technicalArticles/GUI/swing/wizard/ I do not now how to do it in that specific situation just make sure you store your data in a place that is accessible from both the screens if there is currently none then make sure to give both the screens a reference to a third object and store it there. Hi Simon using the linki am bale to hv wizard but suppose i hv entered some value on screen1 and then i move to screen2and on basis on screen1 i have to display some values on screen2 how do I get the values set in screen 1 in screen2 using the same code given in the link u have mentioned.  I am using the link you have sent. The basic motive is achieved on having a wizard but now i m stuck at a point. The problem is... suppose i have entered some value on screen 1 and then i move to screen 2.. and on basis on screen 1 i have to display some values on screen 2.. how do I get the values set in screen 1 in screen2 using the same code given in the link u have mentioned.  You can create different views like ""Login"" ""Configuration"" ""MainPage"". The views will contain all components you want to show at the screen. You can implement a ViewManager who can handle this views (Show one of the views). At the bottom of the Main Frame you can add a Button area where the forware/backward buttons are placed. At the center of the frame you will show the views. When the button are selected the ViewManager decideds which view is set to visible. From the ViewManager you can get every information from the views you want. The views can enter the ViewManager and can get the information they need from another view. Hi Markus But wouldn't all this view management be in context of a web app? I am developing a desktop application and want to manage the same there.  I assume you're trying to build a wizard-style swing dialog? swing does not offer an out-of-the-box framework for this type of task (but of course it offers all UI elements/controls that you will need to create one). just google for ""swing wizard framework"" and you will find plenty of inspiration -- unfortunately i can't recommend a single best one (at my company we have written our own) but i am confident that you will either find one that will work for you or you will familiarize with some patterns that will help you to write one yourself -- good luck!  Try a tabbed pane or use a CardLayout. http://java.sun.com/docs/books/tutorial/uiswing/components/tabbedpane.html http://java.sun.com/docs/books/tutorial/uiswing/layout/card.html",java swing
370369,A,JTable updates not appearing I have a JTable with a custom TableModel called DataTableModel. I initialized the table with a set of column names and no data as follows: books = new JTable(new DataTableModel(new Vector<Vector<String>>() title2)); JScrollPane scroll1 = new JScrollPane(books); scroll1.setEnabled(true); scroll1.setVisible(true); JSplitPane jsp1 = new JSplitPane(JSplitPane.VERTICAL_SPLIT scroll1 scroll2); JSplitPane jsp2 = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT inventory jsp1); myPanel.add(jsp2 BorderLayout.CENTER); I later want to update books with a set of data and use the following: DataTableModel d = (DataTableModel)books.getModel(); d.setValues(bookList); books.setModel(d); where bookList is a Vector<Vector<String>> that definitely has data. However although all this code is being executed it is not displaying on the screen. The code for the setValues() method is: public void setValues(Vector<Vector<String>> v) { values = v; fireTableDataChanged(); } Am I missing something here? The class and methods for my DataTableModel are (these methods are all implemented to return correct results): public class DataTableModel extends AbstractTableModel { public DataTableModel(Vector<Vector<String>> v Vector<String> c) {} public int getColumnCount() { if (values != null && values.size() > 0) return values.elementAt(0).size(); else return 0; } public int getRowCount() { if (values != null && values.size() > 0) return values.size(); else return 0; } public Object getValueAt(int arg0 int arg1) {} public void setValues(Vector<Vector<String>> v) {} public Vector<Vector<String>> getValues() {} public void setColumnNames(Vector<String> columns) {} public String getColumnName(int col) {} } mhhh nope.. I think your model and your table are not connected. Can you post your actual code.. ? Set model should be enough. . Did you code that DataTableModel your self? Yes I did. And when I examine the DataTableModel it seems to have the correct data. Have you implemented the other methods for TableModel? If so how does your implementation look? Maybe you should post your table model code to let us inspect it? BTW: My main error when implementing TableModel was to override getRowCount() and getColumnCount() to return 0. This will tell the table that there is no data to display... EDIT: So you seem to be using something like an AbstractTableModel or a DefaultTableModel right? Have you overridden some of the methods? EDIT2: You should call fireTableStructureChanged instead of fireTabeDataChanged() because initially your table model is returning 0 for getColumnCount(). EDIT3: To further optimize your model you should consider returning a fixed value for getColumnCount() if you have data that has the same number of columns every time. Then you can call the fireTabeDataChanged() which just loads the new data instead of completely building up the table and data (fireTableStructureChanged()) every time. ahhh.... crap. I'll post in a little while if that worked. That fixed it! Thanks!  This is weird problem. You said that DataTableModel implements TableModel. So. If you does not use abstract class the problem should be in the way how you are handling the events. Are listeners really registered and then notified? If you can please send link to source of DataTableModel. But before verify that you are correctly handling listeners registered into this model. I've debugged the code. The update code is really being called as is the updateValues() method. So the fireTableDataChanged() method is also being called with no errors but the display is not changing.,java gui swing jtable
271190,A,"What is the most useful type of java.awt.image.BufferedImage for off-screen rendering? I am creating a buffered image that is going to be a snapshot of a JComponent (via paint()) and rendered inside an ImageIcon. There are a large amount of types in the BufferedImage(int width int height int imageType) constructor but which one should I use? I am sure that any of them would work but which ones are better than the others? How should I pick one? And Why? I think the question as it stands now is perfectly constructive. Heck the answer answered the question I came here with! I reworked it to better fit the best answer which points to an API that you should use. See GraphicsConfiguration.createCompatibleImage(int int) for a helper to create a BufferedImage of a ""good"" type among the many available types. How to get your hands on a GraphicsConfiguration instance to make this call? It depends on where your code is executing. See the many methods for getting your hands on a GraphicsConfiguration via methods like getGraphicsConfiguration() or getDeviceConfiguration(). If you only had a code snippet instead of a javadoc link you would so get the answer. and don't forget to fromat it properly by putting in four spaces in the front. be careful iterating over graphics configurations. depending on your hardware some of those methods take several seconds the first time. yes what is X? No check mark with such unsure code snippets. I will have to live forever without the sweet sweet feeling of this particular check mark. Oh what might have been... This is the easiest way `GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration().createCompatibleImage(width height);`",java swing graphics awt
499465,A,Swing JLayeredPane.getLayer() - Documentation error or actual side effect? I'm trying to figure something out about JLayeredPane in Swing. If anyone has used this class feedback would be appreciated. The documentation for getLayer(JComponent c) states: Gets the layer property for a JComponent it does not cause any side effects like setLayer(). (painting add/remove etc) Normally you should use the instance method getLayer(). Clearly there is some mistake here since this is the instance method getLayer() (there aren't overloaded versions) Is there actually a different call that should be made here or was somebody just too eager in copying from putLayer(): Sets the layer property on a JComponent. This method does not cause any side effects like setLayer() (painting add/remove etc). Normally you should use the instance method setLayer() in order to get the desired side-effects (like repainting). Like many things in Swing the answer to your question is revealed in the swing source code. From JLayeredPane.java: public static int getLayer(JComponent c) { Integer i; if((i = (Integer)c.getClientProperty(LAYER_PROPERTY)) != null) return i.intValue(); return DEFAULT_LAYER.intValue(); } public int getLayer(Component c) { Integer i; if(c instanceof JComponent) i = (Integer)((JComponent)c).getClientProperty(LAYER_PROPERTY); else i = (Integer)getComponentToLayer().get((Component)c); if(i == null) return DEFAULT_LAYER.intValue(); return i.intValue(); } It looks like the reason you are seeing some differences here is that the layer of a JComponent instance is stored as a property of the JComponent instance but the layer of a Component instance is stored within a hashtable of JLayeredPane. Hence getLayer(JComponent c) can be static while getLayer(Component c) cannot. As you might imagine this is just the start of the strangeness of this class. Validating and painting JLayeredPane and contents can get complicated quickly.,java swing documentation jlayeredpane
2158,A,"Creating a custom button in Java Is there a way to create a JButton with your own button graphic and not just with an image inside the button? If not is there another way to create a custom button in java? Yes this is possible. One of the main pros for using Swing is the ease with which the abstract controls can be created and manipulates. Here is a quick and dirty way to extend the existing JButton class to draw a circle to the right of the text. package test; import java.awt.Color; import java.awt.Container; import java.awt.Dimension; import java.awt.FlowLayout; import java.awt.Graphics; import javax.swing.JButton; import javax.swing.JFrame; public class MyButton extends JButton {  private static final long serialVersionUID = 1L;  private Color circleColor = Color.BLACK;  public MyButton(String label) {  super(label);  }  @Override  protected void paintComponent(Graphics g) {  super.paintComponent(g);  Dimension originalSize = super.getPreferredSize();  int gap = (int) (originalSize.height * 0.2);  int x = originalSize.width + gap;  int y = gap;  int diameter = originalSize.height - (gap * 2);  g.setColor(circleColor);  g.fillOval(x y diameter diameter);  }  @Override  public Dimension getPreferredSize() {  Dimension size = super.getPreferredSize();  size.width += size.height;  return size;  }  /*Test the button*/  public static void main(String[] args) {  MyButton button = new MyButton(""Hello World!"");  JFrame frame = new JFrame();  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.setSize(400 400);  Container contentPane = frame.getContentPane();  contentPane.setLayout(new FlowLayout());  contentPane.add(button);  frame.setVisible(true);  } } Note that by overriding paintComponent that the contents of the button can be changed but that the border is painted by the paintBorder method. The getPreferredSize method also needs to be managed in order to dynamically support changes to the content. Care needs to be taken when measuring font metrics and image dimensions. For creating a control that you can rely on the above code is not the correct approach. Dimensions and colours are dynamic in Swing and are dependent on the look and feel being used. Even the default Metal look has changed across JRE versions. It would be better to implement AbstractButton and conform to the guidelines set out by the Swing API. A good starting point is to look at the javax.swing.LookAndFeel and javax.swing.UIManager classes. http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/LookAndFeel.html http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/UIManager.html Understanding the anatomy of LookAndFeel is useful for writing controls: Creating a Custom Look and Feel  You could always try the Synth look & feel. You provide an xml file that acts as a sort of stylesheet along with any images you want to use. The code might look like this: try {  SynthLookAndFeel synth = new SynthLookAndFeel();  Class aClass = MainFrame.class;  InputStream stream = aClass.getResourceAsStream(""\\default.xml"");  if (stream == null) {  System.err.println(""Missing configuration file"");  System.exit(-1);  }  synth.load(stream aClass);  UIManager.setLookAndFeel(synth); } catch (ParseException pe) {  System.err.println(""Bad configuration file"");  pe.printStackTrace();  System.exit(-2); } catch (UnsupportedLookAndFeelException ulfe) {  System.err.println(""Old JRE in use. Get a new one"");  System.exit(-3); } From there go on and add your JButton like you normally would. The only change is that you use the setName(string) method to identify what the button should map to in the xml file. The xml file might look like this: <synth>  <style id=""button"">  <font name=""DIALOG"" size=""12"" style=""BOLD""/>  <state value=""MOUSE_OVER"">  <imagePainter method=""buttonBackground"" path=""dirt.png"" sourceInsets=""2 2 2 2""/>  <insets top=""2"" botton=""2"" right=""2"" left=""2""/>  </state>  <state value=""ENABLED"">  <imagePainter method=""buttonBackground"" path=""dirt.png"" sourceInsets=""2 2 2 2""/>  <insets top=""2"" botton=""2"" right=""2"" left=""2""/>  </state>  </style>  <bind style=""button"" type=""name"" key=""dirt""/> </synth> The bind element there specifies what to map to (in this example it will apply that styling to any buttons whose name property has been set to ""dirt""). And a couple of useful links: http://javadesktop.org/articles/synth/ http://java.sun.com/docs/books/tutorial/uiswing/lookandfeel/synth.html  I'm probably going a million miles in the wrong direct (but i'm only young :P ). but couldn't you add the graphic to a panel and then a mouselistener to the graphic object so that when the user on the graphic your action is preformed. This would work but I would prefer to use the standard JButton than create a my type of button if possible.  I haven't done SWING development since my early CS classes but if it wasn't built in you could just inherit javax.swing.AbstractButton and create your own. Should be pretty simple to wire something together with their existing framework.  When I was first learning Java we had to make Yahtzee and I thought it would be cool to create custom Swing components and containers instead of just drawing everything on one JPanel. The benefit of extending Swing components of course is to have the ability to add support for keyboard shortcuts and other accessibility features that you can't do just by having a paint() method print a pretty picture. It may not be done the best way however but it may be a good starting point for you. Edit 8/6 - If it wasn't apparent from the images each Die is a button you can click. This will move it to the DiceContainer below. Looking at the source code you can see that each Die button is drawn dynamically based on its value. Here are the basic steps: Create a class that extends JComponent Call parent constructor super() in your constructors Make sure you class implements MouseListener Put this in the constructor: enableInputMethods(true); addMouseListener(this); Override these methods: public Dimension getPreferredSize() public Dimension getMinimumSize() public Dimension getMaximumSize() Override this method: public void paintComponent(Graphics g) The amount of space you have to work with when drawing your button is defined by getPreferredSize() assuming getMinimumSize() and getMaximumSize() return the same value. I haven't experimented too much with this but depending on the layout you use for your GUI your button could look completely different. And finally the source code. In case I missed anything. Awesome! This code is very useful. Thanks! Hi first thanks for the code! I would suggest adding a 'setActionComme(String Command)' to your code. it is one of the ways to filter events in Swing. (but then you can argue that there is 1001 things that could be added to make things slightly better :P) Can you put the whole code here.",java swing jbutton
438875,A,"StackOverflowError when serializing an object in Java I am writing an application in Java using Swing. I am trying to implement functionality to save and load simulation states for at simulation i am running. The entire simulation is kept as an object disconnected from Swing. I am trying to serialize my Simulation class with this code: public void saveSimulationState(String simulationFile) { try { Serializable object = this.sm; ObjectOutputStream objstream = new ObjectOutputStream(new FileOutputStream(simulationFile)); objstream.writeObject(object); objstream.close(); } catch (IOException e) { System.out.println(e.getMessage()); } } But i get the following error (it is huge). Exception in thread ""AWT-EventQueue-0"" java.lang.StackOverflowError at java.io.ObjectStreamClass.processQueue(ObjectStreamClass.java:2234) at java.io.ObjectStreamClass.lookup(ObjectStreamClass.java:266) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1106) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) Can anybody tell me what is causing this exception? Oh and all my code can be found here: http://code.google.com/p/sensor-protocol-simulation/ The example code was taken from GraphPanel.java in the view part. You should consider reimplementing the writeObject / readObject methods of your Simulation class in order to serialize only the relevant data (and not the entire contained object structure by default) or tagging transient your not to be serialized objects. You can also use the Externalizable interface if needed. BTW you may want to read this interesting article to begin with.  Run java with bigger stacks  Interesting post from Chen: When debugging a stack overflow you want to focus on the repeating recursive part In your case:  at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.ArrayList.writeObject(ArrayList.java:570) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) If you go hunting through your defect tracking database trying to see whether this is a known issue or not a search for the top functions on the stack is unlikely to find anything interesting. That's because stack overflows tend to happen at a random point in the recursion; each stack overflow looks superficially different from every other one even if they are the same stack overflow. Once you get past the initial turmoil the stack trace settles down into a nice repeating pattern consisting of the same x functions over and over again. Identifying the start of the repeating pattern isn't important because the starting point will be different for each crash in the same way that the precise note which exceeds your singing range varies from crash to crash. Once you've identified the repeating part pick a function from it that is somewhat unusual and search for it in your defect database. For example an default ArrayList serialization. Here your GrahPanel refers a Simulation which refers to Graph with potentially long ArrayList of Sensor and Edge... Java serialization keeps a record of every object written to a stream. If the same object is encountered a second time only a reference to it is written to the stream and not a second copy of the object; so circular references aren't the problem here. But serialization is vulnerable to stack overflow for certain kinds of structures; for example a long linked list with no special writeObject() methods will be serialized by recursively writing each link. If you've got a 100000 links you're going to try to use 100000 stack frames and quite likely fail with a StackOverflowError. It's possible to define a writeObject() method for such a list class that when the first link is serialized simply walks the list and serializes each link iteratively; this will prevent the default recursive mechanism from being used.  You should create a container class for the objects you want to store. I would not store the complete this object with all the logic inside. Store first field by field to find the element which is to big to store it that way. Than put a breakpoint in the methode and take a look at the field element. Does the element contains links which link to each other?  And after you done all that just use XStream instead if you only want to save to a file.  This code should serve as a model as it addresses the problem of stackoverflow on serialization. It uses memory inplace of recursion. Although not fit to be concidered universal as a serializer it serializes and deserializes the classes it was tested with. import java.io.*; import java.util.*; import java.lang.reflect.*; import android.util.*; public class SequentialObjectInputStream extends DataInputStream implements ObjectInput { interface FieldPutAction { void put(Object obj Field field) throws IllegalAccessException IOException; } interface ArrayPutAction { void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException; } public HashMap<Class FieldPutAction> Primatives; public HashMap<Class ArrayPutAction> ArrayPrimatives; public SequentialObjectInputStream(InputStream stream) { super(stream); Primatives = new HashMap<Class FieldPutAction>(); try { Primatives.put(boolean.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { boolean x = readBoolean(); field.setBoolean(obj x); } }); Primatives.put(byte.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { byte x = readByte(); field.setByte(obj x); } }); Primatives.put(short.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { short x = readShort(); field.setShort(obj x); } }); Primatives.put(int.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { int x = readInt(); field.setInt(obj x); } }); Primatives.put(long.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { long x = readLong(); field.setLong(obj x); } }); Primatives.put(char.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { char x = readChar(); field.setChar(obj x); } }); Primatives.put(float.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { float x = readFloat(); field.setFloat(obj x); } }); Primatives.put(double.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { double x = readDouble(); field.setDouble(obj x); } }); Primatives.put(String.class new FieldPutAction() { public void put(Object obj Field field) throws IllegalAccessException IOException { String x = readUTF(); field.set(obj x); } }); } catch(Exception e) { Log.e(""SOb"" Log.getStackTraceString(e)); } ArrayPrimatives = new HashMap<Class ArrayPutAction>(); try { ArrayPrimatives.put(boolean.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { boolean x = readBoolean(); Array.setBoolean(obj index x); } }); ArrayPrimatives.put(byte.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { byte x = readByte(); Array.setByte(obj index x); } }); ArrayPrimatives.put(short.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { short x = readShort(); Array.setShort(obj index x); } }); ArrayPrimatives.put(int.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { int x = readInt(); Array.setInt(obj index x); } }); ArrayPrimatives.put(long.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { long x = readLong(); Array.setLong(obj index x); } }); ArrayPrimatives.put(char.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { char x = readChar(); Array.setChar(obj index x); } }); ArrayPrimatives.put(float.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { float x = readFloat(); Array.setFloat(obj index x); } }); ArrayPrimatives.put(double.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { double x = readDouble(); Array.setDouble(obj index x); } }); ArrayPrimatives.put(String.class new ArrayPutAction() { public void put(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { String x = readUTF(); Array.set(obj index x); } }); } catch(Exception e) { Log.e(""SOb"" Log.getStackTraceString(e)); } } @Override public Object readObject() throws ClassNotFoundException IOException { long Total = readLong(); Log.i(""SOb"" ""readObject : "" + Long.toString(Total) + "" objects in graph""); HashMap<Long Object> References = new HashMap<Long Object>(); long currentId = 1; HashMap<Object HashMap<Field Long>> refCache = new HashMap<Object HashMap<Field Long>>(); final HashMap<Object HashMap<Integer Long>> arefCache = new HashMap<Object HashMap<IntegerLong>>(); for (int I=0; I < Total; I++) { String Name = readUTF(); Class C = Class.forName(Name); Log.i(""SOb"" ""Object of ""+C.getCanonicalName() +"" on graph""); int adim = 0; Object O = null; if (C.isArray()) { Class ComponentType = C.getComponentType(); int Size = readInt(); Log.i(""SOb"" ""array of ""+ComponentType.getCanonicalName() + "" "" + Long.toString(Size) + "" elements""); O = Array.newInstance(ComponentType Size); References.put(currentId O); currentId++; ArrayPutAction action = null; if (ArrayPrimatives.keySet().contains(ComponentType)) { action = ArrayPrimatives.get(ComponentType); } else { arefCache.put(O new HashMap<Integer Long>()); action = new ArrayPutAction() { public void put(Object O int Index) throws ArrayIndexOutOfBoundsException  IOException { long Ref = readLong(); arefCache.get(O).put(Index Ref); } }; } for (int index=0; index< Size; index++) { action.put(Oindex); } } else { try { O = C.getConstructor(new Class[0]).newInstance(new Object[0]); } catch(InstantiationException e) { Log.e(""SOb"" Log.getStackTraceString(e)); } catch(NoSuchMethodException e) { Log.e(""SOb"" Log.getStackTraceString(e)); } catch(IllegalAccessException e) { Log.e(""SOb"" Log.getStackTraceString(e)); } catch(InvocationTargetException e) { Log.e(""SOb"" Log.getStackTraceString(e)); } References.put(currentId O); currentId++; refCache.put(O new HashMap<Field Long>()); for (Field F : C.getFields()) { if (F.isAccessible()) { Class T = F.getType(); if (Primatives.containsKey(T)) { try { Primatives.get(T).put(O F); } catch (IllegalAccessException e) { } } else { refCache.get(O).put(F readLong()); } } } } } for (long I=0; I < Total; I++) { Object O = References.get(I+1); Class C = O.getClass(); //Log.i(""SOb"" ""get reference ""+Long.toString(I)+"" ""+C.getCanonicalName()); if (C.isArray()) { HashMap<IntegerLong> aref_table = arefCache.get(O); if (ArrayPrimatives.containsKey(C.getComponentType()) == false) { int len = Array.getLength(O); for (int index=0; index<len; index++) { long r = aref_table.get(index); Object ref = r == 0 ? null : References.get(r); Array.set(O index ref); } } } else { HashMap<Field Long> ref_table = refCache.get(O); for (Field F : C.getFields()) { if (F.isAccessible()) { Class T = F.getType(); if (Primatives.containsKey(T) == false) { try { long r = ref_table.get(F); Object ref = r == 0 ? null : References.get(r); F.set(O ref); } catch (IllegalAccessException e) { Log.e(""SOb"" Log.getStackTraceString(e)); } } } } } } return References.get((Long) (long) 1); } } import java.io.*; import java.util.*; import java.lang.reflect.*; import android.util.*; public class SequentialObjectOutputStream extends DataOutputStream implements ObjectOutput { interface FieldGetAction { void get(Object obj Field field) throws IllegalAccessException IOException; } interface ArrayGetAction { void get(Object array int Index) throws ArrayIndexOutOfBoundsException IOException; } public HashMap<Class FieldGetAction> Primatives; public HashMap<Class ArrayGetAction> ArrayPrimatives; public SequentialObjectOutputStream(OutputStream stream) { super(stream); Primatives = new HashMap<Class FieldGetAction>(); try { Primatives.put(boolean.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { boolean x = field.getBoolean(obj); writeBoolean(x); } }); Primatives.put(byte.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { byte x = field.getByte(obj); writeByte(x); } }); Primatives.put(short.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { short x = field.getShort(obj); writeShort(x); } }); Primatives.put(int.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { int x = field.getInt(obj); writeInt(x); } }); Primatives.put(long.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { long x = field.getLong(obj); writeLong(x); } }); Primatives.put(char.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { char x = field.getChar(obj); writeChar(x); } }); Primatives.put(float.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { float x = field.getFloat(obj); writeFloat(x); } }); Primatives.put(double.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { double x = field.getDouble(obj); writeDouble(x); } }); Primatives.put(String.class new FieldGetAction() { public void get(Object obj Field field) throws IllegalAccessException IOException { String x = (String) field.get(obj); writeUTF(x); } }); } catch(Exception e) { Log.e(""SOb"" Log.getStackTraceString(e)); } ArrayPrimatives = new HashMap<Class ArrayGetAction>(); try { ArrayPrimatives.put(boolean.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { boolean x = Array.getBoolean(obj index); writeBoolean(x); } }); ArrayPrimatives.put(byte.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { byte x = Array.getByte(obj index); writeByte(x); } }); ArrayPrimatives.put(short.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { short x = Array.getShort(obj index); writeShort(x); } }); ArrayPrimatives.put(int.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { int x = Array.getInt(obj index); writeInt(x); } }); ArrayPrimatives.put(long.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { long x = Array.getLong(obj index); writeLong(x); } }); ArrayPrimatives.put(char.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { char x = Array.getChar(obj index); writeChar(x); } }); ArrayPrimatives.put(float.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { float x = Array.getFloat(obj index); writeFloat(x); } }); ArrayPrimatives.put(double.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { double x = Array.getDouble(obj index); writeDouble(x); } }); ArrayPrimatives.put(String.class new ArrayGetAction() { public void get(Object obj int index) throws ArrayIndexOutOfBoundsException IOException { String x = (String) Array.get(obj index); writeUTF(x); } }); } catch(Exception e) { Log.e(""SOb"" Log.getStackTraceString(e)); } } class State { public ArrayList<Object> OStack = new ArrayList<Object>(); public long currentId = 1; public HashMap<Object Long> References = new HashMap<Object Long>(); } public void writeObject(Object A) throws IOException NotSerializableException { final State state = new State(); state.OStack.add(0 A); LinkedList<Object> ForStack = new LinkedList<Object>(); while (!(state.OStack.size() == 0)) { Object Current = state.OStack.get(0); state.OStack.remove(0); if (((Serializable) Current) == null) { throw new NotSerializableException(); } //Type C = Current.getClass(); Class C = Current.getClass(); Log.i(""SOb"" ""placing #""+Long.toString(state.currentId)+"" of ""+C.getCanonicalName()+"" on graph""); state.References.put(Current state.currentId); state.currentId++; ForStack.add(Current); if (C.isArray()) { //Array array = (Array) Current; Class Ctype = C.getComponentType(); if (ArrayPrimatives.keySet().contains(Ctype) == false) { for (int I=0; I<Array.getLength(Current); I++) { Object o = Array.get(Current I); if ((o != null) && (state.References.keySet().contains(o) == false)) { if (state.OStack.contains(o) == false) state.OStack.add(state.OStack.size() o); } } } } else { for (Class Cur = C; Cur != null; Cur = Cur.getSuperclass()) { Field[] fields = Cur.getDeclaredFields(); for (Field f : fields) { if (Modifier.isStatic(f.getModifiers())) { continue; } f.setAccessible(true); if (f.isAccessible() == false) { // Log.i(""SOb"" "" isAccessible = false""); continue; } Class type = f.getType(); //Log.i(""SOb"" "" field \""""+f.getName()+""\"" of ""+type.getCanonicalName()); if (Primatives.keySet().contains(type) == false) { try { Object o = f.get(Current); if ((o != null) && (state.References.keySet().contains(o) == false)) { if (state.OStack.contains(o) == false) state.OStack.add(state.OStack.size() o); } } catch (IllegalAccessException e) { Log.e(""SOb"" Log.getStackTraceString(e)); } } } } } } writeLong(state.References.size()); for (Object O : ForStack ) { Serializable s = (Serializable) O; // if (s != null) { Class cl = O.getClass(); String name = cl.getName(); writeUTF(name); if (cl.isArray()) { Class components = cl.getComponentType(); ArrayGetAction action; //Array array = (Array) O; if (ArrayPrimatives.keySet().contains(components)) { action = ArrayPrimatives.get(components); } else { action = new ArrayGetAction() { public void get(Object array int index) throws ArrayIndexOutOfBoundsException IOException { Object O = Array.get(array index); if (O==null) writeLong(0); else writeLong(state.References.get(O)); } }; } int length = Array.getLength(O); writeInt(length); for (int I=0; I<length; I++) { action.get(O I); } } else { for (Class Cur = cl; Cur != null; Cur = Cur.getSuperclass()) { Field[] fields = Cur.getDeclaredFields(); for (Field F : fields) { Class FieldType = F.getType(); F.setAccessible(true); if (F.isAccessible() && (Modifier.isStatic(FieldType.getModifiers()))) { FieldGetAction action; //Array array = (Array) O; if (Primatives.keySet().contains(FieldType)) { action = Primatives.get(FieldType); } else { action = new FieldGetAction() { public void get(Object obj Field index) throws IllegalAccessException IOException { Object O = index.get(obj); if (O==null) writeLong(0); else writeLong(state.References.get(O)); } }; } try { action.get(O F); } catch (IllegalAccessException e) { Log.e(""SOb"" Log.getStackTraceString(e)); } } } } } } } } } That's a lot of code with no explanation as to how it answers the question. Could you add a little description of what it's doing? While serializing 2 passes are used. The first adds every unique object to an object list and creates an index for each object. The second pass. serializes a flat view of the object with the index used in place of the value of a field or array value. This way by the time the object list is processed there is a flat mapping of the serialized object and its references without using a recursive writeObject.  You've got some deeply nested ArrayLists. I think maybe it's just going depth first and that means it's going for the bottom Sensor which is too deep. Maybe you could create a custom structure with Sensors starting with the bottom Sensor? Or maybe you'll have to provide your own serialisation to handle it? http://java.sun.com/developer/technicalArticles/Programming/serialization/",java swing serialization stackoverflow
363784,A,"Setting the tab policy in Swing's JTextPane I want my JTextPane to insert spaces whenever I press Tab. Currently it inserts the tab character (ASCII 9). Is there anyway to customize the tab policy of JTextPane (other than catching ""tab-key"" events and inserting the spaces myself seems an)? You could try sub-classing DefaultStyledDocument and overriding insert to replace any tabs in the inserted elements with spaces. Then install your sub-class in JTextPane with setStyledDocument(). This may be more trouble than catching key events though.  You can set a javax.swing.text.Document on your JTextPane. The following example will give you an idea of what I mean :) import java.awt.Dimension; import javax.swing.JFrame; import javax.swing.JTextPane; import javax.swing.text.AttributeSet; import javax.swing.text.BadLocationException; import javax.swing.text.DefaultStyledDocument; public class Tester { public static void main(String[] args) { JTextPane textpane = new JTextPane(); textpane.setDocument(new TabDocument()); JFrame frame = new JFrame(); frame.getContentPane().add(textpane); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(new Dimension(200 200)); frame.setVisible(true); } static class TabDocument extends DefaultStyledDocument { @Override public void insertString(int offs String str AttributeSet a) throws BadLocationException { str = str.replaceAll(""\t"" "" ""); super.insertString(offs str a); } } } Define a DefaultStyleDocument to do the work. Then set the Document to your JTextPane. Cheers Kai  As far as I know you'd have to catch key events as you say. Depending on usage you might also get away with waiting until the input is submitted and changing tabs to spaces at that time.",java swing
144892,A,"How to center a Window in Java? What's the easiest way to centre a java.awt.Window such as a JFrame or a JDialog? The title should be ""in Swing"" not ""in Java"" it would be more clear that way. @Joe `setLocation()` `setLocationRelativeTo()` and `setLocationByPlatform()` or all AWT not Swing. ;) From this blog: If you are using Java 1.4 or newer you can use the simple method setLocationRelativeTo(null) on the dialog box frame or window to center it. You learn something new every day. As @kleopatra said on another answer setLocationRelativeTo(null) has to be called after pack() in order to work. As explained below setLocationRelativeTo(null) has to be called after any call of pack() or setSize(). Well pack() sets the correct size based on the contents and layout and you can't centre something unless you know its size so it is indeed odd that the tutorial had you packing it after centering it. @Eusebius Odd I followed a tutorial that made me set it before `pack()` and it put the topleft corner of the frame at the center of my screen. After moving the line to below `pack()` it got properly centered.  Note that both the setLocationRelativeTo(null) and Tookit.getDefaultToolkit().getScreenSize() techniques work only for the primary monitor. If you are in a multi-monitor environment you may need to get information about the specific monitor the window is on before doing this kind of calculation. Sometimes important sometimes not... See GraphicsEnvironment javadocs for more info on how to get this. This helped me immensely! Thanks!  frame.setLocationRelativeTo(null); Full example:  public class BorderLayoutPanel { private JFrame mainFrame; private JButton btnLeft btnRight btnTop btnBottom btnCenter; public BorderLayoutPanel() { mainFrame = new JFrame(""Border Layout Example""); btnLeft = new JButton(""LEFT""); btnRight = new JButton(""RIGHT""); btnTop = new JButton(""TOP""); btnBottom = new JButton(""BOTTOM""); btnCenter = new JButton(""CENTER""); } public void SetLayout() { mainFrame.add(btnTop BorderLayout.NORTH); mainFrame.add(btnBottom BorderLayout.SOUTH); mainFrame.add(btnLeft BorderLayout.EAST); mainFrame.add(btnRight BorderLayout.WEST); mainFrame.add(btnCenter BorderLayout.CENTER); // mainFrame.setSize(200 200); // or mainFrame.pack(); mainFrame.setVisible(true); //take up the default look and feel specified by windows themes mainFrame.setDefaultLookAndFeelDecorated(true); //make the window startup position be centered mainFrame.setLocationRelativeTo(null); mainFrame.setDefaultCloseOperation(mainFrame.EXIT_ON_CLOSE); } }  The following doesn't work for JDK 1.7.0.07: frame.setLocationRelativeTo(null); It puts the top left corner at the center - not the same as centering the window. The other one doesn't work either involving frame.getSize() and dimension.getSize(): Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize(); int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2); int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2); frame.setLocation(x y); The getSize() method is inherited from the Component class and therefore frame.getSize returns the size of the window as well. Thus subtracting half the vertical and horizontal dimensions from the vertical and horizontal dimensions to find the xy coordinates of where to place the top-left corner gives you the location of the center point which ends up centering the window as well. However the first line of the above code is useful ""Dimension..."". Just do this to center it: Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize(); JLabel emptyLabel = new JLabel(""""); emptyLabel.setPreferredSize(new Dimension( (int)dimension.getWidth() / 2 (int)dimension.getHeight()/2 )); frame.getContentPane().add(emptyLabel BorderLayout.CENTER); frame.setLocation((int)dimension.getWidth()/4 (int)dimension.getHeight()/4); The JLabel sets the screen-size. It's in FrameDemo.java available on the java tutorials at the Oracle/Sun site. I set it to half the screen size's height/width. Then I centered it by placing the top left at 1/4 of the screen size's dimension from the left and 1/4 of the screen size's dimension from the top. You can use a similar concept. Neither does the other one. These codes put the top left corner of the screen in the center. -1 can't reproduce - or more precisely: happens only if the setLocationRelative is called _before_ sizing the frame (by pack or manual setSize). For a zero-sized frame it's top-left corner is the same location as .. its center :-) -1. See Dzmitry Sevkovich answer  setLocationRelativeTo(null) should be called after you either use setSize(xy) or use pack(). this worked for me in JDK 1.7  Actually frame.getHeight() and getwidth() doesnt return values  check it by System.out.println(frame.getHeight()); directly put the values for width and height then it will work fine in center. eg: as below Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize(); int x=(int)((dimension.getWidth() - 450)/2); int y=(int)((dimension.getHeight() - 450)/2); jf.setLocation(x y); both 450 is my frame width n height -1 a frame's size is zero before ... sizing it :-) Preferably by pack or at least by manually setting its size to anything else than zero _before_ calling setLocationRelative will allow its internal correct calculation  This should work in all versions of Java public static void centreWindow(Window frame) { Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize(); int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2); int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2); frame.setLocation(x y); }  On Linux the code  setLocationRelativeTo(null) Put my window to random location each time I launched it in a multi display environment. And the code  setLocation((Toolkit.getDefaultToolkit().getScreenSize().width - getSize().width) / 2 (Toolkit.getDefaultToolkit().getScreenSize().height - getSize().height) / 2); ""cut"" the window in half with placing it to the exact center which is between my two displays. I used the following method to center it: private void setWindowPosition(JFrame window int screen) { GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] allDevices = env.getScreenDevices(); int topLeftX topLeftY screenX screenY windowPosX windowPosY; if (screen < allDevices.length && screen > -1) { topLeftX = allDevices[screen].getDefaultConfiguration().getBounds().x; topLeftY = allDevices[screen].getDefaultConfiguration().getBounds().y; screenX = allDevices[screen].getDefaultConfiguration().getBounds().width; screenY = allDevices[screen].getDefaultConfiguration().getBounds().height; } else { topLeftX = allDevices[0].getDefaultConfiguration().getBounds().x; topLeftY = allDevices[0].getDefaultConfiguration().getBounds().y; screenX = allDevices[0].getDefaultConfiguration().getBounds().width; screenY = allDevices[0].getDefaultConfiguration().getBounds().height; } windowPosX = ((screenX - window.getWidth()) / 2) + topLeftX; windowPosY = ((screenY - window.getHeight()) / 2) + topLeftY; window.setLocation(windowPosX windowPosY); } Makes the window appear right at the center of the first display. This is probably not the easiest solution. Works properly on Linux Windows and Mac.",java swing user-interface awt
408989,A,"Java(Swing): influence height of JList in GridBagLayout I want to build a dialog in Java with a List and a couple of buttons underneath it. The list ends up with the same height as the buttons (about one line) and the whole dialog is about two lines of height. However I'd like the dialog to be taller (maybe 10 lines) and the JList to take up most of the space .. I've played around with the parameters but for the life of it can't get it to work. Any ideas? Here's my current code: //layout setLayout(new GridBagLayout()); GridBagConstraints gbc = new GridBagConstraints(); gbc.fill = GridBagConstraints.BOTH; int y = 0; //List gbc.gridx = 0; gbc.gridy = y; gbc.weighty = 3; gbc.weightx = 1; gbc.gridwidth= 3; add(new JScrollPane(_myList) gbc); _myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); // Buttons gbc.gridx = 1; gbc.gridy = ++y; gbc.gridwidth = 1; gbc.weighty = 0; add(_Save gbc); gbc.gridx = 2; add(_Cancel gbc); Added some new info regarding the size of the ListModel. Oh gosh... I always hated that problem. Don't forget to watch ""Totally Gridbag"" http://madbean.com/anim/totallygridbag/ cool cartoon .. where can I upvote your answer ;-) You might as well consider calling _myList.setVisibleRowCount(n) to force a preferred size (in number of visible rows) for your list. I tried but it didn't change anything with the null entries. For general sizing it sure works so +1  For the list set weightY=1 instead of 3. The setting of 3 will make the space for the list larger than the list itself. 99.9% of the time GridBagLayout is used the weightX/Y values should always be either 0 or 1. Also the gridWidth should probably be 2 instead of 3. Thanks but the problem was somewhere else in my code. +1 This actually helped me with the problem I had. Setting weighty to a JScrollPane (that has a JList) will appropriately resize the component vertically.  I've done some more poling around and apparently the behaviour is caused by the number of items in the ListModel of _myList. When I populate it with a larger number of items than the one or two it has in my current usage then the list is properly displayed. Hopefully that helps to pin down the problem and find a solution ..  Found the problem .. and it has nothing to do with the layout code. I was adding a null to ListModel and that seemed to confuse the LayoutManager. Would close the question but not yet enough mojo ...",java swing
20880,A,Java JPanel redraw issues I have a Java swing application with a panel that contains three JComboBoxes that do not draw properly. The combox boxes just show up as the down arrow on the right side but without the label of the currently selected value. The boxes will redraw correctly if the window is resized either bigger or smaller by even one pixel. All of my googling has pointed to calling revalidate() on the JPanel to fix this but that hasn't worked for me. Calling updateUI() on the JPanel has changed it from always displaying incorrectly to displaying incorrectly half of the time. Has anyone else seen this and found a different way to force a redraw of the combo boxes? Can you give us some more information on how you add the combo boxes to the JPanel? This is a pretty common thing to do in Swing so I doubt that it's a JVM issue but I guess anything is possible. Specifically I would double check to make sure you're not accessing the GUI from any background threads. In this case maybe you're reading the choices from a DB or something and updating the JComboBox from a background thread which is a big no-no in Swing. See SwingUtils.invokeLater(). A background thread was exactly the problem. Thanks.,java swing
85046,A,"Editable JTable Tutorial Are there any good books or website that go over creating a JTable? I want to make one column editable. I would like to actually put a inherited JCheckBox component (that we created here) into one of the table columns instead of just having the table put JCheckBox in based on it being an editable boolean field. I have the JFC Swing Tutorial Second Edition book but I just would like to know if there are other examples I could look at and learn how to deal with the tables better. The book seems to just take the java 'trail' online and put it in the book. I am re-reading the stuff though just curious if anyone has found something that might help out more. Some useful classes are: Package javax.swing.table : TableModel - Interface for a tablemodel AbstractTableModel - Nice class to extend for creating your own table with custom data structures DefaultTableModel - Default table model which can deal with arrays[] and Vectors To disable editing on any cell you need to override the isCellEditable(int row int col) method  This tutorial from the java lobby is easy to follow. The online Swing trail for JTable that you reference indicates that it has been updated. Did you scan through the whole thing for possible better (isn't newer always better) information?  To make a column editable you have to override the isCellEditable method in the TableModel. Creating a TableModel is fairly easy if you inherit AbstractTableModel and I'd recommend it for all but the most simple JTables. However adapting the TableModel is only part of what you need to do. To actually get a custom component in the JTable you need to set a custom cell renderer. To use an interactive custom component you need to set a custom cell editor. In some cases it's enough to use slightly modificated versions of the default classes for this. Editors If you already have got a custom component is easily done using delegation: Create a new class implementing TableCellEditor and return a new instance of the component in the getCellEditorComponent method. The paramaters to this method include the current value as well as the cell coordinates a link back to the table and wether or not the cell is selected. The TableCellEditor also has a method that is called when the user commits a change to the cell contents (where you can validate user input and adjust the model) or cancels an edit. Be sure to call the stopEditing() method on your editor if you ever programmatically abort editing otherwise the editor component will remain on screen -- this once took me like 2 hours to debug. Note that within a JTable editors and only editors receive events! Displaying a button can be done using a renderer. But to get a functioning button you need to implement an editor with the correct EventListeners registered. Registering a listener on a renderer does nothing. Renderers Implementing a renderer is not strictly necessary for what you describe in your question but you typically end up doing it anyway if only for minor modifications. Renderers unlike editors are speed critical. The getTableCellRendererComponent of a renderer is called once for every cell in the table! The component returned by a renderer is only used to paint the cell not for interaction and thus can be ""reused"" for the next cell. In other words you should adjust the component (e.g. using setText(...) or setFont(...) if it is a TextComponent) in the renderer you should not instantiate a new one -- that's an easy way to cripple the performance. Caveats Note that for renderers and editors to work you need to tell the JTable when to use a certain renderer/editor. There are basically two ways to do this. You can set the default cell renderer/editor for a certain type using the respective JTable methods. For this way to work your TableModel needs to return exactly this type in the getColumnClass(...) method! The default table model will not do this for you it always returns Object.class. I'm sure that one has stumped a lot of people. The other way to set the editor/renderer is by explicitly setting it on the column itself that is by getting the TableColumn via the getTableColumn(...) method of the JTable. This is a lot more elaborate however it's also the only way to have two different renderers/editors for a single class. E.g. your model might have two columns of class String which are rendered in entirely different ways maybe once using a JLabel/DefaultRenderer and the other using a JButton to access a more elaborate editor. JTable with its custom renderers and editors is extremely versatile but it is also a lot to take in and there are a lot of things to do wrong. Good luck! How to Use Tables in The Swing Tutorial is mandatory reading for anyone customising JTables. In particular read and reread Concepts: Editors and Renderers because it typically takes a while for it to ""click"". The examples on custom renderers and editors are also very worthwhile. wow lots of info. thanks. A couple years late but great answer. Thanks!  The class you want to look into extending to create your own behavior is DefaultTableModel. That will allow you to define your own behavior. A decent tutorial can be found on sun's site. yeah thats the trail I am currently looking at :) We have extended AbstractTableModel here before and I know I have to override getColumnClass & isCellEditable and all that I am just having trouble grasping dealing with all this on editable cells :(  If you are trying to use a simple JTable with 1 column editable and you know the column location you could always use default table model and overload the isCellEditable call. something like myTable.setModel(new DefaultTableModel(){ @Override public boolean isCellEditable(int row int column) { if (column == x) { return true; } else return false; } }); And for the check box create a renderer class MyCheckBoxRenderer extends JCheckBox implements TableCellRenderer",java swing jtable
325945,A,"Is there any (real) Office 2007 look and feel for Java/Swing? I'm aware of the Substance look and feels and that they have a Office 2007 look-a-like look and feel. But this look and feel doesn't look like the Office 2007 design at all the colors are a lot different for example. Are there other look and feels which mimic the Office 2007 more accurately? It may help if you indicated what framework/language you are working with (.Net C++ MFC etc). I'm not familiar with theSubstance so I don't know what it applies to. Sorry! Ah sorry just noticed the tags for Java/swing. You may want to edit your post to include that in the main text so that others don't make the same mistake I just did :) I noticed quite a few people don't specify the domain of their question and instead put some tags that hint at it!! please clearly state in your question that you're talking about the Java framework called Swing (if *that* is what you're talking about) I suggest looking at jide software conponents at http://www.jidesoft.com/ wow that looks awesome I can only find Office 2003 components  The author of Substance is also developing ""Flamingo"" which includes a Ribbon component. As far as I understand Flamingo has no dependency on Substance and uses whatever LAF is installed (so the system LAF should work). You migh want to give it a try. Yes I'm already using the ribbon component. What I need now is an Office 20007 look and feel :)  Look! http://www.pushing-pixels.org/?p=1010  With the Windows 7/VS2010/.NET4 wave the ribbon will become a standard component in Win32 and also the .NET framework I think.",java swing office-2007 look-and-feel
246395,A,How to do a check before allowing editing of a given row in a JTable The problem is quite basic. I have a JTable showing cached data from a database. If a user clicks in a cell for editing I want to attempt a lock on that row in the database. If the lock does not succeed I want to prevent editing. But I can't seem to find any clean way to accomplish this. Am I missing something? Before editing/setting value the table model is asked via TableModel.isCellEditable(rowcol) whether this cell is editable. Here you can implement your lock. and after TableModel.setValue(rowcolval) you should unlock this. BUT. The lock operation should take a lot of time and makes your UI un-responsible. And it si BAD. Try different approach. What about lazy fail? You lock the row check for validity of data and fail if data are newer. If data are OK you put them down. UNLOCK.  Because you have to test on the click you can't use the model's way of doing this so you should try overriding the JTable's public void changeSelection(int rowIndex int columnIndex boolean toggle oolean extend) method. If the row is locked then don't call super.changeSelection and it should leave the row unselected. Actually I'd still want the rows selectable (since I have a function for exporting selected rows which shouldn't require a lock) but your answer gave me the right idea. :) I'm overriding editCellAt() on the JTable instead and otherwise does just as you recommended. cell selection and editability is not related. In the mentioned isTableCellEditable method you can return false and the JTable will not start editing. But holding a lock on a row until the editing is as also mentioned not a good diea  Oracle has a nice way of handling this but I don't know how universally applicable it is. In Oracle you can use FOR UPDATE on a SELECT statement to lock a record as you read it. For example if you are fetching a row for display: select * into v_row from my_table where my_table_id = 1 for update; This will allow reads but prevent updates. If another transaction has a lock your transaction will wait until it becomes available (or timeout eventually). If you want the statement to throw an exception if you try to lock you add NOWAIT. select * into v_row from my_table where my_table_id = 1 for update nowait; If the row is already locked you will get: ORA-00054: resource busy and acquire with NOWAIT specified. Hope that helps.  Instead you could wait until the user actually changes something then override JTable.editingStopped to do the work there (you could even check to see if the value changed) That way no locking is done until the user actually changes something.,java swing jtable
172841,A,Selection overridden by formatter I have applied a Formatter to a JFormattedTextField using a FormatterFactory when a user clicks into the text field I want to select the contents. A focus listener does not work as expected because the formatter gets called which eventually causes the value to be reset which ultimately de-selects the fields contents. I think what is happening is that after the value changes the Caret moves to the rightmost position and this deselects the field. Does anyone have any knowledge of how to get around this and select the fields contents correctly? which jdk are you using - any chance this is a bug in it?  Quick and dirty workaround is to use EventQueue.invokeLater from your focusListener.  EventQueue.invokeLater(new Runnable(){ public void run() { yourTextField.selectAll();} });,java swing caret formatter
237131,A,"How do I create a custom JPanel extension and use it from the NetBeans palette? I have a JPanel extension that I've written and would like to be able to use it in the NetBeans designer. The component is simply adds some custom painting and continues to function as a container to be customised on each use. I have properties to expose in addition to the standard JPanel ones and have a custom paintComponent() method that I'd like to be able to see in use when building up GUIs. Ideally I'd like to associate an icon with the component as well so that its easily recognisable for my colleagues to work with. What's the best way of achieving this? http://www.netbeans.org search for Matisse.  You can add your custom component to the matisse GUI palatte. Build your project so the class file you want to use is part of the jar file Open a java class that has a form and switch to design mode. 3 Right click in the palatte and choose ""palatte manager"". Choose the ""add from jar"" button to select your jar. Choose the class you made and add it to your palatte. Now your panel is known to netbeans and you can drag it into new panels.  I made JPanel component in NetBeans with overridden paint method: @Override public void paint(Graphics g) { super.paint(g); Graphics2D g2 = (Graphics2D) g; ... //draw elements ... } It has some custom properties accessible through NetBeans properties window. public int getResolutionX() { return resolutionX; } public void setResolutionX(int resolutionX) { this.resolutionX = resolutionX; } public int getResolutionY() { return resolutionY; } public void setResolutionY(int resolutionY) { this.resolutionY = resolutionY; } I put it in my palette using: Tools->Palette->Swing/AWT Components. It even has the same look I painted in my overridden paint method while I am doing drag/drop in another container. I didn't associate icon to it though. Hope this helps.",java swing netbeans
54567,A,"How do I get InputVerifier to work with an editable JComboBox I've got an JComboBox with a custom inputVerifyer set to limit MaxLength when it's set to editable. The verify method never seems to get called. The same verifyer gets invoked on a JTextField fine. What might I be doing wrong? I found a workaround. I thought I'd let the next person with this problem know about. Basically. Instead of setting the inputVerifier on the ComboBox you set it to it's ""Editor Component"". JComboBox combo = new JComboBox(); JTextField tf = (JTextField)(combo.getEditor().getEditorComponent()); tf.setInputVerifier(verifyer);  Show us a small section of your code. package inputverifier; import javax.swing.*; class Go { public static void main(String[] args) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { runEDT(); }}); } private static void runEDT() { new JFrame(""combo thing"") {{ setLayout(new java.awt.GridLayout(2 1)); add(new JComboBox() {{ setEditable(true); setInputVerifier(new InputVerifier() { @Override public boolean verify(JComponent input) { System.err.println(""Hi!""); return true; } }); }}); add(new JTextField()); setDefaultCloseOperation(EXIT_ON_CLOSE); pack(); setVisible(true); }}; } } Looks like it's a problem with JComboBox being a composite component. I'd suggest avoiding such nasty UI solutions.  I wouldn't use the term workaround. Based on all the swing code I've seen from a bunch of different sources that looks to be the canonical solution.",java swing
467324,A,"Spring JdbcTemplate and Threading Is it safe to fork off a Thread to execute an insert using a JdbcTemplate in Swing. It's a logging event and as much as possible I don't want it to affect perceived performance. Also note that its thread-safety is very well explained in the Spring 3.1 reference documentation: 13.2.1.2 JdbcTemplate best practices Instances of the JdbcTemplate class are threadsafe once configured. This is important because it means that you can configure a single instance of a JdbcTemplate and then safely inject this shared reference into multiple DAOs (or repositories). The JdbcTemplate is stateful in that it maintains a reference to a DataSource but this state is not conversational state. And read carefully ""once configured"" bit so don't misuse setMaxResult for limiting result set for given thread for given query as it affects all the queries and all the threads using shared JdbcTemplate instance.  Why would you think that it wouldn't be? I've not used JdbcTemplate directly from Swing but I have in several web applications (which have a separate thread per request) and I've never had any problems with threading issues from it. In this situation the template was configured once at application startup and repeatedly called with different parameters. If you're worried about threading issues you can always create a new template per logging thread...  This answer from the Spring forum says yes: http://forum.springframework.org/showthread.php?t=25965 JdbcTemplate is a singleton that won't change state once it's set.",java multithreading swing jdbc spring-jdbc
182316,A,"Java: Swing Libraries & Thread Safety I've often heard criticism of the lack of thread safety in the Swing libraries. Yet I am not sure as to what I would be doing in my own code with could cause issues: In what situations does the fact Swing is not thread safe come into play ? What should I actively avoid doing ? This is one of those questions that makes me glad I purchased Robinson & Vorobiev's book on Swing. Anything that accesses the state of a java.awt.Component should be run inside the EDT with three exceptions: anything specifically documented as thread-safe such as repaint() revalidate() and invalidate(); any Component in a UI that has not yet been realized; and any Component in an Applet before that Applet's start() has been called. Methods specially made thread-safe are so uncommon that it's often sufficient to simply remember the ones that are; you can also usually get away with assuming there are no such methods (it's perfectly safe to wrap a repaint call in a SwingWorker for example). Realized means that the Component is either a top-level container (like JFrame) on which any of setVisible(true) show() or pack() has been called or it has been added to a realized Component. This means it's perfectly fine to build your UI in the main() method as many tutorial examples do since they don't call setVisible(true) on the top-level container until every Component has been added to it fonts and borders configured etc. For similar reasons it's perfectly safe to build your applet UI in its init() method and then call start() after it's all built. Wrapping subsequent Component changes in Runnables to send to invokeLater() becomes easy to get right after doing it only a few times. The one thing I find annoying is reading the state of a Component (say someTextField.getText()) from another thread. Technically this has to be wrapped in invokeLater() too; in practice it can make the code ugly fast and I often don't bother or I'm careful to grab that information at initial event handling time (typically the right time to do it in most cases anyway). ""Component in a UI that has not yet been realized"" -- no longer recommended practice. You should always work with your components on EDT regardless of whether they are realized or not. Assuming you're right it makes me wonder why they'd recommend this. It's a substantial change given how it would affect huge amounts of tutorial code. ...In fact I can find no Java 6 tutorials making this recommendation; sample code still builds UIs in the main thread. Do you have a source for this? @Paul 'tis true see http://stackoverflow.com/questions/491323/is-it-safe-to-construct-swing-awt-widgets-not-on-the-event-dispatch-thread/491377#491377 and more. It's retrospective and it's a pain. Wow. Nice find. This'll affect a lot of my older code. Oddly I haven't written much UI code in the past five years come to think of it and when I did I never had a deadlock so I never noticed.  If you're using Java 6 then SwingWorker is definately the easiest way to deal with this. Basically you want to make sure that anything that changes a UI is performed on the EventDispatchThread. This can be found by using the SwingUtilities.isEventDispatchThread() method to tell you if you are in it (generally not a good idea - you should know what thread is active). If you aren't on the EDT then you use SwingUtilities.invokeLater() and SwingUtilities.invokeAndWait() to invoke a Runnable on the EDT. If you update UI's not on the EDT you get some incredibly strange behaviour. Personally I don't consider this a flaw of Swing you get some nice efficiency by not having to synchronize all of the threads to provide a UI update - you just need to remember that caveat.  Never do long running tasks in response to a button event etc as these are on the event thread. If you block the event thread the ENTIRE GUI will be completely unresponsive resulting in REALLY pissed off users. This is why Swing seems slow and crusty. Use Threads Executors and SwingWorker to run tasks NOT ON THE EDT ( event dispatch thread). Do not update or create widgets outside of the EDT. Just about the only call you can do outside of the EDT is Component.repaint(). Use SwingUtilitis.invokeLater to ensure certain code executes on the EDT. Use EDT Debug Techniques and a smart look and feel (like Substance which checks for EDT violation) If you follow these rules Swing can make some very attractive and RESPONSIVE GUIs An example of some REALLY awesome Swing UI work: Palantir Technologies. Note: I DO NOT work for them just an example of awesome swing. Shame no public demo... Their blog is good too sparse but good There's also an invokeAndWait() method but use invokeLater() whenever possible. Use invokeAndWait if you want deadlocks. ;) Or are paid by the hour. :-) Agreed. Invoke and wait is very scary. Consider this: http://blog.palantirtech.com/2008/02/21/invokeandnotwaiting/ Good points. Could you say me why is swing not thread safe like the AWT?  The phrase 'thread-unsafe' sounds like there is something inherently bad (you know... 'safe' - good; 'unsafe' - bad). The reality is that thread safety comes at a cost - threadsafe objects are often way more complex to implement (and Swing is complex enough even as it is.) Also thread-safety is achieved either using locking (slow) or compare-and-swap (complex) strategies. Given that the GUI interfaces with humans which tend to be unpredictable and difficult to synchronize many toolkits have decided to channel all events through a single event pump. This is true for Windows Swing SWT GTK and probably others. Actually I don't know a single GUI toolkit which is truly thread-safe (meaning that you can manipulate its objects' internal state from any thread). What is usually done instead is that the GUIs provide a way to cope with the thread-unsafety. As others noted Swing has always provided the somewhat simplistic SwingUtilities.invokeLater(). Java 6 includes the excellent SwingWorker (available for previous versions from Swinglabs.org). There are also third party libraries like Foxtrot for managing threads in Swing context. The notoriety of Swing is because the designers have taken light handed approach of assuming that the developer will do the right thing and not stall the EDT or modify components from outside the EDT. They have stated their threading policy loud and clear and it's up to the developers to follow it. It's trivial to make each swing API to post a job to the EDT for each property-set invalidate etc. which would make it threadsafe but at the cost of massive slowdowns. You can even do it yourself using AOP. For comparison SWT throws exceptions when a component is accessed from a wrong thread.  invokeLater() and invokeAndWait() really MUST be used when you are doing any interaction with GUI components from any thread that is NOT the EDT. It may work during development but like most concurrent bugs you'll start to see weird exceptions come up that seem completely unrelated and occur non-deterministly - usually spotted AFTER you've shipped by real users. Not good. Also you've got no confidence that your app will continue to work on future CPUs with more and more cores - which are more prone to encountering weird threading issues due to them being truely concurrent rather than just simulated by the OS. Yes it gets ugly wrapping every method call back into the EDT in a Runnable instance but that's Java for you. Until we get closures you just have to live with it.  Here's a pattern for makng swing thread-freindly. Sublass Action (MyAction) and make it's doAction threaded. Make the constructor take a String NAME. Give it an abstract actionImpl() method. Let it look like.. (pseudocode warning!) doAction(){ new Thread(){ public void run(){ //kick off thread to do actionImpl(). actionImpl(); MyAction.this.interrupt(); }.start(); // use a worker pool if you care about garbage. try { sleep(300); Go to a busy cursor sleep(600); Show a busy dialog(Name) // name comes in handy here } catch( interrupted exception){ show normal cursor } You can record the time taken for the task and next time your dialog can show a decent estimate. If you want to be really nice do the sleeping in another worker thread too.  Actively avoid doing any Swing work at all except on the event dispatching thread. Swing was written to be easy to extend and Sun decided a single-threaded model was better for this. I have had no issues whilst following my advice above. There are some circumstances where you can 'swing' from other threads but I've never found the need.  For more details about threading Taming Java Threads by Allen Holub is an older book but a great read. Holub really promotes responsive UI and details examples and how to alleviate problems. http://www.amazon.com/Taming-Java-Threads-Allen-Holub/dp/1893115100 http://www.holub.com/software/taming.java.threads.html Love the ""If i was king"" section in the end there.  It's not just that Swing is not thread-safe (not much is) but it's thread-hostile. If you start doing Swing stuff on a single thread (other than the EDT) then when in cases where Swing switches to the EDT (not documented) there may well be thread-safety issues. Even Swing text which aims to be thread-safe isn't usefully thread-safe (for instance to append to a document you first need to find the length which might change before the insert). So do all Swing manipulations on the EDT. Note the EDT is not the thread the main is called on so start your (simple) Swing applications like this boilerplate: class MyApp { public static void main(String[] args) { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { runEDT(); }}); } private static void runEDT() { assert java.awt.EventQueue.isDispatchThread(); ... +1 for thread-hostile  Note that not even the model interfaces are thread safe. The size and the content are queried with separate get methods and so there is no way of synchronizing those. Updating the state of the model from another thread allows for it to at least paint a situation where size is still bigger (table row is still in place) but the content is no longer there. Updating state of the model always in EDT avoids these.  An alternative to using intelligent skins like substance is to create the following utility method: public final static void checkOnEventDispatchThread() { if (!SwingUtilities.isEventDispatchThread()) { throw new RuntimeException(""This method can only be run on the EDT""); } } Call it in every method you write that is required to be on the event dispatch thread. An advantage of this would be to disable and enable system wide checks very quickly eg possibly removing this in production. Note intelligent skins can of course provide additional coverage as well as just this.",java multithreading swing
466599,A,"JTree gives ArrayIndexOutOfBoundsException? I try to dynamically add nodes to a Java Swing JTree and the user should be able to browse and to collapse hierarchy while nodes are constantly added. When I add a Thread.sleep(10) in my loop it works fine; but this is a dirty hack... Here is the stripped down code that triggers this problem. Whenever I run this and doubleclick on the root node to expand/collapse it (while nodes are added) I get an ArrayIndexOutOfBoundsException. When I add a Thread.sleep(10) this does not happen. I guess this is a threading issue but I have no idea how to synchronize this? Any hints would be greatly appreciated! public static void main(String[] args) throws InterruptedException { final JFrame frame = new JFrame(); frame.setSize(600 800); frame.setVisible(true); MutableTreeNode root = new DefaultMutableTreeNode(""root""); final DefaultTreeModel model = new DefaultTreeModel(root); final JTree tree = new JTree(model); frame.add(new JScrollPane(tree)); while (true) { MutableTreeNode child = new DefaultMutableTreeNode(""test""); model.insertNodeInto(child root root.getChildCount()); tree.expandRow(tree.getRowCount() - 1); // uncommenting this to make it work // Thread.sleep(10); } } I want to use this for a search-on-typing application so giving (almost) instant results is essential for me. EDIT: Thanks for the quick answers! SwingUtilities.invokeLater() solves the problem. I now do this: Add 100 items within SwingUtilities.invokeLater(); After 100 items I run this so that the GUI can get updated: // just wait so that all events in the queue can be processed SwingUtilities.invokeAndWait(new Runnable() { public void run() { }; }); This way I have a very responsive GUI and it works perfectly. Thanks! You may want to have the tree.expandRow command run from a TreeModelListener's treeNodesInserted event so that it only runs after the model is updated. I have just tried this now but I get exactly the same result.  tree.expandRow needs to be done in the event thread so change the loop as follows: while (true) { MutableTreeNode child = new DefaultMutableTreeNode(""test""); model.insertNodeInto(child root root.getChildCount()); final int rowToExpand = tree.getRowCount() - 1; // ? does this work ? SwingUtilities.invokeLater(new Runnable() { public void run() { tree.expandRow(rowToExpand); } }); } While you're at it you probably need to make sure whatever list your tree model is using is synchronized so you don't insert into the collection while the tree is being traversed by the paint thread. Wouldn't you need to go ahead and save tree.getRowCount() - 1 considering there may have been 50 rows inserted before that Runnable finally kicks off? @Richard good point.  Swing is thread-hostile so do your Swing manipulation in the AWT Event Diaptch Thread (EDT). The infinite loop is nonsense so difficult to come up with a suggestion. The best equivalent I can think of is iterating posting an even to run the code again. Because there are certain priorities in the event queue I'm not sure even that works. public static void main(String[] args) throws InterruptedException { java.awt.EventQueue.invokeLater(new Runnable() { public void run() { runEDT(); }}); } private static void runEDT() { assert java.awt.EventQueue.isDispatchThread(); final JFrame frame = new JFrame(); frame.setSize(600 800); frame.setVisible(true); final MutableTreeNode root = new DefaultMutableTreeNode(""root""); final DefaultTreeModel model = new DefaultTreeModel(root); final JTree tree = new JTree(model); frame.add(new JScrollPane(tree)); frame.validate(); new Runnable() { public void run() { final MutableTreeNode child = new DefaultMutableTreeNode(""test""); model.insertNodeInto(child root root.getChildCount()); tree.expandRow(tree.getRowCount() - 1); final Runnable addNode = this; // Inner class confusion... java.awt.EventQueue.invokeLater(addNode); }}.run(); } (Disclaimer: Not compiled or tested.)",java multithreading swing synchronization jtree
268750,A,Swing: Canvas overlaps menu I have a JFrame with a menu bar and a canvas covering all the remaining surface. When I click on the menu bar the menu opens behind the Canvas and I can't see it. Has anyone experienced this? Other than resizing the Canvas (which I am reluctant to do) is there any solution? Thanks Vlad You're experiencing heavyweight vs. lightweight issues. The quick fix: // Call this sometime before you use your menus JPopupMenu.setDefaultLightWeightPopupEnabled(false) Heavyweight vs. Lightweight Or use a JComponent instead of a Canvas. The JComponent idea was actually saner. I didn't think of looking for a Swing equivalent of Canvas. Thanks :)  That happened to me when i resized a Canvas that is on a JFrame. I just had to call validate() on the JFrame after the resize. Good luck!,java swing
460832,A,Applet with JRE 1.5 (IE6) fails to open HTML page over HTTPS works with JRE1.6 I have a small (500kb) swing applet that displays small HTML page with JEditorPane. This works nicely with most browsers and JREs but with JRE 1.5 (IE6) it seem to display just blank. There are no error messages on java console or exceptions. Applet is able to load TXT files with all JREs just fine with JAVA CONSOLE tracing 5 option it displays the same diagnostic message for both text files and html files: network: Connecting https://xxx.net/xxx/data/my.txt with proxy=DIRECT network: Connecting https://xxx.net/xxx/data/my2.htm with proxy=DIRECT Any ideas how to diagnose further whats going wrong or how to fix it? I don't have console access to my client's server hosting the applet but I have a test machine with IE6+JRE 1.5 that I can use to access their HTTPS url and reproduce the problem. The problem does not appear with other browsers / JRE 1.6. Applet is unsigned since the HTML page and applet are located in same folder in same server. Can't you just insert logging statements into the applet source code & redeploy? You should be able to see the log output in the java console. That should help to narrow down the problem.  Have you tried running something like Wireshark to see if the request is actually happening or if you're actually getting a response? If it's something weird with the network (maybe the 1.5 JRE is doing something weird with the request) then that might help you track it down. thanks for comment I will try..  Solution found JEditorPane Async mode was causing this issue switching to Syncronized mode solved bug with JRE 1.5,java swing applet jeditorpane
243553,A,"How to reliably get row index in JTable from MouseEvent? How can I find out which row in a JTable the user just clicked? Try this: aJTable.rowAtPoint(evt.getPoint());  If you only ever care about listening to selections on the JTable: jTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() { public void valueChanged(ListSelectionEvent e) { int sel = jTable.getSelectedRow(); } }); Does this still work if it's in column or cell selection mode? It should but it also allows to more more with in reaction to the click. The ""answer"" will need some kind of listener so you know when to read the value.",java swing jtable
249718,A,"Accelerate 2D images in Java *without* disturbing JMenus Already implemented performance boosters : - Get compatible image of GraphicsConfiguration to draw on - Enable OpenGL pipeline in 1.5: Not possible due to severe artifacts So far I am fine the main profiled bottleneck of the program is drawing an image with several thousand tiles. Unfortunately it is not regular else I simply could set pixels and scale them. I accerelated the image with VolatileImages and own rendering routines (ignore repaint and draw it itself with a timer). The result was pleasing and would suffice BUT: Choosing a JMenu which hovers normally over the part of the image is severely disturbed because the JMenu is overdrawn. Inacceptable and the layout couldn't be changed. I tried the GLJPanel of JOGL but there is no visible performance improvement. So is there a possibitlity to use VolatileImages (or other accerelated lightweighted components like GLCanvas) and still get normal JMenu display and if yes how ? Well I'm not sure if I fully understand your problem but it seems that main problem is with repainting the panel where image is displayed. Should you please provide your drawing routine which draws image on panel?  You could try to set the popups to non-leightweight. I am not quite sure if it works but it could because the popup is a native component then and will not be overdrawn. Setting Popups to heavyweight: JPopupMenu.setDefaultLightWeightPopupEnabled(false) More Information: Mixing heavy and light components  Here is some example code: import javax.swing.*; import java.awt.*; import java.awt.event.WindowAdapter; import java.awt.event.WindowEvent; import java.awt.image.BufferStrategy; import java.awt.image.BufferedImage; import java.awt.image.VolatileImage; import java.io.File; import java.io.IOException; import java.util.Timer; import java.util.TimerTask; public final class FastDraw extends JFrame { private static final transient double NANO = 1.0e-9; private BufferStrategy bs; private BufferedImage frontImg; private BufferedImage backImg; private int PIC_WIDTH PIC_HEIGHT; private Timer timer; public FastDraw() { timer = new Timer(true); JMenu menu = new JMenu(""Dummy""); menu.add(new JMenuItem(""Display me !"")); menu.add(new JMenuItem(""Display me too !"")); JMenuBar menuBar = new JMenuBar(); menuBar.add(menu); setJMenuBar(menuBar); setIgnoreRepaint(true); setVisible(true); addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent evt) { super.windowClosing(evt); timer.cancel(); dispose(); System.exit(0); } }); try { backImg = javax.imageio.ImageIO.read(new File(<insert a jpg picture here>)); frontImg = javax.imageio.ImageIO.read(<here too>)); } catch (IOException e) { System.out.println(e.getMessage()); } PIC_WIDTH = backImg.getWidth(); PIC_HEIGHT = backImg.getHeight(); setSize(PIC_WIDTH PIC_HEIGHT); createBufferStrategy(1); // Double buffering bs = getBufferStrategy(); timer.schedule(new Drawer()020); } public static void main(String[] args) { new FastDraw(); } private class Drawer extends TimerTask { private VolatileImage img; public void run() { long begin = System.nanoTime(); Graphics2D g = (Graphics2D) bs.getDrawGraphics(); GraphicsConfiguration gc = g.getDeviceConfiguration(); if (img == null) img = gc.createCompatibleVolatileImage(PIC_WIDTH PIC_HEIGHT); Graphics2D g2 = img.createGraphics(); do { int valStatus = img.validate(gc); if (valStatus == VolatileImage.IMAGE_OK) g2.drawImage(backImg00null); else { g.drawImage(frontImg 0 0 null); } // volatile image is ready g.drawImage(img050null); bs.show(); } while (img.contentsLost()); } } } Resize the window to make the JMenuBar visible. Try to select a menu point. See?",java performance swing 2d
79891,A,"What is the best testing tool for Swing-based applications? While we try to set up as many unit tests as time allows for our applications I always find the amount of UI-level tests lacking. There are many options out there but I'm not sure what would be a good place to start. What is your preferred unit testing tool for testing Swing applications? Why do you like it? Thanks! related: http://stackoverflow.com/questions/91179/automated-tests-for-java-swing-guis If your target application has custom components I would definitely recommend Marathon to automate your tests. I was given the task of automating an application with several extremely complicated custom components written in-house from the ground up. I went through a review process that lasted two months in which I made the decision on which test tool to use from a list of close to 30 test tools that were available both commercial and FOSS. It was the only test tool that was able to successfully automate our particular custom components; where IBM's Rational Functional Tester Microfocus' TestPartner QF-Test Abbot & FEST failed. I have since been able to successfully integrate the tests with Cruise Control such that they run upon completing each build of the application. A word of warning though: 1) it is rather rough around the edges in the way it handles JTables. I got around this by writing my own proxy class for them. 2) Does not support record/replay of drag-and-drop actions yet. Very interesting informations. Any feedback on http://frankenstein.openqa.org/? Hi Pascal unfortunately Frankenstein wasn't one of those that I did try. I looked at the presentation on the link and I can say that it does look rather similar to Marathon in terms of proxy classes and OGNL-style assertions. Differences: Marathon doesn't appear to have inbuilt threading support or i18n support. Looks interesting.  I can highly recommend QFTest. I have used it for my commercial product and it works very well with almost zero code (my app requires the use java client APIs for some things). It handles identification of swing components well and is pretty tolerant of updates to your GUI - (resizingrepositioning and adding components does not break existing tests). I have done major updates to functionality and have my tests still work. Its expensive but I think it will pay itself off in a couple of months. Before QFTest I tried: 1) Automatedqa - good tool but windows centric and does not understand Swing. Similar to Quick test Pro. 2)UISpec4J - After devoting a solid 50 hour week to this I had issues with fragility and the arcane java code it produced. Using it was just too arduous - trying to debug/update hundreds of lines of java performing a sequence of a dozen GUI operations just did not work for my brain. I ended up avoiding writing tests because it much more complicated than actually writing the app itself!  Consider Marathon (http://www.marathontesting.com/Home.html)--tests are written in Jython so it's easy to write any sort of predicates based on object state.  try pounder : http://pounder.sourceforge.net/  You can try to use Cucumber and Swinger for writing functional acceptance tests in plain english for Swing GUI applications. Swinger uses Netbeans' Jemmy library under the hood to drive the app. Cucumber allows you to write tests like this:  Scenario: Dialog manipulation Given the frame ""SwingSet"" is visible And the frame ""SwingSet"" is the container When I click the menu ""File/About"" Then I should see the dialog ""About Swing!"" Given the dialog ""About Swing!"" is the container When I click the button ""OK"" Then I should not see the dialog ""About Swing!"" Take a look at this Swinger video demo to see it in action.  I had the chance to play around with QF-TEST once. It is commercial but offers a lot of functionality. Maybe you have a look at it: http://www.qftest.de/en/index.html  Not an answer but a refining. Record-and-playback is the wrong thing to want. Teams need the ability to write tests before the code has been written. Otherwise the coders finish their work and wait around while the testers scramble to record tests (interrupted by fixes when they spot issues). In a BDD/TDD/ATDD kind of setup you really need some kind of tool that allows you to script tests for code that hasn't been written yet specifying UI element names and the like. Are there tools that work for non-waterfall testing?  On our side we use to test SWING GUI with FEST. This is an adapter on the classical swing robot but it ease dramatically its use. Combined with TestNG We found it an easy way to simulate ""human"" actions trough the GUI.  I like Jemmy the library written to test Netbeans.",java swing testing
370310,A,"Java get JPanel Components I have a JPanel full of JTextFields... for (int i=0; i<maxPoints; i++) { JTextField textField = new JTextField(); points.add(textField); } How do I later get the JTextFields in that JPanel? Like if I want their values with TextField.getText(); Thanks I've got to say thanks ""nobody"" for removing those apple logos and the ""THANKSSS"" sign off. Well bear in mind they didn't get there by them selves ( I think a read some questions about dynamically creating these panels at runtime ) In the answers posted there someone said you should kept reference to those textfields in an array. That's exactly what you need here: List<JTextField> list = new ArrayLists<JTextField>(); // your code... for (int i=0; i<maxPoints; i++) { JTextField textField = new JTextField(); points.add(textField); list.add( textField ); // keep a reference to those fields. } // Later for( JTextField f : list ) { System.out.println( f.getText() ) ; } Wasn't that easy? Just remember to keep these kinds of artifacts ( list ) as private as possible. They are for your control only I don't think they belong to the interface. Let's say you want to get the array of texts instead of  public List<JTextField> getFields(); You should consider:  public List<String> getTexts(); // get them from the textfields ...   //una forma de recorer todos los elementos dentro de un jpanel Component[] components = jPanelX.getComponents(); for (int i = 0; i < components.length; i++) { if(components[i].getClass().getName().toString().equals(""javax.swing.JTextField"")){ components[i].setEnabled(false); } }  Every JPanel in Java is also an AWT container. Thus you should be able to use getComponents to get the array of contained components in the panel iterate over them check their types (To make sure you didn't get other controls) and do whatever you need with them. However this is generally poor design. If you know that you will need to access specific components it is better to maintain an array of those text fields and pass it around even though they are visually contained within the container. If this is a recurrent task or could be done from multiple points it may even make sense to have a special class representing a panel with text fields that will then provide through its interface means of accessing these fields.",java swing jframe jpanel jcomponent
368194,A,"Java JFrame: howto parse recursively through componets (i.e. if using JScrollPane) I'm using TableLayout for my swing GUI. Initially only some basic labels buttons and text fields where required which I could later on access by: public Component getComponent(String componentName) { return getComponent(componentName this.frame.getContentPane()); } private Component getComponent(String componentName Component component) { Component found = null; if (component.getName() != null && component.getName().equals(componentName)) { found = component; } else { for (Component child : ((Container) component).getComponents()) { found = getComponent(componentName child); if (found != null) break; } } return found; } Unfotunately I ran into issues after using using JScrollPane to support scrolling in JTextArea and JTable's which I did with: JTextArea ta = new JTextArea(); ta.setName(""fooburg""); JScrollPane scr = new JScrollPane(ta); frame.getContentPane().add(scr ""1 1""); // EDIT: changed tkx bruno After suggestions I've been able to access through getComponent(""fooburg"") the desired component (the version above is the final one). Many thanks to Dan and Bruno! You need to add the child to the JFrame's content pane instead: frame.getContentPane().add(comp); If you add your new component to JFrame directly your code above never get's to it because you are only enumerating the components under frame.getContentPane(). tkx bruno I changed the code as you suggested  @bruno is right - you need to add the text pane to the frame's content pane. Slightly OT: If you generally want to access every component in a hierarchy you need something recursive - your current method will only print immediate child names: void printNames(Component component) { System.out.println(component.getName()); for (Component child : component.getComponents()) { printNames(child); } } void printFrameNamesComponents(JFrame frame) { printNames(frame.getContentPane()); } (not tested but something like this.) Thank you Dan I updated the function and implemented it as you suggested. It works fine for textfields & co but not for components embedded in JScrollPane :-(",java swing jscrollpane jtextarea tablelayout
340286,A,"Why do I keep getting a NullPointerException in the Java BasicTableUI$Handler.setValueIsAdjusting? I keep getting this NPE in my application and I can't seem to get rid of it because it is not showing up in any of my source code. As you can see from the stacktrace it is not happening in my code but in the Swing plaf. Has any of you had this problem and maybe figured out what is happening here?  11:28:23273 [AWT-EventQueue-0] ERROR [is.althingi.styran.utlit.styran.StyranImpl] - uncaughtException java.lang.NullPointerException at javax.swing.plaf.basic.BasicTableUI$Handler.setValueIsAdjusting(Unknown Source) at javax.swing.plaf.basic.BasicTableUI$Handler.mouseReleased(Unknown Source) at java.awt.AWTEventMulticaster.mouseReleased(Unknown Source) at java.awt.Component.processMouseEvent(Unknown Source) at javax.swing.JComponent.processMouseEvent(Unknown Source) at java.awt.Component.processEvent(Unknown Source) at java.awt.Container.processEvent(Unknown Source) at java.awt.Component.dispatchEventImpl(Unknown Source) at java.awt.Container.dispatchEventImpl(Unknown Source) at java.awt.Component.dispatchEvent(Unknown Source) at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source) at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source) at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source) at java.awt.Container.dispatchEventImpl(Unknown Source) at java.awt.Window.dispatchEventImpl(Unknown Source) at java.awt.Component.dispatchEvent(Unknown Source) at java.awt.EventQueue.dispatchEvent(Unknown Source) at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source) at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source) at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source) at java.awt.EventDispatchThread.pumpEvents(Unknown Source) at java.awt.EventDispatchThread.pumpEvents(Unknown Source) at java.awt.EventDispatchThread.run(Unknown Source) I never had this particular problem but when I get these kind of ""hidden"" errors I always end up looking the original source code and try to figure out the problem ... From this source you can see the function that originates the exception: private void setValueIsAdjusting(boolean flag) { table.getSelectionModel().setValueIsAdjusting(flag); table.getColumnModel().getSelectionModel(). setValueIsAdjusting(flag); } Can you confirm if your table selection model ; column model ; column selection model aren't null? How could I? There is an NPE in there isn't there? But of course the thing is that I can't seem to figure out why one of those is null because no matter where I put my debugging they are never null!!!!  I managed to get around the problem! The thing is that I add a ListSelectionListener to my JTable; in the valueChanged method of my listener I then call scrollRectToVisible and then updateUI which then results in my exception. What I did was to add invokeLater around the updateUI call and no more exception! Like this:  SwingUtilities.invokeLater(new Runnable() { public void run() { updateUI(); } }); Now that I have the ""answer"" to my question (though I'm not sure I still understand why the invokeLater helped?) I think my question wasn't good enough. I didn't provide enough information about my problem for anyone to be able to answer the question. Should I have researched the problem more before I asked? I don't know. Maybe it is enough that I provide the solution that helped me! When you call invokeLate() you're moving the updateUI() function call to the end of the event queue. My guess is that the updateUI() call was trying to access an object that wasn't created yet but this object is available soon after. I think it should be a bug from LookAndFeel",java swing exception
279781,A,Problems using Graphics with Panels in the Java Swing Library Hey everyone I am trying to run the following program but am getting a NullPointerException. I am new to the Java swing library so I could be doing something very dumb. Either way here are my two classes I am just playing around for now and all i want to do is draw a damn circle (ill want to draw a gallow with a hangman on it in the end). package hangman2; import java.awt.*; import javax.swing.*; public class Hangman2 extends JFrame{ private GridLayout alphabetLayout = new GridLayout(2255); private Gallow gallow = new Gallow(); public Hangman2() { setLayout(alphabetLayout); setSize(1000500); setVisible( true ); } public static void main( String args[] ) { Hangman2 application = new Hangman2(); application.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); } } package hangman2; import java.awt.*; import javax.swing.*; public class Gallow extends JPanel { private Graphics g; public Gallow(){ g.fillOval(10 20 40 25); } } The NullPointerException comes in at the g.fillOval line. Thanks in advance Tomek A couple of things: Don't forget to add the panel to the JFrame. And override the paint() method of JPanel for your custom painting. You do not need to declare a Graphics object since the JPanel's paint method will have a reference to one in any case. package hangman2; import java.awt.*; import javax.swing.*; public class Hangman2 extends JFrame{ private GridLayout alphabetLayout = new GridLayout(2255); private Gallow gallow = new Gallow(); public Hangman2() { setLayout(alphabetLayout); add(gallow BorderLayout.CENTER);//here setSize(1000500); setVisible( true ); } public static void main( String args[] ) { Hangman2 application = new Hangman2(); application.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); } } package hangman2; import java.awt.*; import javax.swing.*; public class Gallow extends JPanel { public Gallow(){ super(); } public void paint(Graphics g){ g.fillOval(10 20 40 25); } } You should override paintComponent not paint  You're getting NPE because g is not set therefore it's null. Furthermore you shouldn't be doing the drawing in the constructor. Overload paintComponent(Graphics g) instead. public class Gallow extends JPanel { public paintComponent(Graphics g){ g.fillOval(10 20 40 25); } } I'd also look into BufferedImage. I see so im guessing the paintComponent is called each time a JPanel is created. Actually it's called each time the component is redrawn. Swing doesn't remember the appearance of each component rather each component is responsible for drawing and redrawing itself as needed.,java swing graphics nullpointerexception panels
116957,A,"Which Layout Manager do you use? What java GUI layout manager does everyone use? Lately I have been using MigLayout which has some powerful component controls. Just wanted to see what other developers are using other than the standard JDK ones. I use GridBagLayout for form like layouts use BorderLayout for simple layouts and FlowLayout for number of horizontal icons/buttons that have some spaces in between. Netbeans is also a good GUI builder that can avoid a lot of tedious layout codings to save your time.  I prefer to minimize dependencies on 3rd party libs so it's usually BoxLayout for dialogs and GridBagLayout for ""complicated"" layouts. GridBagLayout is easy enough to understand but a bit hard to configure. I wrote myself a tool for creating the code from HTML layouts (hope that helps others too): http://www.onyxbits.de/content/blog/patrick/java-gui-building-gridbaglayout-manager-made-easy  Spring layout which was developed for the mantissa gui builder which is part of netbeans. I thought Matisse used GroupLayout. There was a SpringLayout GUI builder in the BDK. I wouldn't recommend it. Internally the GroupLayout implementation does use what it calls springs.  MiG and FormLayout (JGoodies) are both excellent for manual layout (And almost all layout eventually becomes manual). My biggest piece of advice is to design your views so that you can completely rip out the layout and re-implement it without impacting your application (good separation of view and controller is key here). Definitely take a look at JGoodie's PresentationModel approach for implementing 'dumb' views. I use this technique with a GUI builder (I use GroupLayout with the Jigloo GUI builder plugin) for tossing off quick prototypes. After 3 or 4 iterations that usually goes out the window and we do a re-implement using MiG or FormLayout. EDIT: Since I wrote this I have moved to using MiG for all of my layouts and I no longer use a GUI builder - it's just way too easy to lay things out using MiG.  I have started using Swing recently and I am using GridBagLayout.  I use BorderLayout 90% of the time while nesting BoxLayout and SpringLayout  I started off using various nested layouts then moved over to GridBagLayout (which is pretty frustrating). Since then I tried FormLayout (but found it wasn't suited to anything but forms) and settled firmly on TableLayout which overall I'm very happy with. Since then I've discovered MiGLayout and although I haven't done much more than play with it it seems very capable quite similar to TableLayout and probably a little cleaner. The big plus for me is that MiGLayout is set to become part of the JDK so I intend to use it pretty much exclusively when it does. The other thing to remember is that no matter which heavy-weight LayoutManager you settle on there is always a place for some of the simpler layout managers such as GridLayout. I've seen some horrible things done with GridBagLayout that could have been done much more easily with a simpler layout manager.  As a general overview you might find an article I wrote a loooong time ago at sun to be useful. It's not up to date with the latest layout managers but it concentrates on effective nesting of layout managers rather than trying to do everything with one layout. See http://developer.java.sun.com/developer/onlineTraining/GUI/AWTLayoutMgr  I'm a big fan of using TableLayout instead of GridBagLayout. Everything just makes sense whereas every time I try to use GridBagLayout it crushes my soul.  I've found that for any non-trivial GUI I use multiple layouts with nested sub-panels where the main panel may have a GridBagLayout and each sub-panel (typically without a border or indication that it is a panel) uses a simpler layout where possible. Typically I'll use BorderLayout FlowLayout and BoxLayout for smaller simpler sub-panels. By dividing small sections of the GUI into sub-panels and using the simplest layout possible to control that section of the GUI you can create complex well arranged displays without too much headache from GridBagLayout's many options. Also by grouping like display functionality into a panel it creates more readable code.  I was sick of all those layoutmanagers that needed alot of setup werent very readable or exhausting to do manually so I wrote my own very simple laoutmanager which uses the abstraction of two photocorners keeping each component in place. You can add your component like this: parent.add(child""topleft(0 0.5)bottomright(0.51.0)""); Have a look here https://github.com/hageldave/UsefulStuff/blob/master/src/PhotoCornersLayout.java ;) you're responisble for a correct layout yourself though cause it's not checking overlappings or other shortcommings of your layout.  GridBagLayout is usable. Once you get used to using it it works great. I think the standard JDK layout managers are pretty powerful on their own. Plus you get to minimize dependency on 3rd party libraries.  The only layout manager that I have found that I actually like is the Relative Layout Manager. The Relative Layout Manager works in a way that is consistent with how dialog boxes are conceptually organized. One draw-back is that while this layout manager deals with additive constraints. It does not seem to deal with ratio constraints. Fortunately it is pretty well designed and I was able to implement this feature.  I use the GridBagLayout. It seems to take alot of code but it makes very good looking layouts. I also like to combine BorderLayout with GridBagLayout panels for great customizability.  MiGLayout is the GUI layout manager which is widely used by Java Developers. This answer is a bit quick. We would expect justifications pros and cons... What makes MiGLayout so good? i just tried it and it is AWESOME! Just have a look at the website and you will know for sure. No need to justify in words when you can see it in action!! Let's add some pros and cons. The most outstanding feature of MigLayout is probably its debug mode showing the boundaries of cells and components with dotted lines overlaid on the UI. This is vital to understand why a layout goes bad. The cons... well it's not part of the JDK but it's just a 75k dependency. MigLayout is easy to learn and do excatly what you expect. Just print its ""Cheat sheet"". It has nice sample application. It is possible to write readable and changeable layouts. It has useful debug mode. I wrote Swing applications for 2 years. Trust me do not use standard layouts it is paintful way to hell use MigLayout.  I'm a bit of Java newbie. I tried GridBagLayout gave up then tried BoxLayout then gave up then made my own Custom Layout which worked. With GridBag and Box I put my best guess in and the Layout engines decided to do something different without any apparent way to debug them. With my custom layout I could print out coordinates and widths and heights to find out where it was going wrong. Its a bit mathy placing things but you've got the full power of java to use rather than the limited vocabulary of one of the builtin layout managers. Of course it was just for a home project you'd never be allowed to do this at work.  I've always been a big fan of the GridBagLayout. It resembles HTML tables a lot so it is intuitive to those web programmers.  I've used GroupLayout as well. Again its a standard JDK layout manager as of Java6 but you can find the library separate as well.  GridBagLayout is powerful but quite primitively: the code that wires up the layout is very verbose. This utility library (actual just 1 jar file containing about 10 classes) simplifies a lot of works: http://code.google.com/p/painless-gridbag/ The following snippet is quoted from the home page of that site:  PainlessGridBag gbl = new PainlessGridBag(getContentPane() false); gbl.row().cell(lblFirstName).cell(txtFirstName).fillX() .cell(lblFamilyName).cell(txtFamilyName).fillX(); gbl.row().cell(lblAddress).cellXRemainder(txtAddress).fillX(); gbl.doneAndPushEverythingToTop(); This has the advantage you can just copy the 10 classes into your project and not be dependent on a third-party library...  I use DesignGridLayout for most of my panels. For the rare panels that DesignGridLayout cannot fully handle I use a mix of Borderlayout and DesignGridLayout. With DesigngridLayout you can manually code your layouts with a minimum number of lines of code that are easy to type and read: DesignGridLayouut layout = new DesignGridLayout(myPanel); layout.row().grid(lblFirstName).add(txfFirstName).grid(lblSurName).add(txfSurName); layout.row().grid(lblAddress).add(txfAddress); layout.row().center().add(btnOK btnCancel); Each row of the panel grid is defined by one line of code. As you can see ""drawing"" your panel is quite straightforward. In addition I find DesignGridLayout has some unique features (such as its ""smart vertical resize""). Oops I forgot the usual disclaimer: ""I am one of DesignGridLayout project owners"";-)  The last Swing application I worked on used JGoodies' FormsLayout.  I use to go for GridBagLayout for the control but since java1.6 I'm going to use GroupLayout Is awsome. Here an screenshot and sample code to use it!.  private void layoutComponents(){ JPanel panel = new JPanel(); GroupLayout layout = new GroupLayout(panel); panel.setLayout(layout); layout.setAutoCreateGaps(true); layout.setAutoCreateContainerGaps(true); SequentialGroup hGroup = layout.createSequentialGroup(); JLabel nameLbl = new JLabel(""Name""); JLabel countLbl = new JLabel(""Amount""); JLabel dateLbl = new JLabel(""Date(dd/MM/yy)""); hGroup.addGroup(layout.createParallelGroup(). addComponent(nameLbl). addComponent(countLbl). addComponent(dateLbl). addComponent(go)); hGroup.addGroup(layout.createParallelGroup(). addComponent(name). addComponent(count). addComponent(date)); layout.setHorizontalGroup(hGroup); SequentialGroup vGroup = layout.createSequentialGroup(); vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE). addComponent(nameLbl).addComponent(name)); vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE). addComponent(countLbl).addComponent(count)); vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE). addComponent(dateLbl).addComponent(date)); vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE). addComponent(go)); layout.setVerticalGroup(vGroup); frame.add( panel  BorderLayout.NORTH ); frame.add( new JScrollPane( textArea ) ); } I've removed the dead link . . the source code in the link at the end was deleted :-(",java swing layout
246010,A,"Button text in JTable renderer not visible. Why? I have a custom cell renderer set in JTable and it works but instead an ""x"" visible on buttons being table cells I see ""..."" (three dots). What did I miss ??  /*************************************************************************** * Listener reagujący na dodanie nowej wartości **************************************************************************/ private static class ButtonRenderer extends JButton implements TableCellRenderer { /*********************************************************************** * Konstruktor **********************************************************************/ public ButtonRenderer() { super(""x""); } /*********************************************************************** * @see TableCellRenderer#getTableCellRendererComponent(JTable Object * boolean boolean int int) **********************************************************************/ public Component getTableCellRendererComponent(JTable table Object value boolean isSelected boolean hasFocus int row int column) { return this; } } The size of the button isn't large enough to contain the rendered ""x"" plus the padding around it. A solution would be to enlarge the table cell or reduce the padding (always assuming that the button has the same size as the table cell).",java swing jtable tablecellrenderer
311876,A,"JButton expanding to take up entire frame/container Hey everyone. I'm trying to make a swing GUI with a button and a label on it. im using a border layout and the label ( in the north field ) shows up fine but the button takes up the rest of the frame (it's in the center field). any idea how to fix this? Again :)  import javax.swing.*; public class TestFrame extends JFrame { public TestFrame() { JLabel label = new JLabel(""Some info""); JButton button = new JButton(""Ok""); Box b = new Box(BoxLayout.Y_AXIS); b.add(label); b.add(button); getContentPane().add(b); } public static void main(String[] args) { JFrame f = new TestFrame(); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.setLocationRelativeTo(null); f.setVisible(true); } }  Or just use Absolute layout. It's on the Layouts Pallet. Or enable it with : frame = new JFrame(); ... //your code here // to set absolute layout. frame.getContentPane().setLayout(null); This way you can freely place the control anywhere you like.  You have to add the button to another panel and then add that panel to the frame. It turns out the BorderLayout expands what ever component is in the middle Your code should look like this now: Before public static void main( String [] args ) { JLabel label = new JLabel(""Some info""); JButton button = new JButton(""Ok""); JFrame frame = ... frame.add( label BorderLayout.NORTH ); frame.add( button  BorderLayout.CENTER ); .... } Change it to something like this: public static void main( String [] args ) { JLabel label = new JLabel(""Some info""); JButton button = new JButton(""Ok""); JPanel panel = new JPanel(); panel.add( button ); JFrame frame = ... frame.add( label BorderLayout.NORTH ); frame.add( panel  BorderLayout.CENTER); .... } Before/After What's the default LayoutManger on the Panel then? FlowLayout? FlowLayout that's correct.",java gui swing jframe jbutton
213266,A,How do I center a JDialog on screen? How do I go about positioning a JDialog at the center of the screen? In Java 1.4+ you can do: final JDialog d = new JDialog(); d.setSize(200200); d.setLocationRelativeTo(null); d.setVisible(true); Or perhaps (pre 1.4): final JDialog d = new JDialog(); d.setSize(200 200); final Toolkit toolkit = Toolkit.getDefaultToolkit(); final Dimension screenSize = toolkit.getScreenSize(); final int x = (screenSize.width - d.getWidth()) / 2; final int y = (screenSize.height - d.getHeight()) / 2; d.setLocation(x y); d.setVisible(true); what exactly is happening when you setlocation relative to null? Wanted to add that you do need to use setSize() or else the setLocationRelativeTo() will not work. I had to use both setSize() AND setPreferredSize() in order to get everything to look right. very useful. :)) In answer to the question by @marked: If the component is not currently showing or c is null the window is placed at the center of the screen. (from the java.awt.Window javadocs) Note that both of these methods will center the dialog *on the primary monitor* (at least on Windows). Better to pass an argument to `setLocationRelativeTo` so the dialog appears on the appropriate monitor for multi-monitor users.  Two helpers for centering within the screen or within the parent. // Center on screen ( absolute true/false (exact center or 25% upper left) ) public void centerOnScreen(final Component c final boolean absolute) { final int width = c.getWidth(); final int height = c.getHeight(); final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); int x = (screenSize.width / 2) - (width / 2); int y = (screenSize.height / 2) - (height / 2); if (!absolute) { x /= 2; y /= 2; } c.setLocation(x y); } // Center on parent ( absolute true/false (exact center or 25% upper left) ) public void centerOnParent(final Window child final boolean absolute) { child.pack(); boolean useChildsOwner = child.getOwner() != null ? ((child.getOwner() instanceof JFrame) || (child.getOwner() instanceof JDialog)) : false; final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); final Dimension parentSize = useChildsOwner ? child.getOwner().getSize() : screenSize ; final Point parentLocationOnScreen = useChildsOwner ? child.getOwner().getLocationOnScreen() : new Point(00) ; final Dimension childSize = child.getSize(); childSize.width = Math.min(childSize.width screenSize.width); childSize.height = Math.min(childSize.height screenSize.height); child.setSize(childSize); int x; int y; if ((child.getOwner() != null) && child.getOwner().isShowing()) { x = (parentSize.width - childSize.width) / 2; y = (parentSize.height - childSize.height) / 2; x += parentLocationOnScreen.x; y += parentLocationOnScreen.y; } else { x = (screenSize.width - childSize.width) / 2; y = (screenSize.height - childSize.height) / 2; } if (!absolute) { x /= 2; y /= 2; } child.setLocation(x y); }  Use this line after the pack() method: setLocation((Toolkit.getDefaultToolkit().getScreenSize().width)/2 - getWidth()/2 (Toolkit.getDefaultToolkit().getScreenSize().height)/2 - getHeight()/2);  AFAIK you can pass a GraphicEnvironment to each JDialog/JFrame/JWindow constructor. This object describes the monitor to use.  here's my solution to retrieve screen dimension with multiple monitors. import java.awt.*; import javax.swing.JFrame; /** * Méthodes statiques pour récupérer les informations d'un écran. * * @author Jean-Claude Stritt * @version 1.0 / 24.2.2009 */ public class ScreenInfo { /** * Permet de récupérer le numéro de l'écran par rapport à la fenêtre affichée. * @return le numéro 1 2 ... (ID) de l'écran */ public static int getScreenID( JFrame jf ) { int scrID = 1; GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] gd = ge.getScreenDevices(); for (int i = 0; i < gd.length; i++) { GraphicsConfiguration gc = gd[i].getDefaultConfiguration(); Rectangle r = gc.getBounds(); if (r.contains(jf.getLocation())) { scrID = i+1; } } return scrID; } /** * Permet de récupérer la dimension (largeur hauteur) en px d'un écran spécifié. * @param scrID --> le n° d'écran * @return la dimension (largeur hauteur) en pixels de l'écran spécifié */ public static Dimension getScreenDimension( int scrID ) { Dimension d = new Dimension(0 0); if (scrID > 0) { GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); DisplayMode mode = ge.getScreenDevices()[scrID - 1].getDisplayMode(); d.setSize(mode.getWidth() mode.getHeight()); } return d; } /** * Permet de récupérer la largeur en pixels d'un écran spécifié. * @param scrID --> le n° d'écran * @return la largeur en px de l'écran spécifié */ public static int getScreenWidth( int scrID ) { Dimension d = getScreenDimension(scrID); return d.width; } /** * Permet de récupérer la hauteur en pixels d'un écran spécifié. * @param scrID --> le n° d'écran * @return la hauteur en px de l'écran spécifié */ public static int getScreenHeight( int scrID ) { Dimension d = getScreenDimension(scrID); return d.height; } },java swing
102171,A,Method that returns the line number for a given JTextPane position? I'm looking for a method that computes the line number of a given text position in a JTextPane with wrapping enabled. Example: This a very very very very very very very very very very very very very very very very very very very very very very long line. This is another very very very very very very very very very very very very very very very very very very very very very very long line.| The cursor is on line number four not two. Can someone provide me with the implementation of the method: int getLineNumber(JTextPane pane int pos) { return ??? } http://java-sl.com/tip_row_column.html An alternative which works with text fragments formatted with different styles  Try this  /** * Return an int containing the wrapped line index at the given position * @param component JTextPane * @param int pos * @return int */ public int getLineNumber(JTextPane component int pos) { int posLine; int y = 0; try { Rectangle caretCoords = component.modelToView(pos); y = (int) caretCoords.getY(); } catch (BadLocationException ex) { } int lineHeight = component.getFontMetrics(component.getFont()).getHeight(); posLine = (y / lineHeight) + 1; return posLine; } the jtextpane class is capable of supporting variable font sizes this method WILL fail on that scenario.,java gui swing jtextpane
419157,A,Is there a simple way to remove a TimeSeries from a displayed JFreeChart Chart? I have a Swing application which uses JFreeChart to display one of a series of queries. Some of these queries have a composite TimeSeries key. Each component of this key can contain a few values but when rendered makes a very noisy graph. I would like a simple way for the users to hide/show some of the TimeSeries in the displayed Chart component. It looks like the setSeriesVisible method of AbstractRenderer is what you're looking for. Although this forum discussion suggests that it may only work in the latest release but there's a work around for earlier releases. The setSeriesVisible method was not one hundred percent of my answer but you came close. I also needed to query the displayed chart to find out which series contained the key or key components I needed to hide.  I'm not quite sure what you mean but if you want to keep item shapes apart have a look at the AnalysisXYItemRenderer class (or corresponding). There's a transXDiff there that can be used for such calculations (such as accumulating the diff and only show plot shapes when that accumulated value reaches a limit). It was a couple of years ago I did this so things might have changed in JFreeChart since then.,java gui swing jfreechart lazyweb
460978,A,"Changing ""Favorites"" Tooltip in Java Help In my helpset file I'm declaring a favorites view using <view> <name>Lesezeichen</name> <label>Lesezeichen</label> <type>javax.help.FavoritesView</type> <data></data> </view> This automatically adds an appropriate button to the toolbar (in the swing application). Unfortunately the tooltip of the button reads ""Add to favorites"". I would like to replace this by my own text but didn't find anything about this in the documentation or using a google search. Any ideas or pointers? Disclaimer: I already posted this question to JavaRanch didn't get an answer yet though. If you extract the src.jar (rename it to src.zip and extract) and open the java class jh2.0/src/src/javax/help/resources/Constants.java you will notice that in the section // Tooltips for Actions is located entry for localization: { ""tooltip.FavoritesAction"" ""Add to Favorites""} This constant is missing from the jh2.0/src/src/javax/help/resources/Constants_de.java which is used in your case. Just add the right translation compile the source or just this class and add it to the jh.jar (you may treat the jar as a simple zip archive) Yes I know this is dirty hack but generally JavaHelp is quite useful  Now this sounds weird. The ResourceBundle mechanism supports to ""override"" the class resource content by using a .properties file with the resource bundle. Try placing the looked up resource bundle as a properties file in the respective folder denoted by the bundle name. E.g. if HelpUtilities looks after javax.help.resources.Constants by calling ResourceBundle.getBundle(""javax.help.resources.Constants"" locale); you'd be placing your file in a folder structure at /javax/help/resources/Constants_de_DE.properties. This must be located in your applications ""working directory"".",java swing tooltip javahelp
482029,A,"How can a JComponent notified about the closed event of it's parent J(Internal)Frame? I want to write a component that monitors other activities but it's listeners are to be removed when the component's window is closed. I don't want to write this removal code many times but want the component to handle it itself. (How) can i do it? Thanks! Can you explain what you mean by ""write this removal code many times"" and ""component to handle itself""? I would write something like that class ListenToWindow extends WindowAdapter { MyInternalFrame frame; public void windowClosed(event) { this.frame.removeAllTheRequiredListeners(); } } (...) JFrame window; MyInternalFrame frame; (...) window.addWindowLister(new ListenToWindow(frame)); (...)  The JFrame class (which is the window) has a processWindowEvent callback that takes a single parameter called Windowevent Register this callback and if the parameter is of WINDOW_CLOSED you can call the removal code inside. In the end the removal code is only written once (as you want it). See the API for more details. Update: See also this How can i put this listener when i'm writing a component? I dont't have reference to the JFrame only to the parent component. You pass the JFrame reference of your application in the construction of your custom component and store it in a private variable inside the class of your component. okay maybe that's the way it should be done. i just hoped we have a way obtaining the jframe or something as your comment precedes Pierre's code you got the point",java swing components listeners
85548,A,"How to make Swing scroll with ""ensureIndexIsVisible""? When I run this code the selected item is not visible. I've already tried to run it in a separate thread with no luck. import javax.swing.JFrame; import java.awt.Container; import javax.swing.JList; import javax.swing.ListSelectionModel; import javax.swing.JScrollPane; import java.awt.Dimension; public class ScrollList extends JFrame { int defaultValue; ScrollList() { Container cp = getContentPane(); JList list = createList(); defaultValue = 20; cp.add(createScrollPane(list)); pack(); setVisible(true); list.ensureIndexIsVisible(defaultValue); } JList createList() { Integer[] model = new Integer[73]; JList list = new JList(model); for (int i = 1; i < model.length; i++) model[i] = i; list.setSelectedIndex(defaultValue); return list; } JScrollPane createScrollPane(JList list) { JScrollPane s = new JScrollPane(createList()); s.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); s.setPreferredSize(new Dimension(100 200)); return s; } public static void main(String[] args) { new ScrollList(); } } I figured it out!! This is the code: import javax.swing.JFrame; import java.awt.Container; import javax.swing.JList; import javax.swing.ListSelectionModel; import javax.swing.JScrollPane; import java.awt.Dimension; public class ScrollList extends JFrame { final int defaultValue = 20; ScrollList() { setDefaultCloseOperation(DISPOSE_ON_CLOSE); Container cp = getContentPane(); JList list = createList(); cp.add(createScrollPane(list)); pack(); list.ensureIndexIsVisible(list.getSelectedIndex()); setVisible(true); } JList createList() { Integer[] model = new Integer[73]; JList list = new JList(model); for (int i = 1; i < model.length; i++) model[i] = i; list.setSelectedIndex(defaultValue); return list; } JScrollPane createScrollPane(JList list) { JScrollPane s = new JScrollPane(list); // MAJOR FIX HERE! s.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); s.setPreferredSize(new Dimension(100 200)); return s; } public static void main(String[] args) { new ScrollList(); } } Instead of using the list that you passed into the createScrollPane() method you create a new one. :) Now I ask myself why this error? Too many hours of hacking. Thanks! Ha it took me a bit to find. Until I decided to carefully debug the code in Eclipse.",java swing
331488,A,"Can Swing tell me if there is an active tooltip? Is there an elegantish way in Swing to find out if there are any tooltips currently being displayed in my frame? I'm using custom tooltips so it would be very easy to set a flag in my createToolTip() method but I can't see a way to find out when the tooltip is gone. ToolTipManager has a nice flag for this tipShowing but of course it's private and they don't seem to offer a way to get to it. hideWindow() doesn't call out to the tooltip component (that I can tell) so I don't see a way there. Anyone have any good ideas? Update: I went with reflection. You can see the code here: private boolean isToolTipVisible() { // Going to do some nasty reflection to get at this private field. Don't try this at home! ToolTipManager ttManager = ToolTipManager.sharedInstance(); try { Field f = ttManager.getClass().getDeclaredField(""tipShowing""); f.setAccessible(true); boolean tipShowing = f.getBoolean(ttManager); return tipShowing; } catch (Exception e) { // We'll keep silent about this for now but obviously we don't want to hit this // e.printStackTrace(); return false; } } It looks like that is going to require looping over all of the components to see if they have a tooltip. I'm looking for a global value. It may be that a loop is doable but it seems inefficient.  It appears that the isEnabled() property of the hideTipAction is directly tied to the tipShowing boolean. You could try this: public boolean isTooltipShowing(JComponent component) { AbstractAction hideTipAction = (AbstractAction) component.getActionMap().get(""hideTip""); return hideTipAction.isEnabled(); } You probably want to do some sanity checking for nulls etc. But this should get you pretty close. EDIT to your responses: Short of some ugly reflection code I don't think you have much choice. You cannot subclass ToolTipManager because of the package private constructor and the showTipWindow() and hideTipWindow() are also package private so the Adapter pattern is out as well.  That's too bad. After an internal discussion ""ugly reflection"" was what we came up with as well but I was hoping someone out there had a better idea.  Since you already have your own createToolTip() maybe you can try something like this :) public JToolTip createToolTip() { JToolTip tip = super.createToolTip(); tip.addAncestorListener( new AncestorListener() { public void ancestorAdded( AncestorEvent event ) { System.out.println( ""I'm Visible!..."" ); } public void ancestorRemoved( AncestorEvent event ) { System.out.println( ""...now I'm not."" ); } public void ancestorMoved( AncestorEvent event ) { // ignore } } ); return tip; }",java swing
139088,A,JFrame.setDefaultLookAndFeelDecorated(true); when i use setDefaultLookAndFeelDecorated(true) method in Java why is the Frame appear FullScreen when i maximize the Frame ? and how can i disaple the FullScreen mode in this method ? It's an old and annoying bug. Setting setDefaultLookAndFeelDecorated to true causes the decorations to be handled by the look and feel; this means that a System look-and-feel on both Windows and Mac (I have no Linux at hand now) retains the borders you would expect them of a native window e.g. staying clear of the taskbar in Windows. When using the Cross Platform look-and-feel a.k.a. Metal which is the default on Windows the Windows version will take over the entire screen making it look like a full-screen window. On Mac the OS refuses to give away its own titlebar and draws a complete Metal frame (including the title bar) in a Mac-native window. So in short if you want to make sure the taskbar gets respected use the Windows system look-and-feel on Windows. You can set it by using something like UIManager.setLookAndFeel((LookAndFeel) Class.forName(UIManager.getCrossPlatformLookAndFeelClassName()).newInstance());  If you don't want your JFrame to be maximize-able then then call .setResizable(false); on it. no  i want it to be maximize-able but i don't want it Full Screen,java gui swing
138533,A,"Java Swing: Ctrl+F1 does not work globally but each other key combination I have a swing gui with a tabbed pane in the north. Several key events are added to its input map: InputMap paneInputMap = pane.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT); paneInputMap.put( KeyStroke.getKeyStroke( KeyEvent.VK_E KeyEvent.CTRL_MASK ) ""finish""); paneInputMap.put( KeyStroke.getKeyStroke( KeyEvent.VK_F1 KeyEvent.CTRL_MASK ) ""toggletoolbar""); If the tabbed pane or another button in a toolbar has the focus Ctrl+F1 has no function. If another component is focused (e.g. JTree) Ctrl+F1 executes the action. The problem is that it workes everywhere if I change the Keycode to e.g. VK_F2. The key F1 is'nt used anywhere else in the program. Any idea? Thanks André Edit: A full text search in the java source code gave the answer: The ToolTipManager registeres the Key Ctrl+F1 to display the tooltip text if the key combination is pressed. So if a button with a tooltip is focused Ctrl+F1 is handled by the ToolTipManager. Otherwise my action is called. So that this gets an answer here's the solution copied from your edit in the question. ;-) The ToolTipManager registeres the Key Ctrl+F1 to display the tooltip text if the key combination is pressed. So if a button with a tooltip is focused Ctrl+F1 is handled by the ToolTipManager. Otherwise my action is called. LOL answer is accepted ;)  May be the OS retargets the F1 key? Install a key listener and see what events are handled. BTW: It would help if you could edit your question and insert some testable code. Thanks for your answer. After a long time of searching the java-code if found the answer (see edit). The used OS only handles key events with ALT pressed ;)",java swing keyevent
485530,A,"How could I implement autocompletion using Swing? I'm interested in providing an autocompletion box in a JFrame. The triggering mechanism will be based on mnemonics (I think) but I'm not really sure what to use for the ""autocompletion box"" (I would like results to be filtered as the user presses keys). How would you implement this? Some sort of JFrame or a JPopupMenu? I would like to know how this is implemented so please don't post links to available [J]Components. Please post your solution when you got it. Ok Oscar  I will. Also see [this](http://stackoverflow.com/questions/15219625/how-would-be-implements-autosugesion-in-jtextarea-swing/15220056#15220056) similar answer You can use JEdit's textarea with built-in completion & syntax highlighting framework. A more heavyweight solution (that is good on the long term) is use NetBeans Platform.  import java.awt.; import java.awt.event.; import javax.swing.*; public class Autocompleter2 { //~ Methods ------------------------------------------------------------------------------------ public static void main(String[] args) throws Exception { // YES IT'S EMPTY !!! // It'll start anyway because of static initializers SwingUtilities.invokeLater(new Runnable() { @Override public void run() { final JPopupMenu textPopupMenu = new JPopupMenu(""MENU"") { { add(new JMenuItem(""item 1"")); add(new JMenuItem(""item 2"")); setFocusable(false); } }; final JTextArea textInput = new JTextArea(""type something la"") { { setCaretPosition(getText().length()); } }; KeyListener textInputListener = new KeyAdapter() { @Override public void keyTyped(KeyEvent e) { Point p = textInput.getCaret().getMagicCaretPosition(); if (textPopupMenu.isVisible()) { SwingUtilities.convertPointToScreen(p textInput); textPopupMenu.setLocation(p.x p.y + 20); } else { textPopupMenu.show(textInput p.x p.y + 20); } } }; textInput.addKeyListener(textInputListener); new JFrame(""TEST"") { { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); add(textInput); setSize(400 60); setLocationRelativeTo(null); setVisible(true); } }; } ; }); } }  You might want to try the free AutoComplete component over at SwingLabs. http://swinglabs.org Edit: This site seems to have moved http://java.net/projects/swinglabs There is an example how to implement this code at: http://download.java.net/javadesktop/swinglabs/releases/0.8/docs/api/org/jdesktop/swingx/autocomplete/package-summary.html Notice that the swinglabs site now appears empty. However there is https://swinglabs.dev.java.net which gives access to the sources. Furthermore the project seems to be avaiable via maven like http://www.mvnbrowser.com/artifact-details.html?groupId=org.swinglabs&artifactId=swingx&version=0.9.5-2&tab=VERSIONS#tabs indicates. It is also available on Maven Central http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.swinglabs.swingx%22  There is an example for auto-completion for text area at Sun's tutorials ""Using Swing Components"". It is done in the style of word processors (no pop ups but the suggested text is typed ahead of the cursor). Just scroll down to ""Another Example: TextAreaDemo"" ant hit the Launch button! The link is as of today broken. The link does work again. I think Oracle reversed the decision to break forwarding from sun.com URLs.  And once more but with pop-ups as you wanted. You can also launch it the button is on the bottom of the page. God bless Java Webstart Or here my simplified version. Very simple but sadly here you have to click the text field first before start typing or you get exceptions. Perhaps you could figure out what's wrong... import java.awt.*; import java.awt.event.*; import javax.swing.*; public class _Autocompleter { private final static JPopupMenu textPopupMenu = new JPopupMenu(""MENU"") { { add(new JMenuItem(""item 1"")); add(new JMenuItem(""item 2"")); setFocusable(false); } }; private final static KeyListener textInputListener = new KeyAdapter() { @Override public void keyTyped(KeyEvent e) { Point p = textInput.getCaret().getMagicCaretPosition(); if (textPopupMenu.isVisible()) { SwingUtilities.convertPointToScreen(p textInput); textPopupMenu.setLocation(p.x p.y + 20); } else { textPopupMenu.show(textInput p.x p.y + 20); } } }; private final static JTextArea textInput = new JTextArea(""type something"") { { addKeyListener(textInputListener); setCaretPosition(getText().length()); } }; private final static JFrame f = new JFrame(""TEST"") { { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); add(textInput); setSize(400 60); setLocationRelativeTo(null); setVisible(true); } }; public static void main(String[] args) throws Exception { // YES IT'S EMPTY !!! // It'll start anyway because of static initializers } } Ah! I've figured out what's wrong! 1) Just ignore the caret position when the text field is empty! 2) Use instead of KeyListener something such as UndoableEditListener.  You can use this library: http://fifesoft.com/autocomplete/  I would add a actionListener so you can get each key as it is pressed. You can can then do a search in the background (another thread) The component to which you will be providing auto-completion. But  to what component would you add the ActionListener ? `DocumentListener` is better option for auto-complete `JTextField`.  Here is a great article that uses a couple of libraries: Adding Auto-Complete Support to Swing Comboboxes @Java.net",java swing autocomplete
417480,A,Hide certain actions from Swing's undo manager I am trying to write a JTextPane which supports some sort of coloring: as the user is typing the text I am running some code that colors the text according to a certain algorithm. This works well. The problem is that the coloring operations is registered with the undo manager (a DefaultDocumentEvent with EventType.CHANGE). So when the user clicks undo the coloring disappears. Only at the second undo request the text itself is rolled back. (Note that the coloring algorithm is somewhat slow so I cannot color the text as it is being inserted). If I try to prevent the CHANGE events from reaching the undo manager I get an exception after several undo requests: this is because the document contents are not conforming to what the undoable-edit object expects. Any ideas? I can only assume how you are doing the text colouring. If you are doing it in the StyledDocuments change character attribute method you can get the undo listener and temporarily deregister it from the document for that operation and then once the colour change has finshed then you can reregister the listener. Should be fine for what you are trying to do there. hope that helps  You could intercept the CHANGE edits and wrap each one in another UndoableEdit whose isSignificant() method returns false before adding it to the UndoManager. Then each Undo command will undo the most recent INSERT or REMOVE edit plus every CHANGE edit that occurred since then. Ultimately I think you'll find that the styling mechanism provided by JTextPane/StyledDocument/etc. is too limited for this kind of thing. It's slow it uses too much memory and it's based on the same Element tree that's used to keep track of the lexical structure of the document. It's okay (I guess) for applications in which the styles are applied by the user like word processors but not for a syntax highlighter that has to update the styles constantly as the user types. There are several examples out there of syntax-highlighting editors based on custom implementations of the Swing JTextComponent View and Document classes. Some like JEdit re-implement practically the whole javax.swing.text package but I don't think you need to go that far.  How are you trying to prevent the CHANGE events from reaching the undo manager? Can you not send the UndoManager a lastEdit().die() call immediately after the CHANGE is queued?  I have just been through this problem. Here is my solution: private class UndoManagerFix extends UndoManager { private static final long serialVersionUID = 5335352180435980549L; @Override public synchronized void undo() throws CannotUndoException { do { UndoableEdit edit = editToBeUndone(); if (edit instanceof AbstractDocument.DefaultDocumentEvent) { AbstractDocument.DefaultDocumentEvent event = (AbstractDocument.DefaultDocumentEvent) edit; if (event.getType() == EventType.CHANGE) { super.undo(); continue; } } break; } while (true); super.undo(); } @Override public synchronized void redo() throws CannotRedoException { super.redo(); int caretPosition = getCaretPosition(); do { UndoableEdit edit = editToBeRedone(); if (edit instanceof AbstractDocument.DefaultDocumentEvent) { AbstractDocument.DefaultDocumentEvent event = (AbstractDocument.DefaultDocumentEvent) edit; if (event.getType() == EventType.CHANGE) { super.redo(); continue; } } break; } while (true); setCaretPosition(caretPosition); } } It is an inner class in my custom JTextPane so I can fix the caret position on redo.,java swing undo
326307,A,"Looking for recommendations on open-source Java instrument visualization components I am putting together an Java application that needs to display some basic lab instrument components. For example I'd like to display: a strip chart oscilloscope-style trace and a panel meter (galvanometer needle). Rendering requirements are open (as long as the engine is free and generally available). Any suggestions? Take a look at JFreeChart. We've implemented a couple of strip chart applications with it. Offhand I'm not sure about an oscilloscope type trace you'd have to look into it. It does look like there is a meter-like capability. Cool. I had looked at JFreeChart before but didn't see anything anything like ""Strip Chart"" or ""Chart Recorder"" in the API. I see now that it is a ""Dynamic Chart"". I also see the meter-like charts. I'm thinking I might be able to hammer something into an oscilloscope trace with JFreeChart. Thx  I've never used this myself so I cannot say how good it is but I came across these tools some time ago. DART Visualization tools. They use an open source license. Maybe there is something in there to help you.",java gui swing open-source widget
320043,A,"Gui - Best way to navigate between windows? I try to build a gui (Swing) for a simple java application. The application should have a start window like a menu. From there I would like to navigate to several other windows. My question is what is the best-practice to achieve such a navigation? Should I build several JFrames and switch the visibility of them on/off when navigating OR should I better have one JFrame and add/remove JPanels in this single frame to navigate between the windows? Thanks. If each of your windows correspond to different task (possibly nested) you could present your application as a SDI with on the left a task panel like: Each of the task would display one JFrame with the associated window. Other solution: a table of content like this picture on the left side (note: it actually also displays a task panel in this example on the bottom right) @WChargin one from an old (2007) project 'l2fprod': http://www.l2fprod.com/common/learn.php What LaF is the first screenshot using?  Multiple JFrames sounds like a better idea to me. Much more OO.  You must find a balance between these goals: Not too many things in one ""window"" The user must quickly be able to find the correct window to do the next step of work All relevant information must be visible at any time Eclipse solves this by creating many small editors where each editor shows some specific information and allows to modify it. Editors are then arranged within one OS window in tabs and ""views"". A view is always completely visible and they can be arranged. Think of a view as a way to cut an existing editor in half (horizontal or vertical) and then being able to replace one of the halves with another editor. Between each half you have a splitter so you can adjust the sizes. Arrangements of views are then saved in ""perspectives"". This allows every user to create a perspective which contains all the necessary editors at the same time arrange them as they need it and work effectively.  I recommend Do not do a MDI application with sub-frames like those found in the old Windows days. They suck as they make the matter confusing. Do design a tabbed interface. The welcome page/menu will be displayed on a first tab that is always created on the start. All cool kids do that nowadays: Visual Studio Eclipse Firefox",java gui swing
104373,A,"Mac OS X Java Swing Buttons are Disabled for no aparent reason I wrote an application in Java and when it runs on one customer's computer running OS X The Save and Export buttons are disabled. (Everything else works in the application.) Both of these buttons open up a standard save file dialog. Any ideas? Are the save & Export buttons something you wrote? The Export button doesn't sound familiar for any dialogs I know. I just implemented JButtons that when pressed open the standard Save diablog. I think we need more information to answer your question. do you have any example code? You aren't doing any setEnabled/isEnabled things property listeners or anything else to determine the state of your buttons? This was caused by misinformation recieved from the customer. Turns out the customer was trying to save to a location where files can't be saved on his/her hard drive.  The fact that these buttons open a file dialog probably has nothing to do with it being disabled. Buttons can end up being disabled for a number of reasons its setEnabled can be called with false when using an action its setEnabled can be called with false and when using an action it can have a property ""enabled"" that potentially disables it; see Action for more information there's a list of properties there. Could you post how you 'implemented the JButtons'? Could you expand on when using an action it can have a property ""enabled"" that potentially disables it.? I'll post implementation later today when I have code in front of me.  A stab in the dark but most macs are still running Java 1.5; check if your current code misbehaves with Java 1.5 on your end. Maybe that's where you problem lies.",java osx swing button
359993,A,"Is there a tool or framework to Generate a CRUD UI in Swing? I am looking for a tool/framework to (automatically) generate a Swing user interface to perform CRUD operations on an underlying database. I would also like to configure the database fields that should be exposed. Something like django (via modelforms) or ruby on rails features but in a Java desktop environment. NetBeans does seem like an obvious answer. These guys make a NetBeans plugin that does just that: http://www.morelisland.com/java_services/netbeans_tutorial/midbmetadata_se.htm I've heard jgoodies does something similar: http://www.jgoodies.com/products/index.html And more specifically their sub-project Binding: https://binding.dev.java.net/ I know less about the SwingLabs databinding project but it looks worth looking into: https://databinding.dev.java.net/ Thank you lets see if other people send alternative approaches before setting your answer as accepted.  I'm using Netbeans (latest). I guess it's far from Django (haven't tried it but as far as I understand it is kind of rails/symfony-like) but it does reverse engineer the database and give you a basic application including a master/detail view.  Have a look at tools like: MetaWidget http://www.metawidget.org/ ISIS http://incubator.apache.org/isis/index.html (previously Naked Objects) They generate UI's ""on-the-fly"" but allow you to customise the UI when necessary. Much better than code generation.",java swing user-interface crud
32519,A,"List in JScrollPane painting outside the viewport I have a list each item of which has several things in it including a JProgressBar which can be updating a lot. Each time one of the items updates its JProgressBar the ListDataListener on the list tries to scroll it the visible range using /* * This makes the updating content item automatically scroll * into view if it is off the viewport. */ public void contentsChanged(final ListDataEvent evt) { if (!EventQueue.isDispatchThread()) { /** * Make sure the scrolling happens in the graphics ""dispatch"" thread. */ EventQueue.invokeLater(new Runnable() { public void run() { contentsChanged(evt); } }); } if (playbackInProgress) { int index = evt.getIndex0(); currentContentList.ensureIndexIsVisible(index); } } Note that I'm trying to make sure the scrolling is done in the dispatch thread since I thought maybe the problem was it being scrolled while it was repainting. And yet I still have a problem where if things are really active some of the list items paint outside of the viewport overwriting what's outside the JScrollPane. Forcing an exposure event will repaint those things but it's annoying. Is there anything else I need to look out for to stop these things painting outside of their clipping area? Have you tried explicitly enabling double-buffering on the JList and/or the components that it is drawing over? (with:setDoubleBuffered(boolean aFlag)) Another thought is that you might need to exit the function immediately after delegating to the EDT. The way your code is written it looks like the update will happen in both threads if ContentChanged is invoked from a non-EDT thread. Logging in the first if (or set a breakpoint in the if -- but not in the runnable -- should help determine if that is your problem. eg: public void contentsChanged(final ListDataEvent evt) { if (!EventQueue.isDispatchThread()) { log.debug(""Delegating contentsChanged(...) to EDT""); EventQueue.invokeLater(new Runnable() { public void run() { contentsChanged(evt); } }); // don't run ensureIndexIsVisible twice: return; } if (playbackInProgress) { int index = evt.getIndex0(); currentContentList.ensureIndexIsVisible(index); } }",java swing
320204,A,"How to access multiple JPanels inside JFrame? I have a JFrame that contains a ""display"" JPanel with JTextField and a ""control"" JPanel with buttons that should access the contents of the display JPanel. I think my problem is related on how to use the observer pattern which in principle I understand. You need to place listeners and update messages but I don't have a clue where to put these how to get access from one panel to the other and maybe if necessary to introduce a ""datamodel"" class. For example I want to access the contents of the JTextField from the control panel and I use an anonymous action listener as follows:  JButton openfile = new JButton(""Convert file""); openfile.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { openButtonPressed(); } } ); It does make the code cleaner if you create the models in one layer and add a layer or two above to create the components and layout. Certainly do not extend the likes of JFrame and JPanel. Do not feel the need to make the composition hierarchy in the model layer exactly match the display. Then it's just a matter of taking the text from the Document and performing the relevant operation. Okay perhpas not that simple. Swing models are a little bit messy. In particular ButtonModel is brain damaged and the controller area of code might not be entirely pure.  We have so called builders which will build the parent panel out of the children. In this builder you will have access to all the subcomponents you need to listen to and can thus can implement any logic there. Finally the builder will then return the parent panel with the complete logic. Once you've got the parent panel it's really a mess getting to the child components and have them do anything.  thanks. I added a datamodel layer which handles somehow the communication between the panels. I also found this link on Listeners on JTextField usefull: link text  You need to reduce the coupling between these objects. You can have a master object that owns all the text fields and the button ( the panels are irrelevant ) Then a separete actionlistener within that master object ( I call it mediator see mediator pattern ) That action listener performs a method on the mediator which in turn take the values from the textfields and create perhaps a transfer object. This way you reduce the coupling between the panels textfields etc. and let the control in one place ( the mediator ) that is you don't let them know each other. You can take a look at the code in this question: http://stackoverflow.com/questions/324554/#324559 It shows these concepts in running code. BTW the observer pattern is already implemented in the JTextField JButton ActionListener etc. You just need to add the hooks. I hope this helps. EDIT Joined two answers into one. This is the code. class App { // this is the mediator // GUI components. private JFrame frame; private JTextField name; private JTextField count; private JTextField date; // Result is displayed here. private JTextArea textArea; // Fired by this button. private JButton go; private ActionListener actionListener; public App(){ actionListener = new ActionListener(){ public void actionPerformed( ActionEvent e ){ okButtonPressed(); } }; } private void okButtonPressed(){ // template is an object irrelevant to this code. template.setData( getData() ); textArea.setText( template.getTransformedData() ); } public void initialize(){ frame = new JFrame(""Code challenge v0.1""); frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); name = new JTextField(); count = new JTextField(); date = new JTextField(); textArea = new JTextArea(); go = new JButton(""Go""); go.addActionListener( actionListener ); // prepare the button. layoutComponents(); // a lot of panels are created here. Irrelevant. } } Complete and running code can be retrieved here: It is important to favor composition over inheritance when possible.",java design-patterns swing controller jpanel
239424,A,How do events work in Java Swing? How does the event creation and handling work in Java Swing? Do you mean in general or just in Swing? Generally events are handled by registering a callback function with the class that would raise the event. When the event occurs that class will call the callback function. You will find a lot of examples from swing. Here is a non-swing example from a chat application i made some time back This was a library that would let the developer embed chat capabilities to their apps. The ChatClient class has a member of IMessageListener type IMessageListener listener; Afer creating the object for the ChatClient class the user will call setListener on the object. (Could be addListerer for multiple listeners) public void setListener(IMessageListener listener) { this.listener = listener; } And in the library method when a message is recieved i would call the getMessage method on that listener object This was a basic example. More sophisticated libraries would use more complex methods like implementing event queues threading concurrency etc. Edit: And Yes. this is the observer pattern indeed  The java event mechanism is actually an implementation of the Observer design pattern. I suggest you do alittle reading on the observer pattern this will give you a lot of insight on how the event mechanism in Java works. See observer pattern on Wikipedia  There's a tutorial on eveng handling here: http://java.sun.com/docs/books/tutorial/uiswing/events/index.html It's about Swing. If that doesn't work maybe you could be a bit more specific?,java swing events
479523,A,"Java: Swing --> Maximize window I'm putting together a quick and dirty animation using swing. I would like the window to be maximized. How can I do that? Something like this.setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH); import java.awt.*; import javax.swing.*; public class Test extends JFrame { public Test() { GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment(); this.setMaximizedBounds(env.getMaximumWindowBounds()); this.setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH); } public static void main(String[] args) { JFrame.setDefaultLookAndFeelDecorated(true); Test t = new Test(); t.setVisible(true); } } +1 Maximizes except for taskbar. Very helpful. What is the `|` for? Does it do one and if that fails it does the other? Or are you indicating programmer choice (I.e. pick one of A|B to go in this call?) I've not seen this syntax before. @Pureferret it is the ""bitwise inclusive OR"" operator which copies a bit if it exists in either operand. (http://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html or http://www.tutorialspoint.com/java/java_basic_operators.htm)  How about JFrame.setExtendedState(JFrame.MAXIMIZED_BOTH)?  Provided that you are extending JFrame: public void run() { MyFrame myFrame = new MyFrame(); myFrame.setVisible(true); myFrame.setExtendedState(myFrame.getExtendedState() | JFrame.MAXIMIZED_BOTH); } It is a bad practice to access static field through an instance. Use `JFrame.MAXIMIZED_BOTH` instead. @nimcap: You are correct I've edited the answer. Huge massive bug and issues with the above! (Well okay fine minor warnings with no major consequence...) Should be Frame.MAXIMIZED_BOTH not JFrame.MAXIMIZED_BOTH! :) Why do you call setVisible(true) first? Is it significant? It also works fine without (ubuntu). Without `setVisible(true)` first the frame is not sized correctly. I tried it both before and after `setExtendedState()` and `setVisible()` must be first. @Crusader Absolutely no issue here actually since both refer to the same constant field (`JFrame` inherits from `Frame`). @AvrDragon After experimentation I discovered that it must the the LAST frame.setVisible(). For example if I already have a frame.setVisible() just plonking another one before the maximizing line of code for the purposes of making it work won't work.  If your using a JFrame try this JFrame frame = new JFrame(); //... frame.setExtendedState(JFrame.MAXIMIZED_BOTH);  This page may provide some help JFrame maximisation  i like this version: import java.awt.Dimension; import java.awt.GraphicsConfiguration; import java.awt.Toolkit; import javax.swing.JFrame; public class Test { public static void main(String [] args) { final JFrame frame = new JFrame(); final GraphicsConfiguration config = frame.getGraphicsConfiguration(); final int left = Toolkit.getDefaultToolkit().getScreenInsets(config).left; final int right = Toolkit.getDefaultToolkit().getScreenInsets(config).right; final int top = Toolkit.getDefaultToolkit().getScreenInsets(config).top; final int bottom = Toolkit.getDefaultToolkit().getScreenInsets(config).bottom; final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); final int width = screenSize.width - left - right; final int height = screenSize.height - top - bottom; frame.setResizable(false); frame.setSize(widthheight); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } }",java swing maximize-window
423524,A,"how to control focus in JTable What I want to do is when user finish editing of data in table cell to move focus onto another cell depending of what user entered and to turn that cell into editing mode so user can start typing immediately with no additional action. This way user can focus on his work and software will do the 'thinking' about which cell should be edited next. Simple task which does not look so simple in real life ... anyone some idea? Please try this example. It should let you navigate through the table by entering the values u d l r for Up Down Left Right. Hope that this will give you an idea about how to do it. import java.awt.event.ActionEvent; import javax.swing.AbstractAction; import javax.swing.Action; import javax.swing.JFrame; import javax.swing.JTable; import javax.swing.KeyStroke; import javax.swing.table.DefaultTableModel; import javax.swing.table.TableModel; public class Test extends JFrame { private JTable table; private TableModel tableModel; public Test() { tableModel = new DefaultTableModel(5 5); table = new JTable(tableModel); table.setColumnSelectionAllowed(true); getContentPane().add(table); Action handleEnter = new AbstractAction() { public void actionPerformed(ActionEvent e) { table.getCellEditor().stopCellEditing(); // store user input int row = table.getSelectedRow(); int col = table.getSelectedColumn(); String val = String.valueOf(table.getValueAt(row col)).toLowerCase(); if (val.equals(""u"")) --row; else if (val.equals(""d"")) ++row; else if (val.equals(""l"")) --col; else if (val.equals(""r"")) ++col; if ( row >= 0 && row < tableModel.getRowCount() && col >= 0 && col < tableModel.getColumnCount()) { table.changeSelection(row col false false); table.editCellAt(row col); } } }; // replace action for ENTER since next row would be selected automatically table.getInputMap().put(KeyStroke.getKeyStroke(""ENTER"") ""handleEnter""); table.getActionMap().put(""handleEnter"" handleEnter); } public static void main(String[] args) { Test test = new Test(); test.setSize(800 600); test.setVisible(true); } }  You should add a KeyListener to the JTable to get all typed Characters. After the user press [Enter] you should check the word the user has typed. Write your own FocusTraversalPolicy to set it to the Table table.setFocusTraversalPolicy(policy) The FocusTraversalPolicy describe which component get the next focus. After this you can call FocusManager.getCurrentManager().focusNextComponent(); EDIT: I did not test this it is just an idear.",java gui swing focus jtable
53820,A,"Why does windows XP minimize my swing full screen window on my second screen? In the application I'm developping (in Java/swing) I have to show a full screen window on the second screen of the user. I did this using a code similar to the one you'll find below... Be as soon as I click in a window opened by windows explorer or as soon as I open windows explorer (i'm using windows XP) the full screen window is minimized... Do you know any way or workaround to fix this problem or is there something important I did not understand with full screen windows? Thanks for the help import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JWindow; import java.awt.BorderLayout; import java.awt.Dimension; import java.awt.GraphicsDevice; import java.awt.GraphicsEnvironment; import java.awt.Window; import javax.swing.JButton; import javax.swing.JToggleButton; import java.awt.Rectangle; import java.awt.GridBagLayout; import javax.swing.JLabel; public class FullScreenTest { private JFrame jFrame = null; // @jve:decl-index=0:visual-constraint=""9435"" private JPanel jContentPane = null; private JToggleButton jToggleButton = null; private JPanel jFSPanel = null; // @jve:decl-index=0:visual-constraint=""39237"" private JLabel jLabel = null; private Window window; /** * This method initializes jFrame * * @return javax.swing.JFrame */ private JFrame getJFrame() { if (jFrame == null) { jFrame = new JFrame(); jFrame.setSize(new Dimension(474 105)); jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); jFrame.setContentPane(getJContentPane()); } return jFrame; } /** * This method initializes jContentPane * * @return javax.swing.JPanel */ private JPanel getJContentPane() { if (jContentPane == null) { jContentPane = new JPanel(); jContentPane.setLayout(null); jContentPane.add(getJToggleButton() null); } return jContentPane; } /** * This method initializes jToggleButton * * @return javax.swing.JToggleButton */ private JToggleButton getJToggleButton() { if (jToggleButton == null) { jToggleButton = new JToggleButton(); jToggleButton.setBounds(new Rectangle(50 23 360 28)); jToggleButton.setText(""Show Full Screen Window on 2nd screen""); jToggleButton.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent e) { showFullScreenWindow(jToggleButton.isSelected()); } }); } return jToggleButton; } protected void showFullScreenWindow(boolean b) { if(window==null){ window = initFullScreenWindow(); } window.setVisible(b); } private Window initFullScreenWindow() { GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] gds = ge.getScreenDevices(); GraphicsDevice gd = gds[1]; JWindow window = new JWindow(gd.getDefaultConfiguration()); window.setContentPane(getJFSPanel()); gd.setFullScreenWindow(window); return window; } /** * This method initializes jFSPanel * * @return javax.swing.JPanel */ private JPanel getJFSPanel() { if (jFSPanel == null) { jLabel = new JLabel(); jLabel.setBounds(new Rectangle(18 19 500 66)); jLabel.setText(""Hello ! Now juste open windows explorer and see what happens...""); jFSPanel = new JPanel(); jFSPanel.setLayout(null); jFSPanel.setSize(new Dimension(500 107)); jFSPanel.add(jLabel null); } return jFSPanel; } /** * @param args */ public static void main(String[] args) { FullScreenTest me = new FullScreenTest(); me.getJFrame().setVisible(true); } } The following code works (thank you John). With no full screen and a large ""always on top"" window. But I still don't know why windows caused this stranged behavior... private Window initFullScreenWindow() { GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] gds = ge.getScreenDevices(); GraphicsDevice gd = gds[1]; JWindow window = new JWindow(gd.getDefaultConfiguration()); window.setContentPane(getJFSPanel()); window.setLocation(1280 0); window.setSize(gd.getDisplayMode().getWidth() gd.getDisplayMode().getHeight()); window.setAlwaysOnTop(true); //gd.setFullScreenWindow(window); return window; }  Usually when an application is in ""full screen"" mode it will take over the entire desktop. For a user to get to another window they would have to alt-tab to it. At that point windows would minimize the full screen app so that the other application could come to the front. This sounds like it may be a bug (undocumented feature...) in windows. It should probably not be doing this for a dual screen setup. One option to fix this is rather than setting it to be ""full screen"" just make the window the same size as the screen with location (00). You can get screen information from the GraphicsConfigurations on the GraphicsDevice. Making the window the same size as the screen was my emergency option. I'll try it and will report the result... But I'm curious to know if the behavior of Windows with fullscreen apps is documùented somewhere.",java windows swing
497714,A,"Return to a specific dialog I'm writing a very simple text editor and have run into a somewhat minor problem. Code below Saving a file when a file exists the user will be prompted to overwrite cancel or not overwrite (having the option to try again). So I have a JFileChooser that will prompt the user to overwrite: yes no cancel In the case of no being selected it should return to the JFileChoose dialog but I just plain don't know how. Can anyone help me out on this? The cancel and yes options aren't any problems (as far as I'm aware haven't tested in depth) String contents = textArea.getText(); if (openPath != null) { savePath = openPath; } else if (saveAsPath != null) { savePath = saveAsPath; } else if (savePath != null) { savePath = savePath; } else if (openPath == null) { JFileChooser saveFile = new JFileChooser(); int returnVal = saveFile.showOpenDialog(null); if (returnVal == saveFile.APPROVE_OPTION) { savePath = saveFile.getSelectedFile(); if (savePath.exists() != true) { FileWriter fstream = new FileWriter (savePath); BufferedWriter saveWrite = new BufferedWriter(fstream); saveWrite.write(contents); saveWrite.close(); } else if (savePath.exists() == true) { JOptionPane overwritePrompt = new JOptionPane(); Object[] options = {""Yes"" ""No"" ""Cancel""}; int n = JOptionPane.showOptionDialog(overwritePrompt ""Already exists. Overwrite?"" ""Overwrite File?"" JOptionPane.YES_NO_CANCEL_OPTION JOptionPane.WARNING_MESSAGE null options options[2]); if (n == 0) { FileWriter fstream = new FileWriter(saveAsPath); BufferedWriter out = new BufferedWriter(fstream); out.write(contents); out.close(); } else if (n == 1) { savePath = null; openPath = null; saveAsPath = null; return; // should return to JFileChooser!!!!!! } else { savePath = null; openPath = null; saveAsPath = null; return; } } } else { return; } What about starting over at this line: int returnVal = saveFile.showOpenDialog(null); again when you should return to the JFileChooser? I assume that the same file chooser would display its open dialog again then? Wow that sucks. Thanks man - Feels horrible destroying that code but you're dead right. I never looked much into JChooseFile - just went by example",java swing
215074,A,"Custom swing component - Turning a node into text I'm writing a custom swing component (something completely new but think JTree or JList). I'm trying to follow the general design of JTree JTable JList etc for consistency (I've also seen various poor 3rd party components abandon the separable model and/or renderer approach). So I have a model full of nodes the component itself and a renderer. At some point the node has to be turned into text and displayed by a renderer. I'm not clear on the best way to do this: Pass the node itself (as Object) to the renderer and let the renderer decide how to display it. This is how JList does it. Requires a customised renderer just to change the text. Allows great flexibility in how to display the node (doesn't even have to be text). Pass the node itself (as Object) to the renderer but have a convertValueToText() method in the component class. This is how JTree does it. Renderers can be just as flexibile as before - don't have to use this method. Have to override component to change the text transformation. As above but delegate convertValueTotext() to the model. This is how JXTable does it. The model is probably the best place for this method - and it's easier to override there. I don't want to have to customise the renderer just to change the text but I'd like to be able to customise the renderer to do more than display a model-displayed string (else why bother with renderers). I really don't like the fact that JXTable uses reflection to look for convertValueToText() in the model - this smells of bad magic to me. Can anyone shed any light on this oft-neglected part of Swing? SOLUTION What I ended up doing was this: Add a method to the model which returns a string for the given node. Importantly this can be null to indicate that the renderer should know what to do or that we simply can't provide anything useful. The component has the same method and passes the call on to the model. This is important for view-model separation. The renderer calls this method so it doesn't talk to the model directly. The default renderer calls the above method and if it's not null it uses it otherwise it can call toString on the value or provide a default or whatever. This leaves developers a choice when they want to override the displayed value - Override the method with a non-null return value knowing that the default renderer will display this text. - Provide a custom renderer which is passed the actual node object so it can do ""clever"" things if it needs to. I'm quite happy with it - it ""feels"" right it works and it's easy to use. Thanks for your perspectives! Good question. This is not specific to Swing but a philosophical question about the difference between a model and a view. In general is converting objects into text the job of the model or the view? My purist head says that actually you want a hierarchy of views - one to convert object model to text and one to display the text. You might even want more than two - for instance object-to-text text-to-document-structure document-structure-to-HTML and then CSS to present to the user. However pragmatism says this may get too hard to remember and maintain. So in your circumstance I would suggest: think about how likely it is you'll ever want to extract non-text data from the model. If it is not very likely then put the equivalent of convertValueToText in the model. Otherwise allow the component to either use a renderer if it is given one or else take the object value and convert it to text internally. This allows maximum flexibility and probably makes things feel most natural to the users of the API. I believe this is the JTable model though I haven't used Swing for a long time. Sorry the convertvalueToText() in my example applies to JTree not JTable (oops). JTable's default renderer seems to just call value.toString(). I've accepted this since I think it's pretty close to what I ended up doing - see question for update.  If you had to write your own component do it as simple as possible. In a lot of cases if you need a custom renderer then you don't care about interpretation by component or model. Model holds your data. And in this case is also custom written. From my point of view the good choice is based on first option. Provide DefaultRenderer which implements AbstractRenderer and add there all methods like toText(Object o) and so on. Then allow me to decide whether I want to use default functionality or I prefer to wrote my own. Do you really need custom component? To make it works correctly it is a LOT of work. Is this component worth all this?  AFAIK neither JList nor JTree require the renderer to render text. The renderer gets passed the data object and return a JComponent which gets positioned as a child in Tree/List itself and then rendered. I would go with this. A renderer for text would simply return a JLabel. If you want to be able to change the way the text is constructed pass a Formatter to the TextRender and you are done. Stephan What do you mean pass a formatter to the TextRenderer? What's a TextRenderer? TextRenderer: A simple implementation of your renderer interface that returns a JComponent (e.g. JLabel) which displays/renders the data object as a string/text Pass a formatter: The render may take a (Format)[http://java.sun.com/j2se/1.5.0/docs/api/java/text/Format.html] as a constructor parameter The formatter's a good idea but you would still have to pass in a custom renderer instance (albeit just an instance of the standard renderer with a new formatter). I would rather they only had to customise the model in most cases",java swing
21738,A,"Problems running Swing application with IDEA 8M1 Is anyone else having trouble running Swing applications from IntelliJ IDEA 8 Milestone 1? Even the simplest application of showing an empty JFrame seems to crash the JVM. I don't get a stack trace or anything it looks like the JVM itself crashes and Windows shows me a pop-up that says the usual ""This process is no longer responding"" message. Console applications work fine and my Swing code works fine when launching from Netbeans or from the command line. I'm running Windows Vista x64 with the JDK 1.6 Update 10 beta which may be a configuration the Jetbrains guys haven't run into yet. I have actually experienced problems from using the JDK 6u10 beta myself and had to downgrade to JDK 6u7 for the time being. This solved some of my problems with among other things swing. Also i have been running IJ8M1 since the 'release' and I am very satisfied with it especially if you regard the ""beta"" tag. It feels snappier and also supports multiple cores which makes my development machine rejoice. ;p Anyway i use WinXP32 and IJ8M1 with JDK 6u7 and that is afaik very stable indeed. By the way JDK 6u10 became stable today i will check it out and so should you! ;)  Ask your question directly on the IDEA website. They always react fast and the problem you have is probably either fixed or documented.  IDEA 8 Milestone 1 is a beta(ish) ""based on a new platform"". This may have changed the way that swing is handled. Also you are running a beta JDK. You will probably get more help/submit a bug at the Jetbrain forums unless they are on SO also. Here is the bug tracker link",java swing ide jvm intellij-idea
357739,A,"How do I combine a Combo Box with a Tree in Swing? For my application I want a Combo Box that displays its elements when dropped down as a Tree. Problem is I'm not versed well enough in Swing to know how to go about doing this. At least without ending up writing a new widget from scratch or something to that effect. How would I do something like this without creating one from scratch? I think I would implement this as a JTree component in a JViewPort followed by an expansion button. When collapsed it would look like a combo box. When you click the expansion button the viewport would expand allowing you to scroll and select a node in the JTree. When you selected the node the view port would collapse back to only show the selected node and the expansion button. Sounds like a bit of work but I suppose that'll do. I'll just have to play around with it.  Hey guess what! This is your lucky day. I've used this framework in the past. It is very complete. I didn't know they have this already. JIDE Soft Is not too expensive but it will take you some time to understand the API ( it is not that is complex but they've created a LOT of new stuff ) Cool but I'm not sure I'd be willing to pay for something that I'm only gonna use a tiny bit of. Thanks for the find though. Yeap. I agree. Then suggestion of show/hide a panel with the jtree will do. I'm pretty sure that's how they did that implementation.  Override the getListCellRendererComponent methode and create the components in level order. For every tree level move the painted string 3 spaces to right. Example: 1 . a . b 2 . c The original implementation you can look from public Component getListCellRendererComponent( JList list Object value int index boolean isSelected boolean cellHasFocus) { //Get the selected index. (The index param isn't //always valid so just use the value.) int selectedIndex = ((Integer)value).intValue(); if (isSelected) { setBackground(list.getSelectionBackground()); setForeground(list.getSelectionForeground()); } else { setBackground(list.getBackground()); setForeground(list.getForeground()); } //Set the icon and text. If icon was null say so. ImageIcon icon = images[selectedIndex]; String pet = petStrings[selectedIndex]; setIcon(icon); if (icon != null) { setText(pet); setFont(list.getFont()); } else { setUhOhText(pet + "" (no image available)"" list.getFont()); } return this; } But wouldn't that lose the expand collapse behavior  You can create a ComboBoxEditor whose component ( returned by getEditorComponent ) is a JTree Although you may have already tried that. I don't know how would it look like. Post an screenshot if you make it work. :) EDIT I give it a quick dirty try. Its awful but is a start. Here's the code for what is worth. :( Probably you should start thinking in alternatives. What about a fake Combo that is a JButton without border when pushed a hidden panel will appear with the tree displayed. import javax.swing.*; import javax.swing.event.*; import java.awt.*; import java.awt.event.*; public class ComboTree { public static void main( String [] args ) { JComboBox c = new JComboBox( new String [] { ""Hello"" ""there""}); c.setModel( new CustomComboModel() ); c.setEditor( new TreeComboEditor() ); c.setRenderer( new TreeComboEditor() ); JFrame frame = new JFrame(); frame.add( c  BorderLayout.NORTH ) ; frame.pack(); frame.setVisible( true ); } } class CustomComboModel implements ComboBoxModel { public Object getSelectedItem() { return "":P""; } public void setSelectedItem(Object anItem) {} public void addListDataListener(ListDataListener l) {} public Object getElementAt(int index) { return ""at "" + index ; } public int getSize() { return 2; } public void removeListDataListener(ListDataListener l) {} } class TreeComboEditor implements ComboBoxEditor ListCellRenderer { // Editor interface public void addActionListener(ActionListener l) {} public Component getEditorComponent() { return new JTree() ; } public Object getItem() { return """";} public void removeActionListener(ActionListener l) {} public void selectAll() {} public void setItem(Object anObject) {} // Render interface public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { return new JTree(); } } Yeah that's just what I was thinking but I'm not sure how it would handle folding/unfolding vs. selecting an element. I'll give it a shot soon. Don't do it. Looks terrible. :S Hmm. Any other suggestions? This is absolutely useless code. It doesn't do what is required and it do it it worst possible way. (-1)",java swing combobox tree
281855,A,"What is the rationale of SwingWorker? For what I can read it is used to dispatch a new thread in a swing app to perform some ""background"" work but what's the benefit from using this rather than a ""normal"" thread? Is not the same using a new Thread and when it finish invoke some GUI method using SwingUtilities.invokeLater?... What am I missing here? http://en.wikipedia.org/wiki/SwingWorker http://java.sun.com/products/jfc/tsc/articles/threads/threads2.html SwingWorker is an implementation of a common pattern (in .Net i read there is GuiWorker BackgroundWorker for this) where you have to do some work in a GUI program but keep the GUI responsive. The problem is that often GUI libraries are not multi thread safe so the common way to implement such workers is to use the message loop of the library to transfer messages into the event loop of the application. These classes allow you to easily update your GUI. Usually they have a update(int status) method that is called by the thread dispatched by the class and handled by the GUI while the thread continues its work. Using normal threads you would need to code your own events or some other messaging mechanism for this task which can be a pain if you need this functionality often. Using invokeLater in Java for example you would intermix the code for updating the gui into the code for doing the work. The SwingWorker allows you to keep things separate. You need listener with SwingWorker too. So? What i meant is that you would need own listeners (not listener interfaces already created) for your own event managing. SwingWorker handles all this for you. for example you can overwrite the method ""done"" which is called when the worker is finished. Or you can easily just add a property change listener on the way I see. So the code is clearer and maintainable because each time a new coder looks at the code he knows how the SwingWorker perform its job rathern than having to ""guess"" what the new thread code is all about. .. Yes exactly that's my point I'm coming from the C++ world. And i've coded a GuiWorker like that too. Before that i had to send events back and forth between the GUI and the Threads. It was a pain in the ass. The GuiWorker made many things more easy. I could use it for the background search filter and whatnot.  A code example: import org.jdesktop.swingx.util.SwingWorker; // This one is from swingx // another one is built in // since JDK 1.6 AFAIK? public class SwingWorkerTest { public static void main( String[] args ) { /** * First method */ new Thread() { public void run() { /** Do work that would freeze GUI here */ final Object result = new Object(); java.awt.EventQueue.invokeLater( new Runnable() { public void run() { /** Update GUI here */ } } ); } }.start(); /** * Second method */ new SwingWorker< Object  Object >() { protected Object doInBackground() throws Exception { /** Do work that would freeze GUI here */ return null; } protected void done() { try { Object result = get(); /** Update GUI here */ } catch ( Exception ex ) { ex.printStackTrace(); if ( ex instanceof java.lang.InterruptedException ) return; } } }.execute(); } } The choice always depends on personal preference and use case. The second method has an advantage when refactoring. You can more easily convert the anonymous class to an inner class when the method it's used in is too large. My personal preference goes to the second for we have built a framework where SwingWorkers can be added and are executed one after the other...  Yes you can accomplish what a SwingWorker does with vanilla threads + invokeLater. SwingWorker provides a predictable integrated way to accomplish tasks on a background thread and report result on the EDT. SwingWorker additionally adds support for intermediate results. Again you can do all of this yourself but sometimes it's easy to use the integrated and predictable solution especially when it comes to concurrency. *cough* ""integrated"" way *cough* @Rob finally fixed the typo. Only 3 years.  to answer your question you are not missing anything. this class is just a convenient utility for wrapping up the functionality you discribed (start another thread to do the background work and then invoking some final action on the EDT with the results).  SwingWorker makes trivial example code much more concise. However it creates a ball of mud. Communications to and from the GUI and executed logic are all welded together. So I'd not like to see it used in real production code.  SwingWorker is far easier than mucking with your own threads because it gives you two things that are painful to manually thread coordination between the UI and the background process and doing loops effective background work that keeps working and sending updates back to the UI incrementally like process a large amount of data or loading a large list. The disadvantage (or advantage) depends on how you look at it is that it hides the underlying implementation so future version may have different behavior performance etc which may be undesirable. I've found it quite useful as the glue between a UI event and my own command code the SwingWorker maintains the link to the UI and my code pumps data.  When working with Swing it is important to know that the main swing processing (ie. rendering) happens on a single thread (which is not your main thread). This is often called the Swing or awt event thread. Those familiar with the JDK pre 1.6 will remember the ""grey rectangle"" bug if you spent too much time in an event dispatcher for a swing component. What does this mean. In any swing application you will have 2 threads running that you will now have to deal with. Normally if all your operations within an event dispatcher (the code that gets fired say when a button is clicked) is short (ie. changing the state of a siwng button) you can just run this inside of the event dispatcher. If your application is going to call a web service or a database or you application state is driven by external events (ie. jms) or you want to just make your UI more interactive (ie. build a list of items and be able to do something else) you should use a thread other than the awt event thread (the main swing one). So in these cases you spawn a new thread and do what you have to and when the results finally come back you then somehow have to create an event that can be executed by the awt/swing dispatcher. SwingWorker is a great little design pattern that allows you do to do this (the other way is SwingUtilities). It is particularly useful for doing fetch data from external sources or say long calculations (rendering a graphics scene). It helps automate the dispatch and subsequent re-integration of the results from an external thread (other than the awt thread). For async events (ie. an event from JMS needs to update a result use SwingUtilities).",java multithreading swing swingworker
480261,A,"Java Swing: Mouseover text on JComboBox items? In Swing is there a way to define mouseover text (or tool tip text) for each item in a JComboBox? If your combo box is not editable use setRenderer(ListCellRenderer). If it is editable use setEditor(ComboBoxEditor) because: The renderer is used if the JComboBox is not editable. If it is editable the editor is used to render and edit the selected item.  I've never tried it but you should be able to define a ListCellRenderer and have it return a JLabel or whatever with a tool tip.  There is a much better way to do this than the ToolTipComboBox answer already given. First make a custom ListCellRenderer:   package com.example; import javax.swing.*; import java.awt.*; import java.util.ArrayList; public class ComboboxToolTipRenderer extends DefaultListCellRenderer { ArrayList tooltips; @Override public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { JComponent comp = (JComponent) super.getListCellRendererComponent(list value index isSelected cellHasFocus); if (-1 < index && null != value && null != tooltips) { list.setToolTipText(tooltips.get(index)); } return comp; } public void setTooltips(ArrayList tooltips) { this.tooltips = tooltips; } }  Then use it like this:  JComboBox comboBox = new JComboBox(); ComboboxToolTipRenderer renderer = new ComboboxToolTipRenderer(); comboBox.setRenderer(renderer); ... //make a loop as needed comboBox.addItem(itemString); tooltips.add(tooltipString); ... renderer.setTooltips(tooltips);   I like the simplicity of MountainX's solution but not the lack of encapsulation. An alternate solution which has more moving parts but they are pretty simple and reusable. An interface: public interface ToolTipProvider { public String getToolTip(); } A wrapper class: public class ToolTipWrapper implements ToolTipProvider { final Object value; final String toolTip; public ToolTipWrapper(Object value String toolTip) { this.value = value; this.toolTip = toolTip; } @Override public String getToolTip() { return toolTip; } @Override public String toString() { return value.toString(); } } And a variant of MountainX's renderer: public class ToolTipRenderer extends DefaultListCellRenderer { @Override public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { JComponent component = (JComponent) super.getListCellRendererComponent(list value index isSelected cellHasFocus); String tip = null; if (value instanceof ToolTipProvider) { ToolTipProvider ttp = (ToolTipProvider) value; tip = ttp.getToolTip(); } list.setToolTipText(tip); return component; } } with the adding now: combobox.addItem(new ToolTipWrapper(itemStringtooltipString) );  Here's little bit fixed code from an online example: import java.awt.Component; import java.awt.FlowLayout; import java.awt.event.WindowAdapter; import java.awt.event.WindowEvent; import javax.swing.JComboBox; import javax.swing.JFrame; import javax.swing.JList; import javax.swing.UIManager; import javax.swing.plaf.basic.BasicComboBoxRenderer; /** * @version 1.0 06/05/99 */ public class ToolTipComboBox extends JFrame { /** * */ private static final long serialVersionUID = 2939624252688908292L; String[] items = { ""jw"" ""ja"" ""la"" }; String[] tooltips = { ""Javanese "" ""Japanese "" ""Latin "" }; public ToolTipComboBox() { super(""ToolTip ComboBox Example""); JComboBox combo = new JComboBox(items); combo.setRenderer(new MyComboBoxRenderer()); getContentPane().setLayout(new FlowLayout()); getContentPane().add(combo); } class MyComboBoxRenderer extends BasicComboBoxRenderer { /** * */ private static final long serialVersionUID = 2746090194775905713L; @Override public Component getListCellRendererComponent(JList list Object value int index boolean isSelected boolean cellHasFocus) { if (isSelected) { setBackground(list.getSelectionBackground()); setForeground(list.getSelectionForeground()); if (-1 < index) { list.setToolTipText(tooltips[index]); } } else { setBackground(list.getBackground()); setForeground(list.getForeground()); } setFont(list.getFont()); setText((value == null) ? """" : value.toString()); return this; } } public static void main(String args[]) { try { UIManager.setLookAndFeel(""com.sun.java.swing.plaf.windows.WindowsLookAndFeel""); } catch (Exception evt) {} ToolTipComboBox frame = new ToolTipComboBox(); frame.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { System.exit(0); } }); frame.setSize(200 140); frame.setVisible(true); } }",java swing
79002,A,What Java versions does Griffon support? I want to write a Swing application in Griffon but I am not sure what versions of Java I can support. The only reason I asked this question was to create the griffon tag. Is there a better way? According to the Griffon website 1.5 or higher. http://groovy.codehaus.org/Installing+Griffon,java swing groovy griffon
489255,A,How can I flash the Windows taskbar using Swing? I'm developing a Swing application and I need to flash the Windows taskbar. I can't use frame.requestFocus() because I don't want to steal focus from any other application. I don't know if it applies to newer versions of Windows but the .toFront() method used to flash the window if none of the current VM's windows were in the foreground. This means that calling frame.toFront() on a minimized frame would always make it flash... There's a downside to this approach. If a user is in the application typing in a JTextArea for instance this functionality removes focus and disrupts the typing.  JNIWrapper with its winpack extension can do what you want. The Demo on the site shows it in action. Link is broken! 4 year old link has been corrected.  Using Swing per se you very probably can't; that's a Widnows specific thing. Uh and? The Windows Taskbar is still windows specific.,java swing taskbar windows-taskbar
356957,A,Java window buffering keystrokes until the user clicks with the mouse Here's the basic idea: There is a java window (main) that opens another java window (child). When the child is created part of the initialization sets the focus in the appropriate text field in the child window: childTextField.requestFocusInWindow(); childTextField.setCaretPosition(0); The child is generally opened through a serious of keystrokes via a command line type interface. When the window is requested 90%ish of the time the focus correctly goes to the child window text field and the user can type in the box. If the command to open the child is sent off (with a press of the enter key) and the user immediately starts typing before the new window is created the text is correctly buffered and appears in the new textfield after the window opens. However every once in a while when the user requests the child window to open and then starts typing their text does NOT appear in the text field. Only after they click with the mouse in the field does the text they have typed appear. It's like it's being stored somewhere and doesn't come out until they click. The real frustrating thing here is that I can't seem to reliably reproduce the issue at all. It definitely happens but not regularly enough to debug nicely. There is of course all kinds of other mojo going on behind the scenes including communication with a server app but I'm not convinced it's related. Any thoughts or ideas would be very much appreciated. It turns out the answer wasn't all that interesting. After you mentioned the event queue I dug into the code a bit more. It turns out the application has a custom keyboard focus manager in place. It would do things like buffer the text typed while waiting for a child window to open. In the code to open the child window it calls a function (via a listener) that flushes the buffer and thus displays it to the screen. In that 10% or less of the time that doesn't happen. However the same flush function is also attached to mouse clicks that happen inside of text fields. So you guessed it it didn't flush with the opening of the window but did when the mouse was clicked. Thanks for the help...even though it wasn't exactly what the solution was it definitely pointed me in the right direction. Now I just have to figure out why the flush function isn't always getting called when the window opens... okay that one almost certainly *is* a bug. I'd put a trace point or a call to logger.info or something like it into the focus manager as early as possible see what the event really is and walk through the code paths. Odds on that there's an unexpected case and a code path that doesn't flush.  I had an issue similar to this. try adding this after your init() EventQueue.invokeLater(new Runnable() { public void run() { childtextfield.requestFocus(); childTextField.setCaretPosition(0); } }); It's worked for me.  On first look that sounds like it might be a bug in the implementation; the key should be in the same event queue as the mouse events. There's another issue possible though: the event queue is running in a thread separate from the program main; without knowing what's going on in the rest of the application it's tempting to wonder if the event queue thread is getting blocked somehow. Actually the difficulty you're having with reproducing it makes that sound even more likely. Debugging that case will require a little craft and trickery. If you're on Solaris 10 or OS/X I'd recommend using dtrace; you can easily put a trace point on the event queue. In not you might want to have another thread that periodically drops something on the event queue.  The event queue thread being blocked sounds VERY likely. Unfortunately I'm on windows so no dtrace for me but I'm definitely going to explore that more thoroughly. Of course anybody else who might have other ideas would be very welcome.,java swing
309158,A,Embedding an application inside another application I'm sure some of you noticed that if you have Acrobat Reader ( or any other pdf viewer )  and open a pdf in Firefox  you will see it embedded inside your tab . Is there any way to embed an application in a JFrame ? This is a rather tricky. In general native application such and Adobe Reader does not provide component which can be embedded into swing application. But in Windows there is COM/OLE approach which allows embedding of application together. This article can help you. It points on two project JCOM and JACOB which allows such embedding.  Yes but that application will need to provide JComponent version which is embeddable.,java swing embed
222940,A,How Do You Get the Height of the Titlebar Using Java (Swing)? I am getting a MouseEvent in Java. the getPoint() method is adding the height of the title bar into the y portion of the coordinate. I was wondering how I can find the height of the title bar of the current window in order to offset the y value by the correct amount. Do you think you could post some (preferably simplified) code that exhibits this behavior? I will get on it I figured out my problem..I added the motion listener to the frame and not the panel. Oops. You can find the frame insets by calling the getInsets method (defined in Container). Frame insets are discussed at the top of the Frame API docs. See this question. Of course you could always add your mouse listener to the content pane. JFrame has some unexpected behaviour on some methods such as add and setLayout.,java swing user-interface
29426,A,"Best GUI designer for eclipse? I'm looking for a good GUI designer for swing in eclipse. My preference is for a free/open-source plugin. Why not keep it as a CW? It's useful and the votes prove it that's what's most important The reason this question was closed is that it is effectively a poll. There rarely is one answer to the ""Best XXX for YYY"" style of question so these don't fit well with the Stack Overflow question system. There are plenty of other sites to go to in order to find lists of products and subjective discussions about them but we've found that they don't work here. 126 voted for the question. 70 voted for the chosen answer. Not constructive enough for you? Your comment received 7 votes. @Agnel Kurian: ""asked Aug 27 '08"" ""answered Sep 28 '10"" Considering that the comment was posted just an hour ago... ಠ_ಠ ಠ_ಠ ಠ_ಠ It's not free or open source. But you can give Intellij Idea's SWING GUI designer a try.  I use GWTDesigner http://www.instantiations.com/gwtdesigner/ which is not free but works well. Best of all their customer support is top notch - very responsive.  Window Builder Pro is a great GUI Designer for eclipse and is now offered for free by google. Windows Builder download: http://www.eclipse.org/windowbuilder/download.php Update site for Eclipse Indigo release: http://download.eclipse.org/windowbuilder/WB/release/R201106211200/3.7/ Window Builder Pro is fantastic. Be sure to go into Window->Preferences then WindowBuilder to configure how variables are set up event handlers etc. I prefer to configure my variables to always be fields and my event handlers to be ""implement listener interface in parent class"". Feels more like Visual Basic when I do that. It's a little bit slow compared to NetBeans but i like the fact of having editor that doesn't change my code so much or hinders editing as NetBeans does.  well check out the eclipse distro easyeclipse at EasyEclipse. it has Visual editor project already added as a plugin so no hassles of eclipse version compatibility.Plus the eclipse help section has a tutorial on VE.  visualswing4eclipse looks good but the eclipse update URL didn't work for me (I raised ticket 137) I was only able to install a previous version. Here's a url in case anyone wants it: http://visualswing4eclipse.googlecode.com/svn-history/r858/trunk/org.dyno.visual.swing.site/site.xml The plugin actually looks very good. The project seems abandoned. I've tested it on Eclipse 3.6 and it was very unstable. Only five almost trivial commits in the past 3 years. https://code.google.com/p/visualswing4eclipse/source/list  Look at my plugin for developing swing application. It is as easy as that of netbeans': http://code.google.com/p/visualswing4eclipse/ Your plugin looks nice but the download link for Eclipse is not active.  'Jigloo' is a very cool GUI designer. It is not free for commercial use however. It auto-generates code and allows for custom editing of the code it creates. http://www.cloudgarden.com/jigloo/  Here is a quite good but old comparison http://wiki.computerwoche.de/doku.php/programmierung/gui-builder_fuer_eclipse Window Builder Pro is now free at Google Web Toolkit Note: this comparison is in German...  Visual Editor is a good choice. It generates very clean code with no ""layout"" files beside of your sourcen using a simple but convenient pattern. It's very easy to patch the generated code and directly see the result. There are some stability problems (some times the preview window does not refresh anymore...) but nothing that a ""clean Project"" can't fix... I know it doesn't answer exactly your needs but I made it work recently with eclipse 3.4 http://wiki.eclipse.org/VE/Update This only works for eclipse 3.2 and not 3.3.. :-( The Visual Editor project is nearly dead. According to the website the last release is 2 years ago and it doesn't support Eclipse 3.3. @Tom: No longer true; there is now a version of Visual Editor for Eclipse 3.5/Galileo: http://wiki.eclipse.org/VE/Update There is now also a new release of Visual Editor: V 1.4.0 30 Sep 2009 And vep is now officially dead.  Another good GUI designer for Eclipse is Window Builder Pro. Like Jigloo it's not free for commercial use. It allows you to design user interfaces for Swing SWT and even the Google Web Toolkit (GWT).  Old question but have you checked out JFormDesigner?  GWT Designer is very good and allows for rapid development of GWT websites. (http://www.instantiations.com/gwtdesigner/)",java eclipse swing gui-designer
379675,A,"Getting ENTER to work with a JSpinner the way it does with a JTextField First to make my job explaining a bit easier here's some of my code:  JSpinner spin = new JSpinner( ); JFormattedTextField text = getTextField( spin ); text.addActionListener( new java.awt.event.ActionListener() { public void actionPerformed( java.awt.event.ActionEvent evt ) { // Do stuff... } } ); ... private JFormattedTextField getTextField( JSpinner spinner ) { JComponent editor = spinner.getEditor(); if ( editor instanceof JSpinner.DefaultEditor ) { return ( ( JSpinner.DefaultEditor )editor ).getTextField(); } else { System.err.println( ""Unexpected editor type: "" + spinner.getEditor().getClass() + "" isn't a descendant of DefaultEditor"" ); return null; } } So as you can see I got that far. And indeed when I type in a value into the text field component of the spinner (JFormattedTextField) and THEN press ENTER it works. What I want now is to be able to have the text field respond to ENTER without having to manually type in a new value (which sorta defeats the purpose of making a spinner out of it). How do I do that? I know this is not the action listener...but maybe this can work for you?  text.addKeyListener( new KeyAdapter() { @Override public void keyReleased( final KeyEvent e ) { if ( e.getKeyCode() == KeyEvent.VK_ENTER ) { System.out.println( ""enter pressed"" ); } } } ); It works! Thanks. Happy to help. Though I'd like to know why the action listener did not work :D Beats me. :P Probably because the JSpinner was stealing away inputs somehow? I'd probably use getInputMap() and getActionMap() but thanks for the post!",java swing jtextfield listeners jspinner
146498,A,JTable column spanning I am trying to make a JTable that has column spans available. Specifically I am looking to nest a JTable inside another JTable and when the user clicks to view the nested table it should expand to push down the rows below and fill the empty space. This is similar to what you see in MS Access where you can nest tables and clicking the expand button on a row will show you the corresponding entries in the nested table. If someone knows of a way to perform a column span with JTable can you please point me in the right direction? Or if you know of an alternative way to do this I am open to suggestions. The application is being built with Swing. Elements in the table both high level and low level have to be editable in any solution. Using nested JTables this won't be a problem and any other solution would have to take this into consideration as well. You need to write your own TableUI for the master table. It can also helpful to use your own TableModel to save additional data like if a row is expanded. But this is optional. I write an equals TableUI that expand a row and show an text editor. In the TableUI you need to change the the row hight dynamically with table.setRowHeight(height). Also it is necessary to copy some stuff from the BaseTableUI because you can not access the private stuff. I still don't see how you would go about telling your JTable to merge columns in a given row. I know how to insert a new row into the table but how do I tell the table to merge those cells?  Code-Guru Example: http://www.codeguru.com/java/articles/125.shtml Java-6 updated sources: http://qoofast.blog76.fc2.com/blog-entry-2.html (translated) ColumnGroup.java GroupableTableHeader.java GroupableTableHeaderUI  As a pointer in the right direction try this article at SwingWiki that explains the TableUI method of column spanning quite well. Before this I also tried some alternatives such as overriding the TableCellRenderer paint methods without much success. The link is not working anymore :( Copy if article is still offline: http://web.archive.org/web/20080726035429/http://www.swingwiki.org/howto:column_spanning The archive show Error 500 on this article :(,java swing jtable
303122,A,"Changing NetBeans UI Look/Feel Is it possible to somehow change the look/feel of NetBeans? I know it uses Swing and that usually apps using Swing for its UI can usually have their UI scheme changed. The default appearence for OSX is vomitastic and would even settle for just some sort of barebones default look. The whole look is just too distracting and unnecessary. See the answer to this question: http://stackoverflow.com/questions/231738/force-look-and-feel-on-netbeans-65#233855  To change the default look and feel of netbeans 7.2.1 go to the home directory\Program file \netbeans 7.2.1\etc; Now open to the netbeans.confg file and find out the following text. netbeans_default_options=""-J-client -J-Xss2m -J-Xms32m -J-XX:PermSize=32m -J-Dapple.laf.useScreenMenuBar=true -J-Dapple.awt.graphics.UseQuartz=true -J-Dsun.java2d.noddraw=true -J-Dsun.zip.disableMemoryMapping=true"" Now add the following text; -- laf com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel; Now it will be looked like; netbeans_default_options=""-J-client -J-Xss2m -J-Xms32m -J-XX:PermSize=32m -J-Dapple.laf.useScreenMenuBar=true -J-Dapple.awt.graphics.UseQuartz=true -J-Dsun.java2d.noddraw=true -J-Dsun.zip.disableMemoryMapping=true --laf com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel"" //Now you can see the new look and feel of netbeans (NimbusLookAndFeel)  Looks like this might be what I was looking for: http://wiki.netbeans.org/FaqCustomLaf",java osx swing netbeans interface
396896,A,"Changing the Contents of the JComboBox I would like to change the contents of the list of a JComboBox (like adding another list in place of and older one). Is there any way I might be able to do that? Thanks in advance! i need this answer also. Eventough I used JCombobox(newData); again and again previously. But it seems overwhelming. Thanks @AndreiC. :D I found this thread and came up with a quick (and probably dirty) solution: oldComboBox.setModel(new JComboBox<>(new_items).getModel()); dirty indeed - longest distance away from the straightforward solution I have ever seen (and I _have_ seen quite a lot creativity in doing things wrong is huge :-) plus there already was an accepted solution to this question. any reason why you think that wasn't reasonable and why the OP/ community would benefit from this (3 years after the solution was accepted) ? I didn't read the answers thoroughly - lesson learnt. It's a rubbish solution for replacing the model - which was already suggested and can be done more gracefully Why do you say this is a bad answer? Unlike the others I think this is a quite clever answer! Thank you @pal. @pal upsetting two beauty queens is not that good :D @Mehran I thank pal for posting this solution because it should work. However the other comments are right to point out that it is a ""dirty"" fix and not a straightforward one. Resetting the entire model for a JComboBox is close to asking the GUI to completely remake that JComboBox. It would be better for the program to use the MutableComboBoxModel mentioned in the accepted answer which allows the program to edit the existing JComboBox instead of doing this which is the equivalent of scratching out most of the JComboBox's data and re-creating it.  Of course you can. There are several methods for manipulating JComboBoxes using the default list model. Have a look at the remove* methods and add* methods: http://java.sun.com/javase/6/docs/api/javax/swing/JComboBox.html  If you want to be able to add and remove items from an existing combo box at runtime the underlying data model for the combo box needs to be a MutableComboBoxModel Google for that class for interface information and for examples of how to use it. Note that if you want the user to type in new values you also need to make the box editable. You can find some links to examples here.  You can also replace the model in its entirety with setModel(). But after writing more and more user interfaces I find it more useful to write a custom ComboBoxModel to wrap the data structure the ComboBox is presenting. This is more unit testable and cleaner IMHO. Unfortunately not everything copes seemless with the model changing.  The Glazed Lists library is mighty helpful when you want to wire any sort of mutable list to a GUI control. It's a large-ish library which may not be appropriate for your project but take a look at their screencasts and judge for yourself. It supports a lot of related stuff like filtering and auto-completion and can save you a lot of manual work.",java swing jcombobox
261424,A,"Best way to stop a JTree selection change from happening? I have a dialog where each entry in a JTree has its corresponding options in a different panel which is updated when the selection changes. If options for one of the entries is set to an invalid state when the user attempts to change to a different entry in the tree I want there to be an error dialog and have the selection not change. I tried doing this with a valueChangeListener on the JTree but currently then have to have the valueChanged method call ""setSelectionRow"" to the old selection if there is an error. So that I don't get a StackOverflow I set a boolean ""isError"" to true before I do this so that I can ignore the new valueChanged event. Somehow I have the gut feeling this is not the best solution. ;-) How would I go about it instead? Is there a good design pattern for situations like this? To prevent selection I just subclassed DefaultTreeSelectionModel and overrode all the methods to check for objects that I didn't want to be selected (instances of ""DisplayRepoOwner"" in my example below). If the object was OK to be selected I called the super method; otherwise I didn't. I set my JTree's selection model to an instance of that subclass. public class MainTreeSelectionModel extends DefaultTreeSelectionModel { public void addSelectionPath(TreePath path) { if (path.getLastPathComponent() instanceof DisplayRepoOwner) { return; } super.addSelectionPath(path); } public void addSelectionPaths(TreePath[] paths) { for (TreePath tp : paths) { if (tp.getLastPathComponent() instanceof DisplayRepoOwner) { return; } } super.addSelectionPaths(paths); } public void setSelectionPath(TreePath path) { if (path.getLastPathComponent() instanceof DisplayRepoOwner) { return; } super.setSelectionPath(path); } public void setSelectionPaths(TreePath[] paths) { for (TreePath tp : paths) { if (tp.getLastPathComponent() instanceof DisplayRepoOwner) { return; } } super.setSelectionPaths(paths); } }  Here is an example of implementing a TreeSelectionModel that wraps another TreeSelectionModel but allows selection to be vetoed: public class VetoableTreeSelectionModel implements TreeSelectionModel { private final ListenerList<VetoableTreeSelectionListener> m_vetoableTreeSelectionListeners = new ListenerList<VetoableTreeSelectionListener>(); private final DefaultTreeSelectionModel m_treeSelectionModel = new DefaultTreeSelectionModel(); /** * {@inheritDoc} */ public void addTreeSelectionListener(final TreeSelectionListener listener) { m_treeSelectionModel.addTreeSelectionListener(listener); } /** * {@inheritDoc} */ public void removeTreeSelectionListener(final TreeSelectionListener listener) { m_treeSelectionModel.removeTreeSelectionListener(listener); } /** * Add a vetoable tree selection listener * * @param listener the listener */ public void addVetoableTreeSelectionListener(final VetoableTreeSelectionListener listener) { m_vetoableTreeSelectionListeners.addListener(listener); } /** * Remove a vetoable tree selection listener * * @param listener the listener */ public void removeVetoableTreeSelectionListener(final VetoableTreeSelectionListener listener) { m_vetoableTreeSelectionListeners.removeListener(listener); } /** * {@inheritDoc} */ public void addPropertyChangeListener(final PropertyChangeListener listener) { m_treeSelectionModel.addPropertyChangeListener(listener); } /** * {@inheritDoc} */ public void removePropertyChangeListener(final PropertyChangeListener listener) { m_treeSelectionModel.removePropertyChangeListener(listener); } /** * {@inheritDoc} */ public void addSelectionPath(final TreePath path) { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutToAddSelectionPath(path); }}); m_treeSelectionModel.addSelectionPath(path); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public void addSelectionPaths(final TreePath[] paths) { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutToAddSelectionPaths(paths); }}); m_treeSelectionModel.addSelectionPaths(paths); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public void clearSelection() { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutToClearSelection(); }}); m_treeSelectionModel.clearSelection(); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public TreePath getLeadSelectionPath() { return m_treeSelectionModel.getLeadSelectionPath(); } /** * {@inheritDoc} */ public int getLeadSelectionRow() { return m_treeSelectionModel.getLeadSelectionRow(); } /** * {@inheritDoc} */ public int getMaxSelectionRow() { return m_treeSelectionModel.getMaxSelectionRow(); } /** * {@inheritDoc} */ public int getMinSelectionRow() { return m_treeSelectionModel.getMinSelectionRow(); } /** * {@inheritDoc} */ public RowMapper getRowMapper() { return m_treeSelectionModel.getRowMapper(); } /** * {@inheritDoc} */ public int getSelectionCount() { return m_treeSelectionModel.getSelectionCount(); } public int getSelectionMode() { return m_treeSelectionModel.getSelectionMode(); } /** * {@inheritDoc} */ public TreePath getSelectionPath() { return m_treeSelectionModel.getSelectionPath(); } /** * {@inheritDoc} */ public TreePath[] getSelectionPaths() { return m_treeSelectionModel.getSelectionPaths(); } /** * {@inheritDoc} */ public int[] getSelectionRows() { return m_treeSelectionModel.getSelectionRows(); } /** * {@inheritDoc} */ public boolean isPathSelected(final TreePath path) { return m_treeSelectionModel.isPathSelected(path); } /** * {@inheritDoc} */ public boolean isRowSelected(final int row) { return m_treeSelectionModel.isRowSelected(row); } /** * {@inheritDoc} */ public boolean isSelectionEmpty() { return m_treeSelectionModel.isSelectionEmpty(); } /** * {@inheritDoc} */ public void removeSelectionPath(final TreePath path) { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutRemoveSelectionPath(path); }}); m_treeSelectionModel.removeSelectionPath(path); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public void removeSelectionPaths(final TreePath[] paths) { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutRemoveSelectionPaths(paths); }}); m_treeSelectionModel.removeSelectionPaths(paths); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public void resetRowSelection() { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutToResetRowSelection(); }}); m_treeSelectionModel.resetRowSelection(); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public void setRowMapper(final RowMapper newMapper) { m_treeSelectionModel.setRowMapper(newMapper); } /** * {@inheritDoc} */ public void setSelectionMode(final int mode) { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutToSetSelectionMode(mode); }}); m_treeSelectionModel.setSelectionMode(mode); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public void setSelectionPath(final TreePath path) { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutToSetSelectionPath(path); }}); m_treeSelectionModel.setSelectionPath(path); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ public void setSelectionPaths(final TreePath[] paths) { try { m_vetoableTreeSelectionListeners.fireVetoableEvent(new VetoableAction<VetoableTreeSelectionListener>() { public void fireEvent(final VetoableTreeSelectionListener listener) throws EventVetoedException { listener.aboutToSetSelectionPaths(paths); }}); m_treeSelectionModel.setSelectionPaths(paths); } catch (final EventVetoedException e) { return; } } /** * {@inheritDoc} */ @Override public String toString() { return m_treeSelectionModel.toString(); } } And here is the listener to go with it: public interface VetoableTreeSelectionListener { /** * About to add a path to the selection * * @param path the path to add * * @throws EventVetoedException */ void aboutToAddSelectionPath(TreePath path) throws EventVetoedException; /** * About to add paths to the selection * * @param paths the paths to add * * @throws EventVetoedException */ void aboutToAddSelectionPaths(TreePath[] paths) throws EventVetoedException; /** * About to clear selection * * @throws EventVetoedException */ void aboutToClearSelection() throws EventVetoedException; /** * About to remove a selection path * * @param path the path * * @throws EventVetoedException */ void aboutRemoveSelectionPath(TreePath path) throws EventVetoedException; /** * About to remove multiple selection paths * * @param paths the paths * * @throws EventVetoedException */ void aboutRemoveSelectionPaths(TreePath[] paths) throws EventVetoedException; /** * About to reset the row selection * * @throws EventVetoedException */ void aboutToResetRowSelection() throws EventVetoedException; /** * About to set the selection mode * * @param mode the selection mode * * @throws EventVetoedException */ void aboutToSetSelectionMode(int mode) throws EventVetoedException; /** * About to set the selection path * * @param path the path * * @throws EventVetoedException */ void aboutToSetSelectionPath(TreePath path) throws EventVetoedException; /** * About to set the selection paths * * @param paths the paths * * @throws EventVetoedException */ void aboutToSetSelectionPaths(TreePath[] paths) throws EventVetoedException; } You can use your own implementation of ListenerList but you get the idea...  I did not find a better way but this approach works fine for me. I know in Delphi it was a very convenient event: ""before changing selection"" where you could very easily stop changing selection. here is my java code with prevention of infinite recursion problem  navTree.addTreeSelectionListener(new TreeSelectionListener() { boolean treeSelectionListenerEnabled = true; public void valueChanged(TreeSelectionEvent e) { if (treeSelectionListenerEnabled) { if (ok to change selection...) { ... } else { TreePath treePath = e.getOldLeadSelectionPath(); treeSelectionListenerEnabled = false; try { // prevent from leaving the last visited node navTree.setSelectionPath(treePath); } finally { treeSelectionListenerEnabled = true; } } } } }); always remember to remove all listeners you added to prevent memory leaks. here is another approach: private class VetoableTreeSelectionModel extends DefaultTreeSelectionModel { public void setSelectionPath(TreePath path){ if (allow selection change?) { super.setSelectionPath(path); } } } { navTree.setSelectionModel(new VetoableTreeSelectionModel()); }  Here is my solution. In a JTree subclass: protected void processMouseEvent(MouseEvent e) { TreePath selPath = getPathForLocation(e.getX() e.getY()); try { fireVetoableChange(LEAD_SELECTION_PATH_PROPERTY getLeadSelectionPath() selPath); } catch (PropertyVetoException ex) { // OK we do not want change to happen return; } super.processMouseEvent(e); } Then in the tree using class: VetoableChangeListener vcl = new VetoableChangeListener() { public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException { if ( evt.getPropertyName().equals(JTree.LEAD_SELECTION_PATH_PROPERTY) ) { try { <some code logic that has to be satisfied> } catch (InvalidInputException e) { throw new PropertyVetoException("""" evt); } } } }; tree.addVetoableChangeListener(vcl); The mechanism starts at the earliest possible place. Mouse action intercepted the path to-be-selected is advertised to VetoableChangeListeners. In the concrete VCL the changing property is examined and if it is the lead selection veto logic is checked. If vetoing is needed the VCL throws PropertyVetoException otherwise mouse event handling goes as usual and selection happens. In short this makes lead selection property become a constrained property. Thanks for this!  Stumbled across this thread while investigating a solution for the same problem. First let me tell you things that didn't work. I attempted to register MouseListeners and all of that with the tree. The problem was that the TreeUI's mouse listeners were getting to the process the event before my JTree did meaning it was too late to set a flag or anything like that. Besides that this solution produced some ugly code and I would generally avoid it. So now for the actual solution! After using a few Thread.dumpStack() calls to get a stack dump I found the method I was looking to override. I extended the BasicTreeUI and overrode the ""protected void selectPathForEvent(TreePath path MouseEvent event)"". This will give you access to the mouse event that caused the selection before the selection actually occurs. You can then use whatever logic you need to either event.consume() and return if you want to stop the selection do whatever selection you want or pass it up for default processing by calling super.selectPathForEvent(path event); Just remember to set the UI you created in JTree. That mistake wasted a few minuets of my life ;-)  Not sure it's best practice but maybe you could put a FocusListener on the component(s) you want to validate... call your validation when the event is called and then consume then event if you don't want the focus to be moved because the validation fails? This is the ideal approach IMO Maybe it is the best way of doing it then. i like it. thanks.  Set a TreeSelectionModel which implements the appropriate semantics.",java swing design-patterns error-handling
113915,A,"Getting java.lang.ClassCastException: javax.swing.KeyStroke when creating a JSplitPane I'm getting a random unreproducible Error when initializing a JSplitPane in with JDK 1.5.0_08. Note that this does not occur every time but about 80% of the time: Exception in thread ""AWT-EventQueue-0"" java.lang.ClassCastException: javax.swing.KeyStroke at java.util.TreeMap.compare(TreeMap.java:1093) at java.util.TreeMap.put(TreeMap.java:465) at java.util.TreeSet.add(TreeSet.java:210) at javax.swing.plaf.basic.BasicSplitPaneUI.installDefaults(BasicSplitPaneUI.java:364) at javax.swing.plaf.basic.BasicSplitPaneUI.installUI(BasicSplitPaneUI.java:300) at javax.swing.JComponent.setUI(JComponent.java:652) at javax.swing.JSplitPane.setUI(JSplitPane.java:350) at javax.swing.JSplitPane.updateUI(JSplitPane.java:378) at javax.swing.JSplitPane.<init>(JSplitPane.java:332) at javax.swing.JSplitPane.<init>(JSplitPane.java:287) ... Thoughts? I've tried cleaning and rebuilding my project so as to minimize the probability of corrupted class files. Edit #1 See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6434148 - seems to be a JDK bug. Any known workarounds? None are listed on the bug entry page. After doing some Googling on bugs.sun.com this looks like this might be a JDK bug that was only fixed in JDK 6. See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6434148  Same exception had got thrown when i had upgraded java verion and db visualizer dint support jre7. and since Support for Java 7 was introduced in DbVisualizer 8.0 for Windows and Linux/UNIX. Support for Java 7 on Mac OS X was introduced in DbVisualizer 9.1. So Solution that worked for me : Windows/Unix/Linux: In the DbVisualizer installation directory there is an .install4j directory In this directory create a file named pref_jre.cfg if it doesn't already exist Open the file in a text editor Add the complete path to the root directory for the Java installation you want to use. Example: C:\Program Files\Java\jre7",java swing
19766,A,"How do I make a list with checkboxes in Java Swing? What would be the best way to have a list of items with a checkbox each in Java Swing? I.e. a JList with items that have some text and a checkbox each? You can use the Japura API. There is a List component with checkboxes [http://www.japura.org/checklist.html](http://www.japura.org/checklist.html) Here is just a little addition to the JCheckBoxList by Rawa. This will add the ability to select using space bar. If multiple items are selected all will be set to inverted value of the first item.  addKeyListener(new KeyAdapter() { @Override public void keyPressed(KeyEvent e) { int index = getSelectedIndex(); if (index != -1 && e.getKeyCode() == KeyEvent.VK_SPACE) { boolean newVal = !((JCheckBox) (getModel() .getElementAt(index))).isSelected(); for (int i : getSelectedIndices()) { JCheckBox checkbox = (JCheckBox) getModel() .getElementAt(i); checkbox.setSelected(newVal); repaint(); } } } });  A wonderful answer is this CheckBoxList. It implements Telcontar's answer (though 3 years before :)... I'm using it in Java 1.6 with no problems. I've also added an addCheckbox method like this (surely could be shorter haven't used Java in a while): public void addCheckbox(JCheckBox checkBox) { ListModel currentList = this.getModel(); JCheckBox[] newList = new JCheckBox[currentList.getSize() + 1]; for (int i = 0; i < currentList.getSize(); i++) { newList[i] = (JCheckBox) currentList.getElementAt(i); } newList[newList.length - 1] = checkBox; setListData(newList); } I tried out the demo for the Jidesoft stuff playing with the CheckBoxList I encountered some problems (behaviors that didn't work). I'll modify this answer if I find problems with the CheckBoxList I linked to. I needed to add checkbox.setOpaque(true); for the background to paint (using GTK+ L&F). And how does one add listeners to each checkbox? Did you ever update this or is it still prone to errors? I'm using this with no problems. The OTHER thing I mentioned had problems.  Odds are good w/ Java that someone has already implemented the widget or utility you need. Part of the benefits of a large OSS community. No need to reinvent the wheel unless you really want to do it yourself. In this case it would be a good learning exercise in CellRenderers and Editors. My project has had great success with JIDE. The component you want a Check Box List is in the JIDE Common Layer (which is OSS and hosted on java.net). The commercial stuff is good too but you don't need it. http://www.jidesoft.com/products/oss.htm https://jide-oss.dev.java.net/  I recommend you use a JPanel with a GridLayout of 1 column. Add the checkBoxes to the JPanel and set the JPanel as the data source of a JScrollPane. And to get the selected CheckBoxes just call the getComponents() of the JPanel to get the CheckBoxes.  Create a custom ListCellRenderer and asign it to the JList. This custom ListCellRenderer must return a JCheckbox in the implementantion of getListCellRendererComponent(...) method. But this JCheckbox will not be editable is a simple paint in the screen is up to you to choose when this JCheckbox must be 'ticked' or not For example show it ticked when the row is selected (parameter isSelected) but this way the check status will no be mantained if the selection changes. Its better to show it checked consulting the data below the ListModel but then is up to you to implement the method who changes the check status of the data and notify the change to the JList to be repainted. I Will post sample code later if you need it ListCellRenderer  I'd probably be looking to use a JTable rather than a JList and since the default rendering of a checkbox is rather ugly I'd probably be looking to drop in a custom TableModel CellRenderer and CellEditor to represent a boolean value. Of course I would imagine this has been done a bajillion times already. Sun has good examples.  Better solution for Java 7 and newer I stumbled upon this question and realized that some of the answers are pretty old and outdated. Nowadays JList is generic and thus there are better solutions. My solution of the generic JCheckBoxList: import java.awt.Component; import javax.swing.*; import javax.swing.border.*; import java.awt.event.*; @SuppressWarnings(""serial"") public class JCheckBoxList extends JList<JCheckBox> { protected static Border noFocusBorder = new EmptyBorder(1 1 1 1); public JCheckBoxList() { setCellRenderer(new CellRenderer()); addMouseListener(new MouseAdapter() { public void mousePressed(MouseEvent e) { int index = locationToIndex(e.getPoint()); if (index != -1) { JCheckBox checkbox = (JCheckBox) getModel().getElementAt(index); checkbox.setSelected(!checkbox.isSelected()); repaint(); } } }); setSelectionMode(ListSelectionModel.SINGLE_SELECTION); } public JCheckBoxList(ListModel<JCheckBox> model){ this(); setModel(model); } protected class CellRenderer implements ListCellRenderer<JCheckBox> { public Component getListCellRendererComponent( JList<? extends JCheckBox> list JCheckBox value int index boolean isSelected boolean cellHasFocus) { JCheckBox checkbox = value; //Drawing checkbox change the appearance here checkbox.setBackground(isSelected ? getSelectionBackground() : getBackground()); checkbox.setForeground(isSelected ? getSelectionForeground() : getForeground()); checkbox.setEnabled(isEnabled()); checkbox.setFont(getFont()); checkbox.setFocusPainted(false); checkbox.setBorderPainted(true); checkbox.setBorder(isSelected ? UIManager .getBorder(""List.focusCellHighlightBorder"") : noFocusBorder); return checkbox; } } } For dynamically adding JCheckBox lists you need to create your own ListModel or add the DefaultListModel. DefaultListModel<JCheckBox> model = new DefaultListModel<JCheckBox>(); JCheckBoxList checkBoxList = new JCheckBoxList(model); The DefaultListModel are generic and thus you can use methods specified by JAVA 7 API here like this: model.addElement(new JCheckBox(""Checkbox1"")); model.addElement(new JCheckBox(""Checkbox2"")); model.addElement(new JCheckBox(""Checkbox3""));",java swing
263348,A,Best Practices - Swing Database Access I'm a newbie to swing development. I have a swing app that needs to access data from a remote sql database. The users of the app are all located in our office. Is it bad practice to access the database directly from the swing app? Should I put database facing code into an rmi server? The question is vague. Are you asking if it's okay to use JDBC in your Swing action classes? Or are you asking if you should interpose another server running some other component between your swing app server and the database server? I'm asking if I should interpose another server running some other component between your swing app server and the database server. Not necessarily but you'll want to 'layer out' the data access code in your application to make it easier to do later. It will also tend to make the rest of the application more maintainable.  Do you have a plan for dealing with concurrent access to the same records in the database? It is something you will have to deal with so if not from within the code having all instances of the Swing application accessing the data via a central (i.e. your RMI server) location would make this much easier. No it's read only. The just tier your Swing application so that all your data access can be factored out later if you need to and stop there.,java swing
481802,A,"Help with annotations Edit--@Uri correctly pointed out that this was an abuse of annotations; trying to actually create the menu data itself in annotations is just silly. They are good for binding however I think I'll stick with using them to link the text data to the methods (the @Menu (""File"") portion) since it's more explicit and flexible than reflecting to a method name. Also I learned quite a bit in messing with it. I'll post the code here in a few days as an answer. --original post-- I haven't used these new-fangled annotations but they look amazingly interesting. I'm having trouble figuring out the syntax though (or more appropriately the best way to use it). In writing some code in response to this question It occurred to me that my methods are quite outdated. I used to parse a string to define my method structure then use reflection to pass it out to classes but I think annotations could make a much better menu structure. I'd like to replace my test class in the file with something like this: @TopMenu(""FileEdit"") @Menu(name=""File""""SaveLoadPrintPreviewQuit"") @Menu(name=""Print""""PreviewPrint"") @Menu(name=""Edit""""CopyPaste"") public class TestMenu { @MenuItem (""Save"") public void save() { System.out.println(""saved""); } @MenuItem (""Load"") public void load() { System.out.println(""loaded""); } ... and pass the entire class off to a method that manufactures and returns a JMenuBar bound to the class instance with no further input. First problem is that I can't figure out how to pass a ""Default"" of a string they all want to have (attribute=""value"") instead of just (""value"") can this be done? I can live without it but it's a little verbose. It'd be even better if I could get rid of the parens and/or quotes but I'm not holding my breath (I think to do that I'd have to define an individual interface for each menu item that's not acceptable). Secondly it doesn't like the multiple @Menu tags on a single class. I could get around this by parsing a single string but I was wondering if there was another way. Most importantly is there a library that does this already? (If nobody comes up with one I'll publish code to this thread when I get it working in case anyone else is interested.) You can define default value for annotation - here's example String str() default ""text""; You can't overcome this easily. You can define annotation Menus which accepts arrays of string  The way I've seen multiple annotations attached is to use a container annotation and then specify the items as an array. @Retention(RetentionPolicy.RUNTIME) public @interface Menu { String name(); String[] children(); } @Retention(RetentionPolicy.RUNTIME) public @interface MenuBar { Menu[] value(); } @Retention(RetentionPolicy.RUNTIME) public @interface MenuItem { String value(); } @MenuBar( { @Menu(name=""File"" children= {""Save""""Load""""Print""""Preview""""Quit""}) @Menu(name=""Print"" children= {""Preview""""Print""}) @Menu(name=""Edit"" children= {""Copy""""Paste""}) } ) public class TestMenu { @MenuItem (""Save"") public void save() { System.out.println(""saved""); } @MenuItem (""Load"") public void load() { System.out.println(""loaded""); } } awesome. I figured out the default thing by using ""value()"" which should make things a lot easier if I combine that with this. Now I have to figure out how to read them all... Thank you.  I know I'll get downvoted for this but I really think people are starting to overabuse the annotation mechanism in Java. All it was designed for was to be a mechanism for providing metainformation about classes and methods for the purpose of the compiler or of programming-support tools (e.g. testing infrastructure model checkers code generators etc.) It was not meant for actual production-oriented code macro metaprogramming and all that. This is just as inelegant as using preprocessor macros in C instead of actual functions. If menus are first-class entities in your program I really don't feel that you should be using the annotation mechanism for them. As for your specific questions you can easily define a default value. However you can't start doing things like nesting annotations to overcome the menu problem. It really wasn't designed for this. Interesting observation. I started out thinking about using annotations to facilitate the binding process for my menus having them define the menus themselves was just a second step. It's better than binding to method names and better than repetitive ""new Menu()"" code. Other alternatives? Well you could use the annotations as the input to a custom 'menu binding generator' which produces actual code. But I don't see how this is any different from other presentation/logic separation technology such as XAML and saves a lot of boiler plate code if you use it a lot. In situations like this I'd go with XML if it was really necessary. Annotations made more sense than XML in things like Hibernate where the code is already in place. However here we're talking about generating UI elements. Although I've used XML/string binding before (as in my example code in the link) It's irritating if it's in a different file. On the other hand this approach would be virtually impossible to i18nalize. Hmm. Maybe a combination of XML and annotations for binding? I'm not sure I understand what you mean. Why would XML be more difficult to internationalize ? If anything by putting UI labels as annotations you're binding yourself to specific version. Can't you write code that generates a menu class from XML? Annotations can be used quite well for code generation. For example see http://code.google.com/p/javadude/wiki/AnnotationsPropertyExample1 Rather than writing code to say ""I am a bean"" you declare it and have a superclass (""isA"") generated for you to match the spec. Not downvoted up voted. I agree completely annotation are meta data. IMO if you can't replace an annotation with a marker interface they you've abused the feature (yes Spring 2.5 I'm talking to you you horrible ""configuration all over the code"" framework). @Uri I was agreeing with you saying ""my annotation approach was more difficult to internationalize"" I just didn't phrase it well. I would accept this as the correct answer (it is) but since it didn't actually answer the question I asked I just upvoted it.",java gui swing reflection annotations
399929,A,"How do I get my netbeans drag and drop widget to know whether it is rendering inside the netbeans design view window or the running application? How do I get my netbeans drag and drop widget to know whether it is rendering inside the netbeans design view window or the running application? I'm trying to do some custom rendering. I think it has to do with the root container. Try java.beans.Beans.isDesignTime().  Testing the Beans.isDesignTime() with the following example package test; import java.awt.Graphics; import java.beans.Beans; import javax.swing.JLabel; public class TestLabel extends JLabel { private static final long serialVersionUID = -2438507032083091628L; public TestLabel() { super(); } public void paint(Graphics g) { super.paint(g); if (Beans.isDesignTime()) this.setText(""Design Time""); else this.setText(""Production runtime""); } } It works - that's quite incredible. I'm also amazed when things actually work.  This is another method: Component c = javax.swing.SwingUtilities.getRoot(this); String className = c.getClass().getCanonicalName(); if (!""org.netbeans.core.windows.view.ui.MainWindow"" .equalsIgnoreCase(className)) { Although I think the  Beans.isDesignTime() method is better",java swing netbeans javabeans designview
458114,A,"refresh setCellEditor for JTable I was looking for an answer for a previous question and had an ingenious idea to overcome a limit on JTable. I need the editor to be different on a row by row basis whereas JTable can only handle a single editor for each column. So my idea is to use a MouseListener to check the row and column on the JTable and set new editor each time. But calling setCellEditor() a second time do not have any effect. The editor remains to be the first one that was set. So how can I make ""setCellEditor"" work a second time for the same column? Here's the code in MouseListener. public void mouseClicked(MouseEvent e) { int cols = resultTable.columnAtPoint(new Point(e.getX() e.getY())); int rows = resultTable.rowAtPoint(new Point(e.getX() e.getY())); StorageObject item = (StorageObject) resultTable.getModel().getValueAt(rows cols); TableColumn col = resultTable.getColumnModel().getColumn(cols); col.setCellEditor(new MyComboBoxEditor(item.list)); } My theory is that when all the mouse listeners registered to the Table/TableCell are invoked the ones installed to the API classes by default will be invoked first before your mouse listener. This means the event causing the editor to be fetched will occur before you set it to a different one. Kind of like a race condition only it's actually defined somewhere in the API source code... That's my naive theory and I can already see some holes in it so on to my solution: Override JTable.getCellEditor(int row int col). This allows you to return whatever editor you want for any cell.  I'm not sure why your code isn't working (it's been a while since I've done Swing) but why don't you just override public TableCellEditor getCellEditor(int row int column) On your JTable? Maintain a map of the combo boxes you want to use for each row and in your overriden method return the correct one. yep. this is how you handle multiple editor types for a single column.",java swing jtable
156975,A,"How to add a horizontal gap with a JLabel I have a JLabel (actually it is a JXLabel). I have put an icon and text on it. Now I wand to add some spacing on the left side of the component like this: I DON'T accept suggestion to move the JLabel or add spacing by modifying the image. I just want to know how to do it with plain java code. The like this: is not very clear but you can add spacing by adding a transparent border of a certain width to the label  If you're trying to push the label to one side of it's container you can add a glue. Something like this: JPanel panel = new JPanel(); panel.setLayoutManager(new BoxLayout(panel BoxLayout.LINE_AXIS); panel.add(new JLabel(""this is your label with it's image and text"")); panel.add(Box.createHorizontalGlue()); Though your question isn't very clear.  I have found the solution! setBorder(new EmptyBorder(01000)); Thanks everyone!  You dont need to modify the preferredSize of the JLabel you can use the GridBagLayout Manager to specify separations between components you only have to use the GridBagLayout in the container and add the JXLabel to it with a GridBagConstraints object specifiying the insets to the left: JPanel panel=new JPanel(new GridBagLayout()); JLabel label=new JLabel(""xxxxx""); GridBagConstraints constraints=new GridBagConstraints(); constraints.insest.left=X; // X= number of pixels of separation from the left component panel.add(labelconstraints); Note that i have omitted a lot of configuration properties in the setup of the constraints you better read the documentacion of GridBagLayout",java swing jlabel swingx
440209,A,"How do I assign Enter as the trigger key of all JButtons in my Java application? I'm writing a Java Swing application using the Metal look-and-feel. Every time there is a JButton in my application the user uses the Tab key to move the focus to the button and then hits the Enter key. Nothing happens! If he hits the Space key the button events are fired. How do I assign the Enter key to trigger the same events as the Space key? Thank you for your help. I found the following: http://tips4java.wordpress.com/2008/10/25/enter-key-and-button/ Where Rob Camick writes that when using JDK5 and later you simply add... UIManager.put(""Button.defaultButtonFollowsFocus"" Boolean.TRUE); ...to the application to solve the problem. This did the trick for me! And I can't imagine anything simpler. However when using older versions of Java you will have to do something like Richard and Peter describe in their answers to this question. Aah very nice ;-) Good article too. I looked at MetalLookAndFeel class while working on my answer and this is just few lines above ""Button.focusInputMap"" which I used.  You do it by assigning an input / action map for the Enter key. Something like the following: // save the command mapping for space Object spaceMap = button.getInputMap.get(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE 0 true)); // add a mapping from enter to the same command. button.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER 0 true)spaceMap); I don't want to do this to all the buttons in my application too much hassle. You can subclass JButton and add this in the constructor.  Actually this is a look and feel issue. It is (and should be) up to the look and feel as to which key triggers the focused button. The ""default button"" work-around works since the L&F you're using uses enter for the default button. Peter's workaround explicitly changes the L&F default ""focus action"" key - which is somewhat more convincing if you ask me. I would add that I don't think many users would want to tab to the button then hit enter (most won't even notice the focus indicator) - they want the default action to be the ""right"" one and work wherever they press enter. This can only be done with input maps as Richard suggests. I would certainly suggest getting a very clear picture of what your users actually want and expect (preferably with reference to other apps they use) before changing anything globally.  Here is complete example. Richard was close but you also need to map pressed ENTER to action not just released. To make it work for ALL buttons I have put this mapping to default input map for buttons. Add imports and it should be runnable. public class Main implements Runnable { public static void main(String[] args) { SwingUtilities.invokeLater(new Main()); } @Override public void run() { setupEnterActionForAllButtons(); JFrame frame = new JFrame(""Button test""); frame.getContentPane().add(createButton() BorderLayout.NORTH); frame.getContentPane().add(createButton() BorderLayout.SOUTH); frame.pack(); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); } private void setupEnterActionForAllButtons() { InputMap im = (InputMap) UIManager.getDefaults().get(""Button.focusInputMap""); Object pressedAction = im.get(KeyStroke.getKeyStroke(""pressed SPACE"")); Object releasedAction = im.get(KeyStroke.getKeyStroke(""released SPACE"")); im.put(KeyStroke.getKeyStroke(""pressed ENTER"") pressedAction); im.put(KeyStroke.getKeyStroke(""released ENTER"") releasedAction); } private JButton createButton() { JButton b = new JButton(""press enter""); b.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { System.out.println(""Pressed""); } }); return b; } } Thank you very much Peter. I think the best answers are Code-Based answers. Thumbs up!  You can also set the ""default button"" to the button most recently focussed. I did this on an application and all methods of doing this are a nightmare to maintain and debug. The fact is this is clearly not what the designers of Swing intended to happen. I agree this would be a nightmare.",java swing events jbutton
455753,A,"JTextArea - very small size with long text I'm using a JTextArea to display a long text JTextArea _definition = new JTextArea(5 50); with word-wrap _definition.setLineWrap(true); _definition.setWrapStyleWord(true); embedded in a JScrollPane add(new JScrollPane(_definition) gbc); All that is part of a JPanel with the GridBagLayout. Everything is working fine with shorter text but when I add a long text with line wraps and the scrollbar is required pack() goes south and all components have just a minimum size and the dialog is unusable (it's not only the TextArea that is affected). I've tried to figure out what is going on but all I could figure out is that is has to do with the text in the TextArea. I'm stuck .. any ideas? Thanks! Got it to work .. Ross's answer was giving me some better terms to search for so thanks for helping me by pointing in the right direction!  pack(); _definition.setSize(_definition.getPreferredSize()); pack(); So double-packing plus some extra ... strange behavior. Cool I'm glad you got it to work. :)  Try calling pack() twice. JTextArea has some odd behavior as described in this entry in the Java bug database. It reports its preferred size initially as a single-line entry that is very wide (e.g. one row a thousand columns). Once it realizes that it is a certain width it will then report a correct preferred size for the number of rows it needs. I've had to do a number of different things to get around this behavior including subclassing JTextArea and modifying its behavior to be a little smarter. Double pack() may work for you in this case or you may have to resort to more complicated tweaking depending on how everything in your layout fits together. Double pack()-ing didn't work for me .. can you elaborate on ""more complicated tweaking"" .. thanks! A first step is probably to try subclassing JTextArea and track every time the get*Size() methods are called and see if the results are what you expect them to be.",java swing textarea sizing
58939,A,JComboBox Selection Change Listener? I'm trying to get an event to fire whenever a choice is made from a JComboBox. The problem I'm having is that there is no obvious addSelectionListener() method. I've tried to use actionPerformed() but it never fires. Short of overriding the model for the JComboBox I'm out of ideas. How do I get notified of a selection change on a JComboBox? Edit: I have to apologize it turns out I was using a misbehaving subclass of JComboBox but I'll leave the question up since your answer is good. Commence the vote down. :) Yeah it's still a good question for the people. Excellent question since I've noticed that actionPerformed fires on loading a combobox but NOT on selecting when one would expect it. I was recently looking for this very same solution and managed to find a simple one without assigning specific variables for the last selected item and the new selected item. And this question although very helpful didn't provide the solution I needed. This solved my problem I hope it solves yours and others. Thanks. HOW TO: Get Previous \ Last Item JComboBox  Here is creating a Combo Box & action of item change JComboBox comboBox = new JComboBox();  comboBox.setBounds(84 45 150 20); contentPane.add(comboBox); JComboBox comboBox_1 = new JComboBox(); comboBox_1.setBounds(84 97 150 20); contentPane.add(comboBox_1); comboBox.addItemListener(new ItemListener() { public void itemStateChanged(ItemEvent arg0) { //Do Something } }); } this answers enhances previous answers in that ... ? Please don't duplicate! Unrelated: never-ever do any manual sizing/locating of components that's the exclusive task of a suitable LayoutManager  It should respond to ActionListeners like this: combo.addActionListener (new ActionListener () { public void actionPerformed(ActionEvent e) { doSomething(); } }); @John Calsbeek rightly points out that addItemListener() will work too. You may get 2 ItemEvents though one for the deselection of the previously selected item and another for the selection of the new item. Just don't use both event types! I'd prefer ItemListener (just make sure to check the ItemEvent to see whether it is a selection or deselection even). The ActionListener can be fired even if the selection hasn't changed (i.e. if the user clicks on the already selected item). This may or may not be what you want. Vyacheslav's answer is the correct one.  Code example of ItemListener implementation class ItemChangeListener implements ItemListener{ @Override public void itemStateChanged(ItemEvent event) { if (event.getStateChange() == ItemEvent.SELECTED) { Object item = event.getItem(); // do something with object } } } Now we will get only selected item. Then just add listener to your JComboBox addItemListener(new ItemChangeListener());  int selectedIndex = myComboBox.getSelectedIndex(); -or- Object selectedObject = myComboBox.getSelectedValue(); -or- String selectedValue = myComboBox.getSelectedValue().toString(); I know why this was downvoted but I believe those downvotes should be reconsidered... If you check the selected index in the actionPerformed method you'll find that this works. It does fire and excluding -1 events will allow you to exclude the false firing on start. Solved my problem!  I would try the itemStateChanged() method of the ItemListener interface if jodonnell's solution fails.,java swing jcombobox itemlistener
464149,A,"How to build a Google-chrome tabs and menubar interface in Java Swing? Does someone know an open source project or code snippets which demonstrate how to create a google-chrome like interface with similar tabs and toolbar in Swing? I know that I can use JTabbedPane but I'm thinking of an interface which looks and feels very similar to the google chrome ""tabbed browsing"". Sounds like a neat project! Look at this question (and its answers) too: JTabbedPane: Components before and after the tabs themselves.  You can probably pull it off with an undecorated JFrame (setUndecorated(true)) to get rid of the title bar. You'd then create a layout with a tabbed pane filling the window and then overlay the min/max/close buttons on the top right. If tabbed pane is too inflexible you will need to put a button bar across the top with toggle buttons controlling multiple content panels and do the tab look yourself; as each button becomes active it hides the current panel and unhides the panel that belongs to it.  I think you should opt to Substance LAF and make a Chrome-lookalike skin for it (Substance is a skinnable LAF which sort of extends Swing's functionality on the graphical side) and use that won't be the easiest way to do it but if you have the time and willpower you'll get exactly what you want.  I have just created my own open-source library for this called Jhrome. Check it out! It's available on github: https://github.com/jedwards1211/Jhrome Documentation is sparse right now but it's pretty solid except for AWT/Swing memory leaks I haven't figured out yet. If enough people are interested in it I'll polish it up.",java gui swing open-source google-chrome
252820,A,Syntax colouring using Swing Is it possible to have something like a JTextArea which will color some keywords based on some mappings I have ? Here are a few other choices that you could try http://ostermiller.org/syntax/editor.html http://java.sun.com/products/jfc/tsc/articles/text/editor_kit/index.html http://fifesoft.com/rsyntaxtextarea/ http://code.google.com/p/jsyntaxpane/  I am not sure because I believe JTextArea only directly supports a single font in a single color. According to SyntaxHighlighter Class article JTextPane is the way to go.,java swing
329118,A,"How do I activate JButton ActionListener inside code (unit testing purposes)? I need to activate a JButton ActionListener within a JDialog so I can do some unit testing using JUnit. Basically I have this:  public class MyDialog extends JDialog { public static int APPLY_OPTION= 1; protected int buttonpressed; protected JButton okButton; public MyDialog(Frame f) { super(f); okButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { buttonpressed= APPLY_OPTION; } } ); public int getButtonPressed() { return buttonpressed; } } then I have my JUnit file: public class testMyDialog { @Test public void testGetButtonPressed() { MyDialog fc= new MyDialog(null); fc.okButton.???????? //how do I activate the ActionListener? assertEquals(MyDialog.APPLY_OPTION fc.getButtonPressed()); } } This may sound redundant to do in a unit test but the actual class is a lot more complicated than that... You can use reflection to get the button at runtime and fire the event. JButton button = (JButton)PrivateAccessor.get(MyDialog  ""okButton""); Thread t = new Thread(new Runnable() { public void run() { // What ever you want }; }); t.start(); button.doClick(); t.join();  AbstractButton.doClick Your tests might run faster if you use the form that takes an argument and give it a shorter delay. The call blocks for the delay. Thanks I can never find the methods that I need... It's not an obvious method.  If you have non-trivial code directly in your event handler that needs unit testing you might want to consider adopting the MVC pattern and moving the code to the controller. Then you can unit test the code using a mock View and you never need to programmatically press the button at all. The problem is that I'm extending a class (not actually JDialog) that I did not made the maker of that class didn't use the MVC pattern. Thanks for the info anyway.",java unit-testing swing junit
266809,A,"Using Mac OS X Services-menu from a Java/Swing application I would like to make my Java/Swing application compatible with the Services-menu available on Mac OS X. For example so that the user could select some text in JTextArea and have it converted into speech by Services -> Speech -> Start Speaking Text. Is there a simple way to achieve that? (The application should still be able to run on platforms other than Mac OS X.) I'm inclined to say no. If I recall correctly services are only available to Cocoa applications and Java apps are not Cocoa applications.  This seems to work on Mac OS X Leopard with no change to the original application. So I've lost interest in the answer (to how to make it work on Tiger). Thanks for your contribution however.  Have a look at apple's OSXAdapter package (link requires free apple developer login) for java development. The samples included in the package shows you how to integrate nicely to the OS X application menu in a way that is only activated when your application is running under OS X.  If all you want is the end result of the text being converted to speech you could try invoking the ""say"" command using ProcessBuilder something like this: String stuffYouWantToSay = ""StackOverflow Rocks!""; Process p = null; try { ProcessBuilder pb = new ProcessBuilder(""/usr/bin/say"" stuffYouWantToSay); p = pb.start(); } catch (Exception e) { // handle the error return; } This won't add it to the services menu but you can still get the same effect. Be sure to check out the man page for ""say"" as you can change the voice.",java osx swing
307024,A,"Native Swing Menu Bar Support For MacOS X In Java A link that stands out is http://www.devdaily.com/blog/post/jfc-swing/handling-main-mac-menu-in-swing-application/ however the menu bar under Mac OS X displays as the package name as opposed to the application name. I'm using the code in the above link without any luck so I'm unsure if anything's changed in recent Mac OS versions. Here's an extract: public RootGUI() { super(""Hello""); JMenuBar menuBar = new JMenuBar(); JMenu file = new JMenu(""File""); JMenuItem item = new JMenuItem(""Woah""); file.add(item); menuBar.add(file); setJMenuBar(menuBar); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setSize(100 100); pack(); setVisible(true); } public static void main(String[] args) { javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { try { System.setProperty(""apple.laf.useScreenMenuBar"" ""true""); System.setProperty(""com.apple.mrj.application.apple.menu.about.name"" ""Test""); UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); new RootGUI(); } catch(ClassNotFoundException e) { System.out.println(""ClassNotFoundException: "" + e.getMessage()); } catch(InstantiationException e) { System.out.println(""InstantiationException: "" + e.getMessage()); } catch(IllegalAccessException e) { System.out.println(""IllegalAccessException: "" + e.getMessage()); } catch(UnsupportedLookAndFeelException e) { System.out.println(""UnsupportedLookAndFeelException: "" + e.getMessage()); } } }); } The first menu item on the menu bar should display as ""test"" unfortunately this isn't the case. The file menu works fine on the other hand. Any ideas? @brendan this was 4 years ago c'mon eh ;) ooh look at all those exceptions If you are launching multiple JFrames and you use the mac menu then one of the JFrames could be replacing the JFrame you want with one that has a different menu structure. I'm not sure if you can share one JMenuBar for multiple JFrames but you could just make an application wide menubar that all the frames instantiate.  You can also use Macify when you build the app so you don't need to change any code.  As I understand you want to rename your application menu shown on the os x menu bar. Well I didn't find a system property but I found a command line option: -Xdock:name=""YourNameHere"" that worked for me. BTW: The syystem property com.apple.mrj.application.apple.menu.about.name is for renaming the about menu item in your application menu not the menu bar itself See this link here.  @Matt: Unfortunately that didn't work for me. public static void main(String[] args) { try { System.setProperty(""apple.laf.useScreenMenuBar"" ""true""); System.setProperty(""com.apple.mrj.application.apple.menu.about.name"" ""Test""); UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); } catch(ClassNotFoundException e) { System.out.println(""ClassNotFoundException: "" + e.getMessage()); } catch(InstantiationException e) { System.out.println(""InstantiationException: "" + e.getMessage()); } catch(IllegalAccessException e) { System.out.println(""IllegalAccessException: "" + e.getMessage()); } catch(UnsupportedLookAndFeelException e) { System.out.println(""UnsupportedLookAndFeelException: "" + e.getMessage()); } javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { new RootGUI(); } }); } That's what I had tried in addition to your comment.  You need to set the ""com.apple.mrj.application.apple.menu.about.name"" system property in the main thread not in the Swing thread (in other words just make it the first line in the program).  @Kezzer I think I see what's going on. If you put the main() method in a different class then everything works. So you need something like: public class RootGUILauncher { public static void main(String[] args) { try { System.setProperty(""apple.laf.useScreenMenuBar"" ""true""); System.setProperty(""com.apple.mrj.application.apple.menu.about.name"" ""Test""); UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); } catch(ClassNotFoundException e) { System.out.println(""ClassNotFoundException: "" + e.getMessage()); } catch(InstantiationException e) { System.out.println(""InstantiationException: "" + e.getMessage()); } catch(IllegalAccessException e) { System.out.println(""IllegalAccessException: "" + e.getMessage()); } catch(UnsupportedLookAndFeelException e) { System.out.println(""UnsupportedLookAndFeelException: "" + e.getMessage()); } javax.swing.SwingUtilities.invokeLater(new Runnable() { public void run() { new RootGUI(); } }); } And then put your RootGUI class in a different file. Merci beaucoup :-) The admins just merged this thread into my root account so I've marked this as the correct answer for you now :) @Matt Solnit: I also had same problem. This answer solved my problem.  If you want to deliver an application that looks native on Mac OS X one important part is to deliver an appplication bundle. Within the application bundle you will be able to provide a property list file in order to solve this problems. Some official info: Java Development Guide for Mac OS X",java swing osx
448832,A,"JScrollPane now showing its viewport I am making an application with Java Swing and i have a problem. I have made a Tabbed Panel which need to hold a simple panel and a scroll-panel. The simple panel is working fine but in my scroll-panel i can only see the scrollbars but not the viewport my code is as follows: ContentPane public class ContentPane extends JTabbedPane { private InfoPanel ip; ScrollPanel sp; public InfoPanel getIp() { return ip; } public ContentPane(GraphPanel gp) { this.sp = new ScrollPanel(gp); this.sp.setViewportView(gp); this.addTab(""Graph"" this.sp); this.ip = new InfoPanel(gp); this.addTab(""Info"" ip); } } ScrollPanel public class ScrollPanel extends JScrollPane { public ScrollPanel(GraphPanel gp){ this.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS); this.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); this.repaint(); } } GraphPanel public GraphPanel(StatusBar sb) { this.sb = sb; zoomLevel = 5; sm = new Simulation(); mh = new MouseHandler(this sm); this.addMouseListener(mh); this.setBackground(new Color(240 165 98)); this.repaint(); } Since i don't get any errors or exceptions i am now completely lost in which aproach to take. I can add to this that i have a MouseListener in GraphPanel which still registers my mouse clicks in the panel but still nothing is showing in there.. Can you post an screenshot? http://bayimg.com/DAMnMAAbp You should not subclass JScrollPane it is not necessary. But if you do so don't forget to add the component to the scrollpane. In your subclass you are not adding the GraphPanel to the scroll pane.: public class ScrollPanel extends JScrollPane { public ScrollPanel(GraphPanel gp){ // :::: HERE ::: you are not doing anything with gp // like this.setViewPort( gp ) or something like that this.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS); this.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); this.repaint(); } } Try: public class ScrollPanel extends JScrollPane { public ScrollPanel(GraphPanel gp){ super( gp ); .... etc ... And have GraphPanel extend JComponent or JPanel I added the graphpanel as viewport in the ContentPane class and i tried this too but it still doesn't work. oohh  yeap I have just seen that part... let me try other thing. Dude that worked can you in a few words explain what i did wrong? Thank you so much :) Oh and also my scrollpanel doesn't really know when it needs to scroll where should i put an option in for this? Look again did it really worked ? Because probable the other tab is not working very well. The other tab is working fine it is not supposed to be a scroll-panel just a simple panel. But the graph panel is still not scrolling when the graph is bigger than the scrollpanel.. I have just modified the code and it scrolls well. I don't know what the graph panel but I have added a JLabel see: http://pastebin.com/f5f69fe80 One thing is true if GraphPanel is a JComponent ( or a subclass ) and you try to render in two different places ( say GraphTab and InfoTab ) it will show well only in one of them. Okay by using that i have a scrollpanel that will scroll but the panel will be on top of the graph and my graph is a variable size do i need to specify the minimumsize of the graphpanel somewhere? Finally see the if you're defining preferredSize and/or minimSize. That's what the JScrollPane takes to know when to show the scrolls bar. ""do i need to specify the minimumsize "" yeap I think prefferredSize is enough that is what the JScoll takes to know if it should or not show the scrolls ""How much is visible and how much should it scroll"" If your graph is variable size you'll have to implement the Scrollable Interface that is a little bit tricky. I think i just found a solution with just varying the PreferredSize when i change something in the GraphPanel Yeap. In the code in pastebin notice the JLabel has a big preffered size... :) I'm glad you have make this thing to work. I am glad you helped me make this thing work :). About that Scrollable interface how difficult is it? Cause this approach i took it is not working :P Well let say I tried once .... aaand.. gave up :P I have implemented the methods in the interface now but they don't seem to ever be called :/",java swing jscrollpane viewport
169799,A,How do I dynamically add Panels to other panels at runtime in Java? I'm trying to get into java again (it's been a few years). I never really did any GUI coding in java. I've been using Netbeans to get started with this. When using winforms in C# at work I use a usercontrols to build parts of my UI and add them to forms dynamically. Ive been trying to use JPanels like usercontrols in C#. I created a JPanel form called BlurbEditor. This has a few simple controls on it. I am trying to add it to another panel at runtime on a button event. Here is the code that I thought would work: mainPanel.add(new BlurbEditor()); mainPanel.revalidate(); //I've also tried all possible combinations of these too //mainPanel.repaint(); //mainPanel.validate(); This unfortunately is not working. What am I doing wrong? Swing/AWT components generally have to have a layout before you add things to them - otherwise the UI won't know where to place the subcomponents. BFreeman has suggested BorderLayout which is one of the easiest ones to use and allows you to 'glue' things to the top bottom left right or center of the parent. There are others such as FlowLayout which is like a textarea - it adds components left-to-right at the top of the parent and wraps onto a new row when it gets to the end. The GridBagLayout which has always been notorious for being impossible to figure out but does give you nearly all the control you would need. A bit like those HTML tables we used to see with bizarre combinations of rowspan colspan width and height attributes - which never seemed to look quite how you wanted them.  mainPanel.add(new BlurbEditor()); mainPanel.validate(); mainPanel.repaint(); I think he said he tried this.  I figured it out. The comments under the accepted answer here explain it: http://stackoverflow.com/questions/121715/dynamically-added-jtable-not-displaying Basically I just added the following before the mainPanel.add() mainPanel.setLayout(new java.awt.BorderLayout());  I was dealing with similar issue I wanted to change the panel contained in a panel on runtime After some testing retesting and a lot of failing my pseudo-algorithm is this: parentPanel : contains the panel we want to remove childPanel : panel we want to switch parentPanelLayout : the layout of parentPanel editParentLayout() : builds parentPanel with different childPanel and NEW parentPanelLayout every time parentPanel.remove(childPanel); editParentLayout(); parentPanel.revalidate(); parentPanel.repaint();  Try mainPanel.invalidate() and then if necessary mainPanel.validate(). It also might be worth checking that you're doing this all in the event dispatch thread otherwise your results will be spotty and (generally) non-deterministic. Adding the invalidate method call did not help. I am calling this from the mouseclick event generated by netbeans.  As with all swing code don't forget to call any gui update within event dispatch thread. See this for why you must do updates like this // Do long running calculations and other stuff outside the event dispatch thread while (! finished ) calculate(); SwingUtilities.invokeLater(new Runnable(){ public void run() { // update gui here } },java swing
302606,A,"How do you make a Swing/JFace/SWT GUI addressable? I have a ""fat"" GUI that it getting fairly complex and I would like to add links from a place to an other and add back/forward buttons to ease navigation. It seems to me that this would be easier if my application was addressable: each composite could have its URI and links would use that URI. Are there design patterns applicable to this problem? I could just look at the source code for Firefox or Eclipse but these are huge projects and it would take a good amount of time making sense of it so I'm asking here. Is there a simpler example somewhere? Of course it would be simpler if I had build a web app in the first place but I'm not going to rewrite this huge app from scratch anytime soon. All answers to date assume there is one level but imagine a top menu leading to ""pages"" then each page has nested tab folders. The URI needs to identify each page and tab item. In Swing you might use a CardLayout. You can have each ""page"" be a card and the name of the card (chosen when adding cards to the layout) would be equivalent to the URI you want. Example: String PAGE_1_KEY = ""page 1""; String PAGE_2_KEY = ""page 2""; // as many keys as you need JFrame frame = ...; frame.setLayout(new CardLayout()); frame.add(createPage1() PAGE_1_KEY); frame.add(createPage2() PAGE_2_KEY); // etc. Then in your buttons' action listeners you would call ((CardLayout)frame.getLayout()).show(frame PAGE_1_KEY); // or whichever  You could build a ""global"" registry that maps unique IDs to objects (or maybe class names). These objects could be JPanels for instance. When the user clicks on a link or button some Controller is notified with the key of the new page to be displayed. This Controller could create that JPanel and place it in the application's frame.  My last approach included global manager and registration of links. Each part of UI was able to name yourself uniquely and register. The global manager knows about each one and then use some dirty work to bring this part visible. The back/forward navigation was made by special undo/redo manager. Each ""display"" was able to obtain navigation manager and register its ""undo"" event. It was hard work to make it work but the resulting feature was quite useful. We discussed about using some simple JNDI service to locate and name UI parts. It may be useful in linking too.  My solution for doing things like this usually involves the listener pattern. In a nutshell you reduce coupling by providing a way to send and receive events to and from interested parties (composites in this case). This is fairly easy to implement even when retrofitting. This way your events and parties can change without changing the dependent code.",java gui design-patterns swing
121715,A,"Dynamically added JTable not displaying Java Newbie here. I have a JFrame that I added to my netbeans project and I've added the following method to it which creates a JTable. Problem is for some reason when I call this method the JTable isn't displayed. Any suggestions? public void showFromVectors(Vector colNames Vector data) { jt = new javax.swing.JTable(data colNames); sp = new javax.swing.JScrollPane(jt); //NB: ""this"" refers to my class DBGridForm which extends JFrame this.add(spjava.awt.BorderLayout.CENTER); this.setSize(640480); } The method is called in the following context: DBGridForm gf = new DBGridForm(); //DBGridForm extends JFrame DBReader.outMatchesTable(gf); gf.setVisible(true); ... where DBReader.outMatchesTable() is defined as static public void outMatchesTable(DBGridForm gf) { DBReader ddb = new DBReader(); ddb.readMatchesTable(null); gf.showFromVectors(ddb.lastRsltColNames ddb.lastRsltData); } My guess is I'm overlooking something either about the swing classes I'm using or about Java. Any ideas? ""this"" in your context is unclear. Is it inside an applet? a JFrame? You may be having a layout issue make sure you've called setLayout on your class with a new borderlayout. In a swing application you'd want to use getRootContentPane().add() instead of a raw add() depending on the version. Java tutorial on adding top-level content: http://java.sun.com/docs/books/tutorial/uiswing/components/toplevel.html Default layout is a flowlayout I think. ""this"" refers to the DBGridForm which extends JFrame. I thought that was obvious when I said that I (paraphrasing) ""created a JFrame with netbeans and added the following method to it"". Looks like it wasnt as obvious as I had thought OK calling ""this.setLayout(new java.awt.BorderLayout());"" before adding the scroll pane did the trick. I think the default layout added by netbeans must be something different - this is really the first time I've used netbeans all previous experience was doing things from scratch...  If you are not running on the event thread it could be a problem--I've seen that cause stuff not to display. If this code is called in response to an AWT event (mouse click button press ...) then that's not the problem but if it's still the same thread that started your app or this code is running off a timer could very well be. You can use the java event thread to fire off things asynchronously. http://java.sun.com/products/jfc/tsc/articles/threads/threads1.html",java swing netbeans jtable
431481,A,"Alternative document structure in JTextPane? In a JTextPane with a DefaultStyledDocument the document structure (hierarchy of Element objects) ends with a LeafElement that spans all the character of the enclosing paragraph. Is there a way to customize the document such that each leaf element will represent a single character? (Background: I am trying to implementing a custom coloring scheme - somewhat similar to syntax coloring in an IDE. Using setCharacterAttributes() for this purpose is not an option mainly due to performance considerations.) You may be interested in jsyntaxpane. It uses a PlainDocument instead of using the more resource hungry StyledDocument. A Leaf for each character will require lots of memory so you may want to use a leaf for each ""Token"". You can also use a StyledDocument then update the style for each Token in a separate Thread.",java swing jtextpane
241813,A,"Java: When is Java 6 ready for end-user desktop application? I am writing a desktop application written in Swing developed using Java 1.5. Some of the users seem to be using Mac but I am interested in Java 6's scripting feature (Java 6 ships with Rhino). Java 6 although it came out almost 2 years ago doesn't seem to be widely in use. I also hear Apple ships Java 6 only for Intel 64 Macs only. Is Java 1.5 the last Java that runs everywhere? Is Java 6 ready for end-user desktop application now? If not now when? Edit: Don't get too hung up on the fact that I am using Swing. I would like to know when Java 6 can be considered ready for prime time not the choice of UI library. Java 6 has been out 2.5 years and doesn't use Rhino any more for its JavaScript support. I have been using Java 6 with Swing for almost 2 years.. From what I can tell most of the really successful Java desktop applications aren't using Swing. It's gotten much faster but most people want their windows to ""look native"" and Swing just isn't good at that. If you are intending a real ""professional"" looking end-user application you may want to take a look at the Eclipse Runtime. It's used by the Eclipse application and Azureus to render native-look-and-feel windows for a user. Of course it's hard to find a good tutorial on how to write for the Eclipse Runtime at least in comparison to the proliferation of good example code books and tutorials for writing Swing applications. Java 6 has been out for almost two years now... It's stable enough for development though for some reason as other posters have pointed out the Mac version isn't here yet. I think you have a good point but it doesn't answer my question. When is Java 6 ready? The feature I am interested in Java 6 is scripting. I've edited and updated the Java 6 portion IntelliJ is entirely Swing and looks the same on all platforms something SWT isn't very good at. ;) The point of SWT is not to look the same on all platforms its to look the same as the native platform apps on each platform. It does a pretty good job of that.  As the top answer says Apple's version of Java 6 has been available for Mac OS X 10.5 since April 29 2008. (It can be downloaded here.) Rhino is unfortunately not part of the package though.  The speed of availability of 1.6 on Mac is an Apple issue (this has much more to do with politics than 'readiness'). If scripting support embedded in the JVM is a requirement you'll have to wait to get that support on Mac. Or you could just load the Rhino library with your distro and use it... Here's the reference implementation - I'm not sure how much of JRE 1.6 is required for them to run (probably not much if nay) - https://scripting.dev.java.net/ Gotta love the JCP :-) Note that while Rhino is shipped with Sun's implementation of JRE 1.6 it's not part of the JRE standard so it's quite possible that Apple won't choose to include it in their distro. If this is the only thing from 1.6 that is holding you back don't let it. Java is absolutely ready for the desktop we have several product lines that are Swing apps.  Java 6 is not officially out for all Macs yet. If you want to be more widely accepted go with 1.5 (5). You say 'yet'. Do you know if Apple has plans to ever release Java 6 for 32-bit Intel Macs or for PowerPC Macs? I was under the impression that these machines would never get Java 6 from Apple.  Java 1.6 is great for the desktop. I don't know what Apple's problem is. I'm just not supporting Macs anymore until Apple can get their act together.  As far as I know it already is and has been for some time now. Swing's just fine for writing native looking apps. It is true though that if you are targeting older Macs you'll never be able to use Java 6. Are you asking about Java 6 Update 10 (AKA the consumer oriented JRE)? That just came out and is unavailable for Macs yet but I don't think that should affect you really.",java swing osx java-6
275927,A,"Modifying graphics context in Java I have a form that tries to modify a JComponent's graphics context. I use for example ((Graphics2D) target.getGraphics()).setStroke(new BasicStroke(5)); Now immediately after I set the value and close the form the change is not visible. Am I not allowed to modify a JComponent's graphics context? How else would I modify the stroke color and transformations? Thanks Vlad There are several problems with that approach. The first is that most components will set these things themselves when ever they are asked to repaint themselves. This means that your change will be lost every time the component gets to the point where it would actually use it. But on an even more fundamental level than that Graphics2D objects are not persistant. They are typically instantiated every time the component is redrawn meaning that the Graphics2D object you got won't be the same the component will be using when redrawing. What you need to do to achieve this kind of thing is either to reimplement the specific component yourself or implement a new look and feel that will affect the entire set of swing components. Have a look at the following link for further details about this: http://today.java.net/pub/a/today/2006/09/12/how-to-write-custom-look-and-feel.html  Nobody to answer? I have let some time to see if there is any good answer before mine: I am not a specialist of such question... First I don't fully understand your question: you change a setting then close the form? Anyway I am not too sure but somewhere in the process the graphics context might be recomputed or taken from default. Perhaps if you do this operation in the paint() method you can get some result although I am not sure. For a number of changes you usually use a decorator. I explored a bit this topic when answering a question on SO: How do I add a separator to a JComboBox in Java?. I had to paint my own border there (asymmetrical) but often you just take an existing one so it is quite simple. I hope I provided some information if it didn't helped perhaps you should give more details on what you want to do (and perhaps a simple minimal program illustrating your problem).  OK I've worked around the problem like this: The custom JComponent now holds a Stroke object which is set by the ""Choose stroke"" form when the user clicks OK. Then in the paint method of the JComponent I set the stroke of the graphics context passed as parameter to paint to the one contained in the object. I have experimented and found out that for some reason JComponent.getGraphics().set* doesn't work.",java swing
304609,A,"Swing app global modal Simple question: Can a swing frame be completely modal ( block all others windows ) ? I tried the following but I can still click on other apps windows ( like this browser ) JDialog myDialog = .... myDialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL); Plase paste some code if this is possible. Thanks in advance. UPDATE Thanks for the advice Daniel I'll take it into account when I ask ""Is it good idea to block the whole desktop with my app?"" Now since that is NOT my question do you have an answer for what I've asked? By the way your comment is very useful indeed. Update2 Take a look at this app: strange criminal amusing? Maybe... :) http://www.blockwriter.com/ I don't know about global modal but here's an idea. Take the screenshot of the desktop. Go full screen. Pop up your dialog. Since the desktop is fake screenshot you can ignore any attempt to click into it. Full screen sample: private void toggleFullScreenWindow() { GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice graphicsDevice = graphicsEnvironment.getDefaultScreenDevice(); if(graphicsDevice.getFullScreenWindow()==null) { dialog.dispose(); //destroy the native resources dialog.setUndecorated(true); dialog.setVisible(true); //rebuilding the native resources graphicsDevice.setFullScreenWindow(dialog); }else{ graphicsDevice.setFullScreenWindow(null); dialog.dispose(); dialog.setUndecorated(false); dialog.setVisible(true); dialog.repaint(); } requestFocusInWindow(); } FYI: Full-Screen Exclusive Mode API. Doesn't work on Mac. mhhh... could be.. could be.. I'll give it a try and see if there is a blink. Thanks. Why would you deceive your users like that?  JFrame is not designed to be modal. Use JDialog for it but you will loose some JFrame functionality doing so. If you can't live with the loss you have to block the EventQueue and replace it with your own to only accept events from the blocking one. See Creating Modal Internal Frames for an explanation using internal frames that should be applicable to JFrame also. Edit: Oups my answer seems a bit off since your code example shows you are already using a Dialog subclass for this. My mistake. I didnt put the initialization code. Yeap I started with JFrame then google a while and switch to JDialog. The thing here is not to block the appliation windows but the whole OS windows.  Dialogs are not meant to be globally modal. Every modern OS strongly discourages global modality in its HIG and they may even have deprecated the functionality (as indicated by the fact that you can't get it to work). Your app should never steal events from the entire system; that's not only bad design it's near-criminal in my book. Ignoring the fact that most people like to multi-task between several apps what about the scenario where you open a globally modal dialog and then your application freezes? Ctrl+Alt+Del should work on Windows to kill the app but I'm not sure about Cmd+Opt+Escape on Mac with a globally modal dialog (does Cocoa even have global modality?). None of the Linux platforms have any nice way of killing apps which have taken over complete control of the UI as you are suggesting (you would have to kill X11 completely and start a new instance from scratch). My answer: find another way. I don't care what your client is asking for they don't want this.",java swing modal-dialog
492457,A,How to avoid negative values with JFreeChart fixed auto range I have a JFreeChart line plot that is updated dynamically with one data point for every iteration of my algorithm. Because the number of data points can quickly become very large I have used the setFixedAutoRange(double) method on the domain axis. This restricts the graph to displaying the n most recent iterations (200 in my case). This works well except during the first 200 iterations. The problem is that until there have been 200 iterations the axis includes negative values (for example after 50 iterations the range is from -150 to 50). Negative iterations make no sense. I would like the axis to start at zero rather than a negative value. How can I achieve this? I don't mind whether the axis goes from 0 to 200 initially (with the right hand part of the chart left blank until the plot fills it up) or whether it starts at 0 to 1 and grows (so that the plot is always stretched across the full width of the chart). Either would acceptable though I have a slight preference for the former. Things I have tried: Calling setLowerBound doesn't play nicely with setFixedAutoRange. Calling setRangeType(RangeType.POSITIVE) doesn't seem to make any difference. Any ideas? It looks like you're looking for a solution that involves configuring JFreeChart to do it for you rather than manually setting the range. I can't help with that....but here are some other ugly solutions :P .... You could do something like this (sorry for the pseudo-code): while(producingData) { this.produceData(); if(!allDataButton.isSelected()) { domainAxis.setRange((count < 200) ? 0 : count-200) count); } else { domainAxis.setRange(0 count); } } If I were a perl-coder I'd write it like this just to make it a smidget harder to read :P while(producingData) { this.produceData(); domainAxis.setRange( (((count < 200) || allDataButton.isSelected()) ? 0 : count-200) count); } Thanks. This looks a bit simpler than my solution because it does it all in terms of the setRange method. I've since discovered that JFreeChart's auto-range performs poorly. Each time you add a data point it searches the whole data set for the min and max in order to adjust the range. Your solution (avoiding setAutoRange and setFixedAutoRange) doesn't suffer from that problem.  Things I have tried: Calling setLowerBound doesn't play nicely with setFixedAutoRange. Calling setRangeType(RangeType.POSITIVE) doesn't seem to make any difference. Any ideas? Did you try axis.setRange(0 200);  I now have a working solution although I'm still interested in better approaches Initially I set the range of the domain axis to a fixed range of 0 to 200: domainAxis.setRange(0 200); In the code that adds the data to the plot I check to see whether it is the 200th value that is being added and if it is I switch the range to a fixed auto range of 200. This works though it's a little bit clunky (especially as I also have to check whether the user has selected the option to disable the fixed window entirely and have it display all values). if (!allDataButton.isSelected() && count == 200) { domainAxis.setAutoRange(true); domainAxis.setFixedAutoRange(200); }  I encountered the same problem which I solved with: axis.setAutoRangeMinimumSize(100); // Ensures graph always shows at least 0-100. axis.setRangeType(RangeType.POSITIVE); I'm using JFreeChart v1.0.14. Perhaps they've fixed a bug with setAutoRangeType since the question was originally posted? One downside of this approach is that zero values are not visible.,java swing charts graph jfreechart
286651,A,"Accessing a ""nameless"" Jbutton in an anonymous class from another anonymous class? alright I know this sounds a little far-fetched but let me explain. I created 26 JButtons in an anonymous actionListener labeled as each letter of the alphabet.  for (int i = 65; i < 91; i++){ final char c = (char)i; final JButton button = new JButton("""" + c); alphabetPanel.add(button); button.addActionListener( new ActionListener () { public void actionPerformed(ActionEvent e) { letterGuessed( c ); alphabetPanel.remove(button); } }); // set the name of the button button.setName(c + """"); } Now I have an anonymous keylistener class where I would like to disable the button based off of which letter was pressed on the keyboard. So if the user presses A then the A button is disabled. Is this even possible given my current implementation? Thanks in advance Tomek I don't know if you want to disable the button or do you want to remove it? In you code you're calling remove and in your answer you're talking about disabling. You could achieve this by adding a KeyListener to the alphabetPanel. So you could add this just before starting the for-loop: InputMap iMap = alphabetPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW); ActionMap aMap = alphabetPanel.getActionMap(); and instead of your ActionListener added to the JButton call this: iMap.put(KeyStroke.getKeyStroke(c) ""remove""+c); aMap.put(""remove""+c new AbstractAction(){ public void actionPerformed(ActionEvent e) { // if you want to remove the button use the following two lines alphabetPanel.remove(button); alphabetPanel.revalidate(); // if you just want to disable the button use the following line button.setEnabled(false); } });  You could also iterate through the components comparing getText() to the key pressed. As someone else mentioned anonymous classes can also access members of the outer class as well as local finals  Could you not simply declare an array of 26 JButton objects at class level so that both listeners can access them? I believe anonymous inner classes can access class variables as well as final variables. Or even store them in a Map keyed by character so you could look up a JButton instance by the character.",java swing actionlistener keylistener
268651,A,"Session management using Hibernate in a Swing application How do you do your Hibernate session management in a Java Desktop Swing application? Do you use a single session? Multiple sessions? Here are a few references on the subject: http://www.hibernate.org/333.html http://blog.schauderhaft.de/2008/09/28/hibernate-sessions-in-two-tier-rich-client-applications/ http://in.relation.to/Bloggers/HibernateAndSwingDemoApp Don't use a single session. For everything but the smallest applications it will grow collecting autdated data and become slower and slower since the dirty check needs to check every entity in the session. If you don't need/want lazy loading and tracking of changes by hibernat you can use short lived sessions. But if you want to benefit from the power of hibernate use the aproach I described in my blog: http://blog.schauderhaft.de/2008/09/28/hibernate-sessions-in-two-tier-rich-client-applications/ or in the german version: http://blog.schauderhaft.de/2007/12/17/hibernate-sessions-in-fat-client-anwendungen/ AFAIK it is really the same aproach described in the http://in.relation.to/Bloggers/HibernateAndSwingDemoApp but with a recommendation how to actually scope your session: On Session per Frame with the exception of modal Frames which use the session of the parent Frame. Just make sure never to combine objects from different sessions. It will cause lots of trouble. In reply to Vladimirs update: The cancel actually works extremly nice with my aproach: throw away the session. session.flush does not fix the problem of the evergrowing session when you work with a single session for application. Of course with the aproach you describe you can work with short lived sessions wich should work ok. BUT you lose a lot: lazy loading only works with attached objects automatic detection of dirty objects. If you work with detached objects (or objects that aren't entities at all) you have to do this yourself. Good points Jens!  Problem with ""''session per thread''"" is good Swing applications do the database access outside the EDT usually in newly created SwingWorker threads. This way ""''session per thread''"" quickly becomes ""''session per click''"".  Single session. Start transaction when you need to do a set of operations (like update data after dialog box OK button) commit the tx at the end. The connection though is constantly open (since it's the same session) and thus all opportunities for caching can be used by both Hib and RDBMS. It may also be a good idea to implement a transparent session re-open in case the connection went dead -- users tend to leave applications open for extended periods of time and it should continue to work Monday even if DB server was rebooted on weekend. Update Jens Schauder provided a reason to use multiple sessions: partial (unwanted) updates to the session. Well that comes down to the way you use Hibernate. Suppose we have two dialogs open (as in Jens' blog example). If user clicks a radiobox and we immediately update a Hibernate entity associated with this radiobox then when user clicks Cancel we're in trouble -- session is already updated. The right way as I see it is to update dialog variables (non-Hibernate objects) only. Then when user clicks OK we begin a transaction merge updated objects commit the transaction. No garbage gets ever saved into session. MyHibernateUtils.begin(); Settings settings = DaoSettings.load(); // update setttings here DaoSettings.save(settings); MyHibernateUtils.commit(); If we implement such a clean separation of concerns we can later switch to multiple sessions with a simple change of MyHibernateUtils.begin() implementation. As for possible memory leak well... Transaction.commit() calls Session.flush() which AFAIK cleans the cache too. Also one may manually control the caching policy by calling Session.setCacheMode().  Use one session per thread (doc) and a version or timestamp column to allow optimistic concurrency and thereby avoiding session-to-instance conflicts. Attach instances to session when needed unless you need long running transactions or a restrictive isolation level. In a swing application basically everything happens in one thread. So this comes down to single session for the application with the document drawbacks.",java database hibernate swing session
448179,A,"Organizing Actions in a Swing Application? My current application has a JFrame with about 15 actions stored as fields within the JFrame. Each of the actions is an anonymous class and some of them are pretty long. Is it common to break actions into their own classes possibly within a sub-package called actions? If not how's this complexity usually tamed? Thanks If it is possible that your actions could be reusable (e.g. from keyboard shortcuts other menus other dialogs etc.) and especially if they can work directly on the underlying model (rather than on the UI) then it is generally better not to have them as anonymous classes. Rather create a separate package and create classes for each. Often it also makes sense to not instantiate these directly but rather have some sort of a manager that defines constants and initializes and returns sets of actions so that you could for example offer different action sets at different versions or set certain actions only for internal releases. Finally check whether your actions can be refactored into a class hierarchy. They often can which saves code replication and also helps you add robustness (e.g. check for certain conditions before letting the action execute). I think maybe as an alternative or in addition to the ActionManager actions are good candidates to be injected in a view using for example Spring.  What I do is create a package (package tree actually) for action classes then instantiate each class according to context. Almost all of my action classes are abstract with abstract methods to get the context (ala Spring). public abstract class CalcAndShowAction extends AbstractAction { //initialization code - setup icons label key shortcuts but not context. public void actionPerformed(ActionEvent e) { //abstract method since it needs ui context String data = getDataToCalc(); //the actual action - implemented in this class // along with any user interaction inherent to this action String result = calc(data); //abstract method since it needs ui context putResultInUI(result); } //abstract methods static helpers etc... } //actual usage //... button.setAction(new CalcAndShowAction() { String getDataToCalc() { return textField.getText(); } void putResultInUI(String result) { textField.setText(result); } }); //... (sorry for any mistakes I've written it by hand in this text box not in an IDE).  That's typically how I do it. Each action gets it's own class which has a reference to the ""app"" object so it can get to resources it needs. I usually have an action manager that holds all the actions so there's one place to access them as well as one place to update their enablement and stuff. Eventually this also becomes unmanageable at which point you should start thinking about using an app framework like Eclipse RCP the NetBeans framework JIDE etc. This is especially true if you want to support user-defined keymaps and stuff like that.",java swing code-organization
56707,A,"Java Right Click does not make a selection. What is the easiest way to solve this globally? Is there a way to globally make right click also select the element that you right click on? From what I understand this has been a bug in Swing for a long time likely to never be fixed because at this point applications depend on it. Any advice on doing this on a global scale? Perhaps on the L&F? Using the Glass Pane will do the trick. Here's a tutorial on how to use the glass pane to get the right click button and redispatch it to the right component. As the glass pane is not a solution in this case I suggest you take a look at the Toolkit class. Specificaly the addAWTEventListener method. You can add a global event listener with it. To add a mouse event listener: Toolkit.getDefaultToolkit(). addAWTEventListener(listener AWTEvent.MOUSE_EVENT_MASK); Cheers Glass pane to the rescue again. A Glass Pane does not work for my case but maybe a good answer for someone else. Why not? When you say ""element"" you mean any Swing component? Or elements in a tree or list? Both actually tables lists trees components. But we also use drag and drop also which adds another level of issues. Another issue is we have multiple independent windows for our application. Ideally if we could set it up on the L&F but I haven't figured that out yet. Updated my answer The toolkit looks like it might be the solution. I will update after I get back to this issue.",java swing
282779,A,"How to browse for a file in java swing library? I was wondering if there was some kind of J tool in the java swing library that opens up a file browser window and allows a user to choose a file. Then the ouput of the file would be the absolute path of the chosen file. Thanks in advance In WebStart and the new 6u10 PlugIn you can use the FileOpenService even without security permissions. For obvious reasons you only get the file contents not the file path.  The following example creates a file chooser and displays it as first an open-file dialog and then as a save-file dialog: String filename = File.separator+""tmp""; JFileChooser fc = new JFileChooser(new File(filename)); // Show open dialog; this method does not return until the dialog is closed fc.showOpenDialog(frame); File selFile = fc.getSelectedFile(); // Show save dialog; this method does not return until the dialog is closed fc.showSaveDialog(frame); selFile = fc.getSelectedFile(); Here is a more elaborate example that creates two buttons that create and show file chooser dialogs. // This action creates and shows a modal open-file dialog. public class OpenFileAction extends AbstractAction { JFrame frame; JFileChooser chooser; OpenFileAction(JFrame frame JFileChooser chooser) { super(""Open...""); this.chooser = chooser; this.frame = frame; } public void actionPerformed(ActionEvent evt) { // Show dialog; this method does not return until dialog is closed chooser.showOpenDialog(frame); // Get the selected file File file = chooser.getSelectedFile(); } }; // This action creates and shows a modal save-file dialog. public class SaveFileAction extends AbstractAction { JFileChooser chooser; JFrame frame; SaveFileAction(JFrame frame JFileChooser chooser) { super(""Save As...""); this.chooser = chooser; this.frame = frame; } public void actionPerformed(ActionEvent evt) { // Show dialog; this method does not return until dialog is closed chooser.showSaveDialog(frame); // Get the selected file File file = chooser.getSelectedFile(); } };  thanks for the heads up. I ended up using this quick piece of code that did exactly what i needed.  final JFileChooser fc = new JFileChooser(); fc.showOpenDialog(this); try { // Open an input stream Scanner reader = new Scanner(fc.getSelectedFile()); }  You can use the JFileChooser class check this example. If you don't need all the flexibility of JFileChooser you should use java.awt.FileDialog instead. Your OS X users will thank you. FileDialog uses a native file chooser window while JFileChooser is a swing component and lacks keyboard shortcuts and other niceties. Your Windows users will thank you too!",java swing file
304800,A,"Is there a free (LGPL BSD etc) implementation of XML editor swing component I need a JComponent thad enables editing xml documents so I can embed it in my application. It doesnt need to bee fancy. Plain text editing and highlighting would bee enough. Thank in advance Maybe this Xml Editor would do: I had to enhance and restructure my XML Editor to make it a ""plugable"" JPanel. Otherwise you still have the SimpleEditor.java which might be as good.",java swing
377924,A,"How to stop editing with DefaultCellEditor when a separate JBtton is pressed I got a table with a custom TableCellEditor (extending DefaultCellEditor) with a JFormattedTextField as the editor component. Now I got problem: when I press a separate button while editing. When the button is pressed the editor remains ""open and active"" while I'd want it to stop editing so that the changes made would be available for the operations caused by the button. So how to cause the editing to be stopped when a distinct button is pressed. I tried setFocusLostBehavior(JFormattedTextField.COMMIT) for the JFormattedTextField but it didn't seem to have effect. Hope somebody has some good ideas =) Had also more issues with these things see the question Java Swing : changing JTree selection while editingstopCellEditing() : how to get stopCellEditing() called before TreeListeners:valueChanged?  You may try jtable.putClientProperty(""terminateEditOnFocusLost"" Boolean.TRUE); Where is this documented? I don't know. I'm afraid it's quite undocumented. :(  Thanks asalamon74 that works quite nicely. There's debate over the thing at Sun Bug Database : Bug 4724980: JTable: Add API to control what happens to edits when table loses focus. (also other bug entries are found). The terminateEditOnFocusLost turns on ""commit-or-cancel"" behaviour that can be seen at the Java sources at the class JTable$CellEditorRemover And yes it's somewhat strange that it isn't documented at the APIs etc... The debate's submit date is 01-AUG-2002. So it's a long issue and still not really documented.",java swing focus jtable tablecelleditor
431654,A,"Is there a ""Group Box"" equivalent in Java Swing? Trying to build a GUI application in Java/Swing. I'm mainly used to ""painting"" GUIs on the Windows side with tools like VB (or to be more precise Gupta SQLWindows... wonder how many people know what that is ;-)). I can't find an equivalent of a Group Box in Swing... With a group box you have a square box (usually with a title) around a couple of related widgets. One example is a group box around a few radio buttons (with the title explaining what the radio buttons are about e.g. Group Box entitled ""Sex"" with ""Male"" and ""Female"" radio buttons). I've searched around a bit... the only way I found was to add a sub-pane set the border on the sub-pane and then add all the widgets in the ""group"" to the sub-pane. Is there a more elegant way to do that? Perhaps you could explain what a group box is. I think he means the control group you see in many dialog boxes where you have a square around a bunch of widgets such as radio buttons for example. Create a JPanel and add your radiobuttons to it. Don't forget to set the layout of the JPanel to something appropriate. Then call panel.setBorder(BorderFactory.createTitledBorder(name));  Here's a quote from the JRadioButton javadocs since you brought up radio buttons. An implementation of a radio button -- an item that can be selected or deselected and which displays its state to the user. Used with a ButtonGroup object to create a group of buttons in which only one button at a time can be selected. (Create a ButtonGroup object and use its add method to include the JRadioButton objects in the group.) Note: The ButtonGroup object is a logical grouping -- not a physical grouping. To create a button panel you should still create a JPanel or similar container-object and add a Border to it to set it off from surrounding components. Thanks but as you correctly point out my main intent was the ""visual"" aspect.  Not AFAIK at least not with standard swing widgets. In VB you have a group widget which is essentially a panel + border. In Swing you have a JPanel which is the container widget and you create and set a border object on it only if you need one. One can argue that in a way that is more elegant since you don't pay for something you don't use (e.g. border)  A Group box is just a set of 'logically grouped widgets'. This in the swing world is a JPanel. Add your widgets to a JPanel. Set its border type to 'Titled Border' and give the title same as the name of the VB6 'frame'. Voila. You have your group box.  Others have already commetned about JPanel and using a TitledBorder that's fine. However when playing with Swing LayoutManagers you may find it annoying that components in different JPanels cannot align correctly (each panel has its own LayoutManager). For this reason it is a good practice (check ""JGoodies"" on the web for more details) in Swing GUIs to NOT use TitledBorders but rather separate groups of components in a JPanel by a JLabel followed by a horizontal JSeparator. Ref. ""First Aid for Swing"" FYI - your reference link is broken. Thanks for the remark the original web site was changed last year and I wasn't aware of it. Now I just fixed the link.  I'm responding based on the Uri's comment . AFAIK  every JComponent can set a border for itself  so  you don't need a second panel . I want to have a border around a number of JComponents .. also having just one element in a group box is usually bad practice. You can add more than one component in a JPanel . I know .. I probably misunderstood your answer.",java swing grouping
184216,A,"Switching on a string/implementing button actions Full disclaimer: I'm a CS student and this question is related to a recently assigned Java program for Object-Oriented Programming. Although we've done some console stuff this is the first time we've worked with a GUI and Swing or Awt. We were given some code that created a window with some text and a button that rotated through different colors for the text. We were then asked to modify the program to create radio buttons for the colors instead—this was also intended to give us practice researching an API. I've already handed in my assignment and received permission from my instructor to post my code here. What's the best way to implement button actions in Java? After some fiddling around I created the buttons like this: class HelloComponent3 extends JComponent implements MouseMotionListener ActionListener { int messageX = 75 messageY= 175; String theMessage; String redString = ""red"" blueString = ""blue"" greenString = ""green""; String magentaString = ""magenta"" blackString = ""black"" resetString = ""reset""; JButton resetButton; JRadioButton redButton blueButton greenButton magentaButton blackButton; ButtonGroup colorButtons; public HelloComponent3(String message) { theMessage = message; //intialize the reset button resetButton = new JButton(""Reset""); resetButton.setActionCommand(resetString); resetButton.addActionListener(this); //intialize our radio buttons with actions and labels redButton = new JRadioButton(""Red""); redButton.setActionCommand(redString); ... And added action listeners... redButton.addActionListener(this); blueButton.addActionListener(this); ... A stub was already created for the actionPerformed method to give us an idea on how to use it but since there was only a single button in the template it wasn't clear how to implement multiple buttons. I tried switching on a String but quickly realized that since a String isn't a primitive type I couldn't use it for a switch statement. I could have improvised with an if-else chain but this is what I came up with instead. It seems far from elegant and there must be a better way. If there is what is it? Is there a way to switch on a string? Or choose an action in a more scaleable fashion? public void actionPerformed(ActionEvent e){ if (e.getActionCommand().equals(resetString)) { messageX = 75; messageY = 175; setForeground(Color.black); blackButton.setSelected(true); repaint(); return; } if ( e.getActionCommand().equals(redString) ) { setForeground(Color.red); repaint(); return; } if ( e.getActionCommand().equals(blueString) ) { setForeground(Color.blue); repaint(); return; } if ( e.getActionCommand().equals(greenString) ) { setForeground(Color.green); repaint(); return; } if ( e.getActionCommand().equals(magentaString) ) { setForeground(Color.magenta); repaint(); return; } if ( e.getActionCommand().equals(blackString) ) { setForeground(Color.black); repaint(); return; } } Instead of writing this: resetButton.addActionListener(this); You could also write this: resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent evt) { resetButtonActionPerformed(evt); } }); And instead of writing one big actionPerformed() for all actions you can (and then have to) write this: public void resetButtonActionPerformed(ActionEvent evt) { messageX = 75; messageY = 175; setForeground(Color.black); blackButton.setSelected(true); repaint(); } I don't know if this is the most elegant solution but at least you no longer have that big if construct. as plinth rightfully noted this might be somewhat (a lot) beyond your current level of education. However I'm sure you'll become your instructors most favorite student (of the day) if you can figure out what the **** is actually happening here. :-) I think I understand the concept here but I'm so unfamiliar with how all these methods and classes are related that it's a little daunting. I'll try it out and see if I can at least make it work. But...is actionPerformed a method that's an argument to addActionListener? Or of ActionListener?  Ergh. Don't implement masses of unrelated interfaces in one mega class. Instead use anoymous inner classes. They are a bit verbose but are what you want. Use one for each event then you wont need big if-else chain. I suggest keeping enough code within the inner class to decode the event and call methods that make sense to the target objects. Further you can parameterise your inner classes. You will probably find you don't need to keep references to the actual widgets around. In your example you seem to be using a JComponent as a JPanel. There's not much difference but use JPanel for collecting a block of widgets. Further there is unlikely any need to subclass it so don't. So for instance:  addColorButton(""Green""  Color.GREEN ); addColorButton(""Red""  Color.RED ); addColorButton(""Yellow"" Color.YELLOW); addColorButton(""Blue""  Color.BLUE ); ... private void addColorButton(String label Color color) { JRadioButton button = new JRadioButton(label); button.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent event) { target.setForeground(color); target.repaint(); } }); colorGroup.add(button); panel.add(button); } Yes implement all the unrelated interfaces in one mega class. Just don't make this your Swing class. Model-View-Controller. Your JComponent is your View. The Controller class would implement all of the listener interfaces.  Two alternate approaches: Create a new class that implements the Action interface and has a Color field and an actionPerformed method that sets the color Mantain a HashMap from command names to Color instances and look up the command name in the map  As suggested already you can use anonymous inner classes to implement the ActionListener interface. As an alternative you don't have to use anonymous inner classes but you can use a simple nested class instead: resetButton = new JButton(new ResetAction()); redButton = new JButton(new ColorAction(""Red"" Color.red)); and then... private class ResetAction extends AbstractAction { public ResetAction() { super(""Reset""); } public void actionPerformed(ActionEvent e) { messageX = 75; messageY = 175; setForeground(Color.black); blackButton.setSelected(true); repaint(); } } private class ResetAction extends AbstractAction { private Color color; public ColorAction(String title Color color) { super(title); this.color = color; } public void actionPerformed(ActionEvent e) { setForeground(color); repaint(); } } For why this approach - or any approach involving inner classes - is better than implementing ActionListener in the outer class see ""Design Patterns"": ""Favor 'object composition' over 'class inheritance'."" (Gang of Four 1995:20) Choosing between anonymous inner classes and these named inner classes is a largely a matter of style but I think this version is easier to understand and clearer when there are lots of actions.  One decent enough approach is to declare an enum whose elements match your strings and switch on valueOf(str) (the linked example shows how to do this with a fair amount of safety). The reason to avoid anonymous inner classes is probably because the class hasn't had that construct (yet) even though that might be the best solution.",java swing awt
416893,A,"ExecutorService vs Swing Timer I've been reading Filthy Rich Clients lately and noticed that although the version of Java is 6 there is no mention of the Concurrent Framework. So they talk about java.util.Timer and javax.swing.Timer but not about the ExecutorService. I read about the advantages of ExecutorService in the question ""Java Timer vs ExecutorService"" and decided to use the latter over the former. But the book talks about javax.swing.Timer and it's advantages of being specific for Swing development. So does this mean that for Swing development (animating buttons etc.) javax.swing.Timer is still a better choice or is there a relevant class in the new Concurrent Framework that replaces it? I would say that for simple swing related stuff the better choice is the javax.swing.Timer because of the advantages mentioned here. Note that the Swing timer's task is performed in the event dispatch thread. This means that the task can safely manipulate components but it also means that the task should execute quickly. On the other side if you need to perform non-swing related or more complex/lengthy processing operations the ExecutorService is very robust and is definitely the way to go.  Well the Swing Timer at least runs on the EDT so you do not have to wrap everything with calls to invokeLater. It also ties nicely in with Swing as it uses Actions ActionListeners and other Swing related classes. I'd stick with Swing Timer for Swing related tasks and use the new concurrent package for things that does not involve updating the GUI. Have a look at Using Timers in Swing Applications as it might contain more information to swing (sorry) the decision. You need to use the Swing Timer to read or update a visualized Swing component. Even reading the current state or a value from a component should be done on the EDT for deterministic results.  Just a suggestion elaborating on what bruno advised one pattern for taking advantage of the excellent Java 1.5+ concurrency utilities without breaking Swing is to have your ExecutorService do all the heavy lifting (as bruno said) but once that is done the ExecutorService thread should hand off the interaction with the actual UI components to the AWT Thread in a Runnable using one of: javax.swing.SwingUtilities.invokeAndWait(Runnable doRun) javax.swing.SwingUtilities.invokeLater(Runnable doRun) Those methods pass the runnable to be executed by the AWT thread. I would avoid invokeAndWait - it's use is likely to lead to deadlocks.",java swing timer
438397,A,"Can a Java Applet use the printer? Can a Java Applet able to print out text/html easily to standard printer driver(s) (with all common platforms Win/Mac/Linux)? Does it need to be signed? In order to print the security manager needs to allow it to access the printer. This means either signing the applet or at least with recent versions of Sun's Java plugin if an unsigned applet tries to print the user will be prompted to ask whether to allow permission. Wew! I would hate if a random site starts printing spam on my sheets... :-) PhiLho: There is a dialog box. JavaScript can do the same. Neil Coffey: Recent versions? It's been there for a decade. Tom -- thanks for the correction -- is it really that long...? You've suddenly made me feel very old!! :-) Even newer versions of the JRE can deploy the applet using JWS and use the `javax.jnlp.PrintService`. It is similar in feel to the 'prompt/print' of an untrusted applet.  To print you will either need to use Signed Applets or if an unsigned applet tries to print the user will be prompted to ask whether to allow permission. Here is some sample code for printing HTML using JEditorPane: public class HTMLPrinter implements Printable{ private final JEditorPane printPane; public HTMLPrinter(JEditorPane editorPane){ printPane = editorPane; } public int print(Graphics graphics PageFormat pageFormat int pageIndex){ if (pageIndex >= 1) return Printable.NO_SUCH_PAGE; Graphics2D g2d = (Graphics2D)graphics; g2d.setClip(0 0 (int)pageFormat.getImageableWidth() (int)pageFormat.getImageableHeight()); g2d.translate((int)pageFormat.getImageableX() (int)pageFormat.getImageableY()); RepaintManager rm = RepaintManager.currentManager(printPane); boolean doubleBuffer = rm.isDoubleBufferingEnabled(); rm.setDoubleBufferingEnabled(false); printPane.setSize((int)pageFormat.getImageableWidth() 1); printPane.print(g2d); rm.setDoubleBufferingEnabled(doubleBuffer); return Printable.PAGE_EXISTS; } } Then to send it to printer: HTMLPrinter target = new HTMLPrinter(editorPane); PrinterJob printJob = PrinterJob.getPrinterJob(); printJob.setPrintable(target); try{ printJob.printDialog(); printJob.print(); }catch(Exception e){ e.printStackTrace(); } As Neil COffey's answer you do not need to sign. corrected as per Neil Coffey's answer Tom you have to have it use the HTMLEditorKit. Try testPanel.setContentType(""text/html"") before setting html content with setText Thanks for great code! However one issue with my testing data: testPanel.setText("" This is a test print blaa blaa ""); The output on paper has HTML tags visible so its not formatting e.g. header it just outputs H1 tags. what are all the necessary imports to make this run?",java swing applet
491812,A,"Tab character in Java Trying to get a tab character into a JMenuItem using \t but it's not printing. I bet it's something really basic I'm missing. Here's the code menuItem = new JMenuItem(""New\tCtrl + N""); Thanks This should probably be tagged under Swing too! You're not supposed to add keyboard shortcuts manually there's an API for it that puts them in the proper place. Look here for instance or search the Swing docs for ""accelerators"".  Try this instead: menuItem = new JMenuItem(""New""); menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N ActionEvent.CTRL_MASK)); You should also add mnemonics for usability: menuItem.setMnemonic(KeyEvent.VK_N); See the Java Look and Feel Guidelines for greater clarification especially volume 1. Alternative: `KeyStroke.getKeyStroke(""control N"")`",java swing menu
237050,A,What methods get called when you resize a JFrame? I'm using a JFrame in which the CENTER portion of the BorderLayout is occupied by a JScrollPane that wraps around a JPanel. What I'm finding is that when I initiate the action that actually causes the JPanel to be displayed the display doesn't change. But when I resize the JFrame the new JScrollPane has now magically appeared. So what methods are called when you resize a JFrame? If I know then I can call it in the code and avoid having to resize the frame just to see the results of the operation. Its been a little bit since I've done swing but from memory calling validate() on the panel should do the trick. This will cause it and its children to have their layout calculated which is when the scrollbars decision is made. If that doesn't work try calling validate on the frame's content pane. This is a little more costly but may be needed if other components are being considered. Calling validate() on the content pane was the ticket. Thanks so much!,java swing
425590,A,"How do I paint Swing Components to a PDF file with iText? I would like to print my Swing JComponent via iText to pdf. JComponent com = new JPanel(); com.add( new JLabel(""hello"") ); PdfWriter writer = PdfWriter.getInstance( document new FileOutputStream( dFile ) ); document.open( ); PdfContentByte cb = writer.getDirectContent( ); PdfTemplate tp = cb.createTemplate( pageImageableWidth pageImageableHeight ); Graphics2D g2d = tp.createGraphics( pageImageableWidth pageImageableHeight new DefaultFontMapper( ) ); g2d.translate( pf.getImageableX( ) pf.getImageableY( ) ); g2d.scale( 0.4d 0.4d ); com.paint( g2d ); cb.addTemplate( tp 25 200 ); g2d.dispose( ); Unfortunately nothing is shown in the PDF file. Do you know how to solve this problem? I don't know that much about iText but... you did close the PdfWriter at some point right? yes writer is closed!  I have figured it out adding addNotify and validate helps.  com.addNotify( ); com.validate( ); Yes. JavaDoc of addNotify() says it ""should not be called directly by programs"" but in practice it is necessary in headless context (exporting without a GUI). Otherwise the children of the component are not laid out and keep a size of zero.  I needed to call com.addNotify() com.setSize() com.validate()",java swing pdf pdf-generation itext
411982,A,"Override JComponent.getBaselineResizeBehavior() but keep Java5 compatibility For my Swing project I need to support both Java 5 and Java 6. I have defined a custom JComponent (call it Picture) and after embedding it in a JScrollPane I put it in a JPanel that uses DesignGridLayout manager. DesignGridLayout supports baseline alignment thanks to swing-layout open source library (implements baseline support for Java 5 and provides compatibility with the new Java 6 baseline support). My Picture class overrides public int getBaseline(int width int height) so that I can define a correct baseline for it. Note that ""override"" is not completely correct: it overrides the method on Java6 but defines it in Java5. When I run my sample app on Java5 everything is fine: the Picture baseline I have defined is correctly used. However when I use Java6 my Picture#getBaseline() method does not get called! And of course the baseline alignment of my picture is terrible (centered). After checking in Java6 source I have seen that in BasicScrollPaneUI getBaseline() calls first getBaselineResizeBehavior() on the viewport component (my Picture instance). And it will call getBaseline() only if getBaselineResizeBehavior() returns Component.BaselineResizeBehavior.CONSTANT_ASCENT. Now my problem is that getBaselineResizeBehavior() is a Java6 method of JComponent that I cannot implement in Java5 because it returns an enum Component.BaselineResizeBehavior which does not exist in Java5. So my question (finally) is: how can I implement (or simulate?) getBaselineResizeBehavior() so that my class can still compile and run in a Java5 environment? Actually what would be nice to have in javac is ""conditional compilation"" (like in C/C++). Conditional compilation is not great - you then need two distributions. Reflection works much better for this (I have done it many times) - see my answer. Conditional compilation would be great if it was part of the language but that is another debate... Maybe AOP could help on that one (but I would like to avoid a heavy solution with heavy dependencies just for this ""little"" problem. I think that the return type is not treated as part of the a method signature in resolving virtual functions and overloads; it might be that you can define your ""overriding"" method to return Object and reflect out the return Enum per my first answer. Since you're compiling in J5 it won't be a compile time conflict but the JVM should still choose your method to override... It might or it might throw a runtime exception. Still it's worth a try. For example: public Object getBaselineResizeBehavior() { Object ret; // reflect out the return value return ret; } Any error handling can be System.out purely for debugging since this will not be invoked unless you are J6 so the reflection correctly coded should always work if invoked. And I would of course comment this method to make it very clear what's going on. Ah well - that's too bad. No better idea has occurred to me sorry this wasn't any help. Thanks a lot I'll give it a try tonight and report back here Unfortunately this approach does not work it compiles fine (with Java5) but when run under Java6 my method never gets called: it looks it is not recognized as overriding Component#getBaselineResizeBehavior(); the JVM probably checks the return type and thus calls the super-class method.  how can I implement (or simulate?) getBaselineResizeBehavior() so that my class can still compile and run in a Java5 environment? You cannot compile this method declaration with the Java 5 library because the type Component.BaselineResizeBehaviour does not exist: public Component.BaselineResizeBehavior getBaselineResizeBehavior() You must compile using Java 6. Your classes can still run on Java 5 if you compile to a 1.5 target but you must take care that they handle absent types/methods gracefully. Add tests for these cases as you encounter them. Ensure developers attempt to run their code on Java 5 prior to check-in. For example this class... public class MyPanel extends javax.swing.JPanel { public java.awt.Component.BaselineResizeBehavior getBaselineResizeBehavior() { return java.awt.Component.BaselineResizeBehavior.OTHER; } public static void main(String[] args) { new MyPanel(); System.out.println(""OK""); } } ...can be compiled and run as follows using the javac JDK compiler: X:\fallback>javac -version javac 1.6.0_05 X:\fallback>javac -target 1.5 MyPanel.java X:\fallback>""C:\Program Files\Java\jre1.5.0_10\bin\java.exe"" -cp . MyPanel OK All the popular IDEs offer options for generating older class versions. You can use reflection to test for the existence of methods/types at runtime when you need to make decisions about code paths. Failure to set the target will result in errors like this: Exception in thread ""main"" java.lang.UnsupportedClassVersionError: Bad version n umber in .class file at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(Unknown Source) at java.security.SecureClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.access$100(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClassInternal(Unknown Source) Unfortunate - combining this compile target approach with a Factory producer is probably the right way to go; unless you want to get into plugin mechanisms. Interesting but it only partly answers the problem: I cannot compile it with Java5 I need Java6 with target 1.5. Actually it doesn't work when using swing-layout.jar library: swing-layout uses reflection to find getBaseline() method but to do so it loops through all methods of the class by calling Class.getMethods() which throws a NoClassDefFoundException due to the getBaselineResizeBehavior() method!  I would make a subclass of Picture perhaps called PictureJava6 which implemented the getBaselineResizeBehaviour() and when creating instances of Picture do: public Component pictureFactory() { if(javaVersion > ""1.6"") { return new PictureJava6(); } else { return new Picture(); } } Well the PictureJava6-class will obviously not compile without the java-6 library present. And it is reasonable (maybe not required?) that you need target=1.5 to be backward compatible so I don't think you can get around this in any other way than making two separate versions compiled separately. Well although I don't like this method much this is probably the only way to get what I want although it requires me to compile with JDK6 (and target=1.5). I have just checked it it works. Thanks!  You can use reflection to try to get the CONSTANT_ASCENT return value by name. If it can't be reflected you are J5 otherwise J6. This side-steps the explicit dependency and allows compilation to J5. Foll. is an example of doing this for dialog modality: try { Field fld=Class.forName(""java.awt.Dialog$ModalExclusionType"").getField(""TOOLKIT_EXCLUDE""); Method mth=getClass().getMethod(""setModalExclusionType""new Class[]{fld.getType()}); mth.invoke(thisnew Object[]{fld.get(null)}); } catch(Throwable thr) { log.errorln(""Unable to configure window to be unaffected by modal dialogs - dialogs may need to be closed to operate help.""); log.errorln(""Use Java 6 or later to avoid modal dialogs conflicting with the help system.""); log.errorln(""Exception: ""+thr); } UPDATE: I originally posted code with the J5 code commented out; I've changed that because I realized it confuses the issue by implying that the J5 code would not work in J6 - it does.",java swing baseline
312573,A,How could I allow only unique strings in a JList? I have a JList that holds a bunch of strings . I would like it to act like a Set  so that it will only hold unique values . Is there any way to achieve this without checking that a new string doesn't already exist there ? To what purpose? Is it necessary to iterate in the order items were added? Is it necessary to randomly access the items? Why does a set not work for you? take a look at the docs: 1.4.2 | Java 6 You can set your own ListModel via JList#setModel(ListModel) which might be backed by e.g. a HashSet instead of the Vector which is used by default. See also ListModel and AbstractListModel LinkedHashSet would make more sense but it'd still be an awkward O(n^2) operation to say repaint the widget.,java swing jlist jcomponent
154791,A,Java TreeNode: How to prevent getChildCount from doing expensive operation? I'm writing a Java Tree in which tree nodes could have children that take a long time to compute (in this case it's a file system where there may be network timeouts that prevent getting a list of files from an attached drive). The problem I'm finding is this: getChildCount() is called before the user specifically requests opening a particular branch of the tree. I believe this is done so the JTree knows whether to show a + icon next to the node. An accurate count of children from getChildCount() would need to perform the potentially expensive operation If I fake the value of getChildCount() the tree only allocates space for that many child nodes before asking for an enumeration of the children. (If I return '1' I'll only see 1 child listed despite that there are more) The enumeration of the children can be expensive and time-consuming I'm okay with that. But I'm not okay with getChildCount() needing to know the exact number of children. Any way I can work around this? Added: The other problem is that if one of the nodes represents a floppy drive (how archaic!) the drive will be polled before the user asks for its files; if there's no disk in the drive this results in a system error. Update: Unfortunately implementing the TreeWillExpand listener isn't the solution. That can allow you to veto an expansion but the number of nodes shown is still restricted by the value returned by TreeNode.getChildCount(). http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html#data scroll a little down there is the exact tutorial on how to create lazy loading nodes for the jtree complete with examples and documentation  I'm not sure if it's entirely applicable but I recently worked around problems with a slow tree by pre-computing the answers to methods that would normally require going through the list of children. I only recompute them when children are added or removed or updated. In my case some of the methods would have had to go recursively down the tree to figure out things like 'how many bytes are stored' for each node.  There are a few parts to the solution: Like Lorenzo Boccaccia said use the TreeWillExpandListener Also need to call nodesWereInserted on the tree so the proper number of nodes will be displayed. See this code I have determined that if you don't know the child count TreeNode.getChildCount() needs to return at least 1 (it can't return 0)  If you need a lot of access to a particular feature of your data structure that is expensive to compute it may make sense to pre-compute it. In the case of TreeNodes this means that your TreeNodes would have to store their Child count. To explain it a bit more in detail: when you create a node n0 this node has a childcount (cc) of 0. When you add a node n1 as a child of this one you n1.cc + cc++. The tricky bit is the remove operation. You have to keep backlinks to parents and go up the hierarchy to subtract the cc of your current node. In case you just want to have the a hasChildren feature for your nodes or override getChildCount a boolean might be enough and would not force you to go up the whole hierarchy in case of removal. Or you could remove the backlinks and just say that you lose precision on remove operations. The TreeNode interface actually doesn't force you to provide a remove operation but you probably want one anyway. Well that's the deal. In order to come up with precomputed precise values you will have to keep backlinks of some sorts. If you don't you'd better call your method hasHadChildren or the more amusing isVirgin.,java swing jtree
91179,A,"Automated tests for Java Swing GUIs What options are there for building automated tests for GUIs written in Java Swing? I'd like to test some GUIs which have been written using the NetBeans Swing GUI Builder so something that works without requiring special tampering of the code under test would be ideal. related question: http://stackoverflow.com/questions/79891/what-is-the-best-testing-tool-for-swing-based-applications You can try to use Cucumber and Swinger for writing functional acceptance tests in plain english for Swing GUI applications. Swinger uses Netbeans' Jemmy library under the hood to drive the app. Cucumber allows you to write tests like this:  Scenario: Dialog manipulation Given the frame ""SwingSet"" is visible And the frame ""SwingSet"" is the container When I click the menu ""File/About"" Then I should see the dialog ""About Swing!"" Given the dialog ""About Swing!"" is the container When I click the button ""OK"" Then I should not see the dialog ""About Swing!"" Take a look at this Swinger video demo to see it in action. Videolink is broken.  Sikuli: a GUI-tester using screenshots http://sikuli.org/  UISpec4J is pretty simple unbloated and extensible. It fits my purposes better than FEST.  We are considering jemmy to automate some of the GUI testing. Looks promising. Jemmy is a very solid framework and we are using it since more than 5 years very successfully.  I haven't used it personally but SwingUnit looks quite good. You can use it with jUnit and it isn't based on ""location of components"" (i.e. x and y co-ordinates). The only thing you may have to do with the NetBeans GUI Builder is set unique names for your components.  We're using QF-Test and are quite satisfied.  You can use Marathon : ""Marathon Integrated Testing Environment MarathonITE is an affordable easy-to-use and cross-platform Java/Swing™ GUI Test automation framework. You can use MarathonITE‘s inbuilt script recorder to create clean readable test scripts either in Python or Ruby. Advanced features like extract-method refactoring create-datadriven-tests and objectmap editing allows you to create maintainable resilient test suites.""  I'm currently using FEST. It works with JUnit and will also take screenshots of failed tests. It has default component hunting methods which look for the name of the component being tested (which need to be set manually) but you can also generate the testers for a given component by passing it the component. It moves in GitHub from [this post](http://fest.easytesting.org/archives/167). Fest swing is not being developed any more. It does not support java 7 either. Seems like the swing part of fest is totally dead!  I use java.awt.Robot. Is not nice is not easy but works every time. Pros: You are in control Very fast Build your own FWK Portable No external dependencies Cons: No nice GUI to build test You have to leave the GUI alone while you test Build your own FWK Difficult to change test code and create your first harness Now if you have the budget I would go for LoadRunner. Best in class. (Disclosure: relationship to the company that owns LR but I worked with LR before the relationship) You say ""build your own FWK"". What is a FWK? Framework my guess.",java swing testing automated-tests
60269,A,"How to implement draggable tab using Java Swing? How do I implement a draggable tab using Java Swing? Instead of the static JTabbedPane I would like to drag-and-drop a tab to different position to rearrange the tabs. EDIT: The Java Tutorials - Drag and Drop and Data Transfer. I am interested as well! Good question! I liked Terai Atsuhiro san's DnDTabbedPane but I wanted more from it. The original Terai implementation transfered tabs within the TabbedPane but it would be nicer if I could drag from one TabbedPane to another. Inspired by @Tom's effort I decided to modify the code myself. There are some details I added. For example the ghost tab now slides along the tabbed pane instead of moving together with the mouse. setAcceptor(TabAcceptor a_acceptor) should let the consumer code decide whether to let one tab transfer from one tabbed pane to another. The default acceptor always returns true. /** Modified DnDTabbedPane.java * http://java-swing-tips.blogspot.com/2008/04/drag-and-drop-tabs-in-jtabbedpane.html * originally written by Terai Atsuhiro. * so that tabs can be transfered from one pane to another. * eed3si9n. */ import java.awt.*; import java.awt.datatransfer.*; import java.awt.dnd.*; import java.awt.geom.*; import java.awt.image.*; import javax.swing.*; public class DnDTabbedPane extends JTabbedPane { public static final long serialVersionUID = 1L; private static final int LINEWIDTH = 3; private static final String NAME = ""TabTransferData""; private final DataFlavor FLAVOR = new DataFlavor( DataFlavor.javaJVMLocalObjectMimeType NAME); private static GhostGlassPane s_glassPane = new GhostGlassPane(); private boolean m_isDrawRect = false; private final Rectangle2D m_lineRect = new Rectangle2D.Double(); private final Color m_lineColor = new Color(0 100 255); private TabAcceptor m_acceptor = null; public DnDTabbedPane() { super(); final DragSourceListener dsl = new DragSourceListener() { public void dragEnter(DragSourceDragEvent e) { e.getDragSourceContext().setCursor(DragSource.DefaultMoveDrop); } public void dragExit(DragSourceEvent e) { e.getDragSourceContext() .setCursor(DragSource.DefaultMoveNoDrop); m_lineRect.setRect(0 0 0 0); m_isDrawRect = false; s_glassPane.setPoint(new Point(-1000 -1000)); s_glassPane.repaint(); } public void dragOver(DragSourceDragEvent e) { //e.getLocation() //This method returns a Point indicating the cursor location in screen coordinates at the moment TabTransferData data = getTabTransferData(e); if (data == null) { e.getDragSourceContext().setCursor( DragSource.DefaultMoveNoDrop); return; } // if /* Point tabPt = e.getLocation(); SwingUtilities.convertPointFromScreen(tabPt DnDTabbedPane.this); if (DnDTabbedPane.this.contains(tabPt)) { int targetIdx = getTargetTabIndex(tabPt); int sourceIndex = data.getTabIndex(); if (getTabAreaBound().contains(tabPt) && (targetIdx >= 0) && (targetIdx != sourceIndex) && (targetIdx != sourceIndex + 1)) { e.getDragSourceContext().setCursor( DragSource.DefaultMoveDrop); return; } // if e.getDragSourceContext().setCursor( DragSource.DefaultMoveNoDrop); return; } // if */ e.getDragSourceContext().setCursor( DragSource.DefaultMoveDrop); } public void dragDropEnd(DragSourceDropEvent e) { m_isDrawRect = false; m_lineRect.setRect(0 0 0 0); // m_dragTabIndex = -1; if (hasGhost()) { s_glassPane.setVisible(false); s_glassPane.setImage(null); } } public void dropActionChanged(DragSourceDragEvent e) { } }; final DragGestureListener dgl = new DragGestureListener() { public void dragGestureRecognized(DragGestureEvent e) { // System.out.println(""dragGestureRecognized""); Point tabPt = e.getDragOrigin(); int dragTabIndex = indexAtLocation(tabPt.x tabPt.y); if (dragTabIndex < 0) { return; } // if initGlassPane(e.getComponent() e.getDragOrigin() dragTabIndex); try { e.startDrag(DragSource.DefaultMoveDrop new TabTransferable(DnDTabbedPane.this dragTabIndex) dsl); } catch (InvalidDnDOperationException idoe) { idoe.printStackTrace(); } } }; //dropTarget = new DropTarget(this DnDConstants.ACTION_COPY_OR_MOVE new CDropTargetListener() true); new DragSource().createDefaultDragGestureRecognizer(this DnDConstants.ACTION_COPY_OR_MOVE dgl); m_acceptor = new TabAcceptor() { public boolean isDropAcceptable(DnDTabbedPane a_component int a_index) { return true; } }; } public TabAcceptor getAcceptor() { return m_acceptor; } public void setAcceptor(TabAcceptor a_value) { m_acceptor = a_value; } private TabTransferData getTabTransferData(DropTargetDropEvent a_event) { try { TabTransferData data = (TabTransferData) a_event.getTransferable().getTransferData(FLAVOR); return data; } catch (Exception e) { e.printStackTrace(); } return null; } private TabTransferData getTabTransferData(DropTargetDragEvent a_event) { try { TabTransferData data = (TabTransferData) a_event.getTransferable().getTransferData(FLAVOR); return data; } catch (Exception e) { e.printStackTrace(); } return null; } private TabTransferData getTabTransferData(DragSourceDragEvent a_event) { try { TabTransferData data = (TabTransferData) a_event.getDragSourceContext() .getTransferable().getTransferData(FLAVOR); return data; } catch (Exception e) { e.printStackTrace(); } return null; } class TabTransferable implements Transferable { private TabTransferData m_data = null; public TabTransferable(DnDTabbedPane a_tabbedPane int a_tabIndex) { m_data = new TabTransferData(DnDTabbedPane.this a_tabIndex); } public Object getTransferData(DataFlavor flavor) { return m_data; // return DnDTabbedPane.this; } public DataFlavor[] getTransferDataFlavors() { DataFlavor[] f = new DataFlavor[1]; f[0] = FLAVOR; return f; } public boolean isDataFlavorSupported(DataFlavor flavor) { return flavor.getHumanPresentableName().equals(NAME); } } class TabTransferData { private DnDTabbedPane m_tabbedPane = null; private int m_tabIndex = -1; public TabTransferData() { } public TabTransferData(DnDTabbedPane a_tabbedPane int a_tabIndex) { m_tabbedPane = a_tabbedPane; m_tabIndex = a_tabIndex; } public DnDTabbedPane getTabbedPane() { return m_tabbedPane; } public void setTabbedPane(DnDTabbedPane pane) { m_tabbedPane = pane; } public int getTabIndex() { return m_tabIndex; } public void setTabIndex(int index) { m_tabIndex = index; } } private Point buildGhostLocation(Point a_location) { Point retval = new Point(a_location); switch (getTabPlacement()) { case JTabbedPane.TOP: { retval.y = 1; retval.x -= s_glassPane.getGhostWidth() / 2; } break; case JTabbedPane.BOTTOM: { retval.y = getHeight() - 1 - s_glassPane.getGhostHeight(); retval.x -= s_glassPane.getGhostWidth() / 2; } break; case JTabbedPane.LEFT: { retval.x = 1; retval.y -= s_glassPane.getGhostHeight() / 2; } break; case JTabbedPane.RIGHT: { retval.x = getWidth() - 1 - s_glassPane.getGhostWidth(); retval.y -= s_glassPane.getGhostHeight() / 2; } break; } // switch retval = SwingUtilities.convertPoint(DnDTabbedPane.this retval s_glassPane); return retval; } class CDropTargetListener implements DropTargetListener { public void dragEnter(DropTargetDragEvent e) { // System.out.println(""DropTarget.dragEnter: "" + DnDTabbedPane.this); if (isDragAcceptable(e)) { e.acceptDrag(e.getDropAction()); } else { e.rejectDrag(); } // if } public void dragExit(DropTargetEvent e) { // System.out.println(""DropTarget.dragExit: "" + DnDTabbedPane.this); m_isDrawRect = false; } public void dropActionChanged(DropTargetDragEvent e) { } public void dragOver(final DropTargetDragEvent e) { TabTransferData data = getTabTransferData(e); if (getTabPlacement() == JTabbedPane.TOP || getTabPlacement() == JTabbedPane.BOTTOM) { initTargetLeftRightLine(getTargetTabIndex(e.getLocation()) data); } else { initTargetTopBottomLine(getTargetTabIndex(e.getLocation()) data); } // if-else repaint(); if (hasGhost()) { s_glassPane.setPoint(buildGhostLocation(e.getLocation())); s_glassPane.repaint(); } } public void drop(DropTargetDropEvent a_event) { // System.out.println(""DropTarget.drop: "" + DnDTabbedPane.this); if (isDropAcceptable(a_event)) { convertTab(getTabTransferData(a_event) getTargetTabIndex(a_event.getLocation())); a_event.dropComplete(true); } else { a_event.dropComplete(false); } // if-else m_isDrawRect = false; repaint(); } public boolean isDragAcceptable(DropTargetDragEvent e) { Transferable t = e.getTransferable(); if (t == null) { return false; } // if DataFlavor[] flavor = e.getCurrentDataFlavors(); if (!t.isDataFlavorSupported(flavor[0])) { return false; } // if TabTransferData data = getTabTransferData(e); if (DnDTabbedPane.this == data.getTabbedPane() && data.getTabIndex() >= 0) { return true; } // if if (DnDTabbedPane.this != data.getTabbedPane()) { if (m_acceptor != null) { return m_acceptor.isDropAcceptable(data.getTabbedPane() data.getTabIndex()); } // if } // if return false; } public boolean isDropAcceptable(DropTargetDropEvent e) { Transferable t = e.getTransferable(); if (t == null) { return false; } // if DataFlavor[] flavor = e.getCurrentDataFlavors(); if (!t.isDataFlavorSupported(flavor[0])) { return false; } // if TabTransferData data = getTabTransferData(e); if (DnDTabbedPane.this == data.getTabbedPane() && data.getTabIndex() >= 0) { return true; } // if if (DnDTabbedPane.this != data.getTabbedPane()) { if (m_acceptor != null) { return m_acceptor.isDropAcceptable(data.getTabbedPane() data.getTabIndex()); } // if } // if return false; } } private boolean m_hasGhost = true; public void setPaintGhost(boolean flag) { m_hasGhost = flag; } public boolean hasGhost() { return m_hasGhost; } /** * returns potential index for drop. * @param a_point point given in the drop site component's coordinate * @return returns potential index for drop. */ private int getTargetTabIndex(Point a_point) { boolean isTopOrBottom = getTabPlacement() == JTabbedPane.TOP || getTabPlacement() == JTabbedPane.BOTTOM; // if the pane is empty the target index is always zero. if (getTabCount() == 0) { return 0; } // if for (int i = 0; i < getTabCount(); i++) { Rectangle r = getBoundsAt(i); if (isTopOrBottom) { r.setRect(r.x - r.width / 2 r.y r.width r.height); } else { r.setRect(r.x r.y - r.height / 2 r.width r.height); } // if-else if (r.contains(a_point)) { return i; } // if } // for Rectangle r = getBoundsAt(getTabCount() - 1); if (isTopOrBottom) { int x = r.x + r.width / 2; r.setRect(x r.y getWidth() - x r.height); } else { int y = r.y + r.height / 2; r.setRect(r.x y r.width getHeight() - y); } // if-else return r.contains(a_point) ? getTabCount() : -1; } private void convertTab(TabTransferData a_data int a_targetIndex) { DnDTabbedPane source = a_data.getTabbedPane(); int sourceIndex = a_data.getTabIndex(); if (sourceIndex < 0) { return; } // if Component cmp = source.getComponentAt(sourceIndex); String str = source.getTitleAt(sourceIndex); if (this != source) { source.remove(sourceIndex); if (a_targetIndex == getTabCount()) { addTab(str cmp); } else { if (a_targetIndex < 0) { a_targetIndex = 0; } // if insertTab(str null cmp null a_targetIndex); } // if setSelectedComponent(cmp); // System.out.println(""press=""+sourceIndex+"" next=""+a_targetIndex); return; } // if if (a_targetIndex < 0 || sourceIndex == a_targetIndex) { //System.out.println(""press=""+prev+"" next=""+next); return; } // if if (a_targetIndex == getTabCount()) { //System.out.println(""last: press=""+prev+"" next=""+next); source.remove(sourceIndex); addTab(str cmp); setSelectedIndex(getTabCount() - 1); } else if (sourceIndex > a_targetIndex) { //System.out.println("" >: press=""+prev+"" next=""+next); source.remove(sourceIndex); insertTab(str null cmp null a_targetIndex); setSelectedIndex(a_targetIndex); } else { //System.out.println("" <: press=""+prev+"" next=""+next); source.remove(sourceIndex); insertTab(str null cmp null a_targetIndex - 1); setSelectedIndex(a_targetIndex - 1); } } private void initTargetLeftRightLine(int next TabTransferData a_data) { if (next < 0) { m_lineRect.setRect(0 0 0 0); m_isDrawRect = false; return; } // if if ((a_data.getTabbedPane() == this) && (a_data.getTabIndex() == next || next - a_data.getTabIndex() == 1)) { m_lineRect.setRect(0 0 0 0); m_isDrawRect = false; } else if (getTabCount() == 0) { m_lineRect.setRect(0 0 0 0); m_isDrawRect = false; return; } else if (next == 0) { Rectangle rect = getBoundsAt(0); m_lineRect.setRect(-LINEWIDTH / 2 rect.y LINEWIDTH rect.height); m_isDrawRect = true; } else if (next == getTabCount()) { Rectangle rect = getBoundsAt(getTabCount() - 1); m_lineRect.setRect(rect.x + rect.width - LINEWIDTH / 2 rect.y LINEWIDTH rect.height); m_isDrawRect = true; } else { Rectangle rect = getBoundsAt(next - 1); m_lineRect.setRect(rect.x + rect.width - LINEWIDTH / 2 rect.y LINEWIDTH rect.height); m_isDrawRect = true; } } private void initTargetTopBottomLine(int next TabTransferData a_data) { if (next < 0) { m_lineRect.setRect(0 0 0 0); m_isDrawRect = false; return; } // if if ((a_data.getTabbedPane() == this) && (a_data.getTabIndex() == next || next - a_data.getTabIndex() == 1)) { m_lineRect.setRect(0 0 0 0); m_isDrawRect = false; } else if (getTabCount() == 0) { m_lineRect.setRect(0 0 0 0); m_isDrawRect = false; return; } else if (next == getTabCount()) { Rectangle rect = getBoundsAt(getTabCount() - 1); m_lineRect.setRect(rect.x rect.y + rect.height - LINEWIDTH / 2 rect.width LINEWIDTH); m_isDrawRect = true; } else if (next == 0) { Rectangle rect = getBoundsAt(0); m_lineRect.setRect(rect.x -LINEWIDTH / 2 rect.width LINEWIDTH); m_isDrawRect = true; } else { Rectangle rect = getBoundsAt(next - 1); m_lineRect.setRect(rect.x rect.y + rect.height - LINEWIDTH / 2 rect.width LINEWIDTH); m_isDrawRect = true; } } private void initGlassPane(Component c Point tabPt int a_tabIndex) { //Point p = (Point) pt.clone(); getRootPane().setGlassPane(s_glassPane); if (hasGhost()) { Rectangle rect = getBoundsAt(a_tabIndex); BufferedImage image = new BufferedImage(c.getWidth() c.getHeight() BufferedImage.TYPE_INT_ARGB); Graphics g = image.getGraphics(); c.paint(g); image = image.getSubimage(rect.x rect.y rect.width rect.height); s_glassPane.setImage(image); } // if s_glassPane.setPoint(buildGhostLocation(tabPt)); s_glassPane.setVisible(true); } private Rectangle getTabAreaBound() { Rectangle lastTab = getUI().getTabBounds(this getTabCount() - 1); return new Rectangle(0 0 getWidth() lastTab.y + lastTab.height); } public void paintComponent(Graphics g) { super.paintComponent(g); if (m_isDrawRect) { Graphics2D g2 = (Graphics2D) g; g2.setPaint(m_lineColor); g2.fill(m_lineRect); } // if } public interface TabAcceptor { boolean isDropAcceptable(DnDTabbedPane a_component int a_index); } } class GhostGlassPane extends JPanel { public static final long serialVersionUID = 1L; private final AlphaComposite m_composite; private Point m_location = new Point(0 0); private BufferedImage m_draggingGhost = null; public GhostGlassPane() { setOpaque(false); m_composite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER 0.7f); } public void setImage(BufferedImage draggingGhost) { m_draggingGhost = draggingGhost; } public void setPoint(Point a_location) { m_location.x = a_location.x; m_location.y = a_location.y; } public int getGhostWidth() { if (m_draggingGhost == null) { return 0; } // if return m_draggingGhost.getWidth(this); } public int getGhostHeight() { if (m_draggingGhost == null) { return 0; } // if return m_draggingGhost.getHeight(this); } public void paintComponent(Graphics g) { if (m_draggingGhost == null) { return; } // if Graphics2D g2 = (Graphics2D) g; g2.setComposite(m_composite); g2.drawImage(m_draggingGhost (int) m_location.getX() (int) m_location.getY() null); } }  @Tony: It looks like Euguenes solution just overlooks preserving TabComponents during a swap. The convertTab method just needs to remember the TabComponent and set it to the new tabs it makes. Try using this:  private void convertTab(TabTransferData a_data int a_targetIndex) { DnDTabbedPane source = a_data.getTabbedPane(); System.out.println(""this=source? "" + (this == source)); int sourceIndex = a_data.getTabIndex(); if (sourceIndex < 0) { return; } // if //Save the tab's component title and TabComponent. Component cmp = source.getComponentAt(sourceIndex); String str = source.getTitleAt(sourceIndex); Component tcmp = source.getTabComponentAt(sourceIndex); if (this != source) { source.remove(sourceIndex); if (a_targetIndex == getTabCount()) { addTab(str cmp); setTabComponentAt(getTabCount()-1 tcmp); } else { if (a_targetIndex < 0) { a_targetIndex = 0; } // if insertTab(str null cmp null a_targetIndex); setTabComponentAt(a_targetIndex tcmp); } // if setSelectedComponent(cmp); return; } // if if (a_targetIndex < 0 || sourceIndex == a_targetIndex) { return; } // if if (a_targetIndex == getTabCount()) { source.remove(sourceIndex); addTab(str cmp); setTabComponentAt(getTabCount() - 1 tcmp); setSelectedIndex(getTabCount() - 1); } else if (sourceIndex > a_targetIndex) { source.remove(sourceIndex); insertTab(str null cmp null a_targetIndex); setTabComponentAt(a_targetIndex tcmp); setSelectedIndex(a_targetIndex); } else { source.remove(sourceIndex); insertTab(str null cmp null a_targetIndex - 1); setTabComponentAt(a_targetIndex - 1 tcmp); setSelectedIndex(a_targetIndex - 1); } }  Add this to isDragAcceptable to avoid Exceptions: boolean transferDataFlavorFound = false; for (DataFlavor transferDataFlavor : t.getTransferDataFlavors()) { if (FLAVOR.equals(transferDataFlavor)) { transferDataFlavorFound = true; break; } } if (transferDataFlavorFound == false) { return false; }  Found this code out there on the tubes: class DnDTabbedPane extends JTabbedPane { private static final int LINEWIDTH = 3; private static final String NAME = ""test""; private final GhostGlassPane glassPane = new GhostGlassPane(); private final Rectangle2D lineRect = new Rectangle2D.Double(); private final Color lineColor = new Color(0 100 255); //private final DragSource dragSource = new DragSource(); //private final DropTarget dropTarget; private int dragTabIndex = -1; public DnDTabbedPane() { super(); final DragSourceListener dsl = new DragSourceListener() { public void dragEnter(DragSourceDragEvent e) { e.getDragSourceContext().setCursor(DragSource.DefaultMoveDrop); } public void dragExit(DragSourceEvent e) { e.getDragSourceContext().setCursor(DragSource.DefaultMoveNoDrop); lineRect.setRect(0000); glassPane.setPoint(new Point(-1000-1000)); glassPane.repaint(); } public void dragOver(DragSourceDragEvent e) { //e.getLocation() //This method returns a Point indicating the cursor location in screen coordinates at the moment Point tabPt = e.getLocation(); SwingUtilities.convertPointFromScreen(tabPt DnDTabbedPane.this); Point glassPt = e.getLocation(); SwingUtilities.convertPointFromScreen(glassPt glassPane); int targetIdx = getTargetTabIndex(glassPt); if(getTabAreaBound().contains(tabPt) && targetIdx>=0 && targetIdx!=dragTabIndex && targetIdx!=dragTabIndex+1) { e.getDragSourceContext().setCursor(DragSource.DefaultMoveDrop); }else{ e.getDragSourceContext().setCursor(DragSource.DefaultMoveNoDrop); } } public void dragDropEnd(DragSourceDropEvent e) { lineRect.setRect(0000); dragTabIndex = -1; if(hasGhost()) { glassPane.setVisible(false); glassPane.setImage(null); } } public void dropActionChanged(DragSourceDragEvent e) {} }; final Transferable t = new Transferable() { private final DataFlavor FLAVOR = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType NAME); public Object getTransferData(DataFlavor flavor) { return DnDTabbedPane.this; } public DataFlavor[] getTransferDataFlavors() { DataFlavor[] f = new DataFlavor[1]; f[0] = this.FLAVOR; return f; } public boolean isDataFlavorSupported(DataFlavor flavor) { return flavor.getHumanPresentableName().equals(NAME); } }; final DragGestureListener dgl = new DragGestureListener() { public void dragGestureRecognized(DragGestureEvent e) { Point tabPt = e.getDragOrigin(); dragTabIndex = indexAtLocation(tabPt.x tabPt.y); if(dragTabIndex<0) return; initGlassPane(e.getComponent() e.getDragOrigin()); try{ e.startDrag(DragSource.DefaultMoveDrop t dsl); }catch(InvalidDnDOperationException idoe) { idoe.printStackTrace(); } } }; //dropTarget = new DropTarget(glassPane DnDConstants.ACTION_COPY_OR_MOVE new CDropTargetListener() true); new DragSource().createDefaultDragGestureRecognizer(this DnDConstants.ACTION_COPY_OR_MOVE dgl); } class CDropTargetListener implements DropTargetListener{ public void dragEnter(DropTargetDragEvent e) { if(isDragAcceptable(e)) e.acceptDrag(e.getDropAction()); else e.rejectDrag(); } public void dragExit(DropTargetEvent e) {} public void dropActionChanged(DropTargetDragEvent e) {} public void dragOver(final DropTargetDragEvent e) { if(getTabPlacement()==JTabbedPane.TOP || getTabPlacement()==JTabbedPane.BOTTOM) { initTargetLeftRightLine(getTargetTabIndex(e.getLocation())); }else{ initTargetTopBottomLine(getTargetTabIndex(e.getLocation())); } repaint(); if(hasGhost()) { glassPane.setPoint(e.getLocation()); glassPane.repaint(); } } public void drop(DropTargetDropEvent e) { if(isDropAcceptable(e)) { convertTab(dragTabIndex getTargetTabIndex(e.getLocation())); e.dropComplete(true); }else{ e.dropComplete(false); } repaint(); } public boolean isDragAcceptable(DropTargetDragEvent e) { Transferable t = e.getTransferable(); if(t==null) return false; DataFlavor[] f = e.getCurrentDataFlavors(); if(t.isDataFlavorSupported(f[0]) && dragTabIndex>=0) { return true; } return false; } public boolean isDropAcceptable(DropTargetDropEvent e) { Transferable t = e.getTransferable(); if(t==null) return false; DataFlavor[] f = t.getTransferDataFlavors(); if(t.isDataFlavorSupported(f[0]) && dragTabIndex>=0) { return true; } return false; } } private boolean hasGhost = true; public void setPaintGhost(boolean flag) { hasGhost = flag; } public boolean hasGhost() { return hasGhost; } private int getTargetTabIndex(Point glassPt) { Point tabPt = SwingUtilities.convertPoint(glassPane glassPt DnDTabbedPane.this); boolean isTB = getTabPlacement()==JTabbedPane.TOP || getTabPlacement()==JTabbedPane.BOTTOM; for(int i=0;i<getTabCount();i++) { Rectangle r = getBoundsAt(i); if(isTB) r.setRect(r.x-r.width/2 r.y r.width r.height); else r.setRect(r.x r.y-r.height/2 r.width r.height); if(r.contains(tabPt)) return i; } Rectangle r = getBoundsAt(getTabCount()-1); if(isTB) r.setRect(r.x+r.width/2 r.y r.width r.height); else r.setRect(r.x r.y+r.height/2 r.width r.height); return r.contains(tabPt)?getTabCount():-1; } private void convertTab(int prev int next) { if(next<0 || prev==next) { //System.out.println(""press=""+prev+"" next=""+next); return; } Component cmp = getComponentAt(prev); String str = getTitleAt(prev); if(next==getTabCount()) { //System.out.println(""last: press=""+prev+"" next=""+next); remove(prev); addTab(str cmp); setSelectedIndex(getTabCount()-1); }else if(prev>next) { //System.out.println("" >: press=""+prev+"" next=""+next); remove(prev); insertTab(str null cmp null next); setSelectedIndex(next); }else{ //System.out.println("" <: press=""+prev+"" next=""+next); remove(prev); insertTab(str null cmp null next-1); setSelectedIndex(next-1); } } private void initTargetLeftRightLine(int next) { if(next<0 || dragTabIndex==next || next-dragTabIndex==1) { lineRect.setRect(0000); }else if(next==getTabCount()) { Rectangle rect = getBoundsAt(getTabCount()-1); lineRect.setRect(rect.x+rect.width-LINEWIDTH/2rect.yLINEWIDTHrect.height); }else if(next==0) { Rectangle rect = getBoundsAt(0); lineRect.setRect(-LINEWIDTH/2rect.yLINEWIDTHrect.height); }else{ Rectangle rect = getBoundsAt(next-1); lineRect.setRect(rect.x+rect.width-LINEWIDTH/2rect.yLINEWIDTHrect.height); } } private void initTargetTopBottomLine(int next) { if(next<0 || dragTabIndex==next || next-dragTabIndex==1) { lineRect.setRect(0000); }else if(next==getTabCount()) { Rectangle rect = getBoundsAt(getTabCount()-1); lineRect.setRect(rect.xrect.y+rect.height-LINEWIDTH/2rect.widthLINEWIDTH); }else if(next==0) { Rectangle rect = getBoundsAt(0); lineRect.setRect(rect.x-LINEWIDTH/2rect.widthLINEWIDTH); }else{ Rectangle rect = getBoundsAt(next-1); lineRect.setRect(rect.xrect.y+rect.height-LINEWIDTH/2rect.widthLINEWIDTH); } } private void initGlassPane(Component c Point tabPt) { //Point p = (Point) pt.clone(); getRootPane().setGlassPane(glassPane); if(hasGhost()) { Rectangle rect = getBoundsAt(dragTabIndex); BufferedImage image = new BufferedImage(c.getWidth() c.getHeight() BufferedImage.TYPE_INT_ARGB); Graphics g = image.getGraphics(); c.paint(g); image = image.getSubimage(rect.xrect.yrect.widthrect.height); glassPane.setImage(image); } Point glassPt = SwingUtilities.convertPoint(c tabPt glassPane); glassPane.setPoint(glassPt); glassPane.setVisible(true); } private Rectangle getTabAreaBound() { Rectangle lastTab = getUI().getTabBounds(this getTabCount()-1); return new Rectangle(00getWidth()lastTab.y+lastTab.height); } public void paintComponent(Graphics g) { super.paintComponent(g); if(dragTabIndex>=0) { Graphics2D g2 = (Graphics2D)g; g2.setPaint(lineColor); g2.fill(lineRect); } } } class GhostGlassPane extends JPanel { private final AlphaComposite composite; private Point location = new Point(0 0); private BufferedImage draggingGhost = null; public GhostGlassPane() { setOpaque(false); composite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER 0.5f); } public void setImage(BufferedImage draggingGhost) { this.draggingGhost = draggingGhost; } public void setPoint(Point location) { this.location = location; } public void paintComponent(Graphics g) { if(draggingGhost == null) return; Graphics2D g2 = (Graphics2D) g; g2.setComposite(composite); double xx = location.getX() - (draggingGhost.getWidth(this) /2d); double yy = location.getY() - (draggingGhost.getHeight(this)/2d); g2.drawImage(draggingGhost (int)xx (int)yy  null); } } Could you add link to the source? http://java-swing-tips.blogspot.com/2008/04/drag-and-drop-tabs-in-jtabbedpane.html Done. You're right good to cite the source. I actually knew about this one and I was curious about the alternatives. For now I'll accept your answer.  Curses! Beaten to the punch by a Google search. Unfortunately it's true there is no easy way to create draggable tab panes (or any other components) in Swing. So whilst the example above is complete this one I've just written is a bit simpler. So it will hopefully demonstrate the more advanced techniques involved a bit clearer. The steps are: Detect that a drag has occurred Draw the dragged tab to an offscreen buffer Track the mouse position whilst dragging occurs Draw the tab in the buffer on top of the component. The above example will give you what you want but if you want to really understand the techniques applied here it might be a better exercise to round off the edges of this example and add the extra features demonstrated above to it. Or maybe I'm just disappointed because I spent time writing this solution when one already existed :p import java.awt.Component; import java.awt.Graphics; import java.awt.Image; import java.awt.Point; import java.awt.Rectangle; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import java.awt.event.MouseMotionAdapter; import java.awt.image.BufferedImage; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JTabbedPane; public class DraggableTabbedPane extends JTabbedPane { private boolean dragging = false; private Image tabImage = null; private Point currentMouseLocation = null; private int draggedTabIndex = 0; public DraggableTabbedPane() { super(); addMouseMotionListener(new MouseMotionAdapter() { public void mouseDragged(MouseEvent e) { if(!dragging) { // Gets the tab index based on the mouse position int tabNumber = getUI().tabForCoordinate(DraggableTabbedPane.this e.getX() e.getY()); if(tabNumber >= 0) { draggedTabIndex = tabNumber; Rectangle bounds = getUI().getTabBounds(DraggableTabbedPane.this tabNumber); // Paint the tabbed pane to a buffer Image totalImage = new BufferedImage(getWidth() getHeight() BufferedImage.TYPE_INT_ARGB); Graphics totalGraphics = totalImage.getGraphics(); totalGraphics.setClip(bounds); // Don't be double buffered when painting to a static image. setDoubleBuffered(false); paintComponent(totalGraphics); // Paint just the dragged tab to the buffer tabImage = new BufferedImage(bounds.width bounds.height BufferedImage.TYPE_INT_ARGB); Graphics graphics = tabImage.getGraphics(); graphics.drawImage(totalImage 0 0 bounds.width bounds.height bounds.x bounds.y bounds.x + bounds.width bounds.y+bounds.height DraggableTabbedPane.this); dragging = true; repaint(); } } else { currentMouseLocation = e.getPoint(); // Need to repaint repaint(); } super.mouseDragged(e); } }); addMouseListener(new MouseAdapter() { public void mouseReleased(MouseEvent e) { if(dragging) { int tabNumber = getUI().tabForCoordinate(DraggableTabbedPane.this e.getX() 10); if(tabNumber >= 0) { Component comp = getComponentAt(draggedTabIndex); String title = getTitleAt(draggedTabIndex); removeTabAt(draggedTabIndex); insertTab(title null comp null tabNumber); } } dragging = false; tabImage = null; } }); } protected void paintComponent(Graphics g) { super.paintComponent(g); // Are we dragging? if(dragging && currentMouseLocation != null && tabImage != null) { // Draw the dragged tab g.drawImage(tabImage currentMouseLocation.x currentMouseLocation.y this); } } public static void main(String[] args) { JFrame test = new JFrame(""Tab test""); test.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); test.setSize(400 400); DraggableTabbedPane tabs = new DraggableTabbedPane(); tabs.addTab(""One"" new JButton(""One"")); tabs.addTab(""Two"" new JButton(""Two"")); tabs.addTab(""Three"" new JButton(""Three"")); tabs.addTab(""Four"" new JButton(""Four"")); test.add(tabs); test.setVisible(true); } } You deserve a +1 for the effort :) +1! It worked but it's a little buggy. If you drag the tab too it makes a mess.",java gui swing tabs
431663,A,"VisualEditor in Java - dynamically build sub-panel? I'm using the ""Visual Editor"" to ""paint"" my Swing GUI. Can I dynamically build the contents of a sub-panel with VE or do I have to use a predefined sub-class of JPanel (and build that with VE)? You can dynamically build the contents of a sub panel - say based on a file or soemthing - the visual editor is not going to stop you. Generally VE is intelligent enough to see that you are dynamically build the panel and show the contents (say contents of a file in a JList) Sometimes VE fails to render the items because 'The control is too complex' - but this does not happen frequently. Tried to clarify the question .. want to build the whole GUI with VE including a sub-panel (with boarders) and the widgets in the sub-panel. I assume that you want a panel a sub panel and a lot of widgets in them: I dont see any problem in doing this - should be straightforward without requiring any subclass of JPanel (just for this purpose).",java swing panel visual-editor
340981,A,Send a JPanel to the printer Is it possible to just send a JPanel or any other component to the printer? Or do I have to implement all the drawing to the graphics object by hand? I have tried to use the Print* functions of the JPanel to print to the graphics object but the page that gets printed is blank. This tutorial mentions translating the Graphics object. Have you tried that?  Check out the Java printing API and tutorial along with JComponent.print(Graphics). Here is a rudimentary class which will print any component which fits on 1 page (I can't take credit for this I got the code from Marty Hall's tutorial): package dol.lpc.lib.gui; import java.awt.*; import java.awt.print.*; import javax.swing.*; /** * Generic component printer. This object allows any AWT or Swing component (or DCT system) * to be printed by performing it pre and post print responsibilities. * <p> * When printing components the role of the print method is nothing more than to scale the Graphics turn off double * buffering and call paint. There is no particular reason to put that print method in the component being printed. A * better approach is to build a generic printComponent method to which you simply pass the component you want printed. * <p> * With Swing almost all components have double buffering turned on by default. In general this is a great benefit * making for convenient and efficient painting. However in the specific case of printing it can is a huge problem. * First since printing components relies on scaling the coordinate system and then simply calling the component's * paint method if double buffering is enabled printing amounts to little more than scaling up the buffer (off-screen * image) which results in ugly low-resolution printing like you already had available. Secondly sending these huge * buffers to the printer results in huge print spooler files which take a very long time to print. Consequently this * object globally turns off double buffering before printing and turns it back on afterwards. * <p> * Threading Design : [x] Single Threaded [ ] Threadsafe [ ] Immutable [ ] Isolated */ public class ComponentPrinter extends Object implements Printable { // ***************************************************************************** // INSTANCE PROPERTIES // ***************************************************************************** private Component component; // the component to print // ***************************************************************************** // INSTANCE CREATE/DELETE // ***************************************************************************** public ComponentPrinter(Component com) { component=com; } // ***************************************************************************** // INSTANCE METHODS // ***************************************************************************** public void print() throws PrinterException { PrinterJob printJob=PrinterJob.getPrinterJob(); printJob.setPrintable(this); if(printJob.printDialog()) { printJob.print(); } } public int print(Graphics gc PageFormat pageFormat int pageIndex) { if(pageIndex>0) { return NO_SUCH_PAGE; } RepaintManager mgr=RepaintManager.currentManager(component); Graphics2D g2d=(Graphics2D)gc; g2d.translate(pageFormat.getImageableX()pageFormat.getImageableY()); mgr.setDoubleBufferingEnabled(false); // only for swing components component.paint(g2d); mgr.setDoubleBufferingEnabled(true); // only for swing components return PAGE_EXISTS; } // ***************************************************************************** // STATIC METHODS // ***************************************************************************** static public void printComponent(Component com) throws PrinterException { new ComponentPrinter(com).print(); } } // END PUBLIC CLASS,java swing printing
156912,A,"Sending a keyboard event from java to any application (on-screen-keyboard) I am working on developing an on-screen keyboard with java. This keyboard has a JComponent for every possible key. When a mouse down is detected on the button I want to send a specific keyboard code to the application currently on focus. The keyboard itself is within a JFrame with no decorations and set to always-on-top. I found that the Robot class can be used to simulate these keyboard events on the native queue. However in this case selecting the JComponent would mean that the key-press is received on the JFrame and I wouldn't be able to receive it in the other application How can I keep my on-screen keyboard ""Always-without-focus""? Is it maybe possible to use another approach to send the key-press? The only solution I could find so far is to make every key a JComponent (so it can not have focus) and set the following properties on the JFrame:  setUndecorated(true); setFocusableWindowState(false); setFocusable(false); enableInputMethods(false); Now when using the robot class I can send events to any focused window by clicking on the keys. The only limitation is that it only seems to work for windows that belong to the same virtual machine and it doesn't work at all with any other system window.  I found jnativehook when I was trying to control a gamebot with actual keyboard and mouse commands (to be more ""human-like"").  have you tried to call native setfocus() or setactivewindow() functions to move focus before you use robot class?  Apparently the only way to do this is to have a JNI layer that will make the conversion from java to native. Java has no easy way to provide such funcionality. This could be an interesting concept for a small third party library for someone who wants to learn JNI...  I am not aware of any way of doing this in OS independent way. I don't know about Windows but it would be possible talk with X server over the X protocol.",java events swing keyboard jni
246228,A,"Why does my application still run after closing main window? If I make a JFrame like this public static void main(String[] args) { new JFrame().setVisible(true); } then after closing the window the appication doesn't stop (I need to kill it). What is the proper way of showing application's main windows ? I'd also like to know a reason of a proposed solution. Thanks in advance. There's a difference between the application window and the application itself... The window runs in its own thread and finishing main() will not end the application if other threads are still active. When closing the window you should also make sure to close the application possibly by calling System.exit(0); Yuval =8-)  You should call the setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); on your JFrame. Example code: public static void main(String[] args) { Runnable guiCreator = new Runnable() { public void run() { JFrame fenster = new JFrame(""Hallo Welt mit Swing""); fenster.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); fenster.setVisible(true); } }; SwingUtilities.invokeLater(guiCreator); } Why should it be the default behavior? Many applications create multiple windows. If that were the default you'd have to change it whenever you create a new window. I hate Java sometimes. That should be the default behaviour in my opinion. Ok i found the reason - there are two additional AWT threads running and that's why my application doesn't end when the ""main"" method ends. I always forget that JFrame is nonmodal and creates those threads. totally agree that dispose_on_close should be the default. For instance you need to also setDefaultcloseOperation for modal dialogs or they'll hang around and disallow your app from exiting. yikes.  You must dispose the frame invoking the dispose method in your window listener or using setDefaultCloseOperation. For the argument of the last one you can use two options: DISPOSE_ON_CLOSE or EXIT_ON_CLOSE. DISPOSE_ON_CLOSE only dispose the frame resources. EXIT_ON_CLOSE disposes the frame resources and then invokes System.exit. There is no real difference between the two unless you have non daemon threads. I prefer to use DISPOSE_ON_CLOSE because this way I'm able to notice if I forgot to terminate a thread because the JVM will stop if there are no more threads running. That's also the reason closing a Frame without disposing will not terminate the application since Swing creates a thread to handle events that is terminated only when dispose is invoked.  You can set a window listener to the frame so the program terminates after you close it.  frame.addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent e) { System.exit(0); } }",java swing
259889,A,"Swing components : vertical text question If I have a button like the one in this image : http://www.freeimagehosting.net/image.php?4cd775814c.png how could I make the text display itself vertically ? As in  j B u t t o n 1 I would like to know how to do the same thing for JLabel . I'm sure there has to be a better way than to create as many labels as there are characters in the string . Right ? EDIT: how can I insert an image into my post ? The button for the image shows the image in the preview section  but when I actually post the data  I only get some text back  like the tags are getting messed up . You can use HTML for JButton or JLabel. So button = new JButton(""<html>J<br>b<br>u<br>t<br>t<br>o<br>n<br>1</html>""); should do the trick.  I don't know if this is useful to you but this sample shows how to make a vertical label. The difference is that it rotates all of the text (and/or the icon) instead of stacking the letters. I don't know how difficult it would be to modify it to do what you're asking. The advantage of doing it this way is if your labels can change at runtime; generating big HTML strings might be a pain compared to a simple label.setUI(new VerticalLabelUI(true)); (and you don't have to worry about <> in the label text).",java swing customization jcomponent
456742,A,"How can I create a Java/Swing text component that is both styled and has a custom font? How can I create a Java/Swing text component that is both styled and has a custom font? I want to highlight a small portion of the text in red but at the same time use a custom (embedded via Font.createFont) font. JLabel accepts HTML text which allows me to highlight a portion of the text but it ignores font settings when rendering HTML. Other text components such as JTextArea will use the custom font but they won't render HTML. What's the easiest way to do both? Here's an example of using JTextPane unsuccessfully:  JTextPane textPane = new JTextPane(); textPane.setFont(myCustomFont); textPane.setText(text); MutableAttributeSet attributes = new SimpleAttributeSet(); StyleConstants.setForeground(attributes Color.RED); textPane.getStyledDocument().setCharacterAttributes( text.indexOf(toHighlight) toHighlight.length() attributes true ); This successfully displays the text with the ""toHighlight"" portion highlighted in red but it doesn't use myCustomFont. Note that I could set a String font with StyleConstants.setFontFamily() but not a custom font. OK I see the problem better now. After checking some Swing source code it is clear you cannot use the DefaultStyledDocument and have it use a physical font (one you created yourself with createFont) out of the box. However what I think you could do is implement your own StyleContext this way: public class MyStyleContext extends javax.swing.text.StyleContext { @Override public Font getFont(AttributeSet attr) { Font font = attr.getAttribute(""MyFont""); if (font != null) return font; else return super.getFont(attr); } } Then you have to: create a DefaultStyledDocument with a new MyStyleContext() ""attach"" it to the JTextPane call attributes.addAttribute(""MyFont"" myCustomFont); in your snippet above I did not try it but I think it should work or it might be a good path to investigate. Awesome thanks! I'll give it a shot. Worked perfectly. Code sample below. Thanks again. :)  jfpoilpret's solution worked perfectly! For posterity's sake here's a working code snippet:  JTextPane textPane = new JTextPane(); textPane.setStyledDocument(new DefaultStyledDocument(new StyleContext() { @Override public Font getFont(AttributeSet attr) { return myCustomFont; } })); textPane.setText(text); MutableAttributeSet attributes = new SimpleAttributeSet(); StyleConstants.setForeground(attributes Color.RED); textPane.getStyledDocument().setCharacterAttributes( text.indexOf(toHighlight) toHighlight.length() attributes true ); Thanks jfpoilpret!  You should try to use JEditorPane or JTextPane instead. They allow rich style in the content at the price of a more complex API. Unfortunately if you are in search of a pixel-prefect UI they also have an additional problem: they don't support baseline-alignment (Java 6 feature). I've tried both of those but still with the same problem. If I use StyledDocument it ignores any font settings I have and insists that I set fonts using ""FontFamily"" which only allows a String--not a custom Font. Could you show a snippet that shows what you've done with StyledDocument and that doesn't work? I've added a more detailed example to the question. Hopefully that will help clear up what I'm trying to do.  I had the same problem when writing a program in Clojure ie. using fonts loaded from TTF in a JEditorPane displaying HTML text. The solution here worked all right - I copy the interesting part here for future reference: (def font1 (with-open [s (FileInputStream. ""SomeFont.ttf"")] (.deriveFont (Font/createFont Font/TRUETYPE_FONT s) (float 14)))) (def font2 (Font. ""SansSerif"") Font/PLAIN 14) (let [editor (JEditorPane. ""text/html"" """")] (.setDocument editor (proxy [HTMLDocument] [] (getFont [attr] (if (= (.getAttribute attr StyleConstants/FontFamily) ""MyFont"") font1 font2))))) This assumes that the HTML document refers to a font-family ""MyFont"" e.g. with a CSS snippet like p { font-family: ""MyFont"" } Note that with this you have to handle all font requests. This is because of the limitation of proxy not being able to call the member functions of the superclass. Also if you want to handle different font sizes you have to do that ""manually"" checking the StyleConstants/FontSize attribute and creating a font with deriveFont accordingly. I hope this will help somebody :)",java swing fonts
330590,A,"Why is itemStateChanged on JComboBox is called twice when changed? I'm using a JComboBox with an ItemListener on it. When the value is changed the itemStateChanged event is called twice. The first call the ItemEvent is showing the original item selected. On the second time it is showing the item that has been just selected by the user. Here's some tester code: public Tester(){ JComboBox box = new JComboBox(); box.addItem(""One""); box.addItem(""Two""); box.addItem(""Three""); box.addItem(""Four""); box.addItemListener(new ItemListener(){ public void itemStateChanged(ItemEvent e){ System.out.println(e.getItem()); } }); JFrame frame = new JFrame(); frame.getContentPane().add(box); frame.pack(); frame.setVisible(true); } So when I changed the Combo box once from ""One"" to ""Three"" the console shows: One Three Is there a way I can tell using the ItemEvent maybe that it's the second item (ie. the user selected item)? And if someone can explain why it gets called twice that would be nice too! Thanks Have a look at this source: import javax.swing.*; import java.awt.*; import java.awt.event.*; public class Tester { public Tester(){ JComboBox box = new JComboBox(); box.addItem(""One""); box.addItem(""Two""); box.addItem(""Three""); box.addItem(""Four""); box.addItemListener(new ItemListener(){ public void itemStateChanged(ItemEvent e){ System.out.println(e.getItem() + "" "" + e.getStateChange() ); } }); JFrame frame = new JFrame(); frame.getContentPane().add(box); frame.pack(); frame.setVisible(true); } public static void main(String [] args) { Tester tester = new Tester(); } } Use the getStateChange to determine if an item is selected or deselected It's generally good practice to ignore the event and look to see what the actual state is.  The code is: public class Tester { private JComboBox box; public Tester() { box = new JComboBox(); box.addItem(""One""); box.addItem(""Two""); box.addItem(""Three""); box.addItem(""Four""); box.addItemListener(new ItemListener() { public void itemStateChanged(ItemEvent e) { if (e.getStateChange() == 1) { JOptionPane.showMessageDialog(box e.getItem()); System.out.println(e.getItem()); } } }); JFrame frame = new JFrame(); frame.getContentPane().add(box); frame.pack(); frame.setVisible(true); } }  JComboBox.setFocusable(false) will do the trick. this is not answering the question. IT still getting the same result: two event occured.  I wanted to get the index string after selected and set in combobox  comboBox1.addItemListener(new ItemListener() { @Override public void itemStateChanged(ItemEvent e) { if(e.getStateChange() == ItemEvent.SELECTED) { comboBox1ItemStateChanged(); } } });  Yo can do it like this: import java.awt.event.*; jComboBox1.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { System.out.println(""Hello""); } }); accepted of course! :D  According to this thread It gets tripped when you leave one result and then called again when set to another result Don't listen for itemStateChanged. Use an ActionListener instead which is good for handling events of the combo. You need a ItemStateListener if you need to separately handle deselection / selection depending on the item involved. Changing the state of the item within itemStateChanged causes itemStateChanged to be fired... this called ""reentrance"". Your answer really helped! Thank you so much! you may also take note that if : We do removeAll() method from a ComboBox the result is that it will also calling twice....  private void dropDown_nameItemStateChanged(java.awt.event.ItemEvent evt) { if(evt.getStateChange() == ItemEvent.SELECTED) { String item = (String) evt.getItem(); System.out.println(item); } } Good Luck!",java swing
212009,A,"Do I have to explicitly call System.exit() in a Webstart application? Recently I converted a Swing application to Webstart. The process was pretty straightforward but I found that after I close all windows my application's JVM did not terminate. The thread dump showed that there are a couple of non-daemon threads notably Swing's EDT AWT and a couple of websart related threads. The actual strategy used is that each window increments a counter when it is created and decrements one when it is closed. The default close operation is DISPOSE_ON_CLOSE. Wen the counter reaches zero I stop all threadpools and release all JNI resources. When I launched the application from a bat file (same JARs) it terminated fine when all windows were closed so I figured that the problem has something to do with Webstart. Now the questions: Can anybody tell me what exactly is happening? Why does Webstart leave zombie JVMs? Is there a way to release the Webstart resources explicitly without halting the JVM? I've always had the opinion that calling System.exit() encourages the sloppy practice of not releasing your resources and relying on the OS to clean up after you (which can lead to nasty surprises if you reuse the code later)... am I missing something? See also the followup question for detecting whether the app has been launched by Webstart. The AWT EDT is usually the culprit. For some years now it has had some logic to shutdown when there are no undisposed windows. However there are recurrent problems with leaks including within the implementation of AWT and Swing. Therefore I strongly suggest using System.exit in production releases (you might possibly want to leave it out for some testing to detect leaks). The WebStart thread should all be daemon when there are no system windows (console javax.jnlp services and other dialogs) showing. Can you give an example for a leak within Swing (i.e. allocating resource which can not be released using the public API)?  Because of bugs in WebStart yes. WebStart starts up a ""secure thread"" for it's own purposes that interacts with the EDT. This SecureThread prevents the automatic termination of the Java process one would expect when all windows and AWT resources are disposed. For more information see http://www.pushing-pixels.org/?p=232 Thanks the link explains everything I wanted to know. Is there any bug parade ticket that I can vote on? (if yes please post the reply as a comment to the main question)  Consider attaching with jconsole and get a look at what the JVM is doing.  Webstart starts the Console window (you may be able to disable that). The console window is used to see stdout/err of the webstart process as well as rudimentary log/debug but has the side effect of created a top-level AWT/Swing window. Since the AWT/EDT only ends when the LAST window is disposed the console window is holding up your application. You should probably call System.exit() to be 100% sure your application exits (unless you can gurantee a certain client configuration webstart console turned off) nope. the default configuration is no console window. no windows on the screen whatsoever (empty taskbar alt+esc does not do anything)  I experience the same issue with web start. If i turn off java console the process does not hang up. Any known bug id from Sun?",java swing java-web-start
66455,A,"Is there an easy way to change the behavior of a Java/Swing control when it gets focus? For most GUI's I've used when a control that contains text gets the focus the entire contents of the control are selected. This means if you just start typing you completely replace the former contents. Example: You have spin control that is initialized with the value zero. You tab to it and type ""1"" The value in the control is now 1. With Swing this doesn't happen. The text in the control is not selected and the carat appears at one end or another of the existing text. Continuing the above example: With a Swing JSpinner when you tab to the spin control the carat is at the left. You type ""1"" and the value in the control is now 10. This drives me (and my users) up a wall and I'd like to change it. Even more important I'd like to change it globally so the new behavior applies to JTextField JPasswordField JFormattedTextField JTextArea JComboBox JSpinner and so on. The only way I have found to do this to add a FocusAdapter to each control and override the focusGained() method to Do The Right Thing[tm]. There's gotta be an easier and less fragile way. Please? EDIT: One additional piece of information for this particular case. The form I am working with was generated using Idea's form designer. That means I normally don't actually write the code to create the components. It is possible to tell Idea that you want to create them yourself but that's a hassle I'd like to avoid. Motto: All good programmers are basically lazy. I found an solution that satisfies my needs. It's posted as an answer. When I've needed this in the past I've created subclasses of the components I wanted to add ""auto-clearing"" functionality too. eg: public class AutoClearingTextField extends JTextField { final FocusListener AUTO_CLEARING_LISTENER = new FocusListener(){ @Override public void focusLost(FocusEvent e) { //onFocusLost(e); } @Override public void focusGained(FocusEvent e) { selectAll(); } }; public AutoClearingTextField(String string) { super(string); addListener(); } private void addListener() { addFocusListener(AUTO_CLEARING_LISTENER); } } The biggest problem is that I haven't found a ""good"" way to get all the standard constructors without writing overrides. Adding them and forcing a call to addListener is the most general approach I've found. Another option is to watch for ContainerEvents on a top-level container with a ContainerListeer to detect the presence of new widgets and add a corresponding focus listener based on the widgets that have been added. (eg: if the container event is caused by adding a TextField then add a focus listener that knows how to select all the text in a TextField and so on.) If a Container is added then you need to recursively add the ContainerListener to that new sub-container as well. Either way you won't need to muck about with focus listeners in your actual UI code -- it will all be taken care of at a higher level.  I haven't tried this myself (only dabbled in it a while ago) but you can probably get the current focused component by using: KeyboardFocusManager (there is a static method getCurrentKeyboardFocusManager()) an adding a PropertyChangeListener to it. From there you can find out if the component is a JTextComponent and select all text. +1 In my experience this is the best solution if you have many controls and/or use a visual form designer.  A separate class that attaches a FocusListener to the desired text field can be written. All the focus listener would do is call selectAll() on the text widget when it gains the focus. public class SelectAllListener implements FocusListener { private static INSTANCE = new SelectAllListener(); public void focusLost(FocusEvent e) { } public void focusGained(FocusEvent e) { if (e.getSource() instanceof JTextComponent) { ((JTextComponent)e.getSource()).selectAll(); } }; public static void addSelectAllListener(JTextComponent tc) { tc.addFocusListener(INSTANCE); } public static void removeSelectAllListener(JTextComponent tc) { tc.removeFocusListener(INSTANCE); } } By accepting a JTextComponent as an argument this behavior can be added to JTextArea JPasswordField and all of the other text editing components directly. This also allows the class to add select all to editable combo boxes and JSpinners where your control over the text editor component may be more limited. Convenience methods can be added: public static void addSelectAllListener(JSpinner spin) { if (spin.getEditor() instanceof JTextComponent) { addSelectAllListener((JTextComponent)spin.getEditor()); } } public static void addSelectAllListener(JComboBox combo) { JComponent editor = combo.getEditor().getEditorComponent(); if (editor instanceof JTextComponent) { addSelectAllListener((JTextComponent)editor); } } Also the remove listener methods are likely unneeded since the listener contains no exterior references to any other instances but they can be added to make code reviews go smoother.  After reading the replies so far (Thanks!) I passed the outermost JPanel to the following method: void addTextFocusSelect(JComponent component){ if(component instanceof JTextComponent){ component.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent event) { super.focusGained(event); JTextComponent component = (JTextComponent)event.getComponent(); // a trick I found on JavaRanch.com // Without this some components don't honor selectAll component.setText(component.getText()); component.selectAll(); } }); } else { for(Component child: component.getComponents()){ if(child instanceof JComponent){ addTextFocusSelect((JComponent) child); } } } } It works!  The only way I know is to create a FocusListener and attach it to your component. If you want it this FocusListener to be global to all components in your application you might consider using Aspect Oriented Programming (AOP). With AOP is possible to code it once and apply your focus listener to all components instantiated in your app without having to copy-and-paste the component.addFocusListener(listener) code throughout your application.. Your aspect would have to intercept the creation of a JComponent (or the sub-classes you want to add this behaviour to) and add the focus listener to the newly created instance. The AOP approach is better than copy-and-pasting the FocusListener to your entire code because you keep it all in a single piece of code and don't create a maintenance nightmare once you decide to change your global behavior like removing the listener for JSpinners. There are many AOP frameworks out there to choose from. I like JBossAOP since it's 100% pure Java but you might like to take a look at AspectJ.",java gui swing
69927,A,"Best way for a Swing GUI to communicate with domain logic? I have some domain logic implemented in a number of POJOs. I want to write a Swing user interface to allow the user to initiate and see the results of various domain actions. What's the best pattern/framework/library for communications between the UI and the domain? This boils down into: the UI being able to convert a user gesture into a domain action the domain being able to send state/result information back to the UI for display purposes I'm aware of MVC as a broad concept and have fiddled with the Observer pattern (whose Java implementation has some drawbacks if I understand correctly) but I'm wondering if there's an accepted best practise for this problem? Definitely MVC - something like this example which clearly splits things out. The problem with the Swing examples is that they seem to show the MVC all working within the swing stuff which does not seem right to me That article looks really well written; I'll check it out and see how I go.  MVC is fantastic for an individual widget however it gets a little unruly when you have ""pages"" and ""forms"" with lots of widgets. One thing that might be worth looking into (and I'm not endorsing it I haven't actually used it just implemented something very similar for myself) is the Beans Binding Framework (JSR295)  I have used the Observer pattern (using AspectJ magic) in the past with some success but found that unless you were careful it quickly became a cluster.. uhh.. flick? It quickly became hard to manage and most importantly extremely hard to debug. Edit: To expand slightly on my answer we were using SWT not Swing so YMMV. We basically used AspectJ to hook up the transference of data from the UI components to the model objects. These model objects were dumb POJOs. Actual business logic was done by 'watching' the model objects with AspectJ and firing off the required event if they changed. So if you changed a value in a textbox AspectJ would fire and copy that value into a POJO. If that field in the POJO had an event on it for business logic that would then fire. If that logic modified any POJOs (and it could) AspectJ would notice and copy the value from the POJO into the UI component. I think you're confusing POJOs (http://en.wikipedia.org/wiki/POJO) with JavaBeans. The latter are dumb data stores but the former may indeed be rich domain types with the full range of behaviour/logic. The ""plain"" bit of POJO simply indicates no dependency on any specific framework or technology. Yeah my bad. Updated post to reflect :) @Andrew Swan: I believe you mean the _former_ are dumb data stores but the _latter_ may indeed be rich domain types with the full range of behavior/logic. I've re-read my comment and it says what I meant it to say.",java gui swing
