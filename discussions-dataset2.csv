2594090,A,"mysql error in php i'm trying to run this php code which should display a quote from mysql but can't figure out where is it going wrong. the result variable is null or empty. can someone help me out. thanks! <?php include 'config.php'; // 'text' is the name of your table that contains // the information you want to pull from $rowcount = mysql_query(""select count(*) as rows from quotes""); // Gets the total number of items pulled from database. while ($row = mysql_fetch_assoc($rowcount)) { $max = $row[""rows""]; //print_r ($max); } // Selects an item's index at random $rand = rand(1$max)-1; print_r ($rand); $result = mysql_query(""select * from quotes limit $rand 1"") or die ('Error: '.mysql_error()); if (!$result or mysql_num_rows($result)) { echo ""Empty""; } else{ while ($row = mysql_fetch_array($result)) { $randomOutput = $row['cQuotes']; echo '<p>' . $randomOutput . '</p>'; } } Seems like you have an unnecessary query in there. Try this instead and cut out some code: `SELECT * FROM quotes ORDER BY rand() LIMIT 1` The performance drawbacks of `ORDER BY Rand() LIMIT 1` have been discussed numerous times here on SO and all over the internet... http://stackoverflow.com/search?q=mysql+rand @VolkerK - Indeed there are performance drawbacks but that doesn't preclude it from being a viable option in difference scenarios. if ($result && mysql_num_rows($result) > 0) { while ($row = mysql_fetch_array($result)) { $randomOutput = $row['cQuotes']; echo '<p>' . $randomOutput . '</p>'; } } else { echo ""Empty""; } thanks! that worked!  $result = mysql_query(""SELECT * FROM quotes ORDER BY rand() LIMIT 1"") or die ('Error: '.mysql_error()); if (!$result || mysql_num_rows($result) == 0) echo ""Empty""; else { while ($row = mysql_fetch_array($result)) { $randomOutput = $row['cQuotes']; echo '<p>' . $randomOutput . '</p>'; } }  // your script probably can't go on without this file? require 'config.php'; // I prefer to always pass the connection resource to mysql_query/mysql_real_escape_string // assume $mysql = mysql_connect.... $result = mysql_query(""SELECT Count(*) AS rows FROM quotes"" $mysql) or die(mysql_error()); // there's only one row with only one column so mysql_result() is fine $rowcount = mysql_result($result 0 0); $rand = rand(0$rowcount-1); $result = mysql_query(""SELECT cQuotes FROM quotes LIMIT $rand 1"" $mysql) or die ('Error: '.mysql_error()); // there's either one or zero records. Again no need for a while loop $row = mysql_fetch_array($result MYSQL_ASSOC); if ( !$row ) { echo ""Empty""; } else{ // do you have to treat $row['cQuotes'] with htmlspecialchars()? echo '<p>' $row['cQuotes'] '</p>'; } thank you! this was helpful.",php sql database mysql
2202888,A,"MySQL database setup help I am making a classifieds website... I have these 6 tables: Every category has sub-categories (or options) which you can see below. Lets say the user wants to post a classified and has entered all info into the forms necessary and I am at the stage where I have to create the PHP code to actually INSERT the data into the database. I am thinking something like this: mysql_query(""INSERT INTO classifieds (classified_id ad_id poster_id cat_id area_id headline description) VALUES ($classified_id '$ad_id' $poster_id $cat_id $area_id '$headline' '$description')""); But I don't know where to take it from here... I think the posters table should not be like this because how should I determine what the poster_id should be? Or should I set it to auto-increment? Remember this posters may not log in or anything so there is no problem with one person having multiple poster_table records if you know what I mean. classified_id is a random unique value generated by PHP so that is always unique. Please guide me! I don't know how to link the tables together correctly. If you have any Q let me know and I will update this Q! category table: cat_id (PK) cat_name category_options table: option_id (PK) cat_id (FK) option_name option_values table: value_id (PK) option_id (FK) value classifieds table: classified_id (PK) ad_id (VARCHAR) something like ""Bmw330ci_28238239832"" which will appear in URL poster_id (FK) cat_id (FK) area_id (FK) headline description price etc.... posters table: poster_id (PK) name email tel password area table: area_id (PK) area community You've got the right idea already. When someone creates a post and enters their personal info FIRST insert the ""poster"" record into the posters table. The ""poster_id"" primary key for that table should be an auto_increment field. Next get the ID of the new poster you just created using PHP's ""mysql_insert_id"". That integer value will be the number you put in the ""poster_id"" foreign key field in the ""classifieds"" table. Structurally your database schema is looking pretty good.  You should usually set the primary key to an auto-increment field. When you have linked tables and you need to join on the id you can first insert into the main table and then use the function mysql_insert_id to retrieve the id of the element you just inserted. You can then insert into the other table using this value as the foreign key. This is a very standard way to do things so it should be fine for you. But I have a primary key in every table do they all have to be AI? They don't have to be but it's almost always a good idea to have the primary key as an auto-increment. One obvious exception is when you have an intermediate table then you only need the two foreign keys and no extra column for the primary key. I don't think you have such a table in your schema though so it doesn't matter. so in my case what would you set to primary? I mean the cat_id couldn't be PK right? because there are 15 categories I have which are constant (ie set by me non-changeable)... If you've defined some fixed ID's in your code then you can use those as a primary key but if there's any chance ever that you might have to change those ids then it wouldn't hurt to add an extra column with an auto-increment id as the PK and use that in all joins. Changing a PK once your system is live is a painful experience. You should avoid using a PK that might one day need to change.",php sql mysql database
2226997,A,"query_cache_min_res_unit; What is it and what does it do? I am setting up cache in MySQL. Could someone please explain query_cache_min_res_unit? What does it do etc? I have read the manual and it doesn't explain so good. Details are appreciated... Or examples... Thanks query_cache_min_res_unit is a variable which may be used for optimization queries depending on large of result sets you may be working with. By definition the value is the minimum amount of memory MySQL will allocate to store a query. You would want the this value to be roughly the average query size. Each database has different values for the minimum depending on how large of sets you are working with. Here is mine: mysql> show variables like ""query%""; +------------------------------+---------+ | Variable_name | Value | +------------------------------+---------+ | query_alloc_block_size | 8192 | | query_cache_limit | 1048576 | | query_cache_min_res_unit | 4096 | | query_cache_size | 0 | | query_cache_type | ON | | query_cache_wlock_invalidate | OFF | | query_prealloc_size | 8192 | +------------------------------+---------+ 7 rows in set (0.25 sec) As you can see my minimum value is 4096 bytes. As a follow-up you can read more at Optimizing the MySQL Query Cache Thanks I think I understand. That article was good! Btw I think that the numbers in the variables are bytes not KB... I'm not sure though... Thanks :) You might be correct I'll edit it anyways because now I am doubtful myself. the query cache allocates blocks with a minimum size given by the query_cache_min_res_unit system variable. When a query is executed the last result block is trimmed to the actual data size so that unused memory is freed. If you do click through to the linked article; note the comments at the bottom!",php sql mysql database caching
2213433,A,"Can't get all values from mysql table I have this table: option_values table: option_id (FK) value_id (PK) classified_id (FK) value example:  option_id (FK) value_id (PK) classified_id (FK) value 1 1 22 'Petrol' 2 2 22 'Manual' 3 3 22 'Black' How can I retrieve and echo every value found with the classified_id=22 ? I have tried this:  $res=mysql_query(""SELECT * FROM option_values WHERE classified_id=22""); $row = mysql_fetch_row($res); echo $row[3]; // This displays 'Petrol' But how can I also display the 'Manual' 'Black' etc? Thanks  $res=mysql_query(""SELECT * FROM option_values WHERE classified_id=22""); while($row = mysql_fetch_array($res)) { echo $row[1]; echo $row[2]; echo $row[3]; }  $res=mysql_query(""SELECT * FROM option_values WHERE classified_id=22""); while(FALSE != ($row = mysql_fetch_row($res)) { echo $row[3]; } Why are you calling mysql_fetch_rows twice? bad copy paste i'll edit  Do yourself a favor and implement a helper function like so: function fetch_multi_rows($query) { $rows = array(); while ( $row = mysql_fetch_array($result) ) $rows[] = $row; return $rows; } // Use it like this $my_rows = fetch_multi_rows(...your query...); foreach ( $my_rows as $row ) echo $row[3]; Cheers!  Use this you need to get an array of rows...they way you are doing it is giving you a single row's value in an array. while ($row = mysql_fetch_array($result MYSQL_NUM)) { printf(""ID: %s Value: %s"" $row[0] $row[3]); } Source: here  You can write a ""more object oriented"" code like :)  // Execute the query $res = mysql_query(""SELECT * FROM option_values WHERE classified_id=22""); // Check for empty result if (mysql_num_rows($result) == 0) { echo ""No results.""; exit; } // Fetch results as objects while ($row = mysql_fetch_object($result)) { echo ""Option Id: "".$row->option_id; echo ""Value: "".$row->value; } // Free results memory mysql_free_result($result); Cheers Mate!",php sql mysql database
2966418,A,Check mysql_query results if DELETE query worked? I have a DELETE query which deletes a record from a mysql db. is there any way to make sure if the delete was performed or not? I mean for a query to FIND stuff you do  $res=mysql_query($var); $nr=mysql_num_rows($res); and you get nr of rows returned. Is there any similiar method for deletion of records? Thanks Use mysql_affected_rows(). It does not require the response as a parameter. mysql_query('DELETE FROM whatever'); $num = mysql_affected_rows(); Also I like PDO better than the classic mysql_ functions. Just saying.,php sql mysql database
1176014,A,"How to model a many to many relationship? With only a bit of previous experience with databases and no formal education with them I'm a bit stuck as to how to model this (and retrieve the data I require from it in PHP). This is what I'm trying to model: For each item on my site it is allowed to have multiple tags such as file upload php recursive etc. However the tags are reusable I can have two different items and they each could have the php tag. I've been trying to read up on how to do this and whether it is lack of experience with it or something else I don't know but I can't seem to grasp the concept. Apparently you need a middle table which links the two together? Also once I have this relationship and the tables defined how would I do things such as: - Retrieve all items with a certain tag? - Retrieve all tags that one item has? Thanks for your help also if anyone could list any further reading on this to strengthen my understanding of the concept that would be great. The db part is easy. This is just a sample so you can see how db can look like not any particular SQL engine queries. CREATE TABLE posts ( id INT PRIMARY KEY subject VARCHAR(100) body TEXT ) CREATE TABLE tags ( id INT PRIMARY KEY name VARCHAR(50) ) CREATE TABLE post_tags ( post_id INT tag_id INT FOREIGN KEY (post_id) REFERENCES posts (id) FOREIGN KEY (tag_id) REFERENCES posts (id) ) To get items with yourTag tag you will just run query like this SELECT P.* FROM posts P LEFT JOIN post_tags PT ON (PT.post_id = P.id) LEFT JOIN tags T ON (T.id = PT.tag_id) WHERE T.name = 'yourTag'; To get tags associated with post with id of 123 you run this query: SELECT T.* FROM tags T LEFT JOIN post_tags PT ON (T.id = PT.tag_id) LEFT JOIN posts P ON (PT.post_id = P.id) WHERE P.id = 123; For the PHP part you could use a framework. Many (if not all) frameworks can easily model such relationships. For example in CakePHP this done like that: class Post extends AppModel { $useTable = 'posts'; $hasAndBelongsToMany = array( 'Tag' => array( 'className' => 'Tag' 'joinTable' => 'post_tags' 'foreignKey' => 'post_id' 'associationForeignKey' => 'tag_id' ) ); } class Tag extends AppModel { $useTable = 'tags'; $hasAndBelongsToMany = array( 'Post' => array( 'className' => 'Post' 'joinTable' => 'post_tags' 'foreignKey' => 'tag_id' 'associationForeignKey' => 'post_id' ) ); } ITYM Tag->$hasAndBelongsToMany = array( 'Post' ... etc. Thanks for the database part thats fantastic. I use CodeIgniter and it doesn't actually model relationships like that you have to do it yourself. Plus I'd prefer to actually understand the SQL queries involved as opposed to relying on automagic. @Stobor - thanks for finding that this was a copying error @James - I put a sample query for you as well. Understanding queries is important but once you start working with ORM you won't probably come back to typing SQLs Nicely shown. Marginally better solution than serializing arrays and then putting them into table cells like I've too-often seen.  You should use an intermediate table to relate the two entities:  -------- 1:n ------------ --------- | ITEM |-¦---------<| ITEM_TAG | n:1 | TAG | | Id | | ItemId |>-------¦-| Id | | Name | | TagId | | Name | ¯¯¯¯¯¯¯¯ ¯¯¯¯¯¯¯¯¯¯¯¯ ¯¯¯¯¯¯¯¯¯ Then for querying the data you should join your tables in a select statement: All the items in the tag ""FooTag"" SELECT item.* FROM item JOIN item_tag on item.id = item_tag.itemId JOIN tag on item_tag.tagId = tag.id WHERE tag.Name = 'FooTag' All the tags for the item with name ""FooItem"" SELECT tag.* FROM tag JOIN item_tag on tag.id = item_tag.tagId JOIN item on item_tag.itemId = item.id WHERE item.Name = 'FooItem' nice diagram :) +1  Yeah many-to-many relationship needs additional third table called association table. Database part is not that hard it's harder to use it in code with all those left joins and it can get pretty messy :) My advice is to use ORM framework like Doctrine or Propel (though I prefer Doctrine) which handle even some complex queries for you.  You're right many-to-many relationships are implemented using additional table for instance: Blog_entry(entry_id entry_body) Tag(tag_id tag_name) Entry_tag(entry_id tag_id) Any operations are being done using multiple joins. For instance if you want to select all entries with tag 'foo' using tables from my example you have to execute: select * from blog_entry tag entry_tag where tag.tag_name = 'foo' and entry_tag.tag_id = tag.tag_id and entry_tag.entry_id = blog_entry.entry_id (update) To retrieve all tags that certain entry (here with ID 123) has: select tag_name from blog_entry tag entry_tag where Blog_entry.entry_id = 123 entry_tag.tag_id = tag.tag_id and entry_tag.entry_id = blog_entry.entry_id",php sql database many-to-many
2287881,A,"Search database using LIKE and wildcards I have four search fields that are used to search a database for book id:s and then echos out the result. Depending on wich field you choose to search from the sql query builds up as you can see in the code below. The title and isbn field are working fine but when I try to use the author or category field nothing gets returned. The relevent database tables can also be seen below. Maybe there´s something wrong with the way I use the sql function LIKE??? Database: CREATE TABLE IF NOT EXISTS `bok` ( `bokId` int(11) NOT NULL AUTO_INCREMENT `bokTitel` varchar(100) DEFAULT NULL `upplaga` varchar(100) DEFAULT NULL `ISBN` varchar(30) DEFAULT NULL PRIMARY KEY (`bokId`) ) CREATE TABLE IF NOT EXISTS `skrivenav` ( `bokId` int(11) DEFAULT NULL `fId` smallint(6) DEFAULT NULL ) CREATE TABLE IF NOT EXISTS `forfattare` ( `fId` smallint(6) NOT NULL `fNamn` varchar(80) DEFAULT NULL PRIMARY KEY (`fId`) ) CREATE TABLE IF NOT EXISTS `bokkat` ( `bokId` int(11) DEFAULT NULL `katId` smallint(6) DEFAULT NULL ) CREATE TABLE IF NOT EXISTS `kategori` ( `katId` smallint(6) NOT NULL `katNamn` varchar(80) DEFAULT NULL PRIMARY KEY (`katId`) ) PHP code: <?php $q = ""SELECT DISTINCT bokId FROM ""; if($_GET['search_title']!=""""||$_GET['search_ISBN']!=""""){ $q = $q.""(SELECT * FROM bok WHERE ""; if($_GET['search_title']!="""") $q = $q.""bokTitel LIKE '%$_GET[search_title]%' ""; if($_GET['search_title']!="""" && $_GET['search_ISBN']!="""") $q = $q.""AND ""; if($_GET['search_ISBN']!="""") $q = $q.""ISBN LIKE '%$_GET[search_ISBN]%' ""; $q = $q."") AS F""; } else $q = $q.""bok""; if($_GET['search_author']!=""""){ $author = explode("""" $_GET['search_author']); $auth = """"; foreach ($author as $value){ $auth = $auth . ""%"" . $value . ""%' '""; } $auth = trim($auth "" '""); $q = $q."" NATURAL JOIN (SELECT * FROM skrivenav NATURAL JOIN forfattare WHERE fNamn LIKE ('$auth')) AS S ""; } if($_GET['search_category']!="""") { $category = explode("""" $_GET['search_category']); $cat = ""'""; foreach ($category as $value){ $cat = $cat . ""%"" . $value . ""%' '""; } $cat = trim($cat "" '""); $q = $q."" NATURAL JOIN (SELECT * FROM bokkat NATURAL JOIN kategori WHERE katNamn LIKE ('$cat')) AS K ""; } $rs = mysql_query($q); confirm_query($rs); while($row = mysql_fetch_row($rs)){ echo $row[0].""<br />""; } ?> Generated query when searching with author field: SELECT DISTINCT bokId FROM bok NATURAL JOIN (SELECT * FROM skrivenav NATURAL JOIN forfattare WHERE fNamn LIKE ('%Jonas%' '%Alex%')) AS S Quick solution from anthares answer and it worked so thank you!! if($_GET['search_author']!=""""){ $author = explode("""" $_GET['search_author']); $auth = """"; $q = $q. "" NATURAL JOIN (SELECT * FROM skrivenav NATURAL JOIN forfattare WHERE fNamn LIKE ""; foreach ($author as $value){ $auth = $auth . ""%"" . $value . ""%'""; $q = $q. ""'$auth OR ""; $auth = """"; } $q = trim($q "" OR""); $q = $q. "") AS A""; } Please post the generated query that causes wrong results. This will make it a lot easier to help. I think this piece of code: foreach ($author as $value){ $auth = $auth . ""%"" . $value . ""%' '""; } $auth = trim($auth "" '""); $q = $q."" NATURAL JOIN (SELECT * FROM skrivenav NATURAL JOIN forfattare WHERE fNamn LIKE ('$auth')) AS S ""; will return a result only if you pass as value subset of the real authors in exact order which is written. So this query doesn't check for scrambled authors' names. The same thing with categories. You should add an ""or"" in your where clause for every category or author in your filter and make a separate expression for each of them.",php sql database
1592391,A,CakePHP mathematic-calculation field? (Database structure like http://stackoverflow.com/questions/1545764/cakephp-select-default-value-in-select-input) So I have two tables in CakePHP: Trees and Leafs. Every Leaf has a tree_id for its corresponding tree. Every leaf also has a numeric value. The default view that I baked for trees just lists all the trees in a table. Is there a way to add a dynamic column to that view's table that SUMS all the leafs of that tree and displays the sum in the table as well as another field showing the number of leafs a tree has? example: Leafs Id | Tree Id | Leaf value -----+-----------+--------------- 24 | 1 | 19 70 | 1 | 33 121 | 1 | 30 Trees Id | Tree | Number of leafs | Sum of leafs | Actions -----+--------+-------------------+----------------+------------------- 1 | foo | 120 | 7270 | View Edit Delete 2 | bar | 72 | 4028 | View Edit Delete I don't think you can use group within containable calls. 1.3 should have support for this: http://teknoid.wordpress.com/2009/10/06/top-10-things-to-look-forward-to-in-cakephp-1-3/  Two ideas: Fetch the summed field dynamically each time you need it using the Containable behavior like (off the top of my head): $this->Tree->find('all' array( ... 'contain' => array( 'Leaf' => array( 'fields' => array('SUM(Leaf.value)') 'group' => array('Leaf.tree_id') ) ) ); Or create a new column in the Tree model like leaf_values and update it every time you change something in the Leaf model: // Leaf model function afterSave() { $sum = /* calculate sum */; $this->Tree->updateAll( array('Tree.leaf_values' => $sum) array('Tree.id' => $this->data['Leaf']['tree_id']) ); } function afterDelete() { // same for afterDelete },php sql mysql database cakephp
3931002,A,"Should I use sessions for ""LOGINS"" on my site? I have a classifieds website where anyone (no need for login currently) can post a classified. It is PHP based. The procedure for posting is currently like this: click on ""New Classified"" ---> fill in a form of all information and hit ""View classified before publishing it"" ---> the form submits to a ""verify classifieds"" page where users verify their inputs ---> If everything is okay in the ""verify"" page then the user hits OK and the classified is published. The above procedure isn't exactly optimized. The first page (new_classified) where the form is is pretty good but the second page (verify) uses x number of hidden inputs in another form used to contain the previous pages form inputs. Now you know how it works on my site. The issue today is that alot of companies want to publish their classifieds and alot of classifieds at the same time. This means they have to fill out the form again and again currently. I am thinking about creating a login for companies only so that their information is automatically inputted into the form so all they would have to do is fill out the specific classified details like ""headline"" and ""description"" etc. How should I do this in my case? Sessions? This means I will have to create a new MySql table (I use MySql mainly) and store company-profiles there. So do you think converting to sessions is alot of work? Worth it? More reliable? I have never used sessions so I wouldn't know. As a last note you should know that I use a picture upload tool on the first page of ""new_classified"". When a user choses a file to upload the page is automatically *refreshed* and then the image is displayed on the same page under section ""images uploaded"". I hope the session wont interfere with this approach. Thanks Please use formatting wisely. it's hard to read such a pitted text I think it is worth your while to do logins and even on a very basic level it will help you to identify who is using your site etc. This is probably a big debate around developers what is the best way to do a good login system whether it's basic or not doesn't matter I think the concepts still stay the same. In your case I would suggest session cookies along with a login table consisting of user details. This would help you to verify the user on more than one occasion during his/her visit to the site. A login is checked against a user entry in a table and then a session cookie is created. This session you can choose to never expire also. You can then on every step check that the user is the user that is supposed to be logged in and get the companies details by checking the username. This would make for a better query in my opinion. Sessions aren't a lot of work and it's relatively easy to learn. http://www.php.net/manual/en/book.session.php http://www.9lessons.info/2010/02/php-login-script-with-encryption.html is a good example of what you can do with this. Have a look around still. There are a bunch of these great tutorials on the web.",php sql mysql database session
3057351,A,Large strings: Text files or SQL DB? I am coding a forum system using PHP. I am currently storing a threads ID title author views and other attributes in an SQL database and then storing the thread body (the HTML and BBcode) in text files inside a folder named after the thread ID. In practise it's really simple to grab the database values then just grab the thread body from the text file but I was wondering if this is the 'proper way'? I have personally no problems doing this but if it turns out it is massively inefficient and I should instead store both the thread body HTML and BBcode in the database instead then I will change. However to me it seems wrong to store such a (very possibly) huge string of multi-line text along with lots of different characters in a database - I was taught that databases are more for short field 'values' rather than website content. I would just like a definitive answer to this because it's been bugging me for ages as to wherever I’ve been doing it properly. Does anyone know how popular forum systems store threads? Added Thanks for the answers so it's best to store thread content in the database what field type should i use? Also what about replies? Another table which has the thread ID and comment ID then the comment body? I'm new to this database stuff so thanks for your help. Joomla - all the content is in the database. Drupal probably too. Countless systems store content in a database. (Beware this is only a statistic!) Best to ask a separate followup question for database design. There's no limit to how many questions you can ask and changing the criteria means those who originally provided answers could be downvoted -- we're not alerted when you update your question. Ok yeah i understand thanks! This is an aside as the question has already been accepted however you should check out phpbb3 (http://www.phpbb.com/). Very robust php forum. May save you some development time :D Thanks but the main purpose for me coding this forum is as a learning exercise for myself otherwise i would def use phpbb :)  Confluence (a commercial wiki) stores the entire page content within a single column. The reason to store large text in the database is: There's (hopefully) no disconnect between the value and the record(s) the text is associated with There are technologies like Full Text Search (FTS) to make finding specific strings in large amounts of text Simplified backup & restore process +1. I forgot about Confulence and we use it...  I know that DotNetNuke and the AspDotNetStorefront use a database to store such data. These aren't forums but a content management system and a shopping cart with content management capabilities. I've also experimented with several forums (Such as YAF) and all of those use databases as well. Personally I'd stick with a DB for the HTML and any image/content files should be stored on the disk with a reference to their location in HTML. Perhaps the strongest argument for storing in the DB: It's a heck of a lot easier to search the text fields with a LIKE clause than to search for a strong in a text file. Also with free forum software cout there can I ask why you're writing a new one from scratch? I realize there are probably good reasons but just in case it's something you hadn't thought of yet... Added Most of my references were .NET code. Here's an open source forum written in PHP: http://www.phorum.org/ And that LIKE clause can end up being very slow... You may want to use full text indexing for that. @Nelson - Good point! Thanks. Also i'm coding it myself mainly as a learning exercise it isn't a serious website so i thought i'd give it a go coding the system myself. That's good.. It's a good learning experience. Still it might not be too bad an idea to get the source code for phorum at some point and compare to see how you did compared to how they did... Looking at established code and comparing it with your own is a very good way to learn. Have fun!  It would be best practice to store the thread in the database since that will allow you to scale and search easier. If you want to continue using files to store the content I would recommend using something along the lines of GridFS. Basically just chunks up files and stores them in NOSQL.  I agree with the other answers storing all the data in your database simplify scaling backup/restore allows you to query the data and so on. If you're concerned with performance you could implement a cache for the page content. I know PHPBB does this by having a serialized array in a text file with a expiration timestamp. Could also be done using memcached or otherwise. Storing the data in a database give you the most flexibility and convenience most problems related to serving the data to the end-user can be handled by caching the data.,php sql database
1304732,A,"How can I get this mysqli database class working? I'll cut right to the chase. All I can achieve at this point with this class is a database connection. I am unable to make a query. Can you show me exactly how to get this working and/or show me how to recode it in a better way. <?php class database{ public $dbHost = ''; public $dbUser = ''; public $dbPass = ''; public $dbName = ''; public $db; public function __construct(){} public function dbConnect(){ $mysqli = new mysqli($this->dbHost $this->dbUser $this->dbPass $this->dbName); /* check connection */ if (mysqli_connect_errno()){ printf(""Connect failed: %s\n"" mysqli_connect_error()); exit(); }else{ echo 'connection made'; } /* close connection */ $mysqli->close(); } public function query($sql){ $query = $sql; self::preparedStatement($query); } public function preparedStatement(){ if ($stmt = $mysqli->prepare($query)){ /* execute statement */ $stmt->execute(); /* bind result variables */ $stmt->bind_result($name $code); /* fetch values */ while ($stmt->fetch()) { printf (""%s (%s)\n"" $name $code); } /* close statement */ $stmt->close(); } } public function __destruct(){} } ?> You have omitted a parameter: public function preparedStatement($query) (and this method actually should be static) Next time try to debug your code before asking. Even simple echo statements would have done here. EDIT: and even that wouldn't work. I think you've misunderstood the concept of variable scope. $mysqli should be an instance variable of that class because it wouldn't persist to preparedStatement() if you just set it in __construct() as a local variable. Yes I understand there are some serious issues here. I think 3 hours counts as ""trying to debug your code before asking"".  This worked for me. I've commented my changes. <?php class database{ public $dbHost = ''; public $dbUser = ''; public $dbPass = ''; public $dbName = ''; public $db; public function __construct(){} public function dbConnect(){ ### not $mysqli $this->db = new mysqli($this->dbHost $this->dbUser $this->dbPass $this->dbName); /* check connection */ if (mysqli_connect_errno()){ printf(""Connect failed: %s\n"" mysqli_connect_error()); exit(); }else{ echo 'connection made'; } /* close connection */ ### $this->db->close(); // DO NOT close the connection here! } public function query($sql){ $query = $sql; self::preparedStatement($query); } public function preparedStatement($query){ ### parameter $query added if ($stmt = $this->db->prepare($query)){ ### not $mysqli->prepare() /* execute statement */ $stmt->execute(); /* bind result variables */ $stmt->bind_result($name $code); /* fetch values */ while ($stmt->fetch()) { printf (""%s (%s)\n"" $name $code); } /* close statement */ $stmt->close(); } } public function __destruct(){} } ### Test code /* $db = new Database(); $db->dbHost = '127.0.0.1'; $db->dbUser = 'root'; $db->dbPass = 'root'; $db->dbName = 'test'; $db->dbConnect(); $db->query('SELECT * FROM test'); */ ?> Your awesome! Thank you so much. I made almost all of those changes during my debugging too bad I didn't put them all together at once. Thanks.",php sql database mysql mysqli
3294432,A,"SQL query to get data from a large list of strings I have a large list of strings (1500 email addresses to be more specific) and I need to look up a piece of data in a very large DB table for each of the strings (e.g. the primary key mydataitem). How can I do it efficiently? For example this is way too slow (amongst other problems): $stringArray = ('foo''bar''baz'... 'for 1000s of items'); foreach($stringArray as $mystring) { $res = mysql_query(""select mydataitemblah FROM users WHERE blah = '$mystring'""); $info=mysql_fetch_assoc($res); ... } Things I want to avoid: I don't want to loop over the list and do a SELECT for each item. i.e. 1500 queries (as in example above) I don't want to read the whole table into an array in one query and do the lookup in code because it would take too much memory. The DB table has 100k+ rows. I don't want to build a massive query with 1499 ORs because the query would be too big. (for example ""select mydataitem FROM users WHERE blah = 'aaa' OR blah = 'bbb' OR ..."") Note: I'm using MySql v5.0.45 Update: Thanks everyone - for some reason I thought IN was just for Integer ID lists - now I know better. mysql_query(""select mydataitemblah FROM users WHERE blah IN ('"" .implode(""''""array_map('mysql_real_escape_string'$stringArray).""')'; Better yet use mysqli or PDO which can use prepared statements: $stmt = $PDO->prepare('select mydataitemblah FROM users WHERE blah IN (' .implode(''array_fill(0count($stringArray)'?')).')'; $stmt->execute($stringArray); Your query doesn't link mydataitem to a particular email address. Pfff. SELECT mydataitemblah then as `blah` apparantly IS the email address.  Unless this needs to but lightning fast I would just use a MySQL in clause turn the array into a string: $emails = array(""abc@def.com"" ""123@456.net"" ""me@google.com""); $list = ""(\"""". implode(""\"" \"""" $balls) . ""\"")""; then just use it in your sql $sql = ""select mydataitem FROM users WHERE blah in {$list}""; Your query doesn't link mydataitem to a particular email address.  If you use a prepared statement you can prepare it outside of your loop and then use it within your loop. That should run more quickly than a new mysql_query call each time. I don't know what you mean by a query being ""too big"". Try it and see how slow it is. Add a key on the email field if you don't already have one. This doesn't sound like the kind of code that would be running often so I would guess it's okay if it takes a second. If not maybe you can explain the goal of this code and we can help you figure out a better way of accomplishing that goal.  I think what you want is SELECT mydataitem FROM users WHERE blah IN ('foo' 'bar' 'baz' ...) Your query doesn't link mydataitem to a particular email address.  WHERE blah IN ('aaa''bbb'...) But it's still not efficient. If you explain why you need to retrieve so many records we might perhaps be able to come up with a more efficient logic. EDIT Create a temporary table holding these values and use a join to that temp table in your select query The temporary table idea is brilliant. Thanks - I'll probably use it!",php sql mysql database performance
2221742,A,"Is there any way to know what cache size is needed? I am using mysql as a db. Is there any formula for determining the cache size needed to cache the results? Thanks Caching where? PHP has no cache - if you don't enough memory allocated the instance will through a fatal error and stop. There are lots of caches within MySQL by default it allocates large values for these. IME these can safely be left alone - note that any memory allocated for MySQL means less memory available for the system's I/O caching. Why do you think you need to fix something? C.  This is usually a function of how much spare RAM you have the size of your database and how much of the dataset is ""popular"". (Below is assuming that you are talking about an application-level cache and not I/O caches buffer caches or other lower-level caching.) If you're sizing your cache for performance (i.e. maximize throughput and minimize latency) then one simple formula would be to use as much as your spare RAM as possible that is less than your total database size. Another simple formula would be to start somewhere between 1% and 10% of your database size and grow based on usage. If you want to carefully calculate how much cache you need then the most reliable way to do it is by experimentation i.e. run load-tests against growing cache-sizes and graph the hit-rate (This is especially true if your database load/usage characteristics are complicated.) For example you can have a graph where the X-axis is the cache-size and the Y-axis has both hit-rate and query-latency. Your goal would be to find the minimum X (cache-size) where hit-rate is maximized and query-latency is minimized (these could be different points). In order to do this correctly you need a real-world load test i.e. if you keep logs of your queries you can replay them. You may want to limit your replay of only non-mutating queries only (for simplicity). Note that instead of loadtests you can simplify this process by adding a cache (start somewhere between 1% and 10%) to a live database then watching the hit-rate and query-latency over time. This is a bit easier to do if you don't have a load-test framework setup but may be more intrusive on a production system. If the hit-rate is too low (or query-latency too high) then grow the cache. If not then see if shrinking it makes a noticeable difference. (Of course there are edge cases here which I'm glossing over but this is the general idea. E.g. sometimes different types of queries can have different costs and you may need to allocate different caches for different query types.) Once you do have a cache you should monitor it's statistics along with other query stats such as latency. You may need to grow it over time. Or you may find that you need to warm the cache up before you can get any reliable performance. For example if you rely on your cache to be able to serve out a specific query-load and your caching component crashes starting up cold then your database will get overloaded for some period of time while the cache warms up. Anyhow the short answer is that there is no simple solution and sizing your cache best done by experimentation.",php sql mysql database
1998692,A,"Is there an conceptual difference between a so called ""record set"" and an so called ""statement""? I wonder why the result of an SQL query in PHP PDO is called ""statement"". I'd expect ""record set"". My english is pretty bad as I'm not a native speaker. So: I craeate a ""query"" to ""ask the database to do/retrieve something"". Sometimes I use ""prepared statements"" to ask that (blue confusion alert!). Then PDO returns me an object of class called PDOStatement (red confusion alert!). Then this PDOStatement object has a fetch() method which seems to return me a ""record set"". All right...so is there any logical difference between that PDOStatement thing and the record set I get from fetch()? What's the difference? Or does the PDOStatement object actually perform the DB query and then return a record set? Or is PDOStatement the record set? It's because statements can be executed and when they are the resulting rows are stored inside of a buffer. In essence the object contains not only the records it returned but information on how to execute it again. That's why it's called a statement.  The PDOStatement represents both statements and result sets ; quoting the manual : Represents a prepared statement and after the statement is executed an associated result set. And the PDO::query method : Executes an SQL statement returning a result set as a PDOStatement object",php sql database
2178659,A,"Need help with small Solr problem I have a String field where I store two-word area names. Ex: New York Thing is whenever I try to query that field (area:New York) no results come up even though it is stored exactly as New York. Why is this? The results DO come up if I search like this: area:""New York"" but they wont come up if searching like this: area:New. Any ideas? Here is the field-definition in the schema.xml file:  <fieldType name=""string"" class=""solr.StrField"" sortMissingLast=""true"" omitNorms=""true""/> <field name=""area"" type=""string"" indexed=""true"" stored=""true"" omitNorms=""true""/> If you need more input let me know! Thanks UPDATE  $fq.="" + area:$state""; I am sending this and Solr receives this as the variable inside state (New York)... How can I rewrite this so it sends the variable as ""New York"" (with double quotes)...? Could be a conflict with the reserved keyword New have you tried to retrieve similar results using a different two-word area such as Las Vegas? Also if the area field is expecting a String to always use quotes around your variables. EDIT: I do not have any experience using SOLR but assuming area:$state holds New York I would try inserting the quotes into my code like so: $fq.="" + area:\""$state\"" ""; It might not be correct but it could help point you in the right direction. could you tell me how I should send this variable WITH the double-quotes check my update for details! It's now correct I will post a new Q about the quotes.. thanks I wasn't sure where the value of `New York` was being held could have been `area:$state` or just `$state` itself but I hope it helped.",java php sql mysql database
526118,A,"What is the best way to access data in a normalized database schema? I've got a problem that keeps coming up with normalized databases and was looking for the best solution. Suppose I've got an album information database. I want to setup the schema in a normalized fashion so I setup two tables - albums which has one listing for each album and songs which lists all songs contained by albums. albums ------ aid name songs ----- aid sid length This setup is good for storing the data in a normalized fashion as an album can contain any number of songs. However accessing the data in an intuitive manner has now become a lot more difficult. A query which only grabs the information on a single album is simple but how do you grab multiple albums at once in a single query? Thus far the best answer I have come up with is grouping by aid and converting the songs information as arrays. For example the result would look something like this: aid sids lengths 1 [1 2] [1:04 5:45] 2 [3 4 5] [3:30 4:30 5:30] When I want to work with the data I have to then parse the sids and lengths which seems a pointless exercise: I'm making the db concatenate a bunch of values just to separate them later. My question: What is the best way to access a database with this sort of schema? Am I stuck with multiple arrays? Should I store the entirety of a song's information in an object and then those songs into a single array instead of having multiple arrays? Or is there a way of adding an arbitrary number of columns to the resultset (sort of an infinite-join) to accommodate N number of songs? I'm open to any ideas on how to best access the data. I'm also concerned about efficiency as these queries will be run often. If it makes any difference I'm using a PostgreSQL db along with a PHP front-end. I wouldn't break your normalisation for that. Leave the tables normailsed and then use the following to query - http://stackoverflow.com/questions/43870/how-to-concatenate-strings-of-a-string-field-in-a-postgresql-group-by-query  I see your point but I have issues with the first query because you end up with a lot of repeated data - the album name is repeated many times. I'm trying to have my cake and eat it too - I want the data to be as compact as possible but that's not realistic without aggregates. Ah I understand your question now. You're asking how best to micro-optimize something that's actually not very expensive for most cases. And the solution you're toying with is actually going to be significantly less efficient than the ""problem"" it's trying to solve. My advice would be to join the tables and return the columns you need. For anything less than 10000 records returned you won't notice any significant wire time penalty for handing back that AlbumName with each Song record. If you notice it performing slowly in the field then optimize it. But keep in mind that a lot of smart people have spent about 50 years of research making the ""join the tables & return what you need"" solution fast. I doubt you'll beat it with your home-rolled string concatenation/de-concatenation strategy. This is an example. The actual Albums table will have approximately 10 columns that I'll want and that's a lot of repeated data. I'm going with two queries instead. Also no need to be condescending. I know that string concat/de-concate would be slow which is why I posted the question. :P You should also know that returning two recordsets will be slow. Certainly not worth it to avoid repeating 10 columns a few hundred times. Sorry if I sounded condescending. This seems to be new ground for you and it's DB 101.  I have difficulty seeing your point. What exactly do you mean by ""how do you grab multiple albums at once in a single query""? What exactly do you have difficulties with? Intuitively I would say: SELECT a.aid album_id a.name album_name s.sid song_id s.name song_name s.length song_length FROM albums a INNER JOIN songs s ON a.aid = s.aid WHERE a.aid IN (1 2 3) and SELECT a.aid album_id a.name album_name COUNT(s.sid) count_songs SUM(s.length) sum_length /* assuming you store an integer seconds value */ FROM /* here not a string containing '3:18' or such */ albums a INNER JOIN songs s ON a.aid = s.aid WHERE a.aid IN (1 2 3) GROUP BY a.aid Depending on what you want to know/display. Either you query the database for aggregate information or you calculate it yourself out of the query result #1 in your app. Depending on how much data is cached in your app and how long queries take the one strategy can be faster than the other. I would recommend querying the DB though. DBs are made for this kind of stuff. I see your point but I have issues with the first query because you end up with a lot of repeated data - the album name is repeated many times. I'm trying to have my cake and eat it too - I want the data to be as compact as possible but that's not realistic without aggregates. Leave off the album name from the first query. You have it in the second one (which probably comes first anyway) and your app can store some context as well. Other than that I see your point as well. But I guess the repeated album name won't clog your performance too badly. ;-) (Funnily enough I rephrased my second paragraph before posting to avoid the ""you can't have your cake and eat it too"" platitude :-D)  I agree with Jason Kester insofar as I think this is unlikely to really be a performance bottleneck in practice even if you have 10 columns with repeated data. However if you're bent on cutting out that repeated data then I'll suggest using 2 queries: Query #1: SELECT sid length -- And whatever other per-song fields you want FROM songs ORDER BY aid Query #2: SELECT aid a.name COUNT(*) FROM albums a JOIN songs s USING (aid) GROUP BY aid a.name ORDER BY aid a.name The second query enables you to break up the output of the first query into segments appropriately. Note that this will only work reliably if you can assume that no changes will be made to the table between these two queries -- otherwise you'll need a transaction with SET TRANSACTION ISOLATION LEVEL SERIALIZABLE. Again the mere fact that you're using two separate queries is likely to make this slower overall as in most cases the doubled network latency + query parsing + query planning is likely to swamp the effective increase in network throughput. But at least you won't have that nasty horrible feeling of sending repeated data... :)  SELECT aidGROUP_CONCAT(sid) FROM songs GROUP BY aid; +----+-------------------------+ |aid | GROUP_CONCAT(sid) | +----+-------------------------+ | 3 | 567 | +----+-------------------------+ Yes that's true. I didn't notice the PostgreSQL part of the question. My googling suggests that GROUP_CONCAT() is not supplied by PostgreSQL. However you can build it yourself using CREATE AGGREGATE.  The join queries will ask the database to put the tables together matching the ids and return a single table. That way the data can be dynamically configured to the current task something that non normalized databases cannot do.",php sql database postgresql
2967006,A,"I can't delete records from MySql I have two tables. table a references table b I believe. When I try to delete the package alltogether like this: $query=""DELETE a b FROM classified as a $sql_table as b WHERE a.ad_id = '$id' AND a.classified_id = b.classified_id AND a.poster_password='$pass'""; b MUST be deleted first I guess. Even in PhpMyAdmin I cant delete a if b is still there so I delete b first. But what decides the order in which comes first? The tables are alla InnoDB. What should I do? Thanks The reason the reference key is the way it is is because I use JOIN when I display my records... Just so you know. The MySQL manual says about multi-table DELETE and foreign keys: If you use a multiple-table DELETE statement involving InnoDB tables for which there are foreign key constraints the MySQL optimizer might process tables in an order that differs from that of their parent/child relationship. In this case the statement fails and rolls back. Instead you should delete from a single table and rely on the ON DELETE capabilities that InnoDB provides to cause the other tables to be modified accordingly. So that when a record in your main table is deleted so are its foreign references e.g: ALTER TABLE products ADD CONSTRAINT fk_supplier FOREIGN KEY (supplier_id supplier_name) REFERENCES supplier(supplier_id supplier_name) ON DELETE CASCADE;  Your Delete syntax is invalid. You need to do this in two statements (unless as nuqqsa mentioned you have CASCADE DELETE enabled on the relationship between table a and table b): Delete From b Where Exists ( Select 1 From a Where a.poster_password = '$pass' And a.ad_id = '$id' And a.classified_id = b.classified_id ) Delete From a Where a.poster_password = '$pass' And a.ad_id = '$id' What decides which comes first is the foreign keys relationships. Whichever table is the parent table must be deleted from last. You are a SQL server user I'm guessing? @simplemotives - Me? I am however the equivalent of the above syntax should work in any database product. @Thomas - Your SQL style is all I was commenting on. @simplemotives - Np. Although I've worked against Oracle and I use the same style. Thomas: Check this Q out I am having trouble getting your code above to work: http://stackoverflow.com/questions/2972796/sql-syntax-error-little-help-please @Camran - MySql apparently requires that you use the `From` keyword in your Delete statements and I've updated my post to reflect that. IIRC the official SQL specification does not provide for the use of a `From` clause in a Delete statement.",php sql mysql html database
2229851,A,Selecting distinct months and years and then breakdown of values for I'm using Open Flash Chart to create statistics and one of the things i need to be able to do is generate a Stacked Bar Chart. Logically i need to be able to Group all the distinct Month/Year combinations Dec 2009 Jan 2010 Feb 2010 etc. and then from that group all the various rows i.e. the different types of enquiry a visitor made (via website via email via phonecall) at the moment the table attributes look like this: id (int auto increment) date_time(date time format) type (enum visit website phone email) Any suggestions? I've tried a few things and haven't had much luck. SELECT EXTRACT(YEAR_MONTH FROM date_time) AS ym type COUNT(*) FROM mytable GROUP BY ym type Cool didn't know about `extract(year_month ...)` !  Something like this should work: select count(*) type YEAR(date_time) MONTH(date_time) from `table` group by type YEAR(date_time) MONTH(date_time)  To group by year and month the sql can look like this: SELECT DATE_FORMAT(date_time '%Y-%m') AS yearmonth COUNT(*) AS count_month FROM table_name GROUP BY yearmonth  You could create a table with a month field and populate it for the months you're interested in for example: StartOfMonth 2010-01-01 2010-02-01 2010-03-01 ... Then you can use left join to group on all months: select year(mt.StartOfMonth)  month(mt.StartOfMonth)  e.type  count(*) from MonthTable mt left join Enquiries e on mt.StartOfMonth <= e.EnquiryDate and e.EnquiryDate < mt.StartOfMonth + interval 1 month where mt.StartOfMonth <= NOW() group by year(mt.StartOfMonth) month(mt.StartOfMonth) e.type,php sql mysql database datatable
1737865,A,"Is there a limit to MySQL queries? I am trying to insert 10000+ fields into my database? Is there a limit? $sql = 'INSERT INTO `_'.$test.'` (`user` `pass`) VALUES ' . preg_replace($test $replace $final_check) . ';'; mysql_query($sql) or die(mysql_error()); Every time I try to insert the data it fails. ""it fails""? Is that all the error message you get? ""Failed""? Or did you get something more specific? If you did please post the entire error message otherwise all we can say is ""tough luck it fails"". I believe it's your query. Make sure you are importing the right data and it shouldn't fail. Echo the $sql to test it. echo $sql  There is a packet size limit in the MySQL protocol. If your SQL statement exceeds that it can't send it to the server. The limit was for a very long time 16Mb but fairly recent versions have raised it higher. Also check that you are enclosing each row's worth of data in it's own parentheses.",php sql database mysql
2794667,A,"MySql paging; ""Showing result-set"" of ""total found"" help I need a formula for showing results on my classifieds website. I am now done with the paging of records but this formula for showing results remains. I want it like this:  Showing 1-50 of 123 found. Now what is the formula for this? I have these variables which should be enough I think:  $results_per_page = 50; //results per page $page = 1; //current page Also a variable called $num_total contains the total nr of hits in this case 123. Thanks Is this what you want? <?php $page = 1; $results_per_page = 50; $num_total = 123; echo 'Showing ' . ((($page - 1) * $results_per_page) + 1) . '-' . min($num_total ($page * $results_per_page)) . ' of ' . $num_total . ' found.'; ?> @Camran: Do you want me to write the `if ($num_total > 0)`?",php sql mysql html database
2101102,A,MySQL linking tables; some final issues Firstly I want to thank all of you who have helped me understand Normalization and how I should build up my database. Now I have some final issues left... How does LINKING of tables actually work? Say you have three tables: CATEGORY TABLE: cat_id (PK) -> 1 cat_name -> cars CATEGORY_OPTIONS TABLE: cat_opt_id (FK) -> 1 cat_id (FK) -> 1 option_name -> year CATEGORY_OPTIONS_VALUES TABLE: cat_opt_val_id (PK) -> 1 cat_opt_id (FK) -> 1 value -> 1999 Basically the values should look like this: CATEGORY (1 cars) (2 MC) CATEGORY_OPTIONS (1 1 year) (2 1 fuel) (3 2 type) CATEGORY_OPTIONS_VALUES (1 1 2010) (2 1 Petrol) (3 2 Cross) Is this correct as I have it setup above? How would I search these how is the logic made up? I think I need examples of queries from PHP (SELECT etc) Say you want to search for a CAR -> year=2010 fuel=PETROL how is the query then? AND SAY you want to search for a CAR -> fuel=PETROL year=anything LASTLY should I use AutoIncrement on any of these fields? And when is AI used? Thanks PS: For more info check out this Q: http://stackoverflow.com/questions/2100008/can-this-mysql-db-be-improved-or-is-it-good-as-it-is You want SQL joins. Table linking is a completely unrelated technique that has nothing to do with what you are trying to achieve (for details see MySQL documentation on the MERGE engine). Generally: SELECT f.name b.value FROM foo f LEFT JOIN bar b ON b.foo_id = f.id WHERE f.age > 10 HAVING b.value IS NOT NULL In order to understand how joins are performed you must understand how the database engine processes a query - especially the significance of conditions in ON WHERE and HAVING clauses which all apply at different stages.,php sql mysql database search
652117,A,"Using SQL in Java with package java.sql during a lecture my professor gave examples of several actions involving databases and the java.sql package. These examples were supposed to be uploaded online in a pdf file but for some reason the names of all functions and class names aren't displaying with my pdf reader. I would like to know the equilavents of the following PHP functions in Java: mysql_connect mysql_query mysql_fetch_row mysql_fetch_assoc mysql_close Thanks! Working directly with JDBC (java.sql) is verbose and error-prone especially for beginners because you need to manually do very repetitive steps and ""finally"" close so many database objects (Connections Statements ResultSets). If you do not mind pulling in an extra dependency Apache Commons have a nice little wrapper package called DbUtils that makes it easy to run queries and updates (while still staying at the SQL level as opposed to object-relational mappers that go to a higher level of abstraction).  If you're just getting started with JDBC consider working your way through Sun's tutorial at: http://java.sun.com/docs/books/tutorial/jdbc/basics/  If you consult the Java API docs appropriate for the version you're using (I'm using JDK 1.5 so it's http://java.sun.com/j2se/1.5.0/docs/api/) and click on java.sql you can see all the classes for Java JDBC access. Basically you create a new Connection to a database with DriverManager and do a query with Connection.prepareStatement PreparedStatement.execute() and PreparedStatement.executeQuery() and loop through the resultant ResultSet with ResultSet.next() and pull the results out with ResultSet.getXXXXX.",java php sql database derby
711473,A,"Why can't I connect to my sql database? I get the error message: ""Can't connect to local MySQL server through socket"" I just moved my site to a new web host and after changing the database-login file it still can't connect. I get the following error: Warning: mysql_query() [function.mysql-query]: Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2) in /usr/www/users/simpleof/index.php on line 91 I changed the password and tried again but it still doesn't work. All the information in the db-login is correct so why can't I connect to the database? Wow. I feel pretty dumb but I put an extra space into the server name when I logged in. So my advice to anyone else having this problem is REALLY check to make sure your log-in info is correct.  There was a recent update to Debian/Ubuntu which caused this error for me. I had to tweak some of the Ubuntu config to mysql work. You may want to check with your hosting company and see if this is the problem.  Is the MySQL server on the same host as the web application? If not you can't use a socket connection and will need to connect via TCP. If the MySQL server is on the same host then maybe the socket is in a different location than '/tmp/mysql.sock'? Without more information about what application/platform you're using that's about all the help I can give.  Check in mysql user privilages if your user's host is correct.",php sql mysql database connect
2173201,A,"How should I query MySQL and how to cache the results from MySQL? I have managed finally to get Solr working with the help of all you guys so THANK YOU! And I have to say I now understand why you recommended it it's really powerful. Now to the issue... I have indexed all ""Searchable"" information into Solr and my plan is to query Solr and then get the ID:s of the query-results (of all records that is each has an ID field value) which I then use to query MySQL and fetch the rest of the information. So first query Solr next solr sends back id:s for all ads which match the query then I use the ID:s to query MySQL for the rest of the info. My Q is When doing the part with MySql should I save all the received ID:s into an array and then query mysql to find all records with those ID:s? Should I do something like this? (might contain some code errors):  for ($i=0; $i<$id_from_solr.length; $i++){ mysql_query(""SELECT * FROM table_name WHERE ad_id=$id_from_solr[$i]""); } The above seems not like a good solution because it does a ""new query"" everytime it loops again! How would you do it? Follow-up Question: Would adding a sort function into the MySQL query slow things down compared to WITHOUT using the sort function? for example:  ORDER BY insert_date ASC And last Q: Is there anyway to cache MySQL results so when sorting I don't have to make a new query? Thanks alot! If you need more input let me know and I will update this Q! If the query is slow with the _ORDER BY_ try addind an INDEX on that coulomb. I think you meant ""cache"" rather than ""catch"" - I've made this edit for clarity. For the first part here's how I would write a single query statement: $instr=implode("" ""$id_from_solr); $stmt = ""SELECT * FROM table_name WHERE ad_id IN ("".$instr."")"";  Question 1 (retrieving IDs and then querying the database): why not return some of your fields from the Solr query so that you don't always have to hit the database as well? Q2 (Performance and sorting): well sorting represents an extra task to perform on your data so it is bound to add a bit of work for the database: this can of course be minimized if you have an index on your ORDER BY column(s). Q3 (catching MySql queries): you can either turn on the MySql cache (which will return a cached copy of your results if the request matched a previous one assuming the data has not been changed in the interim) or use a caching layer outside of the database such as EhCache: http://ehcache.org/",php sql mysql database
3232893,A,"need help with my database design I really really cant get my head around this i've thought about this for ages but the penny wont drop. I have just started learning php and sql so for all i know its probably really simple. I want to create a football application with leagues fixtures and results for a pc football game that a group of us in college play. The idea is this User can log in. Manage a team check fixtures update their match results view results and check league table. I can do pretty much all of this except for the fixtures/results. Here is my database so far for what it's worth. tblUsers ( id PK username password team_id FK (referencing id of tblTeams) ) tblTeams ( id PK name ) tblFixtures ( id homeTeam awayTeam ) This is where im stuck. Should tblFixtures be like this instead: tblFixtures ( id ownteam oppteam ) Ultimately what i want to achieve is this. User logs in checks fixture. Plays against opponent. The home player reports match puts in score submits. The away player gets sent the report to accept/deny. Then that saves to the database updates results table and and league table. Im sure i could code this in php im just not sure how i would structure the database. Can anyone give me advice to understand how to do this? THanks Is there a difference between `tblFixtures ( id homeTeam awayTeam )` and `tblFixtures ( id ownteam oppteam )` - do the column names being different actually mean anything? What do you mean by homeTeam? Do You mean the team in who's city the match takes place or do You mean the team that the logged in user belongs to? @Will A they work the same but what i meant by them both are that i dont think im looking at it properly. When i create a database should i be thinking as if im a user or an admin collecting stats? If that makes sense? @Dave homeTeam means the home place of the football team. Jonny I think I'd approach this with a ""games"" table that includes the following fields: Table Games: id (pk int auto-increment) homeTeamId (int) awayTeamId (int) homeTeamScore (int) awayTeamScore (int) approved (enum Y/N) So game is entered initially with a home/away team id. Now the system knows there's a game to display upcoming (perhaps add date/time/field/etc) If score isn't set system knows the game hasn't happened yet (or use date as described previously) Home team logs in adds score system auto emails opponent for approval. Upon approval approved field is updated to a Y and process is complete. Ah nice I like it. Two birds with one stone. Makes sense thanks. Just to clarify something you say put homeTeamId and awayTeamId as INT's. Does this mean I need to create a relationship with team_id? Or is that not needed? Im also thinking using INT's would make coding easier especially with javascript? I'm a mysql guy not sure what system you're working on...having worked in shops that run Oracle and Sql server I know there can be different ways of defining relationships. That being said I would indeed use id's from tblTeams....in my situation I'd simply reference the values through join statements when I needed access to that info. As a simple example I likely wouldn't need to know the team names to set the approval flag so no join would be necessary on that action. The more I code the more I realize how important it is to keep things as simple....",php sql database
3922853,A,"Will this get Search Engines to index my content? I have a classifieds website... The classifieds are displayed in a dynamic php page. For instance if one searches for ""bmw m3"" in the form (which is in index.html) and submits then a php page will appear showing results. The php page called results.php connects to mysql databases and fetches the information and puts them in a table and then outputs the table using a simple echo command.  <body> echo $table; </body> The classifieds shown in the table above are all just ""headlines"" so when clicking one classified to view all details then another php page opens called ad.php. Here I fetch the ad_id and then fetch all details from MySql and show to the users. Now if somebody doesn't like filling out forms (for example google crawlers or also users) I have all categories on my site at the bottom of index.html. Users may click these and then the results.php page appears showing all results in that category. Offcourse I also have a sitemap which consists of all classifieds and is dynamic. My problem is so far none of my classifieds have been indexed. My question is is a sitemap.xml with all classifieds in it as well as a link to the results.php page for each category enough for Search Engines to index the classifieds? What else do I need to do? FYI: I use mod rewrite to rewrite urls so in this case I have a rule which makes the original link to details of a classified:  www.domain.com/ad.php?ad_id=bmw_m3_249244 INTO:  www.domain.com/ads/bmw_m3_249244 And it is the rewritten URL I have in my sitemap. Thanks Probably just need to wait. Consider adding ` ` tags to help Google along though. Also you can register as a webmaster with Google and submit a site to them to speed up the process. Have you submitted your sitemap.xml to the search engines? or specified it in the robots.txt? Link below explains. http://en.wikipedia.org/wiki/Sitemaps  From what you have described  Google shouldnt have any problem indexing your pages. There are maybe other things involved. For instance if the links to the category pages and classified pages are done with Javascript google will not index that. How long have your pages been online? Does the main page show up in google search?",php sql mysql html database
2311680,A,"What kind of JOIN should I use here? I'm new to JOINS in MySql. I have six tables: t1 t2 t3 t4 t5 t6. And I also have one main table: main_table. TOTAL 7 TABLES! The first column of ALL tables is called classified_id. If the user searches for ""cars"" then the main table will match everything in table t1 (which is the cars table) where classified_id is the same in both tables. So:  SELECT * FROM main_table t1 WHERE main_table.classified_id=t1.classified_id This works fine although I am not sure this is the way to join here. Performance is an issue in my case! However here is my problem. Whenever ALL CLASSIFIEDS are searched then I need to match the main_table.classified_id to the other tables classified_id column and get every classified there is. How should this query be made up?  SELECT * FROM main_table t1 t2 t3 t4 t5 t6 // I have this so far which is not much! If you need more input just ask and I will update this Q. Thanks EDIT: Table setup:  main_table: t1: ID(PK) ID (PK) classified_id -> 25 classified_id -> 25 category -> CARS year -> 1997 What do you expect to happen when in one of the tables there are no record with classified_id. Because this is the main criteria which join type to use. It sounds like t1-t6 are classified entries each with 2 columns id and value where 'value' is something like '2008 Camry. Runs good.' Is that right? then return 0! No matches found! Check my update! If the row would exist in all tables (i.e. every table has a row for a specific classified_id) then you would use an inner join: SELECT m.classified_id m.category t1.year ........ FROM main_table m INNER JOIN t1 ON m.classified_id = t1.classified_id INNER JOIN t2 ON m.classified_id = t2.classified_id INNER JOIN t3 ON m.classified_id = t3.classified_id INNER JOIN t4 ON m.classified_id = t4.classified_id INNER JOIN t5 ON m.classified_id = t5.classified_id INNER JOIN t6 ON m.classified_id = t6.classified_id If the row does not exist in every table then you'd use LEFT JOINS so that rows are not dropped That will return an error because of using `SELECT *` - there are column name collisions with `classified_id`. I've edited the answer based on this/camran's edit  Use:  SELECT mt.* t1.* t2.* t3.* t4.* t5.* t6.* FROM MAIN_TABLE mt LEFT JOIN TABLE_1 t1 ON t1.classified_id = mt.classified_id LEFT JOIN TABLE_2 t2 ON t2.classified_id = mt.classified_id LEFT JOIN TABLE_3 t3 ON t3.classified_id = mt.classified_id LEFT JOIN TABLE_4 t4 ON t4.classified_id = mt.classified_id LEFT JOIN TABLE_5 t5 ON t5.classified_id = mt.classified_id LEFT JOIN TABLE_6 t6 ON t6.classified_id = mt.classified_id I used LEFT JOINs because if JOIN was used - records would be omitted that did not have a supporting record in at least one of the t1/2/3/4/5/6 tables. You might find this link helpful for understanding JOINs.",php sql mysql html database
1139360,A,"PHP Cookie Security Question I have the following code that is presenting a 'word-of-the-day' As I am relatively new to php coding I wanted to make sure that there weren't any security issues for how I am selecting from my database from the cookie value. Thanks. if ($word_of_the_day) { $wotd = $wpdb->get_results(""SELECT termdefinition FROM glossary WHERE term = '{$word_of_the_day}'""); foreach ($wotd as $term) { } } elseif ($_COOKIE['WOTD']) { $word_of_the_day = htmlspecialchars(addslashes($_COOKIE['WOTD'])); $wotd = $wpdb->get_results(""SELECT termdefinition FROM glossary WHERE term = '{$word_of_the_day}'""); foreach ($wotd as $term) { } } else { $wotd = $wpdb->get_results(""SELECT termdefinition FROM glossary ORDER BY RAND() LIMIT 1""); foreach ($wotd as $term) { setcookie(""WOTD"" $term->term time()+86400); } } Where does $word_of_the_day come from? If it comes from user input you are open to SQL injection.  One of the safest ways is to use the PDO MySQL functions which implements parameters: $db = new PDO('mysql:host=hostname;dbname=defaultDbName' 'username' 'password'); $stmt = $db->prepare('SELECT termdefinition FROM glossary WHERE term = :wotd'); if ($stmt) { if ($stmt->execute(array(':wotd' => $word_of_the_day))) { //This is safe for any input method $info = $stmt->fetchAll(); foreach($info as $row) { //Whatever } } } The PDO drivers does the correct escaping / quoting according to the data type in the table.  You should check out mysql_real_escape_string: ""Escapes special characters in a string for use in a SQL statement"". You don't have to do the stuff that you're doing with htmlspecialchars and addslashes manually. Are you familiar with SQL injection security risks? If the variable that you're including in the SELECT statement $word_of_the_day comes from the user then you have a potential SQL injection problem.  Well if $word_for_the_day comes from user input there's your first problem. Do this before you use it: $word_for_the_day = mysql_real_escape_string($word_for_the_day); Your cookie actually looks OK. The htmlspecialchars() and addslashes() calls in the context you're using them don't appear vulnerable to SQL injection or XSS attacks.  Another option you could consider would be to store the id of the word instead of the word itself in the cookie. That way it can only ever be an integer. Of course using the word is fine too as long as you mysql_real_escape_string it first I just wanted to offer another option.  addslashes is extremely weak. First thing run everything you query from the db through mysql_escape_string to prevent sql injection. That's just the basics. if($word_of_the_day){ $word_of_the_day = mysql_escape_string($word_of_the_day); $wotd = $wpdb->get_results (""SELECT termdefinition FROM glossary WHERE term = '{$word_of_the_day}'""); Also cookies in general aren't very secure no matter how secure code you write. For a much more secure solution I recommend you use PHP sessions ($_SESSION). You can store variables in this superglobal variable and it will stay there between page loads. http://www.php.net/manual/en/session.examples.basic.php After that you may want to protect against session hijacking or poisoning if you're really going for it",php sql database security cookies
1940254,A,"I have to write two SQL statements in order to update a record is there a better way to do it? I want to update a table: $result=mysql_query(""select balance from tablename where userid='$userid"")or die(mysql_error()); $row=mysql_fetch_assoc($result); $accountbalance=$row['balance']; if($accountbalance>$cost) { $result=mysql_query(""update tablename set balance-'$cost' where userid='$userid"")or die(mysql_error()); } else { ... } You see I have to write two mysql statements is there a better way to do it? mysql_query(""update users set balance=balance+'$pwbalance'-'$totalprice' where memberid='$memberid' and (balance+'$pwbalance'-'$totalprice')>=0"")or die(mysql_error()); $count=mysql_affected_rows(); Why is $count is 0 even I think it should be 1? Waiting a solution. Do you know that `$count` is 1 in your original two query approach? UPDATE tablename SET balance=balance-$cost WHERE userid=$userid AND balance > $cost If you check that balance > cost I'd make damn sure that at least 1 row got updated. ""Not enough balance 0 rows updated' :-) so I use mysql_affected_rows to get the result? Right - I would just like to point out that in the answer it should probably read ""$cost"" instead of just ""cost"" (in both cases without the double quotes) Roland you're right I must have misread this as for some reason I had the idea that `cost` was another column. Fixed. mysql_query(""update users set balance=balance+'$pwbalance'-'$totalprice' where memberid='$memberid' and (balance+'$pwbalance'-'$totalprice')>=0"")or die(mysql_error()); $count=mysql_affected_rows(); Why is $count is 0 even I think it should be 1?",php mysql sql database sql-update
85,A,"Flat File Databases What are your best practices around creating flat file database structures in PHP? A lot of the more mature PHP flat file frameworks I see out there attempt to implement SQL-like query syntax which is over the top for my purposes in most cases (I would just use a database at that point). Are there any elegant tricks out there to get good performance and features with the small code overhead one would want by taking on this problem in the first place? You might consider SQLite. It's almost as simple as flat files but you do get a SQL engine for querying. It works well with PHP too. SQLite was build into 5.0+ by default but discountinued (!) from PHP 5.4+ on !!! As I write this in July 2012 SQLite will not work on up-to-date systems anymore by default. Official statement [here](http://www.php.net/manual/en/sqlite.requirements.php) Installing the SQLite PDO driver is pretty trivial if you have server access. On Ubuntu/Debian running Apache2 just do apt-get install php5-sqlite service apache2 restart  This one is inspiring as a practical solution: https://github.com/mhgolkar/FlatFire It uses multiple strategies to handling data... [Copied from Readme File] Free or Structured or Mixed - STRUCTURED Regular (table row column) format. [DATABASE] / \ TX TableY \_____________________________ |ROW_0 Colum_0 Colum_1 Colum_2| |ROW_1 Colum_0 Colum_1 Colum_2| |_____________________________| - FREE More creative data storing. You can store data in any structure you want for each (free) element its similar to storing an array with a unique ""Id"". [DATABASE] / \ EX ElementY (ID) \________________ |Field_0 Value_0 | |Field_1 Value_1 | |Field_2 Value_2 | |________________| recall [ID]: get_free(""ElementY"") --> array([Field_0]=>Value_0[Field_1]=>Value_1... - MIXD (Mixed) Mixed databases can store both free elements and tables.If you add a table to a free db or a free element to a structured db flat fire will automatically convert FREE or SRCT to MIXD database. [DATABASE] / \ EX TY  One way to store flat-file content would be to save literal arrays to php files. For example: $data = array(); if( $_POST ) { $data = $_POST; $content = ""<?php\n""; $content .= '$data=' . var_export($data true) . ""\n""; $content .= ""?>""; save_to_file($filename $content); } // echo form `""Well what is the nature of the flat databases. Are they large or small. Is it simple arrays with arrays in them? if its something simple say userprofiles built as such: $user = array(""name"" => ""dubayou"" ""age"" => 20 ""websites"" => array(""dubayou.com""""willwharton.com""""codecream.com"") ""and_one"" => ""more""); and to save or update the db record for that user. $dir = ""../userdata/""; //make sure to put it bellow what the server can reach. file_put_contents($dir.$user['name']serialize($user)); and to load the record for the user function &get_user($name){ return unserialize(file_get_contents(""../userdata/"".$name)); } but again this implementation will vary on the application and nature of the database you need.  IMHO you have two options if you want to avoid homebrewing something: 1) SQLite If you're familiar with PDO you can install a PDO driver that supports SQLite. Never used it but I have used PDO a ton with MySQL. I'm going to give this a shot on a current project. 2) XML Done this many times for relatively small amounts of data. XMLReader is a lightweight read-forward cursor-style class. SimpleXML makes it simple to read an XML document into an object that you can access just like any other class instance.  If you're going to use a flat file to persist data use XML to structure the data. PHP has a built-in XML parser.  A low level object API flatfile database is Mimesis (an open source PHP flat file database low-level API).  If you want a human-readable result you can also use this type of file : ofaurax|27|male|something| another|24|unknown|| ... This way you have only one file you can debug it (and manually fix) easily you can add fields later (at the end of each line) and the PHP code is simple (for each line split according to |). However the drawbacks is that you should parse the entire file to search something (if you have millions of entry it's not fine) and you should handle the separator in data (for example if the nick is WaR|ordz).  That's true. serialize() can be pretty useful for that as well. You could serialize but this saves a step since you don't have to unserialize. Not sure if its actually better performance-wise. I think the trick to coming up with a viable system is finding some way to index the data nodes without killing yourself with complexity. Maybe have one central file that keeps track of all indexes? Like tags.txt which has a list of all post id's associated with each tags. May have to keep redundant data around to save time.  In my opinion using a ""Flat File Database"" in the sense you're meaning (and the answer you've accepted) isn't neccesarily the best way to go about things. First of all using serialize() and unserialize() can cause MAJOR headaches if someone gets in and edits the file (they can in fact put arbritrary code in your ""database"" to be run each time.) Personally I'd say - why not look to the future? There have been so many times that I've had issues because I've been creating my own ""proprietary"" files and the project has exploded to a point where it needs a database and I'm thinking ""you know I wish I'd written this for a database to start with"" - because the refactoring of the code takes way too much time and effort. From this I've learnt that future proofing my application so that when it gets bigger I don't have to go and spend days refactoring is the way to go forward. How do I do this? SQLite. It works as a database uses SQL and is pretty easy to change over to mySQL (espescially if you're using abstracted classes for database manipulation like I do!) In fact espescially with the ""accepted answer""'s method it can drastically cut the memory usage of your app (you don't have to load all the ""RECORDS"" into PHP)  I have written two simple functions designed to store data in a file. You can judge for yourself if it's useful in this case. The point is to save a php variable (if it's either an array a string or an object) to a file. <?php function varname(&$var) { $oldvalue=$var; $var='AAAAB3NzaC1yc2EAAAABIwAAAQEAqytmUAQKMOj24lAjqKJC2Gyqhbhb+DmB9eDDb8+QcFI+QOySUpYDn884rgKB6EAtoFyOZVMA6HlNj0VxMKAGE+sLTJ40rLTcieGRCeHJ/TI37e66OrjxgB+7tngKdvoG5EF9hnoGc4eTMpVUDdpAK3ykqR1FIclgk0whV7cEn/6K4697zgwwb5R2yva/zuTX+xKRqcZvyaF3Ur0Q8T+gvrAX8ktmpE18MjnA5JuGuZFZGFzQbvzCVdN52nu8i003GEFmzp0Ny57pWClKkAy3Q5P5AR2BCUwk8V0iEX3iu7J+b9pv4LRZBQkDujaAtSiAaeG2cjfzL9xIgWPf+J05IQ=='; foreach($GLOBALS as $var_name => $value) { if ($value === 'AAAAB3NzaC1yc2EAAAABIwAAAQEAqytmUAQKMOj24lAjqKJC2Gyqhbhb+DmB9eDDb8+QcFI+QOySUpYDn884rgKB6EAtoFyOZVMA6HlNj0VxMKAGE+sLTJ40rLTcieGRCeHJ/TI37e66OrjxgB+7tngKdvoG5EF9hnoGc4eTMpVUDdpAK3ykqR1FIclgk0whV7cEn/6K4697zgwwb5R2yva/zuTX+xKRqcZvyaF3Ur0Q8T+gvrAX8ktmpE18MjnA5JuGuZFZGFzQbvzCVdN52nu8i003GEFmzp0Ny57pWClKkAy3Q5P5AR2BCUwk8V0iEX3iu7J+b9pv4LRZBQkDujaAtSiAaeG2cjfzL9xIgWPf+J05IQ==') { $var=$oldvalue; return $var_name; } } $var=$oldvalue; return false; } function putphp(&$var $file=false) { $varname=varname($var); if(!$file) { $file=$varname.'.php'; } $pathinfo=pathinfo($file); if(file_exists($file)) { if(is_dir($file)) { $file=$pathinfo['dirname'].'/'.$pathinfo['basename'].'/'.$varname.'.php'; } } file_put_contents($file'<?php'.""\n\$"".$varname.'='.var_export($var true)."";\n""); return true; } This is a four-year-old question with an accepted answer and many additional answers. Consider focusing on newer questions unless the accepted answer here is clearly wrong or inadequate.  Here's the code we use for Lilina. It stores each entry as a separate file which we found is efficient enough for use (no unneeded data is loaded and it's faster to save).  Just pointing out a potential problem with a flat file database with this type of system: data|some text|more data row 2 data|bla hbalh|more data ...etc The problem is that the cell data contains a ""|"" or a ""\n"" then the data will be lost. Sometimes it would be easier to split by combinations of letters that most people wouldn't use. For example: Column splitter: #$% (Shift+345) Row splitter: ^&* (Shift+678) Text file: test data#$%blah blah#$%^&*new row#$%new row data 2 Then use: explode(""#$%"" $data); use foreach the explode again to separate columns Or anything along these lines. Also I might add that flat file databases are good for systems with small amounts of data (ie. less than 20 rows) but become huge memory hogs for larger databases.  That's true. serialize() can be pretty useful for that as well. I think the trick to coming up with a viable system is finding some way to index the data nodes without killing yourself with complexity. This is post #100! post 100 :D upvote  One framework I'm considering would be for a blogging platform. Since just about any possible view of data you would want would be sorted by date I was thinking about this structure: One directory per content node: ./content/YYYYMMDDHHMMSS/ Subdirectories of each node including /tags /authors /comments as well as simple text files in the node directory for pre- and post-rendered content and the like. This would allow a simple PHP glob() call (and probably a reversal of the result array) to query on just about anything within the content structure:glob(""content/*/tags/funny""); would return paths including all articles tagged ""funny"".",php sql database flat-file
2208152,A,Filtering duplicities by another table I have two (example) tables here A) data_table: +----------+-------+ | location | value | +----------+-------+ | 43 | 38 | | 44 | 31 | | 3 | 31 | | 11 | 38 | | 47 | 35 | | 49 | 31 | | 50 | 31 | | 55 | 16 | | 56 | 16 | | 59 | 35 | | 42 | 35 | +----------+-------+ and B) neighbour_table: +-----------+-----------+ | location1 | location2 | +-----------+-----------+ | 43 | 3 | | 43 | 11 | | 43 | 55 | | 3 | 50 | | 3 | 16 | | 49 | 56 | | 49 | 42 | +-----------+-----------+ I would like to select the locations with same value as at least one of their neighbour has. What is the best way to do this (according to performance)? So far I tried this: 1) Select all locations with value which is present more than once in the table: SELECT locationvalue FROM data_table WHERE value IN (SELECT value FROM data_table GROUP BY value HAVING COUNT(value) > 1); 2) Now I would like to filter the result using the neighbour_table but how? Using JOIN? Or another derived table (subquery)? I think about using PHP to do the job but how about the performance? Anyway I would like to see the SQL solution if there is one. Thanks in advance You could use a join to look up the value for both neighbours. Then you can select neighbours with the same value using a where clause: select n.* from neighbour_table n join data_table d1 on d1.location = n.location1 join data_table d2 on d2.location = n.location2 where d1.value = d2.value That's it? That's pretty simple! Shame I didn't realize that :-) Thank you very much.,php sql mysql database performance
2361886,A,"Solr returns 'oldest' records instead of 'newest'; 'Rows' and 'Start' parameters How come Solr returns the ""Oldest"" records first when specifying these parameters. As you probably know these are mainly for ""paging"" purposes. And if I chose something like 10 Rows per page and with the start set to 0 this means in my mind that the latest 10 records should be displayed. However Solr displays the oldest 10 records. How can I change this? Thanks Solr is not a database it is a search engine. The order in which you get the rows is not based on the order they are inserted but on a particular ranking algorithm. You can find more information here: Solr Relevancy FAQ Why are search results returned in the order they are? If no other sort order is specified the default is by relevancy score. and Solr Relevancy CookBook You can specify a sorting order: using the sort parameter: Examples from the Solr Tutorial: Solr provides a simple method to sort on one or more indexed fields. Use the 'sort' parameter to specify ""field direction"" pairs... q=video&sort=price desc q=video&sort=price asc q=video&sort=inStock asc price desc What if I would like to sort on date inserted? Would I have to create a field with the date and then sort on that? And does it have to be indexed AND stored or only one of the above? Also is there any way around this as by putting a document on top instead of at the bottom of the stack when inserting a new document? If I could get it to land on top it would solve my problem. No if you want a different sort order than the Ranking you should use one solr field. You need to store it if you want to retrieve it afterwards.",java php sql mysql database
3263189,A,"back up a database I need to back up a big database everydays. Should I code it myself in PHP or is there a good script out there ? How big is ""big""? What sort of database is it? MySQL? Do you own the server it is on or is this a hosted database? We need more details to answer helpfully. around 20mo it's SQL and I do not own the server 20mb isn't big but it might be big enough to cause a PHP timeout. Do you mean `Microsoft SQL Server` when you say `SQL`? Yes here is an award-winning script at phpclasses.org.  If you run your server under linux use a cronjob to do it (for example nightly)! Cron could trigger mysqldump (in case you are using MYSQL) backing up your database(s). Also worth considering if it's MySQL on Linux is http://sourceforge.net/projects/automysqlbackup/ -- this again can be triggered by cron and uses mysqldump but it stores daily weekly and monthly backup cycles in a nice structure and is quite configurable.  You can cronjob the tool provided with your DBMS  If you're using cPanel or Plesk or something then they generally have back-up scripts available to you (but as Chris Aitchison says) how useful any of these answers are depends on the details.",php sql database backup
2677322,A,"Which MySql line is faster: I have a classified_id variable which matches one document in a MySql table. I am currently fetching the information about that one record like this:  SELECT * FROM table WHERE table.classified_id = $classified_id I wonder if there is a faster approach for example like this:  SELECT 1 FROM table WHERE table.classified_id = $classified_id Wont the last one only select 1 record which is exactly what I need so that it doesn't have to scan the entire table but instead stops searching for records after 1 is found? Or am I dreaming this? Thanks Is there a unique or primary key constraint on `classified_id`? You should add an index to the classified_id column to avoid a table scan. CREATE INDEX classified_idx ON table (classified_id); +1 Always good advice Not always though. With many inserts it can do some bad things Agree with `Col. Shrapnel` might be a bad idea when the field is the primary key. OP mentioned that the field value identified the row uniquely.  You want to use LIMIT: SELECT * FROM table WHERE table.classified_id = $classified_id LIMIT 1 will this improve performance? @Camran - Hard to say your current version will literally select ""1"" a one column one row result this will actually select the first record which seems to be what you want...but it is a different result. You won't get performance *better* (or simpler) than this so I'd go with it. @John I would say that this is not the answer the question states that there is only one record satisfying the query so LIMIT will make no difference  Why don't you try it? SELECT 1 FROM table; returns +---+ | 1 | +---+ | 1 | | 1 | | 1 | | 1 | | 1 | | 1 | +---+ 6 rows in set (0.00 sec) which is a computed column a constant value of one in this case (for all 6 rows in my test case). For your question SELECT * FROM table WHERE table.classified_id = $classified_id this is the fastest way to retrieve data (assuming that you need all the columns from the table) There are following things that you can do: check if there is an index on classified_id if there is and if using the index is faster the database will use the index and not scan the whole table so you'll get what you want (using index can be slower if there are just a few records or if a high percentage of records satisfy a criteria but having index will not bring any penalty to reading data database will chose the best way to retrieve it) if you don't need all the columns from the table then specify exactly which ones you need if there is more then one record that satisfy the criteria you can use LIMIT keyword to get only one or only a few records other then this for such a simple query the only next step would be to partition the table to several hard drives (which might not be an option on your system).  Yes you're dreaming this. There are 2 major faults in your reasoning: The question itself. Most newbies fail to that hole though. They ask ""what if I do something - will it be faster?"". But the proper question is ""My application Runs slow. How to find a bottleneck?"" and ""I have certain bottleneck. How to eliminate it?"" You suppose fieldlist part influencing database search. That's wrong. The field list is responsible only for the returned fields of the found rows. In both cases the number of rows would be the same.",php mysql sql database
3196022,A,"mySQL images upload I need a simple code to upload images to mySQL using PHP... short! snippet... and is it possible to upload an html css file to mySQL?... its reason is complicated but all answers are appreciated!... EDIT:: say I have 1000 users.. and they each have their own layout for their page.. So inside their MYSQL record will be a html file css file(possibly) and image(s)... I am a big fan of using a filesystem for storing physical files i've yet to see any solid reason why they are better off in a database. To automate this process you could have a shell script called through exec exec(""/home/some/path/my_filesystem_creator.sh "".escapeshellarg($args)); or PHP's native mkdir or anything really. If you went for a structure like: /common/ /userdirs/1/ /userdirs/2/ essentially all i would imagine you would need to do is create a user dir and copy into it the default versions of their site assets - images/css/html etc. This should be easy enough to manage I am too.. i would rather use a filesystem... how would you suggest I automate a directory/file creation? i would have a basic template that can be copied I guess... but how would you suggest doing it? have any links? simple option above perfect... thanks!  You might want to take a look at http://mysqldump.azundris.com/archives/36-Serving-Images-From-A-Database.html and http://hashmysql.org/index.php?title=Storing_files_in_the_database before doing that. Storing files in mysql is generally considered a bad idea.  Just use different CSS rules for each user. Create the CSS dynamically though PHP based on user-specific variables. For example if they have a div with an avatar or some other personal image just create a class that uses variables for images and then you really only need one or two files at most to do the whole thing. I would use a heredoc but you could just use quotation marks to integrate the PHP. php creates your css - .useravatar{ 'background: url($baseurl.$urseridpic)'} In the html the div just needs the class of 'useravatar' never needing to be changed.  Your page would be faster if you generate a directory on your filespace for each user and store their css/js/image files there. The reason for this is that when you like to output your images to the browser you will need to establish an own db connection for each file (since each is an own HTTP request to a PHP file selecting the image). I see.. ya.. well the only problem with that is that whenever I get another user I would have to create another file set.. have any automated ideas? You could automate the file creation... There are functions in PHP like mkdir() and fopen() uhhu.. thanks.. I guess i will go with a filesystem... now just how to do it with the least amount of effort...  Are you asking how to store a file in the database? http://www.php-mysql-tutorial.com/wikis/mysql-tutorials/uploading-files-to-mysql-database.aspx Or do you need to know how to upload a file to your web server in order to display it in a PHP/MySQL website? I know how to upload files ect... I need SOME of them INSIDE the MYSQL database.. for instance.. I have 1000 users.. and they each will have their own layout for their page.. So inside their record will be a html file css file(possibly) and image(s)... get the idea? Thanks for the link.. helps alot!",php sql mysql database
3284275,A,"concat tables with different content I am currently building a small web application for publishing stories using PHP and MySQL. Each story may either be a article (with lots of fields and data) just a hyperlink/url just an image or a downloadable file with certain attributes (once again with lots of fields). My problem is related to finding the optimal database layout for the system. I have thought about 3 different solutions that may or may not work (fields are just examples don't get caught of with whether the data should be stored in the database or not): 1) Making one table for each type and just UNION them. E.g: articles id | date | title | author | preview | last_edited | category | content hyperlinks id | date | title | author | url pictures id | date | title | author | thumbnail | fullimg files id | date | title | author | filetype | filename | filecontent Is it possible to make a SQL statement that will concat these in such a way that every field is added to the rows from the individual tables and the individual row is ""tagged"" with its type depending on which table its from? Or do I have to settle for just the common fields (3-4 field WILL be identical for each table) and to individual lookups for each row? 2) Making some sort of index table that references the correct table and row depending on the type? index id | type | title | date | referenceid -> either articles hyperlinks pictures or files depending on the ""type"" field. Is this possible in some way when using foreign keys? I suspect no but not really sure what you can and can not do in MySQL. 3) Have ALL fields for ALL types in one and the same table and just make the specific field nullable (I dont really like this solution since it appears messy). Any ideas? I suspect I can not be the first person to have encountered the issue of references to different entity types/fields depending on some sort of type. Ideas are highly appreciated. If you name fields you can union then quite easily and throw in whatever constants you like. I do this all the time: Select id 'articles' as tablename title author preview last_edited category '' as url from articles UNION Select id 'hyperlinks' as tablename title author '' as preview '' as last_edited '' as category url From hyperlinks ... UNION is inherently slow. For SQL Server UNION ALL is a lot faster - not sure about mySQL. But like everything else with databases performance is dependent on too many factors to isolate. Unless you are dealing with gobs of data I wouldn't expect this query to be the choke point. What would be the performance penalty of solving it in this way? I am quite interested in finding out the different advantages and disadvantages of possible solutions.  I'd add a 'type' column to each table that specifies what table it came from and then do an equijoin followed by a group: SELECT * FROM articles a INNER JOIN hyperlinks h ON a.id =h.id AND a.date=h.date AND a.title=h.title AND a.author=h.author JOIN pictures p ON h.id=p.id AND h.date=p.date AND h.title=p.title AND h.author=p.author JOIN files f ON p.id=f.id AND p.date=f.date AND p.title=f.title AND p.author=f.author ORDER BY type; It's an ugly-looking query but it should do what you want... What would be the performance penalty of solving it in this way?  You have so few fields just put them all in one table and add a type field. No sense overcomplicating things.  I'd suggest adding a stories table to be the central table. This allows for a great deal of flexibility in the system design and centralizes the data that is core to a story. Something along these lines: stories id date title author article_id hyperlink_id picture_id file_id articles id preview last_edited category content hyperlinks id url pictures id thumb full files id filetype filename filecontent Won't this have some issues with foreign keys and stuff like that if for instance article_id isn't relevant for that particular entry? FKs can be null",php sql mysql database database-design
2701262,A,"How to use multiple database adapter to query involving tables from different databases? I've 2 databases which are set up as mentioned here. How can I write a SQL query which involves database_1.table_1 and database_2.table_1 ? E.g. consider this query $sql = ""SELECT distinct database_1.users.id database_1.users.name FROM database_1.users database_2.sales WHERE database_2.sales.user_id = database_1.users.id""; How this query could be written using multiple db adapter? Edit: I thought of using 2 database adapters because this way I can change actual database names in application.ini. Is there any other way I can change database names without changing sql queries? Solution I'm using: I used another config variable to read second database name. First database name comes from adapter settings. You can't unless you use something like Federated databases but even then you'd use one database adapter for the query and let the database handle the fetching from the federated other databases. Zend_Application_Resource_Multidb is just setting up multiple database adapters at once. Nothing more. You will use each adapter separately from the other. Use Adapter1 to query database1 and use adapter to query database2. Two queries. Merge the results inside your application. @Gordon: That's what I suspected. @Gordon: could you please comment on my 'Edit in the question' above? @understack are these databases on the same server in the same database system? yes. BTW I ended up using the approach I mentioned in edit. I made another config variable to read second database name and it is working properly. @understack ah well you solved it yourself :) cheers",php sql database zend-framework
2798572,A,Will MySql caching cause performance problems? I am about to upload my website onto a VPS. It is a classifieds website where all data is stored in MySql and Solr. I wonder if when using MySql:s cache the server will slow down? Ie if somebody makes a search for the first time and MySql is to cache the query will the caching make the server slower than if it would not cache anything? After the caching is done I know things will improve in terms of performance... But I would like to know if I should even use the cache or not what do you think? Thanks Best is not to make any assumptions but to do some benchmarking. There are several programs available to benchmark a website. I've never run into a situation where Mysql caching was detrimental to performance. The first time a query is run there is no performance hit when the query is written to Mysql's memory cache. The only significant resource used when query caching is memory. The more memory you configure Mysql to use the more it will cache. But to get the real answer you need to test it. Gathering metrics is the only way to get a real answer for your particular situation. There are a variety of caching techniques some of which might be more useful than query caching to your particular situation.,php sql mysql database caching
2228356,A,"Get MySql result-set size from query using PHP Is it possible to get the size of the result-set when doing a query? I need to set a proper MySql cache_limit (MB) and therefore I am trying out some queries but I need to know the sizes of the result-sets to fine-tune my cache configurations. What exactly does query_cache_limit do when measuring the size of a query (or result)... Any help appreciated! Thanks So you want to size in bytes of a mysql query result? And what mysql_fetch function are you using? fetch_assoc...... There are several ways to measure the size of data sent from your mysql server to your php process: Pure SQL Do your query and execute SHOW SESSION STATUS directly after it. You will get several statistics including the sent and received bytes: Bytes_received 191 Bytes_sent 120 Subtract the bytes from a SHOW SESSION STATUS query alone and you have the exact values. mysqlnd PHP 5.3 offers the ""MySQL Native Driver"" which gives you some nice options to debug your connection. Do your query and then call mysqli_get_connection_stats. It returns the network statistics too: Array ( [bytes_sent] => 43 [bytes_received] => 80 ... You need to use mysqli and mysqlnd here but you get more accurate numbers as with the pure SQL solution.  As a rouph estimate you coud try <?php // This is only an example the numbers below will // differ depending on your system echo memory_get_usage() . ""\n""; // 36640 $a = mysql_fetch_assoc($result); echo memory_get_usage() . ""\n""; // 57960 unset($a); echo memory_get_usage() . ""\n""; // 36744 ?> or echo strlen(serialize(mysql_fetch_assoc($result))); strlen won't always be indicative of the byte length as there may be things like multibyte strings in the response (which take up one character but several bytes) Very true like I said this would only be an estimate. Considering the problem it is likly Camran would know if there would be an issue with multibyte strings. Also consider that serialized string might not represent an accurate size compared to a array  I believe Petah's method of using memory_get_usage before and after is probably the easiest way. To get a more accurate result you could use mb_strlen but you'd need to loop through each row in the result and each field of each row summing up the total as you go. You'd also need to use the correct encoding. http://us3.php.net/manual/en/function.mb-strlen.php",php sql mysql database caching
2208934,A,"Character set in MySQL; Can't insert special characters why? I can't insert special characters. Whenever I try to all characters BEFORE the special character gets inserted but after the special character nothing is inserted into the field. $conn = mysql_connect($dbhost $dbuser $dbpass) or die('Error connecting to mysql'); mysql_select_db($dbname$conn); mysql_set_charset('utf-8' $conn); mysql_query(""SET NAMES 'utf8'"") or die(mysql_error()); mysql_query(""SET CHARACTER SET 'utf8'"") or die(mysql_error()); I have set the table to utf-8 collation and all fields as well... Any thoughts? Thanks You'll have to provide examples of the code you use to do the insert and the results you get. Have you set the necessary UTF-8 parameters in your PHP config? I used to begin my PHP files with that:  ini_set(""mbstring.internal_encoding""""UTF-8""); ini_set(""mbstring.func_overload""7); ..that fixed it..",php sql mysql database
3746632,A,"PHP: SELECT ing 2 tables? I have a activities page and a statusmessages page for each user. In activities it contains what the users have done such as being friends with someone commented on pictures and so. users_activities id | uID | msg | date In users_statusmessages I got the statusmessages the user creates. users_statuses id | uID | message | date uID is the user´s id. Now i would like to select both of them and while{} them in one. Where they get sorted by date desc ( as the date in both tables is UNIX timestamp). So something like WHERE uID = '$userID' ORDER BY date DESC So example of how i wish it to look: User: Today is a good day (message) (date: 1284915827) (users_statuses) User have added as Jack as friend (msg) (date: 1284915811) (users_activities) User: I have a hard day today (message) (date: 1284915801) (users_statuses) User have commented on Jacks picture (msg) (date: 1284915776) (users_activities) How should i do this the right way? Something like this would do SELECT act.*status.* FROM users_activities act users_statuses status WHERE act.id = status.id AND status.id = '$UID' ORDER BY status.dateact.date DESC LIMIT 30 Spaced out for visual purposes: SELECT act.*status.* FROM users_activities act users_statuses status WHERE act.id = status.id AND status.id = '$UID' ORDER BY status.dateact.date DESC LIMIT 30 You may have misread the question. There is no relationship between activities and statuses as far as I can tell.  You need to use the UNION operator:  SELECT ua.msg ua.date 'activity' AS is_table FROM USERS_ACTIVITIES ua WHERE ua.uid = '{$userID}' UNION ALL SELECT us.message us.date 'status' FROM USERS_STATUSES us WHERE us.uid = '{$userID}' ORDER BY `date` UNION UNION removes duplicates. UNION ALL does not remove duplicates and is faster for it. But the data types at each position in the SELECT must match. In the query provided you can see that the date column is referenced in the second position. You'd get an error if the column order were reversed between the first and second query. The ORDER BY is applied to the result of the UNION'd query in standard SQL. In MySQL that includes the LIMIT clause. But MySQL also supports putting brackets around the UNION'd queries so you can use ORDER BY & LIMIT before the queries are UNION'd. When im using this in a while($show = mysql_fetch_array($query)) im receiving: mysql_fetch_array() expects parameter 1 to be resource boolean given in. This is because ORDER BY ua.date  how can i solve this? @Karem: Typo on my part see the update. And while waiting for answer on the ORDER part i tried echo $show[""msg""] and it works well gets all the user´s status but when I do $show[""message""] show anything. just noticed when i do $show[""msg""] it shows BOTH msg and messages like I wanted @Karem: Yes the column reference is based on the first of the UNION'd queries. Sorry mentioned everything but that. Ok last thing i think im trying to sort out WHERE `uID` = '$USER' but then i dont get any results. How is this wrong? @Karem: Sorry I missed that requirement. See the updated one. @OMG Ponies; ty OK almost there just one last thing how can i know if its from the status or activity? Example i want to make $show[""status""] bold if its a status else if its a activity just display without having it bold. How can i check for that? Last question before accepting thank you @Karem: Add a column with statically defined values. See the update I labelled the column ""is_table"". You can check the value in PHP and handle presentation accordingly. So let me get this clear: I make a column called ""activity"" in users_activities and a column in users_statuses called ""status"" ? And then make a standardvalue ""1"" for it? And then after that i check by doing if(isset($show[""is_table""] == 1)) ? Sorry if im asking too much @Karem: Using what I provided `$show['is_table'] == 'activity'` for knowing when to handle activities; `$show['is_table'] == 'status'` for statuses. You can change the value to be numeric if you like. Yes ok so standardvalue should be status/activity ? OH my bad! I thought you want me to add an column in the table.. But now i understand what you did thank you accepted and +1! @Karem: I should have said ""derived column"" sorry.  You're going to want to use a union http://dev.mysql.com/doc/refman/5.0/en/union.html This is untested... (SELECT uID msg as message date from users_activities) UNION (SELECT uId message date from users_statuses) order by date desc limit 20 There are a lot more examples on that page",php sql mysql database
3613485,A,"Unable to Select Record from Database I am learning PHP and SQL and I'm trying to figure out how to select a record from a database. I created a function called selectById() Right now in the browser displayed is ""Error:"" but no specific error was displayed.  // function selectById -------------------------------------------------------------------- function selectById($pUInput) { $sql = mysql_query(""SELECT * FROM tblStudents WHERE id='$pUInput[0]'""); if (!mysql_query($sql)) { die('Error: ' . mysql_error()); } echo ""Record Selected""; } PHP Code: //Call function mainline mainline(); // Declare the function mainline function mainline() { $uInput = getUserInput(); $connectDb = openConnect(); // Open Database Connection selectDb($connectDb); // Select Database doAction($uInput); //display(); //closeConnect(); } //Declare function getUserInput -------------------------------------------------------- function getUserInput() { echo ""In the function getUserInput()"" . ""<br/>""; // Variables of User Input $idnum = $_POST[""idnum""]; // id (NOTE: auto increments in database) $fname = $_POST[""fname""]; // first name $lname = $_POST[""lname""]; // last name $major = $_POST[""major""]; // major $year = $_POST[""year""]; // year $action = $_POST[""action""]; // action (select insert update delete) $userInput = array($idnum $fname $lname $major $year $action); return $userInput; } function doAction($pUserInput) { echo ""In function doAction()"" . ""<br/>""; if ($pUserInput[5] == ""sel"") { selectById($pUserInput); } elseif ($pUserInput[5] == ""ins"") { insert($pUserInput); } } // Create a database connection -------------------------------------------------------- function openConnect() { $connection = mysql_connect(""localhost"" ""root_user"" ""password""); echo ""Opened Connection!"" . ""<br/>""; if(!$connection) { die(""Database connection failed: "" . mysql_error()); } return $connection; } // Select a database to ---------------------------------------------------------------- function selectDb($pConnectDb) { $dbSelect = mysql_select_db(""School"" $pConnectDb); if(!$dbSelect) { die(""Database selection failed: "" . mysql_error()); } else { echo ""You are in the School database! <br/>""; } } // function select --------------------------------------------------------------------- function selectById($pUInput) { $sql = mysql_query(""SELECT * FROM tblStudents WHERE id='$pUInput[0]'""); if (!mysql_query($sql)) { die('Error: ' . mysql_error()); } echo ""Record Selected""; } // function insert ----------------------------------------------------------------------------- function insert($pUInput) { $sql=""INSERT INTO tblStudents (first_name last_name major year) VALUES ('$pUInput[1]''$pUInput[2]''$pUInput[3]' '$pUInput[4]')""; if (!mysql_query($sql)) { die('Error: ' . mysql_error()); } echo ""1 record added""; } ?> SQL Syntax: CREATE TABLE `tblStudents` ( `id` int(11) NOT NULL AUTO_INCREMENT `first_name` varchar(30) NOT NULL `last_name` varchar(50) NOT NULL `major` varchar(40) NOT NULL `year` date NOT NULL PRIMARY KEY (`id`) ) You are running a query on a query result. This will not work. You will need to use something along the lines of $sql = mysql_query(""SELECT * FROM tblStudents WHERE id='"" . $pUInput[0] . ""'""); if (!$row = mysql_fetch_assoc($sql)) Which would assign $row an array value if the query did not fail. You may also want to filter the pUinput as well with mysql_real_escape_string as you do not necessarily know what it contains (or statically cast it to an integer). EDIT Added a bit extra information. thank you for the response. (i'm new to PHP and SQL i'm trying to fully understand your answer.) So the statement in the selectById() function will not actually select the record by that one statement alone--it needs the function mysql_fetch_assoc(). i'm just summarizing what i think i understand... Keep http://cwe.mitre.org/data/definitions/89.html in mind and take a look at http://docs.php.net/mysql_real_escape_string . Or even better use parametrized queries see e.g. http://docs.php.net/pdo.prepared-statements",php sql database forms
1381131,A,How to write SQL query for these 5 tables? I am writing an application that helps book exchange between users. I am using PHP and MySQL and I am pretty new to them both. I have 5 tables 3 data tables and 2 service tables: user: with user attributes (user_id name birth... etc). book: with book attributes (book_id name author publisher... etc). copy: represents actual copies of a books (copy_id condition comments... etc). user_copy: describes which user holds which copy composed out of userID and copyID. copy_book: represents the connection of copy and book composed out of copyID and bookID My question is: what is the easiest and most efficient statement for getting the book attributes and copy attributes for each copy that a user holds? Why do you have a separate `copy_book` table? To my mind it would make more sense to have a `bookID` column on the `copy` table. Usually you only need a table like `copy_book` if there is a many-to-many relationship between books and copies which I don't believe is the case You need to inner join all the tables that you are interested in: book copy user_copy and copy_book. The SELECT statement that returns attributes on all copies held by a user may look like this: SELECT B.bookID  B.name  B.author  B.publisher  C.condition  C.comments -- you may get other fields that you are interested in here.. FROM book B INNER JOIN copy_book CB ON B.bookID = CB.bookID INNER JOIN user_copy UC ON UC.copyID = CB.copyID INNER JOIN copy C ON C.copyID = UC.copyID WHERE UC.userID = <the user Id that you want> I hope it's pretty clear what the statement does but if you have any questions please ask.,php sql database mysql
1732657,A,"what is wrong with this mysql code $db_user=""root""; $db_host=""localhost""; $db_password=""root""; $db_name = ""fayer""; $conn = mysqli_connect($db_host$db_user$db_password$db_name) or die (""couldn't connect to server""); // perform query $query = 'SELECT * FROM posts'; $result = mysqli_query($conn $query) or die (""Couldn't execute query.""); // use returned data while($row = mysqli_fetch_assoc($result)) { echo $row['title']; } I get in the browser: ""mysql problem"". Help! UPDATE I have echoed the query. It shows SELECT * FROM posts and when I query manually it gets the rows. I think it has something to do with mysqli. I think i should use mysql. Do u think I have incompatibility problems with mysqli? i have echoed it. it shows SELECT * FROM posts. and when i query manually it gets the rows. i think it has something to do with mysqli. i think i should use mysql. do u think i have incompatibility problems with mysqli? are you going to change the question so that answers become invalid? Change $result = mysqli_query($conn $query) or die (""Couldn't execute query.""); to $result = mysqli_query($conn $query) or die (""Couldn't execute query because: "" . mysqli_error()); and you will know why the query is failing. Rule of thumb: Whenever you have a failed query print it out and run it through phpmyadmin or some other raw-query executor and you will discover very quickly what the problem is. i forgot to delete it. here is my new code and i still have problem! it shows nothing . just ""mysql error"" it says ""mysql problem"" not mysql error=) echo $query and execute it manually like I suggested.  You have empty WHERE clause. Remove it or add a search condition.",php sql mysql database
2103472,A,"Can you do queries against two databases if mysql_select_db was already used? I have code that in the connection setup selects the database using mysql_select_db(). $link = mysql_connect('localhost' 'user' 'pass'); mysql_select_db(""database1""); Can I later run a query against two databases such as: SELECT database1.row database2.row FROM database1.table database2.table WHERE database1.row = database2.otherrow even though ""database1"" was already selected at first? Or is there a method for unselecting the database? You can. Also check this out: How do I construct a cross database query in PHP?",php sql mysql database database-connection
2184235,A,"Small Php and MySql problem I have an array of ID:s and the ID:s are in this format:  Bmw_330ci_89492822 So it's a string! Now I have this code to find whatever is in that array in MySQL: ($solr_id_arr is the array I mentioned above it contains string ID:s) ex: $solr_id_arr[0] outputs Bmw_330ci_89492822 $solr_id_arr_imploded = implode("" "" $solr_id_arr); $query = ""SELECT * FROM my_table WHERE ad_id IN ('$solr_id_arr_imploded')""; $qry_result = mysql_query($query) or die(mysql_error()); Problem is this wont work because (I think) that there should be quotes around each of the imploded elements in order for MySQL to find the match. The field in MySQL I am matching is of type Varchar. Here is the $query echoed:  SELECT * FROM my_table WHERE ad_id IN ('Bmw_m3_cool_565440282 Bmw_m5_839493889') Do you have any other solutions for this all I need is to find matches in MySQL which are inside this array! Thanks Don't surround the entire thing in quotes. It is looking for where ad_id is 'Bmw_m3_cool_565440282 test' Use SELECT * FROM my_table WHERE ad_id IN ('Bmw_m3_cool_565440282' 'test') A quick fix would be to change: //this $solr_id_arr_imploded = implode("" "" $solr_id_arr); //to this $solr_id_arr_imploded = implode(""' '"" $solr_id_arr);  Simple switch to ' ' in implode(): implode(""' '"" $solr_id_arr); This together with the hardcoded quotes in the SQL string will format them as separate items.  This one seems complicated but it's more safer and fastest one function escaped($str) { return mysql_escape_string($str); } $arrayOfIds = array_map(""escaped"" $solr_id_arr); $solr_id_arr_imploded = implode("" "" $arrayOfIds); $query = ""SELECT * FROM my_table WHERE ad_id IN ('$solr_id_arr_imploded')""; $qry_result = mysql_query($query) or die(mysql_error());  Previous answers will work fine. Just make sure the strings themselves do not contain quotes. If they do escape each string before you do the implode().  If it were my code I'd write it like this: $solr_id_arr_imploded = ""'"" . implode(""' '"" $solr_id_arr) . ""'""; $query = ""SELECT * FROM my_table WHERE ad_id IN ($solr_id_arr_imploded)""; $qry_result = mysql_query($query) or die(mysql_error()); ...just because it keeps all the quoting work in one place. You might also want to make sure that the array isn't empty before entering this block of code. Otherwise the SELECT will match all empty ad_id's which probably isn't what you wanted. We're also assuming that the elements of the array don't include any quote characters (or user-provided strings that haven't been sanity-checked).",php sql mysql html database
2141486,A,"Should I index or store these fields in Solr (or any db)? Background: I have a cclassifieds website and users may for example search for cars and specify a price range mileage fueltype gearbox and a manually inputted query-string if they like to put something specific into the search ex ""bmw m3"". Questions: I am about to move this information to Solr for faster lookup and wonder if I have to index or store the fields. The only fields where users can search in is actually the ""headline"" and the ""description"" of the classified. They can however as I mention above specify price ranges for example. So I guess the ""headline"" and ""description"" fields should be indexed right? But should the price field and any other sub-option fields also be indexed? In a MySQL query the query-syntax would be something like this so you can compare to what I am talking about: (may contain errors forgot exactly how they where written)  $query=""SELECT * FROM cars_category WHERE headline='bmw m3' OR description='bmw m3' AND price BETWEEN 10000 AND 500000 AND fuel='petrol' AND etc etc""; So what do you think index/store all fields or what? Is there a method for determining what to store and what to index or both? Thanks PS: Descriptive answers are appreciated Index anything except for description. Most databases do NOT use the index when you do a query with a field using ""LIKE '%xxx%"". but it's a full-text field so I think it should be indexed... Not sure though!  and wonder if I have to index or store the fields. My understanding of Solr is very limited but what confused me when I started was the indexing terminology: in a database storing the data and creating/storing an index are two separate things and (generally speaking at least) data is stored in two separate places but in Solr anything you upload to Solr is indexed. So you decide which fields you want Solr to be able to search and you assign field types and - hey presto - Solr can find data in those field with impressive speed. You can determine how different fields are searched (case sensitive or not for example) and you can determine range searches and the like: check out the wiki here http://wiki.apache.org/solr/FrontPage#Search_and_Indexing and the query syntax http://wiki.apache.org/solr/SolrQuerySyntax for comprehensive treatment of these.  I agree with: anything you are going to search or sort on should be indexed. However searching and sorting typically works better on fields with distinct values (i.e. a Make field containing ""Acura"" ""BMW"" ""Chevy"" etc.) instead of large free-text fields like Description. You might consider this for better search results and better performance. In your situation I would recommend indexing Price Fuel Headline and any other distinct fields you are searching on. An index on Description will only be useful if you search for Description = ""BMW M3"". However that search logic will omit results such as ""Red BMW M3 with Pirelli tyres"". A search for Description LIKE ""%BMW M3%"" will have to scan the entire table anyway so an index won't be very useful. When do I store then? Whats a typical situation where ""store"" only would be used? I may be confused here. By ""store"" do you mean ""cache""? Actually I mean store. There are stored fields and indexed fields in a db. I edited my original answer hopefully that provides more help.",java php sql mysql database
1943769,A,"Update doesn't work as should be in MySQL  echo $totalprice; echo ""<br/>""; echo $shortfall; echo ""<br/>""; echo $unitprice; echo ""<br/>""; I got 24 80 0.3 Then the following command was executed. // update query However only total_price was changed(became 0.00) while other values like unit_price stay unchanged. But other values like unit_price should be changed. Total_price is unsigned when total_price-pricebalance is done it becomes 0.00. So does it refuse to subtract $totalprice? Any idea? Can you post the actual mysql query that was executed? Why are you using ANDs in your UPDATE query? mysql_query(""update piecework set total_price=total_price-pricebalance+$totalprice quota=quota-shortfall+$shortfall shortfall=$shortfall unit_price=$unitprice pricebalance=$totalprice where piecework_id='$pieceworkid' and publisher=$memberid and (pricebalance-$totalprice)>=0"")or die(mysql_error()); Or with better readability: UPDATE piecework SET total_price = total_price - pricebalance + $totalprice quota = quota - shortfall + $shortfall shortfall = $shortfall unit_price = $unitprice pricebalance = $totalprice ... Many thanks oh my brain!!!!",php sql mysql database
2209338,A,"Another mysql JOIN question I have these tables: classified: classified_id (PK) price headline cat_id // THIS IS ANYTHING FROM 1 TO 30 DEPENDING ON CATEGORY. IT IS SO THAT I CAN LINK WHICH CATEGORY TO USE IN THE CATEGORY TABLE BELOW text etc... category: cat_id (PK) cat_name category_options: option_id (PK) cat_id (FK) // FOREIGN KEY FROM CATEGORY TABLE... option_name option_values: value_id (PK) option_id (FK) classified_id (FK) value How should I use join here could anybody give me a quick example? Here is an example of my setup:  category cat_id cat_name 1 cars category_options option_id cat_id option_name 1 1 color 2 1 gearbox option_values value_id option_id classified_id value 1 1 22 red 2 2 22 manual classified classified_id price headline cat_id 22 5000 'test' 1 //for cars I want to be able to retrieve all options and their values from one category (in this ex cars) by only 'knowing' classified_id (which is 22 in this case). Basically I need help with the join statement... and please don't use aliases in the code to simplify it for me :) Thanks Can there be multiple values per option? Do you want to select them based on `cat_id` `classified_id` or both? No multiple options per category but only one value per option name... I want to select them based on classified_id and cat_id so let's say cat_id = 1 and classified_id = 22 Then there is imo no real reason to have a `value_id` as both `option_id` and `classified_id` would make a primary key for the option values.. Something like SELECT category_option.option_name option_values.value FROM classified category_option option_values WHERE classified.classified_id=?id AND classified.cat_id=category_options.cat_id AND option_values.option_id=category_options.option_id If you passed in 22 for the ?id parameter you'd get 2 rows: Color Red Gearbox Manual  I know this doesn't answer your main question but I'd like to offer a suggestion that I believe will make your life easier... Column names for PK columns -- just call all of them ""id"". Reduces the number of things you have to remember. Eliminates a major source of confusion and potential bugs. Make table names consistent. I mean make them all the same form. You could make them all a singular noun or all a plural noun but just make them all the same. Queries become easier to write and easier to understand. classifieds categories category_options option_values Column names for FK cols -- like this: parent_table_id. For example: classified.category_id. Eliminate any verbiage that doesn't contain new information. For example category.name instead of category.cat_name. re (1): I disagree. Especially when dealing with joins it is a *lot* easier to have unique names for the *id* columns so you can easily see which ids should be interpreted the same. I agree with (4) as those won't make an index but for indexed columns it is better to have unique names that spread over all tables where the same id is meant.  You actually don't even need to explicitely specify the join here. It's just as simple that you want to get values from two tables (options and their values) where the option_ids are identical and select only thos results where your cat & classified id matches. SELECT cat_id classified_id option_id option_name value FROM option_values category_options WHERE category_options.option_id = option_values.option_id AND classified_id = <?> AND cat_id = <?> Hi... This works fine thanks... But what If I would like to insert an ad. I know how to insert into the classifieds table but I don't know how to insert the values of the option_values because there are more than one row that needs to be inserted. The classifieds table is easy because it's just one row but the option_values table has multiple rows per classified_id. Could you make a Insert statement for me as well? Thanks For inserting just execute the same insert statement multiple times (which changed values of course). Or you can use the syntax to add multiple values at once (`INSERT INTO tbl ( col1 col2 col3 ) VALUES ( row1-1 row1-2 row1-3 ) ( row2-1 row2-2 row2-3) ...`) but most times that is not really the easiest way when working with dynamic content (it's easy to use that syntax when you know how many rows will be inserted but for a dynamic number just insert one row per statement).",php sql mysql database
1870997,A,Is it a good practice to write subqueries in MySQL? I am writing the following sub query for some project specific purpose: SELECT count(*) from table1 WHERE userB='$p' AND userA IN (SELECT userB FROM table1 WHERE userA='$row[username]') I was curious if this was the best practice when doing it in PHP or should I resort to the conventional way of first getting the subquery result and then counting the records? In general most databases perform better with left joins (which your query could be converted to) than subqueries. Joins in general but there are caveats  Worth noting that subqueries are only available in MySql 4.1 and higher. While ideally everyone should be on MySql 5 some users are stuck with what their host offers (I have been stung by this a few times).  I agree with Ted left join will be faster. and its easier to read too. also dont use count(*) use count(id)  As long as the subquery doesn't cause a performance hit I think it's better to stick to one query. It will minimize the code you have to write and maintain which is almost always a good thing.  I was curious if this was the best practice when doing it in PHP or should I resort to the conventional way of first getting the subquery result and then counting the records? Leaving the SQL query in PHP or stored procedure holy war aside less trips to the database is the best practice. There's time to the database & back that can never be recouped and separating the queries runs the risk of data changing in between the queries. Can the query itself be optimized? In this example potentially yes: SELECT COUNT(*) FROM TABLE t JOIN TABLE t2 ON t2.userB = t.userA AND t2.userA = '$row[username]' WHERE t.userB = '$p' If you really want to be sure about query performance you'll have to get familiar with generating an explain plan & interpreting the output to tune the query. What's an Explain Plan? The MySQL explain plan shows how the MySQL query optimizer has decided to run a SELECT statement in order to best access the data that's been requested. How Do I Generate an Explain Plan? In MySQL you just have to add the keyword explain to the SELECT query before the SELECT keyword. IE: EXPLAIN SELECT COUNT(*) FROM TABLE t JOIN TABLE t2 ON t2.userB = t.userA AND t2.userA = '$row[username]' WHERE t.userB = '$p' Probably should have mentioned this earlier but you don't want to run this from within PHP because it won't return what you queried for. Use whatever SQL IDE like PHPMyAdmin/etc. I've Gots My Explain Plan But What Does it Mean?! The MySQL EXPLAIN documentation is a good place to read up on each column that is returned & what the column represents. EXPLAIN SELECT * FROM OMG Ponies; +1,php sql mysql database query-optimization
1749520,A,"How can I make my mysql database records visible to search engines? I am creating a classifieds website called 'mySite' and I want whoever searches for honda +mySite in google to find all ads with the description 'honda' or headline 'honda' from my database. How is this done? (a htm page for every ad? which then loads the 'ad data' when user clicks to open the htm page?) I have an example for you to look at: www.blocket.se is a swedish site where you can buy almost anything. I am guessing they dont actually have 500thousand html pages just so that google can find them right? Try searching this in google: blocket +bmw 330ci and you will see results from blocket.se database. Question is: How have they done it? and how should I do it so that I have the same functionality? Thanks If you need more input tell me and I will update! This looks very familiar-> http://stackoverflow.com/questions/1748688/how-to-have-search-engines-index-database-driven-content Anyway read the responses here tell us if helps (or not). You're talking about something like when typing `tree german` it comes up with a link to a dictionary...? could someone please show me an example code? Sample code would look like the code for your search. The code that generates the search results ON YOUR SITE would be a good place to start. You want to iterate all the records of your database and generate links to all items in it. If you don't know how to do this you need to do some studying of your code and/or ask some different SPECIFIC questions on SO. I will do some studying and then post another Q if I get stuck! You don't need an actual html page for every advertisement. Most of the time there is one page that looks at the url and displays content accordingly. mysite.com/honda mysite.com/acura mysite.com/bmw All of these urls would be handled by one page. The page would use the url to find what content to display and serve just that content. Basically you're just creating a website and google does the rest @camran you may be used to doing the same thing by passing a parameter to some 'index.php' such as '?type=honda'. Galen's method isn't so different if you imagine a web server responding to any requests for mysite.com with 'website.php?url=mysite.com/honda'.  I create a sitemap that links to every category and every dynamic page that way spiders can easily navigate through every url on your site. If you do this dynamically then you can easily group by popular keywords and have a special ""grouped by keyword"" sitemap. At any rate its best to have the sitemap generated dynamically so you don't miss a single dynamic page. how about meta keywords and meta descriptions are they also generated the same way? or how would you solve that? meta's are certainly able to be generated dynamically just like any other html element. i just dont know where to start! An example would simplify things for me break things up and do it one at a time first step is to create a sitemap so 100% of your pages are linked to and are able to be spidered! Then you can move on to meta tags  You need to create links to your database pages. Right now the only way to get to your pages is to use the search on your site. Google doesn't fill out form fields. So create some links to your pages. Your pages should to be search engine friendly so  http://site.com?q=honda+civic is bad http://site.com/cars/honda/civic is good. You can rewrite urls using your framework (you are using a web application framework right?). You need to link to these pages preferably from other sites. You won't ever get every page in google because they are too similar and google will probably throw a lot of them out. But you need links to them to start. Ok. I get your explanation... but could you please post an example? You are talking about auto-adding url to a 'sitemap' but what would that url lead to? There are 2 separate issues here. 1) You don't have a sitemap so google doesn't know you have any pages. 2) Even if you did google doesn't like pages with ?q= in it So there are 2 things to fix. Sample code is way out of the scope of this question. we have no idea what framework you are using if you are using one at all. Do you know how to iterate the database and generate pages? yes i know that! I just dont get the idea of how to create links which are renamed to something else and then somehow add a meta-element to it? I will have to study some more I guess. But thanks Google URL rewriting. Check stack overflow as well. You can make URLs like /cars/honda/civic automatically go to ?q=honda+civic. Good luck! You can modify the meta tags by editing the code the displays the page. The data for the meta tag should come from the data you are displaying. OK I think I get it you are saying crawler goes in thorugh the backdoor even though the actual page to display the record 'honda civic' hasent yet been created but google will find it anyway right? just as long as there is a link there to a php page which fetches data from a mysql database? right or wrong? Url rewriting will take one (nonexistant) url and serve the data from another url (that exists). To the user/crawler it will look like the nonexistant url has the data. so even thought here is no /cars/hond/civic on your site the web server will make the end user think there is.  You need to have links to the (dynamically created) pages. Google doesn't know (or care) if the page is dynamically generated. But it's not going to find it if you don't have a link to it. The google bot doesn't just spam your search box looking for keywords (for obvious reasons). For example your homepage should link to a ""latest"" page with a list of all your latest items. You should also create an archive page for every day with links to the items that were posted that day. These index pages can be dynamically generated as long as there is a link to them from your home page. Also remember to cache your daily archives and give a long value for the EXPIRES meta-tag so you don't have to hit your database every time somebody has a look. If you want to know more google has a guide for web-masters: http://www.google.com/support/webmasters/bin/answer.py?hl=en&answer=35769 In particular look at sitemaps: http://www.google.com/support/webmasters/bin/answer.py?hl=en&answer=156184 I'm suggesting that he creates a page for every day which links to all the items posted that day. Those pages aren't going to change so they can be cached. I should have written ""cache your indexes of items posted that day"". Good answer btw what do you mean by ""remember to cache your daily archives""",php sql mysql html database
1655725,A,"How to show multiple results from MySQL Array Here is my current code:  $sql = ""SELECT * FROM user_posts""; $result = mysql_query($sql); $row = mysql_fetch_array($result); while ($row = mysql_fetch_array($result)) { print $row['message']; } My goal is to show all of the data in that SQL database through an array. But currently it only shows the latest one and nothing else. How am I able to do this? Thanks! You should remove this line $row = mysql_fetch_array($result); Apart from that it should display every message Works great! So that means I should not specify the variable before to make it work? What you're doing there is effectively removing the first row from the results. Each call to mysql_fetch_array moves on to the next row  You're only getting the one row because you overwrite the $row variable with the values from your results array. $sql = ""SELECT * FROM user_posts""; $result = mysql_query($sql); while ($info = mysql_fetch_array($result)){ print $info['message']; } Change it to something like that. It worked great! Thanks!",php sql database arrays
2207575,A,"Fine-tuning my MySQL relations database and how to use JOIN on it? I am very new to mysql and databases so I need help here... How should I use JOIN to fetch a record from the tables below when the only given variable is the ad_id? category and category options are filled in manually i.e. the users may not alter them. So they are only reference tables but I am not sure this is how I should do it... I have 6 tables: category: cat_id (PK) cat_name category_options: option_id (PK) cat_id (FK) option_name option_value: value_id (PK) (AI) // I think this should have Auto Increment option_id (FK) classified_id (FK) value classified: (THIS IS THE MAIN TABLE YOU COULD SAY) classified_id (PK) (AI) ad_id cat_id headline description area: // I am thinking about moving these fields over to the posters table right? area_id (PK) classified_id (FK) area description Here is how I insert a classified into the tables: mysql_query(""INSERT INTO classified (ad_id cat_id headline description) VALUES ('$ad_id' $cat_id '$headline' '$description')""); $last_classified_id=mysql_insert_id(); mysql_query(""INSERT INTO poster (classified_id name email tel) VALUES ($last_classified_id '$name' '$email' '$tel')""); mysql_query(""INSERT INTO area (classified_id area community) VALUES ($last_classified_id '$area' '$community')""); I am new to JOIN! Every category has sub options (CARS -> color) and every option has a value. I want to only by having the ad_id select all this information. How can I do so? And should I merge the area and posters table? Also please take a careful look at my db and tell me if there is anything I might have missed... This is really out of my knowledge-base so detailed explanations are appreciated! Thanks This is an example of joining some of your tables to get data from more than one of them: SELECT c.cat_name co.option_name cl.headline FROM category c INNER JOIN category_options co ON co.cat_id = c.cat_id INNER JOIN classified cl ON cl.cat_id = c.cat_id WHERE cl.ad_id = {Your ad_id} You can join to any other tables needed in the same way (poster area). Edit (response to comment): The 'c' 'cl' and 'co' are aliases for the 'category' 'classified' and 'category_option' tables. They don't have anything to do with the join. Here's a source. When I say FROM category c that allows me to use 'c' as the a shortcut for the category table. Using aliases allows you to make the select/joins/where clause how I did instead of like this: SELECT category.cat_name category_options.option_name classified.headline FROM category INNER JOIN category_options ON category_options.cat_id = category.cat_id INNER JOIN classified ON classified.cat_id = category.cat_id WHERE classified.ad_id = {Your ad_id} Basically it's a shortcut that can save you some typing. what is the c for in c.cat_name? or the ""co"" or ""cl""... know any tutorial on this type of JOIN?  It looks like you have two fields that could be the primary key in classified: classified_id and ad_id. Then you have two other tables poster and area that have a one-to-one correlation with classified. If this is the case you could put all the fields in classified. A query to join the tables in your insert statements would like like this: select classified.ad_id classified.classified_id classified.headline classified.description AS classified_description poster.name poster.email poster.tel area.area area.description AS area_description from classified inner join poster on classified.ad_id = poster.classified_id inner join area on classified.classified_id where classified.ad_id = 123 Sounds good now that you mention it... Could you also take a look and let me know how to fetch a complete record from only having the ad_id... BTW I have the ad_id only because it is a varchar (BMW_330_8392829 for example) which I then have in the URL and some other reasons as well. Hmm.. that didn't handle my indentation too well.",php sql mysql database
3488413,A,"How to find all records which are NOT in this array? (MySql) I have an array which contains a bunch of ID:s... I can't figure out how to write a query for finding all records which are NOT inside this array in mysql.  SELECT * FROM main_table WHERE .......... Any ideas? Thanks Like this: $str = implode('' $your_array); The above statements converts an array into comma-delimited string. ""SELECT * FROM main_table WHERE id NOT IN ('$str')"" More Info: http://dev.mysql.com/doc/refman/5.0/en/any-in-some-subqueries.html +1 for PHP integration Little tweak: `$str = count($your_array) != 0 ? implode('' $your_array); : ""null"";`. `IN` doesn't react well to empty braces.  SELECT * FROM main_table WHERE id NOT IN(1 2 3)",php sql mysql html database
2041995,A,"Querying a MySQL database step by step - Best method? I am building a web application that uses PHP 5 MySQL 5 and Javascript with jQuery and AJAX. The application is a quite complicated selection process with several pulldown menus that the user can select from in any order. Each select in a pulldown will give some more selection critera that will limit the choices in the other pulldowns and finally give a limited result set. I am using Javascript on the client side with AJAX connecting to PHP on the server and the MySQL database the idea is that each time the user selects something from a pulldown I send a AJAX request to update all the other pulldowns. When all possible parameters have been set a result set will be presented. (I do want to keep the logic on the server side for various reasons therefor using AJAX.) Now I am not sure what is the best way to handle this ""iterative"" process for each user: I have a table with all the criteria that each selection result in. Since each pulldown selection will result in a set if selection criteria I could store a query string on the server that is being added to for each selection. I then run the currently stored query string to find out what should go into each pulldown send that data to the client then store the query for later when more criteria will be added run send etc etc... Then I have to store that query string on the server for each user perhaps in a text file. Or perhaps as a stored procedure see below.... Another approach would be to just run the query with the new criteria when a selection is done send the data to update the pulldowns then store the selection in a temporary table that I run the next query on etc etc. So the temporary table will then shrink for each selection until I present the result. The app can have several users working at the same time so must probably identify the users by cookie/session ID somehow....(?) And the stored query or temp table must die away after some time when each user leaves....how? Selection methods to add more and more criteria to select from a table allowing for complicated calculations for selection: Using join Using a temporary table that is being more and more limited as records are removed when new criteria are added. Using subselections. Storage methods to keep on track between each step for each user: Store parameters in a server file and insert them into sql or stored procedure for each selection step doing a new query on the whole database for each step but each time with more criteria added. Store a sql query in a file(s) and extend it for each step.... Store a sql query in a table/field..... Store a sql query in a stored procedure ..... Store the actual limited result set of previous selections for each user in a temopary table that will be smaller and smaller as more and more records are removed for each step. Store the parameters on the client side during the session resending them all to the server for each selection Could anyone help with this decision? Rgds PM The best approach that I would recommend would be to run a different query each time a value in the drop down box is changed by a user. If you have 5 drop down boxes when the user changes the value in the first box you run a query from your AJAX page: SELECT * FROM table WHERE val1 = x; Then once the user decides to change another value you can run a more narrowed query e.g. SELECT * FROM table WHERE val1 = x AND val2 = y; Then you can repeat this process until all drop down boxes have been changed. As for using a temporary table or stored procedure. I would say this probably isn't necessary for what you are trying to achieve and is likely just to add unneeded complexity to the project. If you know which fields need to be checked from the front-end then you should just send the selected values from the drop down boxes to the AJAX page so that it can decide what query needs to be run and return the results (XML/JSON would be great for this). Thanks! Think I was making it a bit too complicated for myself....Will just keep track of which pulldowns are used/clicked on the client side and then send the content of those to the server side when one more pulldown is clicked. The server can then do something like SELECT * FROM table WHERE field1=param1 AND Field2=param2 etc up to 15. The yet unresolved parameters could be set to a wildcard so I can use the same query string all the time (I guess?)....",php sql mysql database ajax
1878246,A,"MySQL Query Question.. I give up! *UPDATE seems like the answer was given but the SQL query his erroring out.. can anyone help? See the first answer i posted the problem there. So to put this simply. I have 3 tables. An ""item"" table and a ""tag"" table. Then I also have an ""item_tag"" table which ties the 2 together. I want to make a query that lists all the items that have particular tags assigned to it. So I would like the query to list all items that have tag x and tag y applied to it. This is what I have come up with so far.. except that this will list any that match either tag id 148 or tag id 152. If I make it say ""AND"" it shows no results. SELECT * FROM (`item`) RIGHT OUTER JOIN `item_tag` ON `item`.`id` = `item_tag`.`fk_item_id` WHERE `item_tag`.`fk_tag_id` = ""152"" OR `item_tag`.`fk_tag_id` = ""148"" GROUP BY `item`.`id` Lol. Of course it returns nothing when you have id=152 **AND** id=148 in the query. That's a logical impossibility. So... maybe offer a solution? I'm working on it. Sorry to be so rude. wow. your right. i dont even know why i questioned that part haha.. woops I put system in the tem table and programing language in tags. Using this query you have this result: SELECT * FROM (`item`) INNER JOIN `item_tag` ON `item`.`id` = `item_tag`.`fk_item_id` INNER JOIN `tag` ON `item_tag`.`fk_tag_id` = `tag`.`id` WHERE `tag`.`desc` = 'Java' or `tag`.`desc` = 'C++' Result: 1 'Sistem A' 1 1 1 'Java' 1 'Sistem A' 1 3 3 'C++' 2 'Sistem B' 2 1 1 'Java' 2 'Sistem B' 2 3 3 'C++' In this case system A and System B use Java and C++. To simplify use distinct clause SELECT distinct item.desc FROM (`item`) INNER JOIN `item_tag` ON `item`.`id` = `item_tag`.`fk_item_id` INNER JOIN `tag` ON `item_tag`.`fk_tag_id` = `tag`.`id` WHERE `tag`.`desc` = 'Java' or `tag`.`desc` = 'C++' Result: System A System B  Using JOINs:  SELECT it.fk_item_id FROM ITEM i JOIN ITEM_TAG it1 ON it1.fk_item_id = i.id AND it1.fk_tag_id = 148 JOIN ITEM_TAG it2 ON it2.fk_item_id = i.id AND it2.fk_tag_id = 152 Using GROUP BY/HAVING COUNT:  SELECT it.fk_item_id FROM ITEM_TAG it WHERE it.fk_tag_id IN (148 152) GROUP BY it.fk_item_id HAVING COUNT(*) = 2 Caveat emptor: The GROUP BY/HAVING COUNT version of the query is dependent on your data model having a composite key unique or primary defined for the two columns involved (fk_item_id and fk_tag_id). If this is not in place the database will not stop duplicates being added. If duplicate rows are possible in the data this version can return false positives because an item_id could have 2 associations to the tag_id 148 - which would satisfy the HAVING COUNT(*) = 2. I'd prefer the method using JOIN compare with http://stackoverflow.com/questions/621884/database-development-mistakes-made-by-appdevelopers ""5. Favouring aggregation over joins"" @VolkerK: I lean towards JOINs myself but the GROUP BY has been more popularly voted in the past on SO :/  select * from item where item.id = itemtag.fk_item_id and item_tag.fk_tag_id = ""152"" or item_tag.fk_tag_id = ""148"" group by item.id Doesn't it have to be `AND` now?  select * from item item_tag a item_tag b where item.id = a.fk_item_id and a.fk_tag_id = 148 and item.id = b.fk_item_id and b.fk_tag_id = 152; Nope. He *has* to have both tags assigned to the item. Yeah I fixed it now. And what if he has more than two tags? Sorry. I'm not trying to be a badass I'm not smarter than you right now... ;) I read the question as only needing two tags. If he needs more than two I'd have to think about it a bit.  You can get ids of the items that have all of the tags you want using this query: SELECT fk_item_id FROM item_tag WHERE fk_tag_id IN (51015) GROUP BY fk_item_id HAVING COUNT(*) = 3 And then just SELECT * FROM item WHERE id IN ( SELECT fk_item_id FROM item_tag WHERE fk_tag_id IN (51015) GROUP BY fk_item_id HAVING COUNT(*) = 3 ) You just have to modify the ids and the 3 which is the count of those ids. When your table does not have UNIQUE constraint (it should have) and there can be the same tags in particular item you should modify the query to this: SELECT * FROM item WHERE id IN ( SELECT fk_item_id FROM ( SELECT DISTINCT fk_item_id fk_tag_id FROM item_tag ) someAlias WHERE fk_tag_id IN (51015) GROUP BY fk_item_id HAVING COUNT(*) = 3 ) The problem was with `DISTINCT`. When you remove it it work. However if in your table one item can be tagged more than once with the same tag you can make one more SELECT. I will edit my answer. in all reality a tag should only be applied to an item at most once. it wouldt make sense to apply the tag 'red' to a item more then once. my backend currently doesnt realy allow it to happen.. but if a user clicks to fast or refreshes to quickly the same tag could be added to one item. is there a database way to prevent this? Yes you can add `UNIQUE` constraint. Like this `ALTER TABLE item_tag ADD UNIQUE(fk_item_idfk_tag_id)`. It won't allow to appear the same pair (item tag) twice. Or you could make the `tag_id` and `fk_item_id` columns the primary key - a composite key. what does ""HAVING COUNT(DISTINCT *) mean? also.. I assume the ""IN"" is the same as an having ""OR""'s in the ""WHERE"" statement? just ran into a problem with the query. check screenshot.. doesnt realy explain the error thougH :( http://sensenich.bythepixel.com/error.gif if i take out the ""having count(disticnt) line the query runs. Looks like that's it. `HAVING COUNT(DISTINCT *)` is safer in case a tag could be related more than once. Yes you're right. Corrected.  I am hoping that this will model your tables ( you mention 3 tables but I only have 2 in this ) -- drop table item ; -- drop table item_tag ; create table item ( id int not null auto_increment  primary key ( id ) ); create table item_tag ( fk_item_id int not null  fk_tag_id int not null ); insert into item values ( 1 ); insert into item values ( 2 ); insert into item values ( 3 ); insert into item_tag values ( 1 148 ); insert into item_tag values ( 1 152 ); insert into item_tag values ( 2 148 ); insert into item_tag values ( 3 152 ); select i.id a.fk_tag_id b.fk_tag_id from item i item_tag a item_tag b where i.id = a.fk_item_id and i.id = b.fk_item_id and a.fk_tag_id = 148 and b.fk_tag_id = 152 ; Produces the output +----+-----------+-----------+ | id | fk_tag_id | fk_tag_id | +----+-----------+-----------+ | 1 | 148 | 152 | +----+-----------+-----------+ 1 row in set (0.00 sec) That limits him to two equal tags too.",php sql mysql database
2754770,A,Kohana v3 automatically escape illegal characters? Quick question does Kohana (version 3) automatically escape data that is passed into ORM::factory..... (and everywhere else that has to do with the database)? For example: $thread = ORM::factory('thread' $this->request->param('id')); Would the data passed in the second argument be auto-escaped before it goes in the SQL query or do I have to manually do it? Probably a stupid question and it's better to be safe than sorry but yeah... I usually do manually escape the data but I want to know if Kohana does this for me? Thanks It's auto-escaped. The only scenario where you have to worry about escaping is if you're writing your own SQL and inserting your data directly (by way of concatenation for example) which you shouldn't be doing. The normal ways of querying a database in Kohana are parametrized queries (if you need to provide the SQL yourself) the query builder and ORM all of which handle escaping for you. Can you show me where it says it escapes it? or did you look at the code? I wasn't able to find anything on the site when i looked. @Galen: Sorry for the late response – see the docs for the query builder (which is what ORM uses internally): http://docs.kohanaphp.com/libraries/database/builder#limitations,php sql database security kohana-3
2194685,A,"Should I use AI on these fields in MySQL? I have this db below. I wonder how I should use the ID to identify each record. Everything is connected from the classified_table! Two Questions: Should I use AI on every PK in this case? Could somebody give me the FULL code for selecting an entire classified from only an ad_id (""bmw_330ci_8939483"" for example)? I am new to normalized db and making a good database work so detailed instructions is very much appreciated... Also if you notice any 'wrongs' in this db please let me know. category table: cat_id (PK) cat_name category_options table: option_id (PK) cat_id (FK) option_name option_values table: value_id (PK) option_id (FK) value classifieds table: classified_id (PK) ad_id (VARCHAR) something like ""Bmw330ci_28238239832"" which will appear in URL poster_id (FK) cat_id (FK) area_id (FK) headline description price etc.... posters table: poster_id (PK) name email tel password area table: area_id (PK) area community Thanks What do you mean by AI in this context? Allen Iversion or Artificial Intelligence? I'm guessing auto increment in this context. auto increment....... I was thinking of Haley Joel Osment: http://www.imdb.com/title/tt0212720/ Ahh and PK is primary key now I get it. @OP please R from using A like that not E gets them ;) Using auto-increment for your PKs sounds sensible because it sounds like you already want to use a surrogate key and auto-increment makes the inserts very straightforward. Worth taking a look at this discussion about how to pragmatically choose what primary key to use.  I would auto-increment (AI) on fields that I would do majority of searching by. AI makes it easier to return results but there are performance issues where it can slow down the database. In regards to the query I am not exactly sure what you would want to return but this query returns the classified_id by the given ad_id SELECT classified_id FROM classifieds_table WHERE ad_id = ""bmw_330ci_8939483"" To perform a single insert into your classifieds table and column ad id the value audi a4 would be: INSERT INTO classifieds_table ad_id VALUES ""audi_a4"" Or multiple inserts using the same table multiple fields and multiple values would be: INSERT INTO classifieds_table (ad_id poster_id) VALUES (""audi_a4"" 10) Notice I left out classified_id because if you choose to auto-increment it will automatically assign a value without you explicitly assigning one. Check out MySQL :: Building a Database-Driven Website using PHP and MySQL for more tutorials. okay thanks! Could you also answer this: How should I insert an ad into these tables? Multiple """"insert into statement? What do you mean by ad? If you gave me more detail I could help sorry I mean a classified (my website is a classifieds website). For example user fills in a form to insert a classified. Then I have problem with actually inserting it into the tables. I don't know where to start really... Do you understand? Thanks I tried to demonstrate the basics of inserting above hope this helps. okay I understand but does this mean I have to make a new insert for every table right? and then do one mysql_query() for every insert statement right? Thanks again! You cannot perform inserts onto multiple tables in one query. I would suggest starting off to perform one insert per one query just to get a feel for inserting and then when you feel ready enough you can expand your skills. If you need to do a set of inserts in one go into separate tables a stored procedure would be a convenient way of doing it.",php sql mysql database indexing
1882407,A,"major php issues I am trying to create a simple login system. When I run the login form (with the correct username and password) it doesn't seem to run the php. Any suggestions? <?php $host=""linuxserver""; // Host name $username=""jparry2""; // Mysql username $password=""""; // Mysql password $db_name=""jparry2""; // Database name $tbl_name=""customer""; // Table name // Connect to server and select databse. mysqli_connect(""$host"" ""$username"" ""$password"")or die(""cannot connect""); mysqli_select_db(""$db_name"")or die(""cannot select DB""); // username and password sent from form $myusername=$_POST['myusername']; $mypassword=$_POST['mypassword']; // To protect MySQL injection $myusername = stripslashes($myusername); $mypassword = stripslashes($mypassword); $myusername = mysql_real_escape_string($myusername); $mypassword = mysql_real_escape_string($mypassword); $sql=""SELECT * FROM $tbl_name WHERE username='$myusername' and password='$mypassword'""; $result=mysqli_query($sql); // Mysql_num_row is counting table row $count=mysqli_num_rows($result); // If result matched $myusername and $mypassword table row must be 1 row if($count==1){ // Register $myusername $mypassword and redirect to file “login_success.php” session_register(""myusername""); session_register(""mypassword""); header(""location:login_success.php""); } else { echo ""Wrong Username or Password""; } ?> <html> <body> </body> </html> edit added login form code <html> <head><title>Login</title></head> <body> <form action='checklogin.php' method='POST' style='margin: .5in'> <p><label for='user_name' style='font-weight: bold; padding-bottom: 1em'>USER ID: </label> <input type='text' name='myusername' id='myusername' value='' /></p> <p><label for='password' style= 'font-weight: bold'>Password: </label> <input type='password' name='mypassword' id='mypassword' value='' /></p> <p><input type='submit' value='Login'> </p> <input type='hidden' name='sent' value='yes'/> <a href= ""/home/jparry2/public_html/register.php"">Register</a> </form> </body> </html> We really need all the errors messages you get if you want us to help you... What does the browser's source code say? What do you see there? I think you should specify way more information then this. For example what OS are you using. What is problem? No output shown. Does a simple work? Can you please add code for your login form? a more specific title would be nice I've changed a few things and now the browser brings up a dialogue box asking me to download the php. I'm using linux and opera. You will have to check if you have php installed and configured correctly. Also telling us that you *Changed a few things* to solve your *major php problem* isn´t helping us much. If your browser asks you to download the php file it means the php interpreter is not being invoked. i.e. you don't have it installed or configured correctly.  Are you getting any error message? Seems ok to me. Have you tried echoing something in the if-block for example? That might help you understand what's wrong. Some things you could check or try: Have you got error reporting on? Put `var_dump($_POST); die(); on the top of the page to see if the $_POST variables are submitted correctly. Make sure you are not outputting anything to the browser before the header() function. If you have error_reporting off and you outputted something to the browser using header() will result in a fatal error which could cause a blank white page. A few other notes from your code: You don't need to put variables inside double quotes they work on their own: mysqli_select_db(""$db_name"") becomes mysqli_select_db($db_name) You don't need to stripslashes() if you're doing mysql_real_escape_string. The latter will handle the job on its own.  You don't do any ""session_start()"" so your session can't be used. Maybe you need it to started in your ""login_success.php"" script.  In some browsers the Location header is case-sensitive and thus your header(""location:login_success.php""); call might not be working (a comment on the header documentation page suggests that this occurs in IE7). Try capitalizing the l in Location. IIRC In most of browsers headers follow the standard: Uppercase Names and space after "":"".  I agree with Daniel by revising header(""Location: login_success.php""); Also as a side note since at the time of writing this it wasn't clearly explained what didn't work but you when adding session variables you need to have session_start(). Also try to use $_SESSION['variable'] since session_register() is deprecated as of PHP 5.30 taken from PHP: session_register try something like this if($count==1){ session_start(); // Register $myusername $mypassword and redirect to file “login_success.php” $_SESSION['username'] = $myusername; $_SESSION['mypassword'] = $mypassword; session_write_close(); // makes sure nothing was lost during redirect header('Location: nextpage.php'); }",php sql database login
1940671,A,"Why does mysql_affected_rows return 0 even if one record should be updated mysql_query(""update users set balance=balance+'$pwbalance'-'$totalprice' where memberid='$memberid' and (balance+'$pwbalance'-'$totalprice')>=0"")or die(mysql_error()); $count=mysql_affected_rows(); When I echo $pwbalance it is 40.00; when I echo $totalprice it is 40; So there should be one record to be updated. However when I echo $count I get 0. What's wrong? Roland is right obviously you want to know if the query was successful the fact that the balance stays the same is unimportant for you. You might want to add a new field like purchase_count that you increment in this update or last_purchase_date something to trigger an actual update.  MySQL only actually updates a row if there would be a noticeable difference before and after the updat. Your calculation is basically: SET balance = balance + 40 - 40 So nothing changes and MySQL will not count this as an affectd row. Side note: don't single quote numeric values in the sql. single quotes act as string delimiters. For mysql  in this case they are automatically converted to numbers but it is bad practice at any rate. I agree with Roland Bouman; if `$pwbalance` contains a value that is used as integer in the query then don't use the quotes.",php sql mysql database
2186091,A,mySQL Table Structure for a User-based website I am developing a website that has user profiles accounts account settings inboxes etc. just like Facebook or LinkedIn and I'm wondering how to set up the mySQL tables for it. Should I create a table for every user for each function (profile inbox etc.)? In short yes each function should be in one table if there is aneed to. On edit: And not a table for every user. One record in each corresponding table The concept this deals with is normalization. Consider profile and inbox. A user has only one profile but would have numerous messages in the inbox. It makes sense to have the inbox as another table with each message being identified by a message-id and its owner then its content.  You really need to think about everything you put into a database in terms of relationships (as mentioned by other posters). In the example you gave a user is going to have a one to many relationship with things like mail they will have a one to one relationship with their user profile and they will have a many to one relationship with something like 'locations' where many users live in one city. As you are designing your database always ask yourself which relationship type you need to build and make an attempt to never duplicate data in multiple tables when you don't need to. When you set up something like a users table make sure that every row is equal to a user (as opposed to every user being a table) and that every row has a unique auto-increment id. This user id (that is generated by MySQL) is going to be the reference that you use in other tables to link your data together. So when you setup your mail table you might have 15 rows containing email data but each of those rows will contain a field named something like user_id that will contain the unique id of that user from the users table. Start getting familiar with things like LEFT JOIN--this is how you will run a single query and get for example your user's data AND all of his email at once.  You wouldn't create a table for every user. You would create a record and a unique id for each user and then relate that user to other tables using the ID as a foreign key in other tables.,php sql mysql database table
3002347,A,"Search SQL Question Between Related Two Tables I am writing some kind of search engine for my web application and i have a problem. I have 2 tables first of is projects table: PROJECTS TABLE id int(11) NO PRI NULL auto_increment employer_id int(11) NO MUL NULL project_title varchar(100) NO MUL NULL project_description text NO NULL project_budget int(11) NO NULL project_allowedtime int(11) NO NULL project_deadline datetime NO NULL total_bids int(11) NO NULL average_bid int(11) NO NULL created datetime NO MUL NULL active tinyint(1) NO MUL NULL PROJECTS_SKILLS TABLE project_id int(11) NO MUL NULL skill_id int(11) NO MUL NULL For example: I want ask this query to database: 1-) Skills are 5 and 7. 2-) Order results by created 3-) project title contains ""php"" word. 4-) Returned rows should contain projects.* columuns. 5-) Projects should be distinct(i don't want same projects in return of query). Please write sql query that ensure these conditions. Thank You. One query for all conditions or just each query for each condition? When you say skills are 5 and 7 - does that mean the results can have either or must have both? @vodkhang For all conditions. @OMG Ponies 5 Or 7 But you didn't try anything yet and want us to do something complex for you? It is not really complex but is it your homework or what sql did you try? @vodkhang trying doesn't matter in this query because performance proper query is very important for this web based application. And this is why i can't complate like homework ! SELECT projects.* FROM projects WHERE EXISTS ( SELECT * FROM projects_skills WHERE skill_id = 5 AND project_id = projects.project_id ) AND EXISTS ( SELECT * FROM projects_skills WHERE skill_id = 7 AND project_id = projects.project_id ) AND project_title LIKE '%php%' ORDER BY created or SELECT projects.* FROM projects WHERE EXISTS ( SELECT * FROM projects_skills WHERE skill_id IN (5 7) AND project_id = projects.project_id ) AND project_title LIKE '%php%' ORDER BY created Depending on what your intended result is.  It sounds like you're looking for an EXISTS query which verifies that matching rows exist in a table but without performing a JOIN. SELECT * FROM projects WHERE EXISTS (SELECT 1 FROM projects_skills AS ps WHERE ps.project_id = projects.project_id AND ps.skill_id IN (5 7)) AND project_title LIKE '%php%' ORDER BY created;",php sql mysql database
2974009,A,"MySql syntax error; Deleting from two tables in one query possible? Is it not possible to perform two deletes in one query by separating them with a semicolon? Here is my query: $query=""DELETE FROM $sql_table WHERE EXISTS ( SELECT 1 FROM classified WHERE classified.poster_password = '$pass' AND classified.ad_id = '$id' AND classified.classified_id = $sql_table.classified_id ); DELETE FROM classified WHERE classified.poster_password = '$pass' AND classified.ad_id = '$id'""; This gives this error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'DELETE FROM classified WHERE classified.poster_password = 'xxxxxxx' at line 10 Please help me solve this one it is starting to give me a headache. I need it in one query... Thanks `mysql_query()` can take only 1 query if it is what you're using. ""I need it in one query..."" - please elaborate. Can you use something like mysqli_multi_query() ? Why do you need it in one query? It makes absolutely no sense as it is not stored in a transaction and therefore the first query will be executed even if the second will fail. You didn't mention which PHP function you use to submit this to MySQL. MySQLi's multi_query can handle this.  you can build tmth like this DELETE t1t2 FROM t1t2t3 WHERE t1.id=t2.id AND t2.id=t3.id to clarify a bit more build the SELECT that will show the record you want to DELETE then switch the ""SELECT fields"" with ""DELETE table"" keeping FROM and everything after. Only records in the tables immediately following DELETE with be deleted. i was just giving a path to think) with such requests you can do all much easier & better;  Take a look at transactions Using MySQL Transactions BEGIN COMMIT",php sql mysql html database
2972796,A,"Sql syntax error Here is my query: $query=""Delete b Where Exists ( Select 1 From a Where a.poster_password = '$pass' And a.ad_id = '$id' And a.classified_id = b.classified_id ) Delete a Where a.poster_password = '$pass' And a.ad_id = '$id'""; I get this error: ""You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'Where Exists ( Select 1 From a Where a.poster_p' at line 2"" If you need more input let me know... Whats wrong here? Thanks UDPATE: Just a Q: Do I need to specify also that a = ""this table"" and b = ""another table"" or does MySql get that by this code? As for the new code posted where to use FROM and a terminator semicolon wont work and give this error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'Delete FROM a Where a.poster_password = 'xxxxxxxxxxxxxxxxxxxxx' at line 10 UPDATE2:  $query=""Delete FROM $sql_table Where Exists ( Select 1 From classified Where classified.poster_password = '$pass' And classified.ad_id = '$id' And classified.classified_id = $sql_table.classified_id ); Delete FROM classified Where classified.poster_password = '$pass' And classified.ad_id = '$id'""; And when I echo $query: (fordon is in this case $sql_table variable.) Delete FROM fordon Where Exists ( Select 1 From classified Where classified.poster_password = 'xxxxx' And classified.ad_id = 'motorbat_166250627' And classified.classified_id = fordon.classified_id ); Delete FROM classified Where classified.poster_password = 'xxxxx' And classified.ad_id = 'motorbat_166250627' Thanks again Did you try to remove the second query (`Delete a`) and only execute the first one? I think it was mysql version 5.1 btw... Peter: No I haven't You're not specifying the tables to delete from. Try: $query=""Delete FROM b Where Exists ( Select 1 From a Where a.poster_password = '$pass' And a.ad_id = '$id' And a.classified_id = b.classified_id ); Delete FROM a Where a.poster_password = '$pass' And a.ad_id = '$id'""; I've also added in a semicolon after the end of the first DELETE query. If you want to run both at the same time you'll need a separator to terminate the first query before you run the second version. Re. your question edit about MySQL ""getting"" the tables - if a and b are aliases here then no MySQL doesn't know what a and b are. You'll need to alias the tables or replace a and b with the actual table names. Check my update please this wont work either for some reason Okay changed the aliases but still get the same error in the update of my Q... hmm Can you post your exact query string now? yes check update again pls...  The two deletes need to be separate statements ( and executed separately ). MySQL supposts multi-table deletes: http://dev.mysql.com/doc/refman/5.0/en/delete.html. However the OP's syntax appears incorrect. There should be a `FROM` in there.",php sql mysql database
126161,A,Where do the responsibilities of a Db Abstraction in PHP start and end? In PHP what is the best practice for laying out the responsibilities of a Db Abstraction Layer? Is OOP a good idea in terms of performance? How much should be generic object code and how much should be very specific functions? In most applications I have written there are generally two different types of data access. One is for transactional operations: retrieving specific objects from the datastore modifying them and saving them back. I've found a solid ORM to be the best solution here. Don't try writing your own (as interesting as it might be.) The other common type of data access is for reporting. ORMs aren't the best solution here which is why I usually go with a scheme that uses custom SQL queries. Plain ol' PDO works well here. You can create a special value object just for that report and have the PDO query fetch the values into the object. Reports need to be fast and building them using an ORM layer is usually just too slow and cumbersome.  There are already some great solutions for this. A DAL is not a simple thing especially since so many security concerns are involved. I would suggest checking out PDO and MySQLi. Even if you write a wrapper class for one of them the heavy lifting will be done for you in a robust and secure way.,php sql mysql database
2094247,A,"user activity database structure I am working on a community website. I want to show the user's activity in 2 places in the website. The User ""A"" Profile. The Friends page of the user ""A"" friends. ""What are your friends doing?"" The tables for instance are: members members_gallery members_videos members_friends my problem is in the Sql structure. I've read this question ""User recent activities - PHP MySql"" The ""union"" idea is good but I have an alternative one. I am going to make a new table called members_activity The fields: id | user_id | photo | video | friend | p_id | v_id | f_id | datetime let's say that the user has just uploaded an image. id | user_id | photo | video | friend | p_id | v_id | f_id | datetime 1 | 15 | 1 | 0 | 0 | 1203 | 0 | 0 | NOW() advantages: When i make a SELECT QUERY i can easily know if it's a photo video or a friendship activity. The user can delete the 'photo activity' but keep the photo. Can notify friends of the user easily. disadvantages: Huge number of table rows? Any ideas or suggestions how the big websites deal with it? digg facebook etc. If you have a huge number of rows it is really not going to be a practical disadvantage as long as you index the table properly. At the very least I would index user_id and datetime assuming you will be selecting activity for a particular user and ordering by date. Use MySQL's EXPLAIN (<query>) to ensure your indexes are optimised for the queries you are running often. I have no idea about the INDEX functionality. Thanks i am going to search about that.  I don't see why you need the friends id. For the friends page you would first do a select for all his friends then select from activity table where user_id in (2689 etc) I would make photo and video fields a single field called type where photo and video would be values this way you can later on add more activity types I would make p_id and v_id a single column called item_id .. no need for 2 columns I would add an extra column called info where I would store other information in a json format. This is for the extra data that not all events have. For example you could have an event for adding a link to the profile ... and you could place the link there since other events don't have urls and adding a column just for this event type would be not a good solution the `f_id` is to say ""X has become friends with Y"". thanks for the other notes. well that info i see it in the extra column since there is only one event that needs this  I think you're correct that a single-table approach is best here. One disadvantage however is that it doesn't scale well--what if you want to add link or comment activity types? With this model you'd have to add another column for each of those. An approach that I've seen in Rails-land is to use a polymorphic model which would look like this: id | user_id | activity_type_id | p_id | v_id | f_id | datetime You can see that I've replaced video photo etc. with activity_type_id. Then there would be a second table called activity_types:  id | name ----+------- 1 | photo 2 | video 3 | ... Then when you create a members_activity record you can assign the appropriate activity_type_id and if you want to create new activity types later on it's relatively painless and you could SELECT a particular kind of activity with a simple JOIN e.g.: SELECT * FROM members_activity JOIN activity_types ON members_activity.activity_type_id = activity_types.id WHERE activity_types.name = 'photo'; that was good. but rather than making a new MySQL table called `activity_types` i'd just make an array. it's makes it easier and faster. Voted + Chosen as best answers. thanks. An array? You mean in PHP? Better to use MySQL's ENUM type in that case I think. http://dev.mysql.com/doc/refman/5.0/en/enum.html",php sql mysql database data-structures
2789021,A,"Does this query fetch unnecessary information? Should I change the query? I have this classifieds website and I have about 7 tables in MySql where all data is stored. I have one main table called ""classifieds"". In the classifieds table there is a column called classified_id. This is not the PK or a key whatsoever. It is just a number which is used for me to JOIN table records together. Ex:  classifieds table: fordon table: id => 33 id => 12 classified_id => 10 classified_id => 10 ad_id => 'bmw_m3_92923' This above is linked together by the classified_id column. Now to the Q I use this method to fetch all records WHERE the column ad_id matches any of the values inside an array called in this case $ad_arr: SELECT mt.* fordon.* boende.* elektronik.* business.* hem_inredning.* hobby.* FROM classified mt LEFT JOIN fordon ON fordon.classified_id = mt.classified_id LEFT JOIN boende ON boende.classified_id = mt.classified_id LEFT JOIN elektronik ON elektronik.classified_id = mt.classified_id LEFT JOIN business ON business.classified_id = mt.classified_id LEFT JOIN hem_inredning ON hem_inredning.classified_id = mt.classified_id LEFT JOIN hobby ON hobby.classified_id = mt.classified_id WHERE mt.ad_id IN ('$ad_arr')""; Is this good or would this actually fetch unnecessary information? Check out this Q I posted couple of days ago. In the comments HLGEM is commenting that it is wrong etc etc. What do you think? http://stackoverflow.com/questions/2782275/another-rookie-question-how-to-implement-count-here Thanks you should have accepted HLGEM answer he was right both yesterday and today. Ad Hoc Queries These are queries that you write to run one time or on rare occasions. How large of a result data set must you return that it would take longer to do a SELECT * than type out the column names? How likely are you to forget a column add it and have to run it again? Your time is more expensive than CPU time. If you're running it once let the database do the work. SELECT * is fine for ad hoc queries if it will save you time. There are exceptions such as Blob fields on large data sets but you get the point. Production Queries These are queries that are stored in your application or database. These queries are run often. How many times do you have to run a query to make up for the time it would take to name your columns? It adds up fast. Name your columns in production queries to allow your application to scale better and perform at maximum efficiency. There are other minor advantages but they're not as exciting. Summary Add Hoc Queries : SELECT * generally okay. Production Queries: SELECT * always bad. It's okay to be a little lazy but be smart about it.  Strongly disagree with marr75. First becasue if you do this poor techinie in most of your queries you are adding unnecessary load to virtually every query. Database queries need to be written as well optimized s possible as it is is exceedingly painful to later go bnack and rewrite every query in your datbase becasue you used a known poor techinique. Refactoring in datbases is hard and performance must be considered in design it is not premature optimaization to use techiniqes that are known to improve performance from the start it is good design. Next you have the maintenance issue. If you are depending onthese columns being in a particular order and someone changes the structure of the databe you are out of liuck. Alos if someone adds a column that you don't want to show the user (Which is is common) you are out of luck. THis is a very bad techinique and select * should almost never be used ina production system. If someone adds a column it will be returned inthe query but you need to know what was added and why in order to make the interface do what it needs to do anyway so you have no maintenance savings by using this poor technique. +1 waste a fraction of a second oh well. waste a fraction of a second a million times every day oh *%$@! don't be lazy only return the columns you need!  You are surely returning unnecessary results to answer your question. It is a bad habit to get into. So how should it be written then? SELECT table_name.column_name? What if there are alot of columns it would be a loooong query then right? @Camran you pick: one long SELECT statement or an even longer result set multiplied by the number of rows. You can use abbreviated table names for aliases which would shorten the query a bit. Naturally the query will be longer by naming the columns but as programmers we shan't be lazy. And I don't know about mySQl but in SQL Server I can drag and drop the columns into my query so listing them doesn't take much time at all.  This is a matter of opinion. Are you having performance or scaling issues? If not then being specific about which columns to return is probably a matter of premature optimization. Duplication of integer join columns isn't going to break the bandwidth bank any time soon. Okay... No I don't have performance issues. The website is not uploaded yet... Thanks for the answer -1 Not remotely a matter of opinion or taste. By only selecting the columns you need you maximise the chance that a query can be satisfied from an index alone and reduce the overall query processing workload. I hope the site's a success Camran. Once you you start having problems serving up requests then you should look at typing out every column name. A web framework (Cake Django Rails etc) could make this easier too. Django for example let's you pick just the columns you need with ""defer"" and ""only"" methods then generates the sql for you. I think we'll have to agree to disagree on that Martin optimized performance becomes a problem to look at once your app hits a bottleneck and is actively being used. Also the first optimization of performance I would do if I found this query to be a bottleneck would be to cache the results or the resulting pages outperforming any index or column optimization pretty easily. So fire fighting when performance suddenly becomes a problem is better than a fairly easy way of doing it right in the first place? Depending on the requirements and constraints. My take on this particular problem was that a solo developer is about to deploy a web app in a domain that already has a lot of alternatives it's important to understand that he could have written this query to perform better but there's a big chance it won't get used much anyway and there's an even bigger chance that this query will not be any kind of performance bottleneck that can't be better solved by caching. If he has a choice between launching today and launching tomorrow based on optimizing these queries I'm an advocate for today. when you get good at developing and go the the next level with your SQL you will discover the covering index where you include data (additional columns) in the index that is not part of the index. The database can then use these columns and return the results without going back to the table from the index find. If you always select * you can not use a covering index because you are asking for all the columns. When you are tuning your slow queries (which are fast now because the app is not live and has no data) you will not be able to use this technique. I don't think it's fair to make any assumptions about whether I'm ""good"" at developing or not based on my answer. My answer says yes this query can be optimized but I feel he should profile first with a real load before optimizing anything. Profiling with a real load will be made more difficult as he is not returning the columns he needs. The Database Tuning Advisor and missing index DMVs won't have anything to work with. @marr75 - I understand your point but this is generally considered SQL 101 not advanced optimization. this question about `select tableA.* tableB.* ...` is right up there with questions about `why can't I just make all my columns varchar(5000)` some people will call it an opinion on how to do it other will call it ridiculous. Try to get either of those past a code review. I'd laugh at anyone trying to put that code in production.",php sql mysql html database
2202845,A,SQL help query not returning all data I am building a website that remembers the users choices from a navigation menu and then shows content the next time they visit the webiste there last view content is available to this I am running this query SELECT * FROM (`categoryTable`) LEFT JOIN `userMenuTable` ON `userMenuTable`.`categoryId` = `categoryTable`.`categoryId` This returns in PHPmyAdmin all the relative results however when running in it through my website it returns the relative but it does not return the categoryId if the categoryyId does not exists in the UserMenutable. What I need is a way to what the user has saved and pull those results out and then find out what he hasnt saved and then do something else Is this possible? just a guess but if you are accessing the yourResultSetHere['categoryId'] you are getting the null from the it from userMenuTable and not the value from categoryTable. You should try changing SELECT * into: SELECT col1 col2 categoryTable.categoryId AS c_categoryId userMenuTable.categoryId AS u_categoryId  col3 ... and see if you get the value in c_categoryId,php sql mysql database
2209502,A,MySQL headache should I or should I not? I have a classifieds website. I am using SOLR for indexing and storing data. Then I also have a MySQL db with some more information about the classified which I dont store or index. Now I have a pretty normalized db with 4 tables. Whenever ads are searched on the website SOLR does the searching and returns an array of ID_numbers which will then be used to query mysql. So solr returns id:s which are then used to get all ads from the mysql db with THOSE id:s. Now all the JOIN and relations between my tables gives me a headache. What except for maintanance-ease do I get for having a normalized db? I could you know store all info into one table with some 50 columns. So instead of this for finding one ad and displaying it: SELECT category_option.option_name option_values.value FROM classified category_option option_values WHERE classified.classified_id=?id AND classified.cat_id=category_options.cat_id AND option_values.option_id=category_options.option_id I could use this: SELECT * FROM table_name WHERE classified_id = $classified_id Isn't the last one actually faster? Or does a normalized db permform faster? Thanks The query using a JOIN is trivial as far as MySQL joins are concerned. I see no need to denormalize this. I would however suggest rewriting it to not be such a PITA to read: SELECT category_option.option_name option_values.value FROM classified JOIN category_option USING (cat_id) JOIN option_values USING (option_id) WHERE classified.classified_id = ?  Whenever you do denormalization you usually gain reading speed and lose write speed because you have to write the same value many times. Additionally extra care should be taken to maintain data integrity. How many times the query will be executed? Is this a high traffic application? Can you add a cache? What I meant suggesting to add a cache is to consider other alternatives of performance improvement. I have to add a cache yes but what does that have to do with normalization? Because the results are cached not the database am I right? It is pretty heavy traffic also and what do you mean how many times will the query be executed? Only once every time users click 'search' i guess... sorry But you have to explain a little more detailed  I would advise against denormalizing in your situation. You'll get better with joins as you use them more and they start to become clearer in your head and maintenance ease is a good benefit for the future. Here's a pretty good link about normalization (and denormalization). Here's a question about denormalization. One answer suggests creating a view using joins to get the data you need and using that like your SELECT * FROM table_name WHERE classified_id = $classified_id query. A normalized DB will likely be slower but it's unlikely you'll want to denormalize for that reason. I hope this provides some help.,php sql mysql database normalization
2908884,A,Thoughts/Input about Database Design for a CMS I'm just about to expand the functionality of our own CMS but was thinking of restructuring the database to make it simpler to add/edit data types and values. Currently the CMS is quite flat - the CMS requires a field in the database for every type of stored value (manually created). The first option that comes to mind is simply a table which keeps the data types (ie: Address 1 Suburb Email Address etc) and another table which holds values for each of these data types. Just like how Wordpress keeps values in the 'options' table PHP serialize would be used to store an array of values. The second option is how Drupal works the CMS creates tables for every data type. Unlike Wordpress this can be a bit of an overkill but really useful for SQL queries when ordering and grouping by a particular value. What's everyone's thoughts? I'm talking about CMS through the whole question. The main question I'm asking is what's the best method of how the database should be structured? Wordpress Vs Drupal Method of structuring the database. Are you talking about a CMS (content management system) or a CRM (customer relationship management) product? It sounds like you are confusing the two. I think My Lively wants to know what you mean by CMS. See here http://en.wikipedia.org/wiki/CMS for the possibilities. In my opinion you should avoid serialization where possible. Your relational database should be relational and thus be structured as such. This would include the 'Drupal Method' e.g. one table per data type. This also keeps your database healthy in a sense that it can be indexed en easily queried upon. Very good point I have already adopted the process of creating tables on the fly for the different data types. This has produced a much better system.  Unless you plan to have lots of different data types that will be added in the future which are unknown now this is not really going to help you and would be overkill. If you have very wide tables and lots of holes in your data (i.e. lots of columns that seem to be NULL at random) then that is a pattern that is screaming to maybe have a seperate table for data that may only belong to certain entries. Keep it simple and logical. Don't abstract for the sake of abstraction. Indeed storing integers is cheaper with regards to storage space but unless that is a problem then don't do it in this case. Hi Lloyd after careful consideration with all of our clients the best approach was to create a new table for each data type (blog photo testimonial). We have a master table which keeps record of the structure and we create/amend tables on the fly based on this structure. We tested each scenario with 10 million rows in the database and speed is our biggest consideration. Selecting inserting updating and deleting table rows was much faster and efficient compared to a segmented database with a table full of keys and another table full of values. A good solution: clean separation simple and logical. Well done Dallas good work.,php sql mysql database content-management-system
3286644,A,"Select from where field not equal to Mysql Php I'm just wondering what kind of mysql command i could execute in php that would select all items from a certain table where columna is not equal to x and columnb is not equal to x Something like: select something from table where columna does not equal x and columnb does not equal x Any ideas? The key is the sql query which you will set up as a string: $sqlquery = ""SELECT field1 field2 FROM table WHERE NOT columnA = 'x' AND NOT columbB = 'y'""; Note that there are a lot of ways to specify NOT. Another one that works just as well is: $sqlquery = ""SELECT field1 field2 FROM table WHERE columnA != 'x' AND columbB != 'y'""; Here is a full example of how to use it: $link = mysql_connect($dbHost$dbUser$dbPass) or die(""Unable to connect to database""); mysql_select_db(""$dbName"") or die(""Unable to select database $dbName""); $sqlquery = ""SELECT field1 field2 FROM table WHERE NOT columnA = 'x' AND NOT columbB = 'y'""; $result=mysql_query($sqlquery); while ($row = mysql_fetch_assoc($result) { //do stuff } You can do whatever you would like within the above while loop. Access each field of the table as an element of the $row array which means that $row['field1'] will give you the value for field1 on the current row and $row['field2'] will give you the value for field2. Note that if the column(s) could have NULL values those will not be found using either of the above syntaxes. You will need to add clauses to include NULL values: $sqlquery = ""SELECT field1 field2 FROM table WHERE (NOT columnA = 'x' OR columnA IS NULL) AND (NOT columbB = 'y' OR columnB IS NULL)""; Thanks great detail :) Glad to help. I started off with the block of code as an example...then I edited like 10 times as I kept saving only to think ""wait I could add one more thing to make it that much clearer"" neither of these seem to work if column's default value is `NULL` @SpYk3HH Good point. I'll address that.",php mysql sql database select
1071060,A,"Single Autonumber Instead of Multiple Key Is there a reason to use a single incrementing field for a primary key instead of multiple fields that actually represent the unique record? I'm working on an existing php application and the tables all seem to have a single 'id' key instead of using the 2 or more fields that are actually unique to the record (like user auction bid). I'm not a database expert but that just seems lazy (or inexperienced) to me. Is there any benefit (performance or otherwise)? Updated: I'm not referring to psudo-unique data (ssn e-mail address etc) where you may want to ensure the data is really unique. I'm talking about tables with obvious foreign key references but instead of using those references along with the unique field(s) in the table itself every table just has an incrementing ID. Not trying to start up a subjective debate it just didn't make sense to me. Here are a few points to use autonumber Autonumbers are a single unique key that make foreign key relationships much easier to maintain and use Autonumbers are numbers so it is pretty easy to use them and not mess them up. What I mean is if your primary key is a string and your developer forgets to put that in single quotes it will destroy your performance It is normal standard practice to use an autonumber You can still make other fields ""unique"" resetting a sequence is much easier with an autonumber if you need to jump ahead in the sequence it is much easier with a number than a combo of attributes or strings Just a few things...  Almost every ""natural"" key combination I've ever tried to use in a database ended up being non-unique over time. Data models need to evolve quickly as abstractions become leaky. That includes names phone numbers SSNs legal document references page numbers email addresses usernames project numbers and a few other things I've tried to use over my career. Aside from that the other answers regarding performance for writing new records comparing foreign keys etc. are enough reason alone. You can preserve your current business logic of uniqueness without baking it into the primary key--just set up a unique index on your natural-key columns. You'll pay a price on inserts and updates as with any index but if it happens to also be a useful index (helps to cover some queries) all the better. So if the 'natural' key is replaced by a surrogate key say a username becomes a userid (unique generated number) why not use the userid (along with other immutable ids) as the keys for related tables? A PK by definition is unique. For argumentative purposes you have just created a PK every time that a Unique Constraint is built. Why not just break off the table and replace it with a view?  Yes this will spur debate. In general primary key data should be immutable which is frequently not the case when using a natural key derived from the table data. As noted earlier things like SSNs can often be changed thus throwing off immutability. Monotonically increasing surrogate keys like ""autonumber"" or ""identity"" columns are a simple substitute for a natural key. However they can be prone to index inefficiencies since they may not balance well across B-tree style index algorithms. This can be remedied by using a randomly generated surrogate key like a uniqueidentifier i.e. GUID in MS SQL Server but I've read that this also has performance ramifications. Generally I use a surrogate key produced from a sequential feature like autonumber or identity for ease of table joins.  Well the id's give a sequential ordering to your database from 1-infinity. User names and such are transient and aren't always ordered. So presumably it would make searching faster. Plus it seems like you're suggesting having multiple keys signify an item. That is generally going to slow things down because now two things have to be checked to make sure something is the right item instead of one.  It all comes down to how ""normal"" your data structure is. A highly normalized databaseby definition can only have single field for the primary key. In this case there is little to any reason to use a serial or auto generated number as a PK. The data structure should be designed with with unique entries as PK(tracking people is a problem there are only so many names). Of course with normalization comes the performance penalty so the database is de-normalized to make is usable(very common for web apps). With a heavily de-normalized DB many times it is impossible to get a PK without using every field in the table. Remember that the reason that the structure is de-normalized is to increase the performance. All of the databases that I am familiar with builds an index for every PK. The larger the index the larger the overhead to maintain the index. Building gigantic indexes will kill the insert and update time performance making the de-normalization useless(unless its a read-only DB). It also takes longer to search gigantic indices and uses more memory than smaller ones as well. In summery It is often advantageous for performance reasons to to auto-generate the PK for any table that requires multiple fields to get a unique PK.  Using synthetic primary keys has several advantages: You can change values in key fields without having to take an index update hit The indexes are smaller It makes foreign key relationships simpler Since you're not dealing with strings there are never encoding issues Databases often have specific optimizations around building indexes with monotonically incrementing keys. That being said there is nothing wrong with a little denormalization now and then. If the use-case is clear and the tables are relatively small do what's convenient. -1 ""there is nothing wrong with a little denormalization now and then""  Oh dear it looks like we're opening up the great natural vs. surrogate keys debate again. The simplest reason is to prevent data redundancy. Natural keys tend to require multiple keys that may change over the lifetime of the database. For example if a person gets married and changes their last name then that last name has to be updated everywhere it's referenced. This isn't a problem if you have your foreign keys set to on update cascade as the DB will do it for you. As your table nest further and further you may find your keys need more and more columns. I've actually seen a table that had a seven-column primary key. For a table that only had four other columns. On redundancy now the code is responsibly to check for duplicate data instead of the database stopping duplicate data. For example in the code that prompted this question before an auction offer can be submitted the code has to check the database for any offers of the same value from the same user for the same auction. Sure it should do that anyway but if the code fails the database won't stop it. In that case there's duplicate data. R. Bemrose wrote : This isn't a problem if you have your foreign keys set to on update cascade as the DB will do it for you. But all references to this record outsite your database are lost. If you have interfaces with other systems your in trouble. @Tim Lytle: There's nothing stopping you from having unique constraints.  You generally want a clustered index on your primary key. The issue with having a compound clustered primary key is that as you insert new rows SQL has to stick the new record in between other records which means shuffling. In addition the larger your primary key the more space is required to store it. Here is an article on using a GUID as a primary key but the same holds true for a compound key. Also see this great answer.  in most cases it's really not clear-cut when those fields really uniquely identify the entity represented by the record. again and again I've seen cases where old database concepts entrenched in the business mentality hamper any further evolution.  It depends on the definition of ""Unique"". Yes names email addresses and SSN values are supposed to be ""unique"". However stranger things have happened. Having a separate ID value in a lot of cases can make life a lot easier... Update Based on the edit to the question I don't really see much of a need. It sounds like the situation you have is something like. a ""join table"" something where you are simply creating an association of a UniqueId from one table to the UniqueId of another table. A simple example of what I'm thinking you are talking about would be a User -> Role association. You must associate a User to a Role. A UserId and a RoleId. You have in your database a structure similar to MappingId (Your Auto Number) (This is the PK) UserId (From the user table) RoleId (From the Role table) This structure does NOT make sense to me I would have just the User and RoleId make up the Primary Key since there is no need to duplicate entries here. If you have something different that might change things... Agreed. I typically opt for a sythetic primary key but then add an index with a uniqueness constraint to identify the natural key. That way I can change / delete the index if my initial assumptions during design no longer hold. SSNs will be reused over time. After all the number of people alive in the US is estimated to be 306808431 according to the US Census population clock... nearly 1/3 of the available space for SSNs. Updated the question to make it clearer not talking about questionably unique data. I mean a table with a userid auctionid etc but sill have a single auto incrementing primary key. Posted updated comments I wanted it to be more abstract guess that might have been less than helpful. Example: A 'bid' table has the auctionid the userid and the bid amount (along with other data about the bid). Why then do they use a bidid as the primary key? It's not just joining tables but it seems to me that you would want to use the other keys to *avoid* duplicate data. So a user can't bid the same amount more than once (sure the code should check that but shouldn't the database ensure that as well?",php sql database database-design
695289,A,"Cannot simply use PostgreSQL table name (""relation does not exist"") I'm trying to run the following PHP script to do a simple database query: $db_host = ""localhost""; $db_name = ""showfinder""; $username = ""user""; $password = ""password""; $dbconn = pg_connect(""host=$db_host dbname=$db_name user=$username password=$password"") or die('Could not connect: ' . pg_last_error()); $query = 'SELECT * FROM sf_bands LIMIT 10'; $result = pg_query($query) or die('Query failed: ' . pg_last_error()); This produces the following error: Query failed: ERROR: relation ""sf_bands"" does not exist In all the examples I can find where someone gets an error stating the relation does not exist it's because they use uppercase letters in their table name. My table name does not have uppercase letters. Is there a way to query my table without including the database name i.e. showfinder.sf_bands? Are you sure that the sf_bands table exists? Does showfinder.sf_bands work? showfinder.sf_bands works perfectly Perhaps I should note that my database was migrated from MySQL Can you try pg_query($dbconn $query)? The implicit connection can cause hard-to-debug issues may as well eliminate it as a possible problem. Can you also try pg_dbname($dbconn) to make sure it's indeed connected to showfinder? Postgres process query different from other RDMS. Put schema name in double quote before your table name like this ""SCHEMA_NAME"".""SF_Bands"" What does your answer adds to the previously accepted answer upvoted 22 times and with lot of details?  From what I've read this error means that you're not referencing the table name correctly. One common reason is that the table is defined with a mixed-case spelling and you're trying to query it with all lower-case. In other words the following fails: CREATE TABLE ""SF_Bands"" ( ... ); SELECT * FROM sf_bands; -- ERROR! Use double-quotes to delimit identifiers so you can use the specific mixed-case spelling as the table is defined. SELECT * FROM ""SF_Bands""; Re your comment you can add a schema to the ""search_path"" so that when you reference a table name without qualifying its schema the query will match that table name by checked each schema in order. Just like PATH in the shell or include_path in PHP etc. You can check your current schema search path: SHOW search_path ""$user""public You can change your schema search path: SET search_path TO showfinderpublic; See also http://www.postgresql.org/docs/8.3/static/ddl-schemas.html Oops forgive me. I meant to say that my table name has no uppercase letters not my database name. That did it many thanks! Right on the money! +1 @romkyns: Yes this is actually pretty common across RDBMS brands that undelimited identifiers are advertised as ""case-insensitive."" But they're not truly case insensitive because the way they've implemented that is to force lowercase. This matches the name of the table only if you had allowed the table name to be lowercased when you defined the table. If you use double-quote delimiters when you CREATE TABLE you must use delimiters when you reference it in queries. It appears that even if you type `SELECT * FROM SF_Bands` this will still fail because Postgres decides to lowercase that table name for you. Weird...  If everything posted above fails try to put dbname parameter in your connection string. It works for me while everything else failed.  pg_query($dbconn $query); make sure the database connection is successful... this is a nonsense if the connection fail the code he posted would stop at `or die('Could not connect: ' . pg_last_error());`  I had problems with this and this is the story (sad but true) : If your table name is all lower case like : accounts you can use: select * from AcCounTs and it will work fine If your table name is all lower case like : accounts The following will fail: select * from ""AcCounTs"" If your table name is mixed case like : Accounts The following will fail: select * from accounts If your table name is mixed case like : Accounts The following will work OK: select * from ""Accounts"" I dont like remembering useless stuff like this but you have to ;) Same for column names in where-clauses 5. Mixed case like `Accounts` will fail with `select * from Accounts;` I find the weirdest part: same-case is NOT identical.",php sql database postgresql
2576405,A,"Storing info in a PostgreSQl database issue Ok I am making a registry for my website. First page asks for some personal info  if($error==false) { $query = pg_query(""INSERT INTO chatterlogins(firstName lastName gender password ageMonth ageDay ageYear email createDate) VALUES('$firstNameSignup' '$lastNameSignup' '$genderSignup' md5('$passwordSignup') $monthSignup $daySignup $yearSignup '$emailSignup' now());""); $query = pg_query(""INSERT INTO chatterprofileinfo(email lastLogin) VALUES('$emailSignup' now());""); $userNameSet = $emailSignup; $_SESSION['$userNameSet'] = $userNameSet; header('Location: signup_step2.php'.$rdruri); } The first query works. The second query works but doesn't save the email... the session doesn't work but the header works and sends me to the next page I get no errors even if I comment out header next page  @session_start(); $conn = pg_connect(""host=localhost dbname=brittains_db user=brittains password=XXXX"" ); $signinCheck = false; $checkForm = """"; if(isset($_SESSION['$userName'])) { $userName = $_SESSION['$userName']; $signinCheck = true; $query = pg_query(""UPDATE chatterprofileinfo SET lastLogin='now()' WHERE email='$userName'""); } if(isset($_SESSION['$userNameSet'])) { $userName = $_SESSION['$userNameSet']; $signinCheck = true; $query = pg_query(""UPDATE chatterprofileinfo SET lastLogin='now()' WHERE email='$userName'""); } This is the top starting the session depending on if your logged in or not. then if I enter in the info here and put it through this if($error==false) { $query = pg_query(""UPDATE chatterprofileinfo SET aboutSelf='$aboutSelf' hobbies='$hobbies' music='$music' tv='$tv' sports='$sports' lastLogin='now()' WHERE email='$userName'"") or exit(pg_last_error()); //header('Location: signup_step3.php'.$rdruri); } nothing shows up for on my database from this. I have no idea where I went wrong the website is http://opentech.durhamcollege.ca/~intn2201/brittains/chatter/ For starters don't put things that aren't strings in single-quotes like that. 'now()' means a literal string ""now()"" Also if you're doing updates to your database you're better of using prepared statements to help prevent against sql injection. In your case see http://www.php.net/manual/en/function.pg-prepare.php kk thanks I should have known that duh moment >< Or go for pg_query_params() the easiest solution for safe input in a query. http://nl2.php.net/pg_query_params pg_prepare is good when you have repeating queries.",php sql database postgresql
315331,A,"Best approach to limit database traffic on large query? I have a database that i'm dealing with which is updated every few hours remotely (not on any specific time span) and i have no control over the administration of it. I have web clients connecting to it to view information contained within it. These clients (coded using PHP and Javascript) might be checking the database very often (impatient users) even though there may not be any change to the database itself and the check will involve quite a lengthy query involving lots of lookups and cross referencing etc. So in order to cut down on database queries and to keep things snappy what would be the best way to limit the number of times the clients will actually run the whole query on the database? To make things crystal clear i have no way of altering the database i can only query it. But i have full control over the source of the web client. I would take a look at Zend_Cache. Each query will only run once for the lifetime of the cache (which can be easily changed). Sessions aren't a viable solution since the same query will run at least once per user. Sessions can also be easily renewed. You'll want to check if the result set exists in the cache. If not cache the result set with a unique identifier: $query = ""SELECT * FROM really_big_table""; $cache_query = md5($query); if(!$result = $cache->load($cache_query)) { $result = $db->fetchAll($query); $cache->save($result $cache_query); } By using a cache you are setting your own time frame for when data is updated for all users.  You should use some sort of cache. For more serious sites take a look at memcached. If you are in a smaller scale cache the results to file by serializing it. You could also use something like APC to cache things in memory if it's a small enough result set.  Do you have control over the web app? If users are logged in and have sessions associated with them you could cache the time since a user last queried the database and refuse to hand back new data if a request is beneath some threshold interval since the last query. PHP Sessions I should add: Caching solutions such as truppo suggests can also reduce database round-trips and should be investigated and considered.",php sql database
2219748,A,Why isn't this easy join working? (mysql) I have two tables classified and fordon. classified table: classified_id (PK) etc... fordon table: id (PK) classified_id (FK) I try to use this code: SELECT * FROM classified fordon WHERE classified.ad_id IN ('$solr_id_arr_imploded') AND classified.classified_id=fordon.classified_id BTW the array is a set of ad_id:s returned from solr never mind that that is not the problem here... Then I use mysql_fetch_array in a while-loop to display all the results: while($row = mysql_fetch_array($qry_result)){ but when I try to echo something which is inside the table fordon then the index can't be found error appears. But whatever is inside the table classified works to echo! Any ideas? Thanks UPDATE  while($row = mysql_fetch_array($qry_result)){ echo $row['type']; // This doesn't work because the 'type' column is inside the 'fordon' table echo $row['headline']; // This does work because it's inside 'classified' table. no I don't think it's the implode! What does your code look like when you `echo` the results? I meant the actual while loop. :) could I have the FK setup wrongly here? The FK is in the fordon table maybe it should be other way around? (does it matter) Try to change the query from `SELECT * FROM ...` to `SELECT fordon.type classified.headline FROM ...` just to see if your query is set up correctly. Let me know if that returns the results but I cannot tell if it has anything to do with where the foreign key resides. it give a 'unknown column 'year' in field list'... but the headline works! hmmmm I have to get to work now but I will have to try some more later... If you think of something please let me know... Thanks :) Might be the values that were *imploded* (which is what I am guessing those are) you don't think they are the problem? Does this help? SELECT * FROM classified c INNER JOIN fordon f ON c.classified_id=f.classified_id WHERE classified.ad_id IN ('$solr_id_arr_imploded'); Also its generally not a good idea to use: SELECT *. Its better to either select only the elements you want or use the * in context of the table you are getting all from e.g. SELECT classified.* FROM classified c INNER JOIN fordon f ON c.classified_id=f..classified_id WHERE classified.ad_id IN ('$solr_id_arr_imploded'); When you do joins with a blanket * you get every field in all tables. I believe that is what he wants to achieve. understood but what if you have classified.field_name and fordon.field_name. You now have an error because you are using SELECT *. Its generally good practice to just query specifically what you want esp when you start joining tables. But do how you like I am just suggesting ;),php sql mysql database
2782275,A,"Another rookie question; How to implement Count() here? I have this query: SELECT mt.* fordon.* boende.* elektronik.* business.* hem_inredning.* hobby.* FROM classified mt LEFT JOIN fordon ON fordon.classified_id = mt.classified_id LEFT JOIN boende ON boende.classified_id = mt.classified_id LEFT JOIN elektronik ON elektronik.classified_id = mt.classified_id LEFT JOIN business ON business.classified_id = mt.classified_id LEFT JOIN hem_inredning ON hem_inredning.classified_id = mt.classified_id LEFT JOIN hobby ON hobby.classified_id = mt.classified_id ORDER BY modify_date DESC I need to implement a count here to just count all rows in combination with the JOINS you see. How should I do this? SELECT COUNT(mt.* fordon.* etc) FROM ? // This method wont work Thanks Shame on you for using select * in any query with a join. When you do this you are returning data you don't need (the joins fields are duplicated) and causing the server to do unnecessary work and sending more information over your network than is needed. If you do this on most queries you are causing performance problems for literally no reason other than laziness. Very poor practice. HLGEM for simplification it's common to use `SELECT *` in examples here. While the user should not use them in production code and it's great to remind the OP ""shame on you"" is jumping the gun. SELECT COUNT(*) FROM (SELECT mt.* fordon.* boende.* elektronik.* business.* hem_inredning.* hobby.* FROM classified mt LEFT JOIN fordon ON fordon.classified_id = mt.classified_id LEFT JOIN boende ON boende.classified_id = mt.classified_id LEFT JOIN elektronik ON elektronik.classified_id = mt.classified_id LEFT JOIN business ON business.classified_id = mt.classified_id LEFT JOIN hem_inredning ON hem_inredning.classified_id = mt.classified_id LEFT JOIN hobby ON hobby.classified_id = mt.classified_id) As A That is a bad idea! It would result in a huge temporary table from which you do not need any data.  I removed the ORDER BY as it is not required for the COUNT: SELECT count(*) FROM classified mt LEFT JOIN fordon ON fordon.classified_id = mt.classified_id LEFT JOIN boende ON boende.classified_id = mt.classified_id LEFT JOIN elektronik ON elektronik.classified_id = mt.classified_id LEFT JOIN business ON business.classified_id = mt.classified_id LEFT JOIN hem_inredning ON hem_inredning.classified_id = mt.classified_id LEFT JOIN hobby ON hobby.classified_id = mt.classified_id And lastly how do I retrieve the nr of rows? $res=mysql_query($query); Then what do I do? @Camran: it will return a table with a single row and a single column. please guys the title says ""rookie"". Give me the code... you can add an alias to the count results and access just like any other field in a query: SELECT Count(*) As NumberOfRecs FROM ....  How about SELECT COUNT(*) FROM ... ? I'm not sure what you're trying to count. I am trying to count nr of rows found... Need it for paging... Why are the answers so different? @Camran are you trying to count everything in those tables? Or just a certain table? If trying to count all SELECT COUNT(*) works No not all only rows which are JOINED check my Query Well `COUNT(*)` counts the combination of results between the joined tables. If you need it for paging you probably just need `SELECT COUNT(*) FROM mt` to get the count separately from the main JOIN query. I agree @Camran does not need to make JOINs for counting since all of them are left joins (assuming that there is not more than a single corresponding row in each joined table)  How about simply: SELECT COUNT(*) FROM ...",php sql mysql database
2381978,A,"Why wont this sort in Solr work? I need to sort on a date-field type which name is ""mod_date"". It works like this in the browser adress-bar:  http://localhost:8983/solr/select/?&q=bmw&sort=mod_date+desc But I am using a phpSolr client which sends an URL to Solr and the url sent is this:  fq=+category%3A%22Bilar%22+%2B+car_action%3AS%C3%A4ljes&version=1.2&wt=json&json.nl=map&q=%2A%3A%2A&start=0&rows=5&sort=mod_date+desc // This wont work and is echoed after this in php: $queryString = http_build_query($params null $this->_queryStringDelimiter); $queryString = preg_replace('/%5B(?:[0-9]|[1-9][0-9]+)%5D=/' '=' $queryString); This wont work I dont know why! Everything else works fine all right fields are returned. But the sort doesn't work. Any ideas? Thanks BTW: The field ""mod_date"" contains something like:  2010-03-04T19:37:22.5Z EDIT: First I use PHP to send this to a SolrPhpClient which is another php-file called service.php:  require_once('../SolrPhpClient/Apache/Solr/Service.php'); $solr = new Apache_Solr_Service('localhost' 8983 '/solr/'); $results = $solr->search($querystring $p $limit $solr_params); $solr_params is an array which contains the solr-parameters (q fq etc). Now in service.php:  $params['version'] = self::SOLR_VERSION; // common parameters in this interface $params['wt'] = self::SOLR_WRITER; $params['json.nl'] = $this->_namedListTreatment; $params['q'] = $query; $params['sort'] = 'mod_date desc'; // HERE IS THE SORT I HAVE PROBLEM WITH $params['start'] = $offset; $params['rows'] = $limit; $queryString = http_build_query($params null $this->_queryStringDelimiter); $queryString = preg_replace('/%5B(?:[0-9]|[1-9][0-9]+)%5D=/' '=' $queryString); if ($method == self::METHOD_GET) { return $this->_sendRawGet($this->_searchUrl . $this->_queryDelimiter . $queryString); } else if ($method == self::METHOD_POST) { return $this->_sendRawPost($this->_searchUrl $queryString FALSE 'application/x-www-form-urlencoded'); } The $results contain the results from Solr... So this is the way I need to get to work (via php). This code below (also on top of this Q) works but thats because I paste it into the adress bar manually not via the PHPclient. But thats just for debugging I need to get it to work via the PHPclient:  http://localhost:8983/solr/select/?&q=bmw&sort=mod_date+des // Not via phpclient but works UPDATE (2010-03-08): I have tried Donovans codes (the urls) and they work fine. Now I have noticed that it is one of the parameters causing the 'SORT' not to work. This parameter is the ""wt"" parameter. If we take the url from top of this Q (fq=+category%3A%22Bilar%22+%2B+car_action%3AS%C3%A4ljes&version=1.2&wt=json&json.nl=map&q=%2A%3A%2A&start=0&rows=5&sort=mod_date+desc) and just simply remove the ""wt"" parameter then the sort works. BUT the results appear differently thus making my php code not able to recognize the results I believe. Donovan would know this I think. I am guessing in order for the PHPClient to work the results must be in a specific structure which gets messed up as soon as I remove the wt parameter. Donovan help me please... Here is some background what I use your SolrPhpClient for: I have a classifieds website which uses MySql. But for the searching I am using Solr to search some indexed fields. Then Solr returns an array of ID:numbers (for all matches of the search criteria). Then I use those ID:numbers to find everything in a MySql db and fetch all other information (example is not searchable information). So simplified: Search -> Solr returns all matches in an array of ID:nrs -> Id:numbers from Solr are the same as the Id numbers in the MySql db so I can just make a simple match agains every record with the ID matching the ID from the Solr results array. I don't use Faceting no boosting no relevancy or other fancy stuff. I only sort by the latest classified put and give the option to users to also sort on the cheapest price. Nothing more. Then I use the ""fq"" parameter to do queries on different fields in Solr depending on category chosen by users (example ""cars"" in this case which in my language is ""Bilar""). I am really stuck with this problem here... Thanks for all help Have you tried changing to a numeric timestamp? the phpSolr url you listed isn't a valid url. Can you post the complete version? Sorry for the timeout I was busy with other things. What do you mean by the complete version? Could you post the top 5 results of each query? Obviously you are doing more in the second query (applying a couple facets and searching for *:*) than in the first one (no facets searching for bmw). A good place to start would be to compare apples to apples. No the thing is in the second query I am using my SolrPhpClient which sends a request via HTTP. But in the first query I am just pasting that code into the browser adress bar because it is the adress to solr as you know probably. This SolrPHPClient does something as you can see in the code above to the parameters and query. I don't really know what it does but it is all there. I will update to clarify some more check the edit again I would test with the exact same query in the browser as you are sending with SolrPHPClient. Is the problem that you are getting accurate results but they're just not being sorted properly? Yes accurate results but not sorted properly... I have asked the DJimenez to help me out (the Developer of this PHPClient)... I guess it is a bit tricky Question! Use session's values for save sort parameters.  As pointed out in the stack overflow comments your browser query is different than your php client based query - to remove that from the equation you should test with this corrected. To get the same results as the browser based query you're php code should have looked something like this: $solr = new Apache_Solr_Client(...); $searchOptions = array( 'sort' => 'mod_date desc' ); $results = $solr->search(""bmw"" 0 10 $searchOptions); Instead I imagine it looks more like: $searchOptions = array( 'fq' => 'category:""Bilar"" + car_action:Sälje' 'sort' => 'mod_date desc' ) $solr->search(""\*:*"" 0 10 $searchOptions); What I expect you to see is that php client results will be the same as the browser based results and I imagine the same would happen if you did it the opposite way - take your current parameters from the php client and applied them correctly to the browser based query. Now onto your problem you don't see documents sorted properly. I would try this query which is the equivalent of the php client based code: http://localhost:8983/solr/select/?&q=%2A%3A%2A&fq=+category%3A%22Bilar%22+%2B+car_action%3AS%C3%A4ljes&sort=mod_date+desc versus this query which moves the filter query into the main query: http://localhost:8983/solr/select/?&q=+category%3A%22Bilar%22+%2B+car_action%3AS%C3%A4ljes&sort=mod_date+desc and see if there is a difference. If there is then it might be a bug in how results from cached filtered queries are used and sorted by solr - which wouldn't be a problem with the client but the solr service itself. Hope this gets you closer to an anser. Hi. Thanks for the response Donovan. Please look at my UPDATE in the Question... The wt parameter always must be ""json"" for the PHP client because that is how it parses the results. If you're getting different sorting results based on the output writer used then you might want to bring it up on the solr mailing list: solr-user@lucene.apache.org  The quick answer in case someone is attempting to sort via solr-php-client: $searchOptions = array('sort' => 'field_date desc'); Ditch the + sign that you would usually put on the URL. It took me a while as well to figure it out I was encoding it and putting it all over the place...",java php sql mysql database
2357341,A,"""Should I use multiple indices in Solr?"" and some other quick Q Imagine a classifieds website a very simple one where users don't have login details. I have this currently with MySql as a db. The db has several tables because of the categories but one main table for the classified itself. Total of 7 tables in my case. I want to use only Solr as a ""db"" because some people on SO thinks it would be better and I agree if it works that is. Now I have some quick questions about doing this: Should I have multiple scheema.xml files or config.xml files? How do I query multiple indices? How would this (having multiple indices) affect performance and do I need a more powerful machine (memory cpu etc...) for managing this? Would you eventually go with only Solr instead of what I planned to do which is to use Solr to search and return ID numbers which I use to query and find the classifieds in MySql? I have some 300000 records today and they probably won't be increasing. I have not tested how the records would affect performance when using Solr with MySql because I am still creating the website but when using only MySql it is quite slow. I am hoping it will be better with Solr + MySql but as I said if it is possible I will go with only Solr. Thanks I'm sorry I only had an answer for one of your questions I'm curious to see other people's answers for 1-3. Could you re-ask them as individual questions? 4 : If an item has status fields that get updated much more frequently than the rest of the record then it's better to store that information in a database and retrieve it when you access the item. For example if you stored your library book holdings in a solr index you would store the 'borrowed' status in a database. Updating Solr can take a fair bit of resources and if you don't need to search on a field it doesn't really need to be in Solr.",java php sql mysql database
3470988,A,"In MySQL need to join two tables with one table having multiple references to the second I have two tables one is signups and contained in it are two fields firstchoice and secondchoice. Another is a schedule table and it has things like a begin and end date and a semesterid. firstchoice and secondchoice from the signups table both reference the semesterid from the schedule table. I am trying to create a page which displays all of the registered people and the schedules they have registered for (the begin and end dates) and my current query: $query = ""SELECT * FROM signups INNER JOIN (schedule) ON signups.firstchoice=schedule.semesterid AND signups.secondchoice=schedule.semesterid""; is not returning any results from the schedule table. Is it possible to join two tables like this with two columns on one table referencing a single column on another? Just for kicks try this: SELECT * FROM signups a INNER JOIN (schedule) b ON a.firstchoice=b.semesterid OR a.secondchoice=b.semesterid I think you are looking for this: SELECT * FROM signups s INNER JOIN schedule sc1 ON s.firstchoice=sc1.semesterid INNER JOIN schedule sc2 ON s.secondchoice=sc2.semesterid If they don't always have a second choice you may want to do this: SELECT * FROM signups s INNER JOIN schedule sc1 ON s.firstchoice=sc1.semesterid LEFT OUTER JOIN schedule sc2 ON s.secondchoice=sc2.semesterid This did the trick",php sql mysql database join
2410994,A,"MySql displaying results in same order no matter ""array-order"" I am using ""solr"" search engine to query an index for classifieds that match a given criteria. The results are the ID:numbers of the classifieds which I then use to find all matches in a MySql database with those ID:s. The ID:s returned are put into an array. As you can see below the array is imploded. Then I use the ""IN"" to find all matches. $solr_id_arr_imploded = implode(""' '"" $solr_id_arr); $query = ""SELECT mt.* $sql_tbl.* FROM classified mt LEFT JOIN $sql_tbl ON $sql_tbl.classified_id = mt.classified_id WHERE mt.ad_id IN ('$solr_id_arr_imploded')""; $sql_tbl is the category chosen by the user in this case lets say it is ""cars"". My problem is this: I have the ID:numbers in an order (inside the array) but MySql doens't ""care"" about this order. MySql displays the oldest item first no matter what order the array is in. So here is one same query displayed with two different ""array-directions"": SELECT mt.* fordon.* FROM classified mt LEFT JOIN fordon ON fordon.classified_id = mt.classified_id WHERE mt.ad_id IN ('Bmw_520i_Svensksald_784332731' 'Bmw_M3_Svensksald_755599519' 'Bmw_M3_E46_Full-utrustad_338210082') SELECT mt.* fordon.* FROM classified mt LEFT JOIN fordon ON fordon.classified_id = mt.classified_id WHERE mt.ad_id IN ('Bmw_M3_E46_Full-utrustad_338210082' 'Bmw_M3_Svensksald_755599519' 'Bmw_520i_Svensksald_784332731') As you can see the ID:s are reversed in the second query above... But they are still displayed in the same order anyways. Why? Should I use some other method of finding all MySql matches with ID:s from an array? Ideas? Thanks MySQL will return the data in the order it ""wants"" (I suppose it'll be the order of the clustered index or something like that) if you do not specify an order by clause. If you want to change the order in which MySQL returns the results you'll have to add an order by clause. If that's not possible in your case you'll have to re-order the elements from the PHP code -- for instance instead of displaying the results from what MySQL returns you should iterate over the list of ids returned by Solr and display the results starting from there. Basically you'll first execute the MySQL query to fetch the results : SELECT mt.* fordon.* FROM classified mt LEFT JOIN fordon ON fordon.classified_id = mt.classified_id WHERE mt.ad_id IN ( 'Bmw_520i_Svensksald_784332731' 'Bmw_M3_Svensksald_755599519' 'Bmw_M3_E46_Full-utrustad_338210082' ) Then you can loop over those results in PHP storing them in an associative array (pseudo-code) : $hash = array(); foreach ($db_results as $elem) { $hash[$elem->ad_id] = $elem; } $hash will contain the data indexed by id. And then you'll display the data using what Solr returned as a starting point for the loop (pseudo-code) : foreach ($solr_results as $id_solr) { echo $hash[$id_solr]->some_field . '<br />'; } With this you will : display the results in the order returned by Solr not do an additionnal (and possibily costly) sort on the database-side.  This should do it: SELECT mt.* $sql_tbl.* FROM classified mt LEFT JOIN $sql_tbl ON $sql_tbl.classified_id = mt.classified_id WHERE mt.ad_id IN ('$solr_id_arr_imploded') ORDER BY FIELD(mt.ad_id'$solr_id_arr_imploded') See Order By Field in Sorting Rows.",php sql mysql database arrays
3764894,A,"Any way of ""multiplying"" MySql records to test a large db on server? I have several mysql tables in a database. Currently I am doing finishing test on my website and one is to test a heavy db to see how much this affects performance (searching). The website is a classifieds website. It would take a very long time for me to insert one classified at a time to reach a significant nr. So I wonder is there any way of multiplying records in MySql preferrably with phpMyAdmin? Lets say I already have 20 finished records and just multiply them several times and I get a large db in no time. Possible? You should know that my tables have foreign keys and other relations... If you need more input let me know... Thanks INSERT INTO mytable SELECT * FROM mytable There's no need to list the fields individually as you know the structure is going to be the same. The only potential problem would be any auto-incrementing identity field.  insert into mytable ( col1 col2 col3... ) select col1 col2 col3 from mytable",php sql mysql database search
3006164,A,"Should I sanitize EVERY form variable passed along? I have a form with many fields... The action is set to a php page which queries mysql... Should I sanitize with mysql_real_escape_string every single variable? Or can I ignore sanitizing drop-lists and radios for instance? Also besides mysql_real_escape_string what else should I do to prevent attacks? Thanks Here is a derived table approach that can avoid SQL Injection http://beyondrelational.com/blogs/madhivanan/archive/2010/05/14/derived-table-new-approach-to-avoid-sql-injection.aspx incredible stupid approach So do you think the method is open to SQL Injection? Yes it is still open. I've not evaluated Method 1 but in Method 2 1=1 would pass and return unfiltered values from the SQL. If those were medical appointments joined to patient records and you were EXPECTING to pass in Patient_ID = nnnnn... but I called it with 1=1 that would be injection and Method 2 would fail - I'd get a complete list of every patient and their appointments. You set up a single case SQL Injection and built a function that stops that one case. Yes. That would anywany avoid updating the table Try with any DML or DDL statements  Another bunch of ignorant answers. Camran you're attracting it like magnet. You have to understand that mysql_real_escape_string has nothing to do with forms and radios with checking and sanitizing. And it does not prevent attacks. It is merely a string escaping function. It escapes a data that going to be inserted into SQL query string as a string data. SQL query is a little program. With it's own syntax. You must follow that syntax not because of ""attacks"" but because of it's just a syntax. And of course these rules do not depend on the source of data! Radio button html form or browser - all doesn't matter! And it works only with strings. Not with numbers nor identifiers. Here is my answer on how to handle an SQL query: http://stackoverflow.com/questions/2993027/in-php-when-submitting-strings-to-the-db-should-i-take-care-of-illegal-characters/2995163#2995163  You only have to sanitize the fields that you don't want an attacker to hijack. The data can be form any source not just your page. mysql_real_escape_string is good for any value that will concatenated into a query but I ""sanitize"" everything. To me ""sanitize"" means more than handling injection attacks it includes any field validation as well (sting length numeric valid date empty etc).  In general it is trivial to form a POST request outside of the browser and so bypass any restrictions the drop down list (for example) may have imposed on possible values. Because of this you should always treat user data as hostile and error-prone and put as much validation and protection on the server-side as possible.  You only need to use mysql_real_escape_string to escape strings prior to using them in SQL statements to prevent SQL Injection attacks. In addition when taking data out of your database and writing it out as HTML you should consider using htmlspecialchars or strip_tags to prevent cross-site scripting attacks. Better to use htmlspecialchars() I think. strip_tags is not always working as intended. neither htmlspecialchars nor mysql_real_escape_string work as a magic pill under all conditions please see http://stackoverflow.com/questions/110575/do-htmlspecialchars-and-mysql-real-escape-string-keep-my-php-code-safe-from-injec  Any variable sent from the client can't be consider as safe and valid. If you are using them in query you should always sanitize them. what about variables that weren't sent from the client?  You must check selects and radio buttons too. Anyone can create their own HTML form and post it to your script. The Firefox extension Web Developer Toolbar even has an option to convert selects to text inputs. You can also check that the posted data only contains correct values. For example if you have a radio button make sure that the posted form only contain one of the valid values. You should of course only run mysql_real_escape_string on variables that you are going to put into MySQL. If saving to file using on the commandline or anything other there are more apropriate functions and solutions. remember mysql_real_escape_string is only safe to use when the escaped value is delimited by single quotes in the resultant sql statement. Even better: forget about string escaping and just use bound sql parameters.",php sql mysql database security
3024265,A,Expand my knowledge in DB programming my name is Tal Im working on a PHP Application the should have lots and lots of records what DB should I use and are there guides on the web that explains how to build efficient dbs and tables? Tnx! Don't select every row (*) just select what you need in a query. Always close connections. Use either prepared statements or escape inputted user information when inserting or updating. `(*)` refers to columns not rows. Closing (non persistent) connections is useless. sorry kemp you carn't always be right like I guess you are all the time.  This is a big topic merely selecting technology A or B is not enough. You have to consider the whole chain from the end user all the way up to the web server. Most DB's are close performance wise. How well you utilise each DB will have a direct and bigger impact than simply using one platform over another. A badly designed DB schema and poorly optimised query will perform badly in ANY db platform.  Get familiar with database normalization. It's a brilliant theory that will help you build stable and scalable databases. There is a good article on the subject at http://en.wikipedia.org/wiki/Database_normalization As to what database management system you should use I'd recommend that you start with MySQL. It's the world's most popular database software (it's what they use in WordPress phpBB and Drupal). It's fast reliable open source and there are plenty of learning materials about it. I got a kick out of the edit history for this answer. +1 I know :) Sometimes I lose control.  MySql is easy to use but probably not the most efficient b/c it is free. SQLite works well too if you need an embedded database in your app.  PHP is widely used with MySql. You can also use PHP with sqlite. sqlite is faster and embeddable but is not ideal for large dbs. As far as db efficiency is concerned check this out.,php sql database
3333089,A,"I need some advice on storing data in mysql where one needs to store more than one let say userids for a single post? In cases when some one needs to store more than one value in a in a cell what approach is more desirable and advisable storing it with delimiters or glue and exploding it into an array later for processing in the server side language of choice for example. $returnedFromDB = ""159|160|161|162|163|164|165""; $myIdArray = explode(""|""$returnedFromDB); or as a JSON or PHP serialized array like this. :6:{i:0;i:1;i:1;i:2;i:2;i:3;i:3;i:4;i:4;i:5;i:5;i:6;} then later unserialize it into an array and work with it OR have a new row for every new entry like this postid 12 | showto 2 postid 12 | showto 3 postid 12 | showto 5 postid 12 | showto 6 postid 12 | showto 8 instead of postid 12 | showto ""2|3|4|6|8|5|"". OR postid 12 | showto "":6:{i:0;i:2;i:1;i:3;i:2;i:3;i:3;i:4;i:4;i:5;i:5;i:6;}"". Thanks looking forward to your opinions :D You should only serialize data in the DB if the data is never needed to be processed by the DB. For example you could serialize user ID in the user_id field if you never need to do a query with the user_id field; e.g. never selecting anything based on user. If these are posts (blog/news/etc. posts?) then I'm pretty confident you'll need to be able to query them by user. Normalizing the user into another table would serve you: CREATE TABLE posts (post_id ....); CREATE TABLE post_users (post_id user_id ...); You can then get the users in a different query or use group_concat: SELECT post_id GROUP_CONCAT(user_id) FROM posts JOIN post_users USING (post_id) GROUP BY post_id. When you need to show user name just join to the users table to get their name in the group concat.  From RDBMS point of view i would 'have a new row for every new entry' Thats called m:n relationship table. You can then query the data however you like. If you need postid 12 | showto "":6:{i:0;i:2;i:1;i:3;i:2;i:3;i:3;i:4;i:4;i:5;i:5;i:6;}"". you can do SELECT postid CONCAT(':'count(showto)':{i:'GROUP_CONCAT(showto SEPARATOR ';i:')';}') AS showto FROM tablename GROUP BY postid However if you only need the data in 1 form and not do any other kind of queries on that data then you may aswell store the string. Wow never thought of this syntax :D ""CONCAT(':'count(showto)':{i:'GROUP_CONCAT(showto SEPARATOR ';i:')';}')"" might help me alot :D Thanks. +1 for givin me a cool idea :P  Most of the time the recommendation is that many-to-many relationships (such as posts to users) should have a mapping table with 1 row for each post-user combination (in other words your ""new row for every new entry"" version). It's more optimal for things like join queries and lets you retrieve only the data you need.  In cases when some one needs to store more than one value in a in a cell what approach is more desirable and advisable storing it with delimiters or glue and exploding it into an array later for processing in the server side language of choice for example. Neither. Oh goodness neither! Edgar F. Codd is rolling in his grave right now. Storing delimited data in a text field is no better than storing it in a flat file. The data becomes unqueryable. Storing PHP serialized data in a text field is even worse because then only PHP can parse the data. You want a nice happy normalized database. The thing you're trying to describe is a many-to-many relationship. Each user can maintain one or more posts. Likewise each post can be maintained by one or more user. Right? Then something like this will work. CREATE TABLE users ( user_id INTEGER PRIMARY KEY ... ); CREATE TABLE posts ( post_id INTEGER PRIMARY KEY ... ); CREATE TABLE user_posts ( user_id INTEGER REFERENCES users(user_id) post_id INTEGER REFERENCES posts(post_id) UNIQUE KEY(user_id post_id) ); -- All posts made by user 22. SELECT posts.* FROM posts user_posts WHERE user_posts.user_id = 22 AND posts.post_id = user_posts.post_id -- All users that worked on post 47 SELECT users.* FROM users user_posts WHERE user_posts.post_id = 47 AND users.user_id = user_posts.user_id CREATE TABLE user_posts ( user_id INTEGER REFERENCES users(user_id) post_id INTEGER REFERENCES posts(post_id) UNIQUE KEY(user_id post_id) ); This part can you clearify this a bit more for me please the INTEGER REFERENCES and UNIQUE KEY is this like a forign key constraint or something?. or its some sort of table that relates the post id with the userid And well i guess im convinced that I should not be storing data as delimited stings and serializations @Akay The `REFERENCES` clauses create foreign keys yes. This makes sure that you can't insert nonsensical identifiers in the link table. `UNIQUE KEY(col1 col2)` establishes something called a ""compound key"" -- two columns kind of glued together. In this case the combination of the two columns is unique. You couldn't insert `VALUES(1 2) (1 2)` for example. The restriction is in place because it makes sense for the data model I described above. It might not make sense if you need to store additional data in the link table about the nature of the relationship. You should not be using LEFT OUTER JOINs here. If user dont have a post it does not caontain in n:m table anyway and INNER JOIN allows much better optimisation. @Imre sorry bad habit from using a broken database engine that didn't understand the word ""INNER"". I'm editing to use worse/better syntax. @Charles Thanks alot im sure this will help me quite a bit to normalize my database :D its sad tho MySQL documentation is a bit tough to get around things need so much clarification :( . @Akay thankfully that's what SO is for. If you can't figure it out yourself ask for more help in new questions. Good luck!",php sql database arrays
1921270,A,"Updating SQL database using PHP I am trying to make a password retrieval system on my site and I am having problems updating the password reset field in my database. I have tried everything but nothing seems to work. This is my code so far: $passwordreset = md5(mt_rand()) . md5(mt_rand()) . md5(mt_rand()); $con = mysql_connect(""localhost""""XXX""""XXX""); if (!$con) { die('Could not connect: ' . mysql_error()); } mysql_select_db(""database"" $con); mysql_query(""UPDATE members SET passwordreset = $passwordreset WHERE id = $id""); When I try to insert the data I get the error: Error: Query was empty Any help would be appreciated Thanks. Are you sure the message comes from this particular query? How do you get the error? Are the two line breaks after $passwordreset intentional? Can you try removing them? They shouldn't be a problem. I have lots of long MySQL statements here with line breaks and php / MySQL have no problems with them.  I am not sure if you get an empty query error for this but you need ticks around the values: mysql_query(""UPDATE members SET passwordreset = '$passwordreset' WHERE id = '$id'"");  I guess the backticks around the names of the columns are missing try: mysql_query(""UPDATE members SET `passwordreset` = '$passwordreset' WHERE `id` = '$id'"");  Not sure it's the only problem but I'm guessing your passwordreset field is a string in the database -- to store a concatenation of several md5 which are strings it has to. So there should be quotes arround the value you put in this field in the SQL query : mysql_query(""UPDATE members SET passwordreset = '$passwordreset' WHERE id = $id""); And in a general case you should escape your string values with mysql_real_escape_string : mysql_query(""UPDATE members SET passwordreset = '"" . mysql_real_escape_string($passwordreset) . ""' WHERE id = $id""); It won't change anything here as there is no quote in a md5... But it's a good practice to always do it to never find yourself in a situation where it was necessary and you didn't do it. Thanks for your reply still doesn't work getting the same error",php sql database sql-update
2270475,A,help with sql query with parentheses i have following code: SELECT * FROM table WHERE thread = $thread AND (user != $user1 OR user != $user2) i want the code to pick all rows that contains $thread BUT the user isn't $user1 or $user2. is my code correct? or should it be like: SELECT * FROM table WHERE thread = $thread (AND user != $user1 OR user != $user2) thanks in advance You could also use SELECT * FROM table WHERE thread = '$thread' AND user NOT IN ($user1 $user2) Don't know which executes faster but this is my preferred way because I like it's readability better.  Use this: SELECT * FROM table WHERE thread = $thread (AND user != $user1 AND user != $user2) Because you don't want if the user is either of user1 or user2 for this reason using 'AND' will be proper option here. Also if the $thread is not an integer field you need enclose it in quotes eg: WHERE thread = '$thread'  Use: SELECT t.* FROM TABLE t WHERE t.thread = mysql_real_escape_string($thread) AND t.user NOT IN (mysql_real_escape_string($user1) mysql_real_escape_string($user2)) Please use mysql_real_escape_string or risk SQL injection attacks. Mind that you don't need single quotes because of using `mysql_real_escape_string` i have already escaped them=) `mysql_escape_string` is deprecated but an alternative for PHP prior to 5.3: http://php.net/manual/en/function.mysql-escape-string.php @noname: Sorry just making sure.  SELECT * FROM table WHERE thread = $thread AND user != $user1 AND user != $user2 what if thread is a string? Just following the OP's lead. Avoiding SQL injection is important obviously.  I think you should also be using <> instead of != So: SELECT * FROM table WHERE thread = $thread AND user <> $user1 AND user <> $user2 <> and != both are same and understood by mysql `!=` is ANSI-92 and supported by MySQL at least 4.1+,php sql mysql database
2523631,A,"SQL Select * from multiple tables Using PHP/PDO/MySQL is it possible to use a wildcard for the columns when a select is done on multiple tables and the returned array keys are fully qualified to avoid column name clash? example: SELECT * from table1 table2; gives: Array keys are 'table1.id' 'table2.id' 'table1.name' etc. I tried ""SELECT table1.*table2.* ..."" but the returned array keys were not fully qualified so columns with the same name clashed and were overwritten. So basically you are lazy? Too lazy to do your job correctly? beware of identically named coluns in different tables - you'll only get one instance. Yes. I did notice that if I knew the number of columns in each table I could retrieve values by the numeric index but thats not the case. Is there a specific reason you need to do this? It's usually a bad idea to use SELECT * from multiple tables anyway so I'm just trying to figure out the thought process behind you doing this before I give you an answer. Agreed. Unless you don't know the column names (and I bet you do) SELECT * is never a good idea: you're running two queries instead of one (one for the column names then your query) and you're most likely bringing back more data than you need. Might not notice a problem now but if some of those fields are BLOBs or have a lot of text you will. @Stephen I have several 'content' tables with unrelated columns and one 'metadata' table that holds similar data for the other tables. I query one content table with the metadata table (lets say one to one relationship) for all the content table columns. I wish could explain better but my database lingo is limited. @Tom Of course I know the column names. Just don't want to type them out! Yes you can. The easiest way is with pdo although there's at least a few other extensions which are capable of it. pdo Set the attribute on the PDO object not the PDOStatment. $PDO->setAttribute(PDO::ATTR_FETCH_TABLE_NAMES true); That's it. Then you get associative array keys like myTable.myColumn. It works if you fetch an object too so beware because you need to access the properties like $obj->{'myTable.myColumn'}; *The manual says that attribute is only supported by certain drivers. If the above doesn't work this might work instead. $pdoStatement->setFetchMode(PDO::FETCH_NUM); $pdoStatement->execute(); //build our associative array keys $qualifiedColumnNames = array(); for ($i = 0; $i < $pdoStatement->columnCount(); $i++) { $columnMeta = $pdoStatement->getColumnMeta($i); $qualifiedColumnNames[] = ""$columnMeta[table].$columnMeta[name]""; } //fetch results and combine with keys while ($row = $pdoStatement->fetch()) { $qualifiedRow = array_combine($qualifiedColumnNames $row); print_r($qualifiedRow); } Same basic pattern is used for other database extensions mysql $res = mysql_query($sql); //build our associative array keys $qualifiedColumnNames = array(); for ($i = 0; $i < mysql_num_fields($res); $i++) { $columnMeta = mysql_fetch_field($res $i); $qualifiedColumnNames[] = ""$columnMeta[table].$columnMeta[name]""; } //fetch results and combine with keys while ($row = mysql_fetch_row($res)) { $qualifiedRow = array_combine($qualifiedColumnNames $row); print_r($qualifiedRow); } mysqli $res = $mysqli->query($sql); //build our associative array keys $qualifiedColumnNames = array(); foreach ($res->fetch_fields() as $columnMeta) { $qualifiedColumnNames[] = ""{$columnMeta->table}.{$columnMeta->name}""; } //fetch results and combine with keys while ($row = $res->fetch_row()) { $qualifiedRow = array_combine($qualifiedColumnNames $row); print_r($qualifiedRow); } Dude that worked. Thanks. This is an awesome work around you saved my bacon.  Unfortunately no; there is no SQL syntax for ensuring that column names are unique. If you truly don't know the names of the columns and must use SELECT * your only real option would be to revert to some very ugly looking dynamic SQL that could inspect the structure of the tables and generate a query that would select them all explicitly with a table-name prefix. I don't know which RDBMS you're using but something like this should work on SQL Server: declare @columns table (idx int identity(11) tablename varchar(100) columnname varchar(100)) insert into @columns (tablename columnname) select tablename columnname from INFORMATION_SCHEMA.COLUMNS where tablename in ('table_1' 'table_2') declare @sql nvarchar(4000) declare @i int declare @cnt in declare @col varchar(100) declare @table varchar(100) select @i = 0 @cnt = max(idx) @sql = '' from @columns while @i < @cnt begin select @i = @i + 1 select @col = columnname @table = tablename from @columns where idx = @i if len(@sql) > 0 select @sql = @sql + ' ' select @sql = @sql + '[' + @table + '].[' + @col + '] as [' + @table + '_' + @col + ']' end select @sql = 'select ' + @sql + ' from table_1 table_2' exec sp_executesql @sql By the time I write that I could have written the sql queries by hand. Hang on... I could have done that instead of being here. Joking. I don't know which language/db/library but I do remember having to work with fully qualified column names and hating to type the full column name. Now I have the reverse problem. @zaf: I've essentially written it for you... Nice try but using MySQL. @zaf: Then adapt it. What you're looking for isn't strictly possible. I've provided you with something that will at least *accomplish* what you're looking for even if it's less than ideal.  Unfortunately PHP (particularly the MySQL PgSQL MSSQL extensions) will always have your columns overwrite in the case of overlap. I would recommend creating a View in your database and Alias your columns so that they are ""fully-qualified"". For example: (MySQL) CREATE VIEW viewTable1Table2 AS SELECT t1.field1 AS Table1Field1 t2.field1 AS Table2Field1 FROM Table1 t1 INNER JOIN Table2 t2 ON t1.id = t2.id; The syntax may not be perfect but you can get a general idea of what I am talking about. Didn't know about that but still the same problem.  you can do this: SELECT Table1.*Table2.xyz Table2.abc... From... where you get all columns from one table using ""*"" and then just the columns from the other table you need so there is no clash. You could also use column aliases where you ""rename"" a column: SELECT Table1.A AS T1_ATable2.A AS T2_A... From... your result set would be of columns T1_A and T2_A Firstly you are specifying the column names - we don't know the columns and what if xyz or abc are also in Table1?. Secondly as I said I've tried the wildcard. If we don't know the columns in the tables then its just a tad more difficult to rename them. how can you not know the columns? is this generated with dynamic SQL? if so dynamically build the select list. The tables involved are dynamic. I'm trying to avoid writing code that handles each 'type' of table. @zaf if you don't know the column names how do you know which ones you need/ which ones are being overwritten? @Tom And thats the puzzle. If the column name included the table name we would be ok.",php sql mysql database pdo
2352170,A,"MySQL delete from 3 tables I have the following tables with these keys in my database: bookings session_id sessions session_id course_id courses course_id I want to create a query to delete all date relating to a single course (course_id). For example if I wanted delete course_id=10 I would want any sessions with course_id=10 to be deleted in addition any bookings associated with any of these sessions need to be deleted too. Is this possible? what is the best way to approach it? (I'm writing this in PHP.) Any help much appreciated! does the sessions table reference itself with the session_id key? I think the best way would be to configure the tables adding proper foreign keys (you'll have to use InnoDB for this to actually work in mysql) and setting the behavior of the FKs to 'ON DELETE CASCADE'. This way when you delete something from the courses table the related bookings and sessions will be deleted automatically. Some linksies: MySQL DELETE with possible gotchas about this. Foreign Keys examples  MySQL supports multi-table deletes: DELETE FROM BOOKINGS USING BOOKINGS JOIN SESSIONS JOIN COURSES WHERE BOOKINGS.session_id = SESSIONS.session_id AND SESSIONS.course_id = COURSES.course_id AND COURSES.course_id = ? Another alternative would be to use stored procedure and process the deletions in proper order: BOOKINGS DELETE FROM BOOKINGS WHERE EXISTS(SELECT NULL FROM SESSIONS s WHERE s.session_id = session_id AND s.course_id = ?) SESSIONS DELETE FROM SESSIONS WHERE EXISTS(SELECT NULL FROM COURSES c WHERE c.course_id = course_id AND c.course_id = ?) COURSES DELETE FROM COURSES WHERE course_id = ? Hi Guys Thanks ever so much for all your help - think I've got it working how I wanted now!.. does my proposed solution have any drawbacks apart from depending on using the InnoDB engine? Also it's _id for the keys. @Adriano Varoli Piazza: `DELETE ON CASCADE` isn't a recommended practice because someone else wouldn't necessarily know it is in place & end up wiping out data they shouldn't have. While it seems like more work being explicit about what is being done is the best approach. Hi There Thanks for the response I am attempting to use the first multi delete method: DELETE FROM bookings sessions courses USING bookings JOIN sessions JOIN courses WHERE bookings.session_id=sessions.session_id AND sessions.course_id=courses.course_id AND courses.course_id=""13"" This doesn't seem to be working - is my syntax correct? -Thanks! If you don't use transactions *don't use a sequence of related actions*. @bart: Yes which is why I mentioned ""stored procedure"". @Fred: What error are you getting? Dealing with this via comments isn't the most ideal way. I'm getting the following: #1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM bookings sessions courses USING bookings JOIN sessions JOIN courses WHERE' at line 1 Sorry I agree not sure where else to post this other than comments? @Fred: Remove the `FROM` I'll update my answer. Hi Thanks again for the help... I'm now using: 'DELETE bookings sessions courses USING bookings JOIN sessions JOIN courses WHERE bookings.session_id=sessions.session_id AND sessions.course_id=courses.course_id AND courses.course_id=""10""' But still getting the following: '#1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'USING bookings JOIN sessions JOIN courses WHERE bookings.session_id=sessions.ses' at line 1' ? @OMG Ponies I don't get exactly who would not necessarily know about the behavior: if it's the end user he's as likely to be unable to read the code. If it's the programmer he could study the db schema before twiddling random bits shouldn't he? Also backups are delicious. @Adriano Varoli Piazza: People don't all share the same skill sets and centralization of configuration is a principle every app strives for. Just because you haven't heard of a best practice doesn't mean others don't share it. You could ask the question on SO. @Adriano Varoli Piazza: Any shop where there's more than one person able to make changes to the database. It's the same rationale why triggers aren't liked - there's now multiple places to check for configuration to know why something happened because something was done ""auto-magically"". I agree co-workers should be diligent but they aren't all as familiar with the technology as you are. @Fred perhaps you have to use the alternative syntax? DELETE bookings sessions courses FROM bookings INNER JOIN sessions ON bookings.session_id = session.session_id INNER JOIN courses ON sessions.course_id = courses.course_id WHERE courses.course_id = '10' @Fred: Missed your comment update answer. @OMG Ponies that argument sounds very shallow to me: ""We might hire crappy coders so we can't do things the proper (to me at least) way. Let's enforce the way through code"". This is not 'hiding' or 'automagic'. This is stated clearly in the DB schema which one should learn before coding their way into a paperbag. To sum up: I hadn't ever heard that CASCADEs were not recommended practice before. Could you cite?",php sql mysql database
3263371,A,"SQL FOREIGN KEY USAGE ? what does it really do ? and when it was needed? ok im makeing a simple database for my example there is users data and the user company's data . CREATE TABLE `users` ( `UID` INT(25) NOT NULL AUTO_INCREMENT  `username` VARCHAR(60) NOT NULL  `password` VARCHAR(100) NOT NULL  `ownername` VARCHAR(150) NOT NULL  `userstatus` TINYINT(1) NOT NULL  `userregistertime` DATETIME NOT NULL  `userlastonline` DATETIME NOT NULL  PRIMARY KEY (`UID`)  INDEX `username` (`username` ASC) ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8; CREATE TABLE `company` ( `CID` INT(25) NOT NULL AUTO_INCREMENT  `UID` INT(25) NOT NULL  `companyname` VARCHAR(60) NOT NULL  `companyaddress` VARCHAR(255) NOT NULL  `companyemail` VARCHAR(255) NULL DEFAULT NULL  `companyphone` VARCHAR(20) NOT NULL  `companyimage` VARCHAR(255) NULL DEFAULT NULL  `companyyahoo` VARCHAR(255) NULL DEFAULT NULL  `companytwitter` VARCHAR(255) NULL DEFAULT NULL  `companykaskus` VARCHAR(255) NULL DEFAULT NULL  `companyfacebook` VARCHAR(255) NULL DEFAULT NULL  `companytype` TINYINT(1) NOT NULL DEFAULT '0'  `companystatus` TEXT NULL DEFAULT NULL  `companytemplate` TEXT NULL DEFAULT NULL  `companyintroduction` TEXT NULL DEFAULT NULL  `partnership` TINYINT(1) NOT NULL DEFAULT '0'  PRIMARY KEY (`CID`)  INDEX `ownername` (`UID` ASC)  INDEX `companyname` (`companyname` ASC)  CONSTRAINT `ownernamecompany` FOREIGN KEY (`UID` ) REFERENCES `users` (`UID` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8; 1.why after i insert data to the users table ( uid is auto increment ) it doesnt update my company UID table ? if you have php knowledge please see how im inserting it. $RegisterInsert1 = $dbConnect->prepare(""INSERT INTO users ( `username` `password` `ownername` `userregistertime` `userlastonline`) VALUES ( :username :password :ownername :userregistertime :userlastonline)""); $RegisterInsert1->execute($RegisterData1); as you see i get UID = 1 ( auto ) then usernamepaswordownernameetc inserted on user table. but somehow my company UID is not updated. it should be UID = 1 then the rest CID ( auto ) companyname null etc null. 2.am i right defining a foreign key usage for? 3.please give me the best example of inserting users data + company data with the right usage from the right usage of foreign. how im doing it right now // INSERT USERS DB $RegisterInsert1 = $dbConnect->prepare(""INSERT INTO users ( `username` `password` `ownername` `userregistertime` `userlastonline`) VALUES ( :username :password :ownername :userregistertime :userlastonline)""); $RegisterInsert1->execute($RegisterData1); // GET USERS GIVEN AUTO GENERATED UID // QUESTION ? THIS one should be automated by foreign useage ? $GetUid = $dbConnect->prepare(""SELECT UID FROM users WHERE username = :username""); $GetUid->execute($RegisterData3); $UserID = $GetUid->fetch(); $RegisterData2['UID'] = $UserID; // INSERT COMPANY INFO + UID $RegisterInsert2 = $dbConnect->prepare(""INSERT INTO company ( `UID``companyphone``partnership`) VALUES ( :UID :companyphone :partnership)""); $RegisterInsert2->execute($RegisterData2); U will get more appreciate ans .. if u write only that code which is related to question drct... what im trying to do is updateing the UID.company from UID.users when im inserting data olny to users table. UID.users are auto incr and it should be copyied to UID.company when its incr. so i dont have to use // GET USERS GIVEN AUTO GENERATED UID . hope you understand. thanks mate. why after i insert data to the users table ( uid is auto increment ) it doesnt update my company UID table ? SQL does not support multiple assignment you need to do this procedurally. You need to use (at least) one INSERT statement per table. INSERT INTO users which auto-generates the UID value(s); Capture auto-generated value(s) for UID; INSERT INTO users supplying the captured UID value(s). FWIW SQL Server 2008 makes this easy with an OUTPUT keyword i.e. the auto-generated values can be captured (to a staging temp table) within the INSERT statement. In MS Access you could create a VIEW with a JOIN between the two tables then INSERT INTO the VIEW and the auto-generate value would appear automatically in both tables (only worked for a two-table VIEW). I don't know if mySQL has similar features. yup no INSERT CASCADE. just UPDATE CASCADE :| . ive just notice it .  The foreign key in your schema definition is the UID column in the Company table. This refers to a single row in the Users table. You can ensure that an invalid UID is never inserted into the Company table by adding a foreign key constraint... ALTER TABLE COMPANY ADD FOREIGN KEY COMPANY_USER_FK (UID) REFERENCES USER(UID); and this will cause attempts to add a UID into the Company name that don't exist in the User table to fail. You can add extra features so that deleting a User from the User table deletes all the matching rows in the Company table as follows... ALTER TABLE COMPANY ...etc... REFERENCES USER(UID) ON DELETE CASCADE; or you can prevent users from being deleted if rows for them exist in the company table by... ALTER TABLE COMPANY ...etc... REFERENCES USER(UID) ON DELETE RESTRICT; Although it doesn't apply to your schema you could also cascade changes to the UID in the Users table by... ALTER TABLE COMPANY ...etc... REFERENCES USER(UID) ON UPDATE CASCADE; Note that all of this only works on MySQL if the storage engine is INNODB; ALTER TABLE COMPANY ...etc... REFERENCES USER(UID) ON UPDATE CASCADE; this one. why it doent update? my company table is still empty when im inserting the users data. ooooooooooooooooooooooooo i see there is no INSERT CASCADE. akakakak . stupid me .",php sql mysql database database-design
964200,A,Problem writing this query in mysql (marking read messages in a forum) Hey. i am writing a forum and i have this table that marks messages a specific user read: `read_messages`(`message_id``user_id`) a simplified version of the messages table: `messages`(`id``forum_id``author_id`) now i want to be able when retrieving the message data from the database for a given forum to add a variable that will tell me if the current user has read that message or not. i know how to do this with 2 queries (1st i retrieve all messages then i check for each of them if the user has read them) but no clue as to how to join them together. any ideas? It sounds like you're after an Outer Join check out the Outer Joins Section for the syntax which allows you to select all values from one table and NULLS where the values don't exist.  SELECT messages.* read_messages.id as read_id FROM messages LEFT OUTER JOIN read_messages ON ( messages.id = read_messages.message_id AND read_messages.user_id = [ USER ID ] ) If read_id is returned as a number > 0 rather than NULL then the message has been read because there is a corresponding record in read_messages for that user.,php sql mysql database
2334656,A,"LEFT JOIN or REGULAR JOIN and how to compare MySql table to an array? Need performance! I have six tables: t1 t2 t3 t4 t5 t6. And I also have one main table: main_table. TOTAL 7 TABLES! Now I am using SOLR for the searching of classifieds and the results from solr are put into an array. The array results are ID:nrs which I use to match agains the same ID:s in MySql. The first column of ALL tables in MySql is called classified_id. If the user searches for ""cars"" then Solr will find all cars classifieds put the id:s into an array and finally compare the MySql main table to match everything in table t1 (which is the cars table) where classified_id is the same in both tables. The SOLR results array is first imploded then: SELECT * FROM classified t1 WHERE classified.ad_id IN ('$solr_id_arr_imploded') AND classified.classified_id=t1.classified_id My Q is is this how I should do this? Is this how I should JOIN here or use a LEFT JOIN? Is there any faster way of comparing to the array? the table t1 may be empty if there are no car-classifieds... Remember the query could become very very long for example if SOLR returns 10000 matches then an array of 10000 id numbers which look like this would be returned: bmw_m3_low_miles_8948939 Thanks Will the results of the search be paged? That is if the SOLR search returns those 10000 matches do you need to fetch them all at once or just (e.g.) 50 at a time? Hi. The results are paged with MySql LIMIT. Not Solr. However if you know of how to do this in Solr maybe this is how to go then? An alternative to IN is to create a temporary table fill it with the IDs and perform an inner join on that. Make sure the other tables have an index on classified_id. To compare the options use EXPLAIN.",php sql mysql html database
1801997,A,"PHP: display entries from Database in groups of five? Is it possible and if so how can I do it to select all entries in a table in my database and then display five results at the time in one group. Meaning: A example is that I've 15 records total in my database then I want to present my data like this: <div class=""1-5"">Record[1] Record[2] Record[3] Record[4] Record[5]</div> <div class=""6-10"">Record[6] Record[7] Record[8] Record[9] Record[10]</div> <div class=""11-15"">Record[11] Record[12] Record[13] Record[14] Record[15]</div> I'm not completely sure if I can do it with an SQL statement or I've to write some sort of ""do...while"" or loop to retrieve each set of data. I've also thought about something with arrays but haven't got up with a result. Thanks Mestika I find array_chunk() to be pretty useful for this kind of thing. // pull all the records into an array $query = mysql_query('SELECT * FROM mytable'); $rows = array(); while ($row = mysql_fetch_array($query)) { $rows[] = $row; } // this turns an array into an array of arrays where each sub-array is // 5 entries from the original $groups = array_chunk($rows 5); // process each group one after the other $start = 1; foreach ($groups as $group) { $end = $start + 4; // $group is a group of 5 rows. process as required $content = implode(' ' $group); echo <<<END <div class=""$start-$end"">$content</div> END; $start += 5; } You can of course do this without reading them all in first but if you're going to read them all anyway it doesn't make much difference and the above version will probably be far more readable than implementing the appropriate break condition(s) as you read the rows from the DB.  Dunno if i understand the question right but if u want to group all the result in groups of 5:  $i =1; while ($row = mysql_fetch_array($query)) { echo $row['name'].""\n""; if ($i % 5 == 0) { echo 'hr'; // Or any other separator you want } $i++; } This answer pretty nice and shortcut solution... thanks buddy",php sql database loops while-loop
890529,A,Returning multiple rows per row (in Zend Framework) I have a MySQL database containing these tables: sessions -------- sessionid (INT) [courseid (INT)] [locationid (INT)] [comment (TEXT)] dates ----- dateid (INT) sessionid (INT) date (DATE) courses ------- ... locations --------- ... Each session has a unique sessionid and each date has a unique dateid. But dates don't necessarily have a unique sessionid as a session can span over a variable number of dates (not necessarily consecutive). Selecting each full row is simply a matter of joining the tables on the sessionid. However I'm looking for a way to return a rowset for a particular courseid where each row in that rowset represents a location and contains another rowset each containing single session which in turn contains another rowset which contains all of the dates for that session: course location sesssion date date session date date date location ... This is because I'm using querying this database from PHP using Zend Framework which has a great interface for manipulating rows and rowsets in an object-oriented manner. Ultimately I'm trying to output a 'schedule' to the view organized first by course then location then date. Ideally I'd be able iterate over each row as a location and then for each location iterate over each session and then for each session iterate over each date. I'm thinking of doing this by querying for all the locations sessions and dates separately. Then I'd convert each rowset into an array and add each sessions array as a member of a locations array and add each dates array as a member of a sessions array. This however feels very kludgy and doesn't provide me with the ability to handle the rows in an object-oriented manner. I was wondering if there was either: a) a better table schema for representing this data; b) an sql query which i'm not aware of; c) a method in Zend_Db that allows me to assign a rowset to a rowset Please let me know if I haven't been clear anywhere and thanks in advance. (Crossing my fingers that this doesn't end up on the daily wtf...) You could handle this scenario using the relationship features of Zend_ Db_ Table. You'd need to create table wrapper classes for sessions dates courses etc. if you're using Zend_ Db_ Aadpter for your queries currently. http://framework.zend.com/manual/en/zend.db.table.relationships.html It's not too different from the approach you described of querying for each dataset separately but it gives you a straight forward OO interface for retrieving the appropriate related data for a given record. You'll want to do some benchmarking if you go this route as it could potentially execute a lot of queries.  I've run into lots of issues with using Zend Frameworks database abstraction classes when I have to deal with data from multiple tables. The number of queries that run and the overhead of all of the objects generated has brought my hosting server to it's knees. I've since reverted back to writing queries to gather all of my data and then walking the data to build my display. It's not a pretty or OO as using the abstraction layers but it's also not making my PHP scripts page to disk just to display a table full of data. As Steve mentions benchmark whatever solution you end up with I'd also profile your memory usage. +1 I agree and I contributed quite a bit to the Zend Framework DB classes. The issues apply to any ORM; it's not just Zend Framework. Very true this is an ORM problem and not specific to Zend Framework.,php sql mysql database zend-framework
1105886,A,"MySQL joins how to output relation ""the proper way"" First of all excuse my poor topic title. I simply have no idea how to formulate this question or what to Google after so don't shoot me if this is something easy answerable. Assume I have the following tables: [AUTHORS] id name [NEWS] id item author_id If I wanted to display a news item and output the corresponding author (stored in author_id) I'd do the following query: SELECT * FROM `news` JOIN `authors` ON news.author_id = authors.id And then outputting it by doing something like this $Q = ""SELECT * FROM news JOIN authors ON news.author_id=news.id""; $query = $this->lite->query($Q) or die($this->lite->error); $result=null; while($obj = $query->fetch_object()){ $result.= '<li>'.$obj->item. 'by ' . $obj->name . '</li>'; } Here $obj->name would contain the name of the author and would successfully output. So what happens if the ""name"" field were called ""item"" instead? There would obviously be some conflicts. With my previous experience in Propel & symfony I would do something like this: getAuthorId()->getName() - but for this project I'm required to write SQL from scratch. Can you give more details about your class? Does it's fetching all params in object? You would need to use a qualified name like news.item or authors.item.  Never use * syntax in production code. Rewrite your query as this: SELECT news.item AS news_item author.name AS author_name FROM `news` JOIN `authors` ON news.author_id = authors.id  aliasing your fields as necessary to avoid naming conflicts. Many thanks! This did the trick. This is not production code of course :-)  You name them explicitly SELECT n.id n.item n.author_ida.namea.id FROM `news` as n JOIN `authors` as a ON n.author_id = n.id ; Or perhaps more like SELECT n.id as newsid n.item as newsitem n.author_id as autohor_authorid a.name as authornamea.id as authorid FROM `news` as n JOIN `authors` as a ON n.author_id = n.id; You should only pull out the columns you actually need. It's considered bad style to do select *  always name the columns you're interested in or it's easy to break code if e.g. another column is added to the table.",php sql database join database-relations
2755967,A,"Adjusting sql statement in a function based upon input Hey there This is a bit urgent! I'm trying to make a simple filter search where-by you can choose from a series of 3 drop downs and then based upon this the results are then displayed How would I go about adjusting the sql query for each and if you were to only choose to search from aone of the 3 rather than all 3 etc... example there could be the url with input such as: url.com?location=gb&color=3&hair=4 and still form the correct sql query for something like this: url.com?location=gb&hair=1 and not encounter problems with WHERE and AND etc etc and empty variables in the statement Would this not need to be a massive function to check using if to see how the data is set for all possibilities? Thanks Stefan I answered a question the other day that I think is pretty similar to yours: PHP: prepared statement IF statement help needed The idea is that you use conditional logic in your code to collect terms as needed corresponding to your application inputs. Then you join them together in such a way that produces the right SQL expression. It does need some application function to build the SQL expression dynamically and there are techniques to make it as concise as possible. If you really have many possible search terms you might end up with a lengthy function. But guess what? If you have complex inputs it should be no surprise that you need complex code to deal with them. Re your comment: url.com?location=gb&color=3&hair=4 Okay you have up to three inputs and you have to dynamically build up an SQL query from these. Let's start from the end and work backwards. Ultimately you want an SQL expression like this: WHERE (location = 'gb') AND (color = 3) AND (hair = 4) If you have an array of three terms you can join them together in PHP using the implode() function. But you may also have fewer than three. You can handle any number of terms by putting however many terms you have into an array and imploding them with AND between each term: $where_array = array( ""(location = 'gb')"" ""(color = 3)"" ""(hair = 4)"" ); $where_expr = ""WHERE "" . implode("" AND "" $where_array); So how do you create the array with these terms? By writing code to append to the array conditionally for each input that is present in your app's current request: $where_array = array(); if (array_key_exists(""location"" $_GET)) { $location = mysql_real_escape_string($_GET[""location""]); $where_array[] = ""(location = '$location')""; } if (array_key_exists(""color"" $_GET)) { $color = mysql_real_escape_string($_GET[""color""]); $where_array[] = ""(color = '$color')""; } if (array_key_exists(""hair"" $_GET)) { $hair = mysql_real_escape_string($_GET[""hair""]); $where_array[] = ""(hair = '$hair')""; } After all that's done your array has between zero and three elements. If it has one or more you want to generate a WHERE clause as shown previously otherwise skip it. $where_expr = ''; if ($where_array) { $where_expr = ""WHERE "" . implode("" AND "" $where_array); } Then append the $where_expr to your baseline SQL query. $sql .= $where_expr The stuff about $params is for query parameters which is an alternative method of including dynamic values into an SQL expression instead of mysql_real_escape_string(). It's not mandatory (and in fact PHP's old mysql extension doesn't support query parameters) but I recommend switching to PDO so you can use this feature. See example here: PDO::prepare(). I must be tired... Hmmm i dont understand the param sections I'm still relatively new. and where() implode etc...my db class doesnt handle much more than connecting and making basic calls such as return row and query. Could you elaborate a little more please? Don't try to learn new coding techniques when you're too tired to concentrate. You're better off sleeping and coming back to it when you're fresh. It all makes sense after having a nights sleep! thank you for your more thorough explanation! :)  Here is my go at it: // discard empty values and unwanted keys $get = array_intersect_key(array_filter($_GET 'strlen') array_flip(array('location' 'color' 'hair'))); foreach ($get as $key => $value) { $get[$key] = $key . ' = ' . mysql_real_escape_string($value); } $sql .= ((count($get) == 0) ? null : ' WHERE ') . implode(' AND ' $get); I haven't tested it but it should work well. This also looks like a good method even less code but I accepted the answer above due to its in depth explanation Yes +1 but I used the more verbose code to show each step more clearly. Also it makes it easy to use a different subexpression for each input.",php sql database search
2797360,A,"DB Cursor fetching in Web Applications I never understood this: in web development whe[n|re] does it make sense to fetch results one by one? I mean why should I use PDOStatement->fetch*() when I can use PDOStatement->fetchAll()? http://stackoverflow.com/questions/2770630/pdofetchall-vs-pdofetch-in-a-loop fetchAll() will fetch all the results into one big array. With very large result sets it could exceed the PHP script's memory limit. A pure fetch() will fetch each record one by one neutralizing that danger. That's the only reason not to use fetchAll() I can think of. Sure but we usually don't emit SQL statements like `SELECT * FROM oneMillionRowsTable` without a limit clause at least I've never seen a query like that in web applications. @Alix neither have I but it is not entirely unthinkable to happen. I prefer the `fetch` variant out of a general sense of ""My PHP script's memory is more limited than that of the mySQL server"". It could be though that `fetchAll` is faster because it talks to the server only once - I don't know I've never measured it. Thanks Pekka. =)",php sql mysql pdo database
2362063,A,MySql 'Select' help I have some tables. These tables all have one column in common called 'classified_id':  main_table: cars_table: id (PK) => 4222 id (PK) => 1021 classified_id => 25 classified_id => 25 Now I want whenever a search is performed to compare if any of the main_table.classified_id matches any of the cars_table.classified_id (in this case). the cars_table may return no matches! the classified_id in every table is the only relation. I would never need to compare the cars_table.classified_id to main_table.classified_id but the other way around is what I need (main_table.classified_id=cars_table.classified_id). I don't know what type of Join to use... Any help? Left Join? Thanks Please state more clearly what you are trying to do. Do you want to get only rows from main_table that are also in cars_table? Or do you want to get all rows from main_table and get some additional info that the row is also in cars_table? no only rows that match in both tables on classified_id SELECT * FROM main_table LEFT JOIN cars_table ON main_table.classified_id = cars_table.classified_id Will return 1-?? copies of main_table rows depending on how many in cars_table that matches. If there is no match all values from cars_table will be NULL  I'm not quite sure what you're asking but assuming you're looking for all the records in main_table that match some condition and you'd like to bring along any records in the cars_table that have the same classified_id as any of the matching records in the main table even if there are no such records in the cars_table you should be using left join like so:  SELECT * FROM main_table AS M LEFT JOIN cars_table as C ON C.classified_id = M.classified_id WHERE f(M.foo) When there is an M record such that f(M.foo) evaluates to TRUE but no corresponding C record the M record will still appear in the result set but all the C fields will be NULL. A more thorough explanation of left outer joins (same thing as a left join) can be found here: http://en.wikipedia.org/wiki/Left_outer_join#Sample_tables You'll need to look at the sample data to make sense of the example they give for left outer join: http://en.wikipedia.org/wiki/Left_outer_join#Sample_tables  Yes it is a left join Something like SELECT * FROM main_table mt LEFT JOIN cars_table ct ON mt.classified_id = ct.classified_id Okay a short follow-up Q What would happen if I was to switch places of the variables around the 'equal' mark in your code so it would be 'ON ct.classified_id=mt.classified_id'? Would it matter? No that would not matter it is the LEFT JOIN and the tables that matter. pesar it won't mater because equality is a symmetric relation: http://en.wikipedia.org/wiki/Symmetric_relation,php sql mysql database
2467146,A,"Left Join 3 Tables and Show True or False on Empty Cells Ok this may be confusing so I hope I explain it correctly. I have 4 tables: business photos video category I want to display ""featured"" businesses on the home page (or elsewhere) and I want to show a Yes or No in the table row based upon whether or not there are photos or videos for that business. Example: Joes Crab Shack has no videos or photos but is featured. So when his row is echoed out it will show the Business Name and Business Owner but there will be no data in the photo or video cells thus in the video and photos column it will say No. Otherwise if the opposite was true it would say Yes. Here's my pastebin I'm thinking perhaps it might be better to have separate functions since on the individual business pages I will be listing photos and videos anyway. Maybe I'm making this harder then it needs to be? Since I will need to have functions that query for videos photos and specials anyway would it be possible to while the initial table is being displayed to check the db for the presence of these items? In other words when the row for Joes is being echoed a function runs to check for photos etc? But how would it know to check for Joes and not Bobs? SELECT b.busname  b.busowner  b.webaddress  IF (EXISTS (SELECT 1 FROM photos p WHERE p.busid = b.id) 'Yes' 'No') has_photo  IF (EXISTS (SELECT 1 FROM video v WHERE v.busid = b.id) 'Yes' 'No') has_video FROM business b WHERE b.featured = 1  Ok here is what I was able to do to solve the problem based upon suggestions from you guys: Model: function frontPageList() { $this->db->select('b.busname b.busowner b.webaddress p.photoname v.title'); $this->db->from ('business AS b'); $this->db->where('featured' '1'); $this->db->join('photos AS p' 'p.busid = b.id' 'left'); $this->db->join('video AS v' 'v.busid = b.id' 'left'); return $this->db->get(); } Control: function index() { $this->load->model('Business_model'); $data['featured'] = $this->Business_model->frontPageList(); $data['user_id'] = $this->tank_auth->get_user_id(); $data['username'] = $this->tank_auth->get_username(); $data['page_title'] = 'Welcome To Jerome - Largest Ghost Town in America'; $data['page'] = 'welcome_message'; // pass the actual view to use as a parameter $this->load->view('container'$data); } View: <table id=""businessTable""> <thead><tr><th>Business Name</th><th>Business Owner</th><th>Web</th><th>Photos</th><th>Videos</th></tr></thead> <?php foreach ($featured->result() as $row): ?> <tr> <td><?=$row->busname?></td> <td><?=$row->busowner?></td> <td><a href=""<?=$row->webaddress?>"">Visit Site</a></td> <td> <?php if(isset($row->photoname)):?> no <?php else:?> yes <?php endif?> </td> <td> <?php if(isset($row->title)):?> no <?php else:?> yes <?php endif?> </td> </tr> <?php endforeach; ?> </table>  You can cheat a little with something like this: SELECT b.[other stuff] (SELECT COUNT(1) FROM photos WHERE busid = b.id) AS photo_count (SELECT COUNT(1) FROM videos WHERE busid = b.id) AS video_count FROM business AS b [etc] photo_count & video_count will return 0 or greater than 0 - easy enough to get no/yes from in PHP. That would also stop the duplicate results you'd get from having more than 1 photo/video per business. Caveat!: converting that to the ORM you're using... I'm not sure an ORM would be okay with it. But if it's not barking over the ""AS"" aliasing in from() & join() maybe you can sneak the subqueries in select() without any problems. Would it make more sense to have a separate function that checks for photos or videos based upon the b.id? You mean in a PHP function? That might be cleaner but I doubt it would have a positive effect - one query is speedier than the same split into 3 if only because it's calling out to the DB once. ok just wondered. i'm having an issue with doing the select counts using activerecord. i wondered if maybe i was trying to do too much.  I'm going to take a stab at this. What I would do is when generating the table for display of ""featured"" businesses I would make a call to your database the one generally made when generating the photos and videos categories and check the output. If there is something there then have it say yes if the return from the database is null it's a safe assumption there aren't any photos or videos and thus you can print out a No. Your suggestion worked I posted an answer to the problem below but since it was your suggestion I'll give you the credit. @ Jason Shultz - Thanks.  I'm going to assume here that your photos and videos tables contain more than 1 record per business a ""one to many"" relationship. In this case you're going to need to rethink your approach or at least do some formatting of your database results. Currently if Joes crab shack has more than 1 videos and/or photos you're going to have multiple results for Joes crab shack. If you need photos/videos results you could format the results as you are receiving them now to create a multi dimensional array/object where $featured['videos'] or $featured['photos] would contain the results of your join if your formatted array doesn't contain the 'videos' key then you have no video results. If all you need to know is if it's returning more than 0 rows then create two new methods in your model to count videos and photos that belong to a specific business. Now it's just a matter of echo'ing 'Yes' if the methods return more than 0 rows or 'No' otherwise. Edit: Model function should look something like this function frontPageList() { $this->db->select('b.busname b.busowner b.webaddress'); $this->db->select('(SELECT COUNT(1) FROM photos WHERE busid = b.id) AS photo_count' FALSE); $this->db->select('(SELECT COUNT(1) FROM videos WHERE busid = b.id) AS video_count' FALSE); $this->db->from ('business AS b'); $this->db->where('featured' '1'); return $this->db->get(); } The query you have now is fine for displaying the business info you just need to format the results into a multi dimensional array before outputting it to your view. You're likely going to need a count function in your model at some point in your project you can create those now and use them or use the suggested nested query from tadamson. I'll edit my answer with an example of how to use the nested query with CI's Active Record Eventually what I want to do is have an individual business page where all the photos and videos will be listed. but on the list of buisnesses page I just want to show if they have things like photos or videos or specials/coupons. Would I be better off having separate functions one for showing the business info and then separate functions checking for photos and videos and specials and either showing yes or no in the list and showing the actual results on the business page?  Im assuming that the tables are set up sort of like this: Business Info Photos Videos ? You would create a unique ID for each business (autoincrement works nicely) and whenever a photo or video is uploaded for the business that record would be inserted into the respective tables with that ID attached to it (the ID column or whatever). Each table would allow multiple entries for the business (""one to many"" as Dyllon noted). So whenever you are displaying the featured business you would run a query against both the video and photo tables using the unique ID and look for returned rows. Rows = yes !rows = no. One question: Are you going to store the images in the db or file names and have them uploaded to a directory? The only other input that I would add to the above recommendations is to structure your tables so that there are never any null values in the tables themselves which may be the case seeing as you have four tables for this project already. I second the multi dimensional array/object method of storing and sorting through the returned data. A nice touch would be to use the PHP image functions to resize the first image returned as a thumbnail for the photos - you could also catch a frame for each video as well - so instead of yes or no we would seem thumbnails for both or a 'no images/video' slug. Not much but my $.02.",php sql database codeigniter
1081851,A,"MYSQL: Query to get previous and next video ID? I am developing a video website (PHP - MYSQL) just like youtube in which I want to provide the functionality of Next video and Previous video. Let's say I am currently on videoId: 234 so Next and Previous video links will point to videoId: 233 and 235 respecively. My table structure is as follows: videoId videoName videoURL IsActive ----------------------------------------------------- 1 Love world love-world 1 2 Hello world hellow-world 1 3 World news world-news 0 4 The web the-web 1 5 Google web google-web 1 6 Internet internet 1 IsActive a bool (01) type column is basically tells that video is viewable on website or not. If its 0 - notviewable and 1 - viewable Now there are two type of situations which I though are: When I am browsing through videoId: 4 then I want to run a query to get the the next and previous video id means 2 and 5 respectively 3 is not because it is disabled. Other condition would be When I am browsing through videoId: 1 then query should return only one record which is 2 because there is no previous record same in the case of last record. Please tell me how to make query for this? Thanks MAking a bunch of assumptions here but Consider what will happen if: A user views the ""Hello World"" video An admin(or who ever) marks ""The Web"" as inactive. that user clicks next. best query string : SELECT (SELECT MAX(`id`) FROM `table` WHERE `id` < `t`.`id`) as `_prev_id` (SELECT MIN(`id`) FROM `table` WHERE `id` > `t`.`id`) as `_next_id` FROM `table` `t` WHERE `t`.`id` = '1' LIMIT 1  I'd use  SELECT * FROM videos WHERE videoId > :id AND IsActive = 1 LIMIT 1 UNION SELECT * FROM videos WHERE videoId < :id AND IsActive = 1 LIMIT 1  Try this. Completely untested but this will give you a normal row with two additional columns 'nextID' and 'prevID'. If one of them is null then there isn't one. SELECT v.* n.id AS nextID p.id AS prevID FROM vedios v LEFT JOIN (SELECT vn.id FROM vedios vn WHERE vn.id > v.id AND isActive = 1 ORDER BY id ASC LIMIT 1) n LEFT JOIN (SELECT vp.id FROM vedios vp WHERE vp.id < v.id AND isActive = 1 ORDER BY id DESC LIMIT 1) p If you have any issues / errors with it let me know and I'll test it properly.  This will get the next one $stmt = $PDO->prepare(""SELECT * FROM vedios WHERE vedio > :id AND IsActive = 1"") $stmt->execute(array(""id"" => $id)); $all = $stmt->fetchAll(PDO::FETCH_ASSOC); And change > to < for previous. If count($all) return 0 then you don't have a next/previous video. Ok but is it possible to fetch both next and previous in two rows using a single query?  I think you could use something like: SELECT * FROM videos AS c WHERE (VideoId = (SELECT MAX(VideoId) FROM videos WHERE VideoId < c.VideoId AND IsActive = 1) OR VideoId = (SELECT MIN(VideoId) FROM videos WHERE VideoId > c.VideoId AND IsActive = 1))",php sql database mysql
3221721,A,Database migration through php I have a mysql database that I am trying to migrate into another database. THey have different schema's and I have written a php script for each table of the old database in order to populate its data in to the new one. The script works just fine but the problem is that it does not move all the data. for example if I have a table and all its info are being selected and then inserted into the new table but only half of them are done. The way I am doing it I am opening a database selecting * and puting it in an associative array. then I close the db connection and connect to the other one go through each element of the array and insert them in the new one. Is there a limit to how big an array could be? what is wrong here? How much data are there in these tables? 10 rows with 20 bytes per row; or more like 10M rows with 1KB per row? 1000000 rows with 0.5 KB per row * 20 tables You may be running into PHP's execution time or memory limits. Make sure the appropriate settings in php.ini are high enough to allow the script to finish executing. can you tell me what are the things I need to look for in there? @Shahin Kian: max_execution_time and max_memory are the two prime suspects. tnx I will do that with what 81403 suggested and i think it should work.  Why not do this via sql scripts? If you prefer to do it via php then you could open connections to both databases and insert to target as you read from source. That way you can avoid using too much memory. I had problem connecting to 2 databases at a time! plus how would I go about reading everything but 1 at a time? (selecting * from table 1 at a time?) you add parameter `LIMIT xy` to your query X being the first row to read and Y the number of row to read. Instead of a static X you use a PHP variable that increments itself in a `while` or `for` loop  Using php to do the transform/convert logic is a possibility. I would do it if you are doing complex transformations and if your php skills are much better thant your mysql skillset. If you need more memory in your php script use: memory_limit = 2048M max_execution_time = 3600 This will give you 2gigs of possible space for the array and about an hour for processing. But if your database is really this big it would much (really a lot) much faster to use: 1. mysqldump to make a dump of your source-server Check it here: http://dev.mysql.com/doc/refman/5.1/en/mysqldump.html 2. Upload the dumpfile and iport it. There are a bunch of example on the mysql documentation page. (Look also in the comments). After this you can transform your database through CREATE/SELECT-statements. CREATE TABLE one SELECT * FROM two; As an alternative you can use UPDATE-statements. What is best depends heavily on the kind of job that you are doing. Good luck!  First of all I don't see the point in writing a script to do this. Why don't you just get a SQL dump from phpMyAdmin and edit it so that it fits the other database? Or are they that different? But to reply on your question: my first thought would be like other people already said that the problem would be the time limit. Before you try to do something about this you should check the value of max_execution_time in php.ini (this is about 30 seconds most of the time) and how long it takes for the script to execute. If it terminates after roughly 30 seconds (or the value of max_execution_time if it's different) then it's likely that that's the problem although php should throw an error (or at least a warning). I don't think there's a limit on the size of an array in php. However there is a directive in php.ini namely memory_limit that defines the amount of memory a script can use. If you are have acces to your php.ini file I suggest setting both max_execution_time and memory_limit to a higher value. If you don't have acces to php.ini you won't be able to change the memory_limit directive. You will have to work your way around this for example by using LIMIT in your SQL. Be sure to unset your used variables or you could run in to the same problem.  It would be preferable to do a mysql dump at the command line: mysqldump -a -u USER_NAME -p SOURCE_DATABASE_NAME > DATA.mysql You can also gzip the file to make it smaller for transfer to another server: gzip DATA.mysql After transfer unzip the file: gunzip -f DATA.mysql.gz And import it: mysql -u USER_NAME -p TARGET_DATABASE_NAME < DATA.sql  You should read the rows from the first database in chunks (of 1000 rows for example) write those rows to the second database clean the array (with unset() or an empty array) and repeat the process until you read all the rows. This overcomes the memory limitations. Another problem might be that the script is running for too long (if the table is too large) so try using the function set_time_limit(). This function resets the timeout for a script after which it should be terminated. I suggest calling it after processing each chunk. thank you I will let you know how it works thanks alot it helped out alot!  You may have constraints in the target database that are rejecting some of your attempted inserts. +1 because this is what really happens without any dramatic error messages. Check your FKs. And remember there are no FKs on a MyIsam table....  Your server (as all server do) will have a memory limit for PHP - if you use more than the assigned limit then the script will fail. Is it possible to just Dump the current MySQL Database into text files perform find-and-replaces or RegExp-based replacements to change the schemas within the text files and then reload the amended test files into MySQL to complete the change? If this is a one-off migration then it may be a better way to do it. that seems like a hassle but thanks for the info,php sql mysql database relational-database
3931575,A,Sync large local DB with server DB (MySQL) I need to weekly sync a large (3GB+ / 40+ tables) local MySQL database to a server database. The two databases are exactly the same. The local DB is constantly updated and every week or so the server DB need to be updated with the local data. You can call it 'mirrored DB' or 'master/master' but I'm not sure if this is correct. Right now the DB only exist locally. So: 1) First I need to copy the DB from local to server. With PHPMyAdmin export/import is impossible because of the DB size and PHPMyAdmin limits. Exporting the DB to a gzipped file and uploading it through FTP probably will break in the middle of the transfer because of connection to the server problems or because of the server file size limit. Exporting each table separately will be a pain and the size of each table will also be very big. So what is the better solution for this? 2) After the local DB us fully uploaded to the server I need to weekly update the server DB. What the better way to doing it? I never worked with this kind of scenario I don't know the different ways for achieving this and I'm not precisely strong with SQL so please explain yourself as good as possible. Thank you very much. This article should get you started. Basically get Maatkit and use the sync tools in there to perform a master-master-synchronization:  mk-table-sync --synctomaster h=serverNameD=databaseNamet=tableName  You can use a DataComparer for mysql. Customize the template synchronization which specify the data which tables to synchronize. Schedule a weekly update on the template. I have 2 servers daily synchronized with dbForge Data Comparer via command line.,php sql mysql database
1746007,A,How does Doctrine handle changes to the database schema? In brief what happens when you add a column to a table? What happens when you remove one? In more details suppose you have the following: class User extends Doctrine_Record { public function setTableDefinition() { $this->hasColumn('username' 'string' 255); $this->hasColumn('password' 'string' 255); } } What happens when you add the following line to the setTableDefinition function? $this->hasColumn('firstname' 'string' 255); What happens when you delete the following line from the setTableDefinition function? $this->hasColumn('password' 'string' 255); You'd want to have a look at Doctrine migrations that allows you to The Doctrine migration package allows you to easily update your production databases through a nice programmatic interface. The changes are done in a way so that your database is versioned and you can walk backwards and forwards through the database versions. That will allow you to perform changes to your database without screwing up your data. Just what I was looking for. Thank you.,php sql database schema doctrine
3539529,A,"Tips on writing SQL for multiple databases Different databases have differences in SQL support & implementation. Sometimes there is a difference in SQL syntax sometimes support for some SQL commands is missing sometimes the database has a feature that other databases do not have. What are considered to be good practices in writing SQL queries that are good for different databases (MySQL PostgreSQL Oracle MSSQL SQLite) taking in account that the developer uses a framework (like CakePHP Codeigniter Zend etc.) that provides a database abstraction layer? What SQL syntax should the developer try to avoid? Sometimes ORMs do not handle the query correctly. F.ex. `FULL JOIN` in MySQL `RIGHT JOIN` in SQLite. I mean the syntax of the query is good but the database does not support that. That's what ORMs are there for. As quantumSoup alluded to just don't. If you take a look at each of the frameworks you listed you'll notice that they all use ORM or some kind of database abstraction layer for inserting/extracting data. This allows you to write db-neutral code that works irrespective to the desired data source. The ORM then uses the correct data source ""drivers"" to convert your intentions into commands understood by each data source. So the trick is 1.) defining a universal interface for your ORM or database abstraction layer; and then 2.) writing the appropriate drivers for the ORM. Then each time you want to use a new type of data source (including flat files or CSV) it's a simple matter of adding a new driver. Sometimes I can create queries with syntax that is not supported by currently used database. F.ex. `FULL JOIN` in MySQL. I was able to create the query that passed through DB abstraction layer and that was looking okay. But the current database did not support that syntax.  ""Cautiously use ANSI SQL"" is the most direct answer to your question. However keep in mind these words from Jeremy Zawodny especially: Good engineers try to select the best tools for the job and then do everything they can to take advantage of their tool's unique and most powerful features. In the database world that means specific hints indexing data types and even table structure decisions. If you truly limit yourself to the subset of features that is common across all major RDBMSes you're doing yourself and your clients a huge disservice. What people are really looking for with ORM is a non-relational data store that can be easily transformed into programming language data structures (e.g. Ruby objects). If you need this you might want to examine one of the many ""NoSQL"" options out there (MongoDB CouchDB are two of the more mature ones). In practice you are probably better off to pick a particular DBMS and then freely use any proprietary features that strike your fancy. Of course this isn't always possible like if you're trying to write a package to be sold to people whose DBMS choices you can't control (or you don't want to limit your market).  You can use an ORM for example which will essentially abstract away the details from each database. Although you have to make sure your ORM supports all the databases needed. Doctrine and Propel are good friends of php. Check either out. If you cannot find an ORM that supports all your DB's then perhaps find one that covers most and extend php to handle the last. Although I doubt this will be the case.  Then you dig into using ORM you'll find that for complex queries - it doesn't perform. It's hard enough for people to write SQL that performs well - I don't expect a DB abstraction layer fair any better. Most ORMs support native stored procedures... which defeats the purpose of using ORM. ANSI SQL is striving to make SQL more portable amongst databases but adoption varies from vendor to vendor. And ANSI syntax doesn't necessarily mean it performs as well as native syntax (IE: COALESCE vs native ISNULL/IFNULL/NVL/etc). The reality is for getting the best performing database interaction you need to write custom code for each vendor involved. Some would use this as a point to why the database should be nothing more than basic persistence because it's easier to maintain a central application. But this pales when you deal with high usage applications who suffer because of multiple trips between the application and the database poor data typing and table design. Frankly it's a waste of a database... I completely agree. An abstraction layer will only ensure that your application runs equally slow on all DBMS  You are looking for Object-relational mapping (ORM). Object-relational mapping (ORM O/RM and O/R mapping) in computer software is a programming technique for converting data between incompatible type systems in object-oriented programming languages. This creates in effect a ""virtual object database"" that can be used from within the programming language. You can go for famous Doctrine out there. Also have a look at: Getting Started with ORM in PHP I thought ORM is implemented in those frameworks.",php sql database frameworks
3595976,A,"Backup MySql database with PHP I have a pretty large db in MySql and I need to take backups of it every day or so. I need to be able to take backups from any computer so therefore I thought about making a php script to do this and put this php script online (offcourse with password protection and authorization etc so that only I can access it). I wonder however how is this done properly? What commands should I use and is it possible to change settings of the backup (for instance Add AUTO_INCREMENT value = true)? I would appreciate examples... Also if this is a bad method (unsafe or maybe gives bad backups with bad sql files) what other method would be preferred? I have shell-access and I have a VPS (ubuntu server). My Mysql version is 5.1 Thanks There's no need to involve PHP in the database backup. You just need a script that uses mysqldump to backup the database and setup a CRON job to periodically execute the script: mysqldump db_name > backup-file.sql ...will backup your database to a file by redirecting the output from the mysqldump to the specified file name. Peter brought up a good point that the command would only give you one day of archiving--any archive over two days old would be overwritten. This would allow you have a rolling log going back seven days: CURRENT_DAY_OF_WEEK=`date '+%u'` FILENAME=""mysqlbackup_""$CURRENT_DAY_OF_WEEK"".sql"" mysqldump db_name > $FILENAME Also be aware that file permissions will apply - can't write a file if the user executing the script doesn't have permissions to the folder. Of course you probably shouldn't over write the same file every day. Maybe tack on the current date to the file name or some such.... @Peter Ajtai: Goood point updated. Don't send a PHP to do a cron mans job  I agree with OMG Ponies mysqldump + script is the way to go. The only other option that I use is to set up a slave server. This provides an almost instant backup against hardware failure and can be located in a different building to your main server. Unless you have a large number of writes to the database you don't necessarily need a very powerful server as it is not processing queries only database updates.",php sql mysql database backup
3611726,A,"Insert User Data to Database with INSERT statement From a user form: I am trying to insert the following data: 1) First Name 2) Last Name 3) Major 4) Graduation Year I am able to connect to the database and select the database I need--but I am unable to insert the data from the form. I am able to create records but the data is not being saved to the database. Basically right now I'm creating blank forms. The variable $uInput holds the user data. I tried passing $uInput into the function doAction() but I believe that is where the problem is. I'm trying to figure out how to pass the user data into the function doAction().  <?php //Call function mainline mainline(); // Declare the function mainline function mainline() { $uInput = getUserInput(); $connectDb = openConnect(); // Open Database Connection selectDb($connectDb); // Select Database doAction($uInput); //closeConnect(); //display(); } //Declare function getUserInput ------------------------------------------------------------------------------------ function getUserInput() { echo ""In the function getUserInput()"" . ""<br/>""; // Variables of User Input $idnum = $_POST[""idnum""]; // id (NOTE: auto increments in database) $fname = $_POST[""fname""]; // first name $lname = $_POST[""lname""]; // last name $major = $_POST[""major""]; // major $year = $_POST[""year""]; // year $action = $_POST[""action""]; // action (select insert update delete) $userInput = array($idnum $fname $lname $major $year $action); //echo ""info from getUserInput: "" . $action; return $userInput; } function doAction($pUserInput) { // if user selects INSERT from dropdown menu then call function insert //and pass $uInput if ($pUserInput[5] == ""ins"") { insert($uInput); } } // Create a database connection -------------------------------------------------------- function openConnect() { $connection = mysql_connect(""localhost"" ""root_user"" ""password""); echo ""Opened Connection!"" . ""<br/>""; if(!$connection) { die(""Database connection failed: "" . mysql_error()); } return $connection; } // Select a database to ---------------------------------------------------------------- function selectDb($pConnectDb) { $dbSelect = mysql_select_db(""School"" $pConnectDb); if(!$dbSelect) { die(""Database selection failed: "" . mysql_error()); } else { echo ""You are in the School database! <br/>""; } } // function insert --------------------------------------------------------------------- function insert($pUInput) { $sql=""INSERT INTO tblStudents (first_name last_name major year) VALUES ('$pUInput[1]''$pUInput[2]''$pUInput[3]' '$pUInput[4]')""; if (!mysql_query($sql)) { die('Error: ' . mysql_error()); } echo ""1 record added""; } ?> everything looks cool when you print_r($pUInput)? Change insert($uInput); function to insert($pUserInput);  Your doAction() function is buggy. You are taking the parameter into the function as $pUserInput but sending to the insert() function as $uInput. You should do it like this: function doAction($pUserInput) { // if user selects INSERT from dropdown menu then call function insert //and pass $uInput if ($pUserInput[5] == ""ins"") { insert($pUserInput); // <-- FIXED: Not using correct parameter. } } Ah! just noticed that! thanks I knew it had something to do how the variable was being passed. 1 record added: not blank! / hmm but the year in the database is 0000-00-00. looks like i'm dealing with a different issue. the user chooses a year from a dropdown menu (ie. 2010 2011 2012 etc...etc...) @crewof1 please post a separate question for that. no prob just trying to see if i can figure it out first :)",php sql database forms
3011224,A,"How to design a generic database whose layout may change over time? Here's a tricky one - how do I programatically create and interrogate a database whose contents I can't really foresee? I am implementing a generic input form system. The user can create PHP forms with a WYSIWYG layout and use them for any purpose he wishes. He can also query the input. So we have three stages: a form is designed and generated. This is a one-off procedure although the form can be edited later. This designs the database. someone or several people make use of the form - say for daily sales reports stock keeping payroll etc. Their input to the forms is written to the database. others maybe management can query the database and generate reports. Since these forms are generic I can't predict the database structure - other than to say that it will reflect HTML form fields and consist of a the data input from collection of edit boxes memos radio buttons and the like. Questions and remarks: A) how can I best structure the database in terms of tables and columns? What about primary keys? My first thought was to use the control name to identify each column then I realized that the user can edit the form and rename so that maybe ""name"" becomes ""employee"" or ""wages"" becomes "":salary"". I am leaning towards a unique number for each. B) how best to key the rows? I was thinking of a timestamp to allow me to query and a column for the row Id from A) C) I have to handle column rename/insert/delete. Foe deletion I am unsure whether to delete the data from the database. Even if the user is not inputting it from the form any more he may wish to query what was previously entered. Or there may be some legal requirements to retain the data. Any gotchas in column rename/insert/delete? D) For the querying I can have my PHP interrogate the database to get column names and generate a form with a list where each entry has a database column name a checkbox to say if it should be used in the query and based on column type some selection criteria. That ought to be enough to build searches like ""position = 'senior salesman' and salary > 50k"". E) I probably have to generate some fancy charts - graphs histograms pie charts etc for query results of numerical data over time. I need to find some good FOSS PHP for this. F) What else have I forgotten? This all seems very tricky to me but I am database n00b - maybe it is simple to you gurus? Edit: please don't tell me not to do it. I don't have any choice :-( Edit: in real life I don't expect column rename/insert/delete to be frequent. However it is possible that after running for a few months a change to the database might be required. I am sure this happens regularly. I fear that I have worded this question badly and that people think that changes will be made willy-nilly every 10 minutes or so. Realistically my users will define a database when they lay out the form. They might get it right first time and never change it - especially if they are converting from paper forms. Even if they do decide to change this might only happen once or twice ever after months or years - and that can happen in any database. I don't think that I have a special case here nor that we should be concentrating on change. Perhaps better to concentrate on linkage - what's a good primary key scheme? Say perhaps for one text input one numerical and a memo? Even though you don't have a choice in the matter it may help to know what you're getting into and that is a case of Inner-Platform Effect (http://en.wikipedia.org/wiki/Inner-platform_effect). You're essentially making a meta-system to enable users to do the work that a programmer should be doing. Best of luck with that. :) If this project is successfull there'll be no need for anything else? This is for A) & B) and is not something I have done but thought it was an interesting idea that Reddit put to use see this link (look at Lesson 3): http://highscalability.com/blog/2010/5/17/7-lessons-learned-while-building-reddit-to-270-million-page.html That may work great for low-importance social bookmarking type apps but for a payroll app it would be a complete disaster. Thanks both +1 Since I don't seem to have explained my question well I will look into this & see if it is useful. You also note that any mention about reports or analysis against the Reddit database are suspiciously omitted.  Like Thomas said rational database is not good at your problem. However you may want to take a look at NoSQL dbs like MongoDB. +1 thanks but it has to be ODBC compliant  In essence you are asking how to build an application without specifications. Relational databases were not designed so that you can do this effectively. The common approach to this problem is an Entity-Attribute-Value design and for the type of system in which you want to use it the odds of failure are nearly 100%. It makes no sense for example that the column called ""Name"" could become ""Salary"". How would a report where you want the total salary work if the salary values could have ""Fred"" ""Bob"" 100K 1000 ""a lot""? Databases were not designed to let anyone put anything anywhere. Successful database schemas require structure which means effort with respect to specifications on what needs to be stored and why. Therefore to answer your question I would rethink the problem. The entire approach of trying to make an app that can store anything in the universe is not a recipe for success. @mawg - Then it sounds like management wants the same type of application mentioned in the article link I provided in an earlier post. It would make a good case study read for them to understand why such a system is untenable and more importantly unprofitable. If I were you I run as fast as I can from this disaster project. ""asking how to build an application without specifications"". Well the app has specs. And the db will too when the input form is generated that defines the database. ""It makes no sense for example that the column called ""Name"" could become ""Salary"". That does seem unlikely; my examples are more realistic but of course I can't prevent the user for doing stupid things. That is why the column name cannot be the primary key. But I don't think it unreasonable for someone to decide to rename an input field on a form. +1 for taking the time to reply Thanks please see edit at end of original question. Thanks. @mawg - You are lacking specifications about the most critical piece of any database driven application: the data itself. Where it will really unravel is reporting. In essence you will need to ask for the schema before you can build the data that will drive a report. Storage is only a small part of the puzzle. What will kill the project is performance and maintenance. Here is a great article about one guy's experience with an EAV and note the great analogy he uses. http://www.simple-talk.com/opinion/opinion-pieces/bad-carma/ @mawg - If changes to the schema are expected to be infrequent why can't specifications be gathered ahead of time? It would be far better and cheaper to build a normalized database with standard columns. In fact it would be cheaper to custom build three different databases than to build one EAV to rule them all to store all three system's information. + for asking but ""if changes to the schema are expected to be infrequent why can't specifications be gathered ahead of time?"" because I am ordered to build a form generator that can be sold to hundreds maybe thousands of customers & enable them to design their own input forms and yes I did ask if we could create the forms & database for them and was told no.  See this article: http://www.simple-talk.com/opinion/opinion-pieces/bad-carma/ for someone else's experience of your problem. great link thanks for bringing it to my attention.  I agree with Mark using others experience can prevent many unforeseen mistakes especially for "" database n00b "" see this article from a guy working at a company that specializing in generic back end  Not sure about the database but for charts instead of using PHP for the charts I recommend looking into using javascript (http://www.reynoldsftw.com/2009/02/6-jquery-chart-plugins-reviewed/). Advantages to this are some of the processing is offloaded to the client side for chart displays and they can be interactive. Thanks. I am generally wary of client-side stuff as it can be turned off hackedetc but I will look into this.  ""This all seems very tricky to me but I am database n00b - maybe it is simple to you gurus?"" Nope it really is tricky. Fundamentally what you're describing is not a database application it is a database application builder. In fact it sounds as if you want to code something like Google App Engine or a web version of MS Access. Writing such a tool will take a lot of time and expertise. Google has implemented flexible schemas by using its BigTable platform. It allows you to flex the schema pretty much at will. The catch is this flexibility makes it very hard to write queries like ""position = 'senior salesman' and salary > 50k"". So I don't think the NoSQL approach is what you need. You want to build an application which generates and maintains RDBMS schemas. This means you need to design a metadata repository from which you can generate dynamic SQL to build and change the users' schemas and also generate the front end. Things your metadata schema needs to store For schema generation: foreign key relationships (an EMPLOYEE works in a DEPARTMENT) unique business keys (there can be only one DEPARTMENT called ""Sales"") reference data (permitted values of EMPLOYEE.POSITION) column data type size etc whether column is optional (i.e NULL or NOT NULL) complex business rules (employee bonuses cannot exceed 15% of their salary) default value for columns For front-end generation display names or labels (""Wages"" ""Salary"") widget (drop down list pop-up calendar) hidden fields derived fields help text tips client-side validation (associated JavaScript etc) That last points to the potential complexity in your proposal: a regular form designer like Joe Soap is not going to be able to formulate the JS to (say) validate that an input value is between X and Y so you're going to have to derive it using templated rules. These are by no means exhaustive lists it's just off the top of my head. For primary keys I suggest you use a column of GUID datatype. Timestamps aren't guaranteed to be unique although if you run your database on an OS which goes to six places (i.e. not Windows) it's unlikely you'll get clashes. last word 'My first thought was to use the control name to identify each column then I realized that the user can edit the form and rename so that maybe ""name"" becomes ""employee"" or ""wages"" becomes "":salary"". I am leaning towards a unique number for each.' I have built database schema generators before. They are hard going. One thing which can be tough is debugging the dynamic SQL. So make it easier on yourself: use real names for tables and columns. Just because the app user now wants to see a form titled HEADCOUNT it doesn't mean you have to rename the EMPLOYEES table. Hence the need to separate the displayed label from the schema object name. Otherwise you'll find yourself trying to figure out why this generated SQL statement failed: update table_11123 set col_55542 = 'HERRING' where col_55569 = 'Bootle' / That way madness lies. +1 Thanks for some great inpute specially the last word  The other respondents are correct that you should be very cautious with this approach because it is more complex and less performant than the traditional relational model - but I've done this type of thing to accommodate departmental differences at work and it worked fine for the amount of use it got. Basically I set it up like this first - a table to store some information about the Form the user wants to create (obviously adjust as you need): --************************************************************************ -- Create the User_forms table --************************************************************************ create table User_forms ( form_id integer identity name varchar(200) status varchar(1) author varchar(50) last_modifiedby varchar(50) create_date datetime modified_date datetime ) Then a table to define the fields to be presented on the form including any limits and the order and page they are to be presented (my app presented the fields as a multi-page wizard type of flow). - -************************************************************************ -- Create the field configuration table to hold the entry field configuration --************************************************************************ create table field_configuration ( field_id integer identity form_id SMALLINT status varchar(1) fieldgroup varchar(20) fieldpage integer fieldseq integer fieldname varchar(40) fieldwidth integer description varchar(50) minlength integer maxlength integer maxval varchar(13) minval varchar(13) valid_varchars varchar(20) empty_ok varchar(1) all_caps varchar(1) value_list varchar(200) ddl_queryfile varchar(100) allownewentry varchar(1) query_params varchar(50) value_default varchar(20) ); Then my perl code would loop through the fields in order for page 1 and put them on the ""wizard form"" ... and the ""next"" button would present the page 2 fields in order etc. I had javascript functions to enforce the limits specified for each field as well ... Then a table to hold the values entered by the users: --************************************************************************ -- Field to contain the values --************************************************************************ create table form_field_values ( session_Id integer identity form_id integer field_id integer value varchar(MAX) ); That would be a good starting point for what you want to do but keep an eye on performance as it can really slow down any reports if they add 1000 custom fields. :-) It is not that the system does not fit within developers' mentality it is that the schema does not fit within the primary designs of a relational model. The effect of that is that reporting or querying against the data i.e. getting information from your data is a bear and performs poorly. Now if you never have to report against the data that is entirely different. +1 Ron this may well get awarded the answer. I really don't see the problem (maybe because I am a n00b) and suspect that I am just explaining it badly. It's not so much of a problem - just that most ""run time configurable"" type of systems don't fit into a lot of developers object/data model mentality. As with any type of system there are trade-offs. :-)",php sql database database-design dynamic-sql
3750707,A,"""disable"" some MySql records so they are not returned when searching? I have a mysql database which I support using phpMyAdmin. The website this is for is a classifieds website. The issue here is that whenever a new classified is posted (and inserted into mysql database) I need to first review it manually. My question is is there anyway to tell mysql that ""this record is inactive so don't return it""? I know of one way offcourse to add a column named ""state"" and change it to ""active"" for all classifieds which I want active. But is there any other method built into mysql which does the same? In other words I dont want the record returned when users search the website if the record isn't ""reviewed"" first by me. EDIT: I know of the WHERE clause that is not my Q here. Is there any other method built into phpMyAdmin? Thanks No there is no built-in method. Beside of methods mentioned above you could try using views to filter inactive records. Instead of: SELECT * FROM table WHERE status = 'active'; use a view: CREATE VIEW only_active AS SELECT * FROM table WHERE status = 'active'; and then just SELECT * FROM only_active That makes you sure that you will never get inactive records incidentally.  Have a reviewed column in the table of type BOOLEAN. Initialize it to false and update to true once a listing has been reviewed. Whenever you get the list of classifieds for the site include reviewed=true in the WHERE clause. There is no way built into phpMyAdmin.  There really isn't a way to achieve this without having some sort of DB field that tells you which records you've reviewed and which you haven't. So the only sensible answer you're going to get is ""add a state field"". The question really is why you don't want to do it that way? (especially if you already know how to do it). If you can answer that you may get some useful help help with solving the problems you perceive the obvious answer may cause you.  On a row level there are no properties other then ones you specify yourself. So the answer is definitively no. Using views as Piotr described might be useful to you; especially if you reverse the situation and rename the original table create a view in it's name that will return only 'reviewed' records This way the solution might be transparent to your application. Few notes: The database does not care if myphpadmin or any other client/application is looking at the data all clients are essentially equal; so the implication is that what you ask can not be possible (otherwise how would this hiding mechanism determine if it should display the rows or hide them?). There is a semi exception though - RDBMS that support row-level security could do this (but effectively such system store additional attribute per row) EDIT: Forgot to link http://www.sqlmaestro.com/resources/all/row_level_security_mysql/ This gives some examples and details.  I know of the WHERE clause that is not my Q here. Is there any other method built into phpMyAdmin? no it's not. your should realy use a ""state"" column to get what you want. Using a new column 'state' or 'reviewed' will also give you more flexibility in the future. You'll be able to alter the column state to inactive at a later date (eg programmatically when the classified expires after a certain date) or maybe if the ad causes problems in any form you can quickly disable it.  If you are using the ORM Doctrine you can use the SoftDelete behavior which does exactly the thing you want. You can build query's and the ""SoftDeleted"" records do not return. You should be using Doctrine for it though. If you can not go with Doctrine I would use Piotr Pankowski's solution. The only thing is that I would use a DateTime field and not an Boolean field. Set the field to the current DateTime when it's added and NULL when it's not disabled.",php sql mysql html database
3151941,A,Tricky SQL for a smart search I am using a form through a PHP CMS system that defines custom fields and such. One of the custom fields allows for an input field which does a smart search. What this means is that when you start typing it shows the records that match quite similar to google suggest. The smartsearch input field relies on a stored mysql search and this is what I am having trouble with because it just looks too complex. I am going to paste the SQl from an existing search and then explain what I am trying to do. There are different sql queries in a few columns as follows: fromclause ((`clients` INNER JOIN `addresstorecord` ON `clients`.`uuid` = `addresstorecord`.`recordid` AND `addresstorecord`.`tabledefid`='tbld:6d290174-8b73-e199-fe6c-bcf3d4b61083' AND addresstorecord.primary='1') INNER JOIN `addresses` ON `addresstorecord`.`addressid` = `addresses`.`uuid`) displayfield: IF(clients.company != '' CONCAT(clients.company IF(clients.lastname != '' OR clients.firstname != '' CONCAT(' (' IF(clients.lastname != '' clients.lastname '{blank}') ' ' IF(clients.firstname != '' clients.firstname '{blank}') ')') '') ) IF(clients.lastname != '' OR clients.firstname != '' CONCAT(IF(clients.lastname != '' clients.lastname '{blank}') ' ' IF(clients.firstname != '' clients.firstname '{blank}')) '')) ) secondaryfield: IF(addresses.city != '' OR addresses.state !='' OR addresses.postalcode != '' CONCAT(IF(addresses.city != '' addresses.city '') ' ' IF(addresses.state != '' addresses.state '') ' ' IF(addresses.postalcode != '' addresses.postalcode '')) 'unspecified location') classfield clients.type searchfields clients.company clients.firstname clients.lastname filterclause clients.inactive=0 I am having trouble understanding how these queries actually work. displayfield and secondaryfield in particular seem very redundant. i don´t think my needs are so different from how the current example smartsearch field works...just instead of clients i want guests and instead of address i just want it to match firstname lastname or passport number. I wonder if I even need secondaryfield in that case? In particular the inner join in the fromclause confuses me as I don´t think I need to do that as all the guest information is in one table... Any assistance here is much appreciated thankyou. how would I do that? I don´t think I can...I think the smartsearch field does different queries depending on what is typed.... could you provide the entire query as a block so we can see what's actually being queried from the DB? I reformatted your code samples with some indenting so it's easier to read. They were very long and scrolling horizontally it's hard to tell what's going on. Something like this appears to do nothing: IF(addresses.state != '' addresses.state '') I would guess it was written by someone who didn't understand how NULL works in SQL or someone who is accustomed to Oracle where NULL and '' are equivalent. Displayfield and secondaryfield have different content. Displayfield shows the person's company and name whereas secondaryfield shows the person's address state and postal code. These are not redundant. The complexity comes from trying to handle blank or unspecified content. Thankyou for the reformatting. The code definitely does work and was designed to work with MySQL. I think it has something to do with that since it is a smartsearch what I have posted is not the entire query rather the query would be made from part of what I have poested and part of what I type in the field as I type it. Unfortunately I am having trouble finding any documentation and figuring this out and am working somewhat blind. Would you have any suggestions on how I can figure out what queries are actually being made to the database? Can mysql be configured to log all queries? I agree some unecesary complexity could be avoided using `IFNULL(addresses.city ''` instead of `IF(addresses.city != '' addresses.city '')` for example. @Jacob: I think you're right probably the smartsearch system uses and modify these parts of queries to build one based on the answers/choices on the form. this is why there are so many options that seems unecessary. They may be used depending on the choices for the search. To log mysql queries you can insert in `/etc/my.cnf`: `[mysqld]` section: `log=/tmp/mysql.log` mysql needs rights to create and write to the file. Make it only readable to mysql as it will log ALL queries including passwords and to use it only during developing debugging as it will become very big quickly +1 to @laurent-rpnet. You can read more about MySQL logging here: http://dev.mysql.com/doc/refman/5.1/en/server-logs.html,php sql mysql database
2226932,A,"MySql cache problems... some questions First of all I am using PhpMyAdmin is this okay or not? Because when I have cache disabled and do two queries after eachother the second query always is faster so I am thinking maybe there is an internal cache on PhpMyAdmin? Secondly is there any way to get the time of how long a query takes into php and echo it onto the browser? (so I can use php instead of phpMyAdmin) Thirdly SHOW STATUS LIKE '%qcache%' gives me this: Qcache_free_blocks 1 Qcache_free_memory 25154096 Qcache_hits 0 Qcache_inserts 2 Qcache_lowmem_prunes 0 Qcache_not_cached 62 Qcache_queries_in_cache 2 Qcache_total_blocks 6 How come Qcache_not_cached grows by a number of 5 or 10 for every query I make? Shouldn't there only be 1 increase per query? Also when I enabled the cache and did a query the Qcache_queries_in_cache got increased by 2... I thought it would be increased by 1 per every query explain someone? THEN when I did another query the same as the one I cached there was no performance gain at all the query took as long as without the cache enabled... Any help here please except for referring to the manual (I have read it already). Thanks UPDATE Here is a typical query I make:  SELECT * FROM `langlinks` WHERE ll_title='Africa' PhpMyAdmin do query and update status from the mysql server so you won't see it increment by one in phpmyadmin  First of all I am using PhpMyAdmin is this okay or not? I suppose it's better than nothing -- and more user-friendly than a command-line client ; but a thing I don't like with phpMyAdmin is that it sends queries you didn't write. I've already seen phpMyAdmin send some queries that were ""hurting"" a server while the one that had been written by the user was OK for instance (I don't have the exact example in mind). Generally speaking though I'd say it's ""ok"" as long as you accept that more requests will be sent : phpMyAdmin displays lots of informations (like the list of databases tables and so on) and has to get those informations from somewehre ! Shouldn't there only be 1 increase per query? If you really want to see the impact of your query and no other you'd probably better use the command-line mysql client instead of phpMyAdmin : that graphical tool has to send queries to get the informations it displays. The question actually is : do you prefer a user-friendly tool ? Or do you want to monitor only what your query actually does ? In most cases the answer is ""user-friendly tool"" -- and that's why phpMyAdmin has so much success ;-)",php sql mysql database caching
2147346,A,"Could somebody explain SOLR requestHandlers and responseWriters in detail? Firstly many parts of the solr wiki is not very useful for somebody who just learned how to index and search fields. It seems it is written for experts! It uses terms that is RELATIVE to solr so it's very difficult to understand it without reading it several times over. NOTE: I have a classifieds website where the most recent ads always shows up first so sorting is not relevant for me except for sorting on price and date no other options are available for the users and also how many results per page. I know a requestHandler is a way to ""do some stuff to the query"" right? But how to know which handler to use is hard for me. And how to configure one also. All I know is the handler is specified in the query-string like ""qt=my_handler"". Also the same questions apply to responseWriters which to use? How to configure? What else should I know about these handlers? How is a good and effective way to use them? I really should write something up about getting solr implemented into a PHP website after I learned all these things. Thanks for all your help! In Solr a RequestHandler is essentially a plugin (module of logic) that handles incoming requests in a particular way. Rather than ""doing"" some stuff to the actually search query request handlers can provide functionality beyond queries like for example data import. Normally request handlers in Solr are configured to be specific endpoints (i.e. URL's) and not selected through the qt parameter. However search specific handlers may use the query type parameter to handle a query in a specific way (i.e. one handler may be able to deal with various query types). What handler to use will normally depend on what you want to achieve. I would suggest that you check out the list of provided handlers and match their descriptions (many have Wiki pages) to what you want to do. For queries other than the default SearchHandler the most commonly used request handler is the DisMaxRequestHandler (qt=dismax) that will essentially provide a search across several fields using different weighting based on field significance. This is often referred to by people as ""Google like"" searching. Also you may be interested in looking at the MoreLikeThisHandler that was designed to provide hits that are similar to a specific document (for example from a previous search result). Note that as a source of confusion the DisMaxRequestHandler in newer versions of Solr is actually provided by the default SearchHandler with a query type of dismax. Handlers are configured in solrconfig.xml: <requestHandler name=""dismax"" class=""solr.SearchHandler"" > <lst name=""defaults""> <str name=""defType"">dismax</str> <str name=""echoParams"">explicit</str> <float name=""tie"">0.01</float> <str name=""qf""> id^10.0 keyword^1.5 title^1.0 region^0.5 country^0.5 city^0.5 </str> <str name=""pf""> keyword^1.5 title^1.0 region^0.5 country^0.5 city^0.5 </str> <str name=""bf""> </str> <str name=""mm""> 2&lt;-1 5&lt;-2 6&lt;90% </str> <int name=""ps"">100</int> <str name=""q.alt"">*:*</str> <!-- example highlighter config enable per-query with hl=true --> <str name=""hl.fl"">text features name</str> <!-- for this field we want no fragmenting just highlighting --> <str name=""f.name.hl.fragsize"">0</str> <!-- instructs Solr to return the field itself if no query terms are found --> <str name=""f.name.hl.alternateField"">name</str> <str name=""f.text.hl.fragmenter"">regex</str> <!-- defined below --> </lst> In this case qf are the fields and boosts to apply for each field. The above configuration will search across id keyword title region country and city. Check out the corresponding Wiki page for more info (DisMaxRequestHandler applies). The most effective way to use them is certainly to first know what exactly you want to achieve then find the best match in terms of the handler and then subsequently tune the configuration to provide the results you and your community would expect. Response writers are plugins (modules of logic) that will provide the ways and means to write responses in specific formats. Currently this concept applies mainly to searches where you will be dealing with derivatives of the QueryResponseWriter which in turn will be selected by the response format parameter wt (in the query). If you are working with PHP then you will certainly be interested in generating PHP friendly responses to your requests using wt=php or wt=phps. The php response can be evaled: $code = file_get_contents('http://localhost:8983/solr/select?q=iPod&wt=php'); eval(""\$result = "" . $code . "";""); print_r($result); and the phps response can be read with PHP's serialization mechanism: $serializedResult = file_get_contents('http://localhost:8983/solr/select?q=iPod&wt=phps'); $result = unserialize($serializedResult); print_r($result); There is support for others (like Ruby Python Java Binary etc) which essentially have been build to make it easier for developers to integrate SOLR into their web applications using mechanisms that are faster than parsing XML or JSON. However there are are also other types of ResponseWriter's that actually transform the response based on a template (e.g. Velocity) or a transform (e.g. XSLT). This can be useful in certain situations where you don't want to depend on another application to process the query results (e.g. XSLT directly into XHTML). Response Writers are also configured in the solrconfig.xml normally you will enable those that you are interested in e.g.: <queryResponseWriter name=""xml"" class=""org.apache.solr.request.XMLResponseWriter"" default=""true""/> <queryResponseWriter name=""json"" class=""org.apache.solr.request.JSONResponseWriter""/> <queryResponseWriter name=""php"" class=""org.apache.solr.request.PHPResponseWriter""/> <queryResponseWriter name=""phps"" class=""org.apache.solr.request.PHPSerializedResponseWriter""/> The most effective way to use them depends on your environment and what you want to achieve. Obviously if you are in PHP a phps may give you better (easy access through the language) and faster (built-in serialization mechanism less verbose) results. If in Javascript json may just be the way to go etc. You see SOLR is a powerful and versatile plattform :) If you want to figure a way through the jungle you may want to resort to some book like ""Solr 1.4 Enterprise Search Server"" (although I am not sure it really does the best possible job as an introduction). Many things you can best figure out by trial-and-error as well as patience and some online help. Hope this helps to get you going. Very good answer thank you! Great answer. Can you also explain `defType` and `echoParams`? @cuh: please create another question for that. the power of stackoverflow!!!!! better docs then found on the original site :) +1 You the man this is awesome.",java php sql mysql database
3463844,A,"Optimize a rankings page using PHP and MySQL I could really use some help optimizing a table on my website that is used to display rankings. I have been reading a lot on how to optimize queries and how to properly use indexes but even after implementing changes I thought would work little improvement can be seen. My quick fix has been simply to use only the top 100000 rankings (updated daily and stored in a different table) to improve the speed for now but I really don't like that option. So I have a table that stores the information for users that looks something like: table 'cache': id (Primary key) name region country score There are other variables being stored about the user but I don't think they are relevant here as they are not used in the rankings. There are 3 basic ranking pages that a user can view: A world view: SELECT cache nameregioncountryscore FROM cache ORDER BY score DESC LIMIT 026 A region view: SELECT nameregioncountryscore FROM cache WHERE region='Europe' ORDER BY score DESC LIMIT 026 and a country view: SELECT nameregioncountryscore FROM cache WHERE region='Europe' AND country='Germany' ORDER BY score DESC LIMIT 026 I have tried almost every combination of indexes I can think of to help alleviate work for the database and while some seem to help a little bit I can't find one that will only return 26 rows for both the region and country queries(with simply an index on 'score' the world rankings are blazing fast). I feel like I might be missing something basic any help would be much appreciated! Little extra info: the cache table is currently around 920 megabytes with a little more than 800000 rows total. If you could use any more info just let me know. Nice try Ponies. We know you mean well. :-) I knew something looked off. Fixed. Your world rankings benefit from the score index because score is the only criteria in the query. The logical sequence it sorts on is built into the query. So that's good. The other queries will benefit from an index on region. However similar to what @Matt indicates a composite index on region country and score may be the best bet. Note the three columns for the key should be in region country score sequence. From what you provided it seems that that index would be best. Are there times when the query has a country filter but no region filter? If yes then an index on region will probably provide the best solution for that type of query. I don't agree with the statement ""Too many indices will slow you down."" You want to create the ""right"" indexe(s) and that may mean more than one. Thanks for the response but I've actually already tried using this index. It definately is 10x faster then doing a full table scan but doesn't show the speed I need when searching for countries in particular. If this is the best index to use maybe this problem has just come down to not having a powerful enough server to host this database?  How many records are we talking about? I am no SQL guru but in this case if just changes to indexes did not do the trick. I would consider playing around with the table structure to see what perf gains I could get. Cache id (pk) LocationId (index) name score Location LocationId (pk) CountryId (index) maybe RegionId (index) maybe Country CountryId name Region RegionId name Location LocationId (Primary key) CountryId RegionId Country CountryId name Region RegionId name Temp tables in Procs would allow you to select on Location Id in every case. It would reduce the over all complexity of the issue you are having: you would be troubleshooting 1 query plan not 3. The effort would be high and the payoff would be until you were done so I would suggest looking at the index approach first. Good luck We're talking about 850000+ records and growing by about 2500/day. I will keep this response in mind for a time when I have time to restructure the tables.  put ONE index on country score region. Too many indices will slow you down.",php sql mysql database ranking
2104063,A,"My final mysql db could someone check if the tables are correctly made? I have these tables: category table: cat_id (PK) cat_name category_options table: option_id (PK) cat_id (FK) option_name option_values table: value_id (PK) option_id (FK) value classifieds table: ad_id (PK) (VARCHAR) something like ""Bmw330ci_28238239832"" poster_id (FK) cat_id (FK) headline description price etc.... posters table: poster_id (PK) name email tel password etc.... Three main questions: 1- Is the above good enough? It covers all my needs atleast... 2- Sometimes when I try out different queries I get strange results... Could you write a PHP query string which will fetch one complete ad from an ad_id only? (imagine the only variable you have is ad_id) 3- In the query string must I specify all different tables which are connected in order to display an ad? Can't I just use something like ""SELECT * FROM classifieds WHERE ad_id=$ad_id"" and it would handle the links automatically ie fetch all related information also? Thanks and if you need more input let me know! I'd change ad_id to an int/bigint value if at all possible and store your VARCHAR in a new column. ok I will do that... get rid of the varchar PK in classifieds like @davek suggests and make posters use a int id PK (poster_id) similar to what you did in the other tables and make name a data column so you join on the int but display the name. nice if you need to change a name like what happens after a wedding/divorce oh I missed that actually I DO have a poster_id field! Thanks! I think you should learn how to use SQL so that you know how to make proper queries: http://www.w3schools.com/SQL/sql_intro.asp and http://dev.mysql.com/doc/refman/5.0/en/select.html to get a complete ad (can return multiple rows): SELECT * FROM classifieds c INNER JOIN posters p ON c.poster_id=p.poster_id INNER JOIN category a ON c.cat_id=a.cat_id INNER JOIN category_options o ON a.cat_id=o.cat_id INNER JOIN option_values v ON o.option_id=v.option_id WHERE ad_id=x You have serious design problems. Never ever ever use name as a PK; it is not unique and it is subject to change! Women change thier names when they get married for instance. In fact don't use any varchars as PKS at all. Use surrogate keys instead. Surrogate keys don't change text keys values often do and they are slower too. And never store name as just one field this is a poor practice. At a minumum you need first name last name middle name and suffix. You wil also need a autoincrementing id field so that John Smith at one address in Chicago can exist in the table with a different John Smith who lives elsewhere in Chicago. No you can't get all the data from related tables without adding them to the query through the use of a join. This is database 101 and if you don't know that then you don't understand relational databases enough to design one. Do some research into joins and querying. You can get all the information for an ad from just having the ad id though as your current relations appear to work. Do not use implied joins when you add the other tables to your queries. They are outdated by 18 years. Learn correctly by using explicit joins. re. ""women change their names when they get married""...make sure your validator allows hyphens.  1) If it meets your needs then wouldn't that make it ""good enough""? But seriously I would agree with davek that you should make the ad_id field an int/bigint and I'd also suggest the same for the posters table. Make the name a regular value field and create an autonum int/bigint PK field for it. If for any reason that user wants to change their name (for privacy concerns perhaps) then you would have to update any foreign keys in the database as well. With an autonum key you wouldn't have this problem. 2) Yes from what I see you should be able to gather all the data on an ad by knowing only the ad_id. 3) No you need to do more than that either equi-join in a SELECT query or use the JOIN keyword to pull your data in. MySQL doesn't have a ""meta"" relationship model (like MS Access) so it won't automatically understand your primary/foreign key relationships.",php sql mysql database
2714446,A,"Complex SQL query... 3 tables and need the most popular in the last 24 hours using timestamps! I have 3 tables with a column in each which relates to one ID per row. I am looking for an sql statement query which will check all 3 tables for any rows in the last 24 hours (86400 seconds) i have stored timestamps in each tables under column time. After I get this query I will be able to do the next step which is to then check to see how many of the ID's a reoccurring so I can then sort by most popular in the array and limit it to the top 5... Any ideas welcome! :) Thanks in advanced. Stefan SELECT id COUNT(*) AS cnt FROM ( SELECT id FROM table1 WHERE time >= NOW() - INTERVAL 1 DAY UNION ALL SELECT id FROM table2 WHERE time >= NOW() - INTERVAL 1 DAY UNION ALL SELECT id FROM table3 WHERE time >= NOW() - INTERVAL 1 DAY ) q GROUP BY id ORDER BY cnt DESC LIMIT 5 Holy crap. I've heard of MySQL ninjas but I don't think I've ever met one. Just testing this :) Two seconds! It hasnt given any errors but I am not getting any results? I use php time() function on storing the timestamp into the time column in each table... hmmm any ideas? Thanks again! This query in short will count which id has the most occurrences in the last 24 hours with relation to its timestamp and then return the top 5 correct? u can try -> WHERE time BETWEEN strtotime(""now"") AND strtotime(""-1 day"") GOT IT! i had to convert unixtimestamp to date: FROM_UNIXTIME( `time` ) :) Thanks alot!",php sql mysql database
2994392,A,Non-Linear Database Retrieval I'm building an article system and each article will have one more Tags associated with it (similar to the Tags on this site). The tables are set up something like this: Article_Table Article_ID | Title | Author_ID | Content | Date_Posted | IP ... Tag_Table Tag_ID | Name ... Tag_Intersect_Table Tag_ID | Article_ID Is it possible query an article and all of its associated tags in one database call? If so how is this done? You're looking for what is called a JOIN in SQL: SELECT Article_ID Title TT.Name as 'Tag_Name' FROM Article_Table AT INNER JOIN Tag_Intersect_Table TI ON AT.article_id = TI.article_id INNER JOIN Tag_Table TT ON TI.tag_id = TT.tag_id WHERE article_id = @my_article_id That joins the two entity tables to the same intersection table with a natural join syntax. Note that in this result set you'll have one row for each combination of a tag and an article so the article_id and title will be repeated over and over for each tag. If you're only querying against one article and want to get just the names of all the tags you can restrict the SELECT list to just TT.name. +1 for beating me to it!,php jquery sql database oop
3014550,A,SQL/PHP: How to upload big database to server when I have import file size limit? And then update I'm creating locally a big database using MySQL and PHPmyAdmin. I'm constantly adding a lot of info to the database. I have right now more than 10MB of data and I want to export the database to the server but I have a 10MB file size limit in the Import section of PHPmyAdmin of my web host. So first question is how I can split the data or something like that to be able to import? BUT because I'm constantly adding new data locally I also need to export the new data to the web host database. So second question is: How to update the database if the new data added is in between all the 'old/already uploaded' data? Don't use phpMyAdmin to import large files. You'll be way better off using the mysql CLI to import a dump of your DB. Importing is very easy transfer the SQL file to the server and afterwards execute the following on the server (you can launch this command from a PHP script using shell_exec or system if needed) mysql --user=user --password=password database < database_dump.sql. Of course the database has to exist and the user you provide should have the necessary privilege(s) to update the database. As for syncing changes : that can be very difficult and depends on a lot of factors. Are you the only party providing new information or are others adding new records as well? Are you going modify the table structure over time as well? If you're the only one adding data and the table structure doesn't vary then you could use a boolean flag or a timestamp to determine the records that need to be transferred. Based on that field you could create partial dumps with phpMyAdmin (by writing a SQL command and clicking Export at the bottom making sure you only export the data) and import these as described above. BTW You could also look into setting up a master-slave scenario with MySQL where your data is transferred automatically to the other server (just another option which might be better depending on your specific needs). For more information refer to the Replication chapter in the MySQL manual. I'm the only one adding data to the tables that need update what do you mean by create partial dumps or boolean flag? You add a boolean column to the data you want to sync (ie a column called is_new). For rows you already synced you set this to 0 the default value (for new rows) should be 1. That way you can create dump that contains only the new rows by performing a `select * from table where is_new=1` query and export that with phpMyAdmin to a SQL file (remember to select data only!). After the dump you perform an `update table set is_new=0 where is_new=1` to mark the rows as synced. Or alternatively you do the same based on timestamps and only select rows that were added since the date of the last sync.  What I would do in 3 steps: Step 1: Export your db structure without content. This is easy to manage on the exporting page of phpmyadmin. After that I'd instert that into the new db. Step 2: Add a new BOOL column in your local db in every table. The function of this is to store if a data is new or even not. Because of this set the default to true Step 3: Create a php script witch connects to both databases. The script needs to get the data from your local database and put it into the new one. I would do this with following mysql methods http://dev.mysql.com/doc/refman/5.0/en/show-tables.html http://dev.mysql.com/doc/refman/5.0/en/describe.html select update and insert then you have to run your script everytime you want to sync your local pc with the server.,php sql mysql database
1482886,A,"SQL query is only retrieving first record I have a query which is designed to retireve the ""name"" field for all records in my ""tiles"" table but when I use print_r on the result all I get is the first record in the database. Below is the code that I have used. $query = mysql_query(""SELECT name FROM tiles""); $tiles = mysql_fetch_array($query); I really cant see what I have done wrong I have also tried multiple searches within google but I cant find anything useful on the matter at hand. 'mysql_fetch_array' Returns an array that corresponds to the fetched row and moves the internal data pointer ahead. This means that it returns array (contains values of each field) of A ROW (a record). If you want other row you call it again. while ($row = mysql_fetch_array($result MYSQL_NUM)) { // Do something with $row } Hope this helps. :D  I believe you need to do a loop to invoke fetch array until it has retrieved all the rows. while ($row = mysql_fetch_array($query) ) { print_r( $row ); }  <?php // Make a MySQL Connection $query = ""SELECT * FROM example""; $result = mysql_query($query) or die(mysql_error()); while($row = mysql_fetch_array($result)){ echo $row['name']. "" - "". $row['age']; echo ""<br />""; } ?> Thanks works perfectly now.  Use ""mysql_fetch_assoc"" instead of ""mysql_fetch_array"". $query = mysql_query('SELECT * FROM example'); while($row = mysql_fetch_assoc($query)) : echo $row['whatever'] . ""<br />""; endwhile;",php sql database
3925848,A,"Will more MySql tables slow down searches on MySql database? I have a classifieds website and I am thinking about redesigning the database a bit. Currently I have 7 tables in the db. One table for each ""MAIN CATEGORY"". For example I have a ""VEHICLES"" table which holds all information about the following categories of classifieds:  cars mc mopeds/scooters trucks boats etc etc However users on the website usually search in specific categories. For example the user chooses the ""cars"" category to search in and enters a keyword. My code today will search the entire VEHICLES table for all records with the field ""category"" equal to ""cars"" and then get their details:  ""SELECT * IN vehicles WHERE category='cars' AND alot of other conditions"" // just for example not tested I am thinking about making a table now for each of these ""sub-categories"". Ie one for cars one for mc one for trucks etc so that search isn't done through information which isn't needed. Will this increase search speed? Because I have calculated that I will need atleast 30 or so tables for this. Thanks Don't do this. Rely on proper indexing and optimizations instead. With a properly indexed table and a ""reasonable"" number of rows you will not gain much speed from this approach. Anything you gain in speed of execution you will lose in time-to-market because your programming will become more complicated. Do not perform this optimization unless and until you encounter a performance problem in testing with a representative set of data.  Performance optimization is as much art as science and to really understand what's the best option requires that you do some benchmarking; anyone offering a definitive answer given the available information is just wrong. That said a few thoughts on your situation: You don't say what type your category column is now but if it's a string type it's probably using more space than other options thus making the table larger. Proper indexing can help tremendously with speed but a larger table with larger indexes will always work to do just the opposite. As already mentioned by someone else your queries within a category will be faster in the simple case of a category search. How much faster depends on how much data you have in your current table and the increases may be negated if you have to join in other tables to satisfy the need for all the other conditions to which you alluded. OTOH it may actually speed things up in certain join cases (e.g. if you were doing self-joins with your all-encompassing table). If you're working with a lot of data splitting into multiple tables can greatly ease backups. Splitting into multiple tables may also make it easier to shard your data across multiple servers for performance reasons. Similarly it may make replication setups easier to keep running. If you're tracking data that's category-specific separate tables enables you to better normalize your database and likely reap some nice performance as a result of using much smaller tables. Splitting obviously means modifying your code. If your code is of the old creaky type you may very well achieve a performance gain from the clean-up. Of course there's also the risk that you'll break something.... Check your indexes. Bad indexes are a very common cause of poor performance but are relatively easy to fix with a bit of quality time spent on self-education. MySQL's EXPLAIN can tell you whether your queries are using the indexes and the index stats (look in the docs) can tell you how efficiently your indexes are working. Finally speaking of code check yours. Try experimenting with a few approaches regardless of how the database is set up. For example it may be quicker to do a couple of separate queries and join the results in code than to do the join in the database. Likewise it's often quicker to do things like sorts in code particularly in cases where a join or something means the database would have to create a temporary file/table. Again check the EXPLAIN output and if you can't eliminate a problem area in your queries see if it helps to simplify the queries and do more work in the code. This can be particularly beneficial in the common case where the web server has more resources to spare than the database server. There are many more factors to consider. Ultimately though the best way to make these decisions is not to spend time pondering theories but to put both methods to the test. Create some test databases and benchmark the sort of queries you'd run most often with and without simulated load. You'll get your answer.  It will increase the speed of a search within the same category. It will potentially slow down queries where you need aggregate information from the different categories. You need to decide which is the best option for your site. How many records do you have in total in the vehicles table. Its quite likely that adding proper indexes will greatly increase the speed of your searches. Check out the 'EXPLAIN' query option in MySQL. Understanding this will help you optimize your database a lot with indices.  if you are using php try something like $query = mysql_query($sql); while($row = mysql_fetch_assoc($query)){ $tempvalue[]=$row; } and then to loop the info use for like sentence foreach($tempvalue as $key => $value){ write the table ..... } maybe mysql isnt slow and the problem is in the code test dont kill anyone =)",php sql mysql html database
2310721,A,"Trick Question; Showing 'nr of results' of MySql search I have a classifieds website and users can search ads. The results are displayed in three tabs on top of the page. These three are ""All"" ""Private"" and ""Company"". Each tab has a nr attached to it which represents the nr of ads found in that tab. So for example:  All Private Company 5 3 2 All is just a total of private+company! I am using MySql as a database. I am trying to figure out a way to find out these ""numbers of ads found"" for each tab. I have one way of doing this which is like this but gives me a headache because it is so messy: $query = ""SELECT SQL_CACHE * FROM classified WHERE classified.classified_id=$id""; if ($adtypes==""Private""){ $query_priv_comp = ""SELECT SQL_CACHE * FROM classified WHERE priv_comp='Company'""; } else { $query_priv_comp = ""SELECT SQL_CACHE * FROM classified WHERE priv_comp='Private'""; } switch ($adtypes){ case ""Private"": $query.= "" AND classified.priv_comp='Private'""; break; case ""Company"": $query.= "" AND classified.priv_comp='Company'""; break; } $qry_result = mysql_query($query); // main query $result_priv_comp = mysql_query($query_priv_comp); // second query $num_priv_comp = mysql_num_rows($result_priv_comp); if ($adtypes==""All""){ $num_total = mysql_num_rows($qry_result); } else if ($adtypes!=""All""){ $num_total=mysql_num_rows($qry_result) + mysql_num_rows($result_priv_comp); } if ($adtypes==""Private""){ $num_private = $num_total - $num_priv_comp; $num_company = $num_priv_comp; } else { $num_company = $num_total - $num_priv_comp; $num_private = $num_priv_comp; } Do you know of any other way which this can be done? Thanks BTW: I need the rows too in order to display information to the user of the ads found! Please clarify do you just need the counts or do you need the individual rows too? I need the rows too in order to display the information also! Ok. well have a read up on my answer then. After your switch variable $query_priv_comp would be equal to: SELECT SQL_CACHE * FROM classified WHERE priv_comp='Company' AND classified.priv_comp='Private' or SELECT SQL_CACHE * FROM classified WHERE priv_comp='Private' AND classified.priv_comp='Company' Question: What the difference??? Read before commenting two different queries  You can select all counts with one query: SELECT priv_comp COUNT(*) AS record_count FROM classified GROUP BY priv_comp Then you can query all the records needed for the current tab. These 2 should be separated clearly.  It depends on what you need exactly. If you just need the counts it's relatively easy: SELECT count(*) count_all  sum(if(priv_com = 'Private' 1 0)) count_private  sum(if(priv_com = 'Company' 1 0)) count_company FROM classified WHERE classified.classified_id=$id If on the other hand you need both counts as well as row data you should either do separate queries for the data and the counts or use a trick. Let's say your table has an id column wich is primary key you could do: SELECT count(*) count_all  sum(if(priv_com = 'Private' 1 0)) count_private  sum(if(priv_com = 'Company' 1 0)) count_company  classified.* FROM classified WHERE classified.classified_id=$id GROUP BY id -- group by on primary key WITH ROLLUP The WITH ROLLUP magic will give you an extra row with the counts for the entire query. The only snag is that you will receive this row as last row of the entire result so if you want to report the counts before the data you're going to have to cache the row data in an php array or so and process that later to build up the page. actually what I really need is the rows for the tab currently displayed. So if the user clicks ""private"" tab then only rows from all ""private"" classifieds is needed and so on. But this is a useful method I think. Thanks Camran ok gotcha. Well I guess I would probably do separate queries then one for the count and one for the data. If performance would be an issue I would probably advise to keep track of the counts in a separate aggregate table. Performance is an issue for sure. Could you explain some more about the aggregate table? What is that? Thank you COUNT SUM MIN MAX and friends are aggregates: condensed values computed over a group of rows. You can calculate aggregates in your SQL query by using the appropriate aggregate function (http://dev.mysql.com/doc/refman/5.1/en/group-by-functions.html). Altertnatively you can keep track of the individual additions and deletions on your table and keep a running total in a separate table the aggregate table. That way you can simply do a single row query to your aggregate table to get the current count. Of course there is extra effort involved in ensuring the agg. table is kep up to date.",php sql mysql html database
1710617,A,"oci_bind_by_name RETURNING INTO truncates value When I insert a row into a table with 1000+ entries and attempt to return the row ID (be it from an autoincrement trigger/seq or from setting the value manually in the insert statement) I get a truncated value: $db = OCILogon(DATABASE_LOGIN DATABASE_PASSWORD DATABASE_NAME); $mysqldate = date('Y/m/d G:i:s'); $db_vid_id = 748; $authorID = 310; $typeID = 2; $timecode = 47; $shortDescrip = ""hello world""; $query = ""INSERT INTO TESTTHOUSAND (ID VIDEO_ID AUTHOR_ID TYPE_ID DATE_CREATED TIMECODE SHORT_DESCRIPTION APPROVED IS_PUBLIC) VALUES(4067 :videoID :authorID :typeID TO_DATE('$mysqldate''yyyy/mm/dd HH24:MI:SS') :timecode :shortDescrip 0 0) RETURNING ID INTO :id""; $stmt = oci_parse($db $query); oci_bind_by_name($stmt ':videoID' $db_vid_id); oci_bind_by_name($stmt ':authorID' $authorID); oci_bind_by_name($stmt ':typeID' $typeID); oci_bind_by_name($stmt ':timecode' $timecode); oci_bind_by_name($stmt ':shortDescrip' $shortDescrip); oci_bind_by_name($stmt ':id' $theID); oci_execute($stmt); oci_free_statement($stmt); oci_commit($db); oci_close($db); echo $theID; This code executes properly and the values are correctly stored in the database. However the value of $theID is 406 not 4067. I am running PHP 5.2.6 and Oracle 10.1 Has anyone encountered this before? I have done some more digging around and it appears that I need to specify that this is a SQLT_INT: oci_bind_by_name($stmt ':id' $annotationID -1 SQLT_INT); From http://www.php.net/manual/en/function.oci-bind-by-name.php#92334 for numerics use the default length (-1) but tell oracle its an integer +1 for the followup with the answer.",php sql database oracle
1293960,A,"Wrong output for SQL database query I have the following: <?php $result = mysql_query(""SELECT `category_id` FROM `categories` WHERE `category_parent_id` = '80'""); while ($row = mysql_fetch_array($result)){ $childrows [] = $row['category_id']; $clean = array_unique($childrows); $category_string = implode(""""$clean); echo $category_string; ?> And this outputs: 474748474863474863644748636468474863646869 I cannot work out why I have the duplicates and some have the comma's missing. Please help! Your code won't compile since you didn't close the curly bracket but it actually outputs this: 47 4748 474863 47486364 4748636468 474863646869 without newlines. Use this: <?php $result = mysql_query(""SELECT DISTINCT `category_id` FROM `categories` WHERE `category_parent_id` = '80'""); while ($row = mysql_fetch_array($result)) $childrows [] = $row['category_id']; echo implode(""""$childrows) . ""\n""; ?>  You're echoing each time around the loop and don't have linebreaks. If you had linebreaks it would look like this:  47 4748 474863 47486364 4748636468 474863646869 Make a little more sense now? Beat me to it !",php sql database
2215261,A,"Advanced SQL query. Top 12 from each category (MYSQL) I have a MYSQL5 database and PHP 5. I need a query for a games websites index page that only selects the first 12 from each category of games. Here is what I have so far. $db->query(""SELECT * FROM `games` WHERE status = 'game_published' AND `featured` = '1' ORDER BY `category`""); The php code then groups games of the same category together and displays them. But yeah it doesn't limit the number of games from each category like I want. Here is exactly what the structure of the table looks like: i49.tinypic.com/aysoll.png Here is a blog post which sounds like what I am trying to do: http://www.e-nformation.net/content/view/title/MySQL+Top+N+in+each+group+(group+inner+limit) But I can't make sense of it. Any help is appreciated. you could use UNION if we are not talking about million of types... pseudoSQL: (SELECT * FROM table WHERE condition AND category = 'action' ORDER BY id LIMIT 10) UNION (SELECT * FROM table WHERE condition AND category = 'action' ORDER BY id LIMIT 10) UNION (SELECT * FROM table WHERE condition AND category = 'action' ORDER BY id LIMIT 10) If you have array of categories in your PHP/ASP you can generate this union on the fly. More: http://dev.mysql.com/doc/refman/5.0/en/union.html EDIT: Here's probably most useful resource: http://www.xaprb.com/blog/2006/12/07/how-to-select-the-firstleastmax-row-per-group-in-sql/ Use it well ^^  There may be a more elegant solution but you can just execute a query for each category. First get a list of categories: SELECT DISTINCT(category) FROM `games`; Then take each of the results and query for 12 rows: SELECT * FROM games WHERE status = 'game_published' AND `featured` = '1' AND `category` = $category LIMIT 12; Of course you need to add some kind of ranking row (and order by it) to get the top 12. Note: There may be a way to do this with a single query but it escapes me at the moment.  How about this? SELECT * FROM ( SELECT games.* @rn := CASE WHEN @category=category THEN @rn + 1 ELSE 1 END AS rn @category := category FROM games (SELECT @rn := 0 @category := NULL) AS vars WHERE status = 'game_published' AND featured = '1' ORDER BY category ) AS T1 WHERE rn <= 12 Some of the other solutions work but I think this is the best. Thanks.  To use the technique from the posts you mention you need a way to order the games. They're using article date. Then they select the number of older articles for that company and say there can't be more than three. If your games table has an auto-increment column called id you can select the top 10 games per category like: SELECT * FROM games g1 WHERE status = 'game_published' AND featured = '1' AND 10 > ( SELECT COUNT(*) FROM games g2 WHERE g2.status = 'game_published' AND g2.featured = '1' AND g1.category = g2.category AND g2.id > g1.id ) The where condition says that there can't be more than 10 rows with the same category and a higher ID. Ah didn't follow the article link. That would be the more elegant - but perhaps more mind warping - way to do it.",php sql mysql database
3909327,A,"Warning: sqlite_query() expects parameter 1 to be resource string given Possible Duplicate: mysql_fetch_array() expects parameter 1 to be resource boolean given in select Warning: mysql_fetch_* expects parameter 1 to be resource boolean given error ok so i've looked all over the place and cant find a solution that helps my case. I hope someone can help? basically i have this and recieve ""Warning: sqlite_query() expects parameter 1 to be resource string given"" relating to $dbresult line - so a problem with the query :( function Up(){ $dbquery = ""DELETE FROM toolList WHERE toolId='"".$data['toolId'].""'""; $dbresult = sqlite_query($dbhandle $dbquery); } foreach($result as $data){ print '< a href=""'.Up().'"">DELETE!< /a>'; } Any advice would be really appreciated :) Thanks You are either missing a call to sqlite_open() or your $dbhandle variable is not available in your function.  Where is $dbhandle defined? I'm guessing it's a global variable in which case you have to explicitly mention so within the Up function: function Up(){ global $dbhandle $data $dbresult; $dbquery = ""DELETE FROM toolList WHERE toolId='"".$data['toolId'].""'""; $dbresult = sqlite_query($dbhandle $dbquery); } great!! thanks that gets rid of the warning but doesnt seem to work still! it should grab $data from the foreach loop right? You probably want to pass `$data` as a parameter to `Up`.",php sql html database sqlite
2187832,A,Displaying number of results from a MySQL db I have a classifieds website and it is using MySQL as a database. My goal is to show the number of private company and total ads in the db with the search-term entered in a text-input inside the form! The Problem: There are two types of ads: Private and Company. The user may specify which to display or both so thats three options. On the website after displaying the search results I want to show the user THREE tabs: All ads Private ads Company ads. I have a field in every record in MySQL which contains the value of either Private or Company. I know of a way to display the number of private ads company ads and TOTAL ads but it requires multiple queries. For example if the user CHECKS the PRIVATE ONLY check-box then only private ads are searched but I won't know how many company ads there are until I make a new query where I search also for company ads. Then add them and I have also the total nr of ads. Just wonder if you know of a good way to maybe get rid of the extra query? Thanks SELECT field  COUNT( id ) FROM db GROUP BY field; +1 this is why we have databases: data transformation. Sure querying makes more sense than searching flatfiles to be sure but they're more than just a storage engine; any chance you get to make the database do the job it was built for do it!  Query all of the data at once and pass it off to PHP. Once you have it in PHP set up three separate loops.. Eg: foreach($data AS $row) { if($row['type'] == 'company') { // LOOP THROUGH COMPANY DATA } } foreach($data AS $row) { if($row['type'] == 'private') { // LOOP THROUGH PRIVATE DATA } } This way you only pull your data set once but you can surgically show the data you want from the set in each tab separately. If you are just wanting counts use a GROUP BY clause when you select your counts. This is pretty horrible from a large-scale data perspective. When you have 100000+ rows of data and a user is not looking at all ads you will be returning massive volumes of data that you know will not be needed. Let the DB do its job instead returns counts and only the data you know you need. @macabail you are correct I beleive I actually misread the question and didn't realize we were only talking about counts. I anticipated that he wanted to show counts on tabs as well as have the body listed (like in a table) inside of the tabs. If that were the case then a single query would be the way to go. I don't know WHERE I got the impression he was showing data on tabs.. Must have been sleepy.. =) Good catch on my thinking though!  You could use a ROLLUP: SELECT IFNULL( field  'All ads' ) AS 'Type' COUNT( * ) FROM `table` GROUP BY field WITH ROLLUP So with four Company and one Private ad you would see: Type COUNT( * ) Company 4 Private 1 All ads 5 I too didn't know about ROLLUP. That's pretty neat. I do wonder though if IFNULLing every single row would result in slower performance than simply adding up the two numbers in PHP afterward. +1 I have never seen this clause before and just checked the documentation. I can imagine that this is extremely powerful! Thanks! @Brock - I doubt the IFNULL would have much of an impact. By the time it's applied the dataset will be down to the grouped rows only. Perhaps more likely is that the WITH ROLLUP itself might be expensive. One advantage though is that the calling code is simplified.,php sql mysql database search
2228165,A,"Possible to 'Show MySQL Variables' with PHP code onto the browser? Is this possible:  mysql_query(""SHOW VARIABLES LIKE 'query%'""); in php? If so how can I display the variables onto the browser? If it is not possible which mysql command tool is easiest and free to download? Thanks Yes it's possible I just tried SHOW VARIABLES LIKE 'max%' You can show them in the browser like you would show the results from any other query.. $res = mysql_query(""SHOW VARIABLES LIKE 'max%'""); while ($row = mysql_fetch_assoc($res)) { echo $row['Variable_name'].':'.$row['Value'].""<br>\n""; }  I think you can do something like $result = mysql_query(""SHOW VARIABLES WHERE VARIABLE_NAME LIKE 'query%'""); while ($rs = mysql_fetch_assoc($result) { foreach($rs as $key => $value) { print ""{$key}: {$value}<br />""; } }",php sql mysql database
2755287,A,"sql statement question. Need to query 3 tables in one go! Hey there I have an sql database. In this database is 3 tables I need to query. The first table has all the item info called item and the other two tables has data for votes and comments called userComment and the third for votes called userItem I currently have a function which uses this sql query to get the latest more popular (in terms of both votes and comments): $sql = ""SELECT itemID COUNT(*) AS cnt FROM ( SELECT `itemID` FROM `userItem` WHERE FROM_UNIXTIME( `time` ) >= NOW() - INTERVAL 1 DAY UNION ALL SELECT `itemID` FROM `userComment` WHERE FROM_UNIXTIME( `time` ) >= NOW() - INTERVAL 1 DAY AND `itemID` > 0 ) q GROUP BY `itemID` ORDER BY cnt DESC""; I know how to change this for either by votes alone or comments.... HOWEVER - I need to query the database to only return the itemID's of the ones which have specific conditions in only the item table these are WHERE categoryID = 'xx' AND typeID = 'xx' If the sql ninja could please help me on this one? Do I have to first return the results from the above query and the for each in the array fetched then check each against the item table and see if it fits the conditions to build a new array - or is that overkill? Thanks Stefan It's not clear to me exactly how your DB is setup or where some of these attributes are but it might be something like: $sql = ""SELECT q.itemID COUNT(*) AS cnt FROM ( SELECT `itemID` FROM `userItem` WHERE FROM_UNIXTIME( `time` ) >= NOW() - INTERVAL 1 DAY UNION ALL SELECT `itemID` FROM `userComment` WHERE FROM_UNIXTIME( `time` ) >= NOW() - INTERVAL 1 DAY AND `itemID` > 0 ) q inner join item i on q.itemID = i.itemID WHERE i.categoryID = 'xx' AND i.typeID = 'xx' GROUP BY q.`itemID` ORDER BY cnt DESC""; This works HOWEVER for example: If i have something with 1 vote and a comment it comes under one with 1 vote and no comment? Why is this? It seemed when I swapped the comment statement before UNION ALL to above the vote statement to display the results better! :) Doesnt seem to be working? What extra info do you need which you were unsure about? the attributes such as categoryID and itemID are in the table called `item` where all the items are actually stored The inner join is acting as a filter for only those items with either votes or comments. Change it to a left join - does that help? Returns: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'q.itemID = i.itemID WHERE i.categoryID = '1' AND i.typeID = '1' GROUP BY ' at line 10 - SELECT q.itemID COUNT(*) AS cnt FROM ( SELECT `itemID` FROM `userItem` WHERE FROM_UNIXTIME( `time` ) >= NOW() - INTERVAL 1 DAY UNION ALL SELECT `itemID` FROM `userComment` WHERE FROM_UNIXTIME( `time` ) >= NOW() - INTERVAL 1 DAY AND `itemID` > 0 ) q left join item i q.itemID = i.itemID WHERE i.categoryID = '1' AND i.typeID = '1' GROUP BY q.`itemID` ORDER BY cnt DESC @Stefan looks like I left off the ""on"" keyword.  I would be inclined to include the filter on each of the queries. I would need to verify but I would think that it would perform better as fewer rows are analyzed in the Group By. Thus I would do something like (this is a guess since we are not told how the item table relates to the others): $sql = ""Select itemID Count(*) AS cnt From ( Select ui.`itemID` From `userItem` ui Join `item` i On i.itemid = ui.itemid Where From_UnixTime( `time` ) >= Now() - Interval 1 Day And i.categoryID = 'xx' And i.typeid = 'xx' Union All Select uc.`itemID` From `userComment` uc Join `item` i On i.itemid= uc.itemid Where From_UnixTime( `time` ) >= Now() - Interval 1 Day And uc.itemID > 0 And i.categoryID = 'xx' And i.typeid = 'xx' ) q Group By `itemID` Order By cnt Desc""; Getting this response any ideas? Column 'itemID' in field list is ambiguous - SELECT itemID Count(*) AS cnt FROM ( SELECT `itemID` FROM `userItem` ui JOIN `item` i ON i.itemid = ui.itemid WHERE From_UnixTime( `time` ) >= Now() - Interval 7 Day AND i.categoryID = 'popular' UNION ALL SELECT `itemID` FROM `userComment` uc Join `item` i On i.itemid= uc.itemid Where From_UnixTime( `time` ) >= Now() - Interval 7 Day And uc.itemID > 0 And i.categoryID = 'popular' ) q Group By `itemID` Order By cnt Desc @Stefan - You simply need to alias `itemid` that is in each of the inner select clauses. I've updated my post to illustrate.",php sql mysql database
2299503,A,"Database Design for Facebook-like messages I am currently planning a new system in PHP/MySQL and want to make sure my database can handle the amount of data that I am planning to store. One of the features of my new project is a ""messages"" feature like Facebook. I want to make sure I create the best possible experience for the end user. The website will eventually handle 1000's of users with potentially millions of messages collectively. What would be the best approach for the database design? Is MySQL even the right database to use? Ask vague questions get vague answers! @mjv what is vague Is it just me or are ""Facebook-like messages"" and ""best possible experience for the end user"" contradictory? You are not very precise on what you want to learn. Okay. I'll try to give you some advice. Normalization Indexes MyISAM for tables under high load Denormalization (sic!) but you should understand what are you doing Sharding Minimalistic DB layer for flexibility  Sharding is certainly not necessary for your ""broadly"" based requirements...I have dealt with a fair amount of data and didn't even consider partitioned tables and shard implementation until there were numerous tables housing over a billion records (then joining those could get a little slow). Index your tables with smart keys and you may even consider using an eav type structure to keep the tables narrow and relieve yourself of null returns on queries. Above was written while half asleep so ignore typos ;)  MySQL has no problem with millions or hundreds of millions of records as long as you design you database correctly. That being said a ""messages feature like Facebook"" is a pretty broad definition. Generally you would define a messages table that links each message to the user that created it (ie have a userId column in the messages table). If you want messages to go to multiple users you have a message_recipients table defining the 1-to-many relationship by storing multiple records consisting of the messageId and a recipientId. Add the proper indexes to these tables and you're 80% of the way there. That being said that remaining 20% can be a killer. Unfortunately how you use your database is going to determine what else you need to do and you'd have to provide a lot more detail about your application before those judgments can be made. For example you might wish to consider having auto-archiving solution which keeps the main table relatively small and moves old data to backup tables that can be accessed if necessary. You probably won't need this right away but it could help in the future. From my experience pretty much every person or company exaggerates their requirements 10x to 100x the reality when they are planning a system. When in doubt start simple buy 1 server and run the web server and database from it. Don't worry about multiple servers until you need them. The only reason to have multiple servers from day 1 is because you want fail over and even then you might find the initial costs exceed your want of it. @TravisO - 100% agree. @TravisO at least with SQL server you should not even when small put it on a server with anything else. SQl server is designed to use all of the memory of the server and to do less than that is to cripple it.  As long as you setup your tables to be relational and set the relationships between tables MySQL should be fine. Might I also suggest Postgres? I've had equal experience with MySQL PostGres and MS SQL... My preference is MS SQL but since start up costs are very important in new projects PostGres would be my preference for this or any project.  If you design your database correctly the performance should deteriorate logarithmically with the amount of data. In other words the time for executing your queries will grow much slower than the amount of data. To achieve this goal you'll have to be disciplined about a number of things: Your database design must be sound. Understanding ER modeling and normalization is essential. So is understanding the anatomy of indexes and other physical data structures. After you have a nice normalized database consider if some ""edges"" of it should be judiciously denormalized purely for performance reasons. Throughout this whole process keep in mind what kind of queries will your client application1 do: Design indexes accordingly - index specifically to queries you know you'll need don't over-index! Some design decisions such as usage of natural vs. surrogate keys and identifying vs. non-identifying relationships might influence the amount of JOINs you'll need. Try to keep your database design friendly to clustered range scans index-only scans etc. Use DBMS-specific mechanisms such as clustering partitioning key compression materialized views (etc..) to your advantage. If the DBMS doesn't support some mechanism you deem essential don't be afraid to switch the DBMS! For example InnoDB tables are always clustered which is an advantage when querying on PK but can be a disadvantage if you need secondary indexes. If you need both clustered and heap-based tables use some DBMS that supports them both (such as Oracle or MS SQL Server).2 Code the client application carefully. Religiously use bound parameters and query preparation - not only will you minimize the SQL parsing and query planning overhead but will be SQL-injection-resistant as well! ORMs and libraries will often shield you from doing it manually but you should still understand what's going on ""under the covers"". And last but not least don't relay on assumptions - measure instead! Database performance can be a fine (and rather complex) balancing act and the impact of certain decisions might not be immediately obvious If you do all this correctly you'll have to approach the actual Facebook's amounts of data before a ""classic"" DBMS stops being adequate. 1000s of users and millions or messages don't even qualify as ""large"" in this context. 1 A ""client"" from the DBMS perspective - this could be a middle tier as well. 2 The MyISAM is also not clustered but has serious limitations (such as absence of transactions support) that should disqualify it from normal use anyway.  Facebook started with MySQL and they only moved to Cassandra when they had 7TB of inbox data for over 100 million users. Source: Lakshman Malik: Cassandra - A Decentralized Structured Storage System. Exactly start small keep your costs low. Just because you want to be the next Facebook doesn't mean you need to spend anywhere near the amount of money or time to design a system that broad. Every successful site started simple quick and cheap. Over designing of your system reeks of ""premature optimization"".  If you are on a budget start with MySQL and use a system like Zend::DB or on a higher level Doctrine. It's more important to make it easy to switch DMBS then to choose your DBMS at the beginning.  I'd say read about object oriented databases as well as nosql systems it is a very interesting concept actively used by famous frameworks like Ruby on rails which allows you to worry less about your data since you can simply dump your object straight into the database I know it is a little off topic but less complex databases mean easier transition into scalable systems and I'm just spreading awareness However the tradeoff is not having an as strong userbase as relational databases which makes it harder to find answers to problems as you go along and an equally longer amount of time it takes to adapt into using it but consisting data without thinking about database design at every stage writing your business logic is an amazing thing to have and quickens your development time however later on when you face bottle necks and performance issues it will be harder to solve since there is less help around.  If you are planning to handle large amounts of data (of course millions doesn't even come close to qualifying as large) then hire a datbase professional. Efficient and effective database design for large data sets is a complex issue and requires a specialist. In answer to your question yes mysql can handle millions of records easily if the design is good and will be a nightmare if the design is bad pretty much like any other modern datbase.  I've not worked on MySQL but I've worked professionally on SQL Server and Oracle. I would recommend Oracle for any high performance system. codeholic: My preferred RDBMS as well. Though would you care to back-up your bashing of Oracle and MS SQL Server? I was a MS SQL developer for several years before transitioning over to PGSQL. Some days I long for MS SQL: much better replication larger community of resources wider availability of commercial support better GUI tools and sprocs are more intuitive to write in T-SQL than PL/pgSQL.  If you mean ""what should my mysql table look like for a message system"" I use the following columns in my message system: message_id fromuser fromview fromstatus touser toview tostatus title text poston thread Message_id is auto_increment obviously. Fromuser and touser are obvious. Fromstatus and tostatus is active deleted purge draft and likewise. Fromview and toview are set to 'yes' and 'no'. Title text and 'poston' date are obvious. Thread might take a little effort on your part depending on your html forms and message display scripts. For your form create a foreach loop based on the ""to:"" field and save a copy for each recipient. I expect this message system to hold millions but that millions is probably a couple of years away. I'm keeping it small and simple.",php sql mysql database database-design
