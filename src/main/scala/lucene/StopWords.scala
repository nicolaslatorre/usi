package lucene

import org.apache.lucene.analysis.util.CharArraySet
import scala.collection.JavaConversions._
import org.apache.lucene.util.Version


object StopWords{
	
   def asCharArraySet = {
    val stopWords = EnglishStopWords ++ JavaStopWords ++ CppStopWords ++ JavaScriptStopWords ++ ScalaStopWords ++ PythonStopWords
    new CharArraySet(Version.LATEST,stopWords, true)
  }
	
  lazy val EnglishStopWords = List( 
			"a's",
			"able",
			"about",
			"above",
			"according",
			"accordingly",
			"across",
			"actually",
			"after",
			"afterwards",
			"again",
			"against",
			"ain't",
      "ain",
			"all",
			"allow",
			"allows",
			"almost",
			"alone",
			"along",
			"already",
			"also",
			"although",
			"always",
			"am",
			"among",
			"amongst",
			"an",
			"and",
			"another",
			"any",
			"anybody",
			"anyhow",
			"anyone",
			"anything",
			"anyway",
			"anyways",
			"anywhere",
			"apart",
			"appear",
			"appreciate",
			"appropriate",
			"are",
			"aren't",
			"around",
			"as",
			"aside",
			"ask",
			"asking",
			"associated",
			"at",
			"available",
			"away",
			"awfully",
			"be",
			"became",
			"because",
			"become",
			"becomes",
			"becoming",
			"been",
			"before",
			"beforehand",
			"behind",
			"being",
			"believe",
			"below",
			"beside",
			"besides",
			"best",
			"better",
			"between",
			"beyond",
			"both",
			"brief",
			"but",
			"by",
			"c'mon",
			"c's",
			"came",
			"can",
			"can't",
			"cannot",
			"cant",
			"cause",
			"causes",
			"certain",
			"certainly",
			"changes",
			"clearly",
			"co",
			"com",
			"come",
			"comes",
			"concerning",
			"consequently",
			"consider",
			"considering",
			"contain",
			"containing",
			"contains",
			"corresponding",
			"could",
			"couldn't",
      "couldn",
			"course",
			"currently",
			"definitely",
			"described",
			"despite",
			"did",
			"didn't",
      "didn",
			"different",
			"do",
			"does",
      "doesn",
			"doesn't",
			"doing",
			"don't",
      "don",
			"done",
			"down",
			"downwards",
			"during",
			"each",
			"edu",
			"eg",
			"eight",
			"either",
			"else",
			"elsewhere",
			"enough",
			"entirely",
			"especially",
			"et",
			"etc",
			"even",
			"ever",
			"every",
			"everybody",
			"everyone",
			"everything",
			"everywhere",
			"ex",
			"exactly",
			"example",
			"except",
			"far",
			"few",
			"fifth",
			"first",
			"five",
			"followed",
			"following",
			"follows",
			"for",
			"former",
			"formerly",
			"forth",
			"four",
			"from",
			"further",
			"furthermore",
			"get",
			"gets",
			"getting",
			"given",
			"gives",
			"go",
			"goes",
			"going",
			"gone",
			"got",
			"gotten",
			"greetings",
			"had",
			"hadn't",
			"happens",
			"hardly",
			"has",
      "hasn",
			"hasn't",
			"have",
      "haven",
			"haven't",
			"having",
			"he",
			"he's",
			"hello",
			"help",
			"hence",
			"her",
			"here",
			"here's",
			"hereafter",
			"hereby",
			"herein",
			"hereupon",
			"hers",
			"herself",
			"hi",
			"him",
			"himself",
			"his",
			"hither",
			"hopefully",
			"how",
			"howbeit",
			"however",
			"i'd",
			"i'll",
			"i'm",
			"i've",
			"ie",
			"if",
			"ignored",
			"immediate",
			"in",
			"inasmuch",
			"inc",
			"indeed",
			"indicate",
			"indicated",
			"indicates",
			"inner",
			"insofar",
			"instead",
			"into",
			"inward",
			"is",
			"isn't",
			"it",
			"it'd",
			"it'll",
			"it's",
			"its",
			"itself",
			"just",
			"keep",
			"keeps",
			"kept",
			"know",
			"knows",
			"known",
			"last",
			"lately",
			"later",
			"latter",
			"latterly",
			"least",
			"less",
			"lest",
			"let",
			"let's",
			"like",
			"liked",
			"likely",
			"little",
			"look",
			"looking",
			"looks",
			"ltd",
			"mainly",
			"many",
			"may",
			"maybe",
			"me",
			"mean",
			"meanwhile",
			"merely",
			"might",
			"more",
			"moreover",
			"most",
			"mostly",
			"much",
			"must",
			"my",
			"myself",
			"name",
			"namely",
			"nd",
			"near",
			"nearly",
			"necessary",
			"need",
			"needs",
			"neither",
			"never",
			"nevertheless",
			"new",
			"next",
			"nine",
			"no",
			"nobody",
			"non",
			"none",
			"noone",
			"nor",
			"normally",
			"not",
			"nothing",
			"novel",
			"now",
			"nowhere",
			"obviously",
			"of",
			"off",
			"often",
			"oh",
			"ok",
			"okay",
			"old",
			"on",
			"once",
			"one",
			"ones",
			"only",
			"onto",
			"or",
			"other",
			"others",
			"otherwise",
			"ought",
			"our",
			"ours",
			"ourselves",
			"out",
			"outside",
			"over",
			"overall",
			"own",
			"particular",
			"particularly",
			"per",
			"perhaps",
			"placed",
			"please",
			"plus",
			"possible",
			"presumably",
			"probably",
			"provides",
			"que",
			"quite",
			"qv",
			"rather",
			"rd",
			"re",
			"really",
			"reasonably",
			"regarding",
			"regardless",
			"regards",
			"relatively",
			"respectively",
			"right",
			"said",
			"same",
			"saw",
			"say",
			"saying",
			"says",
			"second",
			"secondly",
			"see",
			"seeing",
			"seem",
			"seemed",
			"seeming",
			"seems",
			"seen",
			"self",
			"selves",
			"sensible",
			"sent",
			"serious",
			"seriously",
			"seven",
			"several",
			"shall",
			"she",
			"should",
			"shouldn't",
			"since",
			"six",
			"so",
			"some",
			"somebody",
			"somehow",
			"someone",
			"something",
			"sometime",
			"sometimes",
			"somewhat",
			"somewhere",
			"soon",
			"sorry",
			"specified",
			"specify",
			"specifying",
			"still",
			"sub",
			"such",
			"sup",
			"sure",
			"t's",
			"take",
			"taken",
			"tell",
			"tends",
			"th",
			"than",
			"thank",
			"thanks",
			"thanx",
			"that",
			"that's",
			"thats",
			"the",
			"their",
			"theirs",
			"them",
			"themselves",
			"then",
			"thence",
			"there",
			"there's",
			"thereafter",
			"thereby",
			"therefore",
			"therein",
			"theres",
			"thereupon",
			"these",
			"they",
			"they'd",
			"they'll",
			"they're",
			"they've",
			"think",
			"third",
			"this",
			"thorough",
			"thoroughly",
			"those",
			"though",
			"three",
			"through",
			"throughout",
			"thru",
			"thus",
			"to",
			"together",
			"too",
			"took",
			"toward",
			"towards",
			"tried",
			"tries",
			"truly",
			"try",
			"trying",
			"twice",
			"two",
			"un",
			"under",
			"unfortunately",
			"unless",
			"unlikely",
			"until",
			"unto",
			"up",
			"upon",
			"us",
			"use",
			"used",
			"useful",
			"uses",
			"using",
			"usually",
			"value",
			"various",
			"very",
			"via",
			"viz",
			"vs",
			"want",
			"wants",
			"was",
			"wasn't",
			"way",
			"we",
			"we'd",
			"we'll",
			"we're",
			"we've",
			"welcome",
			"well",
			"went",
			"were",
			"weren't",
			"what",
			"what's",
			"whatever",
			"when",
			"whence",
			"whenever",
			"where",
			"where's",
			"whereafter",
			"whereas",
			"whereby",
			"wherein",
			"whereupon",
			"wherever",
			"whether",
			"which",
			"while",
			"whither",
			"who",
			"who's",
			"whoever",
			"whole",
			"whom",
			"whose",
			"why",
			"will",
			"willing",
			"wish",
			"with",
			"within",
			"without",
			"won't",
			"wonder",
			"would",
			"would",
			"wouldn't",
			"yes",
			"yet",
			"you",
			"you'd",
			"you'll",
			"you're",
			"you've",
			"your",
			"yours",
			"yourself",
			"yourselves",
			"zero")
		
  lazy val JavaStopWords = List(
			"abstract",
			"continue",
			"for",
			"new",
			"switch",
			"assert",
			"default",
			"goto",
			"package",
			"synchronized",
			"boolean",
			"do",
			"if",
			"private",
			"this",
			"break",
			"double",
			"implements",
			"protected",
			"throw",
			"byte",
			"else",
			"import",
			"public",
			"throws",
			"case",
			"enum",
			"instanceof",
			"return",
			"transient",
			"catch",
			"extends",
			"int",
			"short",
			"try",
			"char",
			"final",
			"interface",
			"static",
			"void",
			"class",
			"finally",
			"long",
			"strictfp",
			"volatile",
			"const",
			"float",
			"native",
			"super",
			"null",
			"exception",
			"string",
			"integer")
      
  lazy val CppStopWords = List(
      "alignas",
      "alignof",
      "and",
      "and_eq",
      "asm",
      "auto",
      "bitand",
      "bitor",
      "bool",
      "char16_t",
      "char32_t",
      "compl",
      "constexpr",
      "const_cast",
      "decltype",
      "delete",
      "dynamic_cast",
      "explicit",
      "export",
      "extern",
      "false",
      "friend",
      "inline",
      "mutable",
      "namespace",
      "noexcept",
      "not",
      "not_eq",
      "nullptr",
      "operator",
      "or",
      "or_eq",
      "override",
      "register",
      "reinterpret_cast",
      "signed",
      "sizeof",
      "static_assert",
      "static_cast",
      "struct",
      "template",
      "thread_local",
      "true",
      "typedef",
      "typeid",
      "typename",
      "union",
      "unsigned",
      "using",
      "virtual",
      "wchar_t",
      "while",
      "xor",
      "xor_eq")
      
  lazy val JavaScriptStopWords = List(
      "arguments",
      "debugger",
      "eval",
      "function",
      "in",
      "let",
      "typeof",
      "var",
      "with",
      "yield")
      
  lazy val ScalaStopWords = List(
      "def",
      "forSome",
      "lazy",
      "match",
      "object",
      "sealed",
      "trait",
      "type",
      "val")
      
  lazy val PythonStopWords = List(
       "and",
       "as",
       "assert",
       "del",
       "exec",
       "from",
       "global",
       "is",
       "lambda",
       "or",
       "pass",
       "print",
       "raise")
       
  lazy val CSharpStopWords = List(
       "base",
       "checked",
       "decimal",
       "delegate",
       "event",
       "fixed",
       "foreach",
       "implicit",
       "internal",
       "lock",
       "params",
       "readonly",
       "ref",
       "sbyte",
       "stackalloc",
       "uint",
       "ulong",
       "unchecked",
       "unsafe",
       "ushort",
       "using")
       
       
}